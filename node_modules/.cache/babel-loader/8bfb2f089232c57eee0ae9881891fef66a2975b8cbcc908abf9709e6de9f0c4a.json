{"ast":null,"code":"import defined from \"./defined.js\";\nlet _supportsFullscreen;\nconst _names = {\n  requestFullscreen: undefined,\n  exitFullscreen: undefined,\n  fullscreenEnabled: undefined,\n  fullscreenElement: undefined,\n  fullscreenchange: undefined,\n  fullscreenerror: undefined\n};\n\n/**\n * Browser-independent functions for working with the standard fullscreen API.\n *\n * @namespace Fullscreen\n *\n * @see {@link http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html|W3C Fullscreen Living Specification}\n */\nconst Fullscreen = {};\nObject.defineProperties(Fullscreen, {\n  /**\n   * The element that is currently fullscreen, if any.  To simply check if the\n   * browser is in fullscreen mode or not, use {@link Fullscreen#fullscreen}.\n   * @memberof Fullscreen\n   * @type {object}\n   * @readonly\n   */\n  element: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n      return document[_names.fullscreenElement];\n    }\n  },\n  /**\n   * The name of the event on the document that is fired when fullscreen is\n   * entered or exited.  This event name is intended for use with addEventListener.\n   * In your event handler, to determine if the browser is in fullscreen mode or not,\n   * use {@link Fullscreen#fullscreen}.\n   * @memberof Fullscreen\n   * @type {string}\n   * @readonly\n   */\n  changeEventName: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n      return _names.fullscreenchange;\n    }\n  },\n  /**\n   * The name of the event that is fired when a fullscreen error\n   * occurs.  This event name is intended for use with addEventListener.\n   * @memberof Fullscreen\n   * @type {string}\n   * @readonly\n   */\n  errorEventName: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n      return _names.fullscreenerror;\n    }\n  },\n  /**\n   * Determine whether the browser will allow an element to be made fullscreen, or not.\n   * For example, by default, iframes cannot go fullscreen unless the containing page\n   * adds an \"allowfullscreen\" attribute (or prefixed equivalent).\n   * @memberof Fullscreen\n   * @type {boolean}\n   * @readonly\n   */\n  enabled: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n      return document[_names.fullscreenEnabled];\n    }\n  },\n  /**\n   * Determines if the browser is currently in fullscreen mode.\n   * @memberof Fullscreen\n   * @type {boolean}\n   * @readonly\n   */\n  fullscreen: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n      return Fullscreen.element !== null;\n    }\n  }\n});\n\n/**\n * Detects whether the browser supports the standard fullscreen API.\n *\n * @returns {boolean} <code>true</code> if the browser supports the standard fullscreen API,\n * <code>false</code> otherwise.\n */\nFullscreen.supportsFullscreen = function () {\n  if (defined(_supportsFullscreen)) {\n    return _supportsFullscreen;\n  }\n  _supportsFullscreen = false;\n  const body = document.body;\n  if (typeof body.requestFullscreen === \"function\") {\n    // go with the unprefixed, standard set of names\n    _names.requestFullscreen = \"requestFullscreen\";\n    _names.exitFullscreen = \"exitFullscreen\";\n    _names.fullscreenEnabled = \"fullscreenEnabled\";\n    _names.fullscreenElement = \"fullscreenElement\";\n    _names.fullscreenchange = \"fullscreenchange\";\n    _names.fullscreenerror = \"fullscreenerror\";\n    _supportsFullscreen = true;\n    return _supportsFullscreen;\n  }\n\n  //check for the correct combination of prefix plus the various names that browsers use\n  const prefixes = [\"webkit\", \"moz\", \"o\", \"ms\", \"khtml\"];\n  let name;\n  for (let i = 0, len = prefixes.length; i < len; ++i) {\n    const prefix = prefixes[i];\n\n    // casing of Fullscreen differs across browsers\n    name = `${prefix}RequestFullscreen`;\n    if (typeof body[name] === \"function\") {\n      _names.requestFullscreen = name;\n      _supportsFullscreen = true;\n    } else {\n      name = `${prefix}RequestFullScreen`;\n      if (typeof body[name] === \"function\") {\n        _names.requestFullscreen = name;\n        _supportsFullscreen = true;\n      }\n    }\n\n    // disagreement about whether it's \"exit\" as per spec, or \"cancel\"\n    name = `${prefix}ExitFullscreen`;\n    if (typeof document[name] === \"function\") {\n      _names.exitFullscreen = name;\n    } else {\n      name = `${prefix}CancelFullScreen`;\n      if (typeof document[name] === \"function\") {\n        _names.exitFullscreen = name;\n      }\n    }\n\n    // casing of Fullscreen differs across browsers\n    name = `${prefix}FullscreenEnabled`;\n    if (document[name] !== undefined) {\n      _names.fullscreenEnabled = name;\n    } else {\n      name = `${prefix}FullScreenEnabled`;\n      if (document[name] !== undefined) {\n        _names.fullscreenEnabled = name;\n      }\n    }\n\n    // casing of Fullscreen differs across browsers\n    name = `${prefix}FullscreenElement`;\n    if (document[name] !== undefined) {\n      _names.fullscreenElement = name;\n    } else {\n      name = `${prefix}FullScreenElement`;\n      if (document[name] !== undefined) {\n        _names.fullscreenElement = name;\n      }\n    }\n\n    // thankfully, event names are all lowercase per spec\n    name = `${prefix}fullscreenchange`;\n    // event names do not have 'on' in the front, but the property on the document does\n    if (document[`on${name}`] !== undefined) {\n      //except on IE\n      if (prefix === \"ms\") {\n        name = \"MSFullscreenChange\";\n      }\n      _names.fullscreenchange = name;\n    }\n    name = `${prefix}fullscreenerror`;\n    if (document[`on${name}`] !== undefined) {\n      //except on IE\n      if (prefix === \"ms\") {\n        name = \"MSFullscreenError\";\n      }\n      _names.fullscreenerror = name;\n    }\n  }\n  return _supportsFullscreen;\n};\n\n/**\n * Asynchronously requests the browser to enter fullscreen mode on the given element.\n * If fullscreen mode is not supported by the browser, does nothing.\n *\n * @param {object} element The HTML element which will be placed into fullscreen mode.\n * @param {object} [vrDevice] The HMDVRDevice device.\n *\n * @example\n * // Put the entire page into fullscreen.\n * Cesium.Fullscreen.requestFullscreen(document.body)\n *\n * // Place only the Cesium canvas into fullscreen.\n * Cesium.Fullscreen.requestFullscreen(scene.canvas)\n */\nFullscreen.requestFullscreen = function (element, vrDevice) {\n  if (!Fullscreen.supportsFullscreen()) {\n    return;\n  }\n  element[_names.requestFullscreen]({\n    vrDisplay: vrDevice\n  });\n};\n\n/**\n * Asynchronously exits fullscreen mode.  If the browser is not currently\n * in fullscreen, or if fullscreen mode is not supported by the browser, does nothing.\n */\nFullscreen.exitFullscreen = function () {\n  if (!Fullscreen.supportsFullscreen()) {\n    return;\n  }\n  document[_names.exitFullscreen]();\n};\n\n//For unit tests\nFullscreen._names = _names;\nexport default Fullscreen;","map":{"version":3,"names":["defined","_supportsFullscreen","_names","requestFullscreen","undefined","exitFullscreen","fullscreenEnabled","fullscreenElement","fullscreenchange","fullscreenerror","Fullscreen","Object","defineProperties","element","get","supportsFullscreen","document","changeEventName","errorEventName","enabled","fullscreen","body","prefixes","name","i","len","length","prefix","vrDevice","vrDisplay"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/Fullscreen.js"],"sourcesContent":["import defined from \"./defined.js\";\n\nlet _supportsFullscreen;\nconst _names = {\n  requestFullscreen: undefined,\n  exitFullscreen: undefined,\n  fullscreenEnabled: undefined,\n  fullscreenElement: undefined,\n  fullscreenchange: undefined,\n  fullscreenerror: undefined,\n};\n\n/**\n * Browser-independent functions for working with the standard fullscreen API.\n *\n * @namespace Fullscreen\n *\n * @see {@link http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html|W3C Fullscreen Living Specification}\n */\nconst Fullscreen = {};\n\nObject.defineProperties(Fullscreen, {\n  /**\n   * The element that is currently fullscreen, if any.  To simply check if the\n   * browser is in fullscreen mode or not, use {@link Fullscreen#fullscreen}.\n   * @memberof Fullscreen\n   * @type {object}\n   * @readonly\n   */\n  element: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return document[_names.fullscreenElement];\n    },\n  },\n\n  /**\n   * The name of the event on the document that is fired when fullscreen is\n   * entered or exited.  This event name is intended for use with addEventListener.\n   * In your event handler, to determine if the browser is in fullscreen mode or not,\n   * use {@link Fullscreen#fullscreen}.\n   * @memberof Fullscreen\n   * @type {string}\n   * @readonly\n   */\n  changeEventName: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return _names.fullscreenchange;\n    },\n  },\n\n  /**\n   * The name of the event that is fired when a fullscreen error\n   * occurs.  This event name is intended for use with addEventListener.\n   * @memberof Fullscreen\n   * @type {string}\n   * @readonly\n   */\n  errorEventName: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return _names.fullscreenerror;\n    },\n  },\n\n  /**\n   * Determine whether the browser will allow an element to be made fullscreen, or not.\n   * For example, by default, iframes cannot go fullscreen unless the containing page\n   * adds an \"allowfullscreen\" attribute (or prefixed equivalent).\n   * @memberof Fullscreen\n   * @type {boolean}\n   * @readonly\n   */\n  enabled: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return document[_names.fullscreenEnabled];\n    },\n  },\n\n  /**\n   * Determines if the browser is currently in fullscreen mode.\n   * @memberof Fullscreen\n   * @type {boolean}\n   * @readonly\n   */\n  fullscreen: {\n    get: function () {\n      if (!Fullscreen.supportsFullscreen()) {\n        return undefined;\n      }\n\n      return Fullscreen.element !== null;\n    },\n  },\n});\n\n/**\n * Detects whether the browser supports the standard fullscreen API.\n *\n * @returns {boolean} <code>true</code> if the browser supports the standard fullscreen API,\n * <code>false</code> otherwise.\n */\nFullscreen.supportsFullscreen = function () {\n  if (defined(_supportsFullscreen)) {\n    return _supportsFullscreen;\n  }\n\n  _supportsFullscreen = false;\n\n  const body = document.body;\n  if (typeof body.requestFullscreen === \"function\") {\n    // go with the unprefixed, standard set of names\n    _names.requestFullscreen = \"requestFullscreen\";\n    _names.exitFullscreen = \"exitFullscreen\";\n    _names.fullscreenEnabled = \"fullscreenEnabled\";\n    _names.fullscreenElement = \"fullscreenElement\";\n    _names.fullscreenchange = \"fullscreenchange\";\n    _names.fullscreenerror = \"fullscreenerror\";\n    _supportsFullscreen = true;\n    return _supportsFullscreen;\n  }\n\n  //check for the correct combination of prefix plus the various names that browsers use\n  const prefixes = [\"webkit\", \"moz\", \"o\", \"ms\", \"khtml\"];\n  let name;\n  for (let i = 0, len = prefixes.length; i < len; ++i) {\n    const prefix = prefixes[i];\n\n    // casing of Fullscreen differs across browsers\n    name = `${prefix}RequestFullscreen`;\n    if (typeof body[name] === \"function\") {\n      _names.requestFullscreen = name;\n      _supportsFullscreen = true;\n    } else {\n      name = `${prefix}RequestFullScreen`;\n      if (typeof body[name] === \"function\") {\n        _names.requestFullscreen = name;\n        _supportsFullscreen = true;\n      }\n    }\n\n    // disagreement about whether it's \"exit\" as per spec, or \"cancel\"\n    name = `${prefix}ExitFullscreen`;\n    if (typeof document[name] === \"function\") {\n      _names.exitFullscreen = name;\n    } else {\n      name = `${prefix}CancelFullScreen`;\n      if (typeof document[name] === \"function\") {\n        _names.exitFullscreen = name;\n      }\n    }\n\n    // casing of Fullscreen differs across browsers\n    name = `${prefix}FullscreenEnabled`;\n    if (document[name] !== undefined) {\n      _names.fullscreenEnabled = name;\n    } else {\n      name = `${prefix}FullScreenEnabled`;\n      if (document[name] !== undefined) {\n        _names.fullscreenEnabled = name;\n      }\n    }\n\n    // casing of Fullscreen differs across browsers\n    name = `${prefix}FullscreenElement`;\n    if (document[name] !== undefined) {\n      _names.fullscreenElement = name;\n    } else {\n      name = `${prefix}FullScreenElement`;\n      if (document[name] !== undefined) {\n        _names.fullscreenElement = name;\n      }\n    }\n\n    // thankfully, event names are all lowercase per spec\n    name = `${prefix}fullscreenchange`;\n    // event names do not have 'on' in the front, but the property on the document does\n    if (document[`on${name}`] !== undefined) {\n      //except on IE\n      if (prefix === \"ms\") {\n        name = \"MSFullscreenChange\";\n      }\n      _names.fullscreenchange = name;\n    }\n\n    name = `${prefix}fullscreenerror`;\n    if (document[`on${name}`] !== undefined) {\n      //except on IE\n      if (prefix === \"ms\") {\n        name = \"MSFullscreenError\";\n      }\n      _names.fullscreenerror = name;\n    }\n  }\n\n  return _supportsFullscreen;\n};\n\n/**\n * Asynchronously requests the browser to enter fullscreen mode on the given element.\n * If fullscreen mode is not supported by the browser, does nothing.\n *\n * @param {object} element The HTML element which will be placed into fullscreen mode.\n * @param {object} [vrDevice] The HMDVRDevice device.\n *\n * @example\n * // Put the entire page into fullscreen.\n * Cesium.Fullscreen.requestFullscreen(document.body)\n *\n * // Place only the Cesium canvas into fullscreen.\n * Cesium.Fullscreen.requestFullscreen(scene.canvas)\n */\nFullscreen.requestFullscreen = function (element, vrDevice) {\n  if (!Fullscreen.supportsFullscreen()) {\n    return;\n  }\n\n  element[_names.requestFullscreen]({ vrDisplay: vrDevice });\n};\n\n/**\n * Asynchronously exits fullscreen mode.  If the browser is not currently\n * in fullscreen, or if fullscreen mode is not supported by the browser, does nothing.\n */\nFullscreen.exitFullscreen = function () {\n  if (!Fullscreen.supportsFullscreen()) {\n    return;\n  }\n\n  document[_names.exitFullscreen]();\n};\n\n//For unit tests\nFullscreen._names = _names;\nexport default Fullscreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}