{"ast":null,"code":"import Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport IonResource from \"../Core/IonResource.js\";\nimport GoogleMaps from \"../Core/GoogleMaps.js\";\nimport Resource from \"../Core/Resource.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport deprecationWarning from \"../Core/deprecationWarning.js\";\n\n/**\n * Creates a {@link Cesium3DTileset} instance for the Google Photorealistic 3D\n * Tiles tileset.\n *\n * Google Photorealistic 3D Tiles can only be used with the Google geocoder.  To\n * confirm that you are aware of this restriction pass\n * `usingOnlyWithGoogleGeocoder: true` to the apiOptions.  Otherwise a one time\n * warning will be displayed when this function is called.\n *\n * @function\n *\n * @param {object} [apiOptions]\n * @param {string} [apiOptions.key=GoogleMaps.defaultApiKey] Your API key to access Google Photorealistic 3D Tiles. See {@link https://developers.google.com/maps/documentation/javascript/get-api-key} for instructions on how to create your own key.\n * @param {true} [apiOptions.onlyUsingWithGoogleGeocoder] Confirmation that this tileset will only be used with the Google geocoder.\n * @param {Cesium3DTileset.ConstructorOptions} [tilesetOptions] An object describing initialization options.\n * @returns {Promise<Cesium3DTileset>}\n *\n * @see GoogleMaps\n *\n * @example\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   geocoder: Cesium.IonGeocodeProviderType.GOOGLE\n * });\n *\n * try {\n *   const tileset = await Cesium.createGooglePhotorealistic3DTileset({\n *      onlyUsingWithGoogleGeocoder: true,\n *   });\n *   viewer.scene.primitives.add(tileset));\n * } catch (error) {\n *   console.log(`Error creating tileset: ${error}`);\n * }\n *\n * @example\n * // Use your own Google Maps API key\n * Cesium.GoogleMaps.defaultApiKey = \"your-api-key\";\n *\n * const viewer = new Cesium.Viewer(\"cesiumContainer\". {\n *   geocoder: Cesium.IonGeocodeProviderType.GOOGLE\n * });\n *\n * try {\n *   const tileset = await Cesium.createGooglePhotorealistic3DTileset({\n *      onlyUsingWithGoogleGeocoder: true,\n *   });\n *   viewer.scene.primitives.add(tileset));\n * } catch (error) {\n *   console.log(`Error creating tileset: ${error}`);\n * }\n */\nasync function createGooglePhotorealistic3DTileset(apiOptions, tilesetOptions) {\n  tilesetOptions = defaultValue(tilesetOptions, {});\n  tilesetOptions.cacheBytes = defaultValue(tilesetOptions.cacheBytes, 1536 * 1024 * 1024);\n  tilesetOptions.maximumCacheOverflowBytes = defaultValue(tilesetOptions.maximumCacheOverflowBytes, 1024 * 1024 * 1024);\n  tilesetOptions.enableCollision = defaultValue(tilesetOptions.enableCollision, true);\n  apiOptions = defaultValue(apiOptions, defaultValue.EMPTY_OBJECT);\n  if (typeof apiOptions === \"string\") {\n    deprecationWarning(\"createGooglePhotorealistic3DTileset(key)\", \"createGooglePhotorealistic3DTileset(key) has been deprecated.   It is replaced by createGooglePhotorealistic3DTileset({key}).  It will be removed in Cesium 1.126.\");\n    apiOptions = {\n      key: apiOptions\n    };\n  }\n  if (!apiOptions.onlyUsingWithGoogleGeocoder) {\n    oneTimeWarning(\"google-tiles-with-google-geocoder\", \"Only the Google geocoder can be used with Google Photorealistic 3D Tiles.  Set the `geocode` property of Viewer constructor options.  You can set additionalOptions.onlyUsingWithGoogleGeocoder to hide this warning once you have configured the geocoder.\");\n  }\n  const key = defaultValue(apiOptions.key, GoogleMaps.defaultApiKey);\n  if (!defined(key)) {\n    return requestCachedIonTileset(tilesetOptions);\n  }\n  let credits;\n  const credit = GoogleMaps.getDefaultCredit();\n  if (defined(credit)) {\n    credits = [credit];\n  }\n  const resource = new Resource({\n    url: `${GoogleMaps.mapTilesApiEndpoint}3dtiles/root.json`,\n    queryParameters: {\n      key: key\n    },\n    credits: credits\n  });\n  return Cesium3DTileset.fromUrl(resource, tilesetOptions);\n}\nconst metadataCache = {};\nasync function requestCachedIonTileset(options) {\n  const ionAssetId = 2275207;\n  const cacheKey = ionAssetId;\n  let promise = metadataCache[cacheKey];\n  if (!defined(promise)) {\n    promise = IonResource.fromAssetId(ionAssetId);\n    metadataCache[cacheKey] = promise;\n  }\n  const resource = await promise;\n  return Cesium3DTileset.fromUrl(resource, options);\n}\nexport default createGooglePhotorealistic3DTileset;","map":{"version":3,"names":["Cesium3DTileset","defaultValue","defined","IonResource","GoogleMaps","Resource","oneTimeWarning","deprecationWarning","createGooglePhotorealistic3DTileset","apiOptions","tilesetOptions","cacheBytes","maximumCacheOverflowBytes","enableCollision","EMPTY_OBJECT","key","onlyUsingWithGoogleGeocoder","defaultApiKey","requestCachedIonTileset","credits","credit","getDefaultCredit","resource","url","mapTilesApiEndpoint","queryParameters","fromUrl","metadataCache","options","ionAssetId","cacheKey","promise","fromAssetId"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/createGooglePhotorealistic3DTileset.js"],"sourcesContent":["import Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport IonResource from \"../Core/IonResource.js\";\nimport GoogleMaps from \"../Core/GoogleMaps.js\";\nimport Resource from \"../Core/Resource.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport deprecationWarning from \"../Core/deprecationWarning.js\";\n\n/**\n * Creates a {@link Cesium3DTileset} instance for the Google Photorealistic 3D\n * Tiles tileset.\n *\n * Google Photorealistic 3D Tiles can only be used with the Google geocoder.  To\n * confirm that you are aware of this restriction pass\n * `usingOnlyWithGoogleGeocoder: true` to the apiOptions.  Otherwise a one time\n * warning will be displayed when this function is called.\n *\n * @function\n *\n * @param {object} [apiOptions]\n * @param {string} [apiOptions.key=GoogleMaps.defaultApiKey] Your API key to access Google Photorealistic 3D Tiles. See {@link https://developers.google.com/maps/documentation/javascript/get-api-key} for instructions on how to create your own key.\n * @param {true} [apiOptions.onlyUsingWithGoogleGeocoder] Confirmation that this tileset will only be used with the Google geocoder.\n * @param {Cesium3DTileset.ConstructorOptions} [tilesetOptions] An object describing initialization options.\n * @returns {Promise<Cesium3DTileset>}\n *\n * @see GoogleMaps\n *\n * @example\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   geocoder: Cesium.IonGeocodeProviderType.GOOGLE\n * });\n *\n * try {\n *   const tileset = await Cesium.createGooglePhotorealistic3DTileset({\n *      onlyUsingWithGoogleGeocoder: true,\n *   });\n *   viewer.scene.primitives.add(tileset));\n * } catch (error) {\n *   console.log(`Error creating tileset: ${error}`);\n * }\n *\n * @example\n * // Use your own Google Maps API key\n * Cesium.GoogleMaps.defaultApiKey = \"your-api-key\";\n *\n * const viewer = new Cesium.Viewer(\"cesiumContainer\". {\n *   geocoder: Cesium.IonGeocodeProviderType.GOOGLE\n * });\n *\n * try {\n *   const tileset = await Cesium.createGooglePhotorealistic3DTileset({\n *      onlyUsingWithGoogleGeocoder: true,\n *   });\n *   viewer.scene.primitives.add(tileset));\n * } catch (error) {\n *   console.log(`Error creating tileset: ${error}`);\n * }\n */\nasync function createGooglePhotorealistic3DTileset(apiOptions, tilesetOptions) {\n  tilesetOptions = defaultValue(tilesetOptions, {});\n  tilesetOptions.cacheBytes = defaultValue(\n    tilesetOptions.cacheBytes,\n    1536 * 1024 * 1024,\n  );\n  tilesetOptions.maximumCacheOverflowBytes = defaultValue(\n    tilesetOptions.maximumCacheOverflowBytes,\n    1024 * 1024 * 1024,\n  );\n  tilesetOptions.enableCollision = defaultValue(\n    tilesetOptions.enableCollision,\n    true,\n  );\n\n  apiOptions = defaultValue(apiOptions, defaultValue.EMPTY_OBJECT);\n  if (typeof apiOptions === \"string\") {\n    deprecationWarning(\n      \"createGooglePhotorealistic3DTileset(key)\",\n      \"createGooglePhotorealistic3DTileset(key) has been deprecated.   It is replaced by createGooglePhotorealistic3DTileset({key}).  It will be removed in Cesium 1.126.\",\n    );\n    apiOptions = { key: apiOptions };\n  }\n  if (!apiOptions.onlyUsingWithGoogleGeocoder) {\n    oneTimeWarning(\n      \"google-tiles-with-google-geocoder\",\n      \"Only the Google geocoder can be used with Google Photorealistic 3D Tiles.  Set the `geocode` property of Viewer constructor options.  You can set additionalOptions.onlyUsingWithGoogleGeocoder to hide this warning once you have configured the geocoder.\",\n    );\n  }\n\n  const key = defaultValue(apiOptions.key, GoogleMaps.defaultApiKey);\n  if (!defined(key)) {\n    return requestCachedIonTileset(tilesetOptions);\n  }\n\n  let credits;\n  const credit = GoogleMaps.getDefaultCredit();\n  if (defined(credit)) {\n    credits = [credit];\n  }\n\n  const resource = new Resource({\n    url: `${GoogleMaps.mapTilesApiEndpoint}3dtiles/root.json`,\n    queryParameters: {\n      key: key,\n    },\n    credits: credits,\n  });\n\n  return Cesium3DTileset.fromUrl(resource, tilesetOptions);\n}\n\nconst metadataCache = {};\nasync function requestCachedIonTileset(options) {\n  const ionAssetId = 2275207;\n  const cacheKey = ionAssetId;\n\n  let promise = metadataCache[cacheKey];\n  if (!defined(promise)) {\n    promise = IonResource.fromAssetId(ionAssetId);\n    metadataCache[cacheKey] = promise;\n  }\n\n  const resource = await promise;\n  return Cesium3DTileset.fromUrl(resource, options);\n}\n\nexport default createGooglePhotorealistic3DTileset;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}