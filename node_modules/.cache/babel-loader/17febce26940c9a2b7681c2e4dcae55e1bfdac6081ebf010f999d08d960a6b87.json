{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\n/**\n * A 4x4 matrix, indexable as a column-major order array.\n * Constructor parameters are in row-major order for code readability.\n * @alias Matrix4\n * @constructor\n * @implements {ArrayLike<number>}\n *\n * @param {number} [column0Row0=0.0] The value for column 0, row 0.\n * @param {number} [column1Row0=0.0] The value for column 1, row 0.\n * @param {number} [column2Row0=0.0] The value for column 2, row 0.\n * @param {number} [column3Row0=0.0] The value for column 3, row 0.\n * @param {number} [column0Row1=0.0] The value for column 0, row 1.\n * @param {number} [column1Row1=0.0] The value for column 1, row 1.\n * @param {number} [column2Row1=0.0] The value for column 2, row 1.\n * @param {number} [column3Row1=0.0] The value for column 3, row 1.\n * @param {number} [column0Row2=0.0] The value for column 0, row 2.\n * @param {number} [column1Row2=0.0] The value for column 1, row 2.\n * @param {number} [column2Row2=0.0] The value for column 2, row 2.\n * @param {number} [column3Row2=0.0] The value for column 3, row 2.\n * @param {number} [column0Row3=0.0] The value for column 0, row 3.\n * @param {number} [column1Row3=0.0] The value for column 1, row 3.\n * @param {number} [column2Row3=0.0] The value for column 2, row 3.\n * @param {number} [column3Row3=0.0] The value for column 3, row 3.\n *\n * @see Matrix4.fromArray\n * @see Matrix4.fromColumnMajorArray\n * @see Matrix4.fromRowMajorArray\n * @see Matrix4.fromRotationTranslation\n * @see Matrix4.fromTranslationQuaternionRotationScale\n * @see Matrix4.fromTranslationRotationScale\n * @see Matrix4.fromTranslation\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.fromRotation\n * @see Matrix4.fromCamera\n * @see Matrix4.computePerspectiveFieldOfView\n * @see Matrix4.computeOrthographicOffCenter\n * @see Matrix4.computePerspectiveOffCenter\n * @see Matrix4.computeInfinitePerspectiveOffCenter\n * @see Matrix4.computeViewportTransformation\n * @see Matrix4.computeView\n * @see Matrix2\n * @see Matrix3\n * @see Packable\n */\nfunction Matrix4(column0Row0, column1Row0, column2Row0, column3Row0, column0Row1, column1Row1, column2Row1, column3Row1, column0Row2, column1Row2, column2Row2, column3Row2, column0Row3, column1Row3, column2Row3, column3Row3) {\n  this[0] = defaultValue(column0Row0, 0.0);\n  this[1] = defaultValue(column0Row1, 0.0);\n  this[2] = defaultValue(column0Row2, 0.0);\n  this[3] = defaultValue(column0Row3, 0.0);\n  this[4] = defaultValue(column1Row0, 0.0);\n  this[5] = defaultValue(column1Row1, 0.0);\n  this[6] = defaultValue(column1Row2, 0.0);\n  this[7] = defaultValue(column1Row3, 0.0);\n  this[8] = defaultValue(column2Row0, 0.0);\n  this[9] = defaultValue(column2Row1, 0.0);\n  this[10] = defaultValue(column2Row2, 0.0);\n  this[11] = defaultValue(column2Row3, 0.0);\n  this[12] = defaultValue(column3Row0, 0.0);\n  this[13] = defaultValue(column3Row1, 0.0);\n  this[14] = defaultValue(column3Row2, 0.0);\n  this[15] = defaultValue(column3Row3, 0.0);\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nMatrix4.packedLength = 16;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Matrix4} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nMatrix4.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value[0];\n  array[startingIndex++] = value[1];\n  array[startingIndex++] = value[2];\n  array[startingIndex++] = value[3];\n  array[startingIndex++] = value[4];\n  array[startingIndex++] = value[5];\n  array[startingIndex++] = value[6];\n  array[startingIndex++] = value[7];\n  array[startingIndex++] = value[8];\n  array[startingIndex++] = value[9];\n  array[startingIndex++] = value[10];\n  array[startingIndex++] = value[11];\n  array[startingIndex++] = value[12];\n  array[startingIndex++] = value[13];\n  array[startingIndex++] = value[14];\n  array[startingIndex] = value[15];\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Matrix4} [result] The object into which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n */\nMatrix4.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n  result[0] = array[startingIndex++];\n  result[1] = array[startingIndex++];\n  result[2] = array[startingIndex++];\n  result[3] = array[startingIndex++];\n  result[4] = array[startingIndex++];\n  result[5] = array[startingIndex++];\n  result[6] = array[startingIndex++];\n  result[7] = array[startingIndex++];\n  result[8] = array[startingIndex++];\n  result[9] = array[startingIndex++];\n  result[10] = array[startingIndex++];\n  result[11] = array[startingIndex++];\n  result[12] = array[startingIndex++];\n  result[13] = array[startingIndex++];\n  result[14] = array[startingIndex++];\n  result[15] = array[startingIndex];\n  return result;\n};\n\n/**\n * Flattens an array of Matrix4s into an array of components. The components\n * are stored in column-major order.\n *\n * @param {Matrix4[]} array The array of matrices to pack.\n * @param {number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 16 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 16) elements.\n * @returns {number[]} The packed array.\n */\nMatrix4.packArray = function (array, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  const resultLength = length * 16;\n  if (!defined(result)) {\n    result = new Array(resultLength);\n  } else if (!Array.isArray(result) && result.length !== resultLength) {\n    //>>includeStart('debug', pragmas.debug);\n    throw new DeveloperError(\"If result is a typed array, it must have exactly array.length * 16 elements\");\n    //>>includeEnd('debug');\n  } else if (result.length !== resultLength) {\n    result.length = resultLength;\n  }\n  for (let i = 0; i < length; ++i) {\n    Matrix4.pack(array[i], result, i * 16);\n  }\n  return result;\n};\n\n/**\n * Unpacks an array of column-major matrix components into an array of Matrix4s.\n *\n * @param {number[]} array The array of components to unpack.\n * @param {Matrix4[]} [result] The array onto which to store the result.\n * @returns {Matrix4[]} The unpacked array.\n */\nMatrix4.unpackArray = function (array, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  Check.typeOf.number.greaterThanOrEquals(\"array.length\", array.length, 16);\n  if (array.length % 16 !== 0) {\n    throw new DeveloperError(\"array length must be a multiple of 16.\");\n  }\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  if (!defined(result)) {\n    result = new Array(length / 16);\n  } else {\n    result.length = length / 16;\n  }\n  for (let i = 0; i < length; i += 16) {\n    const index = i / 16;\n    result[index] = Matrix4.unpack(array, i, result[index]);\n  }\n  return result;\n};\n\n/**\n * Duplicates a Matrix4 instance.\n *\n * @param {Matrix4} matrix The matrix to duplicate.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. (Returns undefined if matrix is undefined)\n */\nMatrix4.clone = function (matrix, result) {\n  if (!defined(matrix)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Matrix4(matrix[0], matrix[4], matrix[8], matrix[12], matrix[1], matrix[5], matrix[9], matrix[13], matrix[2], matrix[6], matrix[10], matrix[14], matrix[3], matrix[7], matrix[11], matrix[15]);\n  }\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Creates a Matrix4 from 16 consecutive elements in an array.\n * @function\n *\n * @param {number[]} array The array whose 16 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\n * @param {number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Create the Matrix4:\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n *\n * const v = [1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\n * const m = Cesium.Matrix4.fromArray(v);\n *\n * // Create same Matrix4 with using an offset into an array\n * const v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\n * const m2 = Cesium.Matrix4.fromArray(v2, 2);\n */\nMatrix4.fromArray = Matrix4.unpack;\n\n/**\n * Computes a Matrix4 instance from a column-major order array.\n *\n * @param {number[]} values The column-major order array.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromColumnMajorArray = function (values, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"values\", values);\n  //>>includeEnd('debug');\n\n  return Matrix4.clone(values, result);\n};\n\n/**\n * Computes a Matrix4 instance from a row-major order array.\n * The resulting matrix will be in column-major order.\n *\n * @param {number[]} values The row-major order array.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromRowMajorArray = function (values, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"values\", values);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15]);\n  }\n  result[0] = values[0];\n  result[1] = values[4];\n  result[2] = values[8];\n  result[3] = values[12];\n  result[4] = values[1];\n  result[5] = values[5];\n  result[6] = values[9];\n  result[7] = values[13];\n  result[8] = values[2];\n  result[9] = values[6];\n  result[10] = values[10];\n  result[11] = values[14];\n  result[12] = values[3];\n  result[13] = values[7];\n  result[14] = values[11];\n  result[15] = values[15];\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance from a Matrix3 representing the rotation\n * and a Cartesian3 representing the translation.\n *\n * @param {Matrix3} rotation The upper left portion of the matrix representing the rotation.\n * @param {Cartesian3} [translation=Cartesian3.ZERO] The upper right portion of the matrix representing the translation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromRotationTranslation = function (rotation, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rotation\", rotation);\n  //>>includeEnd('debug');\n\n  translation = defaultValue(translation, Cartesian3.ZERO);\n  if (!defined(result)) {\n    return new Matrix4(rotation[0], rotation[3], rotation[6], translation.x, rotation[1], rotation[4], rotation[7], translation.y, rotation[2], rotation[5], rotation[8], translation.z, 0.0, 0.0, 0.0, 1.0);\n  }\n  result[0] = rotation[0];\n  result[1] = rotation[1];\n  result[2] = rotation[2];\n  result[3] = 0.0;\n  result[4] = rotation[3];\n  result[5] = rotation[4];\n  result[6] = rotation[5];\n  result[7] = 0.0;\n  result[8] = rotation[6];\n  result[9] = rotation[7];\n  result[10] = rotation[8];\n  result[11] = 0.0;\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance from a translation, rotation, and scale (TRS)\n * representation with the rotation represented as a quaternion.\n *\n * @param {Cartesian3} translation The translation transformation.\n * @param {Quaternion} rotation The rotation transformation.\n * @param {Cartesian3} scale The non-uniform scale transformation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * const result = Cesium.Matrix4.fromTranslationQuaternionRotationScale(\n *   new Cesium.Cartesian3(1.0, 2.0, 3.0), // translation\n *   Cesium.Quaternion.IDENTITY,           // rotation\n *   new Cesium.Cartesian3(7.0, 8.0, 9.0), // scale\n *   result);\n */\nMatrix4.fromTranslationQuaternionRotationScale = function (translation, rotation, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"rotation\", rotation);\n  Check.typeOf.object(\"scale\", scale);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n  const scaleX = scale.x;\n  const scaleY = scale.y;\n  const scaleZ = scale.z;\n  const x2 = rotation.x * rotation.x;\n  const xy = rotation.x * rotation.y;\n  const xz = rotation.x * rotation.z;\n  const xw = rotation.x * rotation.w;\n  const y2 = rotation.y * rotation.y;\n  const yz = rotation.y * rotation.z;\n  const yw = rotation.y * rotation.w;\n  const z2 = rotation.z * rotation.z;\n  const zw = rotation.z * rotation.w;\n  const w2 = rotation.w * rotation.w;\n  const m00 = x2 - y2 - z2 + w2;\n  const m01 = 2.0 * (xy - zw);\n  const m02 = 2.0 * (xz + yw);\n  const m10 = 2.0 * (xy + zw);\n  const m11 = -x2 + y2 - z2 + w2;\n  const m12 = 2.0 * (yz - xw);\n  const m20 = 2.0 * (xz - yw);\n  const m21 = 2.0 * (yz + xw);\n  const m22 = -x2 - y2 + z2 + w2;\n  result[0] = m00 * scaleX;\n  result[1] = m10 * scaleX;\n  result[2] = m20 * scaleX;\n  result[3] = 0.0;\n  result[4] = m01 * scaleY;\n  result[5] = m11 * scaleY;\n  result[6] = m21 * scaleY;\n  result[7] = 0.0;\n  result[8] = m02 * scaleZ;\n  result[9] = m12 * scaleZ;\n  result[10] = m22 * scaleZ;\n  result[11] = 0.0;\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Creates a Matrix4 instance from a {@link TranslationRotationScale} instance.\n *\n * @param {TranslationRotationScale} translationRotationScale The instance.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromTranslationRotationScale = function (translationRotationScale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translationRotationScale\", translationRotationScale);\n  //>>includeEnd('debug');\n\n  return Matrix4.fromTranslationQuaternionRotationScale(translationRotationScale.translation, translationRotationScale.rotation, translationRotationScale.scale, result);\n};\n\n/**\n * Creates a Matrix4 instance from a Cartesian3 representing the translation.\n *\n * @param {Cartesian3} translation The upper right portion of the matrix representing the translation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @see Matrix4.multiplyByTranslation\n */\nMatrix4.fromTranslation = function (translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translation\", translation);\n  //>>includeEnd('debug');\n\n  return Matrix4.fromRotationTranslation(Matrix3.IDENTITY, translation, result);\n};\n\n/**\n * Computes a Matrix4 instance representing a non-uniform scale.\n *\n * @param {Cartesian3} scale The x, y, and z scale factors.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Creates\n * //   [7.0, 0.0, 0.0, 0.0]\n * //   [0.0, 8.0, 0.0, 0.0]\n * //   [0.0, 0.0, 9.0, 0.0]\n * //   [0.0, 0.0, 0.0, 1.0]\n * const m = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));\n */\nMatrix4.fromScale = function (scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"scale\", scale);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(scale.x, 0.0, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, 0.0, scale.z, 0.0, 0.0, 0.0, 0.0, 1.0);\n  }\n  result[0] = scale.x;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = scale.y;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = scale.z;\n  result[11] = 0.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = 0.0;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing a uniform scale.\n *\n * @param {number} scale The uniform scale factor.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Creates\n * //   [2.0, 0.0, 0.0, 0.0]\n * //   [0.0, 2.0, 0.0, 0.0]\n * //   [0.0, 0.0, 2.0, 0.0]\n * //   [0.0, 0.0, 0.0, 1.0]\n * const m = Cesium.Matrix4.fromUniformScale(2.0);\n */\nMatrix4.fromUniformScale = function (scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"scale\", scale);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(scale, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, 1.0);\n  }\n  result[0] = scale;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = scale;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = scale;\n  result[11] = 0.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = 0.0;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Creates a rotation matrix.\n *\n * @param {Matrix3} rotation The rotation matrix.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromRotation = function (rotation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rotation\", rotation);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n  result[0] = rotation[0];\n  result[1] = rotation[1];\n  result[2] = rotation[2];\n  result[3] = 0.0;\n  result[4] = rotation[3];\n  result[5] = rotation[4];\n  result[6] = rotation[5];\n  result[7] = 0.0;\n  result[8] = rotation[6];\n  result[9] = rotation[7];\n  result[10] = rotation[8];\n  result[11] = 0.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = 0.0;\n  result[15] = 1.0;\n  return result;\n};\nconst fromCameraF = new Cartesian3();\nconst fromCameraR = new Cartesian3();\nconst fromCameraU = new Cartesian3();\n\n/**\n * Computes a Matrix4 instance from a Camera.\n *\n * @param {Camera} camera The camera to use.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromCamera = function (camera, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"camera\", camera);\n  //>>includeEnd('debug');\n\n  const position = camera.position;\n  const direction = camera.direction;\n  const up = camera.up;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"camera.position\", position);\n  Check.typeOf.object(\"camera.direction\", direction);\n  Check.typeOf.object(\"camera.up\", up);\n  //>>includeEnd('debug');\n\n  Cartesian3.normalize(direction, fromCameraF);\n  Cartesian3.normalize(Cartesian3.cross(fromCameraF, up, fromCameraR), fromCameraR);\n  Cartesian3.normalize(Cartesian3.cross(fromCameraR, fromCameraF, fromCameraU), fromCameraU);\n  const sX = fromCameraR.x;\n  const sY = fromCameraR.y;\n  const sZ = fromCameraR.z;\n  const fX = fromCameraF.x;\n  const fY = fromCameraF.y;\n  const fZ = fromCameraF.z;\n  const uX = fromCameraU.x;\n  const uY = fromCameraU.y;\n  const uZ = fromCameraU.z;\n  const positionX = position.x;\n  const positionY = position.y;\n  const positionZ = position.z;\n  const t0 = sX * -positionX + sY * -positionY + sZ * -positionZ;\n  const t1 = uX * -positionX + uY * -positionY + uZ * -positionZ;\n  const t2 = fX * positionX + fY * positionY + fZ * positionZ;\n\n  // The code below this comment is an optimized\n  // version of the commented lines.\n  // Rather that create two matrices and then multiply,\n  // we just bake in the multiplcation as part of creation.\n  // const rotation = new Matrix4(\n  //                 sX,  sY,  sZ, 0.0,\n  //                 uX,  uY,  uZ, 0.0,\n  //                -fX, -fY, -fZ, 0.0,\n  //                 0.0,  0.0,  0.0, 1.0);\n  // const translation = new Matrix4(\n  //                 1.0, 0.0, 0.0, -position.x,\n  //                 0.0, 1.0, 0.0, -position.y,\n  //                 0.0, 0.0, 1.0, -position.z,\n  //                 0.0, 0.0, 0.0, 1.0);\n  // return rotation.multiply(translation);\n  if (!defined(result)) {\n    return new Matrix4(sX, sY, sZ, t0, uX, uY, uZ, t1, -fX, -fY, -fZ, t2, 0.0, 0.0, 0.0, 1.0);\n  }\n  result[0] = sX;\n  result[1] = uX;\n  result[2] = -fX;\n  result[3] = 0.0;\n  result[4] = sY;\n  result[5] = uY;\n  result[6] = -fY;\n  result[7] = 0.0;\n  result[8] = sZ;\n  result[9] = uZ;\n  result[10] = -fZ;\n  result[11] = 0.0;\n  result[12] = t0;\n  result[13] = t1;\n  result[14] = t2;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing a perspective transformation matrix.\n *\n * @param {number} fovY The field of view along the Y axis in radians.\n * @param {number} aspectRatio The aspect ratio.\n * @param {number} near The distance to the near plane in meters.\n * @param {number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} fovY must be in (0, PI].\n * @exception {DeveloperError} aspectRatio must be greater than zero.\n * @exception {DeveloperError} near must be greater than zero.\n * @exception {DeveloperError} far must be greater than zero.\n */\nMatrix4.computePerspectiveFieldOfView = function (fovY, aspectRatio, near, far, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"fovY\", fovY, 0.0);\n  Check.typeOf.number.lessThan(\"fovY\", fovY, Math.PI);\n  Check.typeOf.number.greaterThan(\"near\", near, 0.0);\n  Check.typeOf.number.greaterThan(\"far\", far, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const bottom = Math.tan(fovY * 0.5);\n  const column1Row1 = 1.0 / bottom;\n  const column0Row0 = column1Row1 / aspectRatio;\n  const column2Row2 = (far + near) / (near - far);\n  const column3Row2 = 2.0 * far * near / (near - far);\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = column2Row2;\n  result[11] = -1.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing an orthographic transformation matrix.\n *\n * @param {number} left The number of meters to the left of the camera that will be in view.\n * @param {number} right The number of meters to the right of the camera that will be in view.\n * @param {number} bottom The number of meters below of the camera that will be in view.\n * @param {number} top The number of meters above of the camera that will be in view.\n * @param {number} near The distance to the near plane in meters.\n * @param {number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computeOrthographicOffCenter = function (left, right, bottom, top, near, far, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.number(\"far\", far);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  let a = 1.0 / (right - left);\n  let b = 1.0 / (top - bottom);\n  let c = 1.0 / (far - near);\n  const tx = -(right + left) * a;\n  const ty = -(top + bottom) * b;\n  const tz = -(far + near) * c;\n  a *= 2.0;\n  b *= 2.0;\n  c *= -2.0;\n  result[0] = a;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = b;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = c;\n  result[11] = 0.0;\n  result[12] = tx;\n  result[13] = ty;\n  result[14] = tz;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing an off center perspective transformation.\n *\n * @param {number} left The number of meters to the left of the camera that will be in view.\n * @param {number} right The number of meters to the right of the camera that will be in view.\n * @param {number} bottom The number of meters below the camera that will be in view.\n * @param {number} top The number of meters above the camera that will be in view.\n * @param {number} near The distance to the near plane in meters.\n * @param {number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computePerspectiveOffCenter = function (left, right, bottom, top, near, far, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.number(\"far\", far);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const column0Row0 = 2.0 * near / (right - left);\n  const column1Row1 = 2.0 * near / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -(far + near) / (far - near);\n  const column2Row3 = -1.0;\n  const column3Row2 = -2.0 * far * near / (far - near);\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing an infinite off center perspective transformation.\n *\n * @param {number} left The number of meters to the left of the camera that will be in view.\n * @param {number} right The number of meters to the right of the camera that will be in view.\n * @param {number} bottom The number of meters below of the camera that will be in view.\n * @param {number} top The number of meters above of the camera that will be in view.\n * @param {number} near The distance to the near plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computeInfinitePerspectiveOffCenter = function (left, right, bottom, top, near, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const column0Row0 = 2.0 * near / (right - left);\n  const column1Row1 = 2.0 * near / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -1.0;\n  const column2Row3 = -1.0;\n  const column3Row2 = -2.0 * near;\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance that transforms from normalized device coordinates to window coordinates.\n *\n * @param {object} [viewport = { x : 0.0, y : 0.0, width : 0.0, height : 0.0 }] The viewport's corners as shown in Example 1.\n * @param {number} [nearDepthRange=0.0] The near plane distance in window coordinates.\n * @param {number} [farDepthRange=1.0] The far plane distance in window coordinates.\n * @param {Matrix4} [result] The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Create viewport transformation using an explicit viewport and depth range.\n * const m = Cesium.Matrix4.computeViewportTransformation({\n *     x : 0.0,\n *     y : 0.0,\n *     width : 1024.0,\n *     height : 768.0\n * }, 0.0, 1.0, new Cesium.Matrix4());\n */\nMatrix4.computeViewportTransformation = function (viewport, nearDepthRange, farDepthRange, result) {\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n  viewport = defaultValue(viewport, defaultValue.EMPTY_OBJECT);\n  const x = defaultValue(viewport.x, 0.0);\n  const y = defaultValue(viewport.y, 0.0);\n  const width = defaultValue(viewport.width, 0.0);\n  const height = defaultValue(viewport.height, 0.0);\n  nearDepthRange = defaultValue(nearDepthRange, 0.0);\n  farDepthRange = defaultValue(farDepthRange, 1.0);\n  const halfWidth = width * 0.5;\n  const halfHeight = height * 0.5;\n  const halfDepth = (farDepthRange - nearDepthRange) * 0.5;\n  const column0Row0 = halfWidth;\n  const column1Row1 = halfHeight;\n  const column2Row2 = halfDepth;\n  const column3Row0 = x + halfWidth;\n  const column3Row1 = y + halfHeight;\n  const column3Row2 = nearDepthRange + halfDepth;\n  const column3Row3 = 1.0;\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = column3Row3;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance that transforms from world space to view space.\n *\n * @param {Cartesian3} position The position of the camera.\n * @param {Cartesian3} direction The forward direction.\n * @param {Cartesian3} up The up direction.\n * @param {Cartesian3} right The right direction.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computeView = function (position, direction, up, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"position\", position);\n  Check.typeOf.object(\"direction\", direction);\n  Check.typeOf.object(\"up\", up);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = right.x;\n  result[1] = up.x;\n  result[2] = -direction.x;\n  result[3] = 0.0;\n  result[4] = right.y;\n  result[5] = up.y;\n  result[6] = -direction.y;\n  result[7] = 0.0;\n  result[8] = right.z;\n  result[9] = up.z;\n  result[10] = -direction.z;\n  result[11] = 0.0;\n  result[12] = -Cartesian3.dot(right, position);\n  result[13] = -Cartesian3.dot(up, position);\n  result[14] = Cartesian3.dot(direction, position);\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes an Array from the provided Matrix4 instance.\n * The array will be in column-major order.\n *\n * @param {Matrix4} matrix The matrix to use..\n * @param {number[]} [result] The Array onto which to store the result.\n * @returns {number[]} The modified Array parameter or a new Array instance if one was not provided.\n *\n * @example\n * //create an array from an instance of Matrix4\n * // m = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n * const a = Cesium.Matrix4.toArray(m);\n *\n * // m remains the same\n * //creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]\n */\nMatrix4.toArray = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return [matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5], matrix[6], matrix[7], matrix[8], matrix[9], matrix[10], matrix[11], matrix[12], matrix[13], matrix[14], matrix[15]];\n  }\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Computes the array index of the element at the provided row and column.\n *\n * @param {number} row The zero-based index of the row.\n * @param {number} column The zero-based index of the column.\n * @returns {number} The index of the element at the provided row and column.\n *\n * @exception {DeveloperError} row must be 0, 1, 2, or 3.\n * @exception {DeveloperError} column must be 0, 1, 2, or 3.\n *\n * @example\n * const myMatrix = new Cesium.Matrix4();\n * const column1Row0Index = Cesium.Matrix4.getElementIndex(1, 0);\n * const column1Row0 = myMatrix[column1Row0Index];\n * myMatrix[column1Row0Index] = 10.0;\n */\nMatrix4.getElementIndex = function (column, row) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"row\", row, 0);\n  Check.typeOf.number.lessThanOrEquals(\"row\", row, 3);\n  Check.typeOf.number.greaterThanOrEquals(\"column\", column, 0);\n  Check.typeOf.number.lessThanOrEquals(\"column\", column, 3);\n  //>>includeEnd('debug');\n\n  return column * 4 + row;\n};\n\n/**\n * Retrieves a copy of the matrix column at the provided index as a Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {number} index The zero-based index of the column to retrieve.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //returns a Cartesian4 instance with values from the specified column\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * //Example 1: Creates an instance of Cartesian\n * const a = Cesium.Matrix4.getColumn(m, 2, new Cesium.Cartesian4());\n *\n * @example\n * //Example 2: Sets values for Cartesian instance\n * const a = new Cesium.Cartesian4();\n * Cesium.Matrix4.getColumn(m, 2, a);\n *\n * // a.x = 12.0; a.y = 16.0; a.z = 20.0; a.w = 24.0;\n */\nMatrix4.getColumn = function (matrix, index, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const startIndex = index * 4;\n  const x = matrix[startIndex];\n  const y = matrix[startIndex + 1];\n  const z = matrix[startIndex + 2];\n  const w = matrix[startIndex + 3];\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {number} index The zero-based index of the column to set.\n * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified column.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //creates a new Matrix4 instance with new column values from the Cartesian4 instance\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * const a = Cesium.Matrix4.setColumn(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 11.0, 99.0, 13.0]\n * //     [14.0, 15.0, 98.0, 17.0]\n * //     [18.0, 19.0, 97.0, 21.0]\n * //     [22.0, 23.0, 96.0, 25.0]\n */\nMatrix4.setColumn = function (matrix, index, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result = Matrix4.clone(matrix, result);\n  const startIndex = index * 4;\n  result[startIndex] = cartesian.x;\n  result[startIndex + 1] = cartesian.y;\n  result[startIndex + 2] = cartesian.z;\n  result[startIndex + 3] = cartesian.w;\n  return result;\n};\n\n/**\n * Retrieves a copy of the matrix row at the provided index as a Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {number} index The zero-based index of the row to retrieve.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //returns a Cartesian4 instance with values from the specified column\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * //Example 1: Returns an instance of Cartesian\n * const a = Cesium.Matrix4.getRow(m, 2, new Cesium.Cartesian4());\n *\n * @example\n * //Example 2: Sets values for a Cartesian instance\n * const a = new Cesium.Cartesian4();\n * Cesium.Matrix4.getRow(m, 2, a);\n *\n * // a.x = 18.0; a.y = 19.0; a.z = 20.0; a.w = 21.0;\n */\nMatrix4.getRow = function (matrix, index, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const x = matrix[index];\n  const y = matrix[index + 4];\n  const z = matrix[index + 8];\n  const w = matrix[index + 12];\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {number} index The zero-based index of the row to set.\n * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified row.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //create a new Matrix4 instance with new row values from the Cartesian4 instance\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * const a = Cesium.Matrix4.setRow(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [99.0, 98.0, 97.0, 96.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n */\nMatrix4.setRow = function (matrix, index, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result = Matrix4.clone(matrix, result);\n  result[index] = cartesian.x;\n  result[index + 4] = cartesian.y;\n  result[index + 8] = cartesian.z;\n  result[index + 12] = cartesian.w;\n  return result;\n};\n\n/**\n * Computes a new matrix that replaces the translation in the rightmost column of the provided\n * matrix with the provided translation. This assumes the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} translation The translation that replaces the translation of the provided matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.setTranslation = function (matrix, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = matrix[15];\n  return result;\n};\nconst scaleScratch1 = new Cartesian3();\n\n/**\n * Computes a new matrix that replaces the scale with the provided scale.\n * This assumes the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} scale The scale that replaces the scale of the provided matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @see Matrix4.setUniformScale\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.multiplyByScale\n * @see Matrix4.multiplyByUniformScale\n * @see Matrix4.getScale\n */\nMatrix4.setScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const existingScale = Matrix4.getScale(matrix, scaleScratch1);\n  const scaleRatioX = scale.x / existingScale.x;\n  const scaleRatioY = scale.y / existingScale.y;\n  const scaleRatioZ = scale.z / existingScale.z;\n  result[0] = matrix[0] * scaleRatioX;\n  result[1] = matrix[1] * scaleRatioX;\n  result[2] = matrix[2] * scaleRatioX;\n  result[3] = matrix[3];\n  result[4] = matrix[4] * scaleRatioY;\n  result[5] = matrix[5] * scaleRatioY;\n  result[6] = matrix[6] * scaleRatioY;\n  result[7] = matrix[7];\n  result[8] = matrix[8] * scaleRatioZ;\n  result[9] = matrix[9] * scaleRatioZ;\n  result[10] = matrix[10] * scaleRatioZ;\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\nconst scaleScratch2 = new Cartesian3();\n\n/**\n * Computes a new matrix that replaces the scale with the provided uniform scale.\n * This assumes the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {number} scale The uniform scale that replaces the scale of the provided matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @see Matrix4.setScale\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.multiplyByScale\n * @see Matrix4.multiplyByUniformScale\n * @see Matrix4.getScale\n */\nMatrix4.setUniformScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const existingScale = Matrix4.getScale(matrix, scaleScratch2);\n  const scaleRatioX = scale / existingScale.x;\n  const scaleRatioY = scale / existingScale.y;\n  const scaleRatioZ = scale / existingScale.z;\n  result[0] = matrix[0] * scaleRatioX;\n  result[1] = matrix[1] * scaleRatioX;\n  result[2] = matrix[2] * scaleRatioX;\n  result[3] = matrix[3];\n  result[4] = matrix[4] * scaleRatioY;\n  result[5] = matrix[5] * scaleRatioY;\n  result[6] = matrix[6] * scaleRatioY;\n  result[7] = matrix[7];\n  result[8] = matrix[8] * scaleRatioZ;\n  result[9] = matrix[9] * scaleRatioZ;\n  result[10] = matrix[10] * scaleRatioZ;\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\nconst scratchColumn = new Cartesian3();\n\n/**\n * Extracts the non-uniform scale assuming the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter\n *\n * @see Matrix4.multiplyByScale\n * @see Matrix4.multiplyByUniformScale\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.setScale\n * @see Matrix4.setUniformScale\n */\nMatrix4.getScale = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Cartesian3.magnitude(Cartesian3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn));\n  result.y = Cartesian3.magnitude(Cartesian3.fromElements(matrix[4], matrix[5], matrix[6], scratchColumn));\n  result.z = Cartesian3.magnitude(Cartesian3.fromElements(matrix[8], matrix[9], matrix[10], scratchColumn));\n  return result;\n};\nconst scaleScratch3 = new Cartesian3();\n\n/**\n * Computes the maximum scale assuming the matrix is an affine transformation.\n * The maximum scale is the maximum length of the column vectors in the upper-left\n * 3x3 matrix.\n *\n * @param {Matrix4} matrix The matrix.\n * @returns {number} The maximum scale.\n */\nMatrix4.getMaximumScale = function (matrix) {\n  Matrix4.getScale(matrix, scaleScratch3);\n  return Cartesian3.maximumComponent(scaleScratch3);\n};\nconst scaleScratch4 = new Cartesian3();\n\n/**\n * Sets the rotation assuming the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Matrix3} rotation The rotation matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @see Matrix4.fromRotation\n * @see Matrix4.getRotation\n */\nMatrix4.setRotation = function (matrix, rotation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const scale = Matrix4.getScale(matrix, scaleScratch4);\n  result[0] = rotation[0] * scale.x;\n  result[1] = rotation[1] * scale.x;\n  result[2] = rotation[2] * scale.x;\n  result[3] = matrix[3];\n  result[4] = rotation[3] * scale.y;\n  result[5] = rotation[4] * scale.y;\n  result[6] = rotation[5] * scale.y;\n  result[7] = matrix[7];\n  result[8] = rotation[6] * scale.z;\n  result[9] = rotation[7] * scale.z;\n  result[10] = rotation[8] * scale.z;\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\nconst scaleScratch5 = new Cartesian3();\n\n/**\n * Extracts the rotation matrix assuming the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Matrix3} result The object onto which to store the result.\n * @returns {Matrix3} The modified result parameter.\n *\n * @see Matrix4.setRotation\n * @see Matrix4.fromRotation\n */\nMatrix4.getRotation = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const scale = Matrix4.getScale(matrix, scaleScratch5);\n  result[0] = matrix[0] / scale.x;\n  result[1] = matrix[1] / scale.x;\n  result[2] = matrix[2] / scale.x;\n  result[3] = matrix[4] / scale.y;\n  result[4] = matrix[5] / scale.y;\n  result[5] = matrix[6] / scale.y;\n  result[6] = matrix[8] / scale.z;\n  result[7] = matrix[9] / scale.z;\n  result[8] = matrix[10] / scale.z;\n  return result;\n};\n\n/**\n * Computes the product of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.multiply = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const left0 = left[0];\n  const left1 = left[1];\n  const left2 = left[2];\n  const left3 = left[3];\n  const left4 = left[4];\n  const left5 = left[5];\n  const left6 = left[6];\n  const left7 = left[7];\n  const left8 = left[8];\n  const left9 = left[9];\n  const left10 = left[10];\n  const left11 = left[11];\n  const left12 = left[12];\n  const left13 = left[13];\n  const left14 = left[14];\n  const left15 = left[15];\n  const right0 = right[0];\n  const right1 = right[1];\n  const right2 = right[2];\n  const right3 = right[3];\n  const right4 = right[4];\n  const right5 = right[5];\n  const right6 = right[6];\n  const right7 = right[7];\n  const right8 = right[8];\n  const right9 = right[9];\n  const right10 = right[10];\n  const right11 = right[11];\n  const right12 = right[12];\n  const right13 = right[13];\n  const right14 = right[14];\n  const right15 = right[15];\n  const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2 + left12 * right3;\n  const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2 + left13 * right3;\n  const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2 + left14 * right3;\n  const column0Row3 = left3 * right0 + left7 * right1 + left11 * right2 + left15 * right3;\n  const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6 + left12 * right7;\n  const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6 + left13 * right7;\n  const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6 + left14 * right7;\n  const column1Row3 = left3 * right4 + left7 * right5 + left11 * right6 + left15 * right7;\n  const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10 + left12 * right11;\n  const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10 + left13 * right11;\n  const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10 + left14 * right11;\n  const column2Row3 = left3 * right8 + left7 * right9 + left11 * right10 + left15 * right11;\n  const column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12 * right15;\n  const column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13 * right15;\n  const column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14 * right15;\n  const column3Row3 = left3 * right12 + left7 * right13 + left11 * right14 + left15 * right15;\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = column0Row3;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = column1Row3;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = column3Row3;\n  return result;\n};\n\n/**\n * Computes the sum of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = left[0] + right[0];\n  result[1] = left[1] + right[1];\n  result[2] = left[2] + right[2];\n  result[3] = left[3] + right[3];\n  result[4] = left[4] + right[4];\n  result[5] = left[5] + right[5];\n  result[6] = left[6] + right[6];\n  result[7] = left[7] + right[7];\n  result[8] = left[8] + right[8];\n  result[9] = left[9] + right[9];\n  result[10] = left[10] + right[10];\n  result[11] = left[11] + right[11];\n  result[12] = left[12] + right[12];\n  result[13] = left[13] + right[13];\n  result[14] = left[14] + right[14];\n  result[15] = left[15] + right[15];\n  return result;\n};\n\n/**\n * Computes the difference of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = left[0] - right[0];\n  result[1] = left[1] - right[1];\n  result[2] = left[2] - right[2];\n  result[3] = left[3] - right[3];\n  result[4] = left[4] - right[4];\n  result[5] = left[5] - right[5];\n  result[6] = left[6] - right[6];\n  result[7] = left[7] - right[7];\n  result[8] = left[8] - right[8];\n  result[9] = left[9] - right[9];\n  result[10] = left[10] - right[10];\n  result[11] = left[11] - right[11];\n  result[12] = left[12] - right[12];\n  result[13] = left[13] - right[13];\n  result[14] = left[14] - right[14];\n  result[15] = left[15] - right[15];\n  return result;\n};\n\n/**\n * Computes the product of two matrices assuming the matrices are affine transformation matrices,\n * where the upper left 3x3 elements are any matrix, and\n * the upper three elements in the fourth column are the translation.\n * The bottom row is assumed to be [0, 0, 0, 1].\n * The matrix is not verified to be in the proper form.\n * This method is faster than computing the product for general 4x4\n * matrices using {@link Matrix4.multiply}.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * const m1 = new Cesium.Matrix4(1.0, 6.0, 7.0, 0.0, 2.0, 5.0, 8.0, 0.0, 3.0, 4.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n * const m2 = Cesium.Transforms.eastNorthUpToFixedFrame(new Cesium.Cartesian3(1.0, 1.0, 1.0));\n * const m3 = Cesium.Matrix4.multiplyTransformation(m1, m2, new Cesium.Matrix4());\n */\nMatrix4.multiplyTransformation = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const left0 = left[0];\n  const left1 = left[1];\n  const left2 = left[2];\n  const left4 = left[4];\n  const left5 = left[5];\n  const left6 = left[6];\n  const left8 = left[8];\n  const left9 = left[9];\n  const left10 = left[10];\n  const left12 = left[12];\n  const left13 = left[13];\n  const left14 = left[14];\n  const right0 = right[0];\n  const right1 = right[1];\n  const right2 = right[2];\n  const right4 = right[4];\n  const right5 = right[5];\n  const right6 = right[6];\n  const right8 = right[8];\n  const right9 = right[9];\n  const right10 = right[10];\n  const right12 = right[12];\n  const right13 = right[13];\n  const right14 = right[14];\n  const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\n  const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\n  const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\n  const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\n  const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\n  const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\n  const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\n  const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\n  const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\n  const column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12;\n  const column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13;\n  const column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14;\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = 0.0;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by a 3x3 rotation matrix.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromRotationTranslation(rotation), m);</code> with less allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The matrix on the left-hand side.\n * @param {Matrix3} rotation The 3x3 rotation matrix on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromRotationTranslation(rotation), m);\n * Cesium.Matrix4.multiplyByMatrix3(m, rotation, m);\n */\nMatrix4.multiplyByMatrix3 = function (matrix, rotation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"rotation\", rotation);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const left0 = matrix[0];\n  const left1 = matrix[1];\n  const left2 = matrix[2];\n  const left4 = matrix[4];\n  const left5 = matrix[5];\n  const left6 = matrix[6];\n  const left8 = matrix[8];\n  const left9 = matrix[9];\n  const left10 = matrix[10];\n  const right0 = rotation[0];\n  const right1 = rotation[1];\n  const right2 = rotation[2];\n  const right4 = rotation[3];\n  const right5 = rotation[4];\n  const right6 = rotation[5];\n  const right8 = rotation[6];\n  const right9 = rotation[7];\n  const right10 = rotation[8];\n  const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\n  const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\n  const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\n  const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\n  const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\n  const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\n  const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\n  const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\n  const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = 0.0;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by an implicit translation matrix defined by a {@link Cartesian3}.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromTranslation(position), m);</code> with less allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The matrix on the left-hand side.\n * @param {Cartesian3} translation The translation on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromTranslation(position), m);\n * Cesium.Matrix4.multiplyByTranslation(m, position, m);\n */\nMatrix4.multiplyByTranslation = function (matrix, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const x = translation.x;\n  const y = translation.y;\n  const z = translation.z;\n  const tx = x * matrix[0] + y * matrix[4] + z * matrix[8] + matrix[12];\n  const ty = x * matrix[1] + y * matrix[5] + z * matrix[9] + matrix[13];\n  const tz = x * matrix[2] + y * matrix[6] + z * matrix[10] + matrix[14];\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = tx;\n  result[13] = ty;\n  result[14] = tz;\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by an implicit non-uniform scale matrix. This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\n * <code>m</code> must be an affine matrix.\n * This function performs fewer allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The affine matrix on the left-hand side.\n * @param {Cartesian3} scale The non-uniform scale on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromScale(scale), m);\n * Cesium.Matrix4.multiplyByScale(m, scale, m);\n *\n * @see Matrix4.multiplyByUniformScale\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.setScale\n * @see Matrix4.setUniformScale\n * @see Matrix4.getScale\n */\nMatrix4.multiplyByScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const scaleX = scale.x;\n  const scaleY = scale.y;\n  const scaleZ = scale.z;\n\n  // Faster than Cartesian3.equals\n  if (scaleX === 1.0 && scaleY === 1.0 && scaleZ === 1.0) {\n    return Matrix4.clone(matrix, result);\n  }\n  result[0] = scaleX * matrix[0];\n  result[1] = scaleX * matrix[1];\n  result[2] = scaleX * matrix[2];\n  result[3] = matrix[3];\n  result[4] = scaleY * matrix[4];\n  result[5] = scaleY * matrix[5];\n  result[6] = scaleY * matrix[6];\n  result[7] = matrix[7];\n  result[8] = scaleZ * matrix[8];\n  result[9] = scaleZ * matrix[9];\n  result[10] = scaleZ * matrix[10];\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Computes the product of a matrix times a uniform scale, as if the scale were a scale matrix.\n *\n * @param {Matrix4} matrix The matrix on the left-hand side.\n * @param {number} scale The uniform scale on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromUniformScale(scale), m);\n * Cesium.Matrix4.multiplyByUniformScale(m, scale, m);\n *\n * @see Matrix4.multiplyByScale\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.setScale\n * @see Matrix4.setUniformScale\n * @see Matrix4.getScale\n */\nMatrix4.multiplyByUniformScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0] * scale;\n  result[1] = matrix[1] * scale;\n  result[2] = matrix[2] * scale;\n  result[3] = matrix[3];\n  result[4] = matrix[4] * scale;\n  result[5] = matrix[5] * scale;\n  result[6] = matrix[6] * scale;\n  result[7] = matrix[7];\n  result[8] = matrix[8] * scale;\n  result[9] = matrix[9] * scale;\n  result[10] = matrix[10] * scale;\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a column vector.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian4} cartesian The vector.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nMatrix4.multiplyByVector = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const vX = cartesian.x;\n  const vY = cartesian.y;\n  const vZ = cartesian.z;\n  const vW = cartesian.w;\n  const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12] * vW;\n  const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13] * vW;\n  const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14] * vW;\n  const w = matrix[3] * vX + matrix[7] * vY + matrix[11] * vZ + matrix[15] * vW;\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a {@link Cartesian3}.  This is equivalent to calling {@link Matrix4.multiplyByVector}\n * with a {@link Cartesian4} with a <code>w</code> component of zero.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} cartesian The point.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n *\n * @example\n * const p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * const result = Cesium.Matrix4.multiplyByPointAsVector(matrix, p, new Cesium.Cartesian3());\n * // A shortcut for\n * //   Cartesian3 p = ...\n * //   Cesium.Matrix4.multiplyByVector(matrix, new Cesium.Cartesian4(p.x, p.y, p.z, 0.0), result);\n */\nMatrix4.multiplyByPointAsVector = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const vX = cartesian.x;\n  const vY = cartesian.y;\n  const vZ = cartesian.z;\n  const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ;\n  const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ;\n  const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ;\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a {@link Cartesian3}. This is equivalent to calling {@link Matrix4.multiplyByVector}\n * with a {@link Cartesian4} with a <code>w</code> component of 1, but returns a {@link Cartesian3} instead of a {@link Cartesian4}.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} cartesian The point.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n *\n * @example\n * const p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * const result = Cesium.Matrix4.multiplyByPoint(matrix, p, new Cesium.Cartesian3());\n */\nMatrix4.multiplyByPoint = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const vX = cartesian.x;\n  const vY = cartesian.y;\n  const vZ = cartesian.z;\n  const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12];\n  const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13];\n  const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14];\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a scalar.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {number} scalar The number to multiply by.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //create a Matrix4 instance which is a scaled version of the supplied Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * const a = Cesium.Matrix4.multiplyByScalar(m, -2, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [-20.0, -22.0, -24.0, -26.0]\n * //     [-28.0, -30.0, -32.0, -34.0]\n * //     [-36.0, -38.0, -40.0, -42.0]\n * //     [-44.0, -46.0, -48.0, -50.0]\n */\nMatrix4.multiplyByScalar = function (matrix, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0] * scalar;\n  result[1] = matrix[1] * scalar;\n  result[2] = matrix[2] * scalar;\n  result[3] = matrix[3] * scalar;\n  result[4] = matrix[4] * scalar;\n  result[5] = matrix[5] * scalar;\n  result[6] = matrix[6] * scalar;\n  result[7] = matrix[7] * scalar;\n  result[8] = matrix[8] * scalar;\n  result[9] = matrix[9] * scalar;\n  result[10] = matrix[10] * scalar;\n  result[11] = matrix[11] * scalar;\n  result[12] = matrix[12] * scalar;\n  result[13] = matrix[13] * scalar;\n  result[14] = matrix[14] * scalar;\n  result[15] = matrix[15] * scalar;\n  return result;\n};\n\n/**\n * Computes a negated copy of the provided matrix.\n *\n * @param {Matrix4} matrix The matrix to negate.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //create a new Matrix4 instance which is a negation of a Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * const a = Cesium.Matrix4.negate(m, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [-10.0, -11.0, -12.0, -13.0]\n * //     [-14.0, -15.0, -16.0, -17.0]\n * //     [-18.0, -19.0, -20.0, -21.0]\n * //     [-22.0, -23.0, -24.0, -25.0]\n */\nMatrix4.negate = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = -matrix[0];\n  result[1] = -matrix[1];\n  result[2] = -matrix[2];\n  result[3] = -matrix[3];\n  result[4] = -matrix[4];\n  result[5] = -matrix[5];\n  result[6] = -matrix[6];\n  result[7] = -matrix[7];\n  result[8] = -matrix[8];\n  result[9] = -matrix[9];\n  result[10] = -matrix[10];\n  result[11] = -matrix[11];\n  result[12] = -matrix[12];\n  result[13] = -matrix[13];\n  result[14] = -matrix[14];\n  result[15] = -matrix[15];\n  return result;\n};\n\n/**\n * Computes the transpose of the provided matrix.\n *\n * @param {Matrix4} matrix The matrix to transpose.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //returns transpose of a Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * const a = Cesium.Matrix4.transpose(m, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n */\nMatrix4.transpose = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const matrix1 = matrix[1];\n  const matrix2 = matrix[2];\n  const matrix3 = matrix[3];\n  const matrix6 = matrix[6];\n  const matrix7 = matrix[7];\n  const matrix11 = matrix[11];\n  result[0] = matrix[0];\n  result[1] = matrix[4];\n  result[2] = matrix[8];\n  result[3] = matrix[12];\n  result[4] = matrix1;\n  result[5] = matrix[5];\n  result[6] = matrix[9];\n  result[7] = matrix[13];\n  result[8] = matrix2;\n  result[9] = matrix6;\n  result[10] = matrix[10];\n  result[11] = matrix[14];\n  result[12] = matrix3;\n  result[13] = matrix7;\n  result[14] = matrix11;\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\n *\n * @param {Matrix4} matrix The matrix with signed elements.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.abs = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = Math.abs(matrix[0]);\n  result[1] = Math.abs(matrix[1]);\n  result[2] = Math.abs(matrix[2]);\n  result[3] = Math.abs(matrix[3]);\n  result[4] = Math.abs(matrix[4]);\n  result[5] = Math.abs(matrix[5]);\n  result[6] = Math.abs(matrix[6]);\n  result[7] = Math.abs(matrix[7]);\n  result[8] = Math.abs(matrix[8]);\n  result[9] = Math.abs(matrix[9]);\n  result[10] = Math.abs(matrix[10]);\n  result[11] = Math.abs(matrix[11]);\n  result[12] = Math.abs(matrix[12]);\n  result[13] = Math.abs(matrix[13]);\n  result[14] = Math.abs(matrix[14]);\n  result[15] = Math.abs(matrix[15]);\n  return result;\n};\n\n/**\n * Compares the provided matrices componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Matrix4} [left] The first matrix.\n * @param {Matrix4} [right] The second matrix.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n *\n * @example\n * //compares two Matrix4 instances\n *\n * // a = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * // b = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * if(Cesium.Matrix4.equals(a,b)) {\n *      console.log(\"Both matrices are equal\");\n * } else {\n *      console.log(\"They are not equal\");\n * }\n *\n * //Prints \"Both matrices are equal\" on the console\n */\nMatrix4.equals = function (left, right) {\n  // Given that most matrices will be transformation matrices, the elements\n  // are tested in order such that the test is likely to fail as early\n  // as possible.  I _think_ this is just as friendly to the L1 cache\n  // as testing in index order.  It is certainty faster in practice.\n  return left === right || defined(left) && defined(right) &&\n  // Translation\n  left[12] === right[12] && left[13] === right[13] && left[14] === right[14] &&\n  // Rotation/scale\n  left[0] === right[0] && left[1] === right[1] && left[2] === right[2] && left[4] === right[4] && left[5] === right[5] && left[6] === right[6] && left[8] === right[8] && left[9] === right[9] && left[10] === right[10] &&\n  // Bottom row\n  left[3] === right[3] && left[7] === right[7] && left[11] === right[11] && left[15] === right[15];\n};\n\n/**\n * Compares the provided matrices componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Matrix4} [left] The first matrix.\n * @param {Matrix4} [right] The second matrix.\n * @param {number} [epsilon=0] The epsilon to use for equality testing.\n * @returns {boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n *\n * @example\n * //compares two Matrix4 instances\n *\n * // a = [10.5, 14.5, 18.5, 22.5]\n * //     [11.5, 15.5, 19.5, 23.5]\n * //     [12.5, 16.5, 20.5, 24.5]\n * //     [13.5, 17.5, 21.5, 25.5]\n *\n * // b = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * if(Cesium.Matrix4.equalsEpsilon(a,b,0.1)){\n *      console.log(\"Difference between both the matrices is less than 0.1\");\n * } else {\n *      console.log(\"Difference between both the matrices is not less than 0.1\");\n * }\n *\n * //Prints \"Difference between both the matrices is not less than 0.1\" on the console\n */\nMatrix4.equalsEpsilon = function (left, right, epsilon) {\n  epsilon = defaultValue(epsilon, 0);\n  return left === right || defined(left) && defined(right) && Math.abs(left[0] - right[0]) <= epsilon && Math.abs(left[1] - right[1]) <= epsilon && Math.abs(left[2] - right[2]) <= epsilon && Math.abs(left[3] - right[3]) <= epsilon && Math.abs(left[4] - right[4]) <= epsilon && Math.abs(left[5] - right[5]) <= epsilon && Math.abs(left[6] - right[6]) <= epsilon && Math.abs(left[7] - right[7]) <= epsilon && Math.abs(left[8] - right[8]) <= epsilon && Math.abs(left[9] - right[9]) <= epsilon && Math.abs(left[10] - right[10]) <= epsilon && Math.abs(left[11] - right[11]) <= epsilon && Math.abs(left[12] - right[12]) <= epsilon && Math.abs(left[13] - right[13]) <= epsilon && Math.abs(left[14] - right[14]) <= epsilon && Math.abs(left[15] - right[15]) <= epsilon;\n};\n\n/**\n * Gets the translation portion of the provided matrix, assuming the matrix is an affine transformation matrix.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nMatrix4.getTranslation = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = matrix[12];\n  result.y = matrix[13];\n  result.z = matrix[14];\n  return result;\n};\n\n/**\n * Gets the upper left 3x3 matrix of the provided matrix.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Matrix3} result The object onto which to store the result.\n * @returns {Matrix3} The modified result parameter.\n *\n * @example\n * // returns a Matrix3 instance from a Matrix4 instance\n *\n * // m = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * const b = new Cesium.Matrix3();\n * Cesium.Matrix4.getMatrix3(m,b);\n *\n * // b = [10.0, 14.0, 18.0]\n * //     [11.0, 15.0, 19.0]\n * //     [12.0, 16.0, 20.0]\n */\nMatrix4.getMatrix3 = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[4];\n  result[4] = matrix[5];\n  result[5] = matrix[6];\n  result[6] = matrix[8];\n  result[7] = matrix[9];\n  result[8] = matrix[10];\n  return result;\n};\nconst scratchInverseRotation = new Matrix3();\nconst scratchMatrix3Zero = new Matrix3();\nconst scratchBottomRow = new Cartesian4();\nconst scratchExpectedBottomRow = new Cartesian4(0.0, 0.0, 0.0, 1.0);\n\n/**\n * Computes the inverse of the provided matrix using Cramers Rule.\n * If the determinant is zero, the matrix can not be inverted, and an exception is thrown.\n * If the matrix is a proper rigid transformation, it is more efficient\n * to invert it with {@link Matrix4.inverseTransformation}.\n *\n * @param {Matrix4} matrix The matrix to invert.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {RuntimeError} matrix is not invertible because its determinate is zero.\n */\nMatrix4.inverse = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n  //\n  // Ported from:\n  //   ftp://download.intel.com/design/PentiumIII/sml/24504301.pdf\n  //\n  const src0 = matrix[0];\n  const src1 = matrix[4];\n  const src2 = matrix[8];\n  const src3 = matrix[12];\n  const src4 = matrix[1];\n  const src5 = matrix[5];\n  const src6 = matrix[9];\n  const src7 = matrix[13];\n  const src8 = matrix[2];\n  const src9 = matrix[6];\n  const src10 = matrix[10];\n  const src11 = matrix[14];\n  const src12 = matrix[3];\n  const src13 = matrix[7];\n  const src14 = matrix[11];\n  const src15 = matrix[15];\n\n  // calculate pairs for first 8 elements (cofactors)\n  let tmp0 = src10 * src15;\n  let tmp1 = src11 * src14;\n  let tmp2 = src9 * src15;\n  let tmp3 = src11 * src13;\n  let tmp4 = src9 * src14;\n  let tmp5 = src10 * src13;\n  let tmp6 = src8 * src15;\n  let tmp7 = src11 * src12;\n  let tmp8 = src8 * src14;\n  let tmp9 = src10 * src12;\n  let tmp10 = src8 * src13;\n  let tmp11 = src9 * src12;\n\n  // calculate first 8 elements (cofactors)\n  const dst0 = tmp0 * src5 + tmp3 * src6 + tmp4 * src7 - (tmp1 * src5 + tmp2 * src6 + tmp5 * src7);\n  const dst1 = tmp1 * src4 + tmp6 * src6 + tmp9 * src7 - (tmp0 * src4 + tmp7 * src6 + tmp8 * src7);\n  const dst2 = tmp2 * src4 + tmp7 * src5 + tmp10 * src7 - (tmp3 * src4 + tmp6 * src5 + tmp11 * src7);\n  const dst3 = tmp5 * src4 + tmp8 * src5 + tmp11 * src6 - (tmp4 * src4 + tmp9 * src5 + tmp10 * src6);\n  const dst4 = tmp1 * src1 + tmp2 * src2 + tmp5 * src3 - (tmp0 * src1 + tmp3 * src2 + tmp4 * src3);\n  const dst5 = tmp0 * src0 + tmp7 * src2 + tmp8 * src3 - (tmp1 * src0 + tmp6 * src2 + tmp9 * src3);\n  const dst6 = tmp3 * src0 + tmp6 * src1 + tmp11 * src3 - (tmp2 * src0 + tmp7 * src1 + tmp10 * src3);\n  const dst7 = tmp4 * src0 + tmp9 * src1 + tmp10 * src2 - (tmp5 * src0 + tmp8 * src1 + tmp11 * src2);\n\n  // calculate pairs for second 8 elements (cofactors)\n  tmp0 = src2 * src7;\n  tmp1 = src3 * src6;\n  tmp2 = src1 * src7;\n  tmp3 = src3 * src5;\n  tmp4 = src1 * src6;\n  tmp5 = src2 * src5;\n  tmp6 = src0 * src7;\n  tmp7 = src3 * src4;\n  tmp8 = src0 * src6;\n  tmp9 = src2 * src4;\n  tmp10 = src0 * src5;\n  tmp11 = src1 * src4;\n\n  // calculate second 8 elements (cofactors)\n  const dst8 = tmp0 * src13 + tmp3 * src14 + tmp4 * src15 - (tmp1 * src13 + tmp2 * src14 + tmp5 * src15);\n  const dst9 = tmp1 * src12 + tmp6 * src14 + tmp9 * src15 - (tmp0 * src12 + tmp7 * src14 + tmp8 * src15);\n  const dst10 = tmp2 * src12 + tmp7 * src13 + tmp10 * src15 - (tmp3 * src12 + tmp6 * src13 + tmp11 * src15);\n  const dst11 = tmp5 * src12 + tmp8 * src13 + tmp11 * src14 - (tmp4 * src12 + tmp9 * src13 + tmp10 * src14);\n  const dst12 = tmp2 * src10 + tmp5 * src11 + tmp1 * src9 - (tmp4 * src11 + tmp0 * src9 + tmp3 * src10);\n  const dst13 = tmp8 * src11 + tmp0 * src8 + tmp7 * src10 - (tmp6 * src10 + tmp9 * src11 + tmp1 * src8);\n  const dst14 = tmp6 * src9 + tmp11 * src11 + tmp3 * src8 - (tmp10 * src11 + tmp2 * src8 + tmp7 * src9);\n  const dst15 = tmp10 * src10 + tmp4 * src8 + tmp9 * src9 - (tmp8 * src9 + tmp11 * src10 + tmp5 * src8);\n\n  // calculate determinant\n  let det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;\n  if (Math.abs(det) < CesiumMath.EPSILON21) {\n    // Special case for a zero scale matrix that can occur, for example,\n    // when a model's node has a [0, 0, 0] scale.\n    if (Matrix3.equalsEpsilon(Matrix4.getMatrix3(matrix, scratchInverseRotation), scratchMatrix3Zero, CesiumMath.EPSILON7) && Cartesian4.equals(Matrix4.getRow(matrix, 3, scratchBottomRow), scratchExpectedBottomRow)) {\n      result[0] = 0.0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = 0.0;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = 0.0;\n      result[9] = 0.0;\n      result[10] = 0.0;\n      result[11] = 0.0;\n      result[12] = -matrix[12];\n      result[13] = -matrix[13];\n      result[14] = -matrix[14];\n      result[15] = 1.0;\n      return result;\n    }\n    throw new RuntimeError(\"matrix is not invertible because its determinate is zero.\");\n  }\n\n  // calculate matrix inverse\n  det = 1.0 / det;\n  result[0] = dst0 * det;\n  result[1] = dst1 * det;\n  result[2] = dst2 * det;\n  result[3] = dst3 * det;\n  result[4] = dst4 * det;\n  result[5] = dst5 * det;\n  result[6] = dst6 * det;\n  result[7] = dst7 * det;\n  result[8] = dst8 * det;\n  result[9] = dst9 * det;\n  result[10] = dst10 * det;\n  result[11] = dst11 * det;\n  result[12] = dst12 * det;\n  result[13] = dst13 * det;\n  result[14] = dst14 * det;\n  result[15] = dst15 * det;\n  return result;\n};\n\n/**\n * Computes the inverse of the provided matrix assuming it is a proper rigid matrix,\n * where the upper left 3x3 elements are a rotation matrix,\n * and the upper three elements in the fourth column are the translation.\n * The bottom row is assumed to be [0, 0, 0, 1].\n * The matrix is not verified to be in the proper form.\n * This method is faster than computing the inverse for a general 4x4\n * matrix using {@link Matrix4.inverse}.\n *\n * @param {Matrix4} matrix The matrix to invert.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.inverseTransformation = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  //This function is an optimized version of the below 4 lines.\n  //const rT = Matrix3.transpose(Matrix4.getMatrix3(matrix));\n  //const rTN = Matrix3.negate(rT);\n  //const rTT = Matrix3.multiplyByVector(rTN, Matrix4.getTranslation(matrix));\n  //return Matrix4.fromRotationTranslation(rT, rTT, result);\n\n  const matrix0 = matrix[0];\n  const matrix1 = matrix[1];\n  const matrix2 = matrix[2];\n  const matrix4 = matrix[4];\n  const matrix5 = matrix[5];\n  const matrix6 = matrix[6];\n  const matrix8 = matrix[8];\n  const matrix9 = matrix[9];\n  const matrix10 = matrix[10];\n  const vX = matrix[12];\n  const vY = matrix[13];\n  const vZ = matrix[14];\n  const x = -matrix0 * vX - matrix1 * vY - matrix2 * vZ;\n  const y = -matrix4 * vX - matrix5 * vY - matrix6 * vZ;\n  const z = -matrix8 * vX - matrix9 * vY - matrix10 * vZ;\n  result[0] = matrix0;\n  result[1] = matrix4;\n  result[2] = matrix8;\n  result[3] = 0.0;\n  result[4] = matrix1;\n  result[5] = matrix5;\n  result[6] = matrix9;\n  result[7] = 0.0;\n  result[8] = matrix2;\n  result[9] = matrix6;\n  result[10] = matrix10;\n  result[11] = 0.0;\n  result[12] = x;\n  result[13] = y;\n  result[14] = z;\n  result[15] = 1.0;\n  return result;\n};\nconst scratchTransposeMatrix = new Matrix4();\n\n/**\n * Computes the inverse transpose of a matrix.\n *\n * @param {Matrix4} matrix The matrix to transpose and invert.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.inverseTranspose = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  return Matrix4.inverse(Matrix4.transpose(matrix, scratchTransposeMatrix), result);\n};\n\n/**\n * An immutable Matrix4 instance initialized to the identity matrix.\n *\n * @type {Matrix4}\n * @constant\n */\nMatrix4.IDENTITY = Object.freeze(new Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0));\n\n/**\n * An immutable Matrix4 instance initialized to the zero matrix.\n *\n * @type {Matrix4}\n * @constant\n */\nMatrix4.ZERO = Object.freeze(new Matrix4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));\n\n/**\n * The index into Matrix4 for column 0, row 0.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN0ROW0 = 0;\n\n/**\n * The index into Matrix4 for column 0, row 1.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN0ROW1 = 1;\n\n/**\n * The index into Matrix4 for column 0, row 2.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN0ROW2 = 2;\n\n/**\n * The index into Matrix4 for column 0, row 3.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN0ROW3 = 3;\n\n/**\n * The index into Matrix4 for column 1, row 0.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN1ROW0 = 4;\n\n/**\n * The index into Matrix4 for column 1, row 1.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN1ROW1 = 5;\n\n/**\n * The index into Matrix4 for column 1, row 2.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN1ROW2 = 6;\n\n/**\n * The index into Matrix4 for column 1, row 3.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN1ROW3 = 7;\n\n/**\n * The index into Matrix4 for column 2, row 0.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN2ROW0 = 8;\n\n/**\n * The index into Matrix4 for column 2, row 1.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN2ROW1 = 9;\n\n/**\n * The index into Matrix4 for column 2, row 2.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN2ROW2 = 10;\n\n/**\n * The index into Matrix4 for column 2, row 3.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN2ROW3 = 11;\n\n/**\n * The index into Matrix4 for column 3, row 0.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN3ROW0 = 12;\n\n/**\n * The index into Matrix4 for column 3, row 1.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN3ROW1 = 13;\n\n/**\n * The index into Matrix4 for column 3, row 2.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN3ROW2 = 14;\n\n/**\n * The index into Matrix4 for column 3, row 3.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN3ROW3 = 15;\nObject.defineProperties(Matrix4.prototype, {\n  /**\n   * Gets the number of items in the collection.\n   * @memberof Matrix4.prototype\n   *\n   * @type {number}\n   */\n  length: {\n    get: function () {\n      return Matrix4.packedLength;\n    }\n  }\n});\n\n/**\n * Duplicates the provided Matrix4 instance.\n *\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n */\nMatrix4.prototype.clone = function (result) {\n  return Matrix4.clone(this, result);\n};\n\n/**\n * Compares this matrix to the provided matrix componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Matrix4} [right] The right hand side matrix.\n * @returns {boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nMatrix4.prototype.equals = function (right) {\n  return Matrix4.equals(this, right);\n};\n\n/**\n * @private\n */\nMatrix4.equalsArray = function (matrix, array, offset) {\n  return matrix[0] === array[offset] && matrix[1] === array[offset + 1] && matrix[2] === array[offset + 2] && matrix[3] === array[offset + 3] && matrix[4] === array[offset + 4] && matrix[5] === array[offset + 5] && matrix[6] === array[offset + 6] && matrix[7] === array[offset + 7] && matrix[8] === array[offset + 8] && matrix[9] === array[offset + 9] && matrix[10] === array[offset + 10] && matrix[11] === array[offset + 11] && matrix[12] === array[offset + 12] && matrix[13] === array[offset + 13] && matrix[14] === array[offset + 14] && matrix[15] === array[offset + 15];\n};\n\n/**\n * Compares this matrix to the provided matrix componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Matrix4} [right] The right hand side matrix.\n * @param {number} [epsilon=0] The epsilon to use for equality testing.\n * @returns {boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nMatrix4.prototype.equalsEpsilon = function (right, epsilon) {\n  return Matrix4.equalsEpsilon(this, right, epsilon);\n};\n\n/**\n * Computes a string representing this Matrix with each row being\n * on a separate line and in the format '(column0, column1, column2, column3)'.\n *\n * @returns {string} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2, column3)'.\n */\nMatrix4.prototype.toString = function () {\n  return `(${this[0]}, ${this[4]}, ${this[8]}, ${this[12]})\\n` + `(${this[1]}, ${this[5]}, ${this[9]}, ${this[13]})\\n` + `(${this[2]}, ${this[6]}, ${this[10]}, ${this[14]})\\n` + `(${this[3]}, ${this[7]}, ${this[11]}, ${this[15]})`;\n};\nexport default Matrix4;","map":{"version":3,"names":["Cartesian3","Cartesian4","Check","defaultValue","defined","DeveloperError","CesiumMath","Matrix3","RuntimeError","Matrix4","column0Row0","column1Row0","column2Row0","column3Row0","column0Row1","column1Row1","column2Row1","column3Row1","column0Row2","column1Row2","column2Row2","column3Row2","column0Row3","column1Row3","column2Row3","column3Row3","packedLength","pack","value","array","startingIndex","typeOf","object","unpack","result","packArray","length","resultLength","Array","isArray","i","unpackArray","number","greaterThanOrEquals","index","clone","matrix","undefined","fromArray","fromColumnMajorArray","values","fromRowMajorArray","fromRotationTranslation","rotation","translation","ZERO","x","y","z","fromTranslationQuaternionRotationScale","scale","scaleX","scaleY","scaleZ","x2","xy","xz","xw","w","y2","yz","yw","z2","zw","w2","m00","m01","m02","m10","m11","m12","m20","m21","m22","fromTranslationRotationScale","translationRotationScale","fromTranslation","IDENTITY","fromScale","fromUniformScale","fromRotation","fromCameraF","fromCameraR","fromCameraU","fromCamera","camera","position","direction","up","normalize","cross","sX","sY","sZ","fX","fY","fZ","uX","uY","uZ","positionX","positionY","positionZ","t0","t1","t2","computePerspectiveFieldOfView","fovY","aspectRatio","near","far","greaterThan","lessThan","Math","PI","bottom","tan","computeOrthographicOffCenter","left","right","top","a","b","c","tx","ty","tz","computePerspectiveOffCenter","computeInfinitePerspectiveOffCenter","computeViewportTransformation","viewport","nearDepthRange","farDepthRange","EMPTY_OBJECT","width","height","halfWidth","halfHeight","halfDepth","computeView","dot","toArray","getElementIndex","column","row","lessThanOrEquals","getColumn","startIndex","setColumn","cartesian","getRow","setRow","setTranslation","scaleScratch1","setScale","existingScale","getScale","scaleRatioX","scaleRatioY","scaleRatioZ","scaleScratch2","setUniformScale","scratchColumn","magnitude","fromElements","scaleScratch3","getMaximumScale","maximumComponent","scaleScratch4","setRotation","scaleScratch5","getRotation","multiply","left0","left1","left2","left3","left4","left5","left6","left7","left8","left9","left10","left11","left12","left13","left14","left15","right0","right1","right2","right3","right4","right5","right6","right7","right8","right9","right10","right11","right12","right13","right14","right15","add","subtract","multiplyTransformation","multiplyByMatrix3","multiplyByTranslation","multiplyByScale","multiplyByUniformScale","multiplyByVector","vX","vY","vZ","vW","multiplyByPointAsVector","multiplyByPoint","multiplyByScalar","scalar","negate","transpose","matrix1","matrix2","matrix3","matrix6","matrix7","matrix11","abs","equals","equalsEpsilon","epsilon","getTranslation","getMatrix3","scratchInverseRotation","scratchMatrix3Zero","scratchBottomRow","scratchExpectedBottomRow","inverse","src0","src1","src2","src3","src4","src5","src6","src7","src8","src9","src10","src11","src12","src13","src14","src15","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","dst0","dst1","dst2","dst3","dst4","dst5","dst6","dst7","dst8","dst9","dst10","dst11","dst12","dst13","dst14","dst15","det","EPSILON21","EPSILON7","inverseTransformation","matrix0","matrix4","matrix5","matrix8","matrix9","matrix10","scratchTransposeMatrix","inverseTranspose","Object","freeze","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN0ROW3","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN1ROW3","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","COLUMN2ROW3","COLUMN3ROW0","COLUMN3ROW1","COLUMN3ROW2","COLUMN3ROW3","defineProperties","prototype","get","equalsArray","offset","toString"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/Matrix4.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\n/**\n * A 4x4 matrix, indexable as a column-major order array.\n * Constructor parameters are in row-major order for code readability.\n * @alias Matrix4\n * @constructor\n * @implements {ArrayLike<number>}\n *\n * @param {number} [column0Row0=0.0] The value for column 0, row 0.\n * @param {number} [column1Row0=0.0] The value for column 1, row 0.\n * @param {number} [column2Row0=0.0] The value for column 2, row 0.\n * @param {number} [column3Row0=0.0] The value for column 3, row 0.\n * @param {number} [column0Row1=0.0] The value for column 0, row 1.\n * @param {number} [column1Row1=0.0] The value for column 1, row 1.\n * @param {number} [column2Row1=0.0] The value for column 2, row 1.\n * @param {number} [column3Row1=0.0] The value for column 3, row 1.\n * @param {number} [column0Row2=0.0] The value for column 0, row 2.\n * @param {number} [column1Row2=0.0] The value for column 1, row 2.\n * @param {number} [column2Row2=0.0] The value for column 2, row 2.\n * @param {number} [column3Row2=0.0] The value for column 3, row 2.\n * @param {number} [column0Row3=0.0] The value for column 0, row 3.\n * @param {number} [column1Row3=0.0] The value for column 1, row 3.\n * @param {number} [column2Row3=0.0] The value for column 2, row 3.\n * @param {number} [column3Row3=0.0] The value for column 3, row 3.\n *\n * @see Matrix4.fromArray\n * @see Matrix4.fromColumnMajorArray\n * @see Matrix4.fromRowMajorArray\n * @see Matrix4.fromRotationTranslation\n * @see Matrix4.fromTranslationQuaternionRotationScale\n * @see Matrix4.fromTranslationRotationScale\n * @see Matrix4.fromTranslation\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.fromRotation\n * @see Matrix4.fromCamera\n * @see Matrix4.computePerspectiveFieldOfView\n * @see Matrix4.computeOrthographicOffCenter\n * @see Matrix4.computePerspectiveOffCenter\n * @see Matrix4.computeInfinitePerspectiveOffCenter\n * @see Matrix4.computeViewportTransformation\n * @see Matrix4.computeView\n * @see Matrix2\n * @see Matrix3\n * @see Packable\n */\nfunction Matrix4(\n  column0Row0,\n  column1Row0,\n  column2Row0,\n  column3Row0,\n  column0Row1,\n  column1Row1,\n  column2Row1,\n  column3Row1,\n  column0Row2,\n  column1Row2,\n  column2Row2,\n  column3Row2,\n  column0Row3,\n  column1Row3,\n  column2Row3,\n  column3Row3,\n) {\n  this[0] = defaultValue(column0Row0, 0.0);\n  this[1] = defaultValue(column0Row1, 0.0);\n  this[2] = defaultValue(column0Row2, 0.0);\n  this[3] = defaultValue(column0Row3, 0.0);\n  this[4] = defaultValue(column1Row0, 0.0);\n  this[5] = defaultValue(column1Row1, 0.0);\n  this[6] = defaultValue(column1Row2, 0.0);\n  this[7] = defaultValue(column1Row3, 0.0);\n  this[8] = defaultValue(column2Row0, 0.0);\n  this[9] = defaultValue(column2Row1, 0.0);\n  this[10] = defaultValue(column2Row2, 0.0);\n  this[11] = defaultValue(column2Row3, 0.0);\n  this[12] = defaultValue(column3Row0, 0.0);\n  this[13] = defaultValue(column3Row1, 0.0);\n  this[14] = defaultValue(column3Row2, 0.0);\n  this[15] = defaultValue(column3Row3, 0.0);\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nMatrix4.packedLength = 16;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Matrix4} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nMatrix4.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value[0];\n  array[startingIndex++] = value[1];\n  array[startingIndex++] = value[2];\n  array[startingIndex++] = value[3];\n  array[startingIndex++] = value[4];\n  array[startingIndex++] = value[5];\n  array[startingIndex++] = value[6];\n  array[startingIndex++] = value[7];\n  array[startingIndex++] = value[8];\n  array[startingIndex++] = value[9];\n  array[startingIndex++] = value[10];\n  array[startingIndex++] = value[11];\n  array[startingIndex++] = value[12];\n  array[startingIndex++] = value[13];\n  array[startingIndex++] = value[14];\n  array[startingIndex] = value[15];\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Matrix4} [result] The object into which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n */\nMatrix4.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n\n  result[0] = array[startingIndex++];\n  result[1] = array[startingIndex++];\n  result[2] = array[startingIndex++];\n  result[3] = array[startingIndex++];\n  result[4] = array[startingIndex++];\n  result[5] = array[startingIndex++];\n  result[6] = array[startingIndex++];\n  result[7] = array[startingIndex++];\n  result[8] = array[startingIndex++];\n  result[9] = array[startingIndex++];\n  result[10] = array[startingIndex++];\n  result[11] = array[startingIndex++];\n  result[12] = array[startingIndex++];\n  result[13] = array[startingIndex++];\n  result[14] = array[startingIndex++];\n  result[15] = array[startingIndex];\n  return result;\n};\n\n/**\n * Flattens an array of Matrix4s into an array of components. The components\n * are stored in column-major order.\n *\n * @param {Matrix4[]} array The array of matrices to pack.\n * @param {number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 16 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 16) elements.\n * @returns {number[]} The packed array.\n */\nMatrix4.packArray = function (array, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  const resultLength = length * 16;\n  if (!defined(result)) {\n    result = new Array(resultLength);\n  } else if (!Array.isArray(result) && result.length !== resultLength) {\n    //>>includeStart('debug', pragmas.debug);\n    throw new DeveloperError(\n      \"If result is a typed array, it must have exactly array.length * 16 elements\",\n    );\n    //>>includeEnd('debug');\n  } else if (result.length !== resultLength) {\n    result.length = resultLength;\n  }\n\n  for (let i = 0; i < length; ++i) {\n    Matrix4.pack(array[i], result, i * 16);\n  }\n  return result;\n};\n\n/**\n * Unpacks an array of column-major matrix components into an array of Matrix4s.\n *\n * @param {number[]} array The array of components to unpack.\n * @param {Matrix4[]} [result] The array onto which to store the result.\n * @returns {Matrix4[]} The unpacked array.\n */\nMatrix4.unpackArray = function (array, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  Check.typeOf.number.greaterThanOrEquals(\"array.length\", array.length, 16);\n  if (array.length % 16 !== 0) {\n    throw new DeveloperError(\"array length must be a multiple of 16.\");\n  }\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  if (!defined(result)) {\n    result = new Array(length / 16);\n  } else {\n    result.length = length / 16;\n  }\n\n  for (let i = 0; i < length; i += 16) {\n    const index = i / 16;\n    result[index] = Matrix4.unpack(array, i, result[index]);\n  }\n  return result;\n};\n\n/**\n * Duplicates a Matrix4 instance.\n *\n * @param {Matrix4} matrix The matrix to duplicate.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. (Returns undefined if matrix is undefined)\n */\nMatrix4.clone = function (matrix, result) {\n  if (!defined(matrix)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Matrix4(\n      matrix[0],\n      matrix[4],\n      matrix[8],\n      matrix[12],\n      matrix[1],\n      matrix[5],\n      matrix[9],\n      matrix[13],\n      matrix[2],\n      matrix[6],\n      matrix[10],\n      matrix[14],\n      matrix[3],\n      matrix[7],\n      matrix[11],\n      matrix[15],\n    );\n  }\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Creates a Matrix4 from 16 consecutive elements in an array.\n * @function\n *\n * @param {number[]} array The array whose 16 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\n * @param {number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Create the Matrix4:\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n * // [1.0, 2.0, 3.0, 4.0]\n *\n * const v = [1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\n * const m = Cesium.Matrix4.fromArray(v);\n *\n * // Create same Matrix4 with using an offset into an array\n * const v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\n * const m2 = Cesium.Matrix4.fromArray(v2, 2);\n */\nMatrix4.fromArray = Matrix4.unpack;\n\n/**\n * Computes a Matrix4 instance from a column-major order array.\n *\n * @param {number[]} values The column-major order array.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromColumnMajorArray = function (values, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"values\", values);\n  //>>includeEnd('debug');\n\n  return Matrix4.clone(values, result);\n};\n\n/**\n * Computes a Matrix4 instance from a row-major order array.\n * The resulting matrix will be in column-major order.\n *\n * @param {number[]} values The row-major order array.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromRowMajorArray = function (values, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"values\", values);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(\n      values[0],\n      values[1],\n      values[2],\n      values[3],\n      values[4],\n      values[5],\n      values[6],\n      values[7],\n      values[8],\n      values[9],\n      values[10],\n      values[11],\n      values[12],\n      values[13],\n      values[14],\n      values[15],\n    );\n  }\n  result[0] = values[0];\n  result[1] = values[4];\n  result[2] = values[8];\n  result[3] = values[12];\n  result[4] = values[1];\n  result[5] = values[5];\n  result[6] = values[9];\n  result[7] = values[13];\n  result[8] = values[2];\n  result[9] = values[6];\n  result[10] = values[10];\n  result[11] = values[14];\n  result[12] = values[3];\n  result[13] = values[7];\n  result[14] = values[11];\n  result[15] = values[15];\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance from a Matrix3 representing the rotation\n * and a Cartesian3 representing the translation.\n *\n * @param {Matrix3} rotation The upper left portion of the matrix representing the rotation.\n * @param {Cartesian3} [translation=Cartesian3.ZERO] The upper right portion of the matrix representing the translation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromRotationTranslation = function (rotation, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rotation\", rotation);\n  //>>includeEnd('debug');\n\n  translation = defaultValue(translation, Cartesian3.ZERO);\n\n  if (!defined(result)) {\n    return new Matrix4(\n      rotation[0],\n      rotation[3],\n      rotation[6],\n      translation.x,\n      rotation[1],\n      rotation[4],\n      rotation[7],\n      translation.y,\n      rotation[2],\n      rotation[5],\n      rotation[8],\n      translation.z,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n    );\n  }\n\n  result[0] = rotation[0];\n  result[1] = rotation[1];\n  result[2] = rotation[2];\n  result[3] = 0.0;\n  result[4] = rotation[3];\n  result[5] = rotation[4];\n  result[6] = rotation[5];\n  result[7] = 0.0;\n  result[8] = rotation[6];\n  result[9] = rotation[7];\n  result[10] = rotation[8];\n  result[11] = 0.0;\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance from a translation, rotation, and scale (TRS)\n * representation with the rotation represented as a quaternion.\n *\n * @param {Cartesian3} translation The translation transformation.\n * @param {Quaternion} rotation The rotation transformation.\n * @param {Cartesian3} scale The non-uniform scale transformation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * const result = Cesium.Matrix4.fromTranslationQuaternionRotationScale(\n *   new Cesium.Cartesian3(1.0, 2.0, 3.0), // translation\n *   Cesium.Quaternion.IDENTITY,           // rotation\n *   new Cesium.Cartesian3(7.0, 8.0, 9.0), // scale\n *   result);\n */\nMatrix4.fromTranslationQuaternionRotationScale = function (\n  translation,\n  rotation,\n  scale,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"rotation\", rotation);\n  Check.typeOf.object(\"scale\", scale);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n\n  const scaleX = scale.x;\n  const scaleY = scale.y;\n  const scaleZ = scale.z;\n\n  const x2 = rotation.x * rotation.x;\n  const xy = rotation.x * rotation.y;\n  const xz = rotation.x * rotation.z;\n  const xw = rotation.x * rotation.w;\n  const y2 = rotation.y * rotation.y;\n  const yz = rotation.y * rotation.z;\n  const yw = rotation.y * rotation.w;\n  const z2 = rotation.z * rotation.z;\n  const zw = rotation.z * rotation.w;\n  const w2 = rotation.w * rotation.w;\n\n  const m00 = x2 - y2 - z2 + w2;\n  const m01 = 2.0 * (xy - zw);\n  const m02 = 2.0 * (xz + yw);\n\n  const m10 = 2.0 * (xy + zw);\n  const m11 = -x2 + y2 - z2 + w2;\n  const m12 = 2.0 * (yz - xw);\n\n  const m20 = 2.0 * (xz - yw);\n  const m21 = 2.0 * (yz + xw);\n  const m22 = -x2 - y2 + z2 + w2;\n\n  result[0] = m00 * scaleX;\n  result[1] = m10 * scaleX;\n  result[2] = m20 * scaleX;\n  result[3] = 0.0;\n  result[4] = m01 * scaleY;\n  result[5] = m11 * scaleY;\n  result[6] = m21 * scaleY;\n  result[7] = 0.0;\n  result[8] = m02 * scaleZ;\n  result[9] = m12 * scaleZ;\n  result[10] = m22 * scaleZ;\n  result[11] = 0.0;\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = 1.0;\n\n  return result;\n};\n\n/**\n * Creates a Matrix4 instance from a {@link TranslationRotationScale} instance.\n *\n * @param {TranslationRotationScale} translationRotationScale The instance.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromTranslationRotationScale = function (\n  translationRotationScale,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translationRotationScale\", translationRotationScale);\n  //>>includeEnd('debug');\n\n  return Matrix4.fromTranslationQuaternionRotationScale(\n    translationRotationScale.translation,\n    translationRotationScale.rotation,\n    translationRotationScale.scale,\n    result,\n  );\n};\n\n/**\n * Creates a Matrix4 instance from a Cartesian3 representing the translation.\n *\n * @param {Cartesian3} translation The upper right portion of the matrix representing the translation.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @see Matrix4.multiplyByTranslation\n */\nMatrix4.fromTranslation = function (translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"translation\", translation);\n  //>>includeEnd('debug');\n\n  return Matrix4.fromRotationTranslation(Matrix3.IDENTITY, translation, result);\n};\n\n/**\n * Computes a Matrix4 instance representing a non-uniform scale.\n *\n * @param {Cartesian3} scale The x, y, and z scale factors.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Creates\n * //   [7.0, 0.0, 0.0, 0.0]\n * //   [0.0, 8.0, 0.0, 0.0]\n * //   [0.0, 0.0, 9.0, 0.0]\n * //   [0.0, 0.0, 0.0, 1.0]\n * const m = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));\n */\nMatrix4.fromScale = function (scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"scale\", scale);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(\n      scale.x,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      scale.y,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      scale.z,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n    );\n  }\n\n  result[0] = scale.x;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = scale.y;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = scale.z;\n  result[11] = 0.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = 0.0;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing a uniform scale.\n *\n * @param {number} scale The uniform scale factor.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n *\n * @example\n * // Creates\n * //   [2.0, 0.0, 0.0, 0.0]\n * //   [0.0, 2.0, 0.0, 0.0]\n * //   [0.0, 0.0, 2.0, 0.0]\n * //   [0.0, 0.0, 0.0, 1.0]\n * const m = Cesium.Matrix4.fromUniformScale(2.0);\n */\nMatrix4.fromUniformScale = function (scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"scale\", scale);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Matrix4(\n      scale,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      scale,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      scale,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n    );\n  }\n\n  result[0] = scale;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = scale;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = scale;\n  result[11] = 0.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = 0.0;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Creates a rotation matrix.\n *\n * @param {Matrix3} rotation The rotation matrix.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromRotation = function (rotation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rotation\", rotation);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n  result[0] = rotation[0];\n  result[1] = rotation[1];\n  result[2] = rotation[2];\n  result[3] = 0.0;\n\n  result[4] = rotation[3];\n  result[5] = rotation[4];\n  result[6] = rotation[5];\n  result[7] = 0.0;\n\n  result[8] = rotation[6];\n  result[9] = rotation[7];\n  result[10] = rotation[8];\n  result[11] = 0.0;\n\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = 0.0;\n  result[15] = 1.0;\n\n  return result;\n};\n\nconst fromCameraF = new Cartesian3();\nconst fromCameraR = new Cartesian3();\nconst fromCameraU = new Cartesian3();\n\n/**\n * Computes a Matrix4 instance from a Camera.\n *\n * @param {Camera} camera The camera to use.\n * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\n */\nMatrix4.fromCamera = function (camera, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"camera\", camera);\n  //>>includeEnd('debug');\n\n  const position = camera.position;\n  const direction = camera.direction;\n  const up = camera.up;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"camera.position\", position);\n  Check.typeOf.object(\"camera.direction\", direction);\n  Check.typeOf.object(\"camera.up\", up);\n  //>>includeEnd('debug');\n\n  Cartesian3.normalize(direction, fromCameraF);\n  Cartesian3.normalize(\n    Cartesian3.cross(fromCameraF, up, fromCameraR),\n    fromCameraR,\n  );\n  Cartesian3.normalize(\n    Cartesian3.cross(fromCameraR, fromCameraF, fromCameraU),\n    fromCameraU,\n  );\n\n  const sX = fromCameraR.x;\n  const sY = fromCameraR.y;\n  const sZ = fromCameraR.z;\n  const fX = fromCameraF.x;\n  const fY = fromCameraF.y;\n  const fZ = fromCameraF.z;\n  const uX = fromCameraU.x;\n  const uY = fromCameraU.y;\n  const uZ = fromCameraU.z;\n  const positionX = position.x;\n  const positionY = position.y;\n  const positionZ = position.z;\n  const t0 = sX * -positionX + sY * -positionY + sZ * -positionZ;\n  const t1 = uX * -positionX + uY * -positionY + uZ * -positionZ;\n  const t2 = fX * positionX + fY * positionY + fZ * positionZ;\n\n  // The code below this comment is an optimized\n  // version of the commented lines.\n  // Rather that create two matrices and then multiply,\n  // we just bake in the multiplcation as part of creation.\n  // const rotation = new Matrix4(\n  //                 sX,  sY,  sZ, 0.0,\n  //                 uX,  uY,  uZ, 0.0,\n  //                -fX, -fY, -fZ, 0.0,\n  //                 0.0,  0.0,  0.0, 1.0);\n  // const translation = new Matrix4(\n  //                 1.0, 0.0, 0.0, -position.x,\n  //                 0.0, 1.0, 0.0, -position.y,\n  //                 0.0, 0.0, 1.0, -position.z,\n  //                 0.0, 0.0, 0.0, 1.0);\n  // return rotation.multiply(translation);\n  if (!defined(result)) {\n    return new Matrix4(\n      sX,\n      sY,\n      sZ,\n      t0,\n      uX,\n      uY,\n      uZ,\n      t1,\n      -fX,\n      -fY,\n      -fZ,\n      t2,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n    );\n  }\n  result[0] = sX;\n  result[1] = uX;\n  result[2] = -fX;\n  result[3] = 0.0;\n  result[4] = sY;\n  result[5] = uY;\n  result[6] = -fY;\n  result[7] = 0.0;\n  result[8] = sZ;\n  result[9] = uZ;\n  result[10] = -fZ;\n  result[11] = 0.0;\n  result[12] = t0;\n  result[13] = t1;\n  result[14] = t2;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing a perspective transformation matrix.\n *\n * @param {number} fovY The field of view along the Y axis in radians.\n * @param {number} aspectRatio The aspect ratio.\n * @param {number} near The distance to the near plane in meters.\n * @param {number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} fovY must be in (0, PI].\n * @exception {DeveloperError} aspectRatio must be greater than zero.\n * @exception {DeveloperError} near must be greater than zero.\n * @exception {DeveloperError} far must be greater than zero.\n */\nMatrix4.computePerspectiveFieldOfView = function (\n  fovY,\n  aspectRatio,\n  near,\n  far,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"fovY\", fovY, 0.0);\n  Check.typeOf.number.lessThan(\"fovY\", fovY, Math.PI);\n  Check.typeOf.number.greaterThan(\"near\", near, 0.0);\n  Check.typeOf.number.greaterThan(\"far\", far, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const bottom = Math.tan(fovY * 0.5);\n\n  const column1Row1 = 1.0 / bottom;\n  const column0Row0 = column1Row1 / aspectRatio;\n  const column2Row2 = (far + near) / (near - far);\n  const column3Row2 = (2.0 * far * near) / (near - far);\n\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = column2Row2;\n  result[11] = -1.0;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing an orthographic transformation matrix.\n *\n * @param {number} left The number of meters to the left of the camera that will be in view.\n * @param {number} right The number of meters to the right of the camera that will be in view.\n * @param {number} bottom The number of meters below of the camera that will be in view.\n * @param {number} top The number of meters above of the camera that will be in view.\n * @param {number} near The distance to the near plane in meters.\n * @param {number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computeOrthographicOffCenter = function (\n  left,\n  right,\n  bottom,\n  top,\n  near,\n  far,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.number(\"far\", far);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  let a = 1.0 / (right - left);\n  let b = 1.0 / (top - bottom);\n  let c = 1.0 / (far - near);\n\n  const tx = -(right + left) * a;\n  const ty = -(top + bottom) * b;\n  const tz = -(far + near) * c;\n  a *= 2.0;\n  b *= 2.0;\n  c *= -2.0;\n\n  result[0] = a;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = b;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = c;\n  result[11] = 0.0;\n  result[12] = tx;\n  result[13] = ty;\n  result[14] = tz;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing an off center perspective transformation.\n *\n * @param {number} left The number of meters to the left of the camera that will be in view.\n * @param {number} right The number of meters to the right of the camera that will be in view.\n * @param {number} bottom The number of meters below the camera that will be in view.\n * @param {number} top The number of meters above the camera that will be in view.\n * @param {number} near The distance to the near plane in meters.\n * @param {number} far The distance to the far plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computePerspectiveOffCenter = function (\n  left,\n  right,\n  bottom,\n  top,\n  near,\n  far,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.number(\"far\", far);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const column0Row0 = (2.0 * near) / (right - left);\n  const column1Row1 = (2.0 * near) / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -(far + near) / (far - near);\n  const column2Row3 = -1.0;\n  const column3Row2 = (-2.0 * far * near) / (far - near);\n\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance representing an infinite off center perspective transformation.\n *\n * @param {number} left The number of meters to the left of the camera that will be in view.\n * @param {number} right The number of meters to the right of the camera that will be in view.\n * @param {number} bottom The number of meters below of the camera that will be in view.\n * @param {number} top The number of meters above of the camera that will be in view.\n * @param {number} near The distance to the near plane in meters.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computeInfinitePerspectiveOffCenter = function (\n  left,\n  right,\n  bottom,\n  top,\n  near,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"left\", left);\n  Check.typeOf.number(\"right\", right);\n  Check.typeOf.number(\"bottom\", bottom);\n  Check.typeOf.number(\"top\", top);\n  Check.typeOf.number(\"near\", near);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const column0Row0 = (2.0 * near) / (right - left);\n  const column1Row1 = (2.0 * near) / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -1.0;\n  const column2Row3 = -1.0;\n  const column3Row2 = -2.0 * near;\n\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0.0;\n  result[13] = 0.0;\n  result[14] = column3Row2;\n  result[15] = 0.0;\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance that transforms from normalized device coordinates to window coordinates.\n *\n * @param {object} [viewport = { x : 0.0, y : 0.0, width : 0.0, height : 0.0 }] The viewport's corners as shown in Example 1.\n * @param {number} [nearDepthRange=0.0] The near plane distance in window coordinates.\n * @param {number} [farDepthRange=1.0] The far plane distance in window coordinates.\n * @param {Matrix4} [result] The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Create viewport transformation using an explicit viewport and depth range.\n * const m = Cesium.Matrix4.computeViewportTransformation({\n *     x : 0.0,\n *     y : 0.0,\n *     width : 1024.0,\n *     height : 768.0\n * }, 0.0, 1.0, new Cesium.Matrix4());\n */\nMatrix4.computeViewportTransformation = function (\n  viewport,\n  nearDepthRange,\n  farDepthRange,\n  result,\n) {\n  if (!defined(result)) {\n    result = new Matrix4();\n  }\n\n  viewport = defaultValue(viewport, defaultValue.EMPTY_OBJECT);\n  const x = defaultValue(viewport.x, 0.0);\n  const y = defaultValue(viewport.y, 0.0);\n  const width = defaultValue(viewport.width, 0.0);\n  const height = defaultValue(viewport.height, 0.0);\n  nearDepthRange = defaultValue(nearDepthRange, 0.0);\n  farDepthRange = defaultValue(farDepthRange, 1.0);\n\n  const halfWidth = width * 0.5;\n  const halfHeight = height * 0.5;\n  const halfDepth = (farDepthRange - nearDepthRange) * 0.5;\n\n  const column0Row0 = halfWidth;\n  const column1Row1 = halfHeight;\n  const column2Row2 = halfDepth;\n  const column3Row0 = x + halfWidth;\n  const column3Row1 = y + halfHeight;\n  const column3Row2 = nearDepthRange + halfDepth;\n  const column3Row3 = 1.0;\n\n  result[0] = column0Row0;\n  result[1] = 0.0;\n  result[2] = 0.0;\n  result[3] = 0.0;\n  result[4] = 0.0;\n  result[5] = column1Row1;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 0.0;\n  result[9] = 0.0;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = column3Row3;\n\n  return result;\n};\n\n/**\n * Computes a Matrix4 instance that transforms from world space to view space.\n *\n * @param {Cartesian3} position The position of the camera.\n * @param {Cartesian3} direction The forward direction.\n * @param {Cartesian3} up The up direction.\n * @param {Cartesian3} right The right direction.\n * @param {Matrix4} result The object in which the result will be stored.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.computeView = function (position, direction, up, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"position\", position);\n  Check.typeOf.object(\"direction\", direction);\n  Check.typeOf.object(\"up\", up);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = right.x;\n  result[1] = up.x;\n  result[2] = -direction.x;\n  result[3] = 0.0;\n  result[4] = right.y;\n  result[5] = up.y;\n  result[6] = -direction.y;\n  result[7] = 0.0;\n  result[8] = right.z;\n  result[9] = up.z;\n  result[10] = -direction.z;\n  result[11] = 0.0;\n  result[12] = -Cartesian3.dot(right, position);\n  result[13] = -Cartesian3.dot(up, position);\n  result[14] = Cartesian3.dot(direction, position);\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Computes an Array from the provided Matrix4 instance.\n * The array will be in column-major order.\n *\n * @param {Matrix4} matrix The matrix to use..\n * @param {number[]} [result] The Array onto which to store the result.\n * @returns {number[]} The modified Array parameter or a new Array instance if one was not provided.\n *\n * @example\n * //create an array from an instance of Matrix4\n * // m = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n * const a = Cesium.Matrix4.toArray(m);\n *\n * // m remains the same\n * //creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]\n */\nMatrix4.toArray = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return [\n      matrix[0],\n      matrix[1],\n      matrix[2],\n      matrix[3],\n      matrix[4],\n      matrix[5],\n      matrix[6],\n      matrix[7],\n      matrix[8],\n      matrix[9],\n      matrix[10],\n      matrix[11],\n      matrix[12],\n      matrix[13],\n      matrix[14],\n      matrix[15],\n    ];\n  }\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Computes the array index of the element at the provided row and column.\n *\n * @param {number} row The zero-based index of the row.\n * @param {number} column The zero-based index of the column.\n * @returns {number} The index of the element at the provided row and column.\n *\n * @exception {DeveloperError} row must be 0, 1, 2, or 3.\n * @exception {DeveloperError} column must be 0, 1, 2, or 3.\n *\n * @example\n * const myMatrix = new Cesium.Matrix4();\n * const column1Row0Index = Cesium.Matrix4.getElementIndex(1, 0);\n * const column1Row0 = myMatrix[column1Row0Index];\n * myMatrix[column1Row0Index] = 10.0;\n */\nMatrix4.getElementIndex = function (column, row) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"row\", row, 0);\n  Check.typeOf.number.lessThanOrEquals(\"row\", row, 3);\n\n  Check.typeOf.number.greaterThanOrEquals(\"column\", column, 0);\n  Check.typeOf.number.lessThanOrEquals(\"column\", column, 3);\n  //>>includeEnd('debug');\n\n  return column * 4 + row;\n};\n\n/**\n * Retrieves a copy of the matrix column at the provided index as a Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {number} index The zero-based index of the column to retrieve.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //returns a Cartesian4 instance with values from the specified column\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * //Example 1: Creates an instance of Cartesian\n * const a = Cesium.Matrix4.getColumn(m, 2, new Cesium.Cartesian4());\n *\n * @example\n * //Example 2: Sets values for Cartesian instance\n * const a = new Cesium.Cartesian4();\n * Cesium.Matrix4.getColumn(m, 2, a);\n *\n * // a.x = 12.0; a.y = 16.0; a.z = 20.0; a.w = 24.0;\n */\nMatrix4.getColumn = function (matrix, index, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const startIndex = index * 4;\n  const x = matrix[startIndex];\n  const y = matrix[startIndex + 1];\n  const z = matrix[startIndex + 2];\n  const w = matrix[startIndex + 3];\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {number} index The zero-based index of the column to set.\n * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified column.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //creates a new Matrix4 instance with new column values from the Cartesian4 instance\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * const a = Cesium.Matrix4.setColumn(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 11.0, 99.0, 13.0]\n * //     [14.0, 15.0, 98.0, 17.0]\n * //     [18.0, 19.0, 97.0, 21.0]\n * //     [22.0, 23.0, 96.0, 25.0]\n */\nMatrix4.setColumn = function (matrix, index, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result = Matrix4.clone(matrix, result);\n  const startIndex = index * 4;\n  result[startIndex] = cartesian.x;\n  result[startIndex + 1] = cartesian.y;\n  result[startIndex + 2] = cartesian.z;\n  result[startIndex + 3] = cartesian.w;\n  return result;\n};\n\n/**\n * Retrieves a copy of the matrix row at the provided index as a Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {number} index The zero-based index of the row to retrieve.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //returns a Cartesian4 instance with values from the specified column\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * //Example 1: Returns an instance of Cartesian\n * const a = Cesium.Matrix4.getRow(m, 2, new Cesium.Cartesian4());\n *\n * @example\n * //Example 2: Sets values for a Cartesian instance\n * const a = new Cesium.Cartesian4();\n * Cesium.Matrix4.getRow(m, 2, a);\n *\n * // a.x = 18.0; a.y = 19.0; a.z = 20.0; a.w = 21.0;\n */\nMatrix4.getRow = function (matrix, index, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const x = matrix[index];\n  const y = matrix[index + 4];\n  const z = matrix[index + 8];\n  const w = matrix[index + 12];\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian4 instance.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {number} index The zero-based index of the row to set.\n * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified row.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {DeveloperError} index must be 0, 1, 2, or 3.\n *\n * @example\n * //create a new Matrix4 instance with new row values from the Cartesian4 instance\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * const a = Cesium.Matrix4.setRow(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [99.0, 98.0, 97.0, 96.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n */\nMatrix4.setRow = function (matrix, index, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  Check.typeOf.number.lessThanOrEquals(\"index\", index, 3);\n\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result = Matrix4.clone(matrix, result);\n  result[index] = cartesian.x;\n  result[index + 4] = cartesian.y;\n  result[index + 8] = cartesian.z;\n  result[index + 12] = cartesian.w;\n  return result;\n};\n\n/**\n * Computes a new matrix that replaces the translation in the rightmost column of the provided\n * matrix with the provided translation. This assumes the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} translation The translation that replaces the translation of the provided matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.setTranslation = function (matrix, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n\n  result[12] = translation.x;\n  result[13] = translation.y;\n  result[14] = translation.z;\n  result[15] = matrix[15];\n\n  return result;\n};\n\nconst scaleScratch1 = new Cartesian3();\n\n/**\n * Computes a new matrix that replaces the scale with the provided scale.\n * This assumes the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} scale The scale that replaces the scale of the provided matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @see Matrix4.setUniformScale\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.multiplyByScale\n * @see Matrix4.multiplyByUniformScale\n * @see Matrix4.getScale\n */\nMatrix4.setScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const existingScale = Matrix4.getScale(matrix, scaleScratch1);\n  const scaleRatioX = scale.x / existingScale.x;\n  const scaleRatioY = scale.y / existingScale.y;\n  const scaleRatioZ = scale.z / existingScale.z;\n\n  result[0] = matrix[0] * scaleRatioX;\n  result[1] = matrix[1] * scaleRatioX;\n  result[2] = matrix[2] * scaleRatioX;\n  result[3] = matrix[3];\n\n  result[4] = matrix[4] * scaleRatioY;\n  result[5] = matrix[5] * scaleRatioY;\n  result[6] = matrix[6] * scaleRatioY;\n  result[7] = matrix[7];\n\n  result[8] = matrix[8] * scaleRatioZ;\n  result[9] = matrix[9] * scaleRatioZ;\n  result[10] = matrix[10] * scaleRatioZ;\n  result[11] = matrix[11];\n\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n\n  return result;\n};\n\nconst scaleScratch2 = new Cartesian3();\n\n/**\n * Computes a new matrix that replaces the scale with the provided uniform scale.\n * This assumes the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {number} scale The uniform scale that replaces the scale of the provided matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @see Matrix4.setScale\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.multiplyByScale\n * @see Matrix4.multiplyByUniformScale\n * @see Matrix4.getScale\n */\nMatrix4.setUniformScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const existingScale = Matrix4.getScale(matrix, scaleScratch2);\n  const scaleRatioX = scale / existingScale.x;\n  const scaleRatioY = scale / existingScale.y;\n  const scaleRatioZ = scale / existingScale.z;\n\n  result[0] = matrix[0] * scaleRatioX;\n  result[1] = matrix[1] * scaleRatioX;\n  result[2] = matrix[2] * scaleRatioX;\n  result[3] = matrix[3];\n\n  result[4] = matrix[4] * scaleRatioY;\n  result[5] = matrix[5] * scaleRatioY;\n  result[6] = matrix[6] * scaleRatioY;\n  result[7] = matrix[7];\n\n  result[8] = matrix[8] * scaleRatioZ;\n  result[9] = matrix[9] * scaleRatioZ;\n  result[10] = matrix[10] * scaleRatioZ;\n  result[11] = matrix[11];\n\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n\n  return result;\n};\n\nconst scratchColumn = new Cartesian3();\n\n/**\n * Extracts the non-uniform scale assuming the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter\n *\n * @see Matrix4.multiplyByScale\n * @see Matrix4.multiplyByUniformScale\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.setScale\n * @see Matrix4.setUniformScale\n */\nMatrix4.getScale = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Cartesian3.magnitude(\n    Cartesian3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn),\n  );\n  result.y = Cartesian3.magnitude(\n    Cartesian3.fromElements(matrix[4], matrix[5], matrix[6], scratchColumn),\n  );\n  result.z = Cartesian3.magnitude(\n    Cartesian3.fromElements(matrix[8], matrix[9], matrix[10], scratchColumn),\n  );\n  return result;\n};\n\nconst scaleScratch3 = new Cartesian3();\n\n/**\n * Computes the maximum scale assuming the matrix is an affine transformation.\n * The maximum scale is the maximum length of the column vectors in the upper-left\n * 3x3 matrix.\n *\n * @param {Matrix4} matrix The matrix.\n * @returns {number} The maximum scale.\n */\nMatrix4.getMaximumScale = function (matrix) {\n  Matrix4.getScale(matrix, scaleScratch3);\n  return Cartesian3.maximumComponent(scaleScratch3);\n};\n\nconst scaleScratch4 = new Cartesian3();\n\n/**\n * Sets the rotation assuming the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Matrix3} rotation The rotation matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @see Matrix4.fromRotation\n * @see Matrix4.getRotation\n */\nMatrix4.setRotation = function (matrix, rotation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const scale = Matrix4.getScale(matrix, scaleScratch4);\n\n  result[0] = rotation[0] * scale.x;\n  result[1] = rotation[1] * scale.x;\n  result[2] = rotation[2] * scale.x;\n  result[3] = matrix[3];\n\n  result[4] = rotation[3] * scale.y;\n  result[5] = rotation[4] * scale.y;\n  result[6] = rotation[5] * scale.y;\n  result[7] = matrix[7];\n\n  result[8] = rotation[6] * scale.z;\n  result[9] = rotation[7] * scale.z;\n  result[10] = rotation[8] * scale.z;\n  result[11] = matrix[11];\n\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n\n  return result;\n};\n\nconst scaleScratch5 = new Cartesian3();\n\n/**\n * Extracts the rotation matrix assuming the matrix is an affine transformation.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Matrix3} result The object onto which to store the result.\n * @returns {Matrix3} The modified result parameter.\n *\n * @see Matrix4.setRotation\n * @see Matrix4.fromRotation\n */\nMatrix4.getRotation = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const scale = Matrix4.getScale(matrix, scaleScratch5);\n\n  result[0] = matrix[0] / scale.x;\n  result[1] = matrix[1] / scale.x;\n  result[2] = matrix[2] / scale.x;\n\n  result[3] = matrix[4] / scale.y;\n  result[4] = matrix[5] / scale.y;\n  result[5] = matrix[6] / scale.y;\n\n  result[6] = matrix[8] / scale.z;\n  result[7] = matrix[9] / scale.z;\n  result[8] = matrix[10] / scale.z;\n\n  return result;\n};\n\n/**\n * Computes the product of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.multiply = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const left0 = left[0];\n  const left1 = left[1];\n  const left2 = left[2];\n  const left3 = left[3];\n  const left4 = left[4];\n  const left5 = left[5];\n  const left6 = left[6];\n  const left7 = left[7];\n  const left8 = left[8];\n  const left9 = left[9];\n  const left10 = left[10];\n  const left11 = left[11];\n  const left12 = left[12];\n  const left13 = left[13];\n  const left14 = left[14];\n  const left15 = left[15];\n\n  const right0 = right[0];\n  const right1 = right[1];\n  const right2 = right[2];\n  const right3 = right[3];\n  const right4 = right[4];\n  const right5 = right[5];\n  const right6 = right[6];\n  const right7 = right[7];\n  const right8 = right[8];\n  const right9 = right[9];\n  const right10 = right[10];\n  const right11 = right[11];\n  const right12 = right[12];\n  const right13 = right[13];\n  const right14 = right[14];\n  const right15 = right[15];\n\n  const column0Row0 =\n    left0 * right0 + left4 * right1 + left8 * right2 + left12 * right3;\n  const column0Row1 =\n    left1 * right0 + left5 * right1 + left9 * right2 + left13 * right3;\n  const column0Row2 =\n    left2 * right0 + left6 * right1 + left10 * right2 + left14 * right3;\n  const column0Row3 =\n    left3 * right0 + left7 * right1 + left11 * right2 + left15 * right3;\n\n  const column1Row0 =\n    left0 * right4 + left4 * right5 + left8 * right6 + left12 * right7;\n  const column1Row1 =\n    left1 * right4 + left5 * right5 + left9 * right6 + left13 * right7;\n  const column1Row2 =\n    left2 * right4 + left6 * right5 + left10 * right6 + left14 * right7;\n  const column1Row3 =\n    left3 * right4 + left7 * right5 + left11 * right6 + left15 * right7;\n\n  const column2Row0 =\n    left0 * right8 + left4 * right9 + left8 * right10 + left12 * right11;\n  const column2Row1 =\n    left1 * right8 + left5 * right9 + left9 * right10 + left13 * right11;\n  const column2Row2 =\n    left2 * right8 + left6 * right9 + left10 * right10 + left14 * right11;\n  const column2Row3 =\n    left3 * right8 + left7 * right9 + left11 * right10 + left15 * right11;\n\n  const column3Row0 =\n    left0 * right12 + left4 * right13 + left8 * right14 + left12 * right15;\n  const column3Row1 =\n    left1 * right12 + left5 * right13 + left9 * right14 + left13 * right15;\n  const column3Row2 =\n    left2 * right12 + left6 * right13 + left10 * right14 + left14 * right15;\n  const column3Row3 =\n    left3 * right12 + left7 * right13 + left11 * right14 + left15 * right15;\n\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = column0Row3;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = column1Row3;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = column3Row3;\n  return result;\n};\n\n/**\n * Computes the sum of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = left[0] + right[0];\n  result[1] = left[1] + right[1];\n  result[2] = left[2] + right[2];\n  result[3] = left[3] + right[3];\n  result[4] = left[4] + right[4];\n  result[5] = left[5] + right[5];\n  result[6] = left[6] + right[6];\n  result[7] = left[7] + right[7];\n  result[8] = left[8] + right[8];\n  result[9] = left[9] + right[9];\n  result[10] = left[10] + right[10];\n  result[11] = left[11] + right[11];\n  result[12] = left[12] + right[12];\n  result[13] = left[13] + right[13];\n  result[14] = left[14] + right[14];\n  result[15] = left[15] + right[15];\n  return result;\n};\n\n/**\n * Computes the difference of two matrices.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = left[0] - right[0];\n  result[1] = left[1] - right[1];\n  result[2] = left[2] - right[2];\n  result[3] = left[3] - right[3];\n  result[4] = left[4] - right[4];\n  result[5] = left[5] - right[5];\n  result[6] = left[6] - right[6];\n  result[7] = left[7] - right[7];\n  result[8] = left[8] - right[8];\n  result[9] = left[9] - right[9];\n  result[10] = left[10] - right[10];\n  result[11] = left[11] - right[11];\n  result[12] = left[12] - right[12];\n  result[13] = left[13] - right[13];\n  result[14] = left[14] - right[14];\n  result[15] = left[15] - right[15];\n  return result;\n};\n\n/**\n * Computes the product of two matrices assuming the matrices are affine transformation matrices,\n * where the upper left 3x3 elements are any matrix, and\n * the upper three elements in the fourth column are the translation.\n * The bottom row is assumed to be [0, 0, 0, 1].\n * The matrix is not verified to be in the proper form.\n * This method is faster than computing the product for general 4x4\n * matrices using {@link Matrix4.multiply}.\n *\n * @param {Matrix4} left The first matrix.\n * @param {Matrix4} right The second matrix.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * const m1 = new Cesium.Matrix4(1.0, 6.0, 7.0, 0.0, 2.0, 5.0, 8.0, 0.0, 3.0, 4.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n * const m2 = Cesium.Transforms.eastNorthUpToFixedFrame(new Cesium.Cartesian3(1.0, 1.0, 1.0));\n * const m3 = Cesium.Matrix4.multiplyTransformation(m1, m2, new Cesium.Matrix4());\n */\nMatrix4.multiplyTransformation = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const left0 = left[0];\n  const left1 = left[1];\n  const left2 = left[2];\n  const left4 = left[4];\n  const left5 = left[5];\n  const left6 = left[6];\n  const left8 = left[8];\n  const left9 = left[9];\n  const left10 = left[10];\n  const left12 = left[12];\n  const left13 = left[13];\n  const left14 = left[14];\n\n  const right0 = right[0];\n  const right1 = right[1];\n  const right2 = right[2];\n  const right4 = right[4];\n  const right5 = right[5];\n  const right6 = right[6];\n  const right8 = right[8];\n  const right9 = right[9];\n  const right10 = right[10];\n  const right12 = right[12];\n  const right13 = right[13];\n  const right14 = right[14];\n\n  const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\n  const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\n  const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\n\n  const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\n  const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\n  const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\n\n  const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\n  const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\n  const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\n\n  const column3Row0 =\n    left0 * right12 + left4 * right13 + left8 * right14 + left12;\n  const column3Row1 =\n    left1 * right12 + left5 * right13 + left9 * right14 + left13;\n  const column3Row2 =\n    left2 * right12 + left6 * right13 + left10 * right14 + left14;\n\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = 0.0;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = column3Row0;\n  result[13] = column3Row1;\n  result[14] = column3Row2;\n  result[15] = 1.0;\n  return result;\n};\n\n/**\n * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by a 3x3 rotation matrix.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromRotationTranslation(rotation), m);</code> with less allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The matrix on the left-hand side.\n * @param {Matrix3} rotation The 3x3 rotation matrix on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromRotationTranslation(rotation), m);\n * Cesium.Matrix4.multiplyByMatrix3(m, rotation, m);\n */\nMatrix4.multiplyByMatrix3 = function (matrix, rotation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"rotation\", rotation);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const left0 = matrix[0];\n  const left1 = matrix[1];\n  const left2 = matrix[2];\n  const left4 = matrix[4];\n  const left5 = matrix[5];\n  const left6 = matrix[6];\n  const left8 = matrix[8];\n  const left9 = matrix[9];\n  const left10 = matrix[10];\n\n  const right0 = rotation[0];\n  const right1 = rotation[1];\n  const right2 = rotation[2];\n  const right4 = rotation[3];\n  const right5 = rotation[4];\n  const right6 = rotation[5];\n  const right8 = rotation[6];\n  const right9 = rotation[7];\n  const right10 = rotation[8];\n\n  const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\n  const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\n  const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\n\n  const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\n  const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\n  const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\n\n  const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\n  const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\n  const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\n\n  result[0] = column0Row0;\n  result[1] = column0Row1;\n  result[2] = column0Row2;\n  result[3] = 0.0;\n  result[4] = column1Row0;\n  result[5] = column1Row1;\n  result[6] = column1Row2;\n  result[7] = 0.0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = 0.0;\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by an implicit translation matrix defined by a {@link Cartesian3}.  This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromTranslation(position), m);</code> with less allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The matrix on the left-hand side.\n * @param {Cartesian3} translation The translation on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromTranslation(position), m);\n * Cesium.Matrix4.multiplyByTranslation(m, position, m);\n */\nMatrix4.multiplyByTranslation = function (matrix, translation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"translation\", translation);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const x = translation.x;\n  const y = translation.y;\n  const z = translation.z;\n\n  const tx = x * matrix[0] + y * matrix[4] + z * matrix[8] + matrix[12];\n  const ty = x * matrix[1] + y * matrix[5] + z * matrix[9] + matrix[13];\n  const tz = x * matrix[2] + y * matrix[6] + z * matrix[10] + matrix[14];\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[3];\n  result[4] = matrix[4];\n  result[5] = matrix[5];\n  result[6] = matrix[6];\n  result[7] = matrix[7];\n  result[8] = matrix[8];\n  result[9] = matrix[9];\n  result[10] = matrix[10];\n  result[11] = matrix[11];\n  result[12] = tx;\n  result[13] = ty;\n  result[14] = tz;\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\n * by an implicit non-uniform scale matrix. This is an optimization\n * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\n * <code>m</code> must be an affine matrix.\n * This function performs fewer allocations and arithmetic operations.\n *\n * @param {Matrix4} matrix The affine matrix on the left-hand side.\n * @param {Cartesian3} scale The non-uniform scale on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromScale(scale), m);\n * Cesium.Matrix4.multiplyByScale(m, scale, m);\n *\n * @see Matrix4.multiplyByUniformScale\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.setScale\n * @see Matrix4.setUniformScale\n * @see Matrix4.getScale\n */\nMatrix4.multiplyByScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const scaleX = scale.x;\n  const scaleY = scale.y;\n  const scaleZ = scale.z;\n\n  // Faster than Cartesian3.equals\n  if (scaleX === 1.0 && scaleY === 1.0 && scaleZ === 1.0) {\n    return Matrix4.clone(matrix, result);\n  }\n\n  result[0] = scaleX * matrix[0];\n  result[1] = scaleX * matrix[1];\n  result[2] = scaleX * matrix[2];\n  result[3] = matrix[3];\n\n  result[4] = scaleY * matrix[4];\n  result[5] = scaleY * matrix[5];\n  result[6] = scaleY * matrix[6];\n  result[7] = matrix[7];\n\n  result[8] = scaleZ * matrix[8];\n  result[9] = scaleZ * matrix[9];\n  result[10] = scaleZ * matrix[10];\n  result[11] = matrix[11];\n\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n\n  return result;\n};\n\n/**\n * Computes the product of a matrix times a uniform scale, as if the scale were a scale matrix.\n *\n * @param {Matrix4} matrix The matrix on the left-hand side.\n * @param {number} scale The uniform scale on the right-hand side.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromUniformScale(scale), m);\n * Cesium.Matrix4.multiplyByUniformScale(m, scale, m);\n *\n * @see Matrix4.multiplyByScale\n * @see Matrix4.fromScale\n * @see Matrix4.fromUniformScale\n * @see Matrix4.setScale\n * @see Matrix4.setUniformScale\n * @see Matrix4.getScale\n */\nMatrix4.multiplyByUniformScale = function (matrix, scale, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number(\"scale\", scale);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0] * scale;\n  result[1] = matrix[1] * scale;\n  result[2] = matrix[2] * scale;\n  result[3] = matrix[3];\n\n  result[4] = matrix[4] * scale;\n  result[5] = matrix[5] * scale;\n  result[6] = matrix[6] * scale;\n  result[7] = matrix[7];\n\n  result[8] = matrix[8] * scale;\n  result[9] = matrix[9] * scale;\n  result[10] = matrix[10] * scale;\n  result[11] = matrix[11];\n\n  result[12] = matrix[12];\n  result[13] = matrix[13];\n  result[14] = matrix[14];\n  result[15] = matrix[15];\n\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a column vector.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian4} cartesian The vector.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nMatrix4.multiplyByVector = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const vX = cartesian.x;\n  const vY = cartesian.y;\n  const vZ = cartesian.z;\n  const vW = cartesian.w;\n\n  const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12] * vW;\n  const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13] * vW;\n  const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14] * vW;\n  const w = matrix[3] * vX + matrix[7] * vY + matrix[11] * vZ + matrix[15] * vW;\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a {@link Cartesian3}.  This is equivalent to calling {@link Matrix4.multiplyByVector}\n * with a {@link Cartesian4} with a <code>w</code> component of zero.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} cartesian The point.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n *\n * @example\n * const p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * const result = Cesium.Matrix4.multiplyByPointAsVector(matrix, p, new Cesium.Cartesian3());\n * // A shortcut for\n * //   Cartesian3 p = ...\n * //   Cesium.Matrix4.multiplyByVector(matrix, new Cesium.Cartesian4(p.x, p.y, p.z, 0.0), result);\n */\nMatrix4.multiplyByPointAsVector = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const vX = cartesian.x;\n  const vY = cartesian.y;\n  const vZ = cartesian.z;\n\n  const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ;\n  const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ;\n  const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ;\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a {@link Cartesian3}. This is equivalent to calling {@link Matrix4.multiplyByVector}\n * with a {@link Cartesian4} with a <code>w</code> component of 1, but returns a {@link Cartesian3} instead of a {@link Cartesian4}.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {Cartesian3} cartesian The point.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n *\n * @example\n * const p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * const result = Cesium.Matrix4.multiplyByPoint(matrix, p, new Cesium.Cartesian3());\n */\nMatrix4.multiplyByPoint = function (matrix, cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const vX = cartesian.x;\n  const vY = cartesian.y;\n  const vZ = cartesian.z;\n\n  const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12];\n  const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13];\n  const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14];\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Computes the product of a matrix and a scalar.\n *\n * @param {Matrix4} matrix The matrix.\n * @param {number} scalar The number to multiply by.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //create a Matrix4 instance which is a scaled version of the supplied Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * const a = Cesium.Matrix4.multiplyByScalar(m, -2, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [-20.0, -22.0, -24.0, -26.0]\n * //     [-28.0, -30.0, -32.0, -34.0]\n * //     [-36.0, -38.0, -40.0, -42.0]\n * //     [-44.0, -46.0, -48.0, -50.0]\n */\nMatrix4.multiplyByScalar = function (matrix, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0] * scalar;\n  result[1] = matrix[1] * scalar;\n  result[2] = matrix[2] * scalar;\n  result[3] = matrix[3] * scalar;\n  result[4] = matrix[4] * scalar;\n  result[5] = matrix[5] * scalar;\n  result[6] = matrix[6] * scalar;\n  result[7] = matrix[7] * scalar;\n  result[8] = matrix[8] * scalar;\n  result[9] = matrix[9] * scalar;\n  result[10] = matrix[10] * scalar;\n  result[11] = matrix[11] * scalar;\n  result[12] = matrix[12] * scalar;\n  result[13] = matrix[13] * scalar;\n  result[14] = matrix[14] * scalar;\n  result[15] = matrix[15] * scalar;\n  return result;\n};\n\n/**\n * Computes a negated copy of the provided matrix.\n *\n * @param {Matrix4} matrix The matrix to negate.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //create a new Matrix4 instance which is a negation of a Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * const a = Cesium.Matrix4.negate(m, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [-10.0, -11.0, -12.0, -13.0]\n * //     [-14.0, -15.0, -16.0, -17.0]\n * //     [-18.0, -19.0, -20.0, -21.0]\n * //     [-22.0, -23.0, -24.0, -25.0]\n */\nMatrix4.negate = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = -matrix[0];\n  result[1] = -matrix[1];\n  result[2] = -matrix[2];\n  result[3] = -matrix[3];\n  result[4] = -matrix[4];\n  result[5] = -matrix[5];\n  result[6] = -matrix[6];\n  result[7] = -matrix[7];\n  result[8] = -matrix[8];\n  result[9] = -matrix[9];\n  result[10] = -matrix[10];\n  result[11] = -matrix[11];\n  result[12] = -matrix[12];\n  result[13] = -matrix[13];\n  result[14] = -matrix[14];\n  result[15] = -matrix[15];\n  return result;\n};\n\n/**\n * Computes the transpose of the provided matrix.\n *\n * @param {Matrix4} matrix The matrix to transpose.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @example\n * //returns transpose of a Matrix4\n * // m = [10.0, 11.0, 12.0, 13.0]\n * //     [14.0, 15.0, 16.0, 17.0]\n * //     [18.0, 19.0, 20.0, 21.0]\n * //     [22.0, 23.0, 24.0, 25.0]\n *\n * const a = Cesium.Matrix4.transpose(m, new Cesium.Matrix4());\n *\n * // m remains the same\n * // a = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n */\nMatrix4.transpose = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const matrix1 = matrix[1];\n  const matrix2 = matrix[2];\n  const matrix3 = matrix[3];\n  const matrix6 = matrix[6];\n  const matrix7 = matrix[7];\n  const matrix11 = matrix[11];\n\n  result[0] = matrix[0];\n  result[1] = matrix[4];\n  result[2] = matrix[8];\n  result[3] = matrix[12];\n  result[4] = matrix1;\n  result[5] = matrix[5];\n  result[6] = matrix[9];\n  result[7] = matrix[13];\n  result[8] = matrix2;\n  result[9] = matrix6;\n  result[10] = matrix[10];\n  result[11] = matrix[14];\n  result[12] = matrix3;\n  result[13] = matrix7;\n  result[14] = matrix11;\n  result[15] = matrix[15];\n  return result;\n};\n\n/**\n * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\n *\n * @param {Matrix4} matrix The matrix with signed elements.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.abs = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = Math.abs(matrix[0]);\n  result[1] = Math.abs(matrix[1]);\n  result[2] = Math.abs(matrix[2]);\n  result[3] = Math.abs(matrix[3]);\n  result[4] = Math.abs(matrix[4]);\n  result[5] = Math.abs(matrix[5]);\n  result[6] = Math.abs(matrix[6]);\n  result[7] = Math.abs(matrix[7]);\n  result[8] = Math.abs(matrix[8]);\n  result[9] = Math.abs(matrix[9]);\n  result[10] = Math.abs(matrix[10]);\n  result[11] = Math.abs(matrix[11]);\n  result[12] = Math.abs(matrix[12]);\n  result[13] = Math.abs(matrix[13]);\n  result[14] = Math.abs(matrix[14]);\n  result[15] = Math.abs(matrix[15]);\n\n  return result;\n};\n\n/**\n * Compares the provided matrices componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Matrix4} [left] The first matrix.\n * @param {Matrix4} [right] The second matrix.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n *\n * @example\n * //compares two Matrix4 instances\n *\n * // a = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * // b = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * if(Cesium.Matrix4.equals(a,b)) {\n *      console.log(\"Both matrices are equal\");\n * } else {\n *      console.log(\"They are not equal\");\n * }\n *\n * //Prints \"Both matrices are equal\" on the console\n */\nMatrix4.equals = function (left, right) {\n  // Given that most matrices will be transformation matrices, the elements\n  // are tested in order such that the test is likely to fail as early\n  // as possible.  I _think_ this is just as friendly to the L1 cache\n  // as testing in index order.  It is certainty faster in practice.\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      // Translation\n      left[12] === right[12] &&\n      left[13] === right[13] &&\n      left[14] === right[14] &&\n      // Rotation/scale\n      left[0] === right[0] &&\n      left[1] === right[1] &&\n      left[2] === right[2] &&\n      left[4] === right[4] &&\n      left[5] === right[5] &&\n      left[6] === right[6] &&\n      left[8] === right[8] &&\n      left[9] === right[9] &&\n      left[10] === right[10] &&\n      // Bottom row\n      left[3] === right[3] &&\n      left[7] === right[7] &&\n      left[11] === right[11] &&\n      left[15] === right[15])\n  );\n};\n\n/**\n * Compares the provided matrices componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Matrix4} [left] The first matrix.\n * @param {Matrix4} [right] The second matrix.\n * @param {number} [epsilon=0] The epsilon to use for equality testing.\n * @returns {boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n *\n * @example\n * //compares two Matrix4 instances\n *\n * // a = [10.5, 14.5, 18.5, 22.5]\n * //     [11.5, 15.5, 19.5, 23.5]\n * //     [12.5, 16.5, 20.5, 24.5]\n * //     [13.5, 17.5, 21.5, 25.5]\n *\n * // b = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * if(Cesium.Matrix4.equalsEpsilon(a,b,0.1)){\n *      console.log(\"Difference between both the matrices is less than 0.1\");\n * } else {\n *      console.log(\"Difference between both the matrices is not less than 0.1\");\n * }\n *\n * //Prints \"Difference between both the matrices is not less than 0.1\" on the console\n */\nMatrix4.equalsEpsilon = function (left, right, epsilon) {\n  epsilon = defaultValue(epsilon, 0);\n\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      Math.abs(left[0] - right[0]) <= epsilon &&\n      Math.abs(left[1] - right[1]) <= epsilon &&\n      Math.abs(left[2] - right[2]) <= epsilon &&\n      Math.abs(left[3] - right[3]) <= epsilon &&\n      Math.abs(left[4] - right[4]) <= epsilon &&\n      Math.abs(left[5] - right[5]) <= epsilon &&\n      Math.abs(left[6] - right[6]) <= epsilon &&\n      Math.abs(left[7] - right[7]) <= epsilon &&\n      Math.abs(left[8] - right[8]) <= epsilon &&\n      Math.abs(left[9] - right[9]) <= epsilon &&\n      Math.abs(left[10] - right[10]) <= epsilon &&\n      Math.abs(left[11] - right[11]) <= epsilon &&\n      Math.abs(left[12] - right[12]) <= epsilon &&\n      Math.abs(left[13] - right[13]) <= epsilon &&\n      Math.abs(left[14] - right[14]) <= epsilon &&\n      Math.abs(left[15] - right[15]) <= epsilon)\n  );\n};\n\n/**\n * Gets the translation portion of the provided matrix, assuming the matrix is an affine transformation matrix.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nMatrix4.getTranslation = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = matrix[12];\n  result.y = matrix[13];\n  result.z = matrix[14];\n  return result;\n};\n\n/**\n * Gets the upper left 3x3 matrix of the provided matrix.\n *\n * @param {Matrix4} matrix The matrix to use.\n * @param {Matrix3} result The object onto which to store the result.\n * @returns {Matrix3} The modified result parameter.\n *\n * @example\n * // returns a Matrix3 instance from a Matrix4 instance\n *\n * // m = [10.0, 14.0, 18.0, 22.0]\n * //     [11.0, 15.0, 19.0, 23.0]\n * //     [12.0, 16.0, 20.0, 24.0]\n * //     [13.0, 17.0, 21.0, 25.0]\n *\n * const b = new Cesium.Matrix3();\n * Cesium.Matrix4.getMatrix3(m,b);\n *\n * // b = [10.0, 14.0, 18.0]\n * //     [11.0, 15.0, 19.0]\n * //     [12.0, 16.0, 20.0]\n */\nMatrix4.getMatrix3 = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[4];\n  result[4] = matrix[5];\n  result[5] = matrix[6];\n  result[6] = matrix[8];\n  result[7] = matrix[9];\n  result[8] = matrix[10];\n  return result;\n};\n\nconst scratchInverseRotation = new Matrix3();\nconst scratchMatrix3Zero = new Matrix3();\nconst scratchBottomRow = new Cartesian4();\nconst scratchExpectedBottomRow = new Cartesian4(0.0, 0.0, 0.0, 1.0);\n\n/**\n * Computes the inverse of the provided matrix using Cramers Rule.\n * If the determinant is zero, the matrix can not be inverted, and an exception is thrown.\n * If the matrix is a proper rigid transformation, it is more efficient\n * to invert it with {@link Matrix4.inverseTransformation}.\n *\n * @param {Matrix4} matrix The matrix to invert.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n *\n * @exception {RuntimeError} matrix is not invertible because its determinate is zero.\n */\nMatrix4.inverse = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n  //\n  // Ported from:\n  //   ftp://download.intel.com/design/PentiumIII/sml/24504301.pdf\n  //\n  const src0 = matrix[0];\n  const src1 = matrix[4];\n  const src2 = matrix[8];\n  const src3 = matrix[12];\n  const src4 = matrix[1];\n  const src5 = matrix[5];\n  const src6 = matrix[9];\n  const src7 = matrix[13];\n  const src8 = matrix[2];\n  const src9 = matrix[6];\n  const src10 = matrix[10];\n  const src11 = matrix[14];\n  const src12 = matrix[3];\n  const src13 = matrix[7];\n  const src14 = matrix[11];\n  const src15 = matrix[15];\n\n  // calculate pairs for first 8 elements (cofactors)\n  let tmp0 = src10 * src15;\n  let tmp1 = src11 * src14;\n  let tmp2 = src9 * src15;\n  let tmp3 = src11 * src13;\n  let tmp4 = src9 * src14;\n  let tmp5 = src10 * src13;\n  let tmp6 = src8 * src15;\n  let tmp7 = src11 * src12;\n  let tmp8 = src8 * src14;\n  let tmp9 = src10 * src12;\n  let tmp10 = src8 * src13;\n  let tmp11 = src9 * src12;\n\n  // calculate first 8 elements (cofactors)\n  const dst0 =\n    tmp0 * src5 +\n    tmp3 * src6 +\n    tmp4 * src7 -\n    (tmp1 * src5 + tmp2 * src6 + tmp5 * src7);\n  const dst1 =\n    tmp1 * src4 +\n    tmp6 * src6 +\n    tmp9 * src7 -\n    (tmp0 * src4 + tmp7 * src6 + tmp8 * src7);\n  const dst2 =\n    tmp2 * src4 +\n    tmp7 * src5 +\n    tmp10 * src7 -\n    (tmp3 * src4 + tmp6 * src5 + tmp11 * src7);\n  const dst3 =\n    tmp5 * src4 +\n    tmp8 * src5 +\n    tmp11 * src6 -\n    (tmp4 * src4 + tmp9 * src5 + tmp10 * src6);\n  const dst4 =\n    tmp1 * src1 +\n    tmp2 * src2 +\n    tmp5 * src3 -\n    (tmp0 * src1 + tmp3 * src2 + tmp4 * src3);\n  const dst5 =\n    tmp0 * src0 +\n    tmp7 * src2 +\n    tmp8 * src3 -\n    (tmp1 * src0 + tmp6 * src2 + tmp9 * src3);\n  const dst6 =\n    tmp3 * src0 +\n    tmp6 * src1 +\n    tmp11 * src3 -\n    (tmp2 * src0 + tmp7 * src1 + tmp10 * src3);\n  const dst7 =\n    tmp4 * src0 +\n    tmp9 * src1 +\n    tmp10 * src2 -\n    (tmp5 * src0 + tmp8 * src1 + tmp11 * src2);\n\n  // calculate pairs for second 8 elements (cofactors)\n  tmp0 = src2 * src7;\n  tmp1 = src3 * src6;\n  tmp2 = src1 * src7;\n  tmp3 = src3 * src5;\n  tmp4 = src1 * src6;\n  tmp5 = src2 * src5;\n  tmp6 = src0 * src7;\n  tmp7 = src3 * src4;\n  tmp8 = src0 * src6;\n  tmp9 = src2 * src4;\n  tmp10 = src0 * src5;\n  tmp11 = src1 * src4;\n\n  // calculate second 8 elements (cofactors)\n  const dst8 =\n    tmp0 * src13 +\n    tmp3 * src14 +\n    tmp4 * src15 -\n    (tmp1 * src13 + tmp2 * src14 + tmp5 * src15);\n  const dst9 =\n    tmp1 * src12 +\n    tmp6 * src14 +\n    tmp9 * src15 -\n    (tmp0 * src12 + tmp7 * src14 + tmp8 * src15);\n  const dst10 =\n    tmp2 * src12 +\n    tmp7 * src13 +\n    tmp10 * src15 -\n    (tmp3 * src12 + tmp6 * src13 + tmp11 * src15);\n  const dst11 =\n    tmp5 * src12 +\n    tmp8 * src13 +\n    tmp11 * src14 -\n    (tmp4 * src12 + tmp9 * src13 + tmp10 * src14);\n  const dst12 =\n    tmp2 * src10 +\n    tmp5 * src11 +\n    tmp1 * src9 -\n    (tmp4 * src11 + tmp0 * src9 + tmp3 * src10);\n  const dst13 =\n    tmp8 * src11 +\n    tmp0 * src8 +\n    tmp7 * src10 -\n    (tmp6 * src10 + tmp9 * src11 + tmp1 * src8);\n  const dst14 =\n    tmp6 * src9 +\n    tmp11 * src11 +\n    tmp3 * src8 -\n    (tmp10 * src11 + tmp2 * src8 + tmp7 * src9);\n  const dst15 =\n    tmp10 * src10 +\n    tmp4 * src8 +\n    tmp9 * src9 -\n    (tmp8 * src9 + tmp11 * src10 + tmp5 * src8);\n\n  // calculate determinant\n  let det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;\n\n  if (Math.abs(det) < CesiumMath.EPSILON21) {\n    // Special case for a zero scale matrix that can occur, for example,\n    // when a model's node has a [0, 0, 0] scale.\n    if (\n      Matrix3.equalsEpsilon(\n        Matrix4.getMatrix3(matrix, scratchInverseRotation),\n        scratchMatrix3Zero,\n        CesiumMath.EPSILON7,\n      ) &&\n      Cartesian4.equals(\n        Matrix4.getRow(matrix, 3, scratchBottomRow),\n        scratchExpectedBottomRow,\n      )\n    ) {\n      result[0] = 0.0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = 0.0;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = 0.0;\n      result[9] = 0.0;\n      result[10] = 0.0;\n      result[11] = 0.0;\n      result[12] = -matrix[12];\n      result[13] = -matrix[13];\n      result[14] = -matrix[14];\n      result[15] = 1.0;\n      return result;\n    }\n\n    throw new RuntimeError(\n      \"matrix is not invertible because its determinate is zero.\",\n    );\n  }\n\n  // calculate matrix inverse\n  det = 1.0 / det;\n\n  result[0] = dst0 * det;\n  result[1] = dst1 * det;\n  result[2] = dst2 * det;\n  result[3] = dst3 * det;\n  result[4] = dst4 * det;\n  result[5] = dst5 * det;\n  result[6] = dst6 * det;\n  result[7] = dst7 * det;\n  result[8] = dst8 * det;\n  result[9] = dst9 * det;\n  result[10] = dst10 * det;\n  result[11] = dst11 * det;\n  result[12] = dst12 * det;\n  result[13] = dst13 * det;\n  result[14] = dst14 * det;\n  result[15] = dst15 * det;\n  return result;\n};\n\n/**\n * Computes the inverse of the provided matrix assuming it is a proper rigid matrix,\n * where the upper left 3x3 elements are a rotation matrix,\n * and the upper three elements in the fourth column are the translation.\n * The bottom row is assumed to be [0, 0, 0, 1].\n * The matrix is not verified to be in the proper form.\n * This method is faster than computing the inverse for a general 4x4\n * matrix using {@link Matrix4.inverse}.\n *\n * @param {Matrix4} matrix The matrix to invert.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.inverseTransformation = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  //This function is an optimized version of the below 4 lines.\n  //const rT = Matrix3.transpose(Matrix4.getMatrix3(matrix));\n  //const rTN = Matrix3.negate(rT);\n  //const rTT = Matrix3.multiplyByVector(rTN, Matrix4.getTranslation(matrix));\n  //return Matrix4.fromRotationTranslation(rT, rTT, result);\n\n  const matrix0 = matrix[0];\n  const matrix1 = matrix[1];\n  const matrix2 = matrix[2];\n  const matrix4 = matrix[4];\n  const matrix5 = matrix[5];\n  const matrix6 = matrix[6];\n  const matrix8 = matrix[8];\n  const matrix9 = matrix[9];\n  const matrix10 = matrix[10];\n\n  const vX = matrix[12];\n  const vY = matrix[13];\n  const vZ = matrix[14];\n\n  const x = -matrix0 * vX - matrix1 * vY - matrix2 * vZ;\n  const y = -matrix4 * vX - matrix5 * vY - matrix6 * vZ;\n  const z = -matrix8 * vX - matrix9 * vY - matrix10 * vZ;\n\n  result[0] = matrix0;\n  result[1] = matrix4;\n  result[2] = matrix8;\n  result[3] = 0.0;\n  result[4] = matrix1;\n  result[5] = matrix5;\n  result[6] = matrix9;\n  result[7] = 0.0;\n  result[8] = matrix2;\n  result[9] = matrix6;\n  result[10] = matrix10;\n  result[11] = 0.0;\n  result[12] = x;\n  result[13] = y;\n  result[14] = z;\n  result[15] = 1.0;\n  return result;\n};\n\nconst scratchTransposeMatrix = new Matrix4();\n\n/**\n * Computes the inverse transpose of a matrix.\n *\n * @param {Matrix4} matrix The matrix to transpose and invert.\n * @param {Matrix4} result The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter.\n */\nMatrix4.inverseTranspose = function (matrix, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"matrix\", matrix);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  return Matrix4.inverse(\n    Matrix4.transpose(matrix, scratchTransposeMatrix),\n    result,\n  );\n};\n\n/**\n * An immutable Matrix4 instance initialized to the identity matrix.\n *\n * @type {Matrix4}\n * @constant\n */\nMatrix4.IDENTITY = Object.freeze(\n  new Matrix4(\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n  ),\n);\n\n/**\n * An immutable Matrix4 instance initialized to the zero matrix.\n *\n * @type {Matrix4}\n * @constant\n */\nMatrix4.ZERO = Object.freeze(\n  new Matrix4(\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n  ),\n);\n\n/**\n * The index into Matrix4 for column 0, row 0.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN0ROW0 = 0;\n\n/**\n * The index into Matrix4 for column 0, row 1.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN0ROW1 = 1;\n\n/**\n * The index into Matrix4 for column 0, row 2.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN0ROW2 = 2;\n\n/**\n * The index into Matrix4 for column 0, row 3.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN0ROW3 = 3;\n\n/**\n * The index into Matrix4 for column 1, row 0.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN1ROW0 = 4;\n\n/**\n * The index into Matrix4 for column 1, row 1.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN1ROW1 = 5;\n\n/**\n * The index into Matrix4 for column 1, row 2.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN1ROW2 = 6;\n\n/**\n * The index into Matrix4 for column 1, row 3.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN1ROW3 = 7;\n\n/**\n * The index into Matrix4 for column 2, row 0.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN2ROW0 = 8;\n\n/**\n * The index into Matrix4 for column 2, row 1.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN2ROW1 = 9;\n\n/**\n * The index into Matrix4 for column 2, row 2.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN2ROW2 = 10;\n\n/**\n * The index into Matrix4 for column 2, row 3.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN2ROW3 = 11;\n\n/**\n * The index into Matrix4 for column 3, row 0.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN3ROW0 = 12;\n\n/**\n * The index into Matrix4 for column 3, row 1.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN3ROW1 = 13;\n\n/**\n * The index into Matrix4 for column 3, row 2.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN3ROW2 = 14;\n\n/**\n * The index into Matrix4 for column 3, row 3.\n *\n * @type {number}\n * @constant\n */\nMatrix4.COLUMN3ROW3 = 15;\n\nObject.defineProperties(Matrix4.prototype, {\n  /**\n   * Gets the number of items in the collection.\n   * @memberof Matrix4.prototype\n   *\n   * @type {number}\n   */\n  length: {\n    get: function () {\n      return Matrix4.packedLength;\n    },\n  },\n});\n\n/**\n * Duplicates the provided Matrix4 instance.\n *\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\n */\nMatrix4.prototype.clone = function (result) {\n  return Matrix4.clone(this, result);\n};\n\n/**\n * Compares this matrix to the provided matrix componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Matrix4} [right] The right hand side matrix.\n * @returns {boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nMatrix4.prototype.equals = function (right) {\n  return Matrix4.equals(this, right);\n};\n\n/**\n * @private\n */\nMatrix4.equalsArray = function (matrix, array, offset) {\n  return (\n    matrix[0] === array[offset] &&\n    matrix[1] === array[offset + 1] &&\n    matrix[2] === array[offset + 2] &&\n    matrix[3] === array[offset + 3] &&\n    matrix[4] === array[offset + 4] &&\n    matrix[5] === array[offset + 5] &&\n    matrix[6] === array[offset + 6] &&\n    matrix[7] === array[offset + 7] &&\n    matrix[8] === array[offset + 8] &&\n    matrix[9] === array[offset + 9] &&\n    matrix[10] === array[offset + 10] &&\n    matrix[11] === array[offset + 11] &&\n    matrix[12] === array[offset + 12] &&\n    matrix[13] === array[offset + 13] &&\n    matrix[14] === array[offset + 14] &&\n    matrix[15] === array[offset + 15]\n  );\n};\n\n/**\n * Compares this matrix to the provided matrix componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Matrix4} [right] The right hand side matrix.\n * @param {number} [epsilon=0] The epsilon to use for equality testing.\n * @returns {boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nMatrix4.prototype.equalsEpsilon = function (right, epsilon) {\n  return Matrix4.equalsEpsilon(this, right, epsilon);\n};\n\n/**\n * Computes a string representing this Matrix with each row being\n * on a separate line and in the format '(column0, column1, column2, column3)'.\n *\n * @returns {string} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2, column3)'.\n */\nMatrix4.prototype.toString = function () {\n  return (\n    `(${this[0]}, ${this[4]}, ${this[8]}, ${this[12]})\\n` +\n    `(${this[1]}, ${this[5]}, ${this[9]}, ${this[13]})\\n` +\n    `(${this[2]}, ${this[6]}, ${this[10]}, ${this[14]})\\n` +\n    `(${this[3]}, ${this[7]}, ${this[11]}, ${this[15]})`\n  );\n};\nexport default Matrix4;\n"],"mappings":"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,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GACF,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAA,OAAO,CAAC2S,WAAW,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA3S,OAAO,CAAC4S,WAAW,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA5S,OAAO,CAAC6S,WAAW,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA7S,OAAO,CAAC8S,WAAW,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA9S,OAAO,CAAC+S,WAAW,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA/S,OAAO,CAACgT,WAAW,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACAhT,OAAO,CAACiT,WAAW,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACAjT,OAAO,CAACkT,WAAW,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACAlT,OAAO,CAACmT,WAAW,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACAnT,OAAO,CAACoT,WAAW,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACApT,OAAO,CAACqT,WAAW,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA;AACA;AACArT,OAAO,CAACsT,WAAW,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA;AACA;AACAtT,OAAO,CAACuT,WAAW,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA;AACA;AACAvT,OAAO,CAACwT,WAAW,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA;AACA;AACAxT,OAAO,CAACyT,WAAW,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA;AACA;AACAzT,OAAO,CAAC0T,WAAW,GAAG,EAAE;AAExBjB,MAAM,CAACkB,gBAAgB,CAAC3T,OAAO,CAAC4T,SAAS,EAAE;EACzC;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}