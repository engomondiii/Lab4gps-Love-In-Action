{"ast":null,"code":"import Cartographic from \"../Core/Cartographic.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Cesium3DTileFeature from \"./Cesium3DTileFeature.js\";\nimport createBillboardPointCallback from \"./createBillboardPointCallback.js\";\n\n/**\n * A point feature of a {@link Cesium3DTileset}.\n * <p>\n * Provides access to a feature's properties stored in the tile's batch table, as well\n * as the ability to show/hide a feature and change its point properties\n * </p>\n * <p>\n * Modifications to a <code>Cesium3DTilePointFeature</code> object have the lifetime of the tile's\n * content.  If the tile's content is unloaded, e.g., due to it going out of view and needing\n * to free space in the cache for visible tiles, listen to the {@link Cesium3DTileset#tileUnload} event to save any\n * modifications. Also listen to the {@link Cesium3DTileset#tileVisible} event to reapply any modifications.\n * </p>\n * <p>\n * Do not construct this directly.  Access it through {@link Cesium3DTileContent#getFeature}\n * or picking using {@link Scene#pick} and {@link Scene#pickPosition}.\n * </p>\n *\n * @alias Cesium3DTilePointFeature\n * @constructor\n *\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @example\n * // On mouse over, display all the properties for a feature in the console log.\n * handler.setInputAction(function(movement) {\n *     const feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTilePointFeature) {\n *         const propertyIds = feature.getPropertyIds();\n *         const length = propertyIds.length;\n *         for (let i = 0; i < length; ++i) {\n *             const propertyId = propertyIds[i];\n *             console.log(`{propertyId}: ${feature.getProperty(propertyId)}`);\n *         }\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nfunction Cesium3DTilePointFeature(content, batchId, billboard, label, polyline) {\n  this._content = content;\n  this._billboard = billboard;\n  this._label = label;\n  this._polyline = polyline;\n  this._batchId = batchId;\n  this._billboardImage = undefined;\n  this._billboardColor = undefined;\n  this._billboardOutlineColor = undefined;\n  this._billboardOutlineWidth = undefined;\n  this._billboardSize = undefined;\n  this._pointSize = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._heightOffset = undefined;\n  this._pickIds = new Array(3);\n  setBillboardImage(this);\n}\nconst scratchCartographic = new Cartographic();\nObject.defineProperties(Cesium3DTilePointFeature.prototype, {\n  /**\n   * Gets or sets if the feature will be shown. This is set for all features\n   * when a style's show is evaluated.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._label.show;\n    },\n    set: function (value) {\n      this._label.show = value;\n      this._billboard.show = value;\n      this._polyline.show = value;\n    }\n  },\n  /**\n   * Gets or sets the color of the point of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      this._color = Color.clone(value, this._color);\n      setBillboardImage(this);\n    }\n  },\n  /**\n   * Gets or sets the point size of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {number}\n   */\n  pointSize: {\n    get: function () {\n      return this._pointSize;\n    },\n    set: function (value) {\n      this._pointSize = value;\n      setBillboardImage(this);\n    }\n  },\n  /**\n   * Gets or sets the point outline color of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  pointOutlineColor: {\n    get: function () {\n      return this._pointOutlineColor;\n    },\n    set: function (value) {\n      this._pointOutlineColor = Color.clone(value, this._pointOutlineColor);\n      setBillboardImage(this);\n    }\n  },\n  /**\n   * Gets or sets the point outline width in pixels of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {number}\n   */\n  pointOutlineWidth: {\n    get: function () {\n      return this._pointOutlineWidth;\n    },\n    set: function (value) {\n      this._pointOutlineWidth = value;\n      setBillboardImage(this);\n    }\n  },\n  /**\n   * Gets or sets the label color of this feature.\n   * <p>\n   * The color will be applied to the label if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  labelColor: {\n    get: function () {\n      return this._label.fillColor;\n    },\n    set: function (value) {\n      this._label.fillColor = value;\n      this._polyline.show = this._label.show && value.alpha > 0.0;\n    }\n  },\n  /**\n   * Gets or sets the label outline color of this feature.\n   * <p>\n   * The outline color will be applied to the label if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  labelOutlineColor: {\n    get: function () {\n      return this._label.outlineColor;\n    },\n    set: function (value) {\n      this._label.outlineColor = value;\n    }\n  },\n  /**\n   * Gets or sets the outline width in pixels of this feature.\n   * <p>\n   * The outline width will be applied to the point if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {number}\n   */\n  labelOutlineWidth: {\n    get: function () {\n      return this._label.outlineWidth;\n    },\n    set: function (value) {\n      this._label.outlineWidth = value;\n    }\n  },\n  /**\n   * Gets or sets the font of this feature.\n   * <p>\n   * Only applied when the <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {string}\n   */\n  font: {\n    get: function () {\n      return this._label.font;\n    },\n    set: function (value) {\n      this._label.font = value;\n    }\n  },\n  /**\n   * Gets or sets the fill and outline style of this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {LabelStyle}\n   */\n  labelStyle: {\n    get: function () {\n      return this._label.style;\n    },\n    set: function (value) {\n      this._label.style = value;\n    }\n  },\n  /**\n   * Gets or sets the text for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {string}\n   */\n  labelText: {\n    get: function () {\n      return this._label.text;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        value = \"\";\n      }\n      this._label.text = value;\n    }\n  },\n  /**\n   * Gets or sets the background color of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  backgroundColor: {\n    get: function () {\n      return this._label.backgroundColor;\n    },\n    set: function (value) {\n      this._label.backgroundColor = value;\n    }\n  },\n  /**\n   * Gets or sets the background padding of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cartesian2}\n   */\n  backgroundPadding: {\n    get: function () {\n      return this._label.backgroundPadding;\n    },\n    set: function (value) {\n      this._label.backgroundPadding = value;\n    }\n  },\n  /**\n   * Gets or sets whether to display the background of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {boolean}\n   */\n  backgroundEnabled: {\n    get: function () {\n      return this._label.showBackground;\n    },\n    set: function (value) {\n      this._label.showBackground = value;\n    }\n  },\n  /**\n   * Gets or sets the near and far scaling properties for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {NearFarScalar}\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._label.scaleByDistance;\n    },\n    set: function (value) {\n      this._label.scaleByDistance = value;\n      this._billboard.scaleByDistance = value;\n    }\n  },\n  /**\n   * Gets or sets the near and far translucency properties for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {NearFarScalar}\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._label.translucencyByDistance;\n    },\n    set: function (value) {\n      this._label.translucencyByDistance = value;\n      this._billboard.translucencyByDistance = value;\n    }\n  },\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this feature will be displayed.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {DistanceDisplayCondition}\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._label.distanceDisplayCondition;\n    },\n    set: function (value) {\n      this._label.distanceDisplayCondition = value;\n      this._polyline.distanceDisplayCondition = value;\n      this._billboard.distanceDisplayCondition = value;\n    }\n  },\n  /**\n   * Gets or sets the height offset in meters of this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {number}\n   */\n  heightOffset: {\n    get: function () {\n      return this._heightOffset;\n    },\n    set: function (value) {\n      const offset = defaultValue(this._heightOffset, 0.0);\n      const ellipsoid = this._content.tileset.ellipsoid;\n      const cart = ellipsoid.cartesianToCartographic(this._billboard.position, scratchCartographic);\n      cart.height = cart.height - offset + value;\n      const newPosition = ellipsoid.cartographicToCartesian(cart);\n      this._billboard.position = newPosition;\n      this._label.position = this._billboard.position;\n      this._polyline.positions = [this._polyline.positions[0], newPosition];\n      this._heightOffset = value;\n    }\n  },\n  /**\n   * Gets or sets whether the anchor line is displayed.\n   * <p>\n   * Only applied when <code>heightOffset</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {boolean}\n   */\n  anchorLineEnabled: {\n    get: function () {\n      return this._polyline.show;\n    },\n    set: function (value) {\n      this._polyline.show = value;\n    }\n  },\n  /**\n   * Gets or sets the color for the anchor line.\n   * <p>\n   * Only applied when <code>heightOffset</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  anchorLineColor: {\n    get: function () {\n      return this._polyline.material.uniforms.color;\n    },\n    set: function (value) {\n      this._polyline.material.uniforms.color = Color.clone(value, this._polyline.material.uniforms.color);\n    }\n  },\n  /**\n   * Gets or sets the image of this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {string}\n   */\n  image: {\n    get: function () {\n      return this._billboardImage;\n    },\n    set: function (value) {\n      const imageChanged = this._billboardImage !== value;\n      this._billboardImage = value;\n      if (imageChanged) {\n        setBillboardImage(this);\n      }\n    }\n  },\n  /**\n   * Gets or sets the distance where depth testing will be disabled.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {number}\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._label.disableDepthTestDistance;\n    },\n    set: function (value) {\n      this._label.disableDepthTestDistance = value;\n      this._billboard.disableDepthTestDistance = value;\n    }\n  },\n  /**\n   * Gets or sets the horizontal origin of this point, which determines if the point is\n   * to the left, center, or right of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {HorizontalOrigin}\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._billboard.horizontalOrigin;\n    },\n    set: function (value) {\n      this._billboard.horizontalOrigin = value;\n    }\n  },\n  /**\n   * Gets or sets the vertical origin of this point, which determines if the point is\n   * to the bottom, center, or top of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {VerticalOrigin}\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._billboard.verticalOrigin;\n    },\n    set: function (value) {\n      this._billboard.verticalOrigin = value;\n    }\n  },\n  /**\n   * Gets or sets the horizontal origin of this point's text, which determines if the point's text is\n   * to the left, center, or right of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {HorizontalOrigin}\n   */\n  labelHorizontalOrigin: {\n    get: function () {\n      return this._label.horizontalOrigin;\n    },\n    set: function (value) {\n      this._label.horizontalOrigin = value;\n    }\n  },\n  /**\n   * Get or sets the vertical origin of this point's text, which determines if the point's text is\n   * to the bottom, center, top, or baseline of it's anchor point.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {VerticalOrigin}\n   */\n  labelVerticalOrigin: {\n    get: function () {\n      return this._label.verticalOrigin;\n    },\n    set: function (value) {\n      this._label.verticalOrigin = value;\n    }\n  },\n  /**\n   * Gets the content of the tile containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileContent}\n   *\n   * @readonly\n   * @private\n   */\n  content: {\n    get: function () {\n      return this._content;\n    }\n  },\n  /**\n   * Gets the tileset containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  tileset: {\n    get: function () {\n      return this._content.tileset;\n    }\n  },\n  /**\n   * All objects returned by {@link Scene#pick} have a <code>primitive</code> property. This returns\n   * the tileset containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  primitive: {\n    get: function () {\n      return this._content.tileset;\n    }\n  },\n  /**\n   * @private\n   */\n  pickIds: {\n    get: function () {\n      const ids = this._pickIds;\n      ids[0] = this._billboard.pickId;\n      ids[1] = this._label.pickId;\n      ids[2] = this._polyline.pickId;\n      return ids;\n    }\n  }\n});\nCesium3DTilePointFeature.defaultColor = Color.WHITE;\nCesium3DTilePointFeature.defaultPointOutlineColor = Color.BLACK;\nCesium3DTilePointFeature.defaultPointOutlineWidth = 0.0;\nCesium3DTilePointFeature.defaultPointSize = 8.0;\nfunction setBillboardImage(feature) {\n  const b = feature._billboard;\n  if (defined(feature._billboardImage) && feature._billboardImage !== b.image) {\n    b.image = feature._billboardImage;\n    return;\n  }\n  if (defined(feature._billboardImage)) {\n    return;\n  }\n  const newColor = defaultValue(feature._color, Cesium3DTilePointFeature.defaultColor);\n  const newOutlineColor = defaultValue(feature._pointOutlineColor, Cesium3DTilePointFeature.defaultPointOutlineColor);\n  const newOutlineWidth = defaultValue(feature._pointOutlineWidth, Cesium3DTilePointFeature.defaultPointOutlineWidth);\n  const newPointSize = defaultValue(feature._pointSize, Cesium3DTilePointFeature.defaultPointSize);\n  const currentColor = feature._billboardColor;\n  const currentOutlineColor = feature._billboardOutlineColor;\n  const currentOutlineWidth = feature._billboardOutlineWidth;\n  const currentPointSize = feature._billboardSize;\n  if (Color.equals(newColor, currentColor) && Color.equals(newOutlineColor, currentOutlineColor) && newOutlineWidth === currentOutlineWidth && newPointSize === currentPointSize) {\n    return;\n  }\n  feature._billboardColor = Color.clone(newColor, feature._billboardColor);\n  feature._billboardOutlineColor = Color.clone(newOutlineColor, feature._billboardOutlineColor);\n  feature._billboardOutlineWidth = newOutlineWidth;\n  feature._billboardSize = newPointSize;\n  const centerAlpha = newColor.alpha;\n  const cssColor = newColor.toCssColorString();\n  const cssOutlineColor = newOutlineColor.toCssColorString();\n  const textureId = JSON.stringify([cssColor, newPointSize, cssOutlineColor, newOutlineWidth]);\n  b.setImage(textureId, createBillboardPointCallback(centerAlpha, cssColor, cssOutlineColor, newOutlineWidth, newPointSize));\n}\n\n/**\n * Returns whether the feature contains this property. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string} name The case-sensitive name of the property.\n * @returns {boolean} Whether the feature contains this property.\n */\nCesium3DTilePointFeature.prototype.hasProperty = function (name) {\n  return this._content.batchTable.hasProperty(this._batchId, name);\n};\n\n/**\n * Returns an array of property IDs for the feature. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The IDs of the feature's properties.\n */\nCesium3DTilePointFeature.prototype.getPropertyIds = function (results) {\n  return this._content.batchTable.getPropertyIds(this._batchId, results);\n};\n\n/**\n * Returns a copy of the value of the feature's property with the given name. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n *\n * @example\n * // Display all the properties for a feature in the console log.\n * const propertyIds = feature.getPropertyIds();\n * const length = propertyIds.length;\n * for (let i = 0; i < length; ++i) {\n *     const propertyId = propertyIds[i];\n *     console.log(`{propertyId} : ${feature.getProperty(propertyId)}`);\n * }\n */\nCesium3DTilePointFeature.prototype.getProperty = function (name) {\n  return this._content.batchTable.getProperty(this._batchId, name);\n};\n\n/**\n * Returns a copy of the value of the feature's property with the given name.\n * If the feature is contained within a tileset that has metadata (3D Tiles 1.1)\n * or uses the <code>3DTILES_metadata</code> extension, tileset, group and tile metadata is\n * inherited.\n * <p>\n * To resolve name conflicts, this method resolves names from most specific to\n * least specific by metadata granularity in the order: feature, tile, group,\n * tileset. Within each granularity, semantics are resolved first, then other\n * properties.\n * </p>\n * @param {string} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nCesium3DTilePointFeature.prototype.getPropertyInherited = function (name) {\n  return Cesium3DTileFeature.getPropertyInherited(this._content, this._batchId, name);\n};\n\n/**\n * Sets the value of the feature's property with the given name.\n * <p>\n * If a property with the given name doesn't exist, it is created.\n * </p>\n *\n * @param {string} name The case-sensitive name of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} Inherited batch table hierarchy property is read only.\n *\n * @example\n * const height = feature.getProperty('Height'); // e.g., the height of a building\n *\n * @example\n * const name = 'clicked';\n * if (feature.getProperty(name)) {\n *     console.log('already clicked');\n * } else {\n *     feature.setProperty(name, true);\n *     console.log('first click');\n * }\n */\nCesium3DTilePointFeature.prototype.setProperty = function (name, value) {\n  this._content.batchTable.setProperty(this._batchId, name, value);\n\n  // PERFORMANCE_IDEA: Probably overkill, but maybe only mark the tile dirty if the\n  // property is in one of the style's expressions or - if it can be done quickly -\n  // if the new property value changed the result of an expression.\n  this._content.featurePropertiesDirty = true;\n};\n\n/**\n * Returns whether the feature's class name equals <code>className</code>. Unlike {@link Cesium3DTilePointFeature#isClass}\n * this function only checks the feature's exact class and not inherited classes.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {string} className The name to check against.\n * @returns {boolean} Whether the feature's class name equals <code>className</code>\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.isExactClass = function (className) {\n  return this._content.batchTable.isExactClass(this._batchId, className);\n};\n\n/**\n * Returns whether the feature's class or any inherited classes are named <code>className</code>.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {string} className The name to check against.\n * @returns {boolean} Whether the feature's class or inherited classes are named <code>className</code>\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.isClass = function (className) {\n  return this._content.batchTable.isClass(this._batchId, className);\n};\n\n/**\n * Returns the feature's class name.\n * <p>\n * This function returns <code>undefined</code> if no batch table hierarchy is present.\n * </p>\n *\n * @returns {string} The feature's class name.\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.getExactClassName = function () {\n  return this._content.batchTable.getExactClassName(this._batchId);\n};\nexport default Cesium3DTilePointFeature;","map":{"version":3,"names":["Cartographic","Color","defaultValue","defined","Cesium3DTileFeature","createBillboardPointCallback","Cesium3DTilePointFeature","content","batchId","billboard","label","polyline","_content","_billboard","_label","_polyline","_batchId","_billboardImage","undefined","_billboardColor","_billboardOutlineColor","_billboardOutlineWidth","_billboardSize","_pointSize","_color","_pointOutlineColor","_pointOutlineWidth","_heightOffset","_pickIds","Array","setBillboardImage","scratchCartographic","Object","defineProperties","prototype","show","get","set","value","color","clone","pointSize","pointOutlineColor","pointOutlineWidth","labelColor","fillColor","alpha","labelOutlineColor","outlineColor","labelOutlineWidth","outlineWidth","font","labelStyle","style","labelText","text","backgroundColor","backgroundPadding","backgroundEnabled","showBackground","scaleByDistance","translucencyByDistance","distanceDisplayCondition","heightOffset","offset","ellipsoid","tileset","cart","cartesianToCartographic","position","height","newPosition","cartographicToCartesian","positions","anchorLineEnabled","anchorLineColor","material","uniforms","image","imageChanged","disableDepthTestDistance","horizontalOrigin","verticalOrigin","labelHorizontalOrigin","labelVerticalOrigin","primitive","pickIds","ids","pickId","defaultColor","WHITE","defaultPointOutlineColor","BLACK","defaultPointOutlineWidth","defaultPointSize","feature","b","newColor","newOutlineColor","newOutlineWidth","newPointSize","currentColor","currentOutlineColor","currentOutlineWidth","currentPointSize","equals","centerAlpha","cssColor","toCssColorString","cssOutlineColor","textureId","JSON","stringify","setImage","hasProperty","name","batchTable","getPropertyIds","results","getProperty","getPropertyInherited","setProperty","featurePropertiesDirty","isExactClass","className","isClass","getExactClassName"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Cesium3DTilePointFeature.js"],"sourcesContent":["import Cartographic from \"../Core/Cartographic.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Cesium3DTileFeature from \"./Cesium3DTileFeature.js\";\nimport createBillboardPointCallback from \"./createBillboardPointCallback.js\";\n\n/**\n * A point feature of a {@link Cesium3DTileset}.\n * <p>\n * Provides access to a feature's properties stored in the tile's batch table, as well\n * as the ability to show/hide a feature and change its point properties\n * </p>\n * <p>\n * Modifications to a <code>Cesium3DTilePointFeature</code> object have the lifetime of the tile's\n * content.  If the tile's content is unloaded, e.g., due to it going out of view and needing\n * to free space in the cache for visible tiles, listen to the {@link Cesium3DTileset#tileUnload} event to save any\n * modifications. Also listen to the {@link Cesium3DTileset#tileVisible} event to reapply any modifications.\n * </p>\n * <p>\n * Do not construct this directly.  Access it through {@link Cesium3DTileContent#getFeature}\n * or picking using {@link Scene#pick} and {@link Scene#pickPosition}.\n * </p>\n *\n * @alias Cesium3DTilePointFeature\n * @constructor\n *\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @example\n * // On mouse over, display all the properties for a feature in the console log.\n * handler.setInputAction(function(movement) {\n *     const feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTilePointFeature) {\n *         const propertyIds = feature.getPropertyIds();\n *         const length = propertyIds.length;\n *         for (let i = 0; i < length; ++i) {\n *             const propertyId = propertyIds[i];\n *             console.log(`{propertyId}: ${feature.getProperty(propertyId)}`);\n *         }\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nfunction Cesium3DTilePointFeature(\n  content,\n  batchId,\n  billboard,\n  label,\n  polyline,\n) {\n  this._content = content;\n  this._billboard = billboard;\n  this._label = label;\n  this._polyline = polyline;\n\n  this._batchId = batchId;\n  this._billboardImage = undefined;\n  this._billboardColor = undefined;\n  this._billboardOutlineColor = undefined;\n  this._billboardOutlineWidth = undefined;\n  this._billboardSize = undefined;\n  this._pointSize = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._heightOffset = undefined;\n\n  this._pickIds = new Array(3);\n\n  setBillboardImage(this);\n}\n\nconst scratchCartographic = new Cartographic();\n\nObject.defineProperties(Cesium3DTilePointFeature.prototype, {\n  /**\n   * Gets or sets if the feature will be shown. This is set for all features\n   * when a style's show is evaluated.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._label.show;\n    },\n    set: function (value) {\n      this._label.show = value;\n      this._billboard.show = value;\n      this._polyline.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the color of the point of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      this._color = Color.clone(value, this._color);\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the point size of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {number}\n   */\n  pointSize: {\n    get: function () {\n      return this._pointSize;\n    },\n    set: function (value) {\n      this._pointSize = value;\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the point outline color of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  pointOutlineColor: {\n    get: function () {\n      return this._pointOutlineColor;\n    },\n    set: function (value) {\n      this._pointOutlineColor = Color.clone(value, this._pointOutlineColor);\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the point outline width in pixels of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {number}\n   */\n  pointOutlineWidth: {\n    get: function () {\n      return this._pointOutlineWidth;\n    },\n    set: function (value) {\n      this._pointOutlineWidth = value;\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the label color of this feature.\n   * <p>\n   * The color will be applied to the label if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  labelColor: {\n    get: function () {\n      return this._label.fillColor;\n    },\n    set: function (value) {\n      this._label.fillColor = value;\n      this._polyline.show = this._label.show && value.alpha > 0.0;\n    },\n  },\n\n  /**\n   * Gets or sets the label outline color of this feature.\n   * <p>\n   * The outline color will be applied to the label if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  labelOutlineColor: {\n    get: function () {\n      return this._label.outlineColor;\n    },\n    set: function (value) {\n      this._label.outlineColor = value;\n    },\n  },\n\n  /**\n   * Gets or sets the outline width in pixels of this feature.\n   * <p>\n   * The outline width will be applied to the point if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {number}\n   */\n  labelOutlineWidth: {\n    get: function () {\n      return this._label.outlineWidth;\n    },\n    set: function (value) {\n      this._label.outlineWidth = value;\n    },\n  },\n\n  /**\n   * Gets or sets the font of this feature.\n   * <p>\n   * Only applied when the <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {string}\n   */\n  font: {\n    get: function () {\n      return this._label.font;\n    },\n    set: function (value) {\n      this._label.font = value;\n    },\n  },\n\n  /**\n   * Gets or sets the fill and outline style of this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {LabelStyle}\n   */\n  labelStyle: {\n    get: function () {\n      return this._label.style;\n    },\n    set: function (value) {\n      this._label.style = value;\n    },\n  },\n\n  /**\n   * Gets or sets the text for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {string}\n   */\n  labelText: {\n    get: function () {\n      return this._label.text;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        value = \"\";\n      }\n      this._label.text = value;\n    },\n  },\n\n  /**\n   * Gets or sets the background color of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  backgroundColor: {\n    get: function () {\n      return this._label.backgroundColor;\n    },\n    set: function (value) {\n      this._label.backgroundColor = value;\n    },\n  },\n\n  /**\n   * Gets or sets the background padding of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cartesian2}\n   */\n  backgroundPadding: {\n    get: function () {\n      return this._label.backgroundPadding;\n    },\n    set: function (value) {\n      this._label.backgroundPadding = value;\n    },\n  },\n\n  /**\n   * Gets or sets whether to display the background of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {boolean}\n   */\n  backgroundEnabled: {\n    get: function () {\n      return this._label.showBackground;\n    },\n    set: function (value) {\n      this._label.showBackground = value;\n    },\n  },\n\n  /**\n   * Gets or sets the near and far scaling properties for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {NearFarScalar}\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._label.scaleByDistance;\n    },\n    set: function (value) {\n      this._label.scaleByDistance = value;\n      this._billboard.scaleByDistance = value;\n    },\n  },\n\n  /**\n   * Gets or sets the near and far translucency properties for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {NearFarScalar}\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._label.translucencyByDistance;\n    },\n    set: function (value) {\n      this._label.translucencyByDistance = value;\n      this._billboard.translucencyByDistance = value;\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this feature will be displayed.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {DistanceDisplayCondition}\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._label.distanceDisplayCondition;\n    },\n    set: function (value) {\n      this._label.distanceDisplayCondition = value;\n      this._polyline.distanceDisplayCondition = value;\n      this._billboard.distanceDisplayCondition = value;\n    },\n  },\n\n  /**\n   * Gets or sets the height offset in meters of this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {number}\n   */\n  heightOffset: {\n    get: function () {\n      return this._heightOffset;\n    },\n    set: function (value) {\n      const offset = defaultValue(this._heightOffset, 0.0);\n\n      const ellipsoid = this._content.tileset.ellipsoid;\n      const cart = ellipsoid.cartesianToCartographic(\n        this._billboard.position,\n        scratchCartographic,\n      );\n      cart.height = cart.height - offset + value;\n      const newPosition = ellipsoid.cartographicToCartesian(cart);\n\n      this._billboard.position = newPosition;\n      this._label.position = this._billboard.position;\n      this._polyline.positions = [this._polyline.positions[0], newPosition];\n\n      this._heightOffset = value;\n    },\n  },\n\n  /**\n   * Gets or sets whether the anchor line is displayed.\n   * <p>\n   * Only applied when <code>heightOffset</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {boolean}\n   */\n  anchorLineEnabled: {\n    get: function () {\n      return this._polyline.show;\n    },\n    set: function (value) {\n      this._polyline.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the color for the anchor line.\n   * <p>\n   * Only applied when <code>heightOffset</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  anchorLineColor: {\n    get: function () {\n      return this._polyline.material.uniforms.color;\n    },\n    set: function (value) {\n      this._polyline.material.uniforms.color = Color.clone(\n        value,\n        this._polyline.material.uniforms.color,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the image of this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {string}\n   */\n  image: {\n    get: function () {\n      return this._billboardImage;\n    },\n    set: function (value) {\n      const imageChanged = this._billboardImage !== value;\n      this._billboardImage = value;\n      if (imageChanged) {\n        setBillboardImage(this);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the distance where depth testing will be disabled.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {number}\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._label.disableDepthTestDistance;\n    },\n    set: function (value) {\n      this._label.disableDepthTestDistance = value;\n      this._billboard.disableDepthTestDistance = value;\n    },\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this point, which determines if the point is\n   * to the left, center, or right of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {HorizontalOrigin}\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._billboard.horizontalOrigin;\n    },\n    set: function (value) {\n      this._billboard.horizontalOrigin = value;\n    },\n  },\n\n  /**\n   * Gets or sets the vertical origin of this point, which determines if the point is\n   * to the bottom, center, or top of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {VerticalOrigin}\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._billboard.verticalOrigin;\n    },\n    set: function (value) {\n      this._billboard.verticalOrigin = value;\n    },\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this point's text, which determines if the point's text is\n   * to the left, center, or right of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {HorizontalOrigin}\n   */\n  labelHorizontalOrigin: {\n    get: function () {\n      return this._label.horizontalOrigin;\n    },\n    set: function (value) {\n      this._label.horizontalOrigin = value;\n    },\n  },\n\n  /**\n   * Get or sets the vertical origin of this point's text, which determines if the point's text is\n   * to the bottom, center, top, or baseline of it's anchor point.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {VerticalOrigin}\n   */\n  labelVerticalOrigin: {\n    get: function () {\n      return this._label.verticalOrigin;\n    },\n    set: function (value) {\n      this._label.verticalOrigin = value;\n    },\n  },\n\n  /**\n   * Gets the content of the tile containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileContent}\n   *\n   * @readonly\n   * @private\n   */\n  content: {\n    get: function () {\n      return this._content;\n    },\n  },\n\n  /**\n   * Gets the tileset containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  tileset: {\n    get: function () {\n      return this._content.tileset;\n    },\n  },\n\n  /**\n   * All objects returned by {@link Scene#pick} have a <code>primitive</code> property. This returns\n   * the tileset containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  primitive: {\n    get: function () {\n      return this._content.tileset;\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickIds: {\n    get: function () {\n      const ids = this._pickIds;\n      ids[0] = this._billboard.pickId;\n      ids[1] = this._label.pickId;\n      ids[2] = this._polyline.pickId;\n      return ids;\n    },\n  },\n});\n\nCesium3DTilePointFeature.defaultColor = Color.WHITE;\nCesium3DTilePointFeature.defaultPointOutlineColor = Color.BLACK;\nCesium3DTilePointFeature.defaultPointOutlineWidth = 0.0;\nCesium3DTilePointFeature.defaultPointSize = 8.0;\n\nfunction setBillboardImage(feature) {\n  const b = feature._billboard;\n  if (defined(feature._billboardImage) && feature._billboardImage !== b.image) {\n    b.image = feature._billboardImage;\n    return;\n  }\n\n  if (defined(feature._billboardImage)) {\n    return;\n  }\n\n  const newColor = defaultValue(\n    feature._color,\n    Cesium3DTilePointFeature.defaultColor,\n  );\n  const newOutlineColor = defaultValue(\n    feature._pointOutlineColor,\n    Cesium3DTilePointFeature.defaultPointOutlineColor,\n  );\n  const newOutlineWidth = defaultValue(\n    feature._pointOutlineWidth,\n    Cesium3DTilePointFeature.defaultPointOutlineWidth,\n  );\n  const newPointSize = defaultValue(\n    feature._pointSize,\n    Cesium3DTilePointFeature.defaultPointSize,\n  );\n\n  const currentColor = feature._billboardColor;\n  const currentOutlineColor = feature._billboardOutlineColor;\n  const currentOutlineWidth = feature._billboardOutlineWidth;\n  const currentPointSize = feature._billboardSize;\n\n  if (\n    Color.equals(newColor, currentColor) &&\n    Color.equals(newOutlineColor, currentOutlineColor) &&\n    newOutlineWidth === currentOutlineWidth &&\n    newPointSize === currentPointSize\n  ) {\n    return;\n  }\n\n  feature._billboardColor = Color.clone(newColor, feature._billboardColor);\n  feature._billboardOutlineColor = Color.clone(\n    newOutlineColor,\n    feature._billboardOutlineColor,\n  );\n  feature._billboardOutlineWidth = newOutlineWidth;\n  feature._billboardSize = newPointSize;\n\n  const centerAlpha = newColor.alpha;\n  const cssColor = newColor.toCssColorString();\n  const cssOutlineColor = newOutlineColor.toCssColorString();\n  const textureId = JSON.stringify([\n    cssColor,\n    newPointSize,\n    cssOutlineColor,\n    newOutlineWidth,\n  ]);\n\n  b.setImage(\n    textureId,\n    createBillboardPointCallback(\n      centerAlpha,\n      cssColor,\n      cssOutlineColor,\n      newOutlineWidth,\n      newPointSize,\n    ),\n  );\n}\n\n/**\n * Returns whether the feature contains this property. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string} name The case-sensitive name of the property.\n * @returns {boolean} Whether the feature contains this property.\n */\nCesium3DTilePointFeature.prototype.hasProperty = function (name) {\n  return this._content.batchTable.hasProperty(this._batchId, name);\n};\n\n/**\n * Returns an array of property IDs for the feature. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The IDs of the feature's properties.\n */\nCesium3DTilePointFeature.prototype.getPropertyIds = function (results) {\n  return this._content.batchTable.getPropertyIds(this._batchId, results);\n};\n\n/**\n * Returns a copy of the value of the feature's property with the given name. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n *\n * @example\n * // Display all the properties for a feature in the console log.\n * const propertyIds = feature.getPropertyIds();\n * const length = propertyIds.length;\n * for (let i = 0; i < length; ++i) {\n *     const propertyId = propertyIds[i];\n *     console.log(`{propertyId} : ${feature.getProperty(propertyId)}`);\n * }\n */\nCesium3DTilePointFeature.prototype.getProperty = function (name) {\n  return this._content.batchTable.getProperty(this._batchId, name);\n};\n\n/**\n * Returns a copy of the value of the feature's property with the given name.\n * If the feature is contained within a tileset that has metadata (3D Tiles 1.1)\n * or uses the <code>3DTILES_metadata</code> extension, tileset, group and tile metadata is\n * inherited.\n * <p>\n * To resolve name conflicts, this method resolves names from most specific to\n * least specific by metadata granularity in the order: feature, tile, group,\n * tileset. Within each granularity, semantics are resolved first, then other\n * properties.\n * </p>\n * @param {string} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nCesium3DTilePointFeature.prototype.getPropertyInherited = function (name) {\n  return Cesium3DTileFeature.getPropertyInherited(\n    this._content,\n    this._batchId,\n    name,\n  );\n};\n\n/**\n * Sets the value of the feature's property with the given name.\n * <p>\n * If a property with the given name doesn't exist, it is created.\n * </p>\n *\n * @param {string} name The case-sensitive name of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} Inherited batch table hierarchy property is read only.\n *\n * @example\n * const height = feature.getProperty('Height'); // e.g., the height of a building\n *\n * @example\n * const name = 'clicked';\n * if (feature.getProperty(name)) {\n *     console.log('already clicked');\n * } else {\n *     feature.setProperty(name, true);\n *     console.log('first click');\n * }\n */\nCesium3DTilePointFeature.prototype.setProperty = function (name, value) {\n  this._content.batchTable.setProperty(this._batchId, name, value);\n\n  // PERFORMANCE_IDEA: Probably overkill, but maybe only mark the tile dirty if the\n  // property is in one of the style's expressions or - if it can be done quickly -\n  // if the new property value changed the result of an expression.\n  this._content.featurePropertiesDirty = true;\n};\n\n/**\n * Returns whether the feature's class name equals <code>className</code>. Unlike {@link Cesium3DTilePointFeature#isClass}\n * this function only checks the feature's exact class and not inherited classes.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {string} className The name to check against.\n * @returns {boolean} Whether the feature's class name equals <code>className</code>\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.isExactClass = function (className) {\n  return this._content.batchTable.isExactClass(this._batchId, className);\n};\n\n/**\n * Returns whether the feature's class or any inherited classes are named <code>className</code>.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {string} className The name to check against.\n * @returns {boolean} Whether the feature's class or inherited classes are named <code>className</code>\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.isClass = function (className) {\n  return this._content.batchTable.isClass(this._batchId, className);\n};\n\n/**\n * Returns the feature's class name.\n * <p>\n * This function returns <code>undefined</code> if no batch table hierarchy is present.\n * </p>\n *\n * @returns {string} The feature's class name.\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.getExactClassName = function () {\n  return this._content.batchTable.getExactClassName(this._batchId);\n};\nexport default Cesium3DTilePointFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}