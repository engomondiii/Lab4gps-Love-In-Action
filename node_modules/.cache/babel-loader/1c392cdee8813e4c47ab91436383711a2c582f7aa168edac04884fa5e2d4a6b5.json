{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport FrustumGeometry from \"../Core/FrustumGeometry.js\";\nimport FrustumOutlineGeometry from \"../Core/FrustumOutlineGeometry.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport OrthographicFrustum from \"../Core/OrthographicFrustum.js\";\nimport OrthographicOffCenterFrustum from \"../Core/OrthographicOffCenterFrustum.js\";\nimport PerspectiveFrustum from \"../Core/PerspectiveFrustum.js\";\nimport PerspectiveOffCenterFrustum from \"../Core/PerspectiveOffCenterFrustum.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport PerInstanceColorAppearance from \"./PerInstanceColorAppearance.js\";\nimport Primitive from \"./Primitive.js\";\n\n/**\n * Draws the outline of the camera's view frustum.\n *\n * @alias DebugCameraPrimitive\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Camera} options.camera The camera.\n * @param {number[]} [options.frustumSplits] Distances to the near and far planes of the camera frustums. This overrides the camera's frustum near and far values.\n * @param {Color} [options.color=Color.CYAN] The color of the debug outline.\n * @param {boolean} [options.updateOnChange=true] Whether the primitive updates when the underlying camera changes.\n * @param {boolean} [options.show=true] Determines if this primitive will be shown.\n * @param {object} [options.id] A user-defined object to return when the instance is picked with {@link Scene#pick}.\n *\n * @example\n * primitives.add(new Cesium.DebugCameraPrimitive({\n *   camera : camera,\n *   color : Cesium.Color.YELLOW\n * }));\n */\nfunction DebugCameraPrimitive(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.camera)) {\n    throw new DeveloperError(\"options.camera is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._camera = options.camera;\n  this._frustumSplits = options.frustumSplits;\n  this._color = defaultValue(options.color, Color.CYAN);\n  this._updateOnChange = defaultValue(options.updateOnChange, true);\n\n  /**\n   * Determines if this primitive will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * User-defined value returned when the primitive is picked.\n   *\n   * @type {*}\n   * @default undefined\n   *\n   * @see Scene#pick\n   */\n  this.id = options.id;\n  this._id = undefined;\n  this._outlinePrimitives = [];\n  this._planesPrimitives = [];\n}\nconst scratchRight = new Cartesian3();\nconst scratchRotation = new Matrix3();\nconst scratchOrientation = new Quaternion();\nconst scratchPerspective = new PerspectiveFrustum();\nconst scratchPerspectiveOffCenter = new PerspectiveOffCenterFrustum();\nconst scratchOrthographic = new OrthographicFrustum();\nconst scratchOrthographicOffCenter = new OrthographicOffCenterFrustum();\nconst scratchColor = new Color();\nconst scratchSplits = [1.0, 100000.0];\n\n/**\n * @private\n */\nDebugCameraPrimitive.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n  const planesPrimitives = this._planesPrimitives;\n  const outlinePrimitives = this._outlinePrimitives;\n  let i;\n  let length;\n  if (this._updateOnChange) {\n    // Recreate the primitive every frame\n    length = planesPrimitives.length;\n    for (i = 0; i < length; ++i) {\n      outlinePrimitives[i] = outlinePrimitives[i] && outlinePrimitives[i].destroy();\n      planesPrimitives[i] = planesPrimitives[i] && planesPrimitives[i].destroy();\n    }\n    planesPrimitives.length = 0;\n    outlinePrimitives.length = 0;\n  }\n  if (planesPrimitives.length === 0) {\n    const camera = this._camera;\n    const cameraFrustum = camera.frustum;\n    let frustum;\n    if (cameraFrustum instanceof PerspectiveFrustum) {\n      frustum = scratchPerspective;\n    } else if (cameraFrustum instanceof PerspectiveOffCenterFrustum) {\n      frustum = scratchPerspectiveOffCenter;\n    } else if (cameraFrustum instanceof OrthographicFrustum) {\n      frustum = scratchOrthographic;\n    } else {\n      frustum = scratchOrthographicOffCenter;\n    }\n    frustum = cameraFrustum.clone(frustum);\n    let numFrustums;\n    let frustumSplits = this._frustumSplits;\n    if (!defined(frustumSplits) || frustumSplits.length <= 1) {\n      // Use near and far planes if no splits created\n      frustumSplits = scratchSplits;\n      frustumSplits[0] = this._camera.frustum.near;\n      frustumSplits[1] = this._camera.frustum.far;\n      numFrustums = 1;\n    } else {\n      numFrustums = frustumSplits.length - 1;\n    }\n    const position = camera.positionWC;\n    const direction = camera.directionWC;\n    const up = camera.upWC;\n    let right = camera.rightWC;\n    right = Cartesian3.negate(right, scratchRight);\n    const rotation = scratchRotation;\n    Matrix3.setColumn(rotation, 0, right, rotation);\n    Matrix3.setColumn(rotation, 1, up, rotation);\n    Matrix3.setColumn(rotation, 2, direction, rotation);\n    const orientation = Quaternion.fromRotationMatrix(rotation, scratchOrientation);\n    planesPrimitives.length = outlinePrimitives.length = numFrustums;\n    for (i = 0; i < numFrustums; ++i) {\n      frustum.near = frustumSplits[i];\n      frustum.far = frustumSplits[i + 1];\n      planesPrimitives[i] = new Primitive({\n        geometryInstances: new GeometryInstance({\n          geometry: new FrustumGeometry({\n            origin: position,\n            orientation: orientation,\n            frustum: frustum,\n            _drawNearPlane: i === 0\n          }),\n          attributes: {\n            color: ColorGeometryInstanceAttribute.fromColor(Color.fromAlpha(this._color, 0.1, scratchColor))\n          },\n          id: this.id,\n          pickPrimitive: this\n        }),\n        appearance: new PerInstanceColorAppearance({\n          translucent: true,\n          flat: true\n        }),\n        asynchronous: false\n      });\n      outlinePrimitives[i] = new Primitive({\n        geometryInstances: new GeometryInstance({\n          geometry: new FrustumOutlineGeometry({\n            origin: position,\n            orientation: orientation,\n            frustum: frustum,\n            _drawNearPlane: i === 0\n          }),\n          attributes: {\n            color: ColorGeometryInstanceAttribute.fromColor(this._color)\n          },\n          id: this.id,\n          pickPrimitive: this\n        }),\n        appearance: new PerInstanceColorAppearance({\n          translucent: false,\n          flat: true\n        }),\n        asynchronous: false\n      });\n    }\n  }\n  length = planesPrimitives.length;\n  for (i = 0; i < length; ++i) {\n    outlinePrimitives[i].update(frameState);\n    planesPrimitives[i].update(frameState);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see DebugCameraPrimitive#destroy\n */\nDebugCameraPrimitive.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * p = p && p.destroy();\n *\n * @see DebugCameraPrimitive#isDestroyed\n */\nDebugCameraPrimitive.prototype.destroy = function () {\n  const length = this._planesPrimitives.length;\n  for (let i = 0; i < length; ++i) {\n    this._outlinePrimitives[i] = this._outlinePrimitives[i] && this._outlinePrimitives[i].destroy();\n    this._planesPrimitives[i] = this._planesPrimitives[i] && this._planesPrimitives[i].destroy();\n  }\n  return destroyObject(this);\n};\nexport default DebugCameraPrimitive;","map":{"version":3,"names":["Cartesian3","Color","ColorGeometryInstanceAttribute","defaultValue","defined","destroyObject","DeveloperError","FrustumGeometry","FrustumOutlineGeometry","GeometryInstance","Matrix3","OrthographicFrustum","OrthographicOffCenterFrustum","PerspectiveFrustum","PerspectiveOffCenterFrustum","Quaternion","PerInstanceColorAppearance","Primitive","DebugCameraPrimitive","options","EMPTY_OBJECT","camera","_camera","_frustumSplits","frustumSplits","_color","color","CYAN","_updateOnChange","updateOnChange","show","id","_id","undefined","_outlinePrimitives","_planesPrimitives","scratchRight","scratchRotation","scratchOrientation","scratchPerspective","scratchPerspectiveOffCenter","scratchOrthographic","scratchOrthographicOffCenter","scratchColor","scratchSplits","prototype","update","frameState","planesPrimitives","outlinePrimitives","i","length","destroy","cameraFrustum","frustum","clone","numFrustums","near","far","position","positionWC","direction","directionWC","up","upWC","right","rightWC","negate","rotation","setColumn","orientation","fromRotationMatrix","geometryInstances","geometry","origin","_drawNearPlane","attributes","fromColor","fromAlpha","pickPrimitive","appearance","translucent","flat","asynchronous","isDestroyed"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/DebugCameraPrimitive.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport FrustumGeometry from \"../Core/FrustumGeometry.js\";\nimport FrustumOutlineGeometry from \"../Core/FrustumOutlineGeometry.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport OrthographicFrustum from \"../Core/OrthographicFrustum.js\";\nimport OrthographicOffCenterFrustum from \"../Core/OrthographicOffCenterFrustum.js\";\nimport PerspectiveFrustum from \"../Core/PerspectiveFrustum.js\";\nimport PerspectiveOffCenterFrustum from \"../Core/PerspectiveOffCenterFrustum.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport PerInstanceColorAppearance from \"./PerInstanceColorAppearance.js\";\nimport Primitive from \"./Primitive.js\";\n\n/**\n * Draws the outline of the camera's view frustum.\n *\n * @alias DebugCameraPrimitive\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Camera} options.camera The camera.\n * @param {number[]} [options.frustumSplits] Distances to the near and far planes of the camera frustums. This overrides the camera's frustum near and far values.\n * @param {Color} [options.color=Color.CYAN] The color of the debug outline.\n * @param {boolean} [options.updateOnChange=true] Whether the primitive updates when the underlying camera changes.\n * @param {boolean} [options.show=true] Determines if this primitive will be shown.\n * @param {object} [options.id] A user-defined object to return when the instance is picked with {@link Scene#pick}.\n *\n * @example\n * primitives.add(new Cesium.DebugCameraPrimitive({\n *   camera : camera,\n *   color : Cesium.Color.YELLOW\n * }));\n */\nfunction DebugCameraPrimitive(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.camera)) {\n    throw new DeveloperError(\"options.camera is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._camera = options.camera;\n  this._frustumSplits = options.frustumSplits;\n  this._color = defaultValue(options.color, Color.CYAN);\n  this._updateOnChange = defaultValue(options.updateOnChange, true);\n\n  /**\n   * Determines if this primitive will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * User-defined value returned when the primitive is picked.\n   *\n   * @type {*}\n   * @default undefined\n   *\n   * @see Scene#pick\n   */\n  this.id = options.id;\n  this._id = undefined;\n\n  this._outlinePrimitives = [];\n  this._planesPrimitives = [];\n}\n\nconst scratchRight = new Cartesian3();\nconst scratchRotation = new Matrix3();\nconst scratchOrientation = new Quaternion();\nconst scratchPerspective = new PerspectiveFrustum();\nconst scratchPerspectiveOffCenter = new PerspectiveOffCenterFrustum();\nconst scratchOrthographic = new OrthographicFrustum();\nconst scratchOrthographicOffCenter = new OrthographicOffCenterFrustum();\n\nconst scratchColor = new Color();\nconst scratchSplits = [1.0, 100000.0];\n\n/**\n * @private\n */\nDebugCameraPrimitive.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  const planesPrimitives = this._planesPrimitives;\n  const outlinePrimitives = this._outlinePrimitives;\n  let i;\n  let length;\n\n  if (this._updateOnChange) {\n    // Recreate the primitive every frame\n    length = planesPrimitives.length;\n    for (i = 0; i < length; ++i) {\n      outlinePrimitives[i] =\n        outlinePrimitives[i] && outlinePrimitives[i].destroy();\n      planesPrimitives[i] =\n        planesPrimitives[i] && planesPrimitives[i].destroy();\n    }\n    planesPrimitives.length = 0;\n    outlinePrimitives.length = 0;\n  }\n\n  if (planesPrimitives.length === 0) {\n    const camera = this._camera;\n    const cameraFrustum = camera.frustum;\n    let frustum;\n    if (cameraFrustum instanceof PerspectiveFrustum) {\n      frustum = scratchPerspective;\n    } else if (cameraFrustum instanceof PerspectiveOffCenterFrustum) {\n      frustum = scratchPerspectiveOffCenter;\n    } else if (cameraFrustum instanceof OrthographicFrustum) {\n      frustum = scratchOrthographic;\n    } else {\n      frustum = scratchOrthographicOffCenter;\n    }\n    frustum = cameraFrustum.clone(frustum);\n\n    let numFrustums;\n    let frustumSplits = this._frustumSplits;\n    if (!defined(frustumSplits) || frustumSplits.length <= 1) {\n      // Use near and far planes if no splits created\n      frustumSplits = scratchSplits;\n      frustumSplits[0] = this._camera.frustum.near;\n      frustumSplits[1] = this._camera.frustum.far;\n      numFrustums = 1;\n    } else {\n      numFrustums = frustumSplits.length - 1;\n    }\n\n    const position = camera.positionWC;\n    const direction = camera.directionWC;\n    const up = camera.upWC;\n    let right = camera.rightWC;\n    right = Cartesian3.negate(right, scratchRight);\n\n    const rotation = scratchRotation;\n    Matrix3.setColumn(rotation, 0, right, rotation);\n    Matrix3.setColumn(rotation, 1, up, rotation);\n    Matrix3.setColumn(rotation, 2, direction, rotation);\n\n    const orientation = Quaternion.fromRotationMatrix(\n      rotation,\n      scratchOrientation,\n    );\n\n    planesPrimitives.length = outlinePrimitives.length = numFrustums;\n\n    for (i = 0; i < numFrustums; ++i) {\n      frustum.near = frustumSplits[i];\n      frustum.far = frustumSplits[i + 1];\n\n      planesPrimitives[i] = new Primitive({\n        geometryInstances: new GeometryInstance({\n          geometry: new FrustumGeometry({\n            origin: position,\n            orientation: orientation,\n            frustum: frustum,\n            _drawNearPlane: i === 0,\n          }),\n          attributes: {\n            color: ColorGeometryInstanceAttribute.fromColor(\n              Color.fromAlpha(this._color, 0.1, scratchColor),\n            ),\n          },\n          id: this.id,\n          pickPrimitive: this,\n        }),\n        appearance: new PerInstanceColorAppearance({\n          translucent: true,\n          flat: true,\n        }),\n        asynchronous: false,\n      });\n\n      outlinePrimitives[i] = new Primitive({\n        geometryInstances: new GeometryInstance({\n          geometry: new FrustumOutlineGeometry({\n            origin: position,\n            orientation: orientation,\n            frustum: frustum,\n            _drawNearPlane: i === 0,\n          }),\n          attributes: {\n            color: ColorGeometryInstanceAttribute.fromColor(this._color),\n          },\n          id: this.id,\n          pickPrimitive: this,\n        }),\n        appearance: new PerInstanceColorAppearance({\n          translucent: false,\n          flat: true,\n        }),\n        asynchronous: false,\n      });\n    }\n  }\n\n  length = planesPrimitives.length;\n  for (i = 0; i < length; ++i) {\n    outlinePrimitives[i].update(frameState);\n    planesPrimitives[i].update(frameState);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see DebugCameraPrimitive#destroy\n */\nDebugCameraPrimitive.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * p = p && p.destroy();\n *\n * @see DebugCameraPrimitive#isDestroyed\n */\nDebugCameraPrimitive.prototype.destroy = function () {\n  const length = this._planesPrimitives.length;\n  for (let i = 0; i < length; ++i) {\n    this._outlinePrimitives[i] =\n      this._outlinePrimitives[i] && this._outlinePrimitives[i].destroy();\n    this._planesPrimitives[i] =\n      this._planesPrimitives[i] && this._planesPrimitives[i].destroy();\n  }\n  return destroyObject(this);\n};\nexport default DebugCameraPrimitive;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}