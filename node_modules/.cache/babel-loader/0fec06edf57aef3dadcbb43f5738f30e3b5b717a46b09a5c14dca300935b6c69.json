{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport IonResource from \"../Core/IonResource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport ArcGisMapServerImageryProvider from \"./ArcGisMapServerImageryProvider.js\";\nimport BingMapsImageryProvider from \"./BingMapsImageryProvider.js\";\nimport TileMapServiceImageryProvider from \"./TileMapServiceImageryProvider.js\";\nimport GoogleEarthEnterpriseMapsProvider from \"./GoogleEarthEnterpriseMapsProvider.js\";\nimport MapboxImageryProvider from \"./MapboxImageryProvider.js\";\nimport SingleTileImageryProvider from \"./SingleTileImageryProvider.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\nimport WebMapServiceImageryProvider from \"./WebMapServiceImageryProvider.js\";\nimport WebMapTileServiceImageryProvider from \"./WebMapTileServiceImageryProvider.js\";\n\n// These values are the list of supported external imagery\n// assets in the Cesium ion beta. They are subject to change.\nconst ImageryProviderAsyncMapping = {\n  ARCGIS_MAPSERVER: ArcGisMapServerImageryProvider.fromUrl,\n  BING: async (url, options) => {\n    return BingMapsImageryProvider.fromUrl(url, options);\n  },\n  GOOGLE_EARTH: async (url, options) => {\n    const channel = options.channel;\n    delete options.channel;\n    return GoogleEarthEnterpriseMapsProvider.fromUrl(url, channel, options);\n  },\n  MAPBOX: (url, options) => {\n    return new MapboxImageryProvider({\n      url: url,\n      ...options\n    });\n  },\n  SINGLE_TILE: SingleTileImageryProvider.fromUrl,\n  TMS: TileMapServiceImageryProvider.fromUrl,\n  URL_TEMPLATE: (url, options) => {\n    return new UrlTemplateImageryProvider({\n      url: url,\n      ...options\n    });\n  },\n  WMS: (url, options) => {\n    return new WebMapServiceImageryProvider({\n      url: url,\n      ...options\n    });\n  },\n  WMTS: (url, options) => {\n    return new WebMapTileServiceImageryProvider({\n      url: url,\n      ...options\n    });\n  }\n};\n\n/**\n * @typedef {object} IonImageryProvider.ConstructorOptions\n *\n * Initialization options for the TileMapServiceImageryProvider constructor\n *\n * @property {string} [accessToken=Ion.defaultAccessToken] The access token to use.\n * @property {string|Resource} [server=Ion.defaultServer] The resource to the Cesium ion API server.\n */\n\n/**\n * <div class=\"notice\">\n * To construct a IonImageryProvider, call {@link IonImageryProvider.fromAssetId}. Do not call the constructor directly.\n * </div>\n *\n * Provides tiled imagery using the Cesium ion REST API.\n *\n * @alias IonImageryProvider\n * @constructor\n *\n * @param {IonImageryProvider.ConstructorOptions} [options] Object describing initialization options\n *\n * @example\n * const imageryLayer = Cesium.ImageryLayer.fromProviderAsync(Cesium.IonImageryProvider.fromAssetId(3812));\n * viewer.imageryLayers.add(imageryLayer);\n *\n * @see IonImageryProvider.fromAssetId\n */\nfunction IonImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n  this._tileCredits = undefined;\n  this._errorEvent = new Event();\n}\nObject.defineProperties(IonImageryProvider.prototype, {\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.\n   * @memberof IonImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._imageryProvider.rectangle;\n    }\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof IonImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._imageryProvider.tileWidth;\n    }\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof IonImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._imageryProvider.tileHeight;\n    }\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof IonImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._imageryProvider.maximumLevel;\n    }\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof IonImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._imageryProvider.minimumLevel;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by the provider.\n   * @memberof IonImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._imageryProvider.tilingScheme;\n    }\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof IonImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._imageryProvider.tileDiscardPolicy;\n    }\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof IonImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof IonImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._imageryProvider.credit;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof IonImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._imageryProvider.hasAlphaChannel;\n    }\n  },\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof IonImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   * @default undefined\n   */\n  proxy: {\n    get: function () {\n      return undefined;\n    }\n  }\n});\n\n/**\n * Creates a provider for tiled imagery using the Cesium ion REST API.\n *\n * @param {Number} assetId  An ion imagery asset ID.\n * @param {IonImageryProvider.ConstructorOptions} [options] Object describing initialization options.\n * @returns {Promise<IonImageryProvider>} A promise which resolves to the created IonImageryProvider.\n *\n * @example\n * const imageryLayer = Cesium.ImageryLayer.fromProviderAsync(Cesium.IonImageryProvider.fromAssetId(3812));\n * viewer.imageryLayers.add(imageryLayer);\n *\n * @exception {RuntimeError} Cesium ion assetId is not an imagery asset\n * @exception {RuntimeError} Unrecognized Cesium ion imagery type\n */\nIonImageryProvider.fromAssetId = async function (assetId, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"assetId\", assetId);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const endpointResource = IonResource._createEndpointResource(assetId, options);\n\n  // A simple cache to avoid making repeated requests to ion for endpoints we've\n  // already retrieved. This exists mainly to support Bing caching to reduce\n  // world imagery sessions, but provides a small boost of performance in general\n  // if constantly reloading assets\n  const cacheKey = assetId.toString() + options.accessToken + options.server;\n  let promise = IonImageryProvider._endpointCache[cacheKey];\n  if (!defined(promise)) {\n    promise = endpointResource.fetchJson();\n    IonImageryProvider._endpointCache[cacheKey] = promise;\n  }\n  const endpoint = await promise;\n  if (endpoint.type !== \"IMAGERY\") {\n    throw new RuntimeError(`Cesium ion asset ${assetId} is not an imagery asset.`);\n  }\n  let imageryProvider;\n  const externalType = endpoint.externalType;\n  if (!defined(externalType)) {\n    imageryProvider = await TileMapServiceImageryProvider.fromUrl(new IonResource(endpoint, endpointResource));\n  } else {\n    const factory = ImageryProviderAsyncMapping[externalType];\n    if (!defined(factory)) {\n      throw new RuntimeError(`Unrecognized Cesium ion imagery type: ${externalType}`);\n    }\n    // Make a copy before editing since this object reference is cached;\n    const options = {\n      ...endpoint.options\n    };\n    const url = options.url;\n    delete options.url;\n    imageryProvider = await factory(url, options);\n  }\n  const provider = new IonImageryProvider(options);\n  imageryProvider.errorEvent.addEventListener(function (tileProviderError) {\n    //Propagate the errorEvent but set the provider to this instance instead\n    //of the inner instance.\n    tileProviderError.provider = provider;\n    provider._errorEvent.raiseEvent(tileProviderError);\n  });\n  provider._tileCredits = IonResource.getCreditsFromEndpoint(endpoint, endpointResource);\n  provider._imageryProvider = imageryProvider;\n  return provider;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n * @function\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nIonImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  const innerCredits = this._imageryProvider.getTileCredits(x, y, level);\n  if (!defined(innerCredits)) {\n    return this._tileCredits;\n  }\n  return this._tileCredits.concat(innerCredits);\n};\n\n/**\n * Requests the image for a given tile.\n * @function\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nIonImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return this._imageryProvider.requestImage(x, y, level, request);\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile. This function is optional, so it may not exist on all ImageryProviders.\n *\n * @function\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {Promise<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nIonImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return this._imageryProvider.pickFeatures(x, y, level, longitude, latitude);\n};\n\n//exposed for testing\nIonImageryProvider._endpointCache = {};\nexport default IonImageryProvider;","map":{"version":3,"names":["Check","defaultValue","defined","Event","IonResource","RuntimeError","ArcGisMapServerImageryProvider","BingMapsImageryProvider","TileMapServiceImageryProvider","GoogleEarthEnterpriseMapsProvider","MapboxImageryProvider","SingleTileImageryProvider","UrlTemplateImageryProvider","WebMapServiceImageryProvider","WebMapTileServiceImageryProvider","ImageryProviderAsyncMapping","ARCGIS_MAPSERVER","fromUrl","BING","url","options","GOOGLE_EARTH","channel","MAPBOX","SINGLE_TILE","TMS","URL_TEMPLATE","WMS","WMTS","IonImageryProvider","EMPTY_OBJECT","_defaultAlpha","undefined","_defaultNightAlpha","_defaultDayAlpha","_defaultBrightness","_defaultContrast","_defaultHue","_defaultSaturation","_defaultGamma","_defaultMinificationFilter","_defaultMagnificationFilter","_tileCredits","_errorEvent","Object","defineProperties","prototype","rectangle","get","_imageryProvider","tileWidth","tileHeight","maximumLevel","minimumLevel","tilingScheme","tileDiscardPolicy","errorEvent","credit","hasAlphaChannel","proxy","fromAssetId","assetId","typeOf","number","endpointResource","_createEndpointResource","cacheKey","toString","accessToken","server","promise","_endpointCache","fetchJson","endpoint","type","imageryProvider","externalType","factory","provider","addEventListener","tileProviderError","raiseEvent","getCreditsFromEndpoint","getTileCredits","x","y","level","innerCredits","concat","requestImage","request","pickFeatures","longitude","latitude"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/IonImageryProvider.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport IonResource from \"../Core/IonResource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport ArcGisMapServerImageryProvider from \"./ArcGisMapServerImageryProvider.js\";\nimport BingMapsImageryProvider from \"./BingMapsImageryProvider.js\";\nimport TileMapServiceImageryProvider from \"./TileMapServiceImageryProvider.js\";\nimport GoogleEarthEnterpriseMapsProvider from \"./GoogleEarthEnterpriseMapsProvider.js\";\nimport MapboxImageryProvider from \"./MapboxImageryProvider.js\";\nimport SingleTileImageryProvider from \"./SingleTileImageryProvider.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\nimport WebMapServiceImageryProvider from \"./WebMapServiceImageryProvider.js\";\nimport WebMapTileServiceImageryProvider from \"./WebMapTileServiceImageryProvider.js\";\n\n// These values are the list of supported external imagery\n// assets in the Cesium ion beta. They are subject to change.\nconst ImageryProviderAsyncMapping = {\n  ARCGIS_MAPSERVER: ArcGisMapServerImageryProvider.fromUrl,\n  BING: async (url, options) => {\n    return BingMapsImageryProvider.fromUrl(url, options);\n  },\n  GOOGLE_EARTH: async (url, options) => {\n    const channel = options.channel;\n    delete options.channel;\n    return GoogleEarthEnterpriseMapsProvider.fromUrl(url, channel, options);\n  },\n  MAPBOX: (url, options) => {\n    return new MapboxImageryProvider({\n      url: url,\n      ...options,\n    });\n  },\n  SINGLE_TILE: SingleTileImageryProvider.fromUrl,\n  TMS: TileMapServiceImageryProvider.fromUrl,\n  URL_TEMPLATE: (url, options) => {\n    return new UrlTemplateImageryProvider({\n      url: url,\n      ...options,\n    });\n  },\n  WMS: (url, options) => {\n    return new WebMapServiceImageryProvider({\n      url: url,\n      ...options,\n    });\n  },\n  WMTS: (url, options) => {\n    return new WebMapTileServiceImageryProvider({\n      url: url,\n      ...options,\n    });\n  },\n};\n\n/**\n * @typedef {object} IonImageryProvider.ConstructorOptions\n *\n * Initialization options for the TileMapServiceImageryProvider constructor\n *\n * @property {string} [accessToken=Ion.defaultAccessToken] The access token to use.\n * @property {string|Resource} [server=Ion.defaultServer] The resource to the Cesium ion API server.\n */\n\n/**\n * <div class=\"notice\">\n * To construct a IonImageryProvider, call {@link IonImageryProvider.fromAssetId}. Do not call the constructor directly.\n * </div>\n *\n * Provides tiled imagery using the Cesium ion REST API.\n *\n * @alias IonImageryProvider\n * @constructor\n *\n * @param {IonImageryProvider.ConstructorOptions} [options] Object describing initialization options\n *\n * @example\n * const imageryLayer = Cesium.ImageryLayer.fromProviderAsync(Cesium.IonImageryProvider.fromAssetId(3812));\n * viewer.imageryLayers.add(imageryLayer);\n *\n * @see IonImageryProvider.fromAssetId\n */\nfunction IonImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  this._tileCredits = undefined;\n  this._errorEvent = new Event();\n}\n\nObject.defineProperties(IonImageryProvider.prototype, {\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.\n   * @memberof IonImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._imageryProvider.rectangle;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof IonImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._imageryProvider.tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof IonImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._imageryProvider.tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof IonImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._imageryProvider.maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof IonImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._imageryProvider.minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.\n   * @memberof IonImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._imageryProvider.tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof IonImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._imageryProvider.tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof IonImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof IonImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._imageryProvider.credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof IonImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._imageryProvider.hasAlphaChannel;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof IonImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   * @default undefined\n   */\n  proxy: {\n    get: function () {\n      return undefined;\n    },\n  },\n});\n\n/**\n * Creates a provider for tiled imagery using the Cesium ion REST API.\n *\n * @param {Number} assetId  An ion imagery asset ID.\n * @param {IonImageryProvider.ConstructorOptions} [options] Object describing initialization options.\n * @returns {Promise<IonImageryProvider>} A promise which resolves to the created IonImageryProvider.\n *\n * @example\n * const imageryLayer = Cesium.ImageryLayer.fromProviderAsync(Cesium.IonImageryProvider.fromAssetId(3812));\n * viewer.imageryLayers.add(imageryLayer);\n *\n * @exception {RuntimeError} Cesium ion assetId is not an imagery asset\n * @exception {RuntimeError} Unrecognized Cesium ion imagery type\n */\nIonImageryProvider.fromAssetId = async function (assetId, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"assetId\", assetId);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const endpointResource = IonResource._createEndpointResource(\n    assetId,\n    options,\n  );\n\n  // A simple cache to avoid making repeated requests to ion for endpoints we've\n  // already retrieved. This exists mainly to support Bing caching to reduce\n  // world imagery sessions, but provides a small boost of performance in general\n  // if constantly reloading assets\n  const cacheKey = assetId.toString() + options.accessToken + options.server;\n  let promise = IonImageryProvider._endpointCache[cacheKey];\n  if (!defined(promise)) {\n    promise = endpointResource.fetchJson();\n    IonImageryProvider._endpointCache[cacheKey] = promise;\n  }\n\n  const endpoint = await promise;\n  if (endpoint.type !== \"IMAGERY\") {\n    throw new RuntimeError(\n      `Cesium ion asset ${assetId} is not an imagery asset.`,\n    );\n  }\n\n  let imageryProvider;\n  const externalType = endpoint.externalType;\n  if (!defined(externalType)) {\n    imageryProvider = await TileMapServiceImageryProvider.fromUrl(\n      new IonResource(endpoint, endpointResource),\n    );\n  } else {\n    const factory = ImageryProviderAsyncMapping[externalType];\n\n    if (!defined(factory)) {\n      throw new RuntimeError(\n        `Unrecognized Cesium ion imagery type: ${externalType}`,\n      );\n    }\n    // Make a copy before editing since this object reference is cached;\n    const options = { ...endpoint.options };\n    const url = options.url;\n    delete options.url;\n    imageryProvider = await factory(url, options);\n  }\n\n  const provider = new IonImageryProvider(options);\n\n  imageryProvider.errorEvent.addEventListener(function (tileProviderError) {\n    //Propagate the errorEvent but set the provider to this instance instead\n    //of the inner instance.\n    tileProviderError.provider = provider;\n    provider._errorEvent.raiseEvent(tileProviderError);\n  });\n\n  provider._tileCredits = IonResource.getCreditsFromEndpoint(\n    endpoint,\n    endpointResource,\n  );\n\n  provider._imageryProvider = imageryProvider;\n\n  return provider;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n * @function\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nIonImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  const innerCredits = this._imageryProvider.getTileCredits(x, y, level);\n  if (!defined(innerCredits)) {\n    return this._tileCredits;\n  }\n\n  return this._tileCredits.concat(innerCredits);\n};\n\n/**\n * Requests the image for a given tile.\n * @function\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nIonImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return this._imageryProvider.requestImage(x, y, level, request);\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile. This function is optional, so it may not exist on all ImageryProviders.\n *\n * @function\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {Promise<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nIonImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  return this._imageryProvider.pickFeatures(x, y, level, longitude, latitude);\n};\n\n//exposed for testing\nIonImageryProvider._endpointCache = {};\nexport default IonImageryProvider;\n"],"mappings":"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AgB,CAACC,SAAS;IACxC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE;IACVH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACC,gBAAgB,CAACE,UAAU;IACzC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,YAAY,EAAE;IACZJ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACC,gBAAgB,CAACG,YAAY;IAC3C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,YAAY,EAAE;IACZL,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACC,gBAAgB,CAACI,YAAY;IAC3C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,YAAY,EAAE;IACZN,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACC,gBAAgB,CAACK,YAAY;IAC3C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,iBAAiB,EAAE;IACjBP,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACC,gBAAgB,CAACM,iBAAiB;IAChD;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE;IACVR,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACL,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEc,MAAM,EAAE;IACNT,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACC,gBAAgB,CAACQ,MAAM;IACrC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,eAAe,EAAE;IACfV,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACC,gBAAgB,CAACS,eAAe;IAC9C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,KAAK,EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}