{"ast":null,"code":"import RBush from \"rbush\";\nimport Check from \"./Check.js\";\n\n/**\n * Wrapper around rbush for use with Rectangle types.\n * @private\n */\nfunction RectangleCollisionChecker() {\n  this._tree = new RBush();\n}\nfunction RectangleWithId() {\n  this.minX = 0.0;\n  this.minY = 0.0;\n  this.maxX = 0.0;\n  this.maxY = 0.0;\n  this.id = \"\";\n}\nRectangleWithId.fromRectangleAndId = function (id, rectangle, result) {\n  result.minX = rectangle.west;\n  result.minY = rectangle.south;\n  result.maxX = rectangle.east;\n  result.maxY = rectangle.north;\n  result.id = id;\n  return result;\n};\n\n/**\n * Insert a rectangle into the collision checker.\n *\n * @param {string} id Unique string ID for the rectangle being inserted.\n * @param {Rectangle} rectangle A Rectangle\n * @private\n */\nRectangleCollisionChecker.prototype.insert = function (id, rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"id\", id);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  //>>includeEnd('debug');\n\n  const withId = RectangleWithId.fromRectangleAndId(id, rectangle, new RectangleWithId());\n  this._tree.insert(withId);\n};\nfunction idCompare(a, b) {\n  return a.id === b.id;\n}\nconst removalScratch = new RectangleWithId();\n/**\n * Remove a rectangle from the collision checker.\n *\n * @param {string} id Unique string ID for the rectangle being removed.\n * @param {Rectangle} rectangle A Rectangle\n * @private\n */\nRectangleCollisionChecker.prototype.remove = function (id, rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"id\", id);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  //>>includeEnd('debug');\n\n  const withId = RectangleWithId.fromRectangleAndId(id, rectangle, removalScratch);\n  this._tree.remove(withId, idCompare);\n};\nconst collisionScratch = new RectangleWithId();\n/**\n * Checks if a given rectangle collides with any of the rectangles in the collection.\n *\n * @param {Rectangle} rectangle A Rectangle that should be checked against the rectangles in the collision checker.\n * @returns {boolean} Whether the rectangle collides with any of the rectangles in the collision checker.\n */\nRectangleCollisionChecker.prototype.collides = function (rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  //>>includeEnd('debug');\n\n  const withId = RectangleWithId.fromRectangleAndId(\"\", rectangle, collisionScratch);\n  return this._tree.collides(withId);\n};\nexport default RectangleCollisionChecker;","map":{"version":3,"names":["RBush","Check","RectangleCollisionChecker","_tree","RectangleWithId","minX","minY","maxX","maxY","id","fromRectangleAndId","rectangle","result","west","south","east","north","prototype","insert","typeOf","string","object","withId","idCompare","a","b","removalScratch","remove","collisionScratch","collides"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/RectangleCollisionChecker.js"],"sourcesContent":["import RBush from \"rbush\";\nimport Check from \"./Check.js\";\n\n/**\n * Wrapper around rbush for use with Rectangle types.\n * @private\n */\nfunction RectangleCollisionChecker() {\n  this._tree = new RBush();\n}\n\nfunction RectangleWithId() {\n  this.minX = 0.0;\n  this.minY = 0.0;\n  this.maxX = 0.0;\n  this.maxY = 0.0;\n  this.id = \"\";\n}\n\nRectangleWithId.fromRectangleAndId = function (id, rectangle, result) {\n  result.minX = rectangle.west;\n  result.minY = rectangle.south;\n  result.maxX = rectangle.east;\n  result.maxY = rectangle.north;\n  result.id = id;\n  return result;\n};\n\n/**\n * Insert a rectangle into the collision checker.\n *\n * @param {string} id Unique string ID for the rectangle being inserted.\n * @param {Rectangle} rectangle A Rectangle\n * @private\n */\nRectangleCollisionChecker.prototype.insert = function (id, rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"id\", id);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  //>>includeEnd('debug');\n\n  const withId = RectangleWithId.fromRectangleAndId(\n    id,\n    rectangle,\n    new RectangleWithId(),\n  );\n  this._tree.insert(withId);\n};\n\nfunction idCompare(a, b) {\n  return a.id === b.id;\n}\n\nconst removalScratch = new RectangleWithId();\n/**\n * Remove a rectangle from the collision checker.\n *\n * @param {string} id Unique string ID for the rectangle being removed.\n * @param {Rectangle} rectangle A Rectangle\n * @private\n */\nRectangleCollisionChecker.prototype.remove = function (id, rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"id\", id);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  //>>includeEnd('debug');\n\n  const withId = RectangleWithId.fromRectangleAndId(\n    id,\n    rectangle,\n    removalScratch,\n  );\n  this._tree.remove(withId, idCompare);\n};\n\nconst collisionScratch = new RectangleWithId();\n/**\n * Checks if a given rectangle collides with any of the rectangles in the collection.\n *\n * @param {Rectangle} rectangle A Rectangle that should be checked against the rectangles in the collision checker.\n * @returns {boolean} Whether the rectangle collides with any of the rectangles in the collision checker.\n */\nRectangleCollisionChecker.prototype.collides = function (rectangle) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  //>>includeEnd('debug');\n\n  const withId = RectangleWithId.fromRectangleAndId(\n    \"\",\n    rectangle,\n    collisionScratch,\n  );\n  return this._tree.collides(withId);\n};\nexport default RectangleCollisionChecker;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,YAAY;;AAE9B;AACA;AACA;AACA;AACA,SAASC,yBAAyBA,CAAA,EAAG;EACnC,IAAI,CAACC,KAAK,GAAG,IAAIH,KAAK,CAAC,CAAC;AAC1B;AAEA,SAASI,eAAeA,CAAA,EAAG;EACzB,IAAI,CAACC,IAAI,GAAG,GAAG;EACf,IAAI,CAACC,IAAI,GAAG,GAAG;EACf,IAAI,CAACC,IAAI,GAAG,GAAG;EACf,IAAI,CAACC,IAAI,GAAG,GAAG;EACf,IAAI,CAACC,EAAE,GAAG,EAAE;AACd;AAEAL,eAAe,CAACM,kBAAkB,GAAG,UAAUD,EAAE,EAAEE,SAAS,EAAEC,MAAM,EAAE;EACpEA,MAAM,CAACP,IAAI,GAAGM,SAAS,CAACE,IAAI;EAC5BD,MAAM,CAACN,IAAI,GAAGK,SAAS,CAACG,KAAK;EAC7BF,MAAM,CAACL,IAAI,GAAGI,SAAS,CAACI,IAAI;EAC5BH,MAAM,CAACJ,IAAI,GAAGG,SAAS,CAACK,KAAK;EAC7BJ,MAAM,CAACH,EAAE,GAAGA,EAAE;EACd,OAAOG,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,yBAAyB,CAACe,SAAS,CAACC,MAAM,GAAG,UAAUT,EAAE,EAAEE,SAAS,EAAE;EACpE;EACAV,KAAK,CAACkB,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEX,EAAE,CAAC;EAC7BR,KAAK,CAACkB,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEV,SAAS,CAAC;EAC3C;;EAEA,MAAMW,MAAM,GAAGlB,eAAe,CAACM,kBAAkB,CAC/CD,EAAE,EACFE,SAAS,EACT,IAAIP,eAAe,CAAC,CACtB,CAAC;EACD,IAAI,CAACD,KAAK,CAACe,MAAM,CAACI,MAAM,CAAC;AAC3B,CAAC;AAED,SAASC,SAASA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACvB,OAAOD,CAAC,CAACf,EAAE,KAAKgB,CAAC,CAAChB,EAAE;AACtB;AAEA,MAAMiB,cAAc,GAAG,IAAItB,eAAe,CAAC,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,yBAAyB,CAACe,SAAS,CAACU,MAAM,GAAG,UAAUlB,EAAE,EAAEE,SAAS,EAAE;EACpE;EACAV,KAAK,CAACkB,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEX,EAAE,CAAC;EAC7BR,KAAK,CAACkB,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEV,SAAS,CAAC;EAC3C;;EAEA,MAAMW,MAAM,GAAGlB,eAAe,CAACM,kBAAkB,CAC/CD,EAAE,EACFE,SAAS,EACTe,cACF,CAAC;EACD,IAAI,CAACvB,KAAK,CAACwB,MAAM,CAACL,MAAM,EAAEC,SAAS,CAAC;AACtC,CAAC;AAED,MAAMK,gBAAgB,GAAG,IAAIxB,eAAe,CAAC,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACAF,yBAAyB,CAACe,SAAS,CAACY,QAAQ,GAAG,UAAUlB,SAAS,EAAE;EAClE;EACAV,KAAK,CAACkB,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEV,SAAS,CAAC;EAC3C;;EAEA,MAAMW,MAAM,GAAGlB,eAAe,CAACM,kBAAkB,CAC/C,EAAE,EACFC,SAAS,EACTiB,gBACF,CAAC;EACD,OAAO,IAAI,CAACzB,KAAK,CAAC0B,QAAQ,CAACP,MAAM,CAAC;AACpC,CAAC;AACD,eAAepB,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}