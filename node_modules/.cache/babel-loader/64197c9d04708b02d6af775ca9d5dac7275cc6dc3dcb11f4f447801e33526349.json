{"ast":null,"code":"import Buffer from \"../../Renderer/Buffer.js\";\nimport BufferUsage from \"../../Renderer/BufferUsage.js\";\nimport Color from \"../../Core/Color.js\";\nimport ComponentDatatype from \"../../Core/ComponentDatatype.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\nimport ModelType from \"./ModelType.js\";\nimport ModelUtility from \"./ModelUtility.js\";\n\n/**\n * The picking pipeline stage is responsible for handling picking of primitives.\n *\n * @namespace PickingPipelineStage\n * @private\n */\nconst PickingPipelineStage = {\n  name: \"PickingPipelineStage\" // Helps with debugging\n};\n\n/**\n * Process a primitive. This modifies the following parts of the render resources:\n * <ul>\n *  <li>adds attribute and varying declaration for the pick color vertex attribute in the vertex shader for instanced meshes</li>\n *  <li>adds declaration for the pick color uniform for non-instanced meshes</li>\n *  <li>adds defines in the shader for when picking is enabled</li>\n *  <li>creates the pick ID objects in the context</li>\n * </ul>\n * @param {PrimitiveRenderResources} renderResources The render resources for this primitive.\n * @param {ModelComponents.Primitive} primitive The primitive.\n * @param {FrameState} frameState The frame state.\n */\nPickingPipelineStage.process = function (renderResources, primitive, frameState) {\n  const context = frameState.context;\n  const runtimeNode = renderResources.runtimeNode;\n  const shaderBuilder = renderResources.shaderBuilder;\n  const model = renderResources.model;\n  const instances = runtimeNode.node.instances;\n  if (renderResources.hasPropertyTable) {\n    processPickTexture(renderResources, primitive, instances, context);\n  } else if (defined(instances)) {\n    // For instanced meshes, a pick color vertex attribute is used.\n    processInstancedPickIds(renderResources, context);\n  } else {\n    // For non-instanced meshes, a pick color uniform is used.\n    const pickObject = buildPickObject(renderResources);\n    const pickId = context.createPickId(pickObject);\n    model._pipelineResources.push(pickId);\n    model._pickIds.push(pickId);\n    shaderBuilder.addUniform(\"vec4\", \"czm_pickColor\", ShaderDestination.FRAGMENT);\n    const uniformMap = renderResources.uniformMap;\n    uniformMap.czm_pickColor = function () {\n      return pickId.color;\n    };\n    renderResources.pickId = \"czm_pickColor\";\n  }\n};\n\n/**\n * @private\n */\nfunction buildPickObject(renderResources, instanceId) {\n  const model = renderResources.model;\n\n  // Primitives that wrap Model may define the pickObject differently.\n  if (defined(model.pickObject)) {\n    return model.pickObject;\n  }\n  const detailPickObject = {\n    model: model,\n    node: renderResources.runtimeNode,\n    primitive: renderResources.runtimePrimitive\n  };\n  let pickObject;\n  if (ModelType.is3DTiles(model.type)) {\n    // For 3D Tiles, the pick object's content and primitive are set to the Cesium3DTileContent that owns the model\n    // and the tileset it belongs to, respectively. The detail pick object is returned under the detail key.\n    const content = model.content;\n    pickObject = {\n      content: content,\n      primitive: content.tileset,\n      detail: detailPickObject\n    };\n  } else {\n    // For models, the model itself is returned as the primitive, with the detail pick object under the detail key.\n    pickObject = {\n      primitive: model,\n      detail: detailPickObject\n    };\n  }\n  pickObject.id = model.id;\n  if (defined(instanceId)) {\n    // For instanced models, an instanceId property is added to the pick object.\n    pickObject.instanceId = instanceId;\n  }\n  return pickObject;\n}\nfunction processPickTexture(renderResources, primitive, instances) {\n  const model = renderResources.model;\n  let featureTableId;\n  let featureIdAttribute;\n  const featureIdLabel = model.featureIdLabel;\n  const instanceFeatureIdLabel = model.instanceFeatureIdLabel;\n  if (defined(model.featureTableId)) {\n    // Extract the Feature Table ID from the Cesium3DTileContent.\n    featureTableId = model.featureTableId;\n  } else if (defined(instances)) {\n    // Extract the Feature Table ID from the instanced Feature ID attributes.\n    featureIdAttribute = ModelUtility.getFeatureIdsByLabel(instances.featureIds, instanceFeatureIdLabel);\n    featureTableId = featureIdAttribute.propertyTableId;\n  } else {\n    // Extract the Feature Table ID from the primitive Feature ID attributes.\n    featureIdAttribute = ModelUtility.getFeatureIdsByLabel(primitive.featureIds, featureIdLabel);\n    featureTableId = featureIdAttribute.propertyTableId;\n  }\n  const featureTable = model.featureTables[featureTableId];\n  const shaderBuilder = renderResources.shaderBuilder;\n  shaderBuilder.addUniform(\"sampler2D\", \"model_pickTexture\", ShaderDestination.FRAGMENT);\n  const batchTexture = featureTable.batchTexture;\n  renderResources.uniformMap.model_pickTexture = function () {\n    return defaultValue(batchTexture.pickTexture, batchTexture.defaultTexture);\n  };\n\n  // The feature ID is ignored if it is greater than the number of features.\n  renderResources.pickId = \"((selectedFeature.id < int(model_featuresLength)) ? texture(model_pickTexture, selectedFeature.st) : vec4(0.0))\";\n}\nfunction processInstancedPickIds(renderResources, context) {\n  const instanceCount = renderResources.instanceCount;\n  const pickIds = new Array(instanceCount);\n  const pickIdsTypedArray = new Uint8Array(instanceCount * 4);\n  const model = renderResources.model;\n  const pipelineResources = model._pipelineResources;\n  for (let i = 0; i < instanceCount; i++) {\n    const pickObject = buildPickObject(renderResources, i);\n    const pickId = context.createPickId(pickObject);\n    pipelineResources.push(pickId);\n    pickIds[i] = pickId;\n    const pickColor = pickId.color;\n    pickIdsTypedArray[i * 4 + 0] = Color.floatToByte(pickColor.red);\n    pickIdsTypedArray[i * 4 + 1] = Color.floatToByte(pickColor.green);\n    pickIdsTypedArray[i * 4 + 2] = Color.floatToByte(pickColor.blue);\n    pickIdsTypedArray[i * 4 + 3] = Color.floatToByte(pickColor.alpha);\n  }\n  model._pickIds = pickIds;\n  const pickIdsBuffer = Buffer.createVertexBuffer({\n    context: context,\n    typedArray: pickIdsTypedArray,\n    usage: BufferUsage.STATIC_DRAW\n  });\n  // Destruction of resources allocated by the Model\n  // is handled by Model.destroyPipelineResources().\n  pickIdsBuffer.vertexArrayDestroyable = false;\n  const hasCpuCopy = false;\n  model.statistics.addBuffer(pickIdsBuffer, hasCpuCopy);\n  pipelineResources.push(pickIdsBuffer);\n  const pickIdsVertexAttribute = {\n    index: renderResources.attributeIndex++,\n    vertexBuffer: pickIdsBuffer,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n    normalize: true,\n    offsetInBytes: 0,\n    strideInBytes: 0,\n    instanceDivisor: 1\n  };\n  renderResources.attributes.push(pickIdsVertexAttribute);\n  const shaderBuilder = renderResources.shaderBuilder;\n  shaderBuilder.addDefine(\"USE_PICKING\", undefined, ShaderDestination.BOTH);\n  shaderBuilder.addAttribute(\"vec4\", \"a_pickColor\");\n  shaderBuilder.addVarying(\"vec4\", \"v_pickColor\");\n  renderResources.pickId = \"v_pickColor\";\n}\nexport default PickingPipelineStage;","map":{"version":3,"names":["Buffer","BufferUsage","Color","ComponentDatatype","defaultValue","defined","ShaderDestination","ModelType","ModelUtility","PickingPipelineStage","name","process","renderResources","primitive","frameState","context","runtimeNode","shaderBuilder","model","instances","node","hasPropertyTable","processPickTexture","processInstancedPickIds","pickObject","buildPickObject","pickId","createPickId","_pipelineResources","push","_pickIds","addUniform","FRAGMENT","uniformMap","czm_pickColor","color","instanceId","detailPickObject","runtimePrimitive","is3DTiles","type","content","tileset","detail","id","featureTableId","featureIdAttribute","featureIdLabel","instanceFeatureIdLabel","getFeatureIdsByLabel","featureIds","propertyTableId","featureTable","featureTables","batchTexture","model_pickTexture","pickTexture","defaultTexture","instanceCount","pickIds","Array","pickIdsTypedArray","Uint8Array","pipelineResources","i","pickColor","floatToByte","red","green","blue","alpha","pickIdsBuffer","createVertexBuffer","typedArray","usage","STATIC_DRAW","vertexArrayDestroyable","hasCpuCopy","statistics","addBuffer","pickIdsVertexAttribute","index","attributeIndex","vertexBuffer","componentsPerAttribute","componentDatatype","UNSIGNED_BYTE","normalize","offsetInBytes","strideInBytes","instanceDivisor","attributes","addDefine","undefined","BOTH","addAttribute","addVarying"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/PickingPipelineStage.js"],"sourcesContent":["import Buffer from \"../../Renderer/Buffer.js\";\nimport BufferUsage from \"../../Renderer/BufferUsage.js\";\nimport Color from \"../../Core/Color.js\";\nimport ComponentDatatype from \"../../Core/ComponentDatatype.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\nimport ModelType from \"./ModelType.js\";\nimport ModelUtility from \"./ModelUtility.js\";\n\n/**\n * The picking pipeline stage is responsible for handling picking of primitives.\n *\n * @namespace PickingPipelineStage\n * @private\n */\nconst PickingPipelineStage = {\n  name: \"PickingPipelineStage\", // Helps with debugging\n};\n\n/**\n * Process a primitive. This modifies the following parts of the render resources:\n * <ul>\n *  <li>adds attribute and varying declaration for the pick color vertex attribute in the vertex shader for instanced meshes</li>\n *  <li>adds declaration for the pick color uniform for non-instanced meshes</li>\n *  <li>adds defines in the shader for when picking is enabled</li>\n *  <li>creates the pick ID objects in the context</li>\n * </ul>\n * @param {PrimitiveRenderResources} renderResources The render resources for this primitive.\n * @param {ModelComponents.Primitive} primitive The primitive.\n * @param {FrameState} frameState The frame state.\n */\nPickingPipelineStage.process = function (\n  renderResources,\n  primitive,\n  frameState,\n) {\n  const context = frameState.context;\n  const runtimeNode = renderResources.runtimeNode;\n  const shaderBuilder = renderResources.shaderBuilder;\n  const model = renderResources.model;\n  const instances = runtimeNode.node.instances;\n\n  if (renderResources.hasPropertyTable) {\n    processPickTexture(renderResources, primitive, instances, context);\n  } else if (defined(instances)) {\n    // For instanced meshes, a pick color vertex attribute is used.\n    processInstancedPickIds(renderResources, context);\n  } else {\n    // For non-instanced meshes, a pick color uniform is used.\n    const pickObject = buildPickObject(renderResources);\n\n    const pickId = context.createPickId(pickObject);\n    model._pipelineResources.push(pickId);\n    model._pickIds.push(pickId);\n\n    shaderBuilder.addUniform(\n      \"vec4\",\n      \"czm_pickColor\",\n      ShaderDestination.FRAGMENT,\n    );\n\n    const uniformMap = renderResources.uniformMap;\n    uniformMap.czm_pickColor = function () {\n      return pickId.color;\n    };\n\n    renderResources.pickId = \"czm_pickColor\";\n  }\n};\n\n/**\n * @private\n */\nfunction buildPickObject(renderResources, instanceId) {\n  const model = renderResources.model;\n\n  // Primitives that wrap Model may define the pickObject differently.\n  if (defined(model.pickObject)) {\n    return model.pickObject;\n  }\n\n  const detailPickObject = {\n    model: model,\n    node: renderResources.runtimeNode,\n    primitive: renderResources.runtimePrimitive,\n  };\n\n  let pickObject;\n\n  if (ModelType.is3DTiles(model.type)) {\n    // For 3D Tiles, the pick object's content and primitive are set to the Cesium3DTileContent that owns the model\n    // and the tileset it belongs to, respectively. The detail pick object is returned under the detail key.\n    const content = model.content;\n    pickObject = {\n      content: content,\n      primitive: content.tileset,\n      detail: detailPickObject,\n    };\n  } else {\n    // For models, the model itself is returned as the primitive, with the detail pick object under the detail key.\n    pickObject = {\n      primitive: model,\n      detail: detailPickObject,\n    };\n  }\n\n  pickObject.id = model.id;\n\n  if (defined(instanceId)) {\n    // For instanced models, an instanceId property is added to the pick object.\n    pickObject.instanceId = instanceId;\n  }\n\n  return pickObject;\n}\n\nfunction processPickTexture(renderResources, primitive, instances) {\n  const model = renderResources.model;\n  let featureTableId;\n  let featureIdAttribute;\n  const featureIdLabel = model.featureIdLabel;\n  const instanceFeatureIdLabel = model.instanceFeatureIdLabel;\n\n  if (defined(model.featureTableId)) {\n    // Extract the Feature Table ID from the Cesium3DTileContent.\n    featureTableId = model.featureTableId;\n  } else if (defined(instances)) {\n    // Extract the Feature Table ID from the instanced Feature ID attributes.\n    featureIdAttribute = ModelUtility.getFeatureIdsByLabel(\n      instances.featureIds,\n      instanceFeatureIdLabel,\n    );\n    featureTableId = featureIdAttribute.propertyTableId;\n  } else {\n    // Extract the Feature Table ID from the primitive Feature ID attributes.\n    featureIdAttribute = ModelUtility.getFeatureIdsByLabel(\n      primitive.featureIds,\n      featureIdLabel,\n    );\n    featureTableId = featureIdAttribute.propertyTableId;\n  }\n\n  const featureTable = model.featureTables[featureTableId];\n\n  const shaderBuilder = renderResources.shaderBuilder;\n  shaderBuilder.addUniform(\n    \"sampler2D\",\n    \"model_pickTexture\",\n    ShaderDestination.FRAGMENT,\n  );\n\n  const batchTexture = featureTable.batchTexture;\n  renderResources.uniformMap.model_pickTexture = function () {\n    return defaultValue(batchTexture.pickTexture, batchTexture.defaultTexture);\n  };\n\n  // The feature ID is ignored if it is greater than the number of features.\n  renderResources.pickId =\n    \"((selectedFeature.id < int(model_featuresLength)) ? texture(model_pickTexture, selectedFeature.st) : vec4(0.0))\";\n}\n\nfunction processInstancedPickIds(renderResources, context) {\n  const instanceCount = renderResources.instanceCount;\n  const pickIds = new Array(instanceCount);\n  const pickIdsTypedArray = new Uint8Array(instanceCount * 4);\n\n  const model = renderResources.model;\n\n  const pipelineResources = model._pipelineResources;\n  for (let i = 0; i < instanceCount; i++) {\n    const pickObject = buildPickObject(renderResources, i);\n\n    const pickId = context.createPickId(pickObject);\n    pipelineResources.push(pickId);\n    pickIds[i] = pickId;\n\n    const pickColor = pickId.color;\n    pickIdsTypedArray[i * 4 + 0] = Color.floatToByte(pickColor.red);\n    pickIdsTypedArray[i * 4 + 1] = Color.floatToByte(pickColor.green);\n    pickIdsTypedArray[i * 4 + 2] = Color.floatToByte(pickColor.blue);\n    pickIdsTypedArray[i * 4 + 3] = Color.floatToByte(pickColor.alpha);\n  }\n\n  model._pickIds = pickIds;\n\n  const pickIdsBuffer = Buffer.createVertexBuffer({\n    context: context,\n    typedArray: pickIdsTypedArray,\n    usage: BufferUsage.STATIC_DRAW,\n  });\n  // Destruction of resources allocated by the Model\n  // is handled by Model.destroyPipelineResources().\n  pickIdsBuffer.vertexArrayDestroyable = false;\n  const hasCpuCopy = false;\n  model.statistics.addBuffer(pickIdsBuffer, hasCpuCopy);\n  pipelineResources.push(pickIdsBuffer);\n\n  const pickIdsVertexAttribute = {\n    index: renderResources.attributeIndex++,\n    vertexBuffer: pickIdsBuffer,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n    normalize: true,\n    offsetInBytes: 0,\n    strideInBytes: 0,\n    instanceDivisor: 1,\n  };\n\n  renderResources.attributes.push(pickIdsVertexAttribute);\n\n  const shaderBuilder = renderResources.shaderBuilder;\n  shaderBuilder.addDefine(\"USE_PICKING\", undefined, ShaderDestination.BOTH);\n  shaderBuilder.addAttribute(\"vec4\", \"a_pickColor\");\n  shaderBuilder.addVarying(\"vec4\", \"v_pickColor\");\n  renderResources.pickId = \"v_pickColor\";\n}\n\nexport default PickingPipelineStage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}