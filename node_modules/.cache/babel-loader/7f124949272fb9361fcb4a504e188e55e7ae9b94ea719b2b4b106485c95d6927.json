{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport PolylineVolumeGeometry from \"../Core/PolylineVolumeGeometry.js\";\nimport PolylineVolumeOutlineGeometry from \"../Core/PolylineVolumeOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\nconst scratchColor = new Color();\nfunction PolylineVolumeGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.polylinePositions = undefined;\n  this.shapePositions = undefined;\n  this.cornerType = undefined;\n  this.granularity = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for polyline volumes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PolylineVolumeGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PolylineVolumeGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PolylineVolumeGeometryOptions(entity),\n    geometryPropertyName: \"polylineVolume\",\n    observedPropertyNames: [\"availability\", \"polylineVolume\"]\n  });\n  this._onEntityPropertyChanged(entity, \"polylineVolume\", entity.polylineVolume, undefined);\n}\nif (defined(Object.create)) {\n  PolylineVolumeGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  PolylineVolumeGeometryUpdater.prototype.constructor = PolylineVolumeGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPolylineVolumeGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\"This instance does not represent a filled geometry.\");\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  let attributes;\n  let color;\n  const show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n  const distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute\n    };\n  }\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PolylineVolumeGeometry(this._options),\n    attributes: attributes\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPolylineVolumeGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\"This instance does not represent an outlined geometry.\");\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PolylineVolumeOutlineGeometry(this._options),\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n    }\n  });\n};\nPolylineVolumeGeometryUpdater.prototype._isHidden = function (entity, polylineVolume) {\n  return !defined(polylineVolume.positions) || !defined(polylineVolume.shape) || GeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume);\n};\nPolylineVolumeGeometryUpdater.prototype._isDynamic = function (entity, polylineVolume) {\n  return !polylineVolume.positions.isConstant ||\n  //\n  !polylineVolume.shape.isConstant ||\n  //\n  !Property.isConstant(polylineVolume.granularity) ||\n  //\n  !Property.isConstant(polylineVolume.outlineWidth) ||\n  //\n  !Property.isConstant(polylineVolume.cornerType);\n};\nPolylineVolumeGeometryUpdater.prototype._setStaticOptions = function (entity, polylineVolume) {\n  const granularity = polylineVolume.granularity;\n  const cornerType = polylineVolume.cornerType;\n  const options = this._options;\n  const isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n  options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.polylinePositions = polylineVolume.positions.getValue(Iso8601.MINIMUM_VALUE, options.polylinePositions);\n  options.shapePositions = polylineVolume.shape.getValue(Iso8601.MINIMUM_VALUE, options.shape);\n  options.granularity = defined(granularity) ? granularity.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n  options.cornerType = defined(cornerType) ? cornerType.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n};\nPolylineVolumeGeometryUpdater.DynamicGeometryUpdater = DynamicPolylineVolumeGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicPolylineVolumeGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n  DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n}\nif (defined(Object.create)) {\n  DynamicPolylineVolumeGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n  DynamicPolylineVolumeGeometryUpdater.prototype.constructor = DynamicPolylineVolumeGeometryUpdater;\n}\nDynamicPolylineVolumeGeometryUpdater.prototype._isHidden = function (entity, polylineVolume, time) {\n  const options = this._options;\n  return !defined(options.polylinePositions) || !defined(options.shapePositions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume, time);\n};\nDynamicPolylineVolumeGeometryUpdater.prototype._setOptions = function (entity, polylineVolume, time) {\n  const options = this._options;\n  options.polylinePositions = Property.getValueOrUndefined(polylineVolume.positions, time, options.polylinePositions);\n  options.shapePositions = Property.getValueOrUndefined(polylineVolume.shape, time);\n  options.granularity = Property.getValueOrUndefined(polylineVolume.granularity, time);\n  options.cornerType = Property.getValueOrUndefined(polylineVolume.cornerType, time);\n};\nexport default PolylineVolumeGeometryUpdater;","map":{"version":3,"names":["Check","Color","ColorGeometryInstanceAttribute","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","GeometryInstance","Iso8601","PolylineVolumeGeometry","PolylineVolumeOutlineGeometry","ShowGeometryInstanceAttribute","MaterialAppearance","PerInstanceColorAppearance","ColorMaterialProperty","DynamicGeometryUpdater","GeometryUpdater","Property","scratchColor","PolylineVolumeGeometryOptions","entity","id","vertexFormat","undefined","polylinePositions","shapePositions","cornerType","granularity","PolylineVolumeGeometryUpdater","scene","call","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","polylineVolume","Object","create","prototype","constructor","createFillGeometryInstance","time","_fillEnabled","_entity","isAvailable","attributes","color","show","isShowing","_showProperty","getValue","_fillProperty","distanceDisplayCondition","_distanceDisplayConditionProperty","distanceDisplayConditionAttribute","fromDistanceDisplayCondition","_materialProperty","currentColor","isConstant","WHITE","fromColor","geometry","_options","createOutlineGeometryInstance","_outlineEnabled","outlineColor","getValueOrDefault","_outlineColorProperty","BLACK","_showOutlineProperty","_isHidden","positions","shape","_isDynamic","outlineWidth","_setStaticOptions","options","isColorMaterial","VERTEX_FORMAT","MaterialSupport","TEXTURED","MINIMUM_VALUE","DynamicPolylineVolumeGeometryUpdater","geometryUpdater","primitives","groundPrimitives","_setOptions","getValueOrUndefined"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/PolylineVolumeGeometryUpdater.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport PolylineVolumeGeometry from \"../Core/PolylineVolumeGeometry.js\";\nimport PolylineVolumeOutlineGeometry from \"../Core/PolylineVolumeOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nconst scratchColor = new Color();\n\nfunction PolylineVolumeGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.polylinePositions = undefined;\n  this.shapePositions = undefined;\n  this.cornerType = undefined;\n  this.granularity = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for polyline volumes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PolylineVolumeGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PolylineVolumeGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PolylineVolumeGeometryOptions(entity),\n    geometryPropertyName: \"polylineVolume\",\n    observedPropertyNames: [\"availability\", \"polylineVolume\"],\n  });\n\n  this._onEntityPropertyChanged(\n    entity,\n    \"polylineVolume\",\n    entity.polylineVolume,\n    undefined,\n  );\n}\n\nif (defined(Object.create)) {\n  PolylineVolumeGeometryUpdater.prototype = Object.create(\n    GeometryUpdater.prototype,\n  );\n  PolylineVolumeGeometryUpdater.prototype.constructor =\n    PolylineVolumeGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPolylineVolumeGeometryUpdater.prototype.createFillGeometryInstance = function (\n  time,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  let attributes;\n\n  let color;\n  const show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time),\n  );\n  const distanceDisplayCondition =\n    this._distanceDisplayConditionProperty.getValue(time);\n  const distanceDisplayConditionAttribute =\n    DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition,\n    );\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color,\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n    };\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PolylineVolumeGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPolylineVolumeGeometryUpdater.prototype.createOutlineGeometryInstance =\n  function (time) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.defined(\"time\", time);\n\n    if (!this._outlineEnabled) {\n      throw new DeveloperError(\n        \"This instance does not represent an outlined geometry.\",\n      );\n    }\n    //>>includeEnd('debug');\n\n    const entity = this._entity;\n    const isAvailable = entity.isAvailable(time);\n    const outlineColor = Property.getValueOrDefault(\n      this._outlineColorProperty,\n      time,\n      Color.BLACK,\n      scratchColor,\n    );\n    const distanceDisplayCondition =\n      this._distanceDisplayConditionProperty.getValue(time);\n\n    return new GeometryInstance({\n      id: entity,\n      geometry: new PolylineVolumeOutlineGeometry(this._options),\n      attributes: {\n        show: new ShowGeometryInstanceAttribute(\n          isAvailable &&\n            entity.isShowing &&\n            this._showProperty.getValue(time) &&\n            this._showOutlineProperty.getValue(time),\n        ),\n        color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n        distanceDisplayCondition:\n          DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n            distanceDisplayCondition,\n          ),\n      },\n    });\n  };\n\nPolylineVolumeGeometryUpdater.prototype._isHidden = function (\n  entity,\n  polylineVolume,\n) {\n  return (\n    !defined(polylineVolume.positions) ||\n    !defined(polylineVolume.shape) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume)\n  );\n};\n\nPolylineVolumeGeometryUpdater.prototype._isDynamic = function (\n  entity,\n  polylineVolume,\n) {\n  return (\n    !polylineVolume.positions.isConstant || //\n    !polylineVolume.shape.isConstant || //\n    !Property.isConstant(polylineVolume.granularity) || //\n    !Property.isConstant(polylineVolume.outlineWidth) || //\n    !Property.isConstant(polylineVolume.cornerType)\n  );\n};\n\nPolylineVolumeGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  polylineVolume,\n) {\n  const granularity = polylineVolume.granularity;\n  const cornerType = polylineVolume.cornerType;\n\n  const options = this._options;\n  const isColorMaterial =\n    this._materialProperty instanceof ColorMaterialProperty;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.polylinePositions = polylineVolume.positions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.polylinePositions,\n  );\n  options.shapePositions = polylineVolume.shape.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.shape,\n  );\n  options.granularity = defined(granularity)\n    ? granularity.getValue(Iso8601.MINIMUM_VALUE)\n    : undefined;\n  options.cornerType = defined(cornerType)\n    ? cornerType.getValue(Iso8601.MINIMUM_VALUE)\n    : undefined;\n};\n\nPolylineVolumeGeometryUpdater.DynamicGeometryUpdater =\n  DynamicPolylineVolumeGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicPolylineVolumeGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives,\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives,\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicPolylineVolumeGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype,\n  );\n  DynamicPolylineVolumeGeometryUpdater.prototype.constructor =\n    DynamicPolylineVolumeGeometryUpdater;\n}\n\nDynamicPolylineVolumeGeometryUpdater.prototype._isHidden = function (\n  entity,\n  polylineVolume,\n  time,\n) {\n  const options = this._options;\n  return (\n    !defined(options.polylinePositions) ||\n    !defined(options.shapePositions) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(\n      this,\n      entity,\n      polylineVolume,\n      time,\n    )\n  );\n};\n\nDynamicPolylineVolumeGeometryUpdater.prototype._setOptions = function (\n  entity,\n  polylineVolume,\n  time,\n) {\n  const options = this._options;\n  options.polylinePositions = Property.getValueOrUndefined(\n    polylineVolume.positions,\n    time,\n    options.polylinePositions,\n  );\n  options.shapePositions = Property.getValueOrUndefined(\n    polylineVolume.shape,\n    time,\n  );\n  options.granularity = Property.getValueOrUndefined(\n    polylineVolume.granularity,\n    time,\n  );\n  options.cornerType = Property.getValueOrUndefined(\n    polylineVolume.cornerType,\n    time,\n  );\n};\nexport default PolylineVolumeGeometryUpdater;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}