{"ast":null,"code":"import BatchTexture from \"../BatchTexture.js\";\nimport Cesium3DTileFeature from \"../Cesium3DTileFeature.js\";\nimport Check from \"../../Core/Check.js\";\nimport Color from \"../../Core/Color.js\";\nimport defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport ModelFeature from \"./ModelFeature.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport StyleCommandsNeeded from \"./StyleCommandsNeeded.js\";\nimport ModelType from \"./ModelType.js\";\n\n/**\n * Manages the {@link ModelFeature}s in a {@link Model}.\n * Extracts the properties from a {@link PropertyTable}.\n *\n * @param {object} options An object containing the following options:\n * @param {Model} options.model The model that owns this feature table.\n * @param {PropertyTable} options.propertyTable The property table from the model used to initialize the model.\n *\n * @alias ModelFeatureTable\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction ModelFeatureTable(options) {\n  const model = options.model;\n  const propertyTable = options.propertyTable;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"propertyTable\", propertyTable);\n  Check.typeOf.object(\"model\", model);\n  //>>includeEnd('debug');\n\n  this._propertyTable = propertyTable;\n  this._model = model;\n  this._features = undefined;\n  this._featuresLength = 0;\n  this._batchTexture = undefined;\n  this._styleCommandsNeededDirty = false;\n  this._styleCommandsNeeded = StyleCommandsNeeded.ALL_OPAQUE;\n  initialize(this);\n}\nObject.defineProperties(ModelFeatureTable.prototype, {\n  /**\n   * The batch texture created for the features in this table.\n   *\n   * @memberof ModelFeatureTable.prototype\n   *\n   * @type {BatchTexture}\n   * @readonly\n   *\n   * @private\n   */\n  batchTexture: {\n    get: function () {\n      return this._batchTexture;\n    }\n  },\n  /**\n   * The number of features in this table.\n   *\n   * @memberof ModelFeatureTable.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  featuresLength: {\n    get: function () {\n      return this._featuresLength;\n    }\n  },\n  /**\n   * Size of the batch texture. This does not count the property table size\n   * as that is counted separately through StructuralMetadata.\n   *\n   * @memberof ModelFeatureTable.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  batchTextureByteLength: {\n    get: function () {\n      if (defined(this._batchTexture)) {\n        return this._batchTexture.byteLength;\n      }\n      return 0;\n    }\n  },\n  /**\n   * A flag to indicate whether or not the types of style commands needed by this feature table have changed.\n   *\n   * @memberof ModelFeatureTable.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @private\n   */\n  styleCommandsNeededDirty: {\n    get: function () {\n      return this._styleCommandsNeededDirty;\n    }\n  }\n});\nfunction initialize(modelFeatureTable) {\n  const model = modelFeatureTable._model;\n  const is3DTiles = ModelType.is3DTiles(model.type);\n  const featuresLength = modelFeatureTable._propertyTable.count;\n  if (featuresLength === 0) {\n    return;\n  }\n  let i;\n  const features = new Array(featuresLength);\n  if (is3DTiles) {\n    const content = model.content;\n    for (i = 0; i < featuresLength; i++) {\n      features[i] = new Cesium3DTileFeature(content, i);\n    }\n  } else {\n    for (i = 0; i < featuresLength; i++) {\n      features[i] = new ModelFeature({\n        model: model,\n        featureId: i,\n        featureTable: modelFeatureTable\n      });\n    }\n  }\n  modelFeatureTable._features = features;\n  modelFeatureTable._featuresLength = featuresLength;\n  modelFeatureTable._batchTexture = new BatchTexture({\n    featuresLength: featuresLength,\n    owner: modelFeatureTable,\n    statistics: is3DTiles ? model.content.tileset.statistics : undefined\n  });\n}\n\n/**\n * Creates/updates the batch texture.\n *\n * @param {FrameState} frameState The frame state.\n *\n * @private\n */\nModelFeatureTable.prototype.update = function (frameState) {\n  // Assume the number of translucent features has not changed.\n  this._styleCommandsNeededDirty = false;\n  this._batchTexture.update(undefined, frameState);\n  const currentStyleCommandsNeeded = StyleCommandsNeeded.getStyleCommandsNeeded(this._featuresLength, this._batchTexture.translucentFeaturesLength);\n  if (this._styleCommandsNeeded !== currentStyleCommandsNeeded) {\n    this._styleCommandsNeededDirty = true;\n    this._styleCommandsNeeded = currentStyleCommandsNeeded;\n  }\n};\nModelFeatureTable.prototype.setShow = function (featureId, show) {\n  this._batchTexture.setShow(featureId, show);\n};\nModelFeatureTable.prototype.setAllShow = function (show) {\n  this._batchTexture.setAllShow(show);\n};\nModelFeatureTable.prototype.getShow = function (featureId) {\n  return this._batchTexture.getShow(featureId);\n};\nModelFeatureTable.prototype.setColor = function (featureId, color) {\n  this._batchTexture.setColor(featureId, color);\n};\nModelFeatureTable.prototype.setAllColor = function (color) {\n  this._batchTexture.setAllColor(color);\n};\nModelFeatureTable.prototype.getColor = function (featureId, result) {\n  return this._batchTexture.getColor(featureId, result);\n};\nModelFeatureTable.prototype.getPickColor = function (featureId) {\n  return this._batchTexture.getPickColor(featureId);\n};\nModelFeatureTable.prototype.getFeature = function (featureId) {\n  return this._features[featureId];\n};\nModelFeatureTable.prototype.hasProperty = function (featureId, propertyName) {\n  return this._propertyTable.hasProperty(featureId, propertyName);\n};\nModelFeatureTable.prototype.hasPropertyBySemantic = function (featureId, propertyName) {\n  return this._propertyTable.hasPropertyBySemantic(featureId, propertyName);\n};\nModelFeatureTable.prototype.getProperty = function (featureId, name) {\n  return this._propertyTable.getProperty(featureId, name);\n};\nModelFeatureTable.prototype.getPropertyBySemantic = function (featureId, semantic) {\n  return this._propertyTable.getPropertyBySemantic(featureId, semantic);\n};\nModelFeatureTable.prototype.getPropertyIds = function (results) {\n  return this._propertyTable.getPropertyIds(results);\n};\nModelFeatureTable.prototype.setProperty = function (featureId, name, value) {\n  return this._propertyTable.setProperty(featureId, name, value);\n};\nModelFeatureTable.prototype.isClass = function (featureId, className) {\n  return this._propertyTable.isClass(featureId, className);\n};\nModelFeatureTable.prototype.isExactClass = function (featureId, className) {\n  return this._propertyTable.isExactClass(featureId, className);\n};\nModelFeatureTable.prototype.getExactClassName = function (featureId) {\n  return this._propertyTable.getExactClassName(featureId);\n};\nconst scratchColor = new Color();\n/**\n * @private\n */\nModelFeatureTable.prototype.applyStyle = function (style) {\n  if (!defined(style)) {\n    this.setAllColor(BatchTexture.DEFAULT_COLOR_VALUE);\n    this.setAllShow(BatchTexture.DEFAULT_SHOW_VALUE);\n    return;\n  }\n  for (let i = 0; i < this._featuresLength; i++) {\n    const feature = this.getFeature(i);\n    const color = defined(style.color) ? defaultValue(style.color.evaluateColor(feature, scratchColor), BatchTexture.DEFAULT_COLOR_VALUE) : BatchTexture.DEFAULT_COLOR_VALUE;\n    const show = defined(style.show) ? defaultValue(style.show.evaluate(feature), BatchTexture.DEFAULT_SHOW_VALUE) : BatchTexture.DEFAULT_SHOW_VALUE;\n    this.setColor(i, color);\n    this.setShow(i, show);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ModelFeatureTable#destroy\n * @private\n */\nModelFeatureTable.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * e = e && e.destroy();\n *\n * @see ModelFeatureTable#isDestroyed\n * @private\n */\nModelFeatureTable.prototype.destroy = function (frameState) {\n  this._batchTexture = this._batchTexture && this._batchTexture.destroy();\n  destroyObject(this);\n};\nexport default ModelFeatureTable;","map":{"version":3,"names":["BatchTexture","Cesium3DTileFeature","Check","Color","defined","destroyObject","ModelFeature","defaultValue","StyleCommandsNeeded","ModelType","ModelFeatureTable","options","model","propertyTable","typeOf","object","_propertyTable","_model","_features","undefined","_featuresLength","_batchTexture","_styleCommandsNeededDirty","_styleCommandsNeeded","ALL_OPAQUE","initialize","Object","defineProperties","prototype","batchTexture","get","featuresLength","batchTextureByteLength","byteLength","styleCommandsNeededDirty","modelFeatureTable","is3DTiles","type","count","i","features","Array","content","featureId","featureTable","owner","statistics","tileset","update","frameState","currentStyleCommandsNeeded","getStyleCommandsNeeded","translucentFeaturesLength","setShow","show","setAllShow","getShow","setColor","color","setAllColor","getColor","result","getPickColor","getFeature","hasProperty","propertyName","hasPropertyBySemantic","getProperty","name","getPropertyBySemantic","semantic","getPropertyIds","results","setProperty","value","isClass","className","isExactClass","getExactClassName","scratchColor","applyStyle","style","DEFAULT_COLOR_VALUE","DEFAULT_SHOW_VALUE","feature","evaluateColor","evaluate","isDestroyed","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/ModelFeatureTable.js"],"sourcesContent":["import BatchTexture from \"../BatchTexture.js\";\nimport Cesium3DTileFeature from \"../Cesium3DTileFeature.js\";\nimport Check from \"../../Core/Check.js\";\nimport Color from \"../../Core/Color.js\";\nimport defined from \"../../Core/defined.js\";\nimport destroyObject from \"../../Core/destroyObject.js\";\nimport ModelFeature from \"./ModelFeature.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport StyleCommandsNeeded from \"./StyleCommandsNeeded.js\";\nimport ModelType from \"./ModelType.js\";\n\n/**\n * Manages the {@link ModelFeature}s in a {@link Model}.\n * Extracts the properties from a {@link PropertyTable}.\n *\n * @param {object} options An object containing the following options:\n * @param {Model} options.model The model that owns this feature table.\n * @param {PropertyTable} options.propertyTable The property table from the model used to initialize the model.\n *\n * @alias ModelFeatureTable\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction ModelFeatureTable(options) {\n  const model = options.model;\n  const propertyTable = options.propertyTable;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"propertyTable\", propertyTable);\n  Check.typeOf.object(\"model\", model);\n  //>>includeEnd('debug');\n\n  this._propertyTable = propertyTable;\n  this._model = model;\n\n  this._features = undefined;\n  this._featuresLength = 0;\n\n  this._batchTexture = undefined;\n\n  this._styleCommandsNeededDirty = false;\n  this._styleCommandsNeeded = StyleCommandsNeeded.ALL_OPAQUE;\n\n  initialize(this);\n}\n\nObject.defineProperties(ModelFeatureTable.prototype, {\n  /**\n   * The batch texture created for the features in this table.\n   *\n   * @memberof ModelFeatureTable.prototype\n   *\n   * @type {BatchTexture}\n   * @readonly\n   *\n   * @private\n   */\n  batchTexture: {\n    get: function () {\n      return this._batchTexture;\n    },\n  },\n\n  /**\n   * The number of features in this table.\n   *\n   * @memberof ModelFeatureTable.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  featuresLength: {\n    get: function () {\n      return this._featuresLength;\n    },\n  },\n\n  /**\n   * Size of the batch texture. This does not count the property table size\n   * as that is counted separately through StructuralMetadata.\n   *\n   * @memberof ModelFeatureTable.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  batchTextureByteLength: {\n    get: function () {\n      if (defined(this._batchTexture)) {\n        return this._batchTexture.byteLength;\n      }\n\n      return 0;\n    },\n  },\n\n  /**\n   * A flag to indicate whether or not the types of style commands needed by this feature table have changed.\n   *\n   * @memberof ModelFeatureTable.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @private\n   */\n  styleCommandsNeededDirty: {\n    get: function () {\n      return this._styleCommandsNeededDirty;\n    },\n  },\n});\n\nfunction initialize(modelFeatureTable) {\n  const model = modelFeatureTable._model;\n  const is3DTiles = ModelType.is3DTiles(model.type);\n\n  const featuresLength = modelFeatureTable._propertyTable.count;\n  if (featuresLength === 0) {\n    return;\n  }\n\n  let i;\n  const features = new Array(featuresLength);\n  if (is3DTiles) {\n    const content = model.content;\n    for (i = 0; i < featuresLength; i++) {\n      features[i] = new Cesium3DTileFeature(content, i);\n    }\n  } else {\n    for (i = 0; i < featuresLength; i++) {\n      features[i] = new ModelFeature({\n        model: model,\n        featureId: i,\n        featureTable: modelFeatureTable,\n      });\n    }\n  }\n\n  modelFeatureTable._features = features;\n  modelFeatureTable._featuresLength = featuresLength;\n\n  modelFeatureTable._batchTexture = new BatchTexture({\n    featuresLength: featuresLength,\n    owner: modelFeatureTable,\n    statistics: is3DTiles ? model.content.tileset.statistics : undefined,\n  });\n}\n\n/**\n * Creates/updates the batch texture.\n *\n * @param {FrameState} frameState The frame state.\n *\n * @private\n */\nModelFeatureTable.prototype.update = function (frameState) {\n  // Assume the number of translucent features has not changed.\n  this._styleCommandsNeededDirty = false;\n  this._batchTexture.update(undefined, frameState);\n\n  const currentStyleCommandsNeeded = StyleCommandsNeeded.getStyleCommandsNeeded(\n    this._featuresLength,\n    this._batchTexture.translucentFeaturesLength,\n  );\n\n  if (this._styleCommandsNeeded !== currentStyleCommandsNeeded) {\n    this._styleCommandsNeededDirty = true;\n    this._styleCommandsNeeded = currentStyleCommandsNeeded;\n  }\n};\n\nModelFeatureTable.prototype.setShow = function (featureId, show) {\n  this._batchTexture.setShow(featureId, show);\n};\n\nModelFeatureTable.prototype.setAllShow = function (show) {\n  this._batchTexture.setAllShow(show);\n};\n\nModelFeatureTable.prototype.getShow = function (featureId) {\n  return this._batchTexture.getShow(featureId);\n};\n\nModelFeatureTable.prototype.setColor = function (featureId, color) {\n  this._batchTexture.setColor(featureId, color);\n};\n\nModelFeatureTable.prototype.setAllColor = function (color) {\n  this._batchTexture.setAllColor(color);\n};\n\nModelFeatureTable.prototype.getColor = function (featureId, result) {\n  return this._batchTexture.getColor(featureId, result);\n};\n\nModelFeatureTable.prototype.getPickColor = function (featureId) {\n  return this._batchTexture.getPickColor(featureId);\n};\n\nModelFeatureTable.prototype.getFeature = function (featureId) {\n  return this._features[featureId];\n};\n\nModelFeatureTable.prototype.hasProperty = function (featureId, propertyName) {\n  return this._propertyTable.hasProperty(featureId, propertyName);\n};\n\nModelFeatureTable.prototype.hasPropertyBySemantic = function (\n  featureId,\n  propertyName,\n) {\n  return this._propertyTable.hasPropertyBySemantic(featureId, propertyName);\n};\n\nModelFeatureTable.prototype.getProperty = function (featureId, name) {\n  return this._propertyTable.getProperty(featureId, name);\n};\n\nModelFeatureTable.prototype.getPropertyBySemantic = function (\n  featureId,\n  semantic,\n) {\n  return this._propertyTable.getPropertyBySemantic(featureId, semantic);\n};\n\nModelFeatureTable.prototype.getPropertyIds = function (results) {\n  return this._propertyTable.getPropertyIds(results);\n};\n\nModelFeatureTable.prototype.setProperty = function (featureId, name, value) {\n  return this._propertyTable.setProperty(featureId, name, value);\n};\n\nModelFeatureTable.prototype.isClass = function (featureId, className) {\n  return this._propertyTable.isClass(featureId, className);\n};\n\nModelFeatureTable.prototype.isExactClass = function (featureId, className) {\n  return this._propertyTable.isExactClass(featureId, className);\n};\n\nModelFeatureTable.prototype.getExactClassName = function (featureId) {\n  return this._propertyTable.getExactClassName(featureId);\n};\n\nconst scratchColor = new Color();\n/**\n * @private\n */\nModelFeatureTable.prototype.applyStyle = function (style) {\n  if (!defined(style)) {\n    this.setAllColor(BatchTexture.DEFAULT_COLOR_VALUE);\n    this.setAllShow(BatchTexture.DEFAULT_SHOW_VALUE);\n    return;\n  }\n\n  for (let i = 0; i < this._featuresLength; i++) {\n    const feature = this.getFeature(i);\n    const color = defined(style.color)\n      ? defaultValue(\n          style.color.evaluateColor(feature, scratchColor),\n          BatchTexture.DEFAULT_COLOR_VALUE,\n        )\n      : BatchTexture.DEFAULT_COLOR_VALUE;\n    const show = defined(style.show)\n      ? defaultValue(\n          style.show.evaluate(feature),\n          BatchTexture.DEFAULT_SHOW_VALUE,\n        )\n      : BatchTexture.DEFAULT_SHOW_VALUE;\n\n    this.setColor(i, color);\n    this.setShow(i, show);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ModelFeatureTable#destroy\n * @private\n */\nModelFeatureTable.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * e = e && e.destroy();\n *\n * @see ModelFeatureTable#isDestroyed\n * @private\n */\nModelFeatureTable.prototype.destroy = function (frameState) {\n  this._batchTexture = this._batchTexture && this._batchTexture.destroy();\n  destroyObject(this);\n};\n\nexport default ModelFeatureTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}