{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport FramebufferManager from \"../Renderer/FramebufferManager.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport Renderbuffer from \"../Renderer/Renderbuffer.js\";\nimport RenderbufferFormat from \"../Renderer/RenderbufferFormat.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport StencilConstants from \"./StencilConstants.js\";\nimport StencilFunction from \"./StencilFunction.js\";\nimport StencilOperation from \"./StencilOperation.js\";\n\n/**\n * @private\n */\nfunction InvertClassification() {\n  this._numSamples = 1;\n  this.previousFramebuffer = undefined;\n  this._previousFramebuffer = undefined;\n  this._depthStencilTexture = undefined;\n  this._depthStencilRenderbuffer = undefined;\n  this._fbo = new FramebufferManager({\n    depthStencil: true,\n    createDepthAttachments: false\n  });\n  this._fboClassified = new FramebufferManager({\n    depthStencil: true,\n    createDepthAttachments: false\n  });\n  this._rsUnclassified = undefined;\n  this._rsClassified = undefined;\n  this._unclassifiedCommand = undefined;\n  this._classifiedCommand = undefined;\n  this._translucentCommand = undefined;\n  this._clearColorCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    owner: this\n  });\n  this._clearCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    depth: 1.0,\n    stencil: 0\n  });\n  const that = this;\n  this._uniformMap = {\n    colorTexture: function () {\n      return that._fbo.getColorTexture();\n    },\n    depthTexture: function () {\n      return that._depthStencilTexture;\n    },\n    classifiedTexture: function () {\n      return that._fboClassified.getColorTexture();\n    }\n  };\n}\nObject.defineProperties(InvertClassification.prototype, {\n  unclassifiedCommand: {\n    get: function () {\n      return this._unclassifiedCommand;\n    }\n  }\n});\nInvertClassification.isTranslucencySupported = function (context) {\n  return context.depthTexture && context.fragmentDepth;\n};\nconst rsUnclassified = {\n  depthMask: false,\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.EQUAL,\n    frontOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.KEEP\n    },\n    backFunction: StencilFunction.NEVER,\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK\n  },\n  blending: BlendingState.ALPHA_BLEND\n};\nconst rsClassified = {\n  depthMask: false,\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.NOT_EQUAL,\n    frontOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.KEEP\n    },\n    backFunction: StencilFunction.NEVER,\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK\n  },\n  blending: BlendingState.ALPHA_BLEND\n};\n\n// Set the 3D Tiles bit when rendering back into the scene's framebuffer. This is only needed if\n// invert classification does not use the scene's depth-stencil texture, which is the case if the invert\n// classification color is translucent.\nconst rsDefault = {\n  depthMask: true,\n  depthTest: {\n    enabled: true\n  },\n  stencilTest: StencilConstants.setCesium3DTileBit(),\n  stencilMask: StencilConstants.CESIUM_3D_TILE_MASK,\n  blending: BlendingState.ALPHA_BLEND\n};\nconst translucentFS = \"uniform sampler2D colorTexture;\\n\" + \"uniform sampler2D depthTexture;\\n\" + \"uniform sampler2D classifiedTexture;\\n\" + \"in vec2 v_textureCoordinates;\\n\" + \"void main()\\n\" + \"{\\n\" + \"    vec4 color = texture(colorTexture, v_textureCoordinates);\\n\" + \"    if (color.a == 0.0)\\n\" + \"    {\\n\" + \"        discard;\\n\" + \"    }\\n\" + \"    bool isClassified = all(equal(texture(classifiedTexture, v_textureCoordinates), vec4(0.0)));\\n\" + \"#ifdef UNCLASSIFIED\\n\" + \"    vec4 highlightColor = czm_invertClassificationColor;\\n\" + \"    if (isClassified)\\n\" + \"    {\\n\" + \"        discard;\\n\" + \"    }\\n\" + \"#else\\n\" + \"    vec4 highlightColor = vec4(1.0);\\n\" + \"    if (!isClassified)\\n\" + \"    {\\n\" + \"        discard;\\n\" + \"    }\\n\" + \"#endif\\n\" + \"    out_FragColor = color * highlightColor;\\n\" + \"    gl_FragDepth = texture(depthTexture, v_textureCoordinates).r;\\n\" + \"}\\n\";\nconst opaqueFS = \"uniform sampler2D colorTexture;\\n\" + \"in vec2 v_textureCoordinates;\\n\" + \"void main()\\n\" + \"{\\n\" + \"    vec4 color = texture(colorTexture, v_textureCoordinates);\\n\" + \"    if (color.a == 0.0)\\n\" + \"    {\\n\" + \"        discard;\\n\" + \"    }\\n\" + \"#ifdef UNCLASSIFIED\\n\" + \"    out_FragColor = color * czm_invertClassificationColor;\\n\" + \"#else\\n\" + \"    out_FragColor = color;\\n\" + \"#endif\\n\" + \"}\\n\";\nInvertClassification.prototype.update = function (context, numSamples, globeFramebuffer) {\n  const texture = this._fbo.getColorTexture();\n  const previousFramebufferChanged = this.previousFramebuffer !== this._previousFramebuffer;\n  this._previousFramebuffer = this.previousFramebuffer;\n  const samplesChanged = this._numSamples !== numSamples;\n  const width = context.drawingBufferWidth;\n  const height = context.drawingBufferHeight;\n  const textureChanged = !defined(texture) || texture.width !== width || texture.height !== height;\n  if (textureChanged || previousFramebufferChanged || samplesChanged) {\n    this._numSamples = numSamples;\n    this._depthStencilTexture = this._depthStencilTexture && this._depthStencilTexture.destroy();\n    this._depthStencilRenderbuffer = this._depthStencilRenderbuffer && this._depthStencilRenderbuffer.destroy();\n    if (!defined(this._previousFramebuffer)) {\n      this._depthStencilTexture = new Texture({\n        context: context,\n        width: width,\n        height: height,\n        pixelFormat: PixelFormat.DEPTH_STENCIL,\n        pixelDatatype: PixelDatatype.UNSIGNED_INT_24_8\n      });\n      if (numSamples > 1) {\n        this._depthStencilRenderbuffer = new Renderbuffer({\n          context: context,\n          width: width,\n          height: height,\n          format: RenderbufferFormat.DEPTH24_STENCIL8,\n          numSamples: numSamples\n        });\n      }\n    }\n  }\n  if (!defined(this._fbo.framebuffer) || textureChanged || previousFramebufferChanged || samplesChanged) {\n    this._fbo.destroy();\n    this._fboClassified.destroy();\n    let depthStencilTexture;\n    let depthStencilRenderbuffer;\n    if (defined(this._previousFramebuffer)) {\n      depthStencilTexture = globeFramebuffer.getDepthStencilTexture();\n      depthStencilRenderbuffer = globeFramebuffer.getDepthStencilRenderbuffer();\n    } else {\n      depthStencilTexture = this._depthStencilTexture;\n      depthStencilRenderbuffer = this._depthStencilRenderbuffer;\n    }\n    this._fbo.setDepthStencilTexture(depthStencilTexture);\n    if (defined(depthStencilRenderbuffer)) {\n      this._fbo.setDepthStencilRenderbuffer(depthStencilRenderbuffer);\n    }\n    this._fbo.update(context, width, height, numSamples);\n    if (!defined(this._previousFramebuffer)) {\n      this._fboClassified.setDepthStencilTexture(depthStencilTexture);\n      this._fboClassified.update(context, width, height);\n    }\n  }\n  if (!defined(this._rsUnclassified)) {\n    this._rsUnclassified = RenderState.fromCache(rsUnclassified);\n    this._rsClassified = RenderState.fromCache(rsClassified);\n    this._rsDefault = RenderState.fromCache(rsDefault);\n  }\n  if (!defined(this._unclassifiedCommand) || previousFramebufferChanged || samplesChanged) {\n    if (defined(this._unclassifiedCommand)) {\n      this._unclassifiedCommand.shaderProgram = this._unclassifiedCommand.shaderProgram && this._unclassifiedCommand.shaderProgram.destroy();\n      this._classifiedCommand.shaderProgram = this._classifiedCommand.shaderProgram && this._classifiedCommand.shaderProgram.destroy();\n    }\n    const fs = defined(this._previousFramebuffer) ? opaqueFS : translucentFS;\n    const unclassifiedFSSource = new ShaderSource({\n      defines: [\"UNCLASSIFIED\"],\n      sources: [fs]\n    });\n    const classifiedFSSource = new ShaderSource({\n      sources: [fs]\n    });\n    this._unclassifiedCommand = context.createViewportQuadCommand(unclassifiedFSSource, {\n      renderState: defined(this._previousFramebuffer) ? this._rsUnclassified : this._rsDefault,\n      uniformMap: this._uniformMap,\n      owner: this\n    });\n    this._classifiedCommand = context.createViewportQuadCommand(classifiedFSSource, {\n      renderState: defined(this._previousFramebuffer) ? this._rsClassified : this._rsDefault,\n      uniformMap: this._uniformMap,\n      owner: this\n    });\n    if (defined(this._translucentCommand)) {\n      this._translucentCommand.shaderProgram = this._translucentCommand.shaderProgram && this._translucentCommand.shaderProgram.destroy();\n    }\n    if (!defined(this._previousFramebuffer)) {\n      this._translucentCommand = context.createViewportQuadCommand(PassThrough, {\n        renderState: this._rsUnclassified,\n        uniformMap: this._uniformMap,\n        owner: this\n      });\n    }\n  }\n};\nInvertClassification.prototype.prepareTextures = function (context, blitStencil) {\n  if (this._fbo._numSamples > 1) {\n    this._fbo.prepareTextures(context, blitStencil);\n  }\n};\nInvertClassification.prototype.clear = function (context, passState) {\n  if (defined(this._previousFramebuffer)) {\n    this._fbo.clear(context, this._clearColorCommand, passState);\n  } else {\n    this._fbo.clear(context, this._clearCommand, passState);\n    this._fboClassified.clear(context, this._clearCommand, passState);\n  }\n};\nInvertClassification.prototype.executeClassified = function (context, passState) {\n  if (!defined(this._previousFramebuffer)) {\n    const framebuffer = passState.framebuffer;\n    this.prepareTextures(context, true);\n    passState.framebuffer = this._fboClassified.framebuffer;\n    this._translucentCommand.execute(context, passState);\n    passState.framebuffer = framebuffer;\n  }\n  this._classifiedCommand.execute(context, passState);\n};\nInvertClassification.prototype.executeUnclassified = function (context, passState) {\n  this._unclassifiedCommand.execute(context, passState);\n};\nInvertClassification.prototype.isDestroyed = function () {\n  return false;\n};\nInvertClassification.prototype.destroy = function () {\n  this._fbo.destroy();\n  this._fboClassified.destroy();\n  this._depthStencilTexture = this._depthStencilTexture && this._depthStencilTexture.destroy();\n  this._depthStencilRenderbuffer = this._depthStencilRenderbuffer && this._depthStencilRenderbuffer.destroy();\n  if (defined(this._unclassifiedCommand)) {\n    this._unclassifiedCommand.shaderProgram = this._unclassifiedCommand.shaderProgram && this._unclassifiedCommand.shaderProgram.destroy();\n    this._classifiedCommand.shaderProgram = this._classifiedCommand.shaderProgram && this._classifiedCommand.shaderProgram.destroy();\n  }\n  return destroyObject(this);\n};\nexport default InvertClassification;","map":{"version":3,"names":["Color","defined","destroyObject","PixelFormat","ClearCommand","FramebufferManager","PixelDatatype","Renderbuffer","RenderbufferFormat","RenderState","ShaderSource","Texture","PassThrough","BlendingState","StencilConstants","StencilFunction","StencilOperation","InvertClassification","_numSamples","previousFramebuffer","undefined","_previousFramebuffer","_depthStencilTexture","_depthStencilRenderbuffer","_fbo","depthStencil","createDepthAttachments","_fboClassified","_rsUnclassified","_rsClassified","_unclassifiedCommand","_classifiedCommand","_translucentCommand","_clearColorCommand","color","owner","_clearCommand","depth","stencil","that","_uniformMap","colorTexture","getColorTexture","depthTexture","classifiedTexture","Object","defineProperties","prototype","unclassifiedCommand","get","isTranslucencySupported","context","fragmentDepth","rsUnclassified","depthMask","stencilTest","enabled","frontFunction","EQUAL","frontOperation","fail","KEEP","zFail","zPass","backFunction","NEVER","reference","mask","CLASSIFICATION_MASK","blending","ALPHA_BLEND","rsClassified","NOT_EQUAL","rsDefault","depthTest","setCesium3DTileBit","stencilMask","CESIUM_3D_TILE_MASK","translucentFS","opaqueFS","update","numSamples","globeFramebuffer","texture","previousFramebufferChanged","samplesChanged","width","drawingBufferWidth","height","drawingBufferHeight","textureChanged","destroy","pixelFormat","DEPTH_STENCIL","pixelDatatype","UNSIGNED_INT_24_8","format","DEPTH24_STENCIL8","framebuffer","depthStencilTexture","depthStencilRenderbuffer","getDepthStencilTexture","getDepthStencilRenderbuffer","setDepthStencilTexture","setDepthStencilRenderbuffer","fromCache","_rsDefault","shaderProgram","fs","unclassifiedFSSource","defines","sources","classifiedFSSource","createViewportQuadCommand","renderState","uniformMap","prepareTextures","blitStencil","clear","passState","executeClassified","execute","executeUnclassified","isDestroyed"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/InvertClassification.js"],"sourcesContent":["import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport FramebufferManager from \"../Renderer/FramebufferManager.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport Renderbuffer from \"../Renderer/Renderbuffer.js\";\nimport RenderbufferFormat from \"../Renderer/RenderbufferFormat.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport StencilConstants from \"./StencilConstants.js\";\nimport StencilFunction from \"./StencilFunction.js\";\nimport StencilOperation from \"./StencilOperation.js\";\n\n/**\n * @private\n */\nfunction InvertClassification() {\n  this._numSamples = 1;\n  this.previousFramebuffer = undefined;\n  this._previousFramebuffer = undefined;\n\n  this._depthStencilTexture = undefined;\n  this._depthStencilRenderbuffer = undefined;\n  this._fbo = new FramebufferManager({\n    depthStencil: true,\n    createDepthAttachments: false,\n  });\n  this._fboClassified = new FramebufferManager({\n    depthStencil: true,\n    createDepthAttachments: false,\n  });\n\n  this._rsUnclassified = undefined;\n  this._rsClassified = undefined;\n\n  this._unclassifiedCommand = undefined;\n  this._classifiedCommand = undefined;\n  this._translucentCommand = undefined;\n\n  this._clearColorCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    owner: this,\n  });\n  this._clearCommand = new ClearCommand({\n    color: new Color(0.0, 0.0, 0.0, 0.0),\n    depth: 1.0,\n    stencil: 0,\n  });\n\n  const that = this;\n  this._uniformMap = {\n    colorTexture: function () {\n      return that._fbo.getColorTexture();\n    },\n    depthTexture: function () {\n      return that._depthStencilTexture;\n    },\n    classifiedTexture: function () {\n      return that._fboClassified.getColorTexture();\n    },\n  };\n}\n\nObject.defineProperties(InvertClassification.prototype, {\n  unclassifiedCommand: {\n    get: function () {\n      return this._unclassifiedCommand;\n    },\n  },\n});\n\nInvertClassification.isTranslucencySupported = function (context) {\n  return context.depthTexture && context.fragmentDepth;\n};\n\nconst rsUnclassified = {\n  depthMask: false,\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.EQUAL,\n    frontOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.KEEP,\n    },\n    backFunction: StencilFunction.NEVER,\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK,\n  },\n  blending: BlendingState.ALPHA_BLEND,\n};\n\nconst rsClassified = {\n  depthMask: false,\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.NOT_EQUAL,\n    frontOperation: {\n      fail: StencilOperation.KEEP,\n      zFail: StencilOperation.KEEP,\n      zPass: StencilOperation.KEEP,\n    },\n    backFunction: StencilFunction.NEVER,\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK,\n  },\n  blending: BlendingState.ALPHA_BLEND,\n};\n\n// Set the 3D Tiles bit when rendering back into the scene's framebuffer. This is only needed if\n// invert classification does not use the scene's depth-stencil texture, which is the case if the invert\n// classification color is translucent.\nconst rsDefault = {\n  depthMask: true,\n  depthTest: {\n    enabled: true,\n  },\n  stencilTest: StencilConstants.setCesium3DTileBit(),\n  stencilMask: StencilConstants.CESIUM_3D_TILE_MASK,\n  blending: BlendingState.ALPHA_BLEND,\n};\n\nconst translucentFS =\n  \"uniform sampler2D colorTexture;\\n\" +\n  \"uniform sampler2D depthTexture;\\n\" +\n  \"uniform sampler2D classifiedTexture;\\n\" +\n  \"in vec2 v_textureCoordinates;\\n\" +\n  \"void main()\\n\" +\n  \"{\\n\" +\n  \"    vec4 color = texture(colorTexture, v_textureCoordinates);\\n\" +\n  \"    if (color.a == 0.0)\\n\" +\n  \"    {\\n\" +\n  \"        discard;\\n\" +\n  \"    }\\n\" +\n  \"    bool isClassified = all(equal(texture(classifiedTexture, v_textureCoordinates), vec4(0.0)));\\n\" +\n  \"#ifdef UNCLASSIFIED\\n\" +\n  \"    vec4 highlightColor = czm_invertClassificationColor;\\n\" +\n  \"    if (isClassified)\\n\" +\n  \"    {\\n\" +\n  \"        discard;\\n\" +\n  \"    }\\n\" +\n  \"#else\\n\" +\n  \"    vec4 highlightColor = vec4(1.0);\\n\" +\n  \"    if (!isClassified)\\n\" +\n  \"    {\\n\" +\n  \"        discard;\\n\" +\n  \"    }\\n\" +\n  \"#endif\\n\" +\n  \"    out_FragColor = color * highlightColor;\\n\" +\n  \"    gl_FragDepth = texture(depthTexture, v_textureCoordinates).r;\\n\" +\n  \"}\\n\";\n\nconst opaqueFS =\n  \"uniform sampler2D colorTexture;\\n\" +\n  \"in vec2 v_textureCoordinates;\\n\" +\n  \"void main()\\n\" +\n  \"{\\n\" +\n  \"    vec4 color = texture(colorTexture, v_textureCoordinates);\\n\" +\n  \"    if (color.a == 0.0)\\n\" +\n  \"    {\\n\" +\n  \"        discard;\\n\" +\n  \"    }\\n\" +\n  \"#ifdef UNCLASSIFIED\\n\" +\n  \"    out_FragColor = color * czm_invertClassificationColor;\\n\" +\n  \"#else\\n\" +\n  \"    out_FragColor = color;\\n\" +\n  \"#endif\\n\" +\n  \"}\\n\";\n\nInvertClassification.prototype.update = function (\n  context,\n  numSamples,\n  globeFramebuffer,\n) {\n  const texture = this._fbo.getColorTexture();\n  const previousFramebufferChanged =\n    this.previousFramebuffer !== this._previousFramebuffer;\n  this._previousFramebuffer = this.previousFramebuffer;\n  const samplesChanged = this._numSamples !== numSamples;\n\n  const width = context.drawingBufferWidth;\n  const height = context.drawingBufferHeight;\n  const textureChanged =\n    !defined(texture) || texture.width !== width || texture.height !== height;\n\n  if (textureChanged || previousFramebufferChanged || samplesChanged) {\n    this._numSamples = numSamples;\n    this._depthStencilTexture =\n      this._depthStencilTexture && this._depthStencilTexture.destroy();\n    this._depthStencilRenderbuffer =\n      this._depthStencilRenderbuffer &&\n      this._depthStencilRenderbuffer.destroy();\n\n    if (!defined(this._previousFramebuffer)) {\n      this._depthStencilTexture = new Texture({\n        context: context,\n        width: width,\n        height: height,\n        pixelFormat: PixelFormat.DEPTH_STENCIL,\n        pixelDatatype: PixelDatatype.UNSIGNED_INT_24_8,\n      });\n      if (numSamples > 1) {\n        this._depthStencilRenderbuffer = new Renderbuffer({\n          context: context,\n          width: width,\n          height: height,\n          format: RenderbufferFormat.DEPTH24_STENCIL8,\n          numSamples: numSamples,\n        });\n      }\n    }\n  }\n\n  if (\n    !defined(this._fbo.framebuffer) ||\n    textureChanged ||\n    previousFramebufferChanged ||\n    samplesChanged\n  ) {\n    this._fbo.destroy();\n    this._fboClassified.destroy();\n\n    let depthStencilTexture;\n    let depthStencilRenderbuffer;\n    if (defined(this._previousFramebuffer)) {\n      depthStencilTexture = globeFramebuffer.getDepthStencilTexture();\n      depthStencilRenderbuffer = globeFramebuffer.getDepthStencilRenderbuffer();\n    } else {\n      depthStencilTexture = this._depthStencilTexture;\n      depthStencilRenderbuffer = this._depthStencilRenderbuffer;\n    }\n\n    this._fbo.setDepthStencilTexture(depthStencilTexture);\n    if (defined(depthStencilRenderbuffer)) {\n      this._fbo.setDepthStencilRenderbuffer(depthStencilRenderbuffer);\n    }\n    this._fbo.update(context, width, height, numSamples);\n\n    if (!defined(this._previousFramebuffer)) {\n      this._fboClassified.setDepthStencilTexture(depthStencilTexture);\n      this._fboClassified.update(context, width, height);\n    }\n  }\n\n  if (!defined(this._rsUnclassified)) {\n    this._rsUnclassified = RenderState.fromCache(rsUnclassified);\n    this._rsClassified = RenderState.fromCache(rsClassified);\n    this._rsDefault = RenderState.fromCache(rsDefault);\n  }\n\n  if (\n    !defined(this._unclassifiedCommand) ||\n    previousFramebufferChanged ||\n    samplesChanged\n  ) {\n    if (defined(this._unclassifiedCommand)) {\n      this._unclassifiedCommand.shaderProgram =\n        this._unclassifiedCommand.shaderProgram &&\n        this._unclassifiedCommand.shaderProgram.destroy();\n      this._classifiedCommand.shaderProgram =\n        this._classifiedCommand.shaderProgram &&\n        this._classifiedCommand.shaderProgram.destroy();\n    }\n\n    const fs = defined(this._previousFramebuffer) ? opaqueFS : translucentFS;\n    const unclassifiedFSSource = new ShaderSource({\n      defines: [\"UNCLASSIFIED\"],\n      sources: [fs],\n    });\n    const classifiedFSSource = new ShaderSource({\n      sources: [fs],\n    });\n    this._unclassifiedCommand = context.createViewportQuadCommand(\n      unclassifiedFSSource,\n      {\n        renderState: defined(this._previousFramebuffer)\n          ? this._rsUnclassified\n          : this._rsDefault,\n        uniformMap: this._uniformMap,\n        owner: this,\n      },\n    );\n    this._classifiedCommand = context.createViewportQuadCommand(\n      classifiedFSSource,\n      {\n        renderState: defined(this._previousFramebuffer)\n          ? this._rsClassified\n          : this._rsDefault,\n        uniformMap: this._uniformMap,\n        owner: this,\n      },\n    );\n\n    if (defined(this._translucentCommand)) {\n      this._translucentCommand.shaderProgram =\n        this._translucentCommand.shaderProgram &&\n        this._translucentCommand.shaderProgram.destroy();\n    }\n    if (!defined(this._previousFramebuffer)) {\n      this._translucentCommand = context.createViewportQuadCommand(\n        PassThrough,\n        {\n          renderState: this._rsUnclassified,\n          uniformMap: this._uniformMap,\n          owner: this,\n        },\n      );\n    }\n  }\n};\n\nInvertClassification.prototype.prepareTextures = function (\n  context,\n  blitStencil,\n) {\n  if (this._fbo._numSamples > 1) {\n    this._fbo.prepareTextures(context, blitStencil);\n  }\n};\n\nInvertClassification.prototype.clear = function (context, passState) {\n  if (defined(this._previousFramebuffer)) {\n    this._fbo.clear(context, this._clearColorCommand, passState);\n  } else {\n    this._fbo.clear(context, this._clearCommand, passState);\n    this._fboClassified.clear(context, this._clearCommand, passState);\n  }\n};\n\nInvertClassification.prototype.executeClassified = function (\n  context,\n  passState,\n) {\n  if (!defined(this._previousFramebuffer)) {\n    const framebuffer = passState.framebuffer;\n\n    this.prepareTextures(context, true);\n    passState.framebuffer = this._fboClassified.framebuffer;\n    this._translucentCommand.execute(context, passState);\n\n    passState.framebuffer = framebuffer;\n  }\n  this._classifiedCommand.execute(context, passState);\n};\n\nInvertClassification.prototype.executeUnclassified = function (\n  context,\n  passState,\n) {\n  this._unclassifiedCommand.execute(context, passState);\n};\n\nInvertClassification.prototype.isDestroyed = function () {\n  return false;\n};\n\nInvertClassification.prototype.destroy = function () {\n  this._fbo.destroy();\n  this._fboClassified.destroy();\n  this._depthStencilTexture =\n    this._depthStencilTexture && this._depthStencilTexture.destroy();\n  this._depthStencilRenderbuffer =\n    this._depthStencilRenderbuffer && this._depthStencilRenderbuffer.destroy();\n\n  if (defined(this._unclassifiedCommand)) {\n    this._unclassifiedCommand.shaderProgram =\n      this._unclassifiedCommand.shaderProgram &&\n      this._unclassifiedCommand.shaderProgram.destroy();\n    this._classifiedCommand.shaderProgram =\n      this._classifiedCommand.shaderProgram &&\n      this._classifiedCommand.shaderProgram.destroy();\n  }\n\n  return destroyObject(this);\n};\nexport default InvertClassification;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}