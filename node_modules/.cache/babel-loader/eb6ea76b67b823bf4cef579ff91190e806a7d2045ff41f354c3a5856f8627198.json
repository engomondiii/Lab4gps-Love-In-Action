{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nconst defaultColor = new Color(1.0, 1.0, 1.0, 0.4);\nconst defaultGlowColor = new Color(0.0, 1.0, 0.0, 0.05);\nconst defaultBackgroundColor = new Color(0.0, 0.5, 0.0, 0.2);\n\n/**\n * @typedef {object} GridImageryProvider.ConstructorOptions\n *\n * Initialization options for the GridImageryProvider constructor\n *\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme for which to draw tiles.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the default ellipsoid is used.\n * @property {number} [cells=8] The number of grids cells.\n * @property {Color} [color=Color(1.0, 1.0, 1.0, 0.4)] The color to draw grid lines.\n * @property {Color} [glowColor=Color(0.0, 1.0, 0.0, 0.05)] The color to draw glow for grid lines.\n * @property {number} [glowWidth=6] The width of lines used for rendering the line glow effect.\n * @property {Color} [backgroundColor=Color(0.0, 0.5, 0.0, 0.2)] Background fill color.\n * @property {number} [tileWidth=256] The width of the tile for level-of-detail selection purposes.\n * @property {number} [tileHeight=256] The height of the tile for level-of-detail selection purposes.\n * @property {number} [canvasSize=256] The size of the canvas used for rendering.\n */\n\n/**\n * An {@link ImageryProvider} that draws a wireframe grid on every tile with controllable background and glow.\n * May be useful for custom rendering effects or debugging terrain.\n *\n * @alias GridImageryProvider\n * @constructor\n * @param {GridImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n */\nfunction GridImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n  this._tilingScheme = defined(options.tilingScheme) ? options.tilingScheme : new GeographicTilingScheme({\n    ellipsoid: options.ellipsoid\n  });\n  this._cells = defaultValue(options.cells, 8);\n  this._color = defaultValue(options.color, defaultColor);\n  this._glowColor = defaultValue(options.glowColor, defaultGlowColor);\n  this._glowWidth = defaultValue(options.glowWidth, 6);\n  this._backgroundColor = defaultValue(options.backgroundColor, defaultBackgroundColor);\n  this._errorEvent = new Event();\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n\n  // A little larger than tile size so lines are sharper\n  // Note: can't be too much difference otherwise texture blowout\n  this._canvasSize = defaultValue(options.canvasSize, 256);\n\n  // We only need a single canvas since all tiles will be the same\n  this._canvas = this._createGridCanvas();\n}\nObject.defineProperties(GridImageryProvider.prototype, {\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GridImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof GridImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    }\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof GridImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    }\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof GridImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof GridImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof GridImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof GridImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    }\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof GridImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GridImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof GridImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof GridImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    }\n  }\n});\n\n/**\n * Draws a grid of lines into a canvas.\n */\nGridImageryProvider.prototype._drawGrid = function (context) {\n  const minPixel = 0;\n  const maxPixel = this._canvasSize;\n  for (let x = 0; x <= this._cells; ++x) {\n    const nx = x / this._cells;\n    const val = 1 + nx * (maxPixel - 1);\n    context.moveTo(val, minPixel);\n    context.lineTo(val, maxPixel);\n    context.moveTo(minPixel, val);\n    context.lineTo(maxPixel, val);\n  }\n  context.stroke();\n};\n\n/**\n * Render a grid into a canvas with background and glow\n */\nGridImageryProvider.prototype._createGridCanvas = function () {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = this._canvasSize;\n  canvas.height = this._canvasSize;\n  const minPixel = 0;\n  const maxPixel = this._canvasSize;\n  const context = canvas.getContext(\"2d\");\n\n  // Fill the background\n  const cssBackgroundColor = this._backgroundColor.toCssColorString();\n  context.fillStyle = cssBackgroundColor;\n  context.fillRect(minPixel, minPixel, maxPixel, maxPixel);\n\n  // Glow for grid lines\n  const cssGlowColor = this._glowColor.toCssColorString();\n  context.strokeStyle = cssGlowColor;\n  // Wide\n  context.lineWidth = this._glowWidth;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  this._drawGrid(context);\n  // Narrow\n  context.lineWidth = this._glowWidth * 0.5;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  this._drawGrid(context);\n\n  // Grid lines\n  const cssColor = this._color.toCssColorString();\n  // Border\n  context.strokeStyle = cssColor;\n  context.lineWidth = 2;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  // Inner\n  context.lineWidth = 1;\n  this._drawGrid(context);\n  return canvas;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nGridImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<HTMLCanvasElement>} The resolved image as a Canvas DOM object.\n */\nGridImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return Promise.resolve(this._canvas);\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nGridImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n};\nexport default GridImageryProvider;","map":{"version":3,"names":["Color","defaultValue","defined","Event","GeographicTilingScheme","defaultColor","defaultGlowColor","defaultBackgroundColor","GridImageryProvider","options","EMPTY_OBJECT","_defaultAlpha","undefined","_defaultNightAlpha","_defaultDayAlpha","_defaultBrightness","_defaultContrast","_defaultHue","_defaultSaturation","_defaultGamma","_defaultMinificationFilter","_defaultMagnificationFilter","_tilingScheme","tilingScheme","ellipsoid","_cells","cells","_color","color","_glowColor","glowColor","_glowWidth","glowWidth","_backgroundColor","backgroundColor","_errorEvent","_tileWidth","tileWidth","_tileHeight","tileHeight","_canvasSize","canvasSize","_canvas","_createGridCanvas","Object","defineProperties","prototype","proxy","get","maximumLevel","minimumLevel","rectangle","tileDiscardPolicy","errorEvent","credit","hasAlphaChannel","_drawGrid","context","minPixel","maxPixel","x","nx","val","moveTo","lineTo","stroke","canvas","document","createElement","width","height","getContext","cssBackgroundColor","toCssColorString","fillStyle","fillRect","cssGlowColor","strokeStyle","lineWidth","strokeRect","cssColor","getTileCredits","y","level","requestImage","request","Promise","resolve","pickFeatures","longitude","latitude"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GridImageryProvider.js"],"sourcesContent":["import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\n\nconst defaultColor = new Color(1.0, 1.0, 1.0, 0.4);\nconst defaultGlowColor = new Color(0.0, 1.0, 0.0, 0.05);\nconst defaultBackgroundColor = new Color(0.0, 0.5, 0.0, 0.2);\n\n/**\n * @typedef {object} GridImageryProvider.ConstructorOptions\n *\n * Initialization options for the GridImageryProvider constructor\n *\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme for which to draw tiles.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the default ellipsoid is used.\n * @property {number} [cells=8] The number of grids cells.\n * @property {Color} [color=Color(1.0, 1.0, 1.0, 0.4)] The color to draw grid lines.\n * @property {Color} [glowColor=Color(0.0, 1.0, 0.0, 0.05)] The color to draw glow for grid lines.\n * @property {number} [glowWidth=6] The width of lines used for rendering the line glow effect.\n * @property {Color} [backgroundColor=Color(0.0, 0.5, 0.0, 0.2)] Background fill color.\n * @property {number} [tileWidth=256] The width of the tile for level-of-detail selection purposes.\n * @property {number} [tileHeight=256] The height of the tile for level-of-detail selection purposes.\n * @property {number} [canvasSize=256] The size of the canvas used for rendering.\n */\n\n/**\n * An {@link ImageryProvider} that draws a wireframe grid on every tile with controllable background and glow.\n * May be useful for custom rendering effects or debugging terrain.\n *\n * @alias GridImageryProvider\n * @constructor\n * @param {GridImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n */\nfunction GridImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  this._tilingScheme = defined(options.tilingScheme)\n    ? options.tilingScheme\n    : new GeographicTilingScheme({ ellipsoid: options.ellipsoid });\n  this._cells = defaultValue(options.cells, 8);\n  this._color = defaultValue(options.color, defaultColor);\n  this._glowColor = defaultValue(options.glowColor, defaultGlowColor);\n  this._glowWidth = defaultValue(options.glowWidth, 6);\n  this._backgroundColor = defaultValue(\n    options.backgroundColor,\n    defaultBackgroundColor,\n  );\n  this._errorEvent = new Event();\n\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n\n  // A little larger than tile size so lines are sharper\n  // Note: can't be too much difference otherwise texture blowout\n  this._canvasSize = defaultValue(options.canvasSize, 256);\n\n  // We only need a single canvas since all tiles will be the same\n  this._canvas = this._createGridCanvas();\n}\n\nObject.defineProperties(GridImageryProvider.prototype, {\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GridImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof GridImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof GridImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof GridImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof GridImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof GridImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof GridImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof GridImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GridImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof GridImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof GridImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n});\n\n/**\n * Draws a grid of lines into a canvas.\n */\nGridImageryProvider.prototype._drawGrid = function (context) {\n  const minPixel = 0;\n  const maxPixel = this._canvasSize;\n  for (let x = 0; x <= this._cells; ++x) {\n    const nx = x / this._cells;\n    const val = 1 + nx * (maxPixel - 1);\n\n    context.moveTo(val, minPixel);\n    context.lineTo(val, maxPixel);\n    context.moveTo(minPixel, val);\n    context.lineTo(maxPixel, val);\n  }\n  context.stroke();\n};\n\n/**\n * Render a grid into a canvas with background and glow\n */\nGridImageryProvider.prototype._createGridCanvas = function () {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = this._canvasSize;\n  canvas.height = this._canvasSize;\n  const minPixel = 0;\n  const maxPixel = this._canvasSize;\n\n  const context = canvas.getContext(\"2d\");\n\n  // Fill the background\n  const cssBackgroundColor = this._backgroundColor.toCssColorString();\n  context.fillStyle = cssBackgroundColor;\n  context.fillRect(minPixel, minPixel, maxPixel, maxPixel);\n\n  // Glow for grid lines\n  const cssGlowColor = this._glowColor.toCssColorString();\n  context.strokeStyle = cssGlowColor;\n  // Wide\n  context.lineWidth = this._glowWidth;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  this._drawGrid(context);\n  // Narrow\n  context.lineWidth = this._glowWidth * 0.5;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  this._drawGrid(context);\n\n  // Grid lines\n  const cssColor = this._color.toCssColorString();\n  // Border\n  context.strokeStyle = cssColor;\n  context.lineWidth = 2;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  // Inner\n  context.lineWidth = 1;\n  this._drawGrid(context);\n\n  return canvas;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nGridImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<HTMLCanvasElement>} The resolved image as a Canvas DOM object.\n */\nGridImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return Promise.resolve(this._canvas);\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nGridImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  return undefined;\n};\nexport default GridImageryProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}