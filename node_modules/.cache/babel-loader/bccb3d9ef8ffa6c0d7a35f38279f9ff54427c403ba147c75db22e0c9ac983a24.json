{"ast":null,"code":"import DeveloperError from \"./DeveloperError.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\n\n/**\n * Defines functions for 3rd order polynomial functions of one variable with only real coefficients.\n *\n * @namespace CubicRealPolynomial\n */\nconst CubicRealPolynomial = {};\n\n/**\n * Provides the discriminant of the cubic equation from the supplied coefficients.\n *\n * @param {number} a The coefficient of the 3rd order monomial.\n * @param {number} b The coefficient of the 2nd order monomial.\n * @param {number} c The coefficient of the 1st order monomial.\n * @param {number} d The coefficient of the 0th order monomial.\n * @returns {number} The value of the discriminant.\n */\nCubicRealPolynomial.computeDiscriminant = function (a, b, c, d) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n  const d2 = d * d;\n  const discriminant = 18.0 * a * b * c * d + b2 * c2 - 27.0 * a2 * d2 - 4.0 * (a * c2 * c + b2 * b * d);\n  return discriminant;\n};\nfunction computeRealRoots(a, b, c, d) {\n  const A = a;\n  const B = b / 3.0;\n  const C = c / 3.0;\n  const D = d;\n  const AC = A * C;\n  const BD = B * D;\n  const B2 = B * B;\n  const C2 = C * C;\n  const delta1 = A * C - B2;\n  const delta2 = A * D - B * C;\n  const delta3 = B * D - C2;\n  const discriminant = 4.0 * delta1 * delta3 - delta2 * delta2;\n  let temp;\n  let temp1;\n  if (discriminant < 0.0) {\n    let ABar;\n    let CBar;\n    let DBar;\n    if (B2 * BD >= AC * C2) {\n      ABar = A;\n      CBar = delta1;\n      DBar = -2.0 * B * delta1 + A * delta2;\n    } else {\n      ABar = D;\n      CBar = delta3;\n      DBar = -D * delta2 + 2.0 * C * delta3;\n    }\n    const s = DBar < 0.0 ? -1.0 : 1.0; // This is not Math.Sign()!\n    const temp0 = -s * Math.abs(ABar) * Math.sqrt(-discriminant);\n    temp1 = -DBar + temp0;\n    const x = temp1 / 2.0;\n    const p = x < 0.0 ? -Math.pow(-x, 1.0 / 3.0) : Math.pow(x, 1.0 / 3.0);\n    const q = temp1 === temp0 ? -p : -CBar / p;\n    temp = CBar <= 0.0 ? p + q : -DBar / (p * p + q * q + CBar);\n    if (B2 * BD >= AC * C2) {\n      return [(temp - B) / A];\n    }\n    return [-D / (temp + C)];\n  }\n  const CBarA = delta1;\n  const DBarA = -2.0 * B * delta1 + A * delta2;\n  const CBarD = delta3;\n  const DBarD = -D * delta2 + 2.0 * C * delta3;\n  const squareRootOfDiscriminant = Math.sqrt(discriminant);\n  const halfSquareRootOf3 = Math.sqrt(3.0) / 2.0;\n  let theta = Math.abs(Math.atan2(A * squareRootOfDiscriminant, -DBarA) / 3.0);\n  temp = 2.0 * Math.sqrt(-CBarA);\n  let cosine = Math.cos(theta);\n  temp1 = temp * cosine;\n  let temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n  const numeratorLarge = temp1 + temp3 > 2.0 * B ? temp1 - B : temp3 - B;\n  const denominatorLarge = A;\n  const root1 = numeratorLarge / denominatorLarge;\n  theta = Math.abs(Math.atan2(D * squareRootOfDiscriminant, -DBarD) / 3.0);\n  temp = 2.0 * Math.sqrt(-CBarD);\n  cosine = Math.cos(theta);\n  temp1 = temp * cosine;\n  temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n  const numeratorSmall = -D;\n  const denominatorSmall = temp1 + temp3 < 2.0 * C ? temp1 + C : temp3 + C;\n  const root3 = numeratorSmall / denominatorSmall;\n  const E = denominatorLarge * denominatorSmall;\n  const F = -numeratorLarge * denominatorSmall - denominatorLarge * numeratorSmall;\n  const G = numeratorLarge * numeratorSmall;\n  const root2 = (C * F - B * G) / (-B * F + C * E);\n  if (root1 <= root2) {\n    if (root1 <= root3) {\n      if (root2 <= root3) {\n        return [root1, root2, root3];\n      }\n      return [root1, root3, root2];\n    }\n    return [root3, root1, root2];\n  }\n  if (root1 <= root3) {\n    return [root2, root1, root3];\n  }\n  if (root2 <= root3) {\n    return [root2, root3, root1];\n  }\n  return [root3, root2, root1];\n}\n\n/**\n * Provides the real valued roots of the cubic polynomial with the provided coefficients.\n *\n * @param {number} a The coefficient of the 3rd order monomial.\n * @param {number} b The coefficient of the 2nd order monomial.\n * @param {number} c The coefficient of the 1st order monomial.\n * @param {number} d The coefficient of the 0th order monomial.\n * @returns {number[]} The real valued roots.\n */\nCubicRealPolynomial.computeRealRoots = function (a, b, c, d) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  let roots;\n  let ratio;\n  if (a === 0.0) {\n    // Quadratic function: b * x^2 + c * x + d = 0.\n    return QuadraticRealPolynomial.computeRealRoots(b, c, d);\n  } else if (b === 0.0) {\n    if (c === 0.0) {\n      if (d === 0.0) {\n        // 3rd order monomial: a * x^3 = 0.\n        return [0.0, 0.0, 0.0];\n      }\n\n      // a * x^3 + d = 0\n      ratio = -d / a;\n      const root = ratio < 0.0 ? -Math.pow(-ratio, 1.0 / 3.0) : Math.pow(ratio, 1.0 / 3.0);\n      return [root, root, root];\n    } else if (d === 0.0) {\n      // x * (a * x^2 + c) = 0.\n      roots = QuadraticRealPolynomial.computeRealRoots(a, 0, c);\n\n      // Return the roots in ascending order.\n      if (roots.Length === 0) {\n        return [0.0];\n      }\n      return [roots[0], 0.0, roots[1]];\n    }\n\n    // Deflated cubic polynomial: a * x^3 + c * x + d= 0.\n    return computeRealRoots(a, 0, c, d);\n  } else if (c === 0.0) {\n    if (d === 0.0) {\n      // x^2 * (a * x + b) = 0.\n      ratio = -b / a;\n      if (ratio < 0.0) {\n        return [ratio, 0.0, 0.0];\n      }\n      return [0.0, 0.0, ratio];\n    }\n    // a * x^3 + b * x^2 + d = 0.\n    return computeRealRoots(a, b, 0, d);\n  } else if (d === 0.0) {\n    // x * (a * x^2 + b * x + c) = 0\n    roots = QuadraticRealPolynomial.computeRealRoots(a, b, c);\n\n    // Return the roots in ascending order.\n    if (roots.length === 0) {\n      return [0.0];\n    } else if (roots[1] <= 0.0) {\n      return [roots[0], roots[1], 0.0];\n    } else if (roots[0] >= 0.0) {\n      return [0.0, roots[0], roots[1]];\n    }\n    return [roots[0], 0.0, roots[1]];\n  }\n  return computeRealRoots(a, b, c, d);\n};\nexport default CubicRealPolynomial;","map":{"version":3,"names":["DeveloperError","QuadraticRealPolynomial","CubicRealPolynomial","computeDiscriminant","a","b","c","d","a2","b2","c2","d2","discriminant","computeRealRoots","A","B","C","D","AC","BD","B2","C2","delta1","delta2","delta3","temp","temp1","ABar","CBar","DBar","s","temp0","Math","abs","sqrt","x","p","pow","q","CBarA","DBarA","CBarD","DBarD","squareRootOfDiscriminant","halfSquareRootOf3","theta","atan2","cosine","cos","temp3","sin","numeratorLarge","denominatorLarge","root1","numeratorSmall","denominatorSmall","root3","E","F","G","root2","roots","ratio","root","Length","length"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/CubicRealPolynomial.js"],"sourcesContent":["import DeveloperError from \"./DeveloperError.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\n\n/**\n * Defines functions for 3rd order polynomial functions of one variable with only real coefficients.\n *\n * @namespace CubicRealPolynomial\n */\nconst CubicRealPolynomial = {};\n\n/**\n * Provides the discriminant of the cubic equation from the supplied coefficients.\n *\n * @param {number} a The coefficient of the 3rd order monomial.\n * @param {number} b The coefficient of the 2nd order monomial.\n * @param {number} c The coefficient of the 1st order monomial.\n * @param {number} d The coefficient of the 0th order monomial.\n * @returns {number} The value of the discriminant.\n */\nCubicRealPolynomial.computeDiscriminant = function (a, b, c, d) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n  const d2 = d * d;\n\n  const discriminant =\n    18.0 * a * b * c * d +\n    b2 * c2 -\n    27.0 * a2 * d2 -\n    4.0 * (a * c2 * c + b2 * b * d);\n  return discriminant;\n};\n\nfunction computeRealRoots(a, b, c, d) {\n  const A = a;\n  const B = b / 3.0;\n  const C = c / 3.0;\n  const D = d;\n\n  const AC = A * C;\n  const BD = B * D;\n  const B2 = B * B;\n  const C2 = C * C;\n  const delta1 = A * C - B2;\n  const delta2 = A * D - B * C;\n  const delta3 = B * D - C2;\n\n  const discriminant = 4.0 * delta1 * delta3 - delta2 * delta2;\n  let temp;\n  let temp1;\n\n  if (discriminant < 0.0) {\n    let ABar;\n    let CBar;\n    let DBar;\n\n    if (B2 * BD >= AC * C2) {\n      ABar = A;\n      CBar = delta1;\n      DBar = -2.0 * B * delta1 + A * delta2;\n    } else {\n      ABar = D;\n      CBar = delta3;\n      DBar = -D * delta2 + 2.0 * C * delta3;\n    }\n\n    const s = DBar < 0.0 ? -1.0 : 1.0; // This is not Math.Sign()!\n    const temp0 = -s * Math.abs(ABar) * Math.sqrt(-discriminant);\n    temp1 = -DBar + temp0;\n\n    const x = temp1 / 2.0;\n    const p = x < 0.0 ? -Math.pow(-x, 1.0 / 3.0) : Math.pow(x, 1.0 / 3.0);\n    const q = temp1 === temp0 ? -p : -CBar / p;\n\n    temp = CBar <= 0.0 ? p + q : -DBar / (p * p + q * q + CBar);\n\n    if (B2 * BD >= AC * C2) {\n      return [(temp - B) / A];\n    }\n\n    return [-D / (temp + C)];\n  }\n\n  const CBarA = delta1;\n  const DBarA = -2.0 * B * delta1 + A * delta2;\n\n  const CBarD = delta3;\n  const DBarD = -D * delta2 + 2.0 * C * delta3;\n\n  const squareRootOfDiscriminant = Math.sqrt(discriminant);\n  const halfSquareRootOf3 = Math.sqrt(3.0) / 2.0;\n\n  let theta = Math.abs(Math.atan2(A * squareRootOfDiscriminant, -DBarA) / 3.0);\n  temp = 2.0 * Math.sqrt(-CBarA);\n  let cosine = Math.cos(theta);\n  temp1 = temp * cosine;\n  let temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n\n  const numeratorLarge = temp1 + temp3 > 2.0 * B ? temp1 - B : temp3 - B;\n  const denominatorLarge = A;\n\n  const root1 = numeratorLarge / denominatorLarge;\n\n  theta = Math.abs(Math.atan2(D * squareRootOfDiscriminant, -DBarD) / 3.0);\n  temp = 2.0 * Math.sqrt(-CBarD);\n  cosine = Math.cos(theta);\n  temp1 = temp * cosine;\n  temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n\n  const numeratorSmall = -D;\n  const denominatorSmall = temp1 + temp3 < 2.0 * C ? temp1 + C : temp3 + C;\n\n  const root3 = numeratorSmall / denominatorSmall;\n\n  const E = denominatorLarge * denominatorSmall;\n  const F =\n    -numeratorLarge * denominatorSmall - denominatorLarge * numeratorSmall;\n  const G = numeratorLarge * numeratorSmall;\n\n  const root2 = (C * F - B * G) / (-B * F + C * E);\n\n  if (root1 <= root2) {\n    if (root1 <= root3) {\n      if (root2 <= root3) {\n        return [root1, root2, root3];\n      }\n      return [root1, root3, root2];\n    }\n    return [root3, root1, root2];\n  }\n  if (root1 <= root3) {\n    return [root2, root1, root3];\n  }\n  if (root2 <= root3) {\n    return [root2, root3, root1];\n  }\n  return [root3, root2, root1];\n}\n\n/**\n * Provides the real valued roots of the cubic polynomial with the provided coefficients.\n *\n * @param {number} a The coefficient of the 3rd order monomial.\n * @param {number} b The coefficient of the 2nd order monomial.\n * @param {number} c The coefficient of the 1st order monomial.\n * @param {number} d The coefficient of the 0th order monomial.\n * @returns {number[]} The real valued roots.\n */\nCubicRealPolynomial.computeRealRoots = function (a, b, c, d) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  let roots;\n  let ratio;\n  if (a === 0.0) {\n    // Quadratic function: b * x^2 + c * x + d = 0.\n    return QuadraticRealPolynomial.computeRealRoots(b, c, d);\n  } else if (b === 0.0) {\n    if (c === 0.0) {\n      if (d === 0.0) {\n        // 3rd order monomial: a * x^3 = 0.\n        return [0.0, 0.0, 0.0];\n      }\n\n      // a * x^3 + d = 0\n      ratio = -d / a;\n      const root =\n        ratio < 0.0 ? -Math.pow(-ratio, 1.0 / 3.0) : Math.pow(ratio, 1.0 / 3.0);\n      return [root, root, root];\n    } else if (d === 0.0) {\n      // x * (a * x^2 + c) = 0.\n      roots = QuadraticRealPolynomial.computeRealRoots(a, 0, c);\n\n      // Return the roots in ascending order.\n      if (roots.Length === 0) {\n        return [0.0];\n      }\n      return [roots[0], 0.0, roots[1]];\n    }\n\n    // Deflated cubic polynomial: a * x^3 + c * x + d= 0.\n    return computeRealRoots(a, 0, c, d);\n  } else if (c === 0.0) {\n    if (d === 0.0) {\n      // x^2 * (a * x + b) = 0.\n      ratio = -b / a;\n      if (ratio < 0.0) {\n        return [ratio, 0.0, 0.0];\n      }\n      return [0.0, 0.0, ratio];\n    }\n    // a * x^3 + b * x^2 + d = 0.\n    return computeRealRoots(a, b, 0, d);\n  } else if (d === 0.0) {\n    // x * (a * x^2 + b * x + c) = 0\n    roots = QuadraticRealPolynomial.computeRealRoots(a, b, c);\n\n    // Return the roots in ascending order.\n    if (roots.length === 0) {\n      return [0.0];\n    } else if (roots[1] <= 0.0) {\n      return [roots[0], roots[1], 0.0];\n    } else if (roots[0] >= 0.0) {\n      return [0.0, roots[0], roots[1]];\n    }\n    return [roots[0], 0.0, roots[1]];\n  }\n\n  return computeRealRoots(a, b, c, d);\n};\nexport default CubicRealPolynomial;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}