{"ast":null,"code":"import Cartesian2 from \"./Cartesian2.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport WebMercatorProjection from \"./WebMercatorProjection.js\";\n\n/**\n * A tiling scheme for geometry referenced to a {@link WebMercatorProjection}, EPSG:3857.  This is\n * the tiling scheme used by Google Maps, Microsoft Bing Maps, and most of ESRI ArcGIS Online.\n *\n * @alias WebMercatorTilingScheme\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid whose surface is being tiled. Defaults to\n * the default ellipsoid.\n * @param {number} [options.numberOfLevelZeroTilesX=1] The number of tiles in the X direction at level zero of\n *        the tile tree.\n * @param {number} [options.numberOfLevelZeroTilesY=1] The number of tiles in the Y direction at level zero of\n *        the tile tree.\n * @param {Cartesian2} [options.rectangleSouthwestInMeters] The southwest corner of the rectangle covered by the\n *        tiling scheme, in meters.  If this parameter or rectangleNortheastInMeters is not specified, the entire\n *        globe is covered in the longitude direction and an equal distance is covered in the latitude\n *        direction, resulting in a square projection.\n * @param {Cartesian2} [options.rectangleNortheastInMeters] The northeast corner of the rectangle covered by the\n *        tiling scheme, in meters.  If this parameter or rectangleSouthwestInMeters is not specified, the entire\n *        globe is covered in the longitude direction and an equal distance is covered in the latitude\n *        direction, resulting in a square projection.\n */\nfunction WebMercatorTilingScheme(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.default);\n  this._numberOfLevelZeroTilesX = defaultValue(options.numberOfLevelZeroTilesX, 1);\n  this._numberOfLevelZeroTilesY = defaultValue(options.numberOfLevelZeroTilesY, 1);\n  this._projection = new WebMercatorProjection(this._ellipsoid);\n  if (defined(options.rectangleSouthwestInMeters) && defined(options.rectangleNortheastInMeters)) {\n    this._rectangleSouthwestInMeters = options.rectangleSouthwestInMeters;\n    this._rectangleNortheastInMeters = options.rectangleNortheastInMeters;\n  } else {\n    const semimajorAxisTimesPi = this._ellipsoid.maximumRadius * Math.PI;\n    this._rectangleSouthwestInMeters = new Cartesian2(-semimajorAxisTimesPi, -semimajorAxisTimesPi);\n    this._rectangleNortheastInMeters = new Cartesian2(semimajorAxisTimesPi, semimajorAxisTimesPi);\n  }\n  const southwest = this._projection.unproject(this._rectangleSouthwestInMeters);\n  const northeast = this._projection.unproject(this._rectangleNortheastInMeters);\n  this._rectangle = new Rectangle(southwest.longitude, southwest.latitude, northeast.longitude, northeast.latitude);\n}\nObject.defineProperties(WebMercatorTilingScheme.prototype, {\n  /**\n   * Gets the ellipsoid that is tiled by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    }\n  },\n  /**\n   * Gets the rectangle, in radians, covered by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    }\n  },\n  /**\n   * Gets the map projection used by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {MapProjection}\n   */\n  projection: {\n    get: function () {\n      return this._projection;\n    }\n  }\n});\n\n/**\n * Gets the total number of tiles in the X direction at a specified level-of-detail.\n *\n * @param {number} level The level-of-detail.\n * @returns {number} The number of tiles in the X direction at the given level.\n */\nWebMercatorTilingScheme.prototype.getNumberOfXTilesAtLevel = function (level) {\n  return this._numberOfLevelZeroTilesX << level;\n};\n\n/**\n * Gets the total number of tiles in the Y direction at a specified level-of-detail.\n *\n * @param {number} level The level-of-detail.\n * @returns {number} The number of tiles in the Y direction at the given level.\n */\nWebMercatorTilingScheme.prototype.getNumberOfYTilesAtLevel = function (level) {\n  return this._numberOfLevelZeroTilesY << level;\n};\n\n/**\n * Transforms a rectangle specified in geodetic radians to the native coordinate system\n * of this tiling scheme.\n *\n * @param {Rectangle} rectangle The rectangle to transform.\n * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the native rectangle if 'result'\n *          is undefined.\n */\nWebMercatorTilingScheme.prototype.rectangleToNativeRectangle = function (rectangle, result) {\n  const projection = this._projection;\n  const southwest = projection.project(Rectangle.southwest(rectangle));\n  const northeast = projection.project(Rectangle.northeast(rectangle));\n  if (!defined(result)) {\n    return new Rectangle(southwest.x, southwest.y, northeast.x, northeast.y);\n  }\n  result.west = southwest.x;\n  result.south = southwest.y;\n  result.east = northeast.x;\n  result.north = northeast.y;\n  return result;\n};\n\n/**\n * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\n * of the tiling scheme.\n *\n * @param {number} x The integer x coordinate of the tile.\n * @param {number} y The integer y coordinate of the tile.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nWebMercatorTilingScheme.prototype.tileXYToNativeRectangle = function (x, y, level, result) {\n  const xTiles = this.getNumberOfXTilesAtLevel(level);\n  const yTiles = this.getNumberOfYTilesAtLevel(level);\n  const xTileWidth = (this._rectangleNortheastInMeters.x - this._rectangleSouthwestInMeters.x) / xTiles;\n  const west = this._rectangleSouthwestInMeters.x + x * xTileWidth;\n  const east = this._rectangleSouthwestInMeters.x + (x + 1) * xTileWidth;\n  const yTileHeight = (this._rectangleNortheastInMeters.y - this._rectangleSouthwestInMeters.y) / yTiles;\n  const north = this._rectangleNortheastInMeters.y - y * yTileHeight;\n  const south = this._rectangleNortheastInMeters.y - (y + 1) * yTileHeight;\n  if (!defined(result)) {\n    return new Rectangle(west, south, east, north);\n  }\n  result.west = west;\n  result.south = south;\n  result.east = east;\n  result.north = north;\n  return result;\n};\n\n/**\n * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\n *\n * @param {number} x The integer x coordinate of the tile.\n * @param {number} y The integer y coordinate of the tile.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nWebMercatorTilingScheme.prototype.tileXYToRectangle = function (x, y, level, result) {\n  const nativeRectangle = this.tileXYToNativeRectangle(x, y, level, result);\n  const projection = this._projection;\n  const southwest = projection.unproject(new Cartesian2(nativeRectangle.west, nativeRectangle.south));\n  const northeast = projection.unproject(new Cartesian2(nativeRectangle.east, nativeRectangle.north));\n  nativeRectangle.west = southwest.longitude;\n  nativeRectangle.south = southwest.latitude;\n  nativeRectangle.east = northeast.longitude;\n  nativeRectangle.north = northeast.latitude;\n  return nativeRectangle;\n};\n\n/**\n * Calculates the tile x, y coordinates of the tile containing\n * a given cartographic position.\n *\n * @param {Cartographic} position The position.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Cartesian2} The specified 'result', or a new object containing the tile x, y coordinates\n *          if 'result' is undefined.\n */\nWebMercatorTilingScheme.prototype.positionToTileXY = function (position, level, result) {\n  const rectangle = this._rectangle;\n  if (!Rectangle.contains(rectangle, position)) {\n    // outside the bounds of the tiling scheme\n    return undefined;\n  }\n  const xTiles = this.getNumberOfXTilesAtLevel(level);\n  const yTiles = this.getNumberOfYTilesAtLevel(level);\n  const overallWidth = this._rectangleNortheastInMeters.x - this._rectangleSouthwestInMeters.x;\n  const xTileWidth = overallWidth / xTiles;\n  const overallHeight = this._rectangleNortheastInMeters.y - this._rectangleSouthwestInMeters.y;\n  const yTileHeight = overallHeight / yTiles;\n  const projection = this._projection;\n  const webMercatorPosition = projection.project(position);\n  const distanceFromWest = webMercatorPosition.x - this._rectangleSouthwestInMeters.x;\n  const distanceFromNorth = this._rectangleNortheastInMeters.y - webMercatorPosition.y;\n  let xTileCoordinate = distanceFromWest / xTileWidth | 0;\n  if (xTileCoordinate >= xTiles) {\n    xTileCoordinate = xTiles - 1;\n  }\n  let yTileCoordinate = distanceFromNorth / yTileHeight | 0;\n  if (yTileCoordinate >= yTiles) {\n    yTileCoordinate = yTiles - 1;\n  }\n  if (!defined(result)) {\n    return new Cartesian2(xTileCoordinate, yTileCoordinate);\n  }\n  result.x = xTileCoordinate;\n  result.y = yTileCoordinate;\n  return result;\n};\nexport default WebMercatorTilingScheme;","map":{"version":3,"names":["Cartesian2","defaultValue","defined","Ellipsoid","Rectangle","WebMercatorProjection","WebMercatorTilingScheme","options","EMPTY_OBJECT","_ellipsoid","ellipsoid","default","_numberOfLevelZeroTilesX","numberOfLevelZeroTilesX","_numberOfLevelZeroTilesY","numberOfLevelZeroTilesY","_projection","rectangleSouthwestInMeters","rectangleNortheastInMeters","_rectangleSouthwestInMeters","_rectangleNortheastInMeters","semimajorAxisTimesPi","maximumRadius","Math","PI","southwest","unproject","northeast","_rectangle","longitude","latitude","Object","defineProperties","prototype","get","rectangle","projection","getNumberOfXTilesAtLevel","level","getNumberOfYTilesAtLevel","rectangleToNativeRectangle","result","project","x","y","west","south","east","north","tileXYToNativeRectangle","xTiles","yTiles","xTileWidth","yTileHeight","tileXYToRectangle","nativeRectangle","positionToTileXY","position","contains","undefined","overallWidth","overallHeight","webMercatorPosition","distanceFromWest","distanceFromNorth","xTileCoordinate","yTileCoordinate"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/WebMercatorTilingScheme.js"],"sourcesContent":["import Cartesian2 from \"./Cartesian2.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport WebMercatorProjection from \"./WebMercatorProjection.js\";\n\n/**\n * A tiling scheme for geometry referenced to a {@link WebMercatorProjection}, EPSG:3857.  This is\n * the tiling scheme used by Google Maps, Microsoft Bing Maps, and most of ESRI ArcGIS Online.\n *\n * @alias WebMercatorTilingScheme\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid whose surface is being tiled. Defaults to\n * the default ellipsoid.\n * @param {number} [options.numberOfLevelZeroTilesX=1] The number of tiles in the X direction at level zero of\n *        the tile tree.\n * @param {number} [options.numberOfLevelZeroTilesY=1] The number of tiles in the Y direction at level zero of\n *        the tile tree.\n * @param {Cartesian2} [options.rectangleSouthwestInMeters] The southwest corner of the rectangle covered by the\n *        tiling scheme, in meters.  If this parameter or rectangleNortheastInMeters is not specified, the entire\n *        globe is covered in the longitude direction and an equal distance is covered in the latitude\n *        direction, resulting in a square projection.\n * @param {Cartesian2} [options.rectangleNortheastInMeters] The northeast corner of the rectangle covered by the\n *        tiling scheme, in meters.  If this parameter or rectangleSouthwestInMeters is not specified, the entire\n *        globe is covered in the longitude direction and an equal distance is covered in the latitude\n *        direction, resulting in a square projection.\n */\nfunction WebMercatorTilingScheme(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.default);\n  this._numberOfLevelZeroTilesX = defaultValue(\n    options.numberOfLevelZeroTilesX,\n    1,\n  );\n  this._numberOfLevelZeroTilesY = defaultValue(\n    options.numberOfLevelZeroTilesY,\n    1,\n  );\n\n  this._projection = new WebMercatorProjection(this._ellipsoid);\n\n  if (\n    defined(options.rectangleSouthwestInMeters) &&\n    defined(options.rectangleNortheastInMeters)\n  ) {\n    this._rectangleSouthwestInMeters = options.rectangleSouthwestInMeters;\n    this._rectangleNortheastInMeters = options.rectangleNortheastInMeters;\n  } else {\n    const semimajorAxisTimesPi = this._ellipsoid.maximumRadius * Math.PI;\n    this._rectangleSouthwestInMeters = new Cartesian2(\n      -semimajorAxisTimesPi,\n      -semimajorAxisTimesPi,\n    );\n    this._rectangleNortheastInMeters = new Cartesian2(\n      semimajorAxisTimesPi,\n      semimajorAxisTimesPi,\n    );\n  }\n\n  const southwest = this._projection.unproject(\n    this._rectangleSouthwestInMeters,\n  );\n  const northeast = this._projection.unproject(\n    this._rectangleNortheastInMeters,\n  );\n  this._rectangle = new Rectangle(\n    southwest.longitude,\n    southwest.latitude,\n    northeast.longitude,\n    northeast.latitude,\n  );\n}\n\nObject.defineProperties(WebMercatorTilingScheme.prototype, {\n  /**\n   * Gets the ellipsoid that is tiled by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, covered by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * Gets the map projection used by this tiling scheme.\n   * @memberof WebMercatorTilingScheme.prototype\n   * @type {MapProjection}\n   */\n  projection: {\n    get: function () {\n      return this._projection;\n    },\n  },\n});\n\n/**\n * Gets the total number of tiles in the X direction at a specified level-of-detail.\n *\n * @param {number} level The level-of-detail.\n * @returns {number} The number of tiles in the X direction at the given level.\n */\nWebMercatorTilingScheme.prototype.getNumberOfXTilesAtLevel = function (level) {\n  return this._numberOfLevelZeroTilesX << level;\n};\n\n/**\n * Gets the total number of tiles in the Y direction at a specified level-of-detail.\n *\n * @param {number} level The level-of-detail.\n * @returns {number} The number of tiles in the Y direction at the given level.\n */\nWebMercatorTilingScheme.prototype.getNumberOfYTilesAtLevel = function (level) {\n  return this._numberOfLevelZeroTilesY << level;\n};\n\n/**\n * Transforms a rectangle specified in geodetic radians to the native coordinate system\n * of this tiling scheme.\n *\n * @param {Rectangle} rectangle The rectangle to transform.\n * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the native rectangle if 'result'\n *          is undefined.\n */\nWebMercatorTilingScheme.prototype.rectangleToNativeRectangle = function (\n  rectangle,\n  result,\n) {\n  const projection = this._projection;\n  const southwest = projection.project(Rectangle.southwest(rectangle));\n  const northeast = projection.project(Rectangle.northeast(rectangle));\n\n  if (!defined(result)) {\n    return new Rectangle(southwest.x, southwest.y, northeast.x, northeast.y);\n  }\n\n  result.west = southwest.x;\n  result.south = southwest.y;\n  result.east = northeast.x;\n  result.north = northeast.y;\n  return result;\n};\n\n/**\n * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\n * of the tiling scheme.\n *\n * @param {number} x The integer x coordinate of the tile.\n * @param {number} y The integer y coordinate of the tile.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nWebMercatorTilingScheme.prototype.tileXYToNativeRectangle = function (\n  x,\n  y,\n  level,\n  result,\n) {\n  const xTiles = this.getNumberOfXTilesAtLevel(level);\n  const yTiles = this.getNumberOfYTilesAtLevel(level);\n\n  const xTileWidth =\n    (this._rectangleNortheastInMeters.x - this._rectangleSouthwestInMeters.x) /\n    xTiles;\n  const west = this._rectangleSouthwestInMeters.x + x * xTileWidth;\n  const east = this._rectangleSouthwestInMeters.x + (x + 1) * xTileWidth;\n\n  const yTileHeight =\n    (this._rectangleNortheastInMeters.y - this._rectangleSouthwestInMeters.y) /\n    yTiles;\n  const north = this._rectangleNortheastInMeters.y - y * yTileHeight;\n  const south = this._rectangleNortheastInMeters.y - (y + 1) * yTileHeight;\n\n  if (!defined(result)) {\n    return new Rectangle(west, south, east, north);\n  }\n\n  result.west = west;\n  result.south = south;\n  result.east = east;\n  result.north = north;\n  return result;\n};\n\n/**\n * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\n *\n * @param {number} x The integer x coordinate of the tile.\n * @param {number} y The integer y coordinate of the tile.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nWebMercatorTilingScheme.prototype.tileXYToRectangle = function (\n  x,\n  y,\n  level,\n  result,\n) {\n  const nativeRectangle = this.tileXYToNativeRectangle(x, y, level, result);\n\n  const projection = this._projection;\n  const southwest = projection.unproject(\n    new Cartesian2(nativeRectangle.west, nativeRectangle.south),\n  );\n  const northeast = projection.unproject(\n    new Cartesian2(nativeRectangle.east, nativeRectangle.north),\n  );\n\n  nativeRectangle.west = southwest.longitude;\n  nativeRectangle.south = southwest.latitude;\n  nativeRectangle.east = northeast.longitude;\n  nativeRectangle.north = northeast.latitude;\n  return nativeRectangle;\n};\n\n/**\n * Calculates the tile x, y coordinates of the tile containing\n * a given cartographic position.\n *\n * @param {Cartographic} position The position.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Cartesian2} The specified 'result', or a new object containing the tile x, y coordinates\n *          if 'result' is undefined.\n */\nWebMercatorTilingScheme.prototype.positionToTileXY = function (\n  position,\n  level,\n  result,\n) {\n  const rectangle = this._rectangle;\n  if (!Rectangle.contains(rectangle, position)) {\n    // outside the bounds of the tiling scheme\n    return undefined;\n  }\n\n  const xTiles = this.getNumberOfXTilesAtLevel(level);\n  const yTiles = this.getNumberOfYTilesAtLevel(level);\n\n  const overallWidth =\n    this._rectangleNortheastInMeters.x - this._rectangleSouthwestInMeters.x;\n  const xTileWidth = overallWidth / xTiles;\n  const overallHeight =\n    this._rectangleNortheastInMeters.y - this._rectangleSouthwestInMeters.y;\n  const yTileHeight = overallHeight / yTiles;\n\n  const projection = this._projection;\n\n  const webMercatorPosition = projection.project(position);\n  const distanceFromWest =\n    webMercatorPosition.x - this._rectangleSouthwestInMeters.x;\n  const distanceFromNorth =\n    this._rectangleNortheastInMeters.y - webMercatorPosition.y;\n\n  let xTileCoordinate = (distanceFromWest / xTileWidth) | 0;\n  if (xTileCoordinate >= xTiles) {\n    xTileCoordinate = xTiles - 1;\n  }\n  let yTileCoordinate = (distanceFromNorth / yTileHeight) | 0;\n  if (yTileCoordinate >= yTiles) {\n    yTileCoordinate = yTiles - 1;\n  }\n\n  if (!defined(result)) {\n    return new Cartesian2(xTileCoordinate, yTileCoordinate);\n  }\n\n  result.x = xTileCoordinate;\n  result.y = yTileCoordinate;\n  return result;\n};\nexport default WebMercatorTilingScheme;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}