{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nconst defaultSize = new Cartesian2(1.0, 1.0);\n\n/**\n * A particle emitted by a {@link ParticleSystem}.\n *\n * @alias Particle\n * @constructor\n *\n * @param {object} options An object with the following properties:\n * @param {number} [options.mass=1.0] The mass of the particle in kilograms.\n * @param {Cartesian3} [options.position=Cartesian3.ZERO] The initial position of the particle in world coordinates.\n * @param {Cartesian3} [options.velocity=Cartesian3.ZERO] The velocity vector of the particle in world coordinates.\n * @param {number} [options.life=Number.MAX_VALUE] The life of the particle in seconds.\n * @param {object} [options.image] The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n * @param {Color} [options.startColor=Color.WHITE] The color of a particle when it is born.\n * @param {Color} [options.endColor=Color.WHITE] The color of a particle when it dies.\n * @param {number} [options.startScale=1.0] The scale of the particle when it is born.\n * @param {number} [options.endScale=1.0] The scale of the particle when it dies.\n * @param {Cartesian2} [options.imageSize=new Cartesian2(1.0, 1.0)] The dimensions, width by height, to scale the particle image in pixels.\n */\nfunction Particle(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The mass of the particle in kilograms.\n   * @type {number}\n   * @default 1.0\n   */\n  this.mass = defaultValue(options.mass, 1.0);\n  /**\n   * The positon of the particle in world coordinates.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.position = Cartesian3.clone(defaultValue(options.position, Cartesian3.ZERO));\n  /**\n   * The velocity of the particle in world coordinates.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.velocity = Cartesian3.clone(defaultValue(options.velocity, Cartesian3.ZERO));\n  /**\n   * The life of the particle in seconds.\n   * @type {number}\n   * @default Number.MAX_VALUE\n   */\n  this.life = defaultValue(options.life, Number.MAX_VALUE);\n  /**\n   * The image to use for the particle.\n   * @type {object}\n   * @default undefined\n   */\n  this.image = options.image;\n  /**\n   * The color of the particle when it is born.\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.startColor = Color.clone(defaultValue(options.startColor, Color.WHITE));\n  /**\n   * The color of the particle when it dies.\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.endColor = Color.clone(defaultValue(options.endColor, Color.WHITE));\n  /**\n   * the scale of the particle when it is born.\n   * @type {number}\n   * @default 1.0\n   */\n  this.startScale = defaultValue(options.startScale, 1.0);\n  /**\n   * The scale of the particle when it dies.\n   * @type {number}\n   * @default 1.0\n   */\n  this.endScale = defaultValue(options.endScale, 1.0);\n  /**\n   * The dimensions, width by height, to scale the particle image in pixels.\n   * @type {Cartesian2}\n   * @default new Cartesian(1.0, 1.0)\n   */\n  this.imageSize = Cartesian2.clone(defaultValue(options.imageSize, defaultSize));\n  this._age = 0.0;\n  this._normalizedAge = 0.0;\n\n  // used by ParticleSystem\n  this._billboard = undefined;\n}\nObject.defineProperties(Particle.prototype, {\n  /**\n   * Gets the age of the particle in seconds.\n   * @memberof Particle.prototype\n   * @type {number}\n   */\n  age: {\n    get: function () {\n      return this._age;\n    }\n  },\n  /**\n   * Gets the age normalized to a value in the range [0.0, 1.0].\n   * @memberof Particle.prototype\n   * @type {number}\n   */\n  normalizedAge: {\n    get: function () {\n      return this._normalizedAge;\n    }\n  }\n});\nconst deltaScratch = new Cartesian3();\n\n/**\n * @private\n */\nParticle.prototype.update = function (dt, particleUpdateFunction) {\n  // Apply the velocity\n  Cartesian3.multiplyByScalar(this.velocity, dt, deltaScratch);\n  Cartesian3.add(this.position, deltaScratch, this.position);\n\n  // Update any forces.\n  if (defined(particleUpdateFunction)) {\n    particleUpdateFunction(this, dt);\n  }\n\n  // Age the particle\n  this._age += dt;\n\n  // Compute the normalized age.\n  if (this.life === Number.MAX_VALUE) {\n    this._normalizedAge = 0.0;\n  } else {\n    this._normalizedAge = this._age / this.life;\n  }\n\n  // If this particle is older than it's lifespan then die.\n  return this._age <= this.life;\n};\nexport default Particle;","map":{"version":3,"names":["Cartesian2","Cartesian3","Color","defaultValue","defined","defaultSize","Particle","options","EMPTY_OBJECT","mass","position","clone","ZERO","velocity","life","Number","MAX_VALUE","image","startColor","WHITE","endColor","startScale","endScale","imageSize","_age","_normalizedAge","_billboard","undefined","Object","defineProperties","prototype","age","get","normalizedAge","deltaScratch","update","dt","particleUpdateFunction","multiplyByScalar","add"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Particle.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\n\nconst defaultSize = new Cartesian2(1.0, 1.0);\n\n/**\n * A particle emitted by a {@link ParticleSystem}.\n *\n * @alias Particle\n * @constructor\n *\n * @param {object} options An object with the following properties:\n * @param {number} [options.mass=1.0] The mass of the particle in kilograms.\n * @param {Cartesian3} [options.position=Cartesian3.ZERO] The initial position of the particle in world coordinates.\n * @param {Cartesian3} [options.velocity=Cartesian3.ZERO] The velocity vector of the particle in world coordinates.\n * @param {number} [options.life=Number.MAX_VALUE] The life of the particle in seconds.\n * @param {object} [options.image] The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n * @param {Color} [options.startColor=Color.WHITE] The color of a particle when it is born.\n * @param {Color} [options.endColor=Color.WHITE] The color of a particle when it dies.\n * @param {number} [options.startScale=1.0] The scale of the particle when it is born.\n * @param {number} [options.endScale=1.0] The scale of the particle when it dies.\n * @param {Cartesian2} [options.imageSize=new Cartesian2(1.0, 1.0)] The dimensions, width by height, to scale the particle image in pixels.\n */\nfunction Particle(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The mass of the particle in kilograms.\n   * @type {number}\n   * @default 1.0\n   */\n  this.mass = defaultValue(options.mass, 1.0);\n  /**\n   * The positon of the particle in world coordinates.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.position = Cartesian3.clone(\n    defaultValue(options.position, Cartesian3.ZERO),\n  );\n  /**\n   * The velocity of the particle in world coordinates.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.velocity = Cartesian3.clone(\n    defaultValue(options.velocity, Cartesian3.ZERO),\n  );\n  /**\n   * The life of the particle in seconds.\n   * @type {number}\n   * @default Number.MAX_VALUE\n   */\n  this.life = defaultValue(options.life, Number.MAX_VALUE);\n  /**\n   * The image to use for the particle.\n   * @type {object}\n   * @default undefined\n   */\n  this.image = options.image;\n  /**\n   * The color of the particle when it is born.\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.startColor = Color.clone(defaultValue(options.startColor, Color.WHITE));\n  /**\n   * The color of the particle when it dies.\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.endColor = Color.clone(defaultValue(options.endColor, Color.WHITE));\n  /**\n   * the scale of the particle when it is born.\n   * @type {number}\n   * @default 1.0\n   */\n  this.startScale = defaultValue(options.startScale, 1.0);\n  /**\n   * The scale of the particle when it dies.\n   * @type {number}\n   * @default 1.0\n   */\n  this.endScale = defaultValue(options.endScale, 1.0);\n  /**\n   * The dimensions, width by height, to scale the particle image in pixels.\n   * @type {Cartesian2}\n   * @default new Cartesian(1.0, 1.0)\n   */\n  this.imageSize = Cartesian2.clone(\n    defaultValue(options.imageSize, defaultSize),\n  );\n\n  this._age = 0.0;\n  this._normalizedAge = 0.0;\n\n  // used by ParticleSystem\n  this._billboard = undefined;\n}\n\nObject.defineProperties(Particle.prototype, {\n  /**\n   * Gets the age of the particle in seconds.\n   * @memberof Particle.prototype\n   * @type {number}\n   */\n  age: {\n    get: function () {\n      return this._age;\n    },\n  },\n  /**\n   * Gets the age normalized to a value in the range [0.0, 1.0].\n   * @memberof Particle.prototype\n   * @type {number}\n   */\n  normalizedAge: {\n    get: function () {\n      return this._normalizedAge;\n    },\n  },\n});\n\nconst deltaScratch = new Cartesian3();\n\n/**\n * @private\n */\nParticle.prototype.update = function (dt, particleUpdateFunction) {\n  // Apply the velocity\n  Cartesian3.multiplyByScalar(this.velocity, dt, deltaScratch);\n  Cartesian3.add(this.position, deltaScratch, this.position);\n\n  // Update any forces.\n  if (defined(particleUpdateFunction)) {\n    particleUpdateFunction(this, dt);\n  }\n\n  // Age the particle\n  this._age += dt;\n\n  // Compute the normalized age.\n  if (this.life === Number.MAX_VALUE) {\n    this._normalizedAge = 0.0;\n  } else {\n    this._normalizedAge = this._age / this.life;\n  }\n\n  // If this particle is older than it's lifespan then die.\n  return this._age <= this.life;\n};\nexport default Particle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}