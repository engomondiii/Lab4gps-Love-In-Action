{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} whose value is an array whose items are the computed value\n * of other PositionProperty instances.\n *\n * @alias PositionPropertyArray\n * @constructor\n *\n * @param {Property[]} [value] An array of Property instances.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction PositionPropertyArray(value, referenceFrame) {\n  this._value = undefined;\n  this._definitionChanged = new Event();\n  this._eventHelper = new EventHelper();\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n  this.setValue(value);\n}\nObject.defineProperties(PositionPropertyArray.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in the array are constant.\n   * @memberof PositionPropertyArray.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      const value = this._value;\n      if (!defined(value)) {\n        return true;\n      }\n      const length = value.length;\n      for (let i = 0; i < length; i++) {\n        if (!Property.isConstant(value[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value or one of the properties in the array also changes.\n   * @memberof PositionPropertyArray.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof PositionPropertyArray.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    }\n  }\n});\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionPropertyArray.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionPropertyArray.prototype.getValueInReferenceFrame = function (time, referenceFrame, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const value = this._value;\n  if (!defined(value)) {\n    return undefined;\n  }\n  const length = value.length;\n  if (!defined(result)) {\n    result = new Array(length);\n  }\n  let i = 0;\n  let x = 0;\n  while (i < length) {\n    const property = value[i];\n    const itemValue = property.getValueInReferenceFrame(time, referenceFrame, result[i]);\n    if (defined(itemValue)) {\n      result[x] = itemValue;\n      x++;\n    }\n    i++;\n  }\n  result.length = x;\n  return result;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Property[]} value An array of Property instances.\n */\nPositionPropertyArray.prototype.setValue = function (value) {\n  const eventHelper = this._eventHelper;\n  eventHelper.removeAll();\n  if (defined(value)) {\n    this._value = value.slice();\n    const length = value.length;\n    for (let i = 0; i < length; i++) {\n      const property = value[i];\n      if (defined(property)) {\n        eventHelper.add(property.definitionChanged, PositionPropertyArray.prototype._raiseDefinitionChanged, this);\n      }\n    }\n  } else {\n    this._value = undefined;\n  }\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPositionPropertyArray.prototype.equals = function (other) {\n  return this === other ||\n  //\n  other instanceof PositionPropertyArray &&\n  //\n  this._referenceFrame === other._referenceFrame &&\n  //\n  Property.arrayEquals(this._value, other._value);\n};\nPositionPropertyArray.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default PositionPropertyArray;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","Event","EventHelper","JulianDate","ReferenceFrame","Property","PositionPropertyArray","value","referenceFrame","_value","undefined","_definitionChanged","_eventHelper","_referenceFrame","FIXED","setValue","Object","defineProperties","prototype","isConstant","get","length","i","definitionChanged","timeScratch","getValue","time","result","now","getValueInReferenceFrame","Array","x","property","itemValue","eventHelper","removeAll","slice","add","_raiseDefinitionChanged","raiseEvent","equals","other","arrayEquals"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/PositionPropertyArray.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} whose value is an array whose items are the computed value\n * of other PositionProperty instances.\n *\n * @alias PositionPropertyArray\n * @constructor\n *\n * @param {Property[]} [value] An array of Property instances.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction PositionPropertyArray(value, referenceFrame) {\n  this._value = undefined;\n  this._definitionChanged = new Event();\n  this._eventHelper = new EventHelper();\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n  this.setValue(value);\n}\n\nObject.defineProperties(PositionPropertyArray.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in the array are constant.\n   * @memberof PositionPropertyArray.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      const value = this._value;\n      if (!defined(value)) {\n        return true;\n      }\n\n      const length = value.length;\n      for (let i = 0; i < length; i++) {\n        if (!Property.isConstant(value[i])) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value or one of the properties in the array also changes.\n   * @memberof PositionPropertyArray.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof PositionPropertyArray.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n  },\n});\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionPropertyArray.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionPropertyArray.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const value = this._value;\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  const length = value.length;\n  if (!defined(result)) {\n    result = new Array(length);\n  }\n  let i = 0;\n  let x = 0;\n  while (i < length) {\n    const property = value[i];\n    const itemValue = property.getValueInReferenceFrame(\n      time,\n      referenceFrame,\n      result[i],\n    );\n    if (defined(itemValue)) {\n      result[x] = itemValue;\n      x++;\n    }\n    i++;\n  }\n  result.length = x;\n  return result;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Property[]} value An array of Property instances.\n */\nPositionPropertyArray.prototype.setValue = function (value) {\n  const eventHelper = this._eventHelper;\n  eventHelper.removeAll();\n\n  if (defined(value)) {\n    this._value = value.slice();\n    const length = value.length;\n    for (let i = 0; i < length; i++) {\n      const property = value[i];\n      if (defined(property)) {\n        eventHelper.add(\n          property.definitionChanged,\n          PositionPropertyArray.prototype._raiseDefinitionChanged,\n          this,\n        );\n      }\n    }\n  } else {\n    this._value = undefined;\n  }\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPositionPropertyArray.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PositionPropertyArray && //\n      this._referenceFrame === other._referenceFrame && //\n      Property.arrayEquals(this._value, other._value))\n  );\n};\n\nPositionPropertyArray.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default PositionPropertyArray;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}