{"ast":null,"code":"/**\n * Simpler helper method to check for undefined simply for the benefit of\n * gaining better compression when minified by not needing to have multiple\n * comparisons to the `undefined` keyword in the codebase.\n */\nexport function isUndefined(value) {\n  return value === undefined;\n}\n/**\n * Simpler helper method to check for a boolean type simply for the benefit of\n * gaining better compression when minified by not needing to have multiple\n * `typeof` comparisons in the codebase.\n */\nexport function isBoolean(value) {\n  return typeof value === 'boolean';\n}\n/**\n * Assigns (shallow copies) the properties of `src` onto `dest`, if the\n * corresponding property on `dest` === `undefined`.\n *\n * @param {Object} dest The destination object.\n * @param {Object} src The source object.\n * @return {Object} The destination object (`dest`)\n */\nexport function defaults(dest, src) {\n  for (var prop in src) {\n    if (src.hasOwnProperty(prop) && isUndefined(dest[prop])) {\n      dest[prop] = src[prop];\n    }\n  }\n  return dest;\n}\n/**\n * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n * end of the string (by default, two periods: '..'). If the `str` length does not exceed\n * `len`, the string will be returned unchanged.\n *\n * @param {String} str The string to truncate and add an ellipsis to.\n * @param {Number} truncateLen The length to truncate the string at.\n * @param {String} [ellipsisChars=...] The ellipsis character(s) to add to the end of `str`\n *   when truncated. Defaults to '...'\n */\nexport function ellipsis(str, truncateLen, ellipsisChars) {\n  var ellipsisLength;\n  if (str.length > truncateLen) {\n    if (ellipsisChars == null) {\n      ellipsisChars = '&hellip;';\n      ellipsisLength = 3;\n    } else {\n      ellipsisLength = ellipsisChars.length;\n    }\n    str = str.substring(0, truncateLen - ellipsisLength) + ellipsisChars;\n  }\n  return str;\n}\n/**\n * Removes array elements by value. Mutates the input array.\n *\n * Using this instead of the ES5 Array.prototype.filter() function to prevent\n * creating many new arrays in memory for removing an element.\n *\n * @param arr The array to remove elements from. This array is mutated.\n * @param fn The element to remove.\n */\nexport function remove(arr, item) {\n  for (var i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === item) {\n      arr.splice(i, 1);\n    }\n  }\n}\n/**\n * Removes array elements based on a filtering function. Mutates the input\n * array.\n *\n * Using this instead of the ES5 Array.prototype.filter() function to prevent\n * creating many new arrays in memory for filtering.\n *\n * @param arr The array to remove elements from. This array is mutated.\n * @param fn The predicate function which should return `true` to remove an\n *   element.\n */\nexport function removeWithPredicate(arr, fn) {\n  for (var i = arr.length - 1; i >= 0; i--) {\n    if (fn(arr[i]) === true) {\n      arr.splice(i, 1);\n    }\n  }\n}\n/**\n * Function that should never be called but is used to check that every\n * enum value is handled using TypeScript's 'never' type.\n */\nexport function assertNever(theValue) {\n  throw new Error(\"Unhandled case for value: '\".concat(theValue, \"'\"));\n}","map":{"version":3,"names":["isUndefined","value","undefined","isBoolean","defaults","dest","src","prop","hasOwnProperty","ellipsis","str","truncateLen","ellipsisChars","ellipsisLength","length","substring","remove","arr","item","i","splice","removeWithPredicate","fn","assertNever","theValue","Error","concat"],"sources":["../../src/utils.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;AAKA,OAAM,SAAUA,WAAWA,CAACC,KAAU;EAClC,OAAOA,KAAK,KAAKC,SAAS;AAC9B;AAEA;;;;;AAKA,OAAM,SAAUC,SAASA,CAACF,KAAU;EAChC,OAAO,OAAOA,KAAK,KAAK,SAAS;AACrC;AAEA;;;;;;;;AAQA,OAAM,SAAUG,QAAQA,CAACC,IAAS,EAAEC,GAAQ;EACxC,KAAK,IAAIC,IAAI,IAAID,GAAG,EAAE;IAClB,IAAIA,GAAG,CAACE,cAAc,CAACD,IAAI,CAAC,IAAIP,WAAW,CAACK,IAAI,CAACE,IAAI,CAAC,CAAC,EAAE;MACrDF,IAAI,CAACE,IAAI,CAAC,GAAGD,GAAG,CAACC,IAAI,CAAC;;;EAI9B,OAAOF,IAAI;AACf;AAEA;;;;;;;;;;AAUA,OAAM,SAAUI,QAAQA,CAACC,GAAW,EAAEC,WAAmB,EAAEC,aAAsB;EAC7E,IAAIC,cAAsB;EAE1B,IAAIH,GAAG,CAACI,MAAM,GAAGH,WAAW,EAAE;IAC1B,IAAIC,aAAa,IAAI,IAAI,EAAE;MACvBA,aAAa,GAAG,UAAU;MAC1BC,cAAc,GAAG,CAAC;KACrB,MAAM;MACHA,cAAc,GAAGD,aAAa,CAACE,MAAM;;IAGzCJ,GAAG,GAAGA,GAAG,CAACK,SAAS,CAAC,CAAC,EAAEJ,WAAW,GAAGE,cAAc,CAAC,GAAGD,aAAa;;EAExE,OAAOF,GAAG;AACd;AAEA;;;;;;;;;AASA,OAAM,SAAUM,MAAMA,CAAIC,GAAQ,EAAEC,IAAO;EACvC,KAAK,IAAIC,CAAC,GAAGF,GAAG,CAACH,MAAM,GAAG,CAAC,EAAEK,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACtC,IAAIF,GAAG,CAACE,CAAC,CAAC,KAAKD,IAAI,EAAE;MACjBD,GAAG,CAACG,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;;;AAG5B;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUE,mBAAmBA,CAAIJ,GAAQ,EAAEK,EAAwB;EACrE,KAAK,IAAIH,CAAC,GAAGF,GAAG,CAACH,MAAM,GAAG,CAAC,EAAEK,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACtC,IAAIG,EAAE,CAACL,GAAG,CAACE,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MACrBF,GAAG,CAACG,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;;;AAG5B;AAEA;;;;AAIA,OAAM,SAAUI,WAAWA,CAACC,QAAe;EACvC,MAAM,IAAIC,KAAK,CAAC,8BAAAC,MAAA,CAA8BF,QAAQ,MAAG,CAAC;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}