{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"precision highp float;\\n\\\n\\n\\\nczm_modelVertexOutput defaultVertexOutput(vec3 positionMC) {\\n\\\n    czm_modelVertexOutput vsOutput;\\n\\\n    vsOutput.positionMC = positionMC;\\n\\\n    vsOutput.pointSize = 1.0;\\n\\\n    return vsOutput;\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // Initialize the attributes struct with all\\n\\\n    // attributes except quantized ones.\\n\\\n    ProcessedAttributes attributes;\\n\\\n    initializeAttributes(attributes);\\n\\\n\\n\\\n    // Dequantize the quantized ones and add them to the\\n\\\n    // attributes struct.\\n\\\n    #ifdef USE_DEQUANTIZATION\\n\\\n    dequantizationStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_MORPH_TARGETS\\n\\\n    morphTargetsStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_SKINNING\\n\\\n    skinningStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_PRIMITIVE_OUTLINE\\n\\\n    primitiveOutlineStage();\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute the bitangent according to the formula in the glTF spec.\\n\\\n    // Normal and tangents can be affected by morphing and skinning, so\\n\\\n    // the bitangent should not be computed until their values are finalized.\\n\\\n    #ifdef HAS_BITANGENTS\\n\\\n    attributes.bitangentMC = normalize(cross(attributes.normalMC, attributes.tangentMC) * attributes.tangentSignMC);\\n\\\n    #endif\\n\\\n\\n\\\n    FeatureIds featureIds;\\n\\\n    featureIdStage(featureIds, attributes);\\n\\\n\\n\\\n    #ifdef HAS_SELECTED_FEATURE_ID\\n\\\n    SelectedFeature feature;\\n\\\n    selectedFeatureIdStage(feature, featureIds);\\n\\\n    // Handle any show properties that come from the style.\\n\\\n    cpuStylingStage(attributes.positionMC, feature);\\n\\\n    #endif\\n\\\n\\n\\\n    #if defined(USE_2D_POSITIONS) || defined(USE_2D_INSTANCING)\\n\\\n    // The scene mode 2D pipeline stage and instancing stage add a different\\n\\\n    // model view matrix to accurately project the model to 2D. However, the\\n\\\n    // output positions and normals should be transformed by the 3D matrices\\n\\\n    // to keep the data the same for the fragment shader.\\n\\\n    mat4 modelView = czm_modelView3D;\\n\\\n    mat3 normal = czm_normal3D;\\n\\\n    #else\\n\\\n    // These are used for individual model projection because they will\\n\\\n    // automatically change based on the scene mode.\\n\\\n    mat4 modelView = czm_modelView;\\n\\\n    mat3 normal = czm_normal;\\n\\\n    #endif\\n\\\n\\n\\\n    // Update the position for this instance in place\\n\\\n    #ifdef HAS_INSTANCING\\n\\\n\\n\\\n        // The legacy instance stage is used when rendering i3dm models that\\n\\\n        // encode instances transforms in world space, as opposed to glTF models\\n\\\n        // that use EXT_mesh_gpu_instancing, where instance transforms are encoded\\n\\\n        // in object space.\\n\\\n        #ifdef USE_LEGACY_INSTANCING\\n\\\n        mat4 instanceModelView;\\n\\\n        mat3 instanceModelViewInverseTranspose;\\n\\\n\\n\\\n        legacyInstancingStage(attributes, instanceModelView, instanceModelViewInverseTranspose);\\n\\\n\\n\\\n        modelView = instanceModelView;\\n\\\n        normal = instanceModelViewInverseTranspose;\\n\\\n        #else\\n\\\n        instancingStage(attributes);\\n\\\n        #endif\\n\\\n\\n\\\n        #ifdef USE_PICKING\\n\\\n        v_pickColor = a_pickColor;\\n\\\n        #endif\\n\\\n\\n\\\n    #endif\\n\\\n\\n\\\n    Metadata metadata;\\n\\\n    MetadataClass metadataClass;\\n\\\n    MetadataStatistics metadataStatistics;\\n\\\n    metadataStage(metadata, metadataClass, metadataStatistics, attributes);\\n\\\n\\n\\\n    #ifdef HAS_VERTICAL_EXAGGERATION\\n\\\n    verticalExaggerationStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_CUSTOM_VERTEX_SHADER\\n\\\n    czm_modelVertexOutput vsOutput = defaultVertexOutput(attributes.positionMC);\\n\\\n    customShaderStage(vsOutput, attributes, featureIds, metadata, metadataClass, metadataStatistics);\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute the final position in each coordinate system needed.\\n\\\n    // This returns the value that will be assigned to gl_Position.\\n\\\n    vec4 positionClip = geometryStage(attributes, modelView, normal);\\n\\\n\\n\\\n    // This must go after the geometry stage as it needs v_positionWC\\n\\\n    #ifdef HAS_ATMOSPHERE\\n\\\n    atmosphereStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef ENABLE_CLIPPING_POLYGONS\\n\\\n    modelClippingPolygonsStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_SILHOUETTE\\n\\\n    silhouetteStage(attributes, positionClip);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_POINT_CLOUD_SHOW_STYLE\\n\\\n    float show = pointCloudShowStylingStage(attributes, metadata);\\n\\\n    #else\\n\\\n    float show = 1.0;\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_POINT_CLOUD_BACK_FACE_CULLING\\n\\\n    show *= pointCloudBackFaceCullingStage();\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_POINT_CLOUD_COLOR_STYLE\\n\\\n    v_pointCloudColor = pointCloudColorStylingStage(attributes, metadata);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef PRIMITIVE_TYPE_POINTS\\n\\\n        #ifdef HAS_CUSTOM_VERTEX_SHADER\\n\\\n        gl_PointSize = vsOutput.pointSize;\\n\\\n        #elif defined(HAS_POINT_CLOUD_POINT_SIZE_STYLE) || defined(HAS_POINT_CLOUD_ATTENUATION)\\n\\\n        gl_PointSize = pointCloudPointSizeStylingStage(attributes, metadata);\\n\\\n        #else\\n\\\n        gl_PointSize = 1.0;\\n\\\n        #endif\\n\\\n\\n\\\n        gl_PointSize *= show;\\n\\\n    #endif\\n\\\n\\n\\\n    // Important NOT to compute gl_Position = show * positionClip or we hit:\\n\\\n    // https://github.com/CesiumGS/cesium/issues/11270\\n\\\n    //\\n\\\n    // We will discard points with v_pointCloudShow == 0 in the fragment shader.\\n\\\n    gl_Position = positionClip;\\n\\\n\\n\\\n    #ifdef HAS_POINT_CLOUD_SHOW_STYLE\\n\\\n    v_pointCloudShow = show;\\n\\\n    #endif\\n\\\n}\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Model/ModelVS.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"precision highp float;\\n\\\n\\n\\\nczm_modelVertexOutput defaultVertexOutput(vec3 positionMC) {\\n\\\n    czm_modelVertexOutput vsOutput;\\n\\\n    vsOutput.positionMC = positionMC;\\n\\\n    vsOutput.pointSize = 1.0;\\n\\\n    return vsOutput;\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // Initialize the attributes struct with all\\n\\\n    // attributes except quantized ones.\\n\\\n    ProcessedAttributes attributes;\\n\\\n    initializeAttributes(attributes);\\n\\\n\\n\\\n    // Dequantize the quantized ones and add them to the\\n\\\n    // attributes struct.\\n\\\n    #ifdef USE_DEQUANTIZATION\\n\\\n    dequantizationStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_MORPH_TARGETS\\n\\\n    morphTargetsStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_SKINNING\\n\\\n    skinningStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_PRIMITIVE_OUTLINE\\n\\\n    primitiveOutlineStage();\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute the bitangent according to the formula in the glTF spec.\\n\\\n    // Normal and tangents can be affected by morphing and skinning, so\\n\\\n    // the bitangent should not be computed until their values are finalized.\\n\\\n    #ifdef HAS_BITANGENTS\\n\\\n    attributes.bitangentMC = normalize(cross(attributes.normalMC, attributes.tangentMC) * attributes.tangentSignMC);\\n\\\n    #endif\\n\\\n\\n\\\n    FeatureIds featureIds;\\n\\\n    featureIdStage(featureIds, attributes);\\n\\\n\\n\\\n    #ifdef HAS_SELECTED_FEATURE_ID\\n\\\n    SelectedFeature feature;\\n\\\n    selectedFeatureIdStage(feature, featureIds);\\n\\\n    // Handle any show properties that come from the style.\\n\\\n    cpuStylingStage(attributes.positionMC, feature);\\n\\\n    #endif\\n\\\n\\n\\\n    #if defined(USE_2D_POSITIONS) || defined(USE_2D_INSTANCING)\\n\\\n    // The scene mode 2D pipeline stage and instancing stage add a different\\n\\\n    // model view matrix to accurately project the model to 2D. However, the\\n\\\n    // output positions and normals should be transformed by the 3D matrices\\n\\\n    // to keep the data the same for the fragment shader.\\n\\\n    mat4 modelView = czm_modelView3D;\\n\\\n    mat3 normal = czm_normal3D;\\n\\\n    #else\\n\\\n    // These are used for individual model projection because they will\\n\\\n    // automatically change based on the scene mode.\\n\\\n    mat4 modelView = czm_modelView;\\n\\\n    mat3 normal = czm_normal;\\n\\\n    #endif\\n\\\n\\n\\\n    // Update the position for this instance in place\\n\\\n    #ifdef HAS_INSTANCING\\n\\\n\\n\\\n        // The legacy instance stage is used when rendering i3dm models that\\n\\\n        // encode instances transforms in world space, as opposed to glTF models\\n\\\n        // that use EXT_mesh_gpu_instancing, where instance transforms are encoded\\n\\\n        // in object space.\\n\\\n        #ifdef USE_LEGACY_INSTANCING\\n\\\n        mat4 instanceModelView;\\n\\\n        mat3 instanceModelViewInverseTranspose;\\n\\\n\\n\\\n        legacyInstancingStage(attributes, instanceModelView, instanceModelViewInverseTranspose);\\n\\\n\\n\\\n        modelView = instanceModelView;\\n\\\n        normal = instanceModelViewInverseTranspose;\\n\\\n        #else\\n\\\n        instancingStage(attributes);\\n\\\n        #endif\\n\\\n\\n\\\n        #ifdef USE_PICKING\\n\\\n        v_pickColor = a_pickColor;\\n\\\n        #endif\\n\\\n\\n\\\n    #endif\\n\\\n\\n\\\n    Metadata metadata;\\n\\\n    MetadataClass metadataClass;\\n\\\n    MetadataStatistics metadataStatistics;\\n\\\n    metadataStage(metadata, metadataClass, metadataStatistics, attributes);\\n\\\n\\n\\\n    #ifdef HAS_VERTICAL_EXAGGERATION\\n\\\n    verticalExaggerationStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_CUSTOM_VERTEX_SHADER\\n\\\n    czm_modelVertexOutput vsOutput = defaultVertexOutput(attributes.positionMC);\\n\\\n    customShaderStage(vsOutput, attributes, featureIds, metadata, metadataClass, metadataStatistics);\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute the final position in each coordinate system needed.\\n\\\n    // This returns the value that will be assigned to gl_Position.\\n\\\n    vec4 positionClip = geometryStage(attributes, modelView, normal);\\n\\\n\\n\\\n    // This must go after the geometry stage as it needs v_positionWC\\n\\\n    #ifdef HAS_ATMOSPHERE\\n\\\n    atmosphereStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef ENABLE_CLIPPING_POLYGONS\\n\\\n    modelClippingPolygonsStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_SILHOUETTE\\n\\\n    silhouetteStage(attributes, positionClip);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_POINT_CLOUD_SHOW_STYLE\\n\\\n    float show = pointCloudShowStylingStage(attributes, metadata);\\n\\\n    #else\\n\\\n    float show = 1.0;\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_POINT_CLOUD_BACK_FACE_CULLING\\n\\\n    show *= pointCloudBackFaceCullingStage();\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_POINT_CLOUD_COLOR_STYLE\\n\\\n    v_pointCloudColor = pointCloudColorStylingStage(attributes, metadata);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef PRIMITIVE_TYPE_POINTS\\n\\\n        #ifdef HAS_CUSTOM_VERTEX_SHADER\\n\\\n        gl_PointSize = vsOutput.pointSize;\\n\\\n        #elif defined(HAS_POINT_CLOUD_POINT_SIZE_STYLE) || defined(HAS_POINT_CLOUD_ATTENUATION)\\n\\\n        gl_PointSize = pointCloudPointSizeStylingStage(attributes, metadata);\\n\\\n        #else\\n\\\n        gl_PointSize = 1.0;\\n\\\n        #endif\\n\\\n\\n\\\n        gl_PointSize *= show;\\n\\\n    #endif\\n\\\n\\n\\\n    // Important NOT to compute gl_Position = show * positionClip or we hit:\\n\\\n    // https://github.com/CesiumGS/cesium/issues/11270\\n\\\n    //\\n\\\n    // We will discard points with v_pointCloudShow == 0 in the fragment shader.\\n\\\n    gl_Position = positionClip;\\n\\\n\\n\\\n    #ifdef HAS_POINT_CLOUD_SHOW_STYLE\\n\\\n    v_pointCloudShow = show;\\n\\\n    #endif\\n\\\n}\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACfignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}