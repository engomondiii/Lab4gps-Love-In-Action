{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Apply a HSB color shift to an RGB color.\\n\\\n *\\n\\\n * @param {vec3} rgb The color in RGB space.\\n\\\n * @param {vec3} hsbShift The amount to shift each component. The xyz components correspond to hue, saturation, and brightness. Shifting the hue by +/- 1.0 corresponds to shifting the hue by a full cycle. Saturation and brightness are clamped between 0 and 1 after the adjustment\\n\\\n * @param {bool} ignoreBlackPixels If true, black pixels will be unchanged. This is necessary in some shaders such as atmosphere-related effects.\\n\\\n *\\n\\\n * @return {vec3} The RGB color after shifting in HSB space and clamping saturation and brightness to a valid range.\\n\\\n */\\n\\\nvec3 czm_applyHSBShift(vec3 rgb, vec3 hsbShift, bool ignoreBlackPixels) {\\n\\\n    // Convert rgb color to hsb\\n\\\n    vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n\\n\\\n    // Perform hsb shift\\n\\\n    // Hue cycles around so no clamp is needed.\\n\\\n    hsb.x += hsbShift.x; // hue\\n\\\n    hsb.y = clamp(hsb.y + hsbShift.y, 0.0, 1.0); // saturation\\n\\\n\\n\\\n    // brightness\\n\\\n    //\\n\\\n    // Some shaders such as atmosphere-related effects need to leave black\\n\\\n    // pixels unchanged\\n\\\n    if (ignoreBlackPixels) {\\n\\\n        hsb.z = hsb.z > czm_epsilon7 ? hsb.z + hsbShift.z : 0.0;\\n\\\n    } else {\\n\\\n        hsb.z = hsb.z + hsbShift.z;\\n\\\n    }\\n\\\n    hsb.z = clamp(hsb.z, 0.0, 1.0);\\n\\\n\\n\\\n    // Convert shifted hsb back to rgb\\n\\\n    return czm_HSBToRGB(hsb);\\n\\\n}\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Builtin/Functions/applyHSBShift.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Apply a HSB color shift to an RGB color.\\n\\\n *\\n\\\n * @param {vec3} rgb The color in RGB space.\\n\\\n * @param {vec3} hsbShift The amount to shift each component. The xyz components correspond to hue, saturation, and brightness. Shifting the hue by +/- 1.0 corresponds to shifting the hue by a full cycle. Saturation and brightness are clamped between 0 and 1 after the adjustment\\n\\\n * @param {bool} ignoreBlackPixels If true, black pixels will be unchanged. This is necessary in some shaders such as atmosphere-related effects.\\n\\\n *\\n\\\n * @return {vec3} The RGB color after shifting in HSB space and clamping saturation and brightness to a valid range.\\n\\\n */\\n\\\nvec3 czm_applyHSBShift(vec3 rgb, vec3 hsbShift, bool ignoreBlackPixels) {\\n\\\n    // Convert rgb color to hsb\\n\\\n    vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n\\n\\\n    // Perform hsb shift\\n\\\n    // Hue cycles around so no clamp is needed.\\n\\\n    hsb.x += hsbShift.x; // hue\\n\\\n    hsb.y = clamp(hsb.y + hsbShift.y, 0.0, 1.0); // saturation\\n\\\n\\n\\\n    // brightness\\n\\\n    //\\n\\\n    // Some shaders such as atmosphere-related effects need to leave black\\n\\\n    // pixels unchanged\\n\\\n    if (ignoreBlackPixels) {\\n\\\n        hsb.z = hsb.z > czm_epsilon7 ? hsb.z + hsbShift.z : 0.0;\\n\\\n    } else {\\n\\\n        hsb.z = hsb.z + hsbShift.z;\\n\\\n    }\\n\\\n    hsb.z = clamp(hsb.z, 0.0, 1.0);\\n\\\n\\n\\\n    // Convert shifted hsb back to rgb\\n\\\n    return czm_HSBToRGB(hsb);\\n\\\n}\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}