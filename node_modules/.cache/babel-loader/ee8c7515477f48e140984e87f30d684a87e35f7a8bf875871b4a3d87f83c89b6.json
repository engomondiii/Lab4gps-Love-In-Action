{"ast":null,"code":"import Check from \"./Check.js\";\nimport CompressedTextureBuffer from \"./CompressedTextureBuffer.js\";\nimport defined from \"./defined.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nimport TaskProcessor from \"./TaskProcessor.js\";\n\n/**\n * Transcodes KTX2 textures using web workers.\n *\n * @private\n */\nfunction KTX2Transcoder() {}\nKTX2Transcoder._transcodeTaskProcessor = new TaskProcessor(\"transcodeKTX2\", Number.POSITIVE_INFINITY) // KTX2 transcoding is used in place of Resource.fetchImage, so it can't reject as \"just soooo busy right now\"\n;\nKTX2Transcoder._readyPromise = undefined;\nfunction makeReadyPromise() {\n  const readyPromise = KTX2Transcoder._transcodeTaskProcessor.initWebAssemblyModule({\n    wasmBinaryFile: \"ThirdParty/basis_transcoder.wasm\"\n  }).then(function (result) {\n    if (result) {\n      return KTX2Transcoder._transcodeTaskProcessor;\n    }\n    throw new RuntimeError(\"KTX2 transcoder could not be initialized.\");\n  });\n  KTX2Transcoder._readyPromise = readyPromise;\n}\nKTX2Transcoder.transcode = function (ktx2Buffer, supportedTargetFormats) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"supportedTargetFormats\", supportedTargetFormats);\n  //>>includeEnd('debug');\n\n  if (!defined(KTX2Transcoder._readyPromise)) {\n    makeReadyPromise();\n  }\n  return KTX2Transcoder._readyPromise.then(function (taskProcessor) {\n    let bufferView = ktx2Buffer;\n    if (ktx2Buffer instanceof ArrayBuffer) {\n      bufferView = new Uint8Array(ktx2Buffer);\n    }\n    const parameters = {\n      supportedTargetFormats: supportedTargetFormats,\n      ktx2Buffer: bufferView\n    };\n    return taskProcessor.scheduleTask(parameters, [bufferView.buffer]);\n  }).then(function (result) {\n    const levelsLength = result.length;\n    const faceKeys = Object.keys(result[0]);\n    for (let i = 0; i < levelsLength; i++) {\n      const faces = result[i];\n      for (let j = 0; j < faceKeys.length; j++) {\n        const face = faces[faceKeys[j]];\n        faces[faceKeys[j]] = new CompressedTextureBuffer(face.internalFormat, face.datatype, face.width, face.height, face.levelBuffer);\n      }\n    }\n\n    // Cleaning up parsed result if it's a single image\n    if (faceKeys.length === 1) {\n      for (let i = 0; i < levelsLength; ++i) {\n        result[i] = result[i][faceKeys[0]];\n      }\n      if (levelsLength === 1) {\n        result = result[0];\n      }\n    }\n    return result;\n  }).catch(function (error) {\n    throw error;\n  });\n};\nexport default KTX2Transcoder;","map":{"version":3,"names":["Check","CompressedTextureBuffer","defined","RuntimeError","TaskProcessor","KTX2Transcoder","_transcodeTaskProcessor","Number","POSITIVE_INFINITY","_readyPromise","undefined","makeReadyPromise","readyPromise","initWebAssemblyModule","wasmBinaryFile","then","result","transcode","ktx2Buffer","supportedTargetFormats","taskProcessor","bufferView","ArrayBuffer","Uint8Array","parameters","scheduleTask","buffer","levelsLength","length","faceKeys","Object","keys","i","faces","j","face","internalFormat","datatype","width","height","levelBuffer","catch","error"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/KTX2Transcoder.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport CompressedTextureBuffer from \"./CompressedTextureBuffer.js\";\nimport defined from \"./defined.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nimport TaskProcessor from \"./TaskProcessor.js\";\n\n/**\n * Transcodes KTX2 textures using web workers.\n *\n * @private\n */\nfunction KTX2Transcoder() {}\n\nKTX2Transcoder._transcodeTaskProcessor = new TaskProcessor(\n  \"transcodeKTX2\",\n  Number.POSITIVE_INFINITY, // KTX2 transcoding is used in place of Resource.fetchImage, so it can't reject as \"just soooo busy right now\"\n);\n\nKTX2Transcoder._readyPromise = undefined;\n\nfunction makeReadyPromise() {\n  const readyPromise = KTX2Transcoder._transcodeTaskProcessor\n    .initWebAssemblyModule({\n      wasmBinaryFile: \"ThirdParty/basis_transcoder.wasm\",\n    })\n    .then(function (result) {\n      if (result) {\n        return KTX2Transcoder._transcodeTaskProcessor;\n      }\n\n      throw new RuntimeError(\"KTX2 transcoder could not be initialized.\");\n    });\n  KTX2Transcoder._readyPromise = readyPromise;\n}\n\nKTX2Transcoder.transcode = function (ktx2Buffer, supportedTargetFormats) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"supportedTargetFormats\", supportedTargetFormats);\n  //>>includeEnd('debug');\n\n  if (!defined(KTX2Transcoder._readyPromise)) {\n    makeReadyPromise();\n  }\n\n  return KTX2Transcoder._readyPromise\n    .then(function (taskProcessor) {\n      let bufferView = ktx2Buffer;\n      if (ktx2Buffer instanceof ArrayBuffer) {\n        bufferView = new Uint8Array(ktx2Buffer);\n      }\n      const parameters = {\n        supportedTargetFormats: supportedTargetFormats,\n        ktx2Buffer: bufferView,\n      };\n      return taskProcessor.scheduleTask(parameters, [bufferView.buffer]);\n    })\n    .then(function (result) {\n      const levelsLength = result.length;\n      const faceKeys = Object.keys(result[0]);\n\n      for (let i = 0; i < levelsLength; i++) {\n        const faces = result[i];\n        for (let j = 0; j < faceKeys.length; j++) {\n          const face = faces[faceKeys[j]];\n          faces[faceKeys[j]] = new CompressedTextureBuffer(\n            face.internalFormat,\n            face.datatype,\n            face.width,\n            face.height,\n            face.levelBuffer,\n          );\n        }\n      }\n\n      // Cleaning up parsed result if it's a single image\n      if (faceKeys.length === 1) {\n        for (let i = 0; i < levelsLength; ++i) {\n          result[i] = result[i][faceKeys[0]];\n        }\n\n        if (levelsLength === 1) {\n          result = result[0];\n        }\n      }\n      return result;\n    })\n    .catch(function (error) {\n      throw error;\n    });\n};\n\nexport default KTX2Transcoder;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,uBAAuB,MAAM,8BAA8B;AAClE,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,aAAa,MAAM,oBAAoB;;AAE9C;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAAA,EAAG,CAAC;AAE3BA,cAAc,CAACC,uBAAuB,GAAG,IAAIF,aAAa,CACxD,eAAe,EACfG,MAAM,CAACC,iBACT,CAAC,CAD2B;AAC3B;AAEDH,cAAc,CAACI,aAAa,GAAGC,SAAS;AAExC,SAASC,gBAAgBA,CAAA,EAAG;EAC1B,MAAMC,YAAY,GAAGP,cAAc,CAACC,uBAAuB,CACxDO,qBAAqB,CAAC;IACrBC,cAAc,EAAE;EAClB,CAAC,CAAC,CACDC,IAAI,CAAC,UAAUC,MAAM,EAAE;IACtB,IAAIA,MAAM,EAAE;MACV,OAAOX,cAAc,CAACC,uBAAuB;IAC/C;IAEA,MAAM,IAAIH,YAAY,CAAC,2CAA2C,CAAC;EACrE,CAAC,CAAC;EACJE,cAAc,CAACI,aAAa,GAAGG,YAAY;AAC7C;AAEAP,cAAc,CAACY,SAAS,GAAG,UAAUC,UAAU,EAAEC,sBAAsB,EAAE;EACvE;EACAnB,KAAK,CAACE,OAAO,CAAC,wBAAwB,EAAEiB,sBAAsB,CAAC;EAC/D;;EAEA,IAAI,CAACjB,OAAO,CAACG,cAAc,CAACI,aAAa,CAAC,EAAE;IAC1CE,gBAAgB,CAAC,CAAC;EACpB;EAEA,OAAON,cAAc,CAACI,aAAa,CAChCM,IAAI,CAAC,UAAUK,aAAa,EAAE;IAC7B,IAAIC,UAAU,GAAGH,UAAU;IAC3B,IAAIA,UAAU,YAAYI,WAAW,EAAE;MACrCD,UAAU,GAAG,IAAIE,UAAU,CAACL,UAAU,CAAC;IACzC;IACA,MAAMM,UAAU,GAAG;MACjBL,sBAAsB,EAAEA,sBAAsB;MAC9CD,UAAU,EAAEG;IACd,CAAC;IACD,OAAOD,aAAa,CAACK,YAAY,CAACD,UAAU,EAAE,CAACH,UAAU,CAACK,MAAM,CAAC,CAAC;EACpE,CAAC,CAAC,CACDX,IAAI,CAAC,UAAUC,MAAM,EAAE;IACtB,MAAMW,YAAY,GAAGX,MAAM,CAACY,MAAM;IAClC,MAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC,CAAC;IAEvC,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,YAAY,EAAEK,CAAC,EAAE,EAAE;MACrC,MAAMC,KAAK,GAAGjB,MAAM,CAACgB,CAAC,CAAC;MACvB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACD,MAAM,EAAEM,CAAC,EAAE,EAAE;QACxC,MAAMC,IAAI,GAAGF,KAAK,CAACJ,QAAQ,CAACK,CAAC,CAAC,CAAC;QAC/BD,KAAK,CAACJ,QAAQ,CAACK,CAAC,CAAC,CAAC,GAAG,IAAIjC,uBAAuB,CAC9CkC,IAAI,CAACC,cAAc,EACnBD,IAAI,CAACE,QAAQ,EACbF,IAAI,CAACG,KAAK,EACVH,IAAI,CAACI,MAAM,EACXJ,IAAI,CAACK,WACP,CAAC;MACH;IACF;;IAEA;IACA,IAAIX,QAAQ,CAACD,MAAM,KAAK,CAAC,EAAE;MACzB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,YAAY,EAAE,EAAEK,CAAC,EAAE;QACrChB,MAAM,CAACgB,CAAC,CAAC,GAAGhB,MAAM,CAACgB,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;MACpC;MAEA,IAAIF,YAAY,KAAK,CAAC,EAAE;QACtBX,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC;MACpB;IACF;IACA,OAAOA,MAAM;EACf,CAAC,CAAC,CACDyB,KAAK,CAAC,UAAUC,KAAK,EAAE;IACtB,MAAMA,KAAK;EACb,CAAC,CAAC;AACN,CAAC;AAED,eAAerC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}