{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Globe/Globe.js\",\n  _s = $RefreshSig$();\n// src/components/Globe/Globe.js\n/* global window */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLang } from '../Context/LangContext'; // Adjust the path based on your project structure\nimport '../styles/Globe.css'; // Import the separate style file\nimport useLocationInfo from '../hooks/useLocationInfo'; // Adjust the path based on your project structure\nimport LocationInfoPanel from './LocationInfoPanel'; // Import the LocationInfoPanel component\nimport Controls from './Controls'; // Import the Controls component\nimport GlobeViewer from './GlobeViewer'; // Import GlobeViewer component\n\n/**\n * Function to perform reverse geocoding using OpenCage Geocoding API.\n * In production, it's recommended to handle this on the backend to secure the API key.\n *\n * @param {string} latitude\n * @param {string} longitude\n * @param {string} language - Language code ('en' for English, 'ko' for Korean)\n * @returns {Promise<string>} - Returns the formatted address in the desired language.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reverseGeocode = async (latitude, longitude, language = 'en') => {\n  const apiKey = process.env.REACT_APP_OPENCAGE_API_KEY; // Ensure this is set in .env\n  const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}&language=${language}`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.results && data.results.length > 0) {\n      return data.results[0].formatted;\n    } else {\n      return 'Address not found';\n    }\n  } catch (error) {\n    console.error('Error in reverse geocoding:', error);\n    throw error;\n  }\n};\nconst Globe = () => {\n  _s();\n  const [isRotating, setIsRotating] = useState(true);\n  const [viewer, setViewer] = useState(null);\n  const animationIdRef = useRef(null); // Reference to the animation frame ID\n\n  const {\n    language\n  } = useLang();\n\n  // Inline dictionary for multi-language support\n  const text = {\n    en: {\n      stopRotation: \"Stop Rotation\",\n      startRotation: \"Start Rotation\",\n      locationDetails: \"Location Details\",\n      address: \"Address\",\n      latitude: \"Latitude\",\n      longitude: \"Longitude\",\n      height: \"Height\",\n      zoomLevel: \"Zoom Level\",\n      unknown: \"Unknown\",\n      loading: \"Loading...\",\n      error: \"Error\"\n    },\n    ko: {\n      stopRotation: \"회전 중지\",\n      startRotation: \"회전 시작\",\n      locationDetails: \"위치 정보\",\n      address: \"주소\",\n      latitude: \"위도\",\n      longitude: \"경도\",\n      height: \"높이\",\n      zoomLevel: \"확대 수준\",\n      unknown: \"알 수 없음\",\n      loading: \"로딩 중...\",\n      error: \"오류\"\n    }\n  };\n\n  // Helper function to return the correct text based on the current language\n  const t = key => text[language][key];\n\n  /**\n   * Callback when Viewer is initialized.\n   *\n   * @param {Cesium.Viewer} viewerInstance - The initialized Cesium Viewer instance.\n   */\n  const handleViewerInitialized = viewerInstance => {\n    setViewer(viewerInstance);\n    // Start continuous rotation\n    startRotation(viewerInstance);\n  };\n\n  /**\n   * Function to start the globe's rotation.\n   *\n   * @param {Cesium.Viewer} viewerInstance - The Cesium Viewer instance.\n   */\n  const startRotation = viewerInstance => {\n    if (!viewerInstance) return;\n    const rotateEarth = () => {\n      const spinRate = 0.01;\n      const delta = spinRate / 60; // Assuming 60 FPS\n      viewerInstance.scene.camera.rotate(window.Cesium.Cartesian3.UNIT_Z, -delta);\n      animationIdRef.current = requestAnimationFrame(rotateEarth);\n    };\n    rotateEarth(); // Start rotation loop\n    setIsRotating(true);\n  };\n\n  /**\n   * Function to stop the globe's rotation.\n   */\n  const stopRotation = () => {\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n      setIsRotating(false);\n    }\n  };\n\n  /**\n   * Function to toggle the globe's rotation state.\n   */\n  const toggleRotation = () => {\n    if (isRotating) {\n      stopRotation();\n    } else {\n      if (viewer) {\n        startRotation(viewer);\n      }\n    }\n  };\n\n  /**\n   * Hide or show other site elements (Navbar, Footer, Home text, etc.)\n   * based on whether we're in fullscreen mode.\n   */\n  const toggleElementsVisibility = hide => {\n    // List any CSS selectors you want hidden in fullscreen\n    const selectors = ['.navbar',\n    // Navbar\n    '.footer',\n    // Footer\n    '.intro',\n    // Intro section in Home.js\n    '.features' // Features section in Home.js\n    ];\n    selectors.forEach(selector => {\n      document.querySelectorAll(selector).forEach(elem => {\n        // If hide === true => display: 'none'\n        // If hide === false => display: ''\n        elem.style.display = hide ? 'none' : '';\n      });\n    });\n  };\n\n  /**\n   * Handler for 'fullscreenchange' events.\n   */\n  const handleFullScreenChange = () => {\n    const isFullScreen = !!document.fullscreenElement;\n    toggleElementsVisibility(isFullScreen);\n  };\n\n  // Attach fullscreenchange event listener\n  useEffect(() => {\n    document.addEventListener('fullscreenchange', handleFullScreenChange);\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullScreenChange);\n      stopRotation(); // Ensure rotation is stopped on unmount\n    };\n  }, []);\n\n  // Use the custom hook to manage location info, passing the current language\n  const {\n    locationInfo,\n    loading,\n    error\n  } = useLocationInfo(viewer, window.Cesium,\n  // Explicitly reference the global Cesium object\n  reverseGeocode, language // Pass the selected language\n  );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"globe-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(GlobeViewer, {\n      onViewerInitialized: handleViewerInitialized\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      isRotating: isRotating,\n      onStartRotation: () => {\n        if (viewer) {\n          startRotation(viewer);\n        }\n      },\n      onStopRotation: stopRotation,\n      translate: t\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LocationInfoPanel, {\n      locationInfo: locationInfo,\n      loading: loading,\n      error: error,\n      translate: t\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(Globe, \"AUspGZDVDsUuYNPntTcterNAOIM=\", false, function () {\n  return [useLang, useLocationInfo];\n});\n_c = Globe;\nGlobe.propTypes = {\n  // Define prop types if necessary\n};\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLang","useLocationInfo","LocationInfoPanel","Controls","GlobeViewer","jsxDEV","_jsxDEV","reverseGeocode","latitude","longitude","language","apiKey","process","env","REACT_APP_OPENCAGE_API_KEY","url","response","fetch","data","json","results","length","formatted","error","console","Globe","_s","isRotating","setIsRotating","viewer","setViewer","animationIdRef","text","en","stopRotation","startRotation","locationDetails","address","height","zoomLevel","unknown","loading","ko","t","key","handleViewerInitialized","viewerInstance","rotateEarth","spinRate","delta","scene","camera","rotate","window","Cesium","Cartesian3","UNIT_Z","current","requestAnimationFrame","cancelAnimationFrame","toggleRotation","toggleElementsVisibility","hide","selectors","forEach","selector","document","querySelectorAll","elem","style","display","handleFullScreenChange","isFullScreen","fullscreenElement","addEventListener","removeEventListener","locationInfo","className","children","onViewerInitialized","fileName","_jsxFileName","lineNumber","columnNumber","onStartRotation","onStopRotation","translate","_c","propTypes","$RefreshReg$"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Globe/Globe.js"],"sourcesContent":["// src/components/Globe/Globe.js\n/* global window */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLang } from '../Context/LangContext'; // Adjust the path based on your project structure\nimport '../styles/Globe.css'; // Import the separate style file\nimport useLocationInfo from '../hooks/useLocationInfo'; // Adjust the path based on your project structure\nimport LocationInfoPanel from './LocationInfoPanel'; // Import the LocationInfoPanel component\nimport Controls from './Controls'; // Import the Controls component\nimport GlobeViewer from './GlobeViewer'; // Import GlobeViewer component\n\n/**\n * Function to perform reverse geocoding using OpenCage Geocoding API.\n * In production, it's recommended to handle this on the backend to secure the API key.\n *\n * @param {string} latitude\n * @param {string} longitude\n * @param {string} language - Language code ('en' for English, 'ko' for Korean)\n * @returns {Promise<string>} - Returns the formatted address in the desired language.\n */\nconst reverseGeocode = async (latitude, longitude, language = 'en') => {\n  const apiKey = process.env.REACT_APP_OPENCAGE_API_KEY; // Ensure this is set in .env\n  const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}&language=${language}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.results && data.results.length > 0) {\n      return data.results[0].formatted;\n    } else {\n      return 'Address not found';\n    }\n  } catch (error) {\n    console.error('Error in reverse geocoding:', error);\n    throw error;\n  }\n};\n\nconst Globe = () => {\n  const [isRotating, setIsRotating] = useState(true);\n  const [viewer, setViewer] = useState(null);\n  const animationIdRef = useRef(null); // Reference to the animation frame ID\n\n  const { language } = useLang();\n\n  // Inline dictionary for multi-language support\n  const text = {\n    en: {\n      stopRotation: \"Stop Rotation\",\n      startRotation: \"Start Rotation\",\n      locationDetails: \"Location Details\",\n      address: \"Address\",\n      latitude: \"Latitude\",\n      longitude: \"Longitude\",\n      height: \"Height\",\n      zoomLevel: \"Zoom Level\",\n      unknown: \"Unknown\",\n      loading: \"Loading...\",\n      error: \"Error\",\n    },\n    ko: {\n      stopRotation: \"회전 중지\",\n      startRotation: \"회전 시작\",\n      locationDetails: \"위치 정보\",\n      address: \"주소\",\n      latitude: \"위도\",\n      longitude: \"경도\",\n      height: \"높이\",\n      zoomLevel: \"확대 수준\",\n      unknown: \"알 수 없음\",\n      loading: \"로딩 중...\",\n      error: \"오류\",\n    },\n  };\n\n  // Helper function to return the correct text based on the current language\n  const t = (key) => text[language][key];\n\n  /**\n   * Callback when Viewer is initialized.\n   *\n   * @param {Cesium.Viewer} viewerInstance - The initialized Cesium Viewer instance.\n   */\n  const handleViewerInitialized = (viewerInstance) => {\n    setViewer(viewerInstance);\n    // Start continuous rotation\n    startRotation(viewerInstance);\n  };\n\n  /**\n   * Function to start the globe's rotation.\n   *\n   * @param {Cesium.Viewer} viewerInstance - The Cesium Viewer instance.\n   */\n  const startRotation = (viewerInstance) => {\n    if (!viewerInstance) return;\n\n    const rotateEarth = () => {\n      const spinRate = 0.01;\n      const delta = spinRate / 60; // Assuming 60 FPS\n      viewerInstance.scene.camera.rotate(window.Cesium.Cartesian3.UNIT_Z, -delta);\n      animationIdRef.current = requestAnimationFrame(rotateEarth);\n    };\n\n    rotateEarth(); // Start rotation loop\n    setIsRotating(true);\n  };\n\n  /**\n   * Function to stop the globe's rotation.\n   */\n  const stopRotation = () => {\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n      setIsRotating(false);\n    }\n  };\n\n  /**\n   * Function to toggle the globe's rotation state.\n   */\n  const toggleRotation = () => {\n    if (isRotating) {\n      stopRotation();\n    } else {\n      if (viewer) {\n        startRotation(viewer);\n      }\n    }\n  };\n\n  /**\n   * Hide or show other site elements (Navbar, Footer, Home text, etc.)\n   * based on whether we're in fullscreen mode.\n   */\n  const toggleElementsVisibility = (hide) => {\n    // List any CSS selectors you want hidden in fullscreen\n    const selectors = [\n      '.navbar',    // Navbar\n      '.footer',    // Footer\n      '.intro',     // Intro section in Home.js\n      '.features'   // Features section in Home.js\n    ];\n\n    selectors.forEach((selector) => {\n      document.querySelectorAll(selector).forEach((elem) => {\n        // If hide === true => display: 'none'\n        // If hide === false => display: ''\n        elem.style.display = hide ? 'none' : '';\n      });\n    });\n  };\n\n  /**\n   * Handler for 'fullscreenchange' events.\n   */\n  const handleFullScreenChange = () => {\n    const isFullScreen = !!document.fullscreenElement;\n    toggleElementsVisibility(isFullScreen);\n  };\n\n  // Attach fullscreenchange event listener\n  useEffect(() => {\n    document.addEventListener('fullscreenchange', handleFullScreenChange);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullScreenChange);\n      stopRotation(); // Ensure rotation is stopped on unmount\n    };\n  }, []);\n\n  // Use the custom hook to manage location info, passing the current language\n  const { locationInfo, loading, error } = useLocationInfo(\n    viewer,\n    window.Cesium, // Explicitly reference the global Cesium object\n    reverseGeocode,\n    language // Pass the selected language\n  );\n\n  return (\n    <div className=\"globe-wrapper\">\n      {/* GlobeViewer initializes the Cesium Viewer */}\n      <GlobeViewer onViewerInitialized={handleViewerInitialized} />\n\n      {/* Controls */}\n      <Controls\n        isRotating={isRotating}\n        onStartRotation={() => {\n          if (viewer) {\n            startRotation(viewer);\n          }\n        }}\n        onStopRotation={stopRotation}\n        translate={t}\n      />\n\n      {/* Location Details Panel */}\n      <LocationInfoPanel\n        locationInfo={locationInfo}\n        loading={loading}\n        error={error}\n        translate={t}\n      />\n    </div>\n  );\n};\n\nGlobe.propTypes = {\n  // Define prop types if necessary\n};\n\nexport default Globe;\n"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,OAAO,QAAQ,wBAAwB,CAAC,CAAC;AAClD,OAAO,qBAAqB,CAAC,CAAC;AAC9B,OAAOC,eAAe,MAAM,0BAA0B,CAAC,CAAC;AACxD,OAAOC,iBAAiB,MAAM,qBAAqB,CAAC,CAAC;AACrD,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AACnC,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,GAAG,IAAI,KAAK;EACrE,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAAC,CAAC;EACvD,MAAMC,GAAG,GAAG,kDAAkDP,QAAQ,IAAIC,SAAS,QAAQE,MAAM,aAAaD,QAAQ,EAAE;EAExH,IAAI;IACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC3C,OAAOH,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,SAAS;IAClC,CAAC,MAAM;MACL,OAAO,mBAAmB;IAC5B;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAME,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC8B,MAAM,EAAEC,SAAS,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAMgC,cAAc,GAAGjC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAErC,MAAM;IAAEY;EAAS,CAAC,GAAGV,OAAO,CAAC,CAAC;;EAE9B;EACA,MAAMgC,IAAI,GAAG;IACXC,EAAE,EAAE;MACFC,YAAY,EAAE,eAAe;MAC7BC,aAAa,EAAE,gBAAgB;MAC/BC,eAAe,EAAE,kBAAkB;MACnCC,OAAO,EAAE,SAAS;MAClB7B,QAAQ,EAAE,UAAU;MACpBC,SAAS,EAAE,WAAW;MACtB6B,MAAM,EAAE,QAAQ;MAChBC,SAAS,EAAE,YAAY;MACvBC,OAAO,EAAE,SAAS;MAClBC,OAAO,EAAE,YAAY;MACrBlB,KAAK,EAAE;IACT,CAAC;IACDmB,EAAE,EAAE;MACFR,YAAY,EAAE,OAAO;MACrBC,aAAa,EAAE,OAAO;MACtBC,eAAe,EAAE,OAAO;MACxBC,OAAO,EAAE,IAAI;MACb7B,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAE,IAAI;MACf6B,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,OAAO;MAClBC,OAAO,EAAE,QAAQ;MACjBC,OAAO,EAAE,SAAS;MAClBlB,KAAK,EAAE;IACT;EACF,CAAC;;EAED;EACA,MAAMoB,CAAC,GAAIC,GAAG,IAAKZ,IAAI,CAACtB,QAAQ,CAAC,CAACkC,GAAG,CAAC;;EAEtC;AACF;AACA;AACA;AACA;EACE,MAAMC,uBAAuB,GAAIC,cAAc,IAAK;IAClDhB,SAAS,CAACgB,cAAc,CAAC;IACzB;IACAX,aAAa,CAACW,cAAc,CAAC;EAC/B,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAMX,aAAa,GAAIW,cAAc,IAAK;IACxC,IAAI,CAACA,cAAc,EAAE;IAErB,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACxB,MAAMC,QAAQ,GAAG,IAAI;MACrB,MAAMC,KAAK,GAAGD,QAAQ,GAAG,EAAE,CAAC,CAAC;MAC7BF,cAAc,CAACI,KAAK,CAACC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,UAAU,CAACC,MAAM,EAAE,CAACP,KAAK,CAAC;MAC3ElB,cAAc,CAAC0B,OAAO,GAAGC,qBAAqB,CAACX,WAAW,CAAC;IAC7D,CAAC;IAEDA,WAAW,CAAC,CAAC,CAAC,CAAC;IACfnB,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;;EAED;AACF;AACA;EACE,MAAMM,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIH,cAAc,CAAC0B,OAAO,EAAE;MAC1BE,oBAAoB,CAAC5B,cAAc,CAAC0B,OAAO,CAAC;MAC5C1B,cAAc,CAAC0B,OAAO,GAAG,IAAI;MAC7B7B,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;;EAED;AACF;AACA;EACE,MAAMgC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIjC,UAAU,EAAE;MACdO,YAAY,CAAC,CAAC;IAChB,CAAC,MAAM;MACL,IAAIL,MAAM,EAAE;QACVM,aAAa,CAACN,MAAM,CAAC;MACvB;IACF;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMgC,wBAAwB,GAAIC,IAAI,IAAK;IACzC;IACA,MAAMC,SAAS,GAAG,CAChB,SAAS;IAAK;IACd,SAAS;IAAK;IACd,QAAQ;IAAM;IACd,WAAW,CAAG;IAAA,CACf;IAEDA,SAAS,CAACC,OAAO,CAAEC,QAAQ,IAAK;MAC9BC,QAAQ,CAACC,gBAAgB,CAACF,QAAQ,CAAC,CAACD,OAAO,CAAEI,IAAI,IAAK;QACpD;QACA;QACAA,IAAI,CAACC,KAAK,CAACC,OAAO,GAAGR,IAAI,GAAG,MAAM,GAAG,EAAE;MACzC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;;EAED;AACF;AACA;EACE,MAAMS,sBAAsB,GAAGA,CAAA,KAAM;IACnC,MAAMC,YAAY,GAAG,CAAC,CAACN,QAAQ,CAACO,iBAAiB;IACjDZ,wBAAwB,CAACW,YAAY,CAAC;EACxC,CAAC;;EAED;EACA3E,SAAS,CAAC,MAAM;IACdqE,QAAQ,CAACQ,gBAAgB,CAAC,kBAAkB,EAAEH,sBAAsB,CAAC;IAErE,OAAO,MAAM;MACXL,QAAQ,CAACS,mBAAmB,CAAC,kBAAkB,EAAEJ,sBAAsB,CAAC;MACxErC,YAAY,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM;IAAE0C,YAAY;IAAEnC,OAAO;IAAElB;EAAM,CAAC,GAAGtB,eAAe,CACtD4B,MAAM,EACNwB,MAAM,CAACC,MAAM;EAAE;EACf/C,cAAc,EACdG,QAAQ,CAAC;EACX,CAAC;EAED,oBACEJ,OAAA;IAAKuE,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAE5BxE,OAAA,CAACF,WAAW;MAAC2E,mBAAmB,EAAElC;IAAwB;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG7D7E,OAAA,CAACH,QAAQ;MACPwB,UAAU,EAAEA,UAAW;MACvByD,eAAe,EAAEA,CAAA,KAAM;QACrB,IAAIvD,MAAM,EAAE;UACVM,aAAa,CAACN,MAAM,CAAC;QACvB;MACF,CAAE;MACFwD,cAAc,EAAEnD,YAAa;MAC7BoD,SAAS,EAAE3C;IAAE;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC,eAGF7E,OAAA,CAACJ,iBAAiB;MAChB0E,YAAY,EAAEA,YAAa;MAC3BnC,OAAO,EAAEA,OAAQ;MACjBlB,KAAK,EAAEA,KAAM;MACb+D,SAAS,EAAE3C;IAAE;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACzD,EAAA,CAxKID,KAAK;EAAA,QAKYzB,OAAO,EAkIaC,eAAe;AAAA;AAAAsF,EAAA,GAvIpD9D,KAAK;AA0KXA,KAAK,CAAC+D,SAAS,GAAG;EAChB;AAAA,CACD;AAED,eAAe/D,KAAK;AAAC,IAAA8D,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}