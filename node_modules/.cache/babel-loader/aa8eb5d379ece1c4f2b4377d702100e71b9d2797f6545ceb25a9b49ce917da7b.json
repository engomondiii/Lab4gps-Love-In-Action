{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {object} CorridorGraphics.ConstructorOptions\n *\n * Initialization options for the CorridorGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the corridor.\n * @property {Property | Cartesian3[]} [positions] A Property specifying the array of {@link Cartesian3} positions that define the centerline of the corridor.\n * @property {Property | number} [width] A numeric Property specifying the distance between the edges of the corridor.\n * @property {Property | number} [height=0] A numeric Property specifying the altitude of the corridor relative to the ellipsoid surface.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | number} [extrudedHeight] A numeric Property specifying the altitude of the corridor's extruded face relative to the ellipsoid surface.\n * @property {Property | HeightReference} [extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @property {Property | CornerType} [cornerType=CornerType.ROUNDED] A {@link CornerType} Property specifying the style of the corners.\n * @property {Property | number} [granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the distance between each latitude and longitude.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the corridor is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the corridor.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the corridor is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the corridor casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this corridor will be displayed.\n * @property {Property | ClassificationType} [classificationType=ClassificationType.BOTH] An enum Property specifying whether this corridor will classify terrain, 3D Tiles, or both when on the ground.\n * @property {ConstantProperty | number} [zIndex] A Property specifying the zIndex of the corridor, used for ordering.  Only has an effect if height and extrudedHeight are undefined, and if the corridor is static.\n */\n\n/**\n * Describes a corridor, which is a shape defined by a centerline and width that\n * conforms to the curvature of the globe. It can be placed on the surface or at altitude\n * and can optionally be extruded into a volume.\n *\n * @alias CorridorGraphics\n * @constructor\n *\n * @param {CorridorGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Corridor.html|Cesium Sandcastle Corridor Demo}\n */\nfunction CorridorGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._cornerType = undefined;\n  this._cornerTypeSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\nObject.defineProperties(CorridorGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof CorridorGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n  /**\n   * Gets or sets a Property specifying the array of {@link Cartesian3} positions that define the centerline of the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  width: createPropertyDescriptor(\"width\"),\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the corridor extrusion.\n   * Setting this property creates a corridor shaped volume starting at height and ending\n   * at this altitude.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n  /**\n   * Gets or sets the {@link CornerType} Property specifying how corners are styled.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default CornerType.ROUNDED\n   */\n  cornerType: createPropertyDescriptor(\"cornerType\"),\n  /**\n   * Gets or sets the numeric Property specifying the sampling distance between each latitude and longitude point.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n  /**\n   * Gets or sets the boolean Property specifying whether the corridor is filled with the provided material.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n  /**\n   * Gets or sets the Property specifying the material used to fill the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {MaterialProperty|undefined}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n  /**\n   * Gets or sets the Property specifying whether the corridor is outlined.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n  /**\n   * Get or sets the enum Property specifying whether the corridor\n   * casts or receives shadows from light sources.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this corridor will be displayed.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\"),\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this corridor will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n  /**\n   * Gets or sets the zIndex Property specifying the ordering of the corridor.  Only has an effect if the coridor is static and neither height or exturdedHeight are specified.\n   * @memberof CorridorGraphics.prototype\n   * @type {ConstantProperty|undefined}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\")\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {CorridorGraphics} [result] The object onto which to store the result.\n * @returns {CorridorGraphics} The modified result parameter or a new instance if one was not provided.\n */\nCorridorGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new CorridorGraphics(this);\n  }\n  result.show = this.show;\n  result.positions = this.positions;\n  result.width = this.width;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.cornerType = this.cornerType;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {CorridorGraphics} source The object to be merged into this object.\n */\nCorridorGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.width = defaultValue(this.width, source.width);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(this.heightReference, source.heightReference);\n  this.extrudedHeight = defaultValue(this.extrudedHeight, source.extrudedHeight);\n  this.extrudedHeightReference = defaultValue(this.extrudedHeightReference, source.extrudedHeightReference);\n  this.cornerType = defaultValue(this.cornerType, source.cornerType);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n  this.classificationType = defaultValue(this.classificationType, source.classificationType);\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\nexport default CorridorGraphics;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","CorridorGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_positions","_positionsSubscription","_width","_widthSubscription","_height","_heightSubscription","_heightReference","_heightReferenceSubscription","_extrudedHeight","_extrudedHeightSubscription","_extrudedHeightReference","_extrudedHeightReferenceSubscription","_cornerType","_cornerTypeSubscription","_granularity","_granularitySubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_classificationType","_classificationTypeSubscription","_zIndex","_zIndexSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","positions","width","height","heightReference","extrudedHeight","extrudedHeightReference","cornerType","granularity","fill","material","outline","outlineColor","outlineWidth","shadows","distanceDisplayCondition","classificationType","zIndex","clone","result","source"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/CorridorGraphics.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {object} CorridorGraphics.ConstructorOptions\n *\n * Initialization options for the CorridorGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the corridor.\n * @property {Property | Cartesian3[]} [positions] A Property specifying the array of {@link Cartesian3} positions that define the centerline of the corridor.\n * @property {Property | number} [width] A numeric Property specifying the distance between the edges of the corridor.\n * @property {Property | number} [height=0] A numeric Property specifying the altitude of the corridor relative to the ellipsoid surface.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | number} [extrudedHeight] A numeric Property specifying the altitude of the corridor's extruded face relative to the ellipsoid surface.\n * @property {Property | HeightReference} [extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @property {Property | CornerType} [cornerType=CornerType.ROUNDED] A {@link CornerType} Property specifying the style of the corners.\n * @property {Property | number} [granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the distance between each latitude and longitude.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the corridor is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the corridor.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the corridor is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the corridor casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this corridor will be displayed.\n * @property {Property | ClassificationType} [classificationType=ClassificationType.BOTH] An enum Property specifying whether this corridor will classify terrain, 3D Tiles, or both when on the ground.\n * @property {ConstantProperty | number} [zIndex] A Property specifying the zIndex of the corridor, used for ordering.  Only has an effect if height and extrudedHeight are undefined, and if the corridor is static.\n */\n\n/**\n * Describes a corridor, which is a shape defined by a centerline and width that\n * conforms to the curvature of the globe. It can be placed on the surface or at altitude\n * and can optionally be extruded into a volume.\n *\n * @alias CorridorGraphics\n * @constructor\n *\n * @param {CorridorGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Corridor.html|Cesium Sandcastle Corridor Demo}\n */\nfunction CorridorGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._cornerType = undefined;\n  this._cornerTypeSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(CorridorGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof CorridorGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets a Property specifying the array of {@link Cartesian3} positions that define the centerline of the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the corridor extrusion.\n   * Setting this property creates a corridor shaped volume starting at height and ending\n   * at this altitude.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the {@link CornerType} Property specifying how corners are styled.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default CornerType.ROUNDED\n   */\n  cornerType: createPropertyDescriptor(\"cornerType\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the sampling distance between each latitude and longitude point.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the corridor is filled with the provided material.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {MaterialProperty|undefined}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the corridor is outlined.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the corridor\n   * casts or receives shadows from light sources.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this corridor will be displayed.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\",\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this corridor will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ordering of the corridor.  Only has an effect if the coridor is static and neither height or exturdedHeight are specified.\n   * @memberof CorridorGraphics.prototype\n   * @type {ConstantProperty|undefined}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {CorridorGraphics} [result] The object onto which to store the result.\n * @returns {CorridorGraphics} The modified result parameter or a new instance if one was not provided.\n */\nCorridorGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new CorridorGraphics(this);\n  }\n  result.show = this.show;\n  result.positions = this.positions;\n  result.width = this.width;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.cornerType = this.cornerType;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {CorridorGraphics} source The object to be merged into this object.\n */\nCorridorGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.width = defaultValue(this.width, source.width);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference,\n  );\n  this.extrudedHeight = defaultValue(\n    this.extrudedHeight,\n    source.extrudedHeight,\n  );\n  this.extrudedHeightReference = defaultValue(\n    this.extrudedHeightReference,\n    source.extrudedHeightReference,\n  );\n  this.cornerType = defaultValue(this.cornerType, source.cornerType);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition,\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType,\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\nexport default CorridorGraphics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}