{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport MetadataClass from \"./MetadataClass.js\";\nimport MetadataEnum from \"./MetadataEnum.js\";\n\n/**\n * A schema containing classes and enums.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Metadata|3D Metadata Specification} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} [options.id] The ID of the schema\n * @param {string} [options.name] The name of the schema.\n * @param {string} [options.description] The description of the schema.\n * @param {string} [options.version] The application-specific version of the schema.\n * @param {Object<string, MetadataClass>} [options.classes] Classes defined in the schema, where each key is the class ID.\n * @param {Object<string, MetadataEnum>} [options.enums] Enums defined in the schema, where each key is the enum ID.\n * @param {*} [options.extras] Extra user-defined properties.\n * @param {object} [options.extensions] An object containing extensions.\n *\n * @alias MetadataSchema\n * @constructor\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction MetadataSchema(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const classes = defaultValue(options.classes, {});\n  const enums = defaultValue(options.enums, {});\n  this._classes = classes;\n  this._enums = enums;\n  this._id = options.id;\n  this._name = options.name;\n  this._description = options.description;\n  this._version = options.version;\n  this._extras = clone(options.extras, true);\n  this._extensions = clone(options.extensions, true);\n}\n\n/**\n * Creates a {@link MetadataSchema} from either 3D Tiles 1.1, 3DTILES_metadata, EXT_structural_metadata, or EXT_feature_metadata.\n *\n * @param {object} schema The schema JSON object.\n *\n * @returns {MetadataSchema} The newly created metadata schema\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nMetadataSchema.fromJson = function (schema) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"schema\", schema);\n  //>>includeEnd('debug');\n\n  const enums = {};\n  if (defined(schema.enums)) {\n    for (const enumId in schema.enums) {\n      if (schema.enums.hasOwnProperty(enumId)) {\n        enums[enumId] = MetadataEnum.fromJson({\n          id: enumId,\n          enum: schema.enums[enumId]\n        });\n      }\n    }\n  }\n  const classes = {};\n  if (defined(schema.classes)) {\n    for (const classId in schema.classes) {\n      if (schema.classes.hasOwnProperty(classId)) {\n        classes[classId] = MetadataClass.fromJson({\n          id: classId,\n          class: schema.classes[classId],\n          enums: enums\n        });\n      }\n    }\n  }\n  return new MetadataSchema({\n    id: schema.id,\n    name: schema.name,\n    description: schema.description,\n    version: schema.version,\n    classes: classes,\n    enums: enums,\n    extras: schema.extras,\n    extensions: schema.extensions\n  });\n};\nObject.defineProperties(MetadataSchema.prototype, {\n  /**\n   * Classes defined in the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {Object<string, MetadataClass>}\n   * @readonly\n   */\n  classes: {\n    get: function () {\n      return this._classes;\n    }\n  },\n  /**\n   * Enums defined in the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {Object<string, MetadataEnum>}\n   * @readonly\n   */\n  enums: {\n    get: function () {\n      return this._enums;\n    }\n  },\n  /**\n   * The ID of the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {string}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n  /**\n   * The name of the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {string}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    }\n  },\n  /**\n   * The description of the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {string}\n   * @readonly\n   */\n  description: {\n    get: function () {\n      return this._description;\n    }\n  },\n  /**\n   * The application-specific version of the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {string}\n   * @readonly\n   */\n  version: {\n    get: function () {\n      return this._version;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {*}\n   * @readonly\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {object}\n   * @readonly\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\nexport default MetadataSchema;","map":{"version":3,"names":["Check","clone","defaultValue","defined","MetadataClass","MetadataEnum","MetadataSchema","options","EMPTY_OBJECT","classes","enums","_classes","_enums","_id","id","_name","name","_description","description","_version","version","_extras","extras","_extensions","extensions","fromJson","schema","typeOf","object","enumId","hasOwnProperty","enum","classId","class","Object","defineProperties","prototype","get"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/MetadataSchema.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport MetadataClass from \"./MetadataClass.js\";\nimport MetadataEnum from \"./MetadataEnum.js\";\n\n/**\n * A schema containing classes and enums.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Metadata|3D Metadata Specification} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} [options.id] The ID of the schema\n * @param {string} [options.name] The name of the schema.\n * @param {string} [options.description] The description of the schema.\n * @param {string} [options.version] The application-specific version of the schema.\n * @param {Object<string, MetadataClass>} [options.classes] Classes defined in the schema, where each key is the class ID.\n * @param {Object<string, MetadataEnum>} [options.enums] Enums defined in the schema, where each key is the enum ID.\n * @param {*} [options.extras] Extra user-defined properties.\n * @param {object} [options.extensions] An object containing extensions.\n *\n * @alias MetadataSchema\n * @constructor\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction MetadataSchema(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const classes = defaultValue(options.classes, {});\n  const enums = defaultValue(options.enums, {});\n\n  this._classes = classes;\n  this._enums = enums;\n  this._id = options.id;\n  this._name = options.name;\n  this._description = options.description;\n  this._version = options.version;\n  this._extras = clone(options.extras, true);\n  this._extensions = clone(options.extensions, true);\n}\n\n/**\n * Creates a {@link MetadataSchema} from either 3D Tiles 1.1, 3DTILES_metadata, EXT_structural_metadata, or EXT_feature_metadata.\n *\n * @param {object} schema The schema JSON object.\n *\n * @returns {MetadataSchema} The newly created metadata schema\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nMetadataSchema.fromJson = function (schema) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"schema\", schema);\n  //>>includeEnd('debug');\n\n  const enums = {};\n  if (defined(schema.enums)) {\n    for (const enumId in schema.enums) {\n      if (schema.enums.hasOwnProperty(enumId)) {\n        enums[enumId] = MetadataEnum.fromJson({\n          id: enumId,\n          enum: schema.enums[enumId],\n        });\n      }\n    }\n  }\n\n  const classes = {};\n  if (defined(schema.classes)) {\n    for (const classId in schema.classes) {\n      if (schema.classes.hasOwnProperty(classId)) {\n        classes[classId] = MetadataClass.fromJson({\n          id: classId,\n          class: schema.classes[classId],\n          enums: enums,\n        });\n      }\n    }\n  }\n\n  return new MetadataSchema({\n    id: schema.id,\n    name: schema.name,\n    description: schema.description,\n    version: schema.version,\n    classes: classes,\n    enums: enums,\n    extras: schema.extras,\n    extensions: schema.extensions,\n  });\n};\n\nObject.defineProperties(MetadataSchema.prototype, {\n  /**\n   * Classes defined in the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {Object<string, MetadataClass>}\n   * @readonly\n   */\n  classes: {\n    get: function () {\n      return this._classes;\n    },\n  },\n\n  /**\n   * Enums defined in the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {Object<string, MetadataEnum>}\n   * @readonly\n   */\n  enums: {\n    get: function () {\n      return this._enums;\n    },\n  },\n\n  /**\n   * The ID of the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {string}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * The name of the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {string}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * The description of the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {string}\n   * @readonly\n   */\n  description: {\n    get: function () {\n      return this._description;\n    },\n  },\n\n  /**\n   * The application-specific version of the schema.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {string}\n   * @readonly\n   */\n  version: {\n    get: function () {\n      return this._version;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {*}\n   * @readonly\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof MetadataSchema.prototype\n   * @type {object}\n   * @readonly\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\nexport default MetadataSchema;\n"],"mappings":"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EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,EAAE,EAAE;IACFuB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACxB,GAAG;IACjB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,IAAI,EAAE;IACJqB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACtB,KAAK;IACnB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,WAAW,EAAE;IACXmB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACpB,YAAY;IAC1B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,OAAO,EAAE;IACPiB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAClB,QAAQ;IACtB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,MAAM,EAAE;IACNe,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAChB,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,UAAU,EAAE;IACVa,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACd,WAAW;IACzB;EACF;AACF,CAAC,CAAC;AAEF,eAAejB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}