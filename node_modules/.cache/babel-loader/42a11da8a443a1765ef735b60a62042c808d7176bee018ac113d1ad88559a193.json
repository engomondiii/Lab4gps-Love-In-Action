{"ast":null,"code":"import { Check, defaultValue, defined } from \"@cesium/engine\";\n\n/**\n * A static class with helper functions used by CesiumInspector, Cesium3DTilesInspector, and VoxelInspector\n * @private\n */\nconst InspectorShared = {};\n\n/**\n * Creates a checkbox component\n * @param {string} labelText The text to display in the checkbox label\n * @param {string} checkedBinding The name of the variable used for checked binding\n * @param {string} [enableBinding] The name of the variable used for enable binding\n * @return {Element}\n */\nInspectorShared.createCheckbox = function (labelText, checkedBinding, enableBinding) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"labelText\", labelText);\n  Check.typeOf.string(\"checkedBinding\", checkedBinding);\n  //>>includeEnd('debug');\n  const checkboxContainer = document.createElement(\"div\");\n  const checkboxLabel = document.createElement(\"label\");\n  const checkboxInput = document.createElement(\"input\");\n  checkboxInput.type = \"checkbox\";\n  let binding = `checked: ${checkedBinding}`;\n  if (defined(enableBinding)) {\n    binding += `, enable: ${enableBinding}`;\n  }\n  checkboxInput.setAttribute(\"data-bind\", binding);\n  checkboxLabel.appendChild(checkboxInput);\n  checkboxLabel.appendChild(document.createTextNode(labelText));\n  checkboxContainer.appendChild(checkboxLabel);\n  return checkboxContainer;\n};\n\n/**\n * Creates a section element\n * @param {Element} panel The parent element\n * @param {string} headerText The text to display at the top of the section\n * @param {string} sectionVisibleBinding The name of the variable used for visible binding\n * @param {string} toggleSectionVisibilityBinding The name of the function used to toggle visibility\n * @return {Element}\n */\nInspectorShared.createSection = function (panel, headerText, sectionVisibleBinding, toggleSectionVisibilityBinding) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"panel\", panel);\n  Check.typeOf.string(\"headerText\", headerText);\n  Check.typeOf.string(\"sectionVisibleBinding\", sectionVisibleBinding);\n  Check.typeOf.string(\"toggleSectionVisibilityBinding\", toggleSectionVisibilityBinding);\n  //>>includeEnd('debug');\n  const section = document.createElement(\"div\");\n  section.className = \"cesium-cesiumInspector-section\";\n  section.setAttribute(\"data-bind\", `css: { \"cesium-cesiumInspector-section-collapsed\": !${sectionVisibleBinding} }`);\n  panel.appendChild(section);\n  const sectionHeader = document.createElement(\"h3\");\n  sectionHeader.className = \"cesium-cesiumInspector-sectionHeader\";\n  sectionHeader.appendChild(document.createTextNode(headerText));\n  sectionHeader.setAttribute(\"data-bind\", `click: ${toggleSectionVisibilityBinding}`);\n  section.appendChild(sectionHeader);\n  const sectionContent = document.createElement(\"div\");\n  sectionContent.className = \"cesium-cesiumInspector-sectionContent\";\n  section.appendChild(sectionContent);\n  return sectionContent;\n};\n\n/**\n * Creates a range input\n * @param {string} rangeText The text to display\n * @param {string} sliderValueBinding The name of the variable used for slider value binding\n * @param {number} min The minimum value\n * @param {number} max The maximum value\n * @param {number} [step] The step size. Defaults to \"any\".\n * @param {string} [inputValueBinding] The name of the variable used for input value binding\n * @return {Element}\n */\nInspectorShared.createRangeInput = function (rangeText, sliderValueBinding, min, max, step, inputValueBinding) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"rangeText\", rangeText);\n  Check.typeOf.string(\"sliderValueBinding\", sliderValueBinding);\n  Check.typeOf.number(\"min\", min);\n  Check.typeOf.number(\"max\", max);\n  //>>includeEnd('debug');\n\n  inputValueBinding = defaultValue(inputValueBinding, sliderValueBinding);\n  const input = document.createElement(\"input\");\n  input.setAttribute(\"data-bind\", `value: ${inputValueBinding}`);\n  input.type = \"number\";\n  const slider = document.createElement(\"input\");\n  slider.type = \"range\";\n  slider.min = min;\n  slider.max = max;\n  slider.step = defaultValue(step, \"any\");\n  slider.setAttribute(\"data-bind\", `valueUpdate: \"input\", value: ${sliderValueBinding}`);\n  const wrapper = document.createElement(\"div\");\n  wrapper.appendChild(slider);\n  const container = document.createElement(\"div\");\n  container.className = \"cesium-cesiumInspector-slider\";\n  container.appendChild(document.createTextNode(rangeText));\n  container.appendChild(input);\n  container.appendChild(wrapper);\n  return container;\n};\n\n/**\n * Creates a button component\n * @param {string} buttonText The button text\n * @param {string} clickedBinding The name of the variable used for clicked binding\n * @param {string} [activeBinding] The name of the variable used for active binding\n * @return {Element}\n */\nInspectorShared.createButton = function (buttonText, clickedBinding, activeBinding) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"buttonText\", buttonText);\n  Check.typeOf.string(\"clickedBinding\", clickedBinding);\n  //>>includeEnd('debug');\n\n  const button = document.createElement(\"button\");\n  button.type = \"button\";\n  button.textContent = buttonText;\n  button.className = \"cesium-cesiumInspector-pickButton\";\n  let binding = `click: ${clickedBinding}`;\n  if (defined(activeBinding)) {\n    binding += `, css: {\"cesium-cesiumInspector-pickButtonHighlight\" : ${activeBinding}}`;\n  }\n  button.setAttribute(\"data-bind\", binding);\n  return button;\n};\nexport default InspectorShared;","map":{"version":3,"names":["Check","defaultValue","defined","InspectorShared","createCheckbox","labelText","checkedBinding","enableBinding","typeOf","string","checkboxContainer","document","createElement","checkboxLabel","checkboxInput","type","binding","setAttribute","appendChild","createTextNode","createSection","panel","headerText","sectionVisibleBinding","toggleSectionVisibilityBinding","section","className","sectionHeader","sectionContent","createRangeInput","rangeText","sliderValueBinding","min","max","step","inputValueBinding","number","input","slider","wrapper","container","createButton","buttonText","clickedBinding","activeBinding","button","textContent"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/InspectorShared.js"],"sourcesContent":["import { Check, defaultValue, defined } from \"@cesium/engine\";\n\n/**\n * A static class with helper functions used by CesiumInspector, Cesium3DTilesInspector, and VoxelInspector\n * @private\n */\nconst InspectorShared = {};\n\n/**\n * Creates a checkbox component\n * @param {string} labelText The text to display in the checkbox label\n * @param {string} checkedBinding The name of the variable used for checked binding\n * @param {string} [enableBinding] The name of the variable used for enable binding\n * @return {Element}\n */\nInspectorShared.createCheckbox = function (\n  labelText,\n  checkedBinding,\n  enableBinding,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"labelText\", labelText);\n  Check.typeOf.string(\"checkedBinding\", checkedBinding);\n  //>>includeEnd('debug');\n  const checkboxContainer = document.createElement(\"div\");\n  const checkboxLabel = document.createElement(\"label\");\n  const checkboxInput = document.createElement(\"input\");\n  checkboxInput.type = \"checkbox\";\n\n  let binding = `checked: ${checkedBinding}`;\n  if (defined(enableBinding)) {\n    binding += `, enable: ${enableBinding}`;\n  }\n  checkboxInput.setAttribute(\"data-bind\", binding);\n  checkboxLabel.appendChild(checkboxInput);\n  checkboxLabel.appendChild(document.createTextNode(labelText));\n  checkboxContainer.appendChild(checkboxLabel);\n  return checkboxContainer;\n};\n\n/**\n * Creates a section element\n * @param {Element} panel The parent element\n * @param {string} headerText The text to display at the top of the section\n * @param {string} sectionVisibleBinding The name of the variable used for visible binding\n * @param {string} toggleSectionVisibilityBinding The name of the function used to toggle visibility\n * @return {Element}\n */\nInspectorShared.createSection = function (\n  panel,\n  headerText,\n  sectionVisibleBinding,\n  toggleSectionVisibilityBinding,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"panel\", panel);\n  Check.typeOf.string(\"headerText\", headerText);\n  Check.typeOf.string(\"sectionVisibleBinding\", sectionVisibleBinding);\n  Check.typeOf.string(\n    \"toggleSectionVisibilityBinding\",\n    toggleSectionVisibilityBinding,\n  );\n  //>>includeEnd('debug');\n  const section = document.createElement(\"div\");\n  section.className = \"cesium-cesiumInspector-section\";\n  section.setAttribute(\n    \"data-bind\",\n    `css: { \"cesium-cesiumInspector-section-collapsed\": !${sectionVisibleBinding} }`,\n  );\n  panel.appendChild(section);\n\n  const sectionHeader = document.createElement(\"h3\");\n  sectionHeader.className = \"cesium-cesiumInspector-sectionHeader\";\n  sectionHeader.appendChild(document.createTextNode(headerText));\n  sectionHeader.setAttribute(\n    \"data-bind\",\n    `click: ${toggleSectionVisibilityBinding}`,\n  );\n  section.appendChild(sectionHeader);\n\n  const sectionContent = document.createElement(\"div\");\n  sectionContent.className = \"cesium-cesiumInspector-sectionContent\";\n  section.appendChild(sectionContent);\n  return sectionContent;\n};\n\n/**\n * Creates a range input\n * @param {string} rangeText The text to display\n * @param {string} sliderValueBinding The name of the variable used for slider value binding\n * @param {number} min The minimum value\n * @param {number} max The maximum value\n * @param {number} [step] The step size. Defaults to \"any\".\n * @param {string} [inputValueBinding] The name of the variable used for input value binding\n * @return {Element}\n */\nInspectorShared.createRangeInput = function (\n  rangeText,\n  sliderValueBinding,\n  min,\n  max,\n  step,\n  inputValueBinding,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"rangeText\", rangeText);\n  Check.typeOf.string(\"sliderValueBinding\", sliderValueBinding);\n  Check.typeOf.number(\"min\", min);\n  Check.typeOf.number(\"max\", max);\n  //>>includeEnd('debug');\n\n  inputValueBinding = defaultValue(inputValueBinding, sliderValueBinding);\n  const input = document.createElement(\"input\");\n  input.setAttribute(\"data-bind\", `value: ${inputValueBinding}`);\n  input.type = \"number\";\n\n  const slider = document.createElement(\"input\");\n  slider.type = \"range\";\n  slider.min = min;\n  slider.max = max;\n  slider.step = defaultValue(step, \"any\");\n  slider.setAttribute(\n    \"data-bind\",\n    `valueUpdate: \"input\", value: ${sliderValueBinding}`,\n  );\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.appendChild(slider);\n\n  const container = document.createElement(\"div\");\n  container.className = \"cesium-cesiumInspector-slider\";\n  container.appendChild(document.createTextNode(rangeText));\n  container.appendChild(input);\n  container.appendChild(wrapper);\n\n  return container;\n};\n\n/**\n * Creates a button component\n * @param {string} buttonText The button text\n * @param {string} clickedBinding The name of the variable used for clicked binding\n * @param {string} [activeBinding] The name of the variable used for active binding\n * @return {Element}\n */\nInspectorShared.createButton = function (\n  buttonText,\n  clickedBinding,\n  activeBinding,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"buttonText\", buttonText);\n  Check.typeOf.string(\"clickedBinding\", clickedBinding);\n  //>>includeEnd('debug');\n\n  const button = document.createElement(\"button\");\n  button.type = \"button\";\n  button.textContent = buttonText;\n  button.className = \"cesium-cesiumInspector-pickButton\";\n  let binding = `click: ${clickedBinding}`;\n  if (defined(activeBinding)) {\n    binding += `, css: {\"cesium-cesiumInspector-pickButtonHighlight\" : ${activeBinding}}`;\n  }\n  button.setAttribute(\"data-bind\", binding);\n\n  return button;\n};\n\nexport default InspectorShared;\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,YAAY,EAAEC,OAAO,QAAQ,gBAAgB;;AAE7D;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,CAAC,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,eAAe,CAACC,cAAc,GAAG,UAC/BC,SAAS,EACTC,cAAc,EACdC,aAAa,EACb;EACA;EACAP,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,WAAW,EAAEJ,SAAS,CAAC;EAC3CL,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,gBAAgB,EAAEH,cAAc,CAAC;EACrD;EACA,MAAMI,iBAAiB,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EACvD,MAAMC,aAAa,GAAGF,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;EACrD,MAAME,aAAa,GAAGH,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;EACrDE,aAAa,CAACC,IAAI,GAAG,UAAU;EAE/B,IAAIC,OAAO,GAAG,YAAYV,cAAc,EAAE;EAC1C,IAAIJ,OAAO,CAACK,aAAa,CAAC,EAAE;IAC1BS,OAAO,IAAI,aAAaT,aAAa,EAAE;EACzC;EACAO,aAAa,CAACG,YAAY,CAAC,WAAW,EAAED,OAAO,CAAC;EAChDH,aAAa,CAACK,WAAW,CAACJ,aAAa,CAAC;EACxCD,aAAa,CAACK,WAAW,CAACP,QAAQ,CAACQ,cAAc,CAACd,SAAS,CAAC,CAAC;EAC7DK,iBAAiB,CAACQ,WAAW,CAACL,aAAa,CAAC;EAC5C,OAAOH,iBAAiB;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,eAAe,CAACiB,aAAa,GAAG,UAC9BC,KAAK,EACLC,UAAU,EACVC,qBAAqB,EACrBC,8BAA8B,EAC9B;EACA;EACAxB,KAAK,CAACE,OAAO,CAAC,OAAO,EAAEmB,KAAK,CAAC;EAC7BrB,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,YAAY,EAAEa,UAAU,CAAC;EAC7CtB,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,uBAAuB,EAAEc,qBAAqB,CAAC;EACnEvB,KAAK,CAACQ,MAAM,CAACC,MAAM,CACjB,gCAAgC,EAChCe,8BACF,CAAC;EACD;EACA,MAAMC,OAAO,GAAGd,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EAC7Ca,OAAO,CAACC,SAAS,GAAG,gCAAgC;EACpDD,OAAO,CAACR,YAAY,CAClB,WAAW,EACX,uDAAuDM,qBAAqB,IAC9E,CAAC;EACDF,KAAK,CAACH,WAAW,CAACO,OAAO,CAAC;EAE1B,MAAME,aAAa,GAAGhB,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;EAClDe,aAAa,CAACD,SAAS,GAAG,sCAAsC;EAChEC,aAAa,CAACT,WAAW,CAACP,QAAQ,CAACQ,cAAc,CAACG,UAAU,CAAC,CAAC;EAC9DK,aAAa,CAACV,YAAY,CACxB,WAAW,EACX,UAAUO,8BAA8B,EAC1C,CAAC;EACDC,OAAO,CAACP,WAAW,CAACS,aAAa,CAAC;EAElC,MAAMC,cAAc,GAAGjB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EACpDgB,cAAc,CAACF,SAAS,GAAG,uCAAuC;EAClED,OAAO,CAACP,WAAW,CAACU,cAAc,CAAC;EACnC,OAAOA,cAAc;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzB,eAAe,CAAC0B,gBAAgB,GAAG,UACjCC,SAAS,EACTC,kBAAkB,EAClBC,GAAG,EACHC,GAAG,EACHC,IAAI,EACJC,iBAAiB,EACjB;EACA;EACAnC,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,WAAW,EAAEqB,SAAS,CAAC;EAC3C9B,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,oBAAoB,EAAEsB,kBAAkB,CAAC;EAC7D/B,KAAK,CAACQ,MAAM,CAAC4B,MAAM,CAAC,KAAK,EAAEJ,GAAG,CAAC;EAC/BhC,KAAK,CAACQ,MAAM,CAAC4B,MAAM,CAAC,KAAK,EAAEH,GAAG,CAAC;EAC/B;;EAEAE,iBAAiB,GAAGlC,YAAY,CAACkC,iBAAiB,EAAEJ,kBAAkB,CAAC;EACvE,MAAMM,KAAK,GAAG1B,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;EAC7CyB,KAAK,CAACpB,YAAY,CAAC,WAAW,EAAE,UAAUkB,iBAAiB,EAAE,CAAC;EAC9DE,KAAK,CAACtB,IAAI,GAAG,QAAQ;EAErB,MAAMuB,MAAM,GAAG3B,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;EAC9C0B,MAAM,CAACvB,IAAI,GAAG,OAAO;EACrBuB,MAAM,CAACN,GAAG,GAAGA,GAAG;EAChBM,MAAM,CAACL,GAAG,GAAGA,GAAG;EAChBK,MAAM,CAACJ,IAAI,GAAGjC,YAAY,CAACiC,IAAI,EAAE,KAAK,CAAC;EACvCI,MAAM,CAACrB,YAAY,CACjB,WAAW,EACX,gCAAgCc,kBAAkB,EACpD,CAAC;EAED,MAAMQ,OAAO,GAAG5B,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EAC7C2B,OAAO,CAACrB,WAAW,CAACoB,MAAM,CAAC;EAE3B,MAAME,SAAS,GAAG7B,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EAC/C4B,SAAS,CAACd,SAAS,GAAG,+BAA+B;EACrDc,SAAS,CAACtB,WAAW,CAACP,QAAQ,CAACQ,cAAc,CAACW,SAAS,CAAC,CAAC;EACzDU,SAAS,CAACtB,WAAW,CAACmB,KAAK,CAAC;EAC5BG,SAAS,CAACtB,WAAW,CAACqB,OAAO,CAAC;EAE9B,OAAOC,SAAS;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACArC,eAAe,CAACsC,YAAY,GAAG,UAC7BC,UAAU,EACVC,cAAc,EACdC,aAAa,EACb;EACA;EACA5C,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,YAAY,EAAEiC,UAAU,CAAC;EAC7C1C,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,gBAAgB,EAAEkC,cAAc,CAAC;EACrD;;EAEA,MAAME,MAAM,GAAGlC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/CiC,MAAM,CAAC9B,IAAI,GAAG,QAAQ;EACtB8B,MAAM,CAACC,WAAW,GAAGJ,UAAU;EAC/BG,MAAM,CAACnB,SAAS,GAAG,mCAAmC;EACtD,IAAIV,OAAO,GAAG,UAAU2B,cAAc,EAAE;EACxC,IAAIzC,OAAO,CAAC0C,aAAa,CAAC,EAAE;IAC1B5B,OAAO,IAAI,0DAA0D4B,aAAa,GAAG;EACvF;EACAC,MAAM,CAAC5B,YAAY,CAAC,WAAW,EAAED,OAAO,CAAC;EAEzC,OAAO6B,MAAM;AACf,CAAC;AAED,eAAe1C,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}