{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\nconst defaultDimensions = new Cartesian3(1.0, 1.0, 1.0);\n\n/**\n * A ParticleEmitter that emits particles within a box.\n * Particles will be positioned randomly within the box and have initial velocities emanating from the center of the box.\n *\n * @alias BoxEmitter\n * @constructor\n *\n * @param {Cartesian3} dimensions The width, height and depth dimensions of the box.\n */\nfunction BoxEmitter(dimensions) {\n  dimensions = defaultValue(dimensions, defaultDimensions);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"dimensions\", dimensions);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.x\", dimensions.x, 0.0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.y\", dimensions.y, 0.0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.z\", dimensions.z, 0.0);\n  //>>includeEnd('debug');\n\n  this._dimensions = Cartesian3.clone(dimensions);\n}\nObject.defineProperties(BoxEmitter.prototype, {\n  /**\n   * The width, height and depth dimensions of the box in meters.\n   * @memberof BoxEmitter.prototype\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   */\n  dimensions: {\n    get: function () {\n      return this._dimensions;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.z\", value.z, 0.0);\n      //>>includeEnd('debug');\n      Cartesian3.clone(value, this._dimensions);\n    }\n  }\n});\nconst scratchHalfDim = new Cartesian3();\n\n/**\n * Initializes the given {Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize.\n */\nBoxEmitter.prototype.emit = function (particle) {\n  const dim = this._dimensions;\n  const halfDim = Cartesian3.multiplyByScalar(dim, 0.5, scratchHalfDim);\n  const x = CesiumMath.randomBetween(-halfDim.x, halfDim.x);\n  const y = CesiumMath.randomBetween(-halfDim.y, halfDim.y);\n  const z = CesiumMath.randomBetween(-halfDim.z, halfDim.z);\n  particle.position = Cartesian3.fromElements(x, y, z, particle.position);\n  particle.velocity = Cartesian3.normalize(particle.position, particle.velocity);\n};\nexport default BoxEmitter;","map":{"version":3,"names":["Cartesian3","Check","defaultValue","CesiumMath","defaultDimensions","BoxEmitter","dimensions","defined","typeOf","number","greaterThanOrEquals","x","y","z","_dimensions","clone","Object","defineProperties","prototype","get","set","value","scratchHalfDim","emit","particle","dim","halfDim","multiplyByScalar","randomBetween","position","fromElements","velocity","normalize"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/BoxEmitter.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\n\nconst defaultDimensions = new Cartesian3(1.0, 1.0, 1.0);\n\n/**\n * A ParticleEmitter that emits particles within a box.\n * Particles will be positioned randomly within the box and have initial velocities emanating from the center of the box.\n *\n * @alias BoxEmitter\n * @constructor\n *\n * @param {Cartesian3} dimensions The width, height and depth dimensions of the box.\n */\nfunction BoxEmitter(dimensions) {\n  dimensions = defaultValue(dimensions, defaultDimensions);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"dimensions\", dimensions);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.x\", dimensions.x, 0.0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.y\", dimensions.y, 0.0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.z\", dimensions.z, 0.0);\n  //>>includeEnd('debug');\n\n  this._dimensions = Cartesian3.clone(dimensions);\n}\n\nObject.defineProperties(BoxEmitter.prototype, {\n  /**\n   * The width, height and depth dimensions of the box in meters.\n   * @memberof BoxEmitter.prototype\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   */\n  dimensions: {\n    get: function () {\n      return this._dimensions;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.z\", value.z, 0.0);\n      //>>includeEnd('debug');\n      Cartesian3.clone(value, this._dimensions);\n    },\n  },\n});\n\nconst scratchHalfDim = new Cartesian3();\n\n/**\n * Initializes the given {Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize.\n */\nBoxEmitter.prototype.emit = function (particle) {\n  const dim = this._dimensions;\n  const halfDim = Cartesian3.multiplyByScalar(dim, 0.5, scratchHalfDim);\n\n  const x = CesiumMath.randomBetween(-halfDim.x, halfDim.x);\n  const y = CesiumMath.randomBetween(-halfDim.y, halfDim.y);\n  const z = CesiumMath.randomBetween(-halfDim.z, halfDim.z);\n\n  particle.position = Cartesian3.fromElements(x, y, z, particle.position);\n  particle.velocity = Cartesian3.normalize(\n    particle.position,\n    particle.velocity,\n  );\n};\nexport default BoxEmitter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}