{"ast":null,"code":"import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nconst diffScratch = new Cartesian3();\n\n/**\n * Describes a cube centered at the origin.\n *\n * @alias BoxGeometry\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3} options.minimum The minimum x, y, and z coordinates of the box.\n * @param {Cartesian3} options.maximum The maximum x, y, and z coordinates of the box.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @see BoxGeometry.fromDimensions\n * @see BoxGeometry.createGeometry\n * @see Packable\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Box.html|Cesium Sandcastle Box Demo}\n *\n * @example\n * const box = new Cesium.BoxGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\n *   minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\n * });\n * const geometry = Cesium.BoxGeometry.createGeometry(box);\n */\nfunction BoxGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const min = options.minimum;\n  const max = options.maximum;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"min\", min);\n  Check.typeOf.object(\"max\", max);\n  if (defined(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n    throw new DeveloperError(\"GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.\");\n  }\n  //>>includeEnd('debug');\n\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._minimum = Cartesian3.clone(min);\n  this._maximum = Cartesian3.clone(max);\n  this._vertexFormat = vertexFormat;\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createBoxGeometry\";\n}\n\n/**\n * Creates a cube centered at the origin given its dimensions.\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3} options.dimensions The width, depth, and height of the box stored in the x, y, and z coordinates of the <code>Cartesian3</code>, respectively.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @returns {BoxGeometry}\n *\n * @exception {DeveloperError} All dimensions components must be greater than or equal to zero.\n *\n *\n * @example\n * const box = Cesium.BoxGeometry.fromDimensions({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   dimensions : new Cesium.Cartesian3(500000.0, 500000.0, 500000.0)\n * });\n * const geometry = Cesium.BoxGeometry.createGeometry(box);\n *\n * @see BoxGeometry.createGeometry\n */\nBoxGeometry.fromDimensions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const dimensions = options.dimensions;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"dimensions\", dimensions);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.x\", dimensions.x, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.y\", dimensions.y, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.z\", dimensions.z, 0);\n  //>>includeEnd('debug');\n\n  const corner = Cartesian3.multiplyByScalar(dimensions, 0.5, new Cartesian3());\n  return new BoxGeometry({\n    minimum: Cartesian3.negate(corner, new Cartesian3()),\n    maximum: corner,\n    vertexFormat: options.vertexFormat,\n    offsetAttribute: options.offsetAttribute\n  });\n};\n\n/**\n * Creates a cube from the dimensions of an AxisAlignedBoundingBox.\n *\n * @param {AxisAlignedBoundingBox} boundingBox A description of the AxisAlignedBoundingBox.\n * @returns {BoxGeometry}\n *\n *\n *\n * @example\n * const aabb = Cesium.AxisAlignedBoundingBox.fromPoints(Cesium.Cartesian3.fromDegreesArray([\n *      -72.0, 40.0,\n *      -70.0, 35.0,\n *      -75.0, 30.0,\n *      -70.0, 30.0,\n *      -68.0, 40.0\n * ]));\n * const box = Cesium.BoxGeometry.fromAxisAlignedBoundingBox(aabb);\n *\n * @see BoxGeometry.createGeometry\n */\nBoxGeometry.fromAxisAlignedBoundingBox = function (boundingBox) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"boundingBox\", boundingBox);\n  //>>includeEnd('debug');\n\n  return new BoxGeometry({\n    minimum: boundingBox.minimum,\n    maximum: boundingBox.maximum\n  });\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nBoxGeometry.packedLength = 2 * Cartesian3.packedLength + VertexFormat.packedLength + 1;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {BoxGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nBoxGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  Cartesian3.pack(value._minimum, array, startingIndex);\n  Cartesian3.pack(value._maximum, array, startingIndex + Cartesian3.packedLength);\n  VertexFormat.pack(value._vertexFormat, array, startingIndex + 2 * Cartesian3.packedLength);\n  array[startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength] = defaultValue(value._offsetAttribute, -1);\n  return array;\n};\nconst scratchMin = new Cartesian3();\nconst scratchMax = new Cartesian3();\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  minimum: scratchMin,\n  maximum: scratchMax,\n  vertexFormat: scratchVertexFormat,\n  offsetAttribute: undefined\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {BoxGeometry} [result] The object into which to store the result.\n * @returns {BoxGeometry} The modified result parameter or a new BoxGeometry instance if one was not provided.\n */\nBoxGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  const min = Cartesian3.unpack(array, startingIndex, scratchMin);\n  const max = Cartesian3.unpack(array, startingIndex + Cartesian3.packedLength, scratchMax);\n  const vertexFormat = VertexFormat.unpack(array, startingIndex + 2 * Cartesian3.packedLength, scratchVertexFormat);\n  const offsetAttribute = array[startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength];\n  if (!defined(result)) {\n    scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new BoxGeometry(scratchOptions);\n  }\n  result._minimum = Cartesian3.clone(min, result._minimum);\n  result._maximum = Cartesian3.clone(max, result._maximum);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n  return result;\n};\n\n/**\n * Computes the geometric representation of a box, including its vertices, indices, and a bounding sphere.\n *\n * @param {BoxGeometry} boxGeometry A description of the box.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nBoxGeometry.createGeometry = function (boxGeometry) {\n  const min = boxGeometry._minimum;\n  const max = boxGeometry._maximum;\n  const vertexFormat = boxGeometry._vertexFormat;\n  if (Cartesian3.equals(min, max)) {\n    return;\n  }\n  const attributes = new GeometryAttributes();\n  let indices;\n  let positions;\n  if (vertexFormat.position && (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent)) {\n    if (vertexFormat.position) {\n      // 8 corner points.  Duplicated 3 times each for each incident edge/face.\n      positions = new Float64Array(6 * 4 * 3);\n\n      // +z face\n      positions[0] = min.x;\n      positions[1] = min.y;\n      positions[2] = max.z;\n      positions[3] = max.x;\n      positions[4] = min.y;\n      positions[5] = max.z;\n      positions[6] = max.x;\n      positions[7] = max.y;\n      positions[8] = max.z;\n      positions[9] = min.x;\n      positions[10] = max.y;\n      positions[11] = max.z;\n\n      // -z face\n      positions[12] = min.x;\n      positions[13] = min.y;\n      positions[14] = min.z;\n      positions[15] = max.x;\n      positions[16] = min.y;\n      positions[17] = min.z;\n      positions[18] = max.x;\n      positions[19] = max.y;\n      positions[20] = min.z;\n      positions[21] = min.x;\n      positions[22] = max.y;\n      positions[23] = min.z;\n\n      // +x face\n      positions[24] = max.x;\n      positions[25] = min.y;\n      positions[26] = min.z;\n      positions[27] = max.x;\n      positions[28] = max.y;\n      positions[29] = min.z;\n      positions[30] = max.x;\n      positions[31] = max.y;\n      positions[32] = max.z;\n      positions[33] = max.x;\n      positions[34] = min.y;\n      positions[35] = max.z;\n\n      // -x face\n      positions[36] = min.x;\n      positions[37] = min.y;\n      positions[38] = min.z;\n      positions[39] = min.x;\n      positions[40] = max.y;\n      positions[41] = min.z;\n      positions[42] = min.x;\n      positions[43] = max.y;\n      positions[44] = max.z;\n      positions[45] = min.x;\n      positions[46] = min.y;\n      positions[47] = max.z;\n\n      // +y face\n      positions[48] = min.x;\n      positions[49] = max.y;\n      positions[50] = min.z;\n      positions[51] = max.x;\n      positions[52] = max.y;\n      positions[53] = min.z;\n      positions[54] = max.x;\n      positions[55] = max.y;\n      positions[56] = max.z;\n      positions[57] = min.x;\n      positions[58] = max.y;\n      positions[59] = max.z;\n\n      // -y face\n      positions[60] = min.x;\n      positions[61] = min.y;\n      positions[62] = min.z;\n      positions[63] = max.x;\n      positions[64] = min.y;\n      positions[65] = min.z;\n      positions[66] = max.x;\n      positions[67] = min.y;\n      positions[68] = max.z;\n      positions[69] = min.x;\n      positions[70] = min.y;\n      positions[71] = max.z;\n      attributes.position = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.DOUBLE,\n        componentsPerAttribute: 3,\n        values: positions\n      });\n    }\n    if (vertexFormat.normal) {\n      const normals = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      normals[0] = 0.0;\n      normals[1] = 0.0;\n      normals[2] = 1.0;\n      normals[3] = 0.0;\n      normals[4] = 0.0;\n      normals[5] = 1.0;\n      normals[6] = 0.0;\n      normals[7] = 0.0;\n      normals[8] = 1.0;\n      normals[9] = 0.0;\n      normals[10] = 0.0;\n      normals[11] = 1.0;\n\n      // -z face\n      normals[12] = 0.0;\n      normals[13] = 0.0;\n      normals[14] = -1.0;\n      normals[15] = 0.0;\n      normals[16] = 0.0;\n      normals[17] = -1.0;\n      normals[18] = 0.0;\n      normals[19] = 0.0;\n      normals[20] = -1.0;\n      normals[21] = 0.0;\n      normals[22] = 0.0;\n      normals[23] = -1.0;\n\n      // +x face\n      normals[24] = 1.0;\n      normals[25] = 0.0;\n      normals[26] = 0.0;\n      normals[27] = 1.0;\n      normals[28] = 0.0;\n      normals[29] = 0.0;\n      normals[30] = 1.0;\n      normals[31] = 0.0;\n      normals[32] = 0.0;\n      normals[33] = 1.0;\n      normals[34] = 0.0;\n      normals[35] = 0.0;\n\n      // -x face\n      normals[36] = -1.0;\n      normals[37] = 0.0;\n      normals[38] = 0.0;\n      normals[39] = -1.0;\n      normals[40] = 0.0;\n      normals[41] = 0.0;\n      normals[42] = -1.0;\n      normals[43] = 0.0;\n      normals[44] = 0.0;\n      normals[45] = -1.0;\n      normals[46] = 0.0;\n      normals[47] = 0.0;\n\n      // +y face\n      normals[48] = 0.0;\n      normals[49] = 1.0;\n      normals[50] = 0.0;\n      normals[51] = 0.0;\n      normals[52] = 1.0;\n      normals[53] = 0.0;\n      normals[54] = 0.0;\n      normals[55] = 1.0;\n      normals[56] = 0.0;\n      normals[57] = 0.0;\n      normals[58] = 1.0;\n      normals[59] = 0.0;\n\n      // -y face\n      normals[60] = 0.0;\n      normals[61] = -1.0;\n      normals[62] = 0.0;\n      normals[63] = 0.0;\n      normals[64] = -1.0;\n      normals[65] = 0.0;\n      normals[66] = 0.0;\n      normals[67] = -1.0;\n      normals[68] = 0.0;\n      normals[69] = 0.0;\n      normals[70] = -1.0;\n      normals[71] = 0.0;\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals\n      });\n    }\n    if (vertexFormat.st) {\n      const texCoords = new Float32Array(6 * 4 * 2);\n\n      // +z face\n      texCoords[0] = 0.0;\n      texCoords[1] = 0.0;\n      texCoords[2] = 1.0;\n      texCoords[3] = 0.0;\n      texCoords[4] = 1.0;\n      texCoords[5] = 1.0;\n      texCoords[6] = 0.0;\n      texCoords[7] = 1.0;\n\n      // -z face\n      texCoords[8] = 1.0;\n      texCoords[9] = 0.0;\n      texCoords[10] = 0.0;\n      texCoords[11] = 0.0;\n      texCoords[12] = 0.0;\n      texCoords[13] = 1.0;\n      texCoords[14] = 1.0;\n      texCoords[15] = 1.0;\n\n      //+x face\n      texCoords[16] = 0.0;\n      texCoords[17] = 0.0;\n      texCoords[18] = 1.0;\n      texCoords[19] = 0.0;\n      texCoords[20] = 1.0;\n      texCoords[21] = 1.0;\n      texCoords[22] = 0.0;\n      texCoords[23] = 1.0;\n\n      // -x face\n      texCoords[24] = 1.0;\n      texCoords[25] = 0.0;\n      texCoords[26] = 0.0;\n      texCoords[27] = 0.0;\n      texCoords[28] = 0.0;\n      texCoords[29] = 1.0;\n      texCoords[30] = 1.0;\n      texCoords[31] = 1.0;\n\n      // +y face\n      texCoords[32] = 1.0;\n      texCoords[33] = 0.0;\n      texCoords[34] = 0.0;\n      texCoords[35] = 0.0;\n      texCoords[36] = 0.0;\n      texCoords[37] = 1.0;\n      texCoords[38] = 1.0;\n      texCoords[39] = 1.0;\n\n      // -y face\n      texCoords[40] = 0.0;\n      texCoords[41] = 0.0;\n      texCoords[42] = 1.0;\n      texCoords[43] = 0.0;\n      texCoords[44] = 1.0;\n      texCoords[45] = 1.0;\n      texCoords[46] = 0.0;\n      texCoords[47] = 1.0;\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: texCoords\n      });\n    }\n    if (vertexFormat.tangent) {\n      const tangents = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      tangents[0] = 1.0;\n      tangents[1] = 0.0;\n      tangents[2] = 0.0;\n      tangents[3] = 1.0;\n      tangents[4] = 0.0;\n      tangents[5] = 0.0;\n      tangents[6] = 1.0;\n      tangents[7] = 0.0;\n      tangents[8] = 0.0;\n      tangents[9] = 1.0;\n      tangents[10] = 0.0;\n      tangents[11] = 0.0;\n\n      // -z face\n      tangents[12] = -1.0;\n      tangents[13] = 0.0;\n      tangents[14] = 0.0;\n      tangents[15] = -1.0;\n      tangents[16] = 0.0;\n      tangents[17] = 0.0;\n      tangents[18] = -1.0;\n      tangents[19] = 0.0;\n      tangents[20] = 0.0;\n      tangents[21] = -1.0;\n      tangents[22] = 0.0;\n      tangents[23] = 0.0;\n\n      // +x face\n      tangents[24] = 0.0;\n      tangents[25] = 1.0;\n      tangents[26] = 0.0;\n      tangents[27] = 0.0;\n      tangents[28] = 1.0;\n      tangents[29] = 0.0;\n      tangents[30] = 0.0;\n      tangents[31] = 1.0;\n      tangents[32] = 0.0;\n      tangents[33] = 0.0;\n      tangents[34] = 1.0;\n      tangents[35] = 0.0;\n\n      // -x face\n      tangents[36] = 0.0;\n      tangents[37] = -1.0;\n      tangents[38] = 0.0;\n      tangents[39] = 0.0;\n      tangents[40] = -1.0;\n      tangents[41] = 0.0;\n      tangents[42] = 0.0;\n      tangents[43] = -1.0;\n      tangents[44] = 0.0;\n      tangents[45] = 0.0;\n      tangents[46] = -1.0;\n      tangents[47] = 0.0;\n\n      // +y face\n      tangents[48] = -1.0;\n      tangents[49] = 0.0;\n      tangents[50] = 0.0;\n      tangents[51] = -1.0;\n      tangents[52] = 0.0;\n      tangents[53] = 0.0;\n      tangents[54] = -1.0;\n      tangents[55] = 0.0;\n      tangents[56] = 0.0;\n      tangents[57] = -1.0;\n      tangents[58] = 0.0;\n      tangents[59] = 0.0;\n\n      // -y face\n      tangents[60] = 1.0;\n      tangents[61] = 0.0;\n      tangents[62] = 0.0;\n      tangents[63] = 1.0;\n      tangents[64] = 0.0;\n      tangents[65] = 0.0;\n      tangents[66] = 1.0;\n      tangents[67] = 0.0;\n      tangents[68] = 0.0;\n      tangents[69] = 1.0;\n      tangents[70] = 0.0;\n      tangents[71] = 0.0;\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents\n      });\n    }\n    if (vertexFormat.bitangent) {\n      const bitangents = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      bitangents[0] = 0.0;\n      bitangents[1] = 1.0;\n      bitangents[2] = 0.0;\n      bitangents[3] = 0.0;\n      bitangents[4] = 1.0;\n      bitangents[5] = 0.0;\n      bitangents[6] = 0.0;\n      bitangents[7] = 1.0;\n      bitangents[8] = 0.0;\n      bitangents[9] = 0.0;\n      bitangents[10] = 1.0;\n      bitangents[11] = 0.0;\n\n      // -z face\n      bitangents[12] = 0.0;\n      bitangents[13] = 1.0;\n      bitangents[14] = 0.0;\n      bitangents[15] = 0.0;\n      bitangents[16] = 1.0;\n      bitangents[17] = 0.0;\n      bitangents[18] = 0.0;\n      bitangents[19] = 1.0;\n      bitangents[20] = 0.0;\n      bitangents[21] = 0.0;\n      bitangents[22] = 1.0;\n      bitangents[23] = 0.0;\n\n      // +x face\n      bitangents[24] = 0.0;\n      bitangents[25] = 0.0;\n      bitangents[26] = 1.0;\n      bitangents[27] = 0.0;\n      bitangents[28] = 0.0;\n      bitangents[29] = 1.0;\n      bitangents[30] = 0.0;\n      bitangents[31] = 0.0;\n      bitangents[32] = 1.0;\n      bitangents[33] = 0.0;\n      bitangents[34] = 0.0;\n      bitangents[35] = 1.0;\n\n      // -x face\n      bitangents[36] = 0.0;\n      bitangents[37] = 0.0;\n      bitangents[38] = 1.0;\n      bitangents[39] = 0.0;\n      bitangents[40] = 0.0;\n      bitangents[41] = 1.0;\n      bitangents[42] = 0.0;\n      bitangents[43] = 0.0;\n      bitangents[44] = 1.0;\n      bitangents[45] = 0.0;\n      bitangents[46] = 0.0;\n      bitangents[47] = 1.0;\n\n      // +y face\n      bitangents[48] = 0.0;\n      bitangents[49] = 0.0;\n      bitangents[50] = 1.0;\n      bitangents[51] = 0.0;\n      bitangents[52] = 0.0;\n      bitangents[53] = 1.0;\n      bitangents[54] = 0.0;\n      bitangents[55] = 0.0;\n      bitangents[56] = 1.0;\n      bitangents[57] = 0.0;\n      bitangents[58] = 0.0;\n      bitangents[59] = 1.0;\n\n      // -y face\n      bitangents[60] = 0.0;\n      bitangents[61] = 0.0;\n      bitangents[62] = 1.0;\n      bitangents[63] = 0.0;\n      bitangents[64] = 0.0;\n      bitangents[65] = 1.0;\n      bitangents[66] = 0.0;\n      bitangents[67] = 0.0;\n      bitangents[68] = 1.0;\n      bitangents[69] = 0.0;\n      bitangents[70] = 0.0;\n      bitangents[71] = 1.0;\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents\n      });\n    }\n\n    // 12 triangles:  6 faces, 2 triangles each.\n    indices = new Uint16Array(6 * 2 * 3);\n\n    // +z face\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n\n    // -z face\n    indices[6] = 4 + 2;\n    indices[7] = 4 + 1;\n    indices[8] = 4 + 0;\n    indices[9] = 4 + 3;\n    indices[10] = 4 + 2;\n    indices[11] = 4 + 0;\n\n    // +x face\n    indices[12] = 8 + 0;\n    indices[13] = 8 + 1;\n    indices[14] = 8 + 2;\n    indices[15] = 8 + 0;\n    indices[16] = 8 + 2;\n    indices[17] = 8 + 3;\n\n    // -x face\n    indices[18] = 12 + 2;\n    indices[19] = 12 + 1;\n    indices[20] = 12 + 0;\n    indices[21] = 12 + 3;\n    indices[22] = 12 + 2;\n    indices[23] = 12 + 0;\n\n    // +y face\n    indices[24] = 16 + 2;\n    indices[25] = 16 + 1;\n    indices[26] = 16 + 0;\n    indices[27] = 16 + 3;\n    indices[28] = 16 + 2;\n    indices[29] = 16 + 0;\n\n    // -y face\n    indices[30] = 20 + 0;\n    indices[31] = 20 + 1;\n    indices[32] = 20 + 2;\n    indices[33] = 20 + 0;\n    indices[34] = 20 + 2;\n    indices[35] = 20 + 3;\n  } else {\n    // Positions only - no need to duplicate corner points\n    positions = new Float64Array(8 * 3);\n    positions[0] = min.x;\n    positions[1] = min.y;\n    positions[2] = min.z;\n    positions[3] = max.x;\n    positions[4] = min.y;\n    positions[5] = min.z;\n    positions[6] = max.x;\n    positions[7] = max.y;\n    positions[8] = min.z;\n    positions[9] = min.x;\n    positions[10] = max.y;\n    positions[11] = min.z;\n    positions[12] = min.x;\n    positions[13] = min.y;\n    positions[14] = max.z;\n    positions[15] = max.x;\n    positions[16] = min.y;\n    positions[17] = max.z;\n    positions[18] = max.x;\n    positions[19] = max.y;\n    positions[20] = max.z;\n    positions[21] = min.x;\n    positions[22] = max.y;\n    positions[23] = max.z;\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions\n    });\n\n    // 12 triangles:  6 faces, 2 triangles each.\n    indices = new Uint16Array(6 * 2 * 3);\n\n    // plane z = corner.Z\n    indices[0] = 4;\n    indices[1] = 5;\n    indices[2] = 6;\n    indices[3] = 4;\n    indices[4] = 6;\n    indices[5] = 7;\n\n    // plane z = -corner.Z\n    indices[6] = 1;\n    indices[7] = 0;\n    indices[8] = 3;\n    indices[9] = 1;\n    indices[10] = 3;\n    indices[11] = 2;\n\n    // plane x = corner.X\n    indices[12] = 1;\n    indices[13] = 6;\n    indices[14] = 5;\n    indices[15] = 1;\n    indices[16] = 2;\n    indices[17] = 6;\n\n    // plane y = corner.Y\n    indices[18] = 2;\n    indices[19] = 3;\n    indices[20] = 7;\n    indices[21] = 2;\n    indices[22] = 7;\n    indices[23] = 6;\n\n    // plane x = -corner.X\n    indices[24] = 3;\n    indices[25] = 0;\n    indices[26] = 4;\n    indices[27] = 3;\n    indices[28] = 4;\n    indices[29] = 7;\n\n    // plane y = -corner.Y\n    indices[30] = 0;\n    indices[31] = 1;\n    indices[32] = 5;\n    indices[33] = 0;\n    indices[34] = 5;\n    indices[35] = 4;\n  }\n  const diff = Cartesian3.subtract(max, min, diffScratch);\n  const radius = Cartesian3.magnitude(diff) * 0.5;\n  if (defined(boxGeometry._offsetAttribute)) {\n    const length = positions.length;\n    const offsetValue = boxGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n    const applyOffset = new Uint8Array(length / 3).fill(offsetValue);\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset\n    });\n  }\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, radius),\n    offsetAttribute: boxGeometry._offsetAttribute\n  });\n};\nlet unitBoxGeometry;\n\n/**\n * Returns the geometric representation of a unit box, including its vertices, indices, and a bounding sphere.\n * @returns {Geometry} The computed vertices and indices.\n *\n * @private\n */\nBoxGeometry.getUnitBox = function () {\n  if (!defined(unitBoxGeometry)) {\n    unitBoxGeometry = BoxGeometry.createGeometry(BoxGeometry.fromDimensions({\n      dimensions: new Cartesian3(1.0, 1.0, 1.0),\n      vertexFormat: VertexFormat.POSITION_ONLY\n    }));\n  }\n  return unitBoxGeometry;\n};\nexport default BoxGeometry;","map":{"version":3,"names":["BoundingSphere","Cartesian3","Check","ComponentDatatype","defaultValue","defined","DeveloperError","Geometry","GeometryAttribute","GeometryAttributes","GeometryOffsetAttribute","PrimitiveType","VertexFormat","diffScratch","BoxGeometry","options","EMPTY_OBJECT","min","minimum","max","maximum","typeOf","object","offsetAttribute","TOP","vertexFormat","DEFAULT","_minimum","clone","_maximum","_vertexFormat","_offsetAttribute","_workerName","fromDimensions","dimensions","number","greaterThanOrEquals","x","y","z","corner","multiplyByScalar","negate","fromAxisAlignedBoundingBox","boundingBox","packedLength","pack","value","array","startingIndex","scratchMin","scratchMax","scratchVertexFormat","scratchOptions","undefined","unpack","result","createGeometry","boxGeometry","equals","attributes","indices","positions","position","st","normal","tangent","bitangent","Float64Array","componentDatatype","DOUBLE","componentsPerAttribute","values","normals","Float32Array","FLOAT","texCoords","tangents","bitangents","Uint16Array","diff","subtract","radius","magnitude","length","offsetValue","NONE","applyOffset","Uint8Array","fill","UNSIGNED_BYTE","primitiveType","TRIANGLES","boundingSphere","ZERO","unitBoxGeometry","getUnitBox","POSITION_ONLY"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/BoxGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nconst diffScratch = new Cartesian3();\n\n/**\n * Describes a cube centered at the origin.\n *\n * @alias BoxGeometry\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3} options.minimum The minimum x, y, and z coordinates of the box.\n * @param {Cartesian3} options.maximum The maximum x, y, and z coordinates of the box.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @see BoxGeometry.fromDimensions\n * @see BoxGeometry.createGeometry\n * @see Packable\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Box.html|Cesium Sandcastle Box Demo}\n *\n * @example\n * const box = new Cesium.BoxGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\n *   minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\n * });\n * const geometry = Cesium.BoxGeometry.createGeometry(box);\n */\nfunction BoxGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const min = options.minimum;\n  const max = options.maximum;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"min\", min);\n  Check.typeOf.object(\"max\", max);\n  if (\n    defined(options.offsetAttribute) &&\n    options.offsetAttribute === GeometryOffsetAttribute.TOP\n  ) {\n    throw new DeveloperError(\n      \"GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n  this._minimum = Cartesian3.clone(min);\n  this._maximum = Cartesian3.clone(max);\n  this._vertexFormat = vertexFormat;\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createBoxGeometry\";\n}\n\n/**\n * Creates a cube centered at the origin given its dimensions.\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3} options.dimensions The width, depth, and height of the box stored in the x, y, and z coordinates of the <code>Cartesian3</code>, respectively.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @returns {BoxGeometry}\n *\n * @exception {DeveloperError} All dimensions components must be greater than or equal to zero.\n *\n *\n * @example\n * const box = Cesium.BoxGeometry.fromDimensions({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   dimensions : new Cesium.Cartesian3(500000.0, 500000.0, 500000.0)\n * });\n * const geometry = Cesium.BoxGeometry.createGeometry(box);\n *\n * @see BoxGeometry.createGeometry\n */\nBoxGeometry.fromDimensions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const dimensions = options.dimensions;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"dimensions\", dimensions);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.x\", dimensions.x, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.y\", dimensions.y, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.z\", dimensions.z, 0);\n  //>>includeEnd('debug');\n\n  const corner = Cartesian3.multiplyByScalar(dimensions, 0.5, new Cartesian3());\n\n  return new BoxGeometry({\n    minimum: Cartesian3.negate(corner, new Cartesian3()),\n    maximum: corner,\n    vertexFormat: options.vertexFormat,\n    offsetAttribute: options.offsetAttribute,\n  });\n};\n\n/**\n * Creates a cube from the dimensions of an AxisAlignedBoundingBox.\n *\n * @param {AxisAlignedBoundingBox} boundingBox A description of the AxisAlignedBoundingBox.\n * @returns {BoxGeometry}\n *\n *\n *\n * @example\n * const aabb = Cesium.AxisAlignedBoundingBox.fromPoints(Cesium.Cartesian3.fromDegreesArray([\n *      -72.0, 40.0,\n *      -70.0, 35.0,\n *      -75.0, 30.0,\n *      -70.0, 30.0,\n *      -68.0, 40.0\n * ]));\n * const box = Cesium.BoxGeometry.fromAxisAlignedBoundingBox(aabb);\n *\n * @see BoxGeometry.createGeometry\n */\nBoxGeometry.fromAxisAlignedBoundingBox = function (boundingBox) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"boundingBox\", boundingBox);\n  //>>includeEnd('debug');\n\n  return new BoxGeometry({\n    minimum: boundingBox.minimum,\n    maximum: boundingBox.maximum,\n  });\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nBoxGeometry.packedLength =\n  2 * Cartesian3.packedLength + VertexFormat.packedLength + 1;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {BoxGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nBoxGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  Cartesian3.pack(value._minimum, array, startingIndex);\n  Cartesian3.pack(\n    value._maximum,\n    array,\n    startingIndex + Cartesian3.packedLength,\n  );\n  VertexFormat.pack(\n    value._vertexFormat,\n    array,\n    startingIndex + 2 * Cartesian3.packedLength,\n  );\n  array[\n    startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength\n  ] = defaultValue(value._offsetAttribute, -1);\n\n  return array;\n};\n\nconst scratchMin = new Cartesian3();\nconst scratchMax = new Cartesian3();\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  minimum: scratchMin,\n  maximum: scratchMax,\n  vertexFormat: scratchVertexFormat,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {BoxGeometry} [result] The object into which to store the result.\n * @returns {BoxGeometry} The modified result parameter or a new BoxGeometry instance if one was not provided.\n */\nBoxGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const min = Cartesian3.unpack(array, startingIndex, scratchMin);\n  const max = Cartesian3.unpack(\n    array,\n    startingIndex + Cartesian3.packedLength,\n    scratchMax,\n  );\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex + 2 * Cartesian3.packedLength,\n    scratchVertexFormat,\n  );\n  const offsetAttribute =\n    array[\n      startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength\n    ];\n\n  if (!defined(result)) {\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new BoxGeometry(scratchOptions);\n  }\n\n  result._minimum = Cartesian3.clone(min, result._minimum);\n  result._maximum = Cartesian3.clone(max, result._maximum);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of a box, including its vertices, indices, and a bounding sphere.\n *\n * @param {BoxGeometry} boxGeometry A description of the box.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nBoxGeometry.createGeometry = function (boxGeometry) {\n  const min = boxGeometry._minimum;\n  const max = boxGeometry._maximum;\n  const vertexFormat = boxGeometry._vertexFormat;\n\n  if (Cartesian3.equals(min, max)) {\n    return;\n  }\n\n  const attributes = new GeometryAttributes();\n  let indices;\n  let positions;\n\n  if (\n    vertexFormat.position &&\n    (vertexFormat.st ||\n      vertexFormat.normal ||\n      vertexFormat.tangent ||\n      vertexFormat.bitangent)\n  ) {\n    if (vertexFormat.position) {\n      // 8 corner points.  Duplicated 3 times each for each incident edge/face.\n      positions = new Float64Array(6 * 4 * 3);\n\n      // +z face\n      positions[0] = min.x;\n      positions[1] = min.y;\n      positions[2] = max.z;\n      positions[3] = max.x;\n      positions[4] = min.y;\n      positions[5] = max.z;\n      positions[6] = max.x;\n      positions[7] = max.y;\n      positions[8] = max.z;\n      positions[9] = min.x;\n      positions[10] = max.y;\n      positions[11] = max.z;\n\n      // -z face\n      positions[12] = min.x;\n      positions[13] = min.y;\n      positions[14] = min.z;\n      positions[15] = max.x;\n      positions[16] = min.y;\n      positions[17] = min.z;\n      positions[18] = max.x;\n      positions[19] = max.y;\n      positions[20] = min.z;\n      positions[21] = min.x;\n      positions[22] = max.y;\n      positions[23] = min.z;\n\n      // +x face\n      positions[24] = max.x;\n      positions[25] = min.y;\n      positions[26] = min.z;\n      positions[27] = max.x;\n      positions[28] = max.y;\n      positions[29] = min.z;\n      positions[30] = max.x;\n      positions[31] = max.y;\n      positions[32] = max.z;\n      positions[33] = max.x;\n      positions[34] = min.y;\n      positions[35] = max.z;\n\n      // -x face\n      positions[36] = min.x;\n      positions[37] = min.y;\n      positions[38] = min.z;\n      positions[39] = min.x;\n      positions[40] = max.y;\n      positions[41] = min.z;\n      positions[42] = min.x;\n      positions[43] = max.y;\n      positions[44] = max.z;\n      positions[45] = min.x;\n      positions[46] = min.y;\n      positions[47] = max.z;\n\n      // +y face\n      positions[48] = min.x;\n      positions[49] = max.y;\n      positions[50] = min.z;\n      positions[51] = max.x;\n      positions[52] = max.y;\n      positions[53] = min.z;\n      positions[54] = max.x;\n      positions[55] = max.y;\n      positions[56] = max.z;\n      positions[57] = min.x;\n      positions[58] = max.y;\n      positions[59] = max.z;\n\n      // -y face\n      positions[60] = min.x;\n      positions[61] = min.y;\n      positions[62] = min.z;\n      positions[63] = max.x;\n      positions[64] = min.y;\n      positions[65] = min.z;\n      positions[66] = max.x;\n      positions[67] = min.y;\n      positions[68] = max.z;\n      positions[69] = min.x;\n      positions[70] = min.y;\n      positions[71] = max.z;\n\n      attributes.position = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.DOUBLE,\n        componentsPerAttribute: 3,\n        values: positions,\n      });\n    }\n\n    if (vertexFormat.normal) {\n      const normals = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      normals[0] = 0.0;\n      normals[1] = 0.0;\n      normals[2] = 1.0;\n      normals[3] = 0.0;\n      normals[4] = 0.0;\n      normals[5] = 1.0;\n      normals[6] = 0.0;\n      normals[7] = 0.0;\n      normals[8] = 1.0;\n      normals[9] = 0.0;\n      normals[10] = 0.0;\n      normals[11] = 1.0;\n\n      // -z face\n      normals[12] = 0.0;\n      normals[13] = 0.0;\n      normals[14] = -1.0;\n      normals[15] = 0.0;\n      normals[16] = 0.0;\n      normals[17] = -1.0;\n      normals[18] = 0.0;\n      normals[19] = 0.0;\n      normals[20] = -1.0;\n      normals[21] = 0.0;\n      normals[22] = 0.0;\n      normals[23] = -1.0;\n\n      // +x face\n      normals[24] = 1.0;\n      normals[25] = 0.0;\n      normals[26] = 0.0;\n      normals[27] = 1.0;\n      normals[28] = 0.0;\n      normals[29] = 0.0;\n      normals[30] = 1.0;\n      normals[31] = 0.0;\n      normals[32] = 0.0;\n      normals[33] = 1.0;\n      normals[34] = 0.0;\n      normals[35] = 0.0;\n\n      // -x face\n      normals[36] = -1.0;\n      normals[37] = 0.0;\n      normals[38] = 0.0;\n      normals[39] = -1.0;\n      normals[40] = 0.0;\n      normals[41] = 0.0;\n      normals[42] = -1.0;\n      normals[43] = 0.0;\n      normals[44] = 0.0;\n      normals[45] = -1.0;\n      normals[46] = 0.0;\n      normals[47] = 0.0;\n\n      // +y face\n      normals[48] = 0.0;\n      normals[49] = 1.0;\n      normals[50] = 0.0;\n      normals[51] = 0.0;\n      normals[52] = 1.0;\n      normals[53] = 0.0;\n      normals[54] = 0.0;\n      normals[55] = 1.0;\n      normals[56] = 0.0;\n      normals[57] = 0.0;\n      normals[58] = 1.0;\n      normals[59] = 0.0;\n\n      // -y face\n      normals[60] = 0.0;\n      normals[61] = -1.0;\n      normals[62] = 0.0;\n      normals[63] = 0.0;\n      normals[64] = -1.0;\n      normals[65] = 0.0;\n      normals[66] = 0.0;\n      normals[67] = -1.0;\n      normals[68] = 0.0;\n      normals[69] = 0.0;\n      normals[70] = -1.0;\n      normals[71] = 0.0;\n\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.st) {\n      const texCoords = new Float32Array(6 * 4 * 2);\n\n      // +z face\n      texCoords[0] = 0.0;\n      texCoords[1] = 0.0;\n      texCoords[2] = 1.0;\n      texCoords[3] = 0.0;\n      texCoords[4] = 1.0;\n      texCoords[5] = 1.0;\n      texCoords[6] = 0.0;\n      texCoords[7] = 1.0;\n\n      // -z face\n      texCoords[8] = 1.0;\n      texCoords[9] = 0.0;\n      texCoords[10] = 0.0;\n      texCoords[11] = 0.0;\n      texCoords[12] = 0.0;\n      texCoords[13] = 1.0;\n      texCoords[14] = 1.0;\n      texCoords[15] = 1.0;\n\n      //+x face\n      texCoords[16] = 0.0;\n      texCoords[17] = 0.0;\n      texCoords[18] = 1.0;\n      texCoords[19] = 0.0;\n      texCoords[20] = 1.0;\n      texCoords[21] = 1.0;\n      texCoords[22] = 0.0;\n      texCoords[23] = 1.0;\n\n      // -x face\n      texCoords[24] = 1.0;\n      texCoords[25] = 0.0;\n      texCoords[26] = 0.0;\n      texCoords[27] = 0.0;\n      texCoords[28] = 0.0;\n      texCoords[29] = 1.0;\n      texCoords[30] = 1.0;\n      texCoords[31] = 1.0;\n\n      // +y face\n      texCoords[32] = 1.0;\n      texCoords[33] = 0.0;\n      texCoords[34] = 0.0;\n      texCoords[35] = 0.0;\n      texCoords[36] = 0.0;\n      texCoords[37] = 1.0;\n      texCoords[38] = 1.0;\n      texCoords[39] = 1.0;\n\n      // -y face\n      texCoords[40] = 0.0;\n      texCoords[41] = 0.0;\n      texCoords[42] = 1.0;\n      texCoords[43] = 0.0;\n      texCoords[44] = 1.0;\n      texCoords[45] = 1.0;\n      texCoords[46] = 0.0;\n      texCoords[47] = 1.0;\n\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: texCoords,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      const tangents = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      tangents[0] = 1.0;\n      tangents[1] = 0.0;\n      tangents[2] = 0.0;\n      tangents[3] = 1.0;\n      tangents[4] = 0.0;\n      tangents[5] = 0.0;\n      tangents[6] = 1.0;\n      tangents[7] = 0.0;\n      tangents[8] = 0.0;\n      tangents[9] = 1.0;\n      tangents[10] = 0.0;\n      tangents[11] = 0.0;\n\n      // -z face\n      tangents[12] = -1.0;\n      tangents[13] = 0.0;\n      tangents[14] = 0.0;\n      tangents[15] = -1.0;\n      tangents[16] = 0.0;\n      tangents[17] = 0.0;\n      tangents[18] = -1.0;\n      tangents[19] = 0.0;\n      tangents[20] = 0.0;\n      tangents[21] = -1.0;\n      tangents[22] = 0.0;\n      tangents[23] = 0.0;\n\n      // +x face\n      tangents[24] = 0.0;\n      tangents[25] = 1.0;\n      tangents[26] = 0.0;\n      tangents[27] = 0.0;\n      tangents[28] = 1.0;\n      tangents[29] = 0.0;\n      tangents[30] = 0.0;\n      tangents[31] = 1.0;\n      tangents[32] = 0.0;\n      tangents[33] = 0.0;\n      tangents[34] = 1.0;\n      tangents[35] = 0.0;\n\n      // -x face\n      tangents[36] = 0.0;\n      tangents[37] = -1.0;\n      tangents[38] = 0.0;\n      tangents[39] = 0.0;\n      tangents[40] = -1.0;\n      tangents[41] = 0.0;\n      tangents[42] = 0.0;\n      tangents[43] = -1.0;\n      tangents[44] = 0.0;\n      tangents[45] = 0.0;\n      tangents[46] = -1.0;\n      tangents[47] = 0.0;\n\n      // +y face\n      tangents[48] = -1.0;\n      tangents[49] = 0.0;\n      tangents[50] = 0.0;\n      tangents[51] = -1.0;\n      tangents[52] = 0.0;\n      tangents[53] = 0.0;\n      tangents[54] = -1.0;\n      tangents[55] = 0.0;\n      tangents[56] = 0.0;\n      tangents[57] = -1.0;\n      tangents[58] = 0.0;\n      tangents[59] = 0.0;\n\n      // -y face\n      tangents[60] = 1.0;\n      tangents[61] = 0.0;\n      tangents[62] = 0.0;\n      tangents[63] = 1.0;\n      tangents[64] = 0.0;\n      tangents[65] = 0.0;\n      tangents[66] = 1.0;\n      tangents[67] = 0.0;\n      tangents[68] = 0.0;\n      tangents[69] = 1.0;\n      tangents[70] = 0.0;\n      tangents[71] = 0.0;\n\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      const bitangents = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      bitangents[0] = 0.0;\n      bitangents[1] = 1.0;\n      bitangents[2] = 0.0;\n      bitangents[3] = 0.0;\n      bitangents[4] = 1.0;\n      bitangents[5] = 0.0;\n      bitangents[6] = 0.0;\n      bitangents[7] = 1.0;\n      bitangents[8] = 0.0;\n      bitangents[9] = 0.0;\n      bitangents[10] = 1.0;\n      bitangents[11] = 0.0;\n\n      // -z face\n      bitangents[12] = 0.0;\n      bitangents[13] = 1.0;\n      bitangents[14] = 0.0;\n      bitangents[15] = 0.0;\n      bitangents[16] = 1.0;\n      bitangents[17] = 0.0;\n      bitangents[18] = 0.0;\n      bitangents[19] = 1.0;\n      bitangents[20] = 0.0;\n      bitangents[21] = 0.0;\n      bitangents[22] = 1.0;\n      bitangents[23] = 0.0;\n\n      // +x face\n      bitangents[24] = 0.0;\n      bitangents[25] = 0.0;\n      bitangents[26] = 1.0;\n      bitangents[27] = 0.0;\n      bitangents[28] = 0.0;\n      bitangents[29] = 1.0;\n      bitangents[30] = 0.0;\n      bitangents[31] = 0.0;\n      bitangents[32] = 1.0;\n      bitangents[33] = 0.0;\n      bitangents[34] = 0.0;\n      bitangents[35] = 1.0;\n\n      // -x face\n      bitangents[36] = 0.0;\n      bitangents[37] = 0.0;\n      bitangents[38] = 1.0;\n      bitangents[39] = 0.0;\n      bitangents[40] = 0.0;\n      bitangents[41] = 1.0;\n      bitangents[42] = 0.0;\n      bitangents[43] = 0.0;\n      bitangents[44] = 1.0;\n      bitangents[45] = 0.0;\n      bitangents[46] = 0.0;\n      bitangents[47] = 1.0;\n\n      // +y face\n      bitangents[48] = 0.0;\n      bitangents[49] = 0.0;\n      bitangents[50] = 1.0;\n      bitangents[51] = 0.0;\n      bitangents[52] = 0.0;\n      bitangents[53] = 1.0;\n      bitangents[54] = 0.0;\n      bitangents[55] = 0.0;\n      bitangents[56] = 1.0;\n      bitangents[57] = 0.0;\n      bitangents[58] = 0.0;\n      bitangents[59] = 1.0;\n\n      // -y face\n      bitangents[60] = 0.0;\n      bitangents[61] = 0.0;\n      bitangents[62] = 1.0;\n      bitangents[63] = 0.0;\n      bitangents[64] = 0.0;\n      bitangents[65] = 1.0;\n      bitangents[66] = 0.0;\n      bitangents[67] = 0.0;\n      bitangents[68] = 1.0;\n      bitangents[69] = 0.0;\n      bitangents[70] = 0.0;\n      bitangents[71] = 1.0;\n\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n\n    // 12 triangles:  6 faces, 2 triangles each.\n    indices = new Uint16Array(6 * 2 * 3);\n\n    // +z face\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n\n    // -z face\n    indices[6] = 4 + 2;\n    indices[7] = 4 + 1;\n    indices[8] = 4 + 0;\n    indices[9] = 4 + 3;\n    indices[10] = 4 + 2;\n    indices[11] = 4 + 0;\n\n    // +x face\n    indices[12] = 8 + 0;\n    indices[13] = 8 + 1;\n    indices[14] = 8 + 2;\n    indices[15] = 8 + 0;\n    indices[16] = 8 + 2;\n    indices[17] = 8 + 3;\n\n    // -x face\n    indices[18] = 12 + 2;\n    indices[19] = 12 + 1;\n    indices[20] = 12 + 0;\n    indices[21] = 12 + 3;\n    indices[22] = 12 + 2;\n    indices[23] = 12 + 0;\n\n    // +y face\n    indices[24] = 16 + 2;\n    indices[25] = 16 + 1;\n    indices[26] = 16 + 0;\n    indices[27] = 16 + 3;\n    indices[28] = 16 + 2;\n    indices[29] = 16 + 0;\n\n    // -y face\n    indices[30] = 20 + 0;\n    indices[31] = 20 + 1;\n    indices[32] = 20 + 2;\n    indices[33] = 20 + 0;\n    indices[34] = 20 + 2;\n    indices[35] = 20 + 3;\n  } else {\n    // Positions only - no need to duplicate corner points\n    positions = new Float64Array(8 * 3);\n\n    positions[0] = min.x;\n    positions[1] = min.y;\n    positions[2] = min.z;\n    positions[3] = max.x;\n    positions[4] = min.y;\n    positions[5] = min.z;\n    positions[6] = max.x;\n    positions[7] = max.y;\n    positions[8] = min.z;\n    positions[9] = min.x;\n    positions[10] = max.y;\n    positions[11] = min.z;\n    positions[12] = min.x;\n    positions[13] = min.y;\n    positions[14] = max.z;\n    positions[15] = max.x;\n    positions[16] = min.y;\n    positions[17] = max.z;\n    positions[18] = max.x;\n    positions[19] = max.y;\n    positions[20] = max.z;\n    positions[21] = min.x;\n    positions[22] = max.y;\n    positions[23] = max.z;\n\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n\n    // 12 triangles:  6 faces, 2 triangles each.\n    indices = new Uint16Array(6 * 2 * 3);\n\n    // plane z = corner.Z\n    indices[0] = 4;\n    indices[1] = 5;\n    indices[2] = 6;\n    indices[3] = 4;\n    indices[4] = 6;\n    indices[5] = 7;\n\n    // plane z = -corner.Z\n    indices[6] = 1;\n    indices[7] = 0;\n    indices[8] = 3;\n    indices[9] = 1;\n    indices[10] = 3;\n    indices[11] = 2;\n\n    // plane x = corner.X\n    indices[12] = 1;\n    indices[13] = 6;\n    indices[14] = 5;\n    indices[15] = 1;\n    indices[16] = 2;\n    indices[17] = 6;\n\n    // plane y = corner.Y\n    indices[18] = 2;\n    indices[19] = 3;\n    indices[20] = 7;\n    indices[21] = 2;\n    indices[22] = 7;\n    indices[23] = 6;\n\n    // plane x = -corner.X\n    indices[24] = 3;\n    indices[25] = 0;\n    indices[26] = 4;\n    indices[27] = 3;\n    indices[28] = 4;\n    indices[29] = 7;\n\n    // plane y = -corner.Y\n    indices[30] = 0;\n    indices[31] = 1;\n    indices[32] = 5;\n    indices[33] = 0;\n    indices[34] = 5;\n    indices[35] = 4;\n  }\n\n  const diff = Cartesian3.subtract(max, min, diffScratch);\n  const radius = Cartesian3.magnitude(diff) * 0.5;\n\n  if (defined(boxGeometry._offsetAttribute)) {\n    const length = positions.length;\n    const offsetValue =\n      boxGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n    const applyOffset = new Uint8Array(length / 3).fill(offsetValue);\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, radius),\n    offsetAttribute: boxGeometry._offsetAttribute,\n  });\n};\n\nlet unitBoxGeometry;\n\n/**\n * Returns the geometric representation of a unit box, including its vertices, indices, and a bounding sphere.\n * @returns {Geometry} The computed vertices and indices.\n *\n * @private\n */\nBoxGeometry.getUnitBox = function () {\n  if (!defined(unitBoxGeometry)) {\n    unitBoxGeometry = BoxGeometry.createGeometry(\n      BoxGeometry.fromDimensions({\n        dimensions: new Cartesian3(1.0, 1.0, 1.0),\n        vertexFormat: VertexFormat.POSITION_ONLY,\n      }),\n    );\n  }\n  return unitBoxGeometry;\n};\nexport default BoxGeometry;\n"],"mappings":"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;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;;MAEjB;MACAA,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MAClBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MAClBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MAClBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MAClBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;;MAEjB;MACAA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;;MAEjB;MACAA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MAClBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,GAAG;MACjBA,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MACl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AAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;;MAElB;MACAA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MACnBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MACnBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MACnBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MACnBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;;MAElB;MACAA,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MACnBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MACnBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MACnBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;MACnBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;;MAElB;MACAA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAClBA,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MAElBjB,UAAU,CAACM,OAAO,GAAG,IAAI1D,iBAAiB,CAAC;QACzC6D,iBAAiB,EAAElE,iBAAiB,CAACwE,KAAK;QAC1CJ,sBAAsB,EAAE,CAAC;QACzBC,MAAM,EAAEK;MACV,CAAC,CAAC;IACJ;IAEA,IAAIpD,YAAY,CAAC0C,SAAS,EAAE;MAC1B,MAAMW,UAAU,GAAG,IAAIJ,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;MAE9C;MACAI,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;MACnBA,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;MACnBA,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;MACnBA,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;MACnBA,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;MACnBA,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;MACnBA,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;MACnBA,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;MACnBA,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;MACnBA,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG;MACnBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;;MAEpB;MACAA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;;MAEpB;MACAA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;;MAEpB;MACAA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,GAAG,GAAG;MACpBA,UAAU,CAAC,EAAE,CAAC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}