{"ast":null,"code":"// This file is part of meshoptimizer library and is distributed under the terms of MIT License.\n// Copyright (C) 2016-2024, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)\nvar MeshoptSimplifier = function () {\n  // Built with clang version 18.1.2\n  // Built from meshoptimizer 0.22\n  var wasm = 'b9H79Tebbbe9Hk9Geueu9Geub9Gbb9Gsuuuuuuuuuuuu99uueu9Gvuuuuub9Gvuuuuue999Gquuuuuuu99uueu9Gwuuuuuu99ueu9Giuuue999Gluuuueu9GiuuueuizsdilvoirwDbqqbeqlve9Weiiviebeoweuecj:Pdkr:Tewo9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bbz9TW79O9V9Wt9F79P9T9W29P9M95bl8E9TW79O9V9Wt9F79P9T9W29P9M959x9Pt9OcttV9P9I91tW7bvQ9TW79O9V9Wt9F79P9T9W29P9M959q9V9P9Ut7boX9TW79O9V9Wt9F79P9T9W29P9M959t9J9H2Wbra9TW79O9V9Wt9F9V9Wt9P9T9P96W9wWVtW94SWt9J9O9sW9T9H9Wbwl79IV9RbDDwebcekdmxq;UMesdbk:kfvKue99euY99Qu8Jjjjjbc;W;qb9Rgs8Kjjjjbcbhzascxfcbc;Kbz:ljjjb8AdnabaeSmbabaeadcdtz:kjjjb8AkdnamcdGTmbalcrfci4gHcbyd;S1jjbHjjjjbbheascxfasyd2gOcdtfaeBdbasaOcefBd2aecbaHz:ljjjbhAcbhlcbhednadTmbcbhlabheadhHinaAaeydbgOci4fgCaCRbbgCceaOcrGgOtV86bbaCcu7aO4ceGalfhlaeclfheaHcufgHmbkcualcdtalcFFFFi0Ehekaecbyd;S1jjbHjjjjbbhzascxfasyd2gecdtfazBdbasaecefBd2alcd4alfhOcehHinaHgecethHaeaO6mbkcbhXcuaecdtgOaecFFFFi0Ecbyd;S1jjbHjjjjbbhHascxfasyd2gCcdtfaHBdbasaCcefBd2aHcFeaOz:ljjjbhQdnadTmbaecufhCcbhLinabaXcdtfgKydbgAc:v;t;h;Ev2hOcbhedndninaQaOaCGgOcdtfgYydbgHcuSmeazaHcdtfydbaASmdaecefgeaOfhOaeaC9nmbxdkkazaLcdtfaABdbaYaLBdbaLhHaLcefhLkaKaHBdbaXcefgXad9hmbkkaQcbyd;O1jjbH:bjjjbbasasyd2cufBd2kcualcefgecdtaecFFFFi0Ecbyd;S1jjbHjjjjbbh8Aascxfasyd2gecdtfa8ABdbasa8ABdlasaecefBd2cuadcitadcFFFFe0Ecbyd;S1jjbHjjjjbbhEascxfasyd2gecdtfaEBdbasaEBdwasaecefBd2asclfabadalcbz:cjjjbcualcdtg3alcFFFFi0Eg5cbyd;S1jjbHjjjjbbhQascxfasyd2gecdtfaQBdbasaecefBd2a5cbyd;S1jjbHjjjjbbh8Eascxfasyd2gecdtfa8EBdbasaecefBd2alcd4alfhOcehHinaHgecethHaeaO6mbkcbhLcuaecdtgOaecFFFFi0Ecbyd;S1jjbHjjjjbbhHascxfasyd2gCcdtfaHBdbasaCcefBd2aHcFeaOz:ljjjbhXdnalTmbavcd4hCaecufhHinaLhednazTmbazaLcdtfydbhekaiaeaC2cdtfgeydlgOcH4aO7c:F:b:DD2aeydbgOcH4aO7c;D;O:B8J27aeydwgecH4ae7c:3F;N8N27aHGheaLcdth8FdndndndndnazTmbaza8FfhKcbhOinaXaecdtfgYydbgAcuSmlaiazaAcdtfydbaC2cdtfaiaKydbaC2cdtfcxz:ojjjbTmiaOcefgOaefaHGheaOaH9nmbxdkkaiaLaC2cdtfhKcbhOinaXaecdtfgYydbgAcuSmiaiaAaC2cdtfaKcxz:ojjjbTmdaOcefgOaefaHGheaOaH9nmbkkcbhYkaYydbgecu9hmekaYaLBdbaLhekaQa8FfaeBdbaLcefgLal9hmbkcbhea8EhHinaHaeBdbaHclfhHalaecefge9hmbkcbheaQhHa8EhOindnaeaHydbgCSmbaOa8EaCcdtfgCydbBdbaCaeBdbkaHclfhHaOclfhOalaecefge9hmbkkcbhaaXcbyd;O1jjbH:bjjjbbasasyd2cufBd2alcbyd;S1jjbHjjjjbbhXascxfasyd2gecdtfaXBdbasaecefBd2a5cbyd;S1jjbHjjjjbbheascxfasyd2gHcdtfaeBdbasaHcefBd2a5cbyd;S1jjbHjjjjbbhHascxfasyd2gOcdtfaHBdbasaOcefBd2aecFea3z:ljjjbhhaHcFea3z:ljjjbhgdnalTmbaEcwfh8Jindna8AaagOcefgacdtfydbgCa8AaOcdtgefydbgHSmbaCaH9Rh8FaEaHcitfh3agaefh8KahaefhLcbhAindndna3aAcitfydbgYaO9hmbaLaOBdba8KaOBdbxekdna8AaYcdtg8LfgeclfydbgHaeydbgeSmbaEaecitgCfydbaOSmeaHae9Rh8Maecu7aHfhKa8JaCfhHcbheinaKaeSmeaecefheaHydbhCaHcwfhHaCaO9hmbkaea8M6mekaga8LfgeaOaYaeydbcuSEBdbaLaYaOaLydbcuSEBdbkaAcefgAa8F9hmbkkaaal9hmbkaQhHa8EhOaghCahhAcbheindndnaeaHydbgY9hmbdnaeaOydbgY9hmbaAydbhYdnaCydbgKcu9hmbaYcu9hmbaXaefcb86bbxikaXaefhLdnaeaKSmbaeaYSmbaLce86bbxikaLcl86bbxdkdnaea8EaYcdtgKfydb9hmbdnaCydbgLcuSmbaeaLSmbaAydbg8FcuSmbaea8FSmbagaKfydbg3cuSmba3aYSmbahaKfydbgKcuSmbaKaYSmbdnaQaLcdtfydbgYaQaKcdtfydb9hmbaYaQa8FcdtfydbgKSmbaKaQa3cdtfydb9hmbaXaefcd86bbxlkaXaefcl86bbxikaXaefcl86bbxdkaXaefcl86bbxekaXaefaXaYfRbb86bbkaHclfhHaOclfhOaCclfhCaAclfhAalaecefge9hmbkdnaqTmbdndnazTmbazheaQhHalhOindnaqaeydbfRbbTmbaXaHydbfcl86bbkaeclfheaHclfhHaOcufgOmbxdkkaQhealhHindnaqRbbTmbaXaeydbfcl86bbkaqcefhqaeclfheaHcufgHmbkkaQhealhOaXhHindnaXaeydbfRbbcl9hmbaHcl86bbkaeclfheaHcefhHaOcufgOmbkkamceGTmbaXhealhHindnaeRbbce9hmbaecl86bbkaecefheaHcufgHmbkkcualcx2alc;v:Q;v:Qe0Ecbyd;S1jjbHjjjjbbhaascxfasyd2gecdtfaaBdbasaecefBd2aaaialavazz:djjjbh8NdndnaDmbcbhycbh8Jxekcbh8JawhecbhHindnaeIdbJbbbb9ETmbasc;Wbfa8JcdtfaHBdba8Jcefh8JkaeclfheaDaHcefgH9hmbkcua8Jal2gecdtaecFFFFi0Ecbyd;S1jjbHjjjjbbhyascxfasyd2gecdtfayBdbasaecefBd2alTmba8JTmbarcd4hLdnazTmba8JcdthicbhYayhKinaoazaYcdtfydbaL2cdtfhAasc;WbfheaKhHa8JhOinaHaAaeydbcdtgCfIdbawaCfIdbNUdbaeclfheaHclfhHaOcufgOmbkaKaifhKaYcefgYal9hmbxdkka8JcdthicbhYayhKinaoaYaL2cdtfhAasc;WbfheaKhHa8JhOinaHaAaeydbcdtgCfIdbawaCfIdbNUdbaeclfheaHclfhHaOcufgOmbkaKaifhKaYcefgYal9hmbkkcualc8S2gHalc;D;O;f8U0EgCcbyd;S1jjbHjjjjbbheascxfasyd2gOcdtfaeBdbasaOcefBd2aecbaHz:ljjjbhqdndndndna8JTmbaCcbyd;S1jjbHjjjjbbhvascxfasyd2gecdtfavBdbcehOasaecefBd2avcbaHz:ljjjb8Acua8Jal2gecltgHaecFFFFb0Ecbyd;S1jjbHjjjjbbhrascxfasyd2gecdtfarBdbasaecefBd2arcbaHz:ljjjb8AadmexikcbhvadTmecbhrkcbhAabhHindnaaaHclfydbgYcx2fgeIdbaaaHydbgKcx2fgOIdbg8P:tgIaaaHcwfydbgLcx2fgCIdlaOIdlg8R:tg8SNaCIdba8P:tgRaeIdla8R:tg8UN:tg8Va8VNa8UaCIdwaOIdwg8W:tg8XNa8SaeIdwa8W:tg8UN:tg8Sa8SNa8UaRNa8XaIN:tgIaINMM:rgRJbbbb9ETmba8VaR:vh8VaIaR:vhIa8SaR:vh8SkaqaQaKcdtfydbc8S2fgea8SaR:rgRa8SNNg8UaeIdbMUdbaeaIaRaINg8YNg8XaeIdlMUdlaea8VaRa8VNg8ZNg80aeIdwMUdwaea8Ya8SNg8YaeIdxMUdxaea8Za8SNg81aeIdzMUdzaea8ZaINg8ZaeIdCMUdCaea8SaRa8Va8WNa8Sa8PNa8RaINMM:mg8RNg8PNg8SaeIdKMUdKaeaIa8PNgIaeId3MUd3aea8Va8PNg8VaeIdaMUdaaea8Pa8RNg8PaeId8KMUd8KaeaRaeIdyMUdyaqaQaYcdtfydbc8S2fgea8UaeIdbMUdbaea8XaeIdlMUdlaea80aeIdwMUdwaea8YaeIdxMUdxaea81aeIdzMUdzaea8ZaeIdCMUdCaea8SaeIdKMUdKaeaIaeId3MUd3aea8VaeIdaMUdaaea8PaeId8KMUd8KaeaRaeIdyMUdyaqaQaLcdtfydbc8S2fgea8UaeIdbMUdbaea8XaeIdlMUdlaea80aeIdwMUdwaea8YaeIdxMUdxaea81aeIdzMUdzaea8ZaeIdCMUdCaea8SaeIdKMUdKaeaIaeId3MUd3aea8VaeIdaMUdaaea8PaeId8KMUd8KaeaRaeIdyMUdyaHcxfhHaAcifgAad6mbkcbhiabhKinabaicdtfhYcbhHinaXaYaHc:G1jjbfydbcdtfydbgOfRbbhedndnaXaKaHfydbgCfRbbgAc99fcFeGcpe0mbaeceSmbaecd9hmekdnaAcufcFeGce0mbahaCcdtfydbaO9hmekdnaecufcFeGce0mbagaOcdtfydbaC9hmekdnaAcv2aefcj1jjbfRbbTmbaQaOcdtfydbaQaCcdtfydb0mekJbbacJbbacJbbjZaeceSEaAceSEh8ZdnaaaYaHc:K1jjbfydbcdtfydbcx2fgeIdwaaaCcx2fgAIdwg8R:tg8VaaaOcx2fgLIdwa8R:tg8Sa8SNaLIdbaAIdbg8W:tgIaINaLIdlaAIdlg8U:tgRaRNMMg8PNa8Va8SNaeIdba8W:tg80aINaRaeIdla8U:tg8YNMMg8Xa8SN:tg8Va8VNa80a8PNa8XaIN:tg8Sa8SNa8Ya8PNa8XaRN:tgIaINMM:rgRJbbbb9ETmba8VaR:vh8VaIaR:vhIa8SaR:vh8SkaqaQaCcdtfydbc8S2fgea8Sa8Za8P:rNgRa8SNNg8XaeIdbMUdbaeaIaRaINg8ZNg80aeIdlMUdlaea8VaRa8VNg8PNg8YaeIdwMUdwaea8Za8SNg8ZaeIdxMUdxaea8Pa8SNg81aeIdzMUdzaea8PaINgBaeIdCMUdCaea8SaRa8Va8RNa8Sa8WNa8UaINMM:mg8RNg8PNg8SaeIdKMUdKaeaIa8PNgIaeId3MUd3aea8Va8PNg8VaeIdaMUdaaea8Pa8RNg8PaeId8KMUd8KaeaRaeIdyMUdyaqaQaOcdtfydbc8S2fgea8XaeIdbMUdbaea80aeIdlMUdlaea8YaeIdwMUdwaea8ZaeIdxMUdxaea81aeIdzMUdzaeaBaeIdCMUdCaea8SaeIdKMUdKaeaIaeId3MUd3aea8VaeIdaMUdaaea8PaeId8KMUd8KaeaRaeIdyMUdykaHclfgHcx9hmbkaKcxfhKaicifgiad6mbkdna8JTmbcbhKinJbbbbh8WaaabaKcdtfgeclfydbgLcx2fgHIdwaaaeydbgicx2fgOIdwg8Y:tgIaINaHIdbaOIdbg81:tg8Va8VNaHIdlaOIdlgB:tgRaRNMMg8Zaaaecwfydbg8Fcx2fgeIdwa8Y:tg8PNaIaIa8PNa8VaeIdba81:tg8RNaRaeIdlaB:tg8UNMMg8SN:tJbbbbJbbjZa8Za8Pa8PNa8Ra8RNa8Ua8UNMMg80Na8Sa8SN:tg8X:va8XJbbbb9BEg8XNh83a80aINa8Pa8SN:ta8XNhUa8Za8UNaRa8SN:ta8XNh85a80aRNa8Ua8SN:ta8XNh86a8Za8RNa8Va8SN:ta8XNh87a80a8VNa8Ra8SN:ta8XNh88a8Va8UNa8RaRN:tg8Sa8SNaRa8PNa8UaIN:tg8Sa8SNaIa8RNa8Pa8VN:tg8Sa8SNMM:rJbbbZNh8Sayaia8J2g3cdtfhHaya8Fa8J2gwcdtfhOayaLa8J2g8LcdtfhCa8Y:mh89aB:mh8:a81:mhZcbhAa8JhYJbbbbh8UJbbbbh8XJbbbbh8ZJbbbbh80Jbbbbh8YJbbbbh81JbbbbhBJbbbbhnJbbbbhcinasc;WbfaAfgecwfa8SaUaCIdbaHIdbg8P:tgRNa83aOIdba8P:tg8RNMgINUdbaeclfa8Sa86aRNa85a8RNMg8VNUdbaea8Sa88aRNa87a8RNMgRNUdbaecxfa8Sa89aINa8:a8VNa8PaZaRNMMMg8PNUdba8SaIa8VNNa80Mh80a8SaIaRNNa8YMh8Ya8Sa8VaRNNa81Mh81a8Sa8Pa8PNNa8WMh8Wa8SaIa8PNNa8UMh8Ua8Sa8Va8PNNa8XMh8Xa8SaRa8PNNa8ZMh8Za8SaIaINNaBMhBa8Sa8Va8VNNanMhna8SaRaRNNacMhcaHclfhHaCclfhCaOclfhOaAczfhAaYcufgYmbkavaic8S2fgeacaeIdbMUdbaeanaeIdlMUdlaeaBaeIdwMUdwaea81aeIdxMUdxaea8YaeIdzMUdzaea80aeIdCMUdCaea8ZaeIdKMUdKaea8XaeId3MUd3aea8UaeIdaMUdaaea8WaeId8KMUd8Kaea8SaeIdyMUdyavaLc8S2fgeacaeIdbMUdbaeanaeIdlMUdlaeaBaeIdwMUdwaea81aeIdxMUdxaea8YaeIdzMUdzaea80aeIdCMUdCaea8ZaeIdKMUdKaea8XaeId3MUd3aea8UaeIdaMUdaaea8WaeId8KMUd8Kaea8SaeIdyMUdyava8Fc8S2fgeacaeIdbMUdbaeanaeIdlMUdlaeaBaeIdwMUdwaea81aeIdxMUdxaea8YaeIdzMUdzaea80aeIdCMUdCaea8ZaeIdKMUdKaea8XaeId3MUd3aea8UaeIdaMUdaaea8WaeId8KMUd8Kaea8SaeIdyMUdyara3cltfhYcbhHa8JhCinaYaHfgeasc;WbfaHfgOIdbaeIdbMUdbaeclfgAaOclfIdbaAIdbMUdbaecwfgAaOcwfIdbaAIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaCcufgCmbkara8LcltfhYcbhHa8JhCinaYaHfgeasc;WbfaHfgOIdbaeIdbMUdbaeclfgAaOclfIdbaAIdbMUdbaecwfgAaOcwfIdbaAIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaCcufgCmbkarawcltfhYcbhHa8JhCinaYaHfgeasc;WbfaHfgOIdbaeIdbMUdbaeclfgAaOclfIdbaAIdbMUdbaecwfgAaOcwfIdbaAIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaCcufgCmbkaKcifgKad6mbkkcbhOxekcehOcbhrkcbh8FdndnamcwGg9cmbJbbbbh8ZcbhJcbhocbhCxekcbhea5cbyd;S1jjbHjjjjbbhCascxfasyd2gHcdtfaCBdbasaHcefBd2dnalTmbaChHinaHaeBdbaHclfhHalaecefge9hmbkkdnaOmbcbhiinabaicdtfhLcbhKinaQaLaKcdtgec:G1jjbfydbcdtfydbcdtfydbhHdnaCaQaLaefydbcdtfydbgOcdtfgAydbgeaOSmbinaAaCaegOcdtfgYydbgeBdbaYhAaOae9hmbkkdnaCaHcdtfgAydbgeaHSmbinaAaCaegHcdtfgYydbgeBdbaYhAaHae9hmbkkdnaOaHSmbaCaOaHaOaH0EcdtfaOaHaOaH6EBdbkaKcefgKci9hmbkaicifgiad6mbkkcbhJdnalTmbcbhYindnaQaYcdtgefydbaY9hmbaYhHdnaCaefgKydbgeaYSmbaKhOinaOaCaegHcdtfgAydbgeBdbaAhOaHae9hmbkkaKaHBdbkaYcefgYal9hmbkcbheaQhOaChHcbhJindndnaeaOydbgA9hmbdnaeaHydbgA9hmbaHaJBdbaJcefhJxdkaHaCaAcdtfydbBdbxekaHaCaAcdtfydbBdbkaOclfhOaHclfhHalaecefge9hmbkkcuaJcltgeaJcjjjjiGEcbyd;S1jjbHjjjjbbhoascxfasyd2gHcdtfaoBdbasaHcefBd2aocbaez:ljjjbhAdnalTmbaChOaahealhYinaecwfIdbh8SaeclfIdbhIaAaOydbcltfgHaeIdbaHIdbMUdbaHclfgKaIaKIdbMUdbaHcwfgKa8SaKIdbMUdbaHcxfgHaHIdbJbbjZMUdbaOclfhOaecxfheaYcufgYmbkkdnaJTmbaAheaJhHinaecxfgOIdbh8SaOcbBdbaeaeIdbJbbbbJbbjZa8S:va8SJbbbb9BEg8SNUdbaeclfgOa8SaOIdbNUdbaecwfgOa8SaOIdbNUdbaeczfheaHcufgHmbkkdnalTmbaChOaahealhYinaAaOydbcltfgHcxfgKaecwfIdbaHcwfIdb:tg8Sa8SNaeIdbaHIdb:tg8Sa8SNaeclfIdbaHclfIdb:tg8Sa8SNMMg8SaKIdbgIaIa8S9DEUdbaOclfhOaecxfheaYcufgYmbkkdnaJmbcbhJJFFuuh8ZxekaAcxfheaAhHaJhOinaHaeIdbUdbaeczfheaHclfhHaOcufgOmbkJFFuuh8ZaAheaJhHinaeIdbg8Sa8Za8Za8S9EEh8ZaeclfheaHcufgHmbkkasydlh9ednalTmba9eclfhea9eydbhAaXhHalhYcbhOincbaeydbgKaA9RaHRbbcpeGEaOfhOaHcefhHaeclfheaKhAaYcufgYmbkaOce4h8Fkcuada8F9RcifgTcx2aTc;v:Q;v:Qe0Ecbyd;S1jjbHjjjjbbhDascxfasyd2gecdtfaDBdbasaecefBd2cuaTcdtaTcFFFFi0Ecbyd;S1jjbHjjjjbbhSascxfasyd2gecdtfaSBdbasaecefBd2a5cbyd;S1jjbHjjjjbbh8Mascxfasyd2gecdtfa8MBdbasaecefBd2alcbyd;S1jjbHjjjjbbh9hascxfasyd2gecdtfa9hBdbasaecefBd2axaxNa8NJbbjZamclGEg83a83N:vhcJbbbbhndnadak9nmbdnaTci6mba8Jclth9iaDcwfh6JbbbbhBJbbbbhninasclfabadalaQz:cjjjbabh8FcbhEcbh5inaba5cdtfh3cbheindnaQa8FaefydbgOcdtgifydbgYaQa3aec:W1jjbfydbcdtfydbgHcdtgwfydbgKSmbaXaHfRbbgLcv2aXaOfRbbgAfc;a1jjbfRbbg8AaAcv2aLfg8Lc;a1jjbfRbbg8KVcFeGTmbdnaKaY9nmba8Lcj1jjbfRbbcFeGmekaAcufhYdnaAaL9hmbaYcFeGce0mbahaifydbaH9hmekdndnaAclSmbaLcl9hmekdnaYcFeGce0mbahaifydbaH9hmdkaLcufcFeGce0mbagawfydbaO9hmekaDaEcx2fgAaHaOa8KcFeGgYEBdlaAaOaHaYEBdbaAaYa8AGcb9hBdwaEcefhEkaeclfgecx9hmbkdna5cifg5ad9pmba8Fcxfh8FaEcifaT9nmekkaETmdcbhiinJbbbbJbbjZaqaQaDaicx2fgAydlgKaAydbgYaAydwgHEgLcdtfydbc8S2fgeIdyg8S:va8SJbbbb9BEaeIdwaaaYaKaHEg8Fcx2fgHIdwgRNaeIdzaHIdbg8PNaeIdaMg8Sa8SMMaRNaeIdlaHIdlg8RNaeIdCaRNaeId3Mg8Sa8SMMa8RNaeIdba8PNaeIdxa8RNaeIdKMg8Sa8SMMa8PNaeId8KMMM:lNh80JbbbbJbbjZaqaQaYcdtfydbc8S2fgeIdyg8S:va8SJbbbb9BEaeIdwaaaKcx2fgHIdwg8VNaeIdzaHIdbg8WNaeIdaMg8Sa8SMMa8VNaeIdlaHIdlg8UNaeIdCa8VNaeId3Mg8Sa8SMMa8UNaeIdba8WNaeIdxa8UNaeIdKMg8Sa8SMMa8WNaeId8KMMM:lNh8YaAcwfh3aAclfhwdna8JTmbavaYc8S2fgOIdwa8VNaOIdza8WNaOIdaMg8Sa8SMMa8VNaOIdla8UNaOIdCa8VNaOId3Mg8Sa8SMMa8UNaOIdba8WNaOIdxa8UNaOIdKMg8Sa8SMMa8WNaOId8KMMMh8SayaKa8J2cdtfhHaraYa8J2cltfheaOIdyh8Xa8JhOinaHIdbgIaIa8XNaecxfIdba8VaecwfIdbNa8WaeIdbNa8UaeclfIdbNMMMgIaIM:tNa8SMh8SaHclfhHaeczfheaOcufgOmbkavaLc8S2fgOIdwaRNaOIdza8PNaOIdaMgIaIMMaRNaOIdla8RNaOIdCaRNaOId3MgIaIMMa8RNaOIdba8PNaOIdxa8RNaOIdKMgIaIMMa8PNaOId8KMMMhIaya8Fa8J2cdtfhHaraLa8J2cltfheaOIdyh8Wa8JhOinaHIdbg8Va8Va8WNaecxfIdbaRaecwfIdbNa8PaeIdbNa8RaeclfIdbNMMMg8Va8VM:tNaIMhIaHclfhHaeczfheaOcufgOmbka80aI:lMh80a8Ya8S:lMh8YkawaKa8Fa8Ya809FgeEBdbaAaYaLaeEBdba3a8Ya80aeEUdbaicefgiaE9hmbkasc;Wbfcbcj;qbz:ljjjb8Aa6heaEhHinasc;WbfaeydbcA4cF8FGgOcFAaOcFA6EcdtfgOaOydbcefBdbaecxfheaHcufgHmbkcbhecbhHinasc;WbfaefgOydbhAaOaHBdbaAaHfhHaeclfgecj;qb9hmbkcbhea6hHinasc;WbfaHydbcA4cF8FGgOcFAaOcFA6EcdtfgOaOydbgOcefBdbaSaOcdtfaeBdbaHcxfhHaEaecefge9hmbkadak9RgOci9Uh9kdnalTmbcbhea8MhHinaHaeBdbaHclfhHalaecefge9hmbkkcbh0a9hcbalz:ljjjbh9maOcO9Uh9na9kce4h9oasydwh9pcbh8KcbhwdninaDaSawcdtfydbcx2fg3Idwg8Sac9Emea8Ka9k9pmeJFFuuhIdna9oaE9pmbaDaSa9ocdtfydbcx2fIdwJbb;aZNhIkdna8SaI9ETmba8San9ETmba8Ka9n0mdkdna9maQa3ydlgicdtg9qfydbgAfg9rRbba9maQa3ydbgLcdtg9sfydbgHfg9tRbbVmbaXaLfRbbh9udna9eaHcdtfgeclfydbgOaeydbgeSmbaOae9RhKa9paecitfheaaaAcx2fg8Lcwfh5a8Lclfh9vaaaHcx2fg8Acwfh9wa8Aclfh9xcbhHceh8Fdnindna8MaeydbcdtfydbgOaASmba8MaeclfydbcdtfydbgYaASmbaOaYSmbaaaYcx2fgYIdbaaaOcx2fgOIdbg8V:tg8Sa9xIdbaOIdlgR:tg8WNa8AIdba8V:tg8UaYIdlaR:tgIN:tg8Pa8Sa9vIdbaR:tg8XNa8LIdba8V:tg80aIN:tgRNaIa9wIdbaOIdwg8R:tg8YNa8WaYIdwa8R:tg8VN:tg8WaIa5Idba8R:tg81Na8Xa8VN:tgINa8Va8UNa8Ya8SN:tg8Ra8Va80Na81a8SN:tg8SNMMa8Pa8PNa8Wa8WNa8Ra8RNMMaRaRNaIaINa8Sa8SNMMN:rJbbj8:N9FmdkaecwfheaHcefgHaK6h8FaKaH9hmbkka8FceGTmba9ocefh9oxeka3cwfhHdndndndna9uc9:fPdebdkaLheina8MaecdtgefaiBdba8EaefydbgeaL9hmbxikkdnagahaha9sfydbaiSEa8Ea9sfydbgLcdtfydbgecu9hmba8Ea9qfydbheka8Ma9sfaiBdbaehika8MaLcdtfaiBdbka9tce86bba9rce86bbaHIdbg8Sanana8S9DEhna0cefh0cecda9uceSEa8Kfh8KkawcefgwaE9hmbkka0TmddnalTmbcbhKcbhiindna8MaicdtgefydbgOaiSmbaQaOcdtfydbh8FdnaiaQaefydb9hg3mbaqa8Fc8S2fgeaqaic8S2fgHIdbaeIdbMUdbaeaHIdlaeIdlMUdlaeaHIdwaeIdwMUdwaeaHIdxaeIdxMUdxaeaHIdzaeIdzMUdzaeaHIdCaeIdCMUdCaeaHIdKaeIdKMUdKaeaHId3aeId3MUd3aeaHIdaaeIdaMUdaaeaHId8KaeId8KMUd8KaeaHIdyaeIdyMUdyka8JTmbavaOc8S2fgeavaic8S2gwfgHIdbaeIdbMUdbaeaHIdlaeIdlMUdlaeaHIdwaeIdwMUdwaeaHIdxaeIdxMUdxaeaHIdzaeIdzMUdzaeaHIdCaeIdCMUdCaeaHIdKaeIdKMUdKaeaHId3aeId3MUd3aeaHIdaaeIdaMUdaaeaHId8KaeId8KMUd8KaeaHIdyaeIdyMUdya9iaO2hLarhHa8JhAinaHaLfgeaHaKfgOIdbaeIdbMUdbaeclfgYaOclfIdbaYIdbMUdbaecwfgYaOcwfIdbaYIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaAcufgAmbka3mbJbbbbJbbjZaqawfgeIdyg8S:va8SJbbbb9BEaeIdwaaa8Fcx2fgHIdwg8SNaeIdzaHIdbgINaeIdaMg8Va8VMMa8SNaeIdlaHIdlg8VNaeIdCa8SNaeId3Mg8Sa8SMMa8VNaeIdbaINaeIdxa8VNaeIdKMg8Sa8SMMaINaeId8KMMM:lNg8SaBaBa8S9DEhBkaKa9ifhKaicefgial9hmbkcbhHahheindnaeydbgOcuSmbdnaHa8MaOcdtgAfydbgO9hmbcuhOahaAfydbgAcuSmba8MaAcdtfydbhOkaeaOBdbkaeclfhealaHcefgH9hmbkcbhHagheindnaeydbgOcuSmbdnaHa8MaOcdtgAfydbgO9hmbcuhOagaAfydbgAcuSmba8MaAcdtfydbhOkaeaOBdbkaeclfhealaHcefgH9hmbkkaBana8JEhBcbhYabhecbhKindna8MaeydbcdtfydbgHa8MaeclfydbcdtfydbgOSmbaHa8MaecwfydbcdtfydbgASmbaOaASmbabaYcdtfgLaHBdbaLcwfaABdbaLclfaOBdbaYcifhYkaecxfheaKcifgKad6mbkdndna9cTmbaYak9nmba8ZaB9FTmbcbhdabhecbhHindnaoaCaeydbgOcdtfydbcdtfIdbaB9ETmbabadcdtfgAaOBdbaAclfaeclfydbBdbaAcwfaecwfydbBdbadcifhdkaecxfheaHcifgHaY6mbkJFFuuh8ZaJTmeaoheaJhHJFFuuh8SinaeIdbgIa8Sa8SaI9EEg8Va8SaIaB9EgOEh8Sa8Va8ZaOEh8ZaeclfheaHcufgHmbxdkkaYhdkadak0mbxdkkasclfabadalaQz:cjjjbkdndnadak0mbadhOxekdna9cmbadhOxekdna8Zac9FmbadhOxekina8ZJbb;aZNg8Saca8Sac9DEh8VJbbbbh8SdnaJTmbaoheaJhHinaeIdbgIa8SaIa8V9FEa8SaIa8S9EEh8SaeclfheaHcufgHmbkkcbhOabhecbhHindnaoaCaeydbgAcdtfydbcdtfIdba8V9ETmbabaOcdtfgYaABdbaYclfaeclfydbBdbaYcwfaecwfydbBdbaOcifhOkaecxfheaHcifgHad6mbkJFFuuh8ZdnaJTmbaoheaJhHJFFuuhIinaeIdbgRaIaIaR9EEg8PaIaRa8V9EgAEhIa8Pa8ZaAEh8ZaeclfheaHcufgHmbkkdnaOad9hmbadhOxdka8Sanana8S9DEhnaOak9nmeaOhda8Zac9FmbkkdnamcjjjjlGTmbazmbaOTmbcbhQabheinaXaeydbgAfRbbc3thKaecwfgLydbhHdndnahaAcdtg8FfydbaeclfgiydbgCSmbcbhYagaCcdtfydbaA9hmekcjjjj94hYkaeaKaYVaAVBdbaXaCfRbbc3thKdndnahaCcdtfydbaHSmbcbhYagaHcdtfydbaC9hmekcjjjj94hYkaiaKaYVaCVBdbaXaHfRbbc3thYdndnahaHcdtfydbaASmbcbhCaga8FfydbaH9hmekcjjjj94hCkaLaYaCVaHVBdbaecxfheaQcifgQaO6mbkkdnazTmbaOTmbaOheinabazabydbcdtfydbBdbabclfhbaecufgembkkdnaPTmbaPa83an:rNUdbkasyd2gecdtascxffc98fhHdninaeTmeaHydbcbyd;O1jjbH:bjjjbbaHc98fhHaecufhexbkkasc;W;qbf8KjjjjbaOk;Yieouabydlhvabydbclfcbaicdtz:ljjjbhoadci9UhrdnadTmbdnalTmbaehwadhDinaoalawydbcdtfydbcdtfgqaqydbcefBdbawclfhwaDcufgDmbxdkkaehwadhDinaoawydbcdtfgqaqydbcefBdbawclfhwaDcufgDmbkkdnaiTmbcbhDaohwinawydbhqawaDBdbawclfhwaqaDfhDaicufgimbkkdnadci6mbinaecwfydbhwaeclfydbhDaeydbhidnalTmbalawcdtfydbhwalaDcdtfydbhDalaicdtfydbhikavaoaicdtfgqydbcitfaDBdbavaqydbcitfawBdlaqaqydbcefBdbavaoaDcdtfgqydbcitfawBdbavaqydbcitfaiBdlaqaqydbcefBdbavaoawcdtfgwydbcitfaiBdbavawydbcitfaDBdlawawydbcefBdbaecxfhearcufgrmbkkabydbcbBdbk;Podvuv998Jjjjjbca9RgvcFFF;7rBd3av9cFFF;7;3FF:;Fb83dCavcFFF97Bdzav9cFFF;7FFF:;u83dwdnadTmbaicd4hodnabmbdnalTmbcbhrinaealarcdtfydbao2cdtfhwcbhiinavcCfaifgDawaifIdbgqaDIdbgkakaq9EEUdbavcwfaifgDaqaDIdbgkakaq9DEUdbaiclfgicx9hmbkarcefgrad9hmbxikkaocdthrcbhwincbhiinavcCfaifgDaeaifIdbgqaDIdbgkakaq9EEUdbavcwfaifgDaqaDIdbgkakaq9DEUdbaiclfgicx9hmbkaearfheawcefgwad9hmbxdkkdnalTmbcbhrinabarcx2fgiaealarcdtfydbao2cdtfgwIdbUdbaiawIdlUdlaiawIdwUdwcbhiinavcCfaifgDawaifIdbgqaDIdbgkakaq9EEUdbavcwfaifgDaqaDIdbgkakaq9DEUdbaiclfgicx9hmbkarcefgrad9hmbxdkkaocdthlcbhraehwinabarcx2fgiaearao2cdtfgDIdbUdbaiaDIdlUdlaiaDIdwUdwcbhiinavcCfaifgDawaifIdbgqaDIdbgkakaq9EEUdbavcwfaifgDaqaDIdbgkakaq9DEUdbaiclfgicx9hmbkawalfhwarcefgrad9hmbkkJbbbbavIdwavIdCgk:tgqaqJbbbb9DEgqavIdxavIdKgx:tgmamaq9DEgqavIdzavId3gm:tgPaPaq9DEhPdnabTmbadTmbJbbbbJbbjZaP:vaPJbbbb9BEhqinabaqabIdbak:tNUdbabclfgvaqavIdbax:tNUdbabcwfgvaqavIdbam:tNUdbabcxfhbadcufgdmbkkaPk8MbabaeadaialavcbcbcbcbcbaoarawaDz:bjjjbk8MbabaeadaialavaoarawaDaqakaxamaPz:bjjjbk:nCoDud99rue99lul998Jjjjjbc;Wb9Rgw8KjjjjbdndnarmbcbhDxekawcxfcbc;Kbz:ljjjb8Aawcuadcx2adc;v:Q;v:Qe0Ecbyd;S1jjbHjjjjbbgqBdxawceBd2aqaeadaicbz:djjjb8AawcuadcdtadcFFFFi0Egkcbyd;S1jjbHjjjjbbgxBdzawcdBd2adcd4adfhmceheinaegicetheaiam6mbkcbhPawcuaicdtgsaicFFFFi0Ecbyd;S1jjbHjjjjbbgzBdCawciBd2dndnar:ZgH:rJbbbZMgO:lJbbb9p9DTmbaO:Ohexekcjjjj94hekaicufhAc:bwhmcbhCadhXcbhQinaChLaeamgKcufaeaK9iEaPgDcefaeaD9kEhYdndnadTmbaYcuf:YhOaqhiaxheadhmindndnaiIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhCxekcjjjj94hCkaCcCthCdndnaiclfIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhExekcjjjj94hEkaEcqtaCVhCdndnaicwfIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhExekcjjjj94hEkaeaCaEVBdbaicxfhiaeclfheamcufgmmbkazcFeasz:ljjjbh3cbh5cbh8Eindna3axa8EcdtfydbgCcm4aC7c:v;t;h;Ev2gics4ai7aAGgmcdtfgEydbgecuSmbaeaCSmbcehiina3amaifaAGgmcdtfgEydbgecuSmeaicefhiaeaC9hmbkkaEaCBdba5aecuSfh5a8Ecefg8Ead9hmbxdkkazcFeasz:ljjjb8Acbh5kaDaYa5ar0giEhPaLa5aiEhCdna5arSmbaYaKaiEgmaP9Rcd9imbdndnaQcl0mbdnaX:ZgOaL:Zg8A:taY:Yg8FaD:Y:tgaa8FaK:Y:tgha5:ZggaH:tNNNaOaH:tahNa8Aag:tNa8AaH:taaNagaO:tNM:va8FMJbbbZMgO:lJbbb9p9DTmbaO:Ohexdkcjjjj94hexekaPamfcd9Theka5aXaiEhXaQcefgQcs9hmekkdndnaCmbcihicbhDxekcbhiawakcbyd;S1jjbHjjjjbbg8EBdKawclBd2aPcuf:Yh8AdndnadTmbaqhiaxheadhmindndnaiIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhCxekcjjjj94hCkaCcCthCdndnaiclfIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhExekcjjjj94hEkaEcqtaCVhCdndnaicwfIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhExekcjjjj94hEkaeaCaEVBdbaicxfhiaeclfheamcufgmmbkazcFeasz:ljjjbh3cbhDcbh5inaxa5cdtgYfydbgCcm4aC7c:v;t;h;Ev2gics4ai7hecbhidndnina3aeaAGgmcdtfgEydbgecuSmednaxaecdtgEfydbaCSmbaicefgiamfheaiaA9nmekka8EaEfydbhixekaEa5BdbaDhiaDcefhDka8EaYfaiBdba5cefg5ad9hmbkcuaDc32giaDc;j:KM;jb0EhexekazcFeasz:ljjjb8AcbhDcbhekawaecbyd;S1jjbHjjjjbbgeBd3awcvBd2aecbaiz:ljjjbhEavcd4hxdnadTmbdnalTmbaxcdth3a8EhCalheaqhmadhAinaEaCydbc32fgiamIdbaiIdbMUdbaiamclfIdbaiIdlMUdlaiamcwfIdbaiIdwMUdwaiaeIdbaiIdxMUdxaiaeclfIdbaiIdzMUdzaiaecwfIdbaiIdCMUdCaiaiIdKJbbjZMUdKaCclfhCaea3fheamcxfhmaAcufgAmbxdkka8EhmaqheadhCinaEamydbc32fgiaeIdbaiIdbMUdbaiaeclfIdbaiIdlMUdlaiaecwfIdbaiIdwMUdwaiaiIdxJbbbbMUdxaiaiIdzJbbbbMUdzaiaiIdCJbbbbMUdCaiaiIdKJbbjZMUdKamclfhmaecxfheaCcufgCmbkkdnaDTmbaEhiaDheinaiaiIdbJbbbbJbbjZaicKfIdbgO:vaOJbbbb9BEgONUdbaiclfgmaOamIdbNUdbaicwfgmaOamIdbNUdbaicxfgmaOamIdbNUdbaiczfgmaOamIdbNUdbaicCfgmaOamIdbNUdbaic3fhiaecufgembkkcbhCawcuaDcdtgYaDcFFFFi0Egicbyd;S1jjbHjjjjbbgeBdaawcoBd2awaicbyd;S1jjbHjjjjbbg3Bd8KaecFeaYz:ljjjbh5dnadTmbJbbjZJbbjZa8A:vaPceSEaoNgOaONh8Aaxcdthxalheina8Aaec;C1jjbalEgmIdwaEa8EydbgAc32fgiIdC:tgOaONamIdbaiIdx:tgOaONamIdlaiIdz:tgOaONMMNaqcwfIdbaiIdw:tgOaONaqIdbaiIdb:tgOaONaqclfIdbaiIdl:tgOaONMMMhOdndna5aAcdtgifgmydbcuSmba3aifIdbaO9ETmekamaCBdba3aifaOUdbka8Eclfh8EaeaxfheaqcxfhqadaCcefgC9hmbkkaba5aYz:kjjjb8AcrhikaicdthiinaiTmeaic98fgiawcxffydbcbyd;O1jjbH:bjjjbbxbkkawc;Wbf8KjjjjbaDk:Odieui99iu8Jjjjjbca9RgicFFF;7rBd3ai9cFFF;7;3FF:;Fb83dCaicFFF97Bdzai9cFFF;7FFF:;u83dwdndnaembJbbjFhlJbbjFhvJbbjFhoxekadcd4cdthrcbhwincbhdinaicCfadfgDabadfIdbglaDIdbgvaval9EEUdbaicwfadfgDalaDIdbgvaval9DEUdbadclfgdcx9hmbkabarfhbawcefgwae9hmbkaiIdzaiId3:thoaiIdxaiIdK:thvaiIdwaiIdC:thlkJbbbbalalJbbbb9DEglavaval9DEglaoaoal9DEk9DeeuabcFeaicdtz:ljjjbhlcbhbdnadTmbindnalaeydbcdtfgiydbcu9hmbaiabBdbabcefhbkaeclfheadcufgdmbkkabk9teiucbcbyd;W1jjbgeabcifc98GfgbBd;W1jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik;LeeeudndnaeabVciGTmbabhixekdndnadcz9pmbabhixekabhiinaiaeydbBdbaiclfaeclfydbBdbaicwfaecwfydbBdbaicxfaecxfydbBdbaeczfheaiczfhiadc9Wfgdcs0mbkkadcl6mbinaiaeydbBdbaeclfheaiclfhiadc98fgdci0mbkkdnadTmbinaiaeRbb86bbaicefhiaecefheadcufgdmbkkabk;aeedudndnabciGTmbabhixekaecFeGc:b:c:ew2hldndnadcz9pmbabhixekabhiinaialBdbaicxfalBdbaicwfalBdbaiclfalBdbaiczfhiadc9Wfgdcs0mbkkadcl6mbinaialBdbaiclfhiadc98fgdci0mbkkdnadTmbinaiae86bbaicefhiadcufgdmbkkabk9teiucbcbyd;W1jjbgeabcrfc94GfgbBd;W1jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik9:eiuZbhedndncbyd;W1jjbgdaecztgi9nmbcuheadai9RcFFifcz4nbcuSmekadhekcbabae9Rcifc98Gcbyd;W1jjbfgdBd;W1jjbdnadZbcztge9nmbadae9RcFFifcz4nb8Akk6eiucbhidnadTmbdninabRbbglaeRbbgv9hmeaecefheabcefhbadcufgdmbxdkkalav9Rhikaikk:bedbcjwk9Oeeebeebebbeeebebbbbbebebbbbbbbbbebbbdbbbbbbbebbbebbbdbbbbbbbbbbbeeeeebebbebbebebbbeebbbbbbbbbbbbbbbbbbbbbc;OwkxebbbdbbbjNbb'; // embed! wasm\n\n  var wasmpack = new Uint8Array([32, 0, 65, 2, 1, 106, 34, 33, 3, 128, 11, 4, 13, 64, 6, 253, 10, 7, 15, 116, 127, 5, 8, 12, 40, 16, 19, 54, 20, 9, 27, 255, 113, 17, 42, 67, 24, 23, 146, 148, 18, 14, 22, 45, 70, 69, 56, 114, 101, 21, 25, 63, 75, 136, 108, 28, 118, 29, 73, 115]);\n  if (typeof WebAssembly !== 'object') {\n    return {\n      supported: false\n    };\n  }\n  var instance;\n  var ready = WebAssembly.instantiate(unpack(wasm), {}).then(function (result) {\n    instance = result.instance;\n    instance.exports.__wasm_call_ctors();\n  });\n  function unpack(data) {\n    var result = new Uint8Array(data.length);\n    for (var i = 0; i < data.length; ++i) {\n      var ch = data.charCodeAt(i);\n      result[i] = ch > 96 ? ch - 97 : ch > 64 ? ch - 39 : ch + 4;\n    }\n    var write = 0;\n    for (var i = 0; i < data.length; ++i) {\n      result[write++] = result[i] < 60 ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];\n    }\n    return result.buffer.slice(0, write);\n  }\n  function assert(cond) {\n    if (!cond) {\n      throw new Error('Assertion failed');\n    }\n  }\n  function bytes(view) {\n    return new Uint8Array(view.buffer, view.byteOffset, view.byteLength);\n  }\n  function reorder(fun, indices, vertices) {\n    var sbrk = instance.exports.sbrk;\n    var ip = sbrk(indices.length * 4);\n    var rp = sbrk(vertices * 4);\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    var indices8 = bytes(indices);\n    heap.set(indices8, ip);\n    var unique = fun(rp, ip, indices.length, vertices);\n    // heap may have grown\n    heap = new Uint8Array(instance.exports.memory.buffer);\n    var remap = new Uint32Array(vertices);\n    new Uint8Array(remap.buffer).set(heap.subarray(rp, rp + vertices * 4));\n    indices8.set(heap.subarray(ip, ip + indices.length * 4));\n    sbrk(ip - sbrk(0));\n    for (var i = 0; i < indices.length; ++i) indices[i] = remap[indices[i]];\n    return [remap, unique];\n  }\n  function maxindex(source) {\n    var result = 0;\n    for (var i = 0; i < source.length; ++i) {\n      var index = source[i];\n      result = result < index ? index : result;\n    }\n    return result;\n  }\n  function simplify(fun, indices, index_count, vertex_positions, vertex_count, vertex_positions_stride, target_index_count, target_error, options) {\n    var sbrk = instance.exports.sbrk;\n    var te = sbrk(4);\n    var ti = sbrk(index_count * 4);\n    var sp = sbrk(vertex_count * vertex_positions_stride);\n    var si = sbrk(index_count * 4);\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(bytes(vertex_positions), sp);\n    heap.set(bytes(indices), si);\n    var result = fun(ti, si, index_count, sp, vertex_count, vertex_positions_stride, target_index_count, target_error, options, te);\n    // heap may have grown\n    heap = new Uint8Array(instance.exports.memory.buffer);\n    var target = new Uint32Array(result);\n    bytes(target).set(heap.subarray(ti, ti + result * 4));\n    var error = new Float32Array(1);\n    bytes(error).set(heap.subarray(te, te + 4));\n    sbrk(te - sbrk(0));\n    return [target, error[0]];\n  }\n  function simplifyAttr(fun, indices, index_count, vertex_positions, vertex_count, vertex_positions_stride, vertex_attributes, vertex_attributes_stride, attribute_weights, vertex_lock, target_index_count, target_error, options) {\n    var sbrk = instance.exports.sbrk;\n    var te = sbrk(4);\n    var ti = sbrk(index_count * 4);\n    var sp = sbrk(vertex_count * vertex_positions_stride);\n    var sa = sbrk(vertex_count * vertex_attributes_stride);\n    var sw = sbrk(attribute_weights.length * 4);\n    var si = sbrk(index_count * 4);\n    var vl = vertex_lock ? sbrk(vertex_count) : 0;\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(bytes(vertex_positions), sp);\n    heap.set(bytes(vertex_attributes), sa);\n    heap.set(bytes(attribute_weights), sw);\n    heap.set(bytes(indices), si);\n    if (vertex_lock) {\n      heap.set(bytes(vertex_lock), vl);\n    }\n    var result = fun(ti, si, index_count, sp, vertex_count, vertex_positions_stride, sa, vertex_attributes_stride, sw, attribute_weights.length, vl, target_index_count, target_error, options, te);\n    // heap may have grown\n    heap = new Uint8Array(instance.exports.memory.buffer);\n    var target = new Uint32Array(result);\n    bytes(target).set(heap.subarray(ti, ti + result * 4));\n    var error = new Float32Array(1);\n    bytes(error).set(heap.subarray(te, te + 4));\n    sbrk(te - sbrk(0));\n    return [target, error[0]];\n  }\n  function simplifyScale(fun, vertex_positions, vertex_count, vertex_positions_stride) {\n    var sbrk = instance.exports.sbrk;\n    var sp = sbrk(vertex_count * vertex_positions_stride);\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(bytes(vertex_positions), sp);\n    var result = fun(sp, vertex_count, vertex_positions_stride);\n    sbrk(sp - sbrk(0));\n    return result;\n  }\n  function simplifyPoints(fun, vertex_positions, vertex_count, vertex_positions_stride, vertex_colors, vertex_colors_stride, color_weight, target_vertex_count) {\n    var sbrk = instance.exports.sbrk;\n    var ti = sbrk(target_vertex_count * 4);\n    var sp = sbrk(vertex_count * vertex_positions_stride);\n    var sc = sbrk(vertex_count * vertex_colors_stride);\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(bytes(vertex_positions), sp);\n    if (vertex_colors) {\n      heap.set(bytes(vertex_colors), sc);\n    }\n    var result = fun(ti, sp, vertex_count, vertex_positions_stride, sc, vertex_colors_stride, color_weight, target_vertex_count);\n    // heap may have grown\n    heap = new Uint8Array(instance.exports.memory.buffer);\n    var target = new Uint32Array(result);\n    bytes(target).set(heap.subarray(ti, ti + result * 4));\n    sbrk(ti - sbrk(0));\n    return target;\n  }\n  var simplifyOptions = {\n    LockBorder: 1,\n    Sparse: 2,\n    ErrorAbsolute: 4,\n    Prune: 8,\n    _InternalDebug: 1 << 30 // internal, don't use!\n  };\n  return {\n    ready: ready,\n    supported: true,\n    // set this to true to be able to use simplifyPoints and simplifyWithAttributes\n    // note that these functions are experimental and may change interface/behavior in a way that will require revising calling code\n    useExperimentalFeatures: false,\n    compactMesh: function (indices) {\n      assert(indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array);\n      assert(indices.length % 3 == 0);\n      var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);\n      return reorder(instance.exports.meshopt_optimizeVertexFetchRemap, indices32, maxindex(indices) + 1);\n    },\n    simplify: function (indices, vertex_positions, vertex_positions_stride, target_index_count, target_error, flags) {\n      assert(indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array);\n      assert(indices.length % 3 == 0);\n      assert(vertex_positions instanceof Float32Array);\n      assert(vertex_positions.length % vertex_positions_stride == 0);\n      assert(vertex_positions_stride >= 3);\n      assert(target_index_count >= 0 && target_index_count <= indices.length);\n      assert(target_index_count % 3 == 0);\n      assert(target_error >= 0);\n      var options = 0;\n      for (var i = 0; i < (flags ? flags.length : 0); ++i) {\n        assert(flags[i] in simplifyOptions);\n        assert(this.useExperimentalFeatures || flags[i] != 'Prune'); // set useExperimentalFeatures to use experimental flags like Prune\n        options |= simplifyOptions[flags[i]];\n      }\n      var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);\n      var result = simplify(instance.exports.meshopt_simplify, indices32, indices.length, vertex_positions, vertex_positions.length / vertex_positions_stride, vertex_positions_stride * 4, target_index_count, target_error, options);\n      result[0] = indices instanceof Uint32Array ? result[0] : new indices.constructor(result[0]);\n      return result;\n    },\n    simplifyWithAttributes: function (indices, vertex_positions, vertex_positions_stride, vertex_attributes, vertex_attributes_stride, attribute_weights, vertex_lock, target_index_count, target_error, flags) {\n      assert(this.useExperimentalFeatures); // set useExperimentalFeatures to use this; note that this function is experimental and may change interface in a way that will require revising calling code\n      assert(indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array);\n      assert(indices.length % 3 == 0);\n      assert(vertex_positions instanceof Float32Array);\n      assert(vertex_positions.length % vertex_positions_stride == 0);\n      assert(vertex_positions_stride >= 3);\n      assert(vertex_attributes instanceof Float32Array);\n      assert(vertex_attributes.length % vertex_attributes_stride == 0);\n      assert(vertex_attributes_stride >= 0);\n      assert(vertex_lock == null || vertex_lock instanceof Uint8Array);\n      assert(vertex_lock == null || vertex_lock.length == vertex_positions.length / vertex_positions_stride);\n      assert(target_index_count >= 0 && target_index_count <= indices.length);\n      assert(target_index_count % 3 == 0);\n      assert(target_error >= 0);\n      assert(Array.isArray(attribute_weights));\n      assert(vertex_attributes_stride >= attribute_weights.length);\n      assert(attribute_weights.length <= 32);\n      for (var i = 0; i < attribute_weights.length; ++i) {\n        assert(attribute_weights[i] >= 0);\n      }\n      var options = 0;\n      for (var i = 0; i < (flags ? flags.length : 0); ++i) {\n        assert(flags[i] in simplifyOptions);\n        options |= simplifyOptions[flags[i]];\n      }\n      var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);\n      var result = simplifyAttr(instance.exports.meshopt_simplifyWithAttributes, indices32, indices.length, vertex_positions, vertex_positions.length / vertex_positions_stride, vertex_positions_stride * 4, vertex_attributes, vertex_attributes_stride * 4, new Float32Array(attribute_weights), vertex_lock ? new Uint8Array(vertex_lock) : null, target_index_count, target_error, options);\n      result[0] = indices instanceof Uint32Array ? result[0] : new indices.constructor(result[0]);\n      return result;\n    },\n    getScale: function (vertex_positions, vertex_positions_stride) {\n      assert(vertex_positions instanceof Float32Array);\n      assert(vertex_positions.length % vertex_positions_stride == 0);\n      assert(vertex_positions_stride >= 3);\n      return simplifyScale(instance.exports.meshopt_simplifyScale, vertex_positions, vertex_positions.length / vertex_positions_stride, vertex_positions_stride * 4);\n    },\n    simplifyPoints: function (vertex_positions, vertex_positions_stride, target_vertex_count, vertex_colors, vertex_colors_stride, color_weight) {\n      assert(this.useExperimentalFeatures); // set useExperimentalFeatures to use this; note that this function is experimental and may change interface in a way that will require revising calling code\n      assert(vertex_positions instanceof Float32Array);\n      assert(vertex_positions.length % vertex_positions_stride == 0);\n      assert(vertex_positions_stride >= 3);\n      assert(target_vertex_count >= 0 && target_vertex_count <= vertex_positions.length / vertex_positions_stride);\n      if (vertex_colors) {\n        assert(vertex_colors instanceof Float32Array);\n        assert(vertex_colors.length % vertex_colors_stride == 0);\n        assert(vertex_colors_stride >= 3);\n        assert(vertex_positions.length / vertex_positions_stride == vertex_colors.length / vertex_colors_stride);\n        return simplifyPoints(instance.exports.meshopt_simplifyPoints, vertex_positions, vertex_positions.length / vertex_positions_stride, vertex_positions_stride * 4, vertex_colors, vertex_colors_stride * 4, color_weight, target_vertex_count);\n      } else {\n        return simplifyPoints(instance.exports.meshopt_simplifyPoints, vertex_positions, vertex_positions.length / vertex_positions_stride, vertex_positions_stride * 4, undefined, 0, 0, target_vertex_count);\n      }\n    }\n  };\n}();\nexport { MeshoptSimplifier };","map":{"version":3,"names":["MeshoptSimplifier","wasm","wasmpack","Uint8Array","WebAssembly","supported","instance","ready","instantiate","unpack","then","result","exports","__wasm_call_ctors","data","length","i","ch","charCodeAt","write","buffer","slice","assert","cond","Error","bytes","view","byteOffset","byteLength","reorder","fun","indices","vertices","sbrk","ip","rp","heap","memory","indices8","set","unique","remap","Uint32Array","subarray","maxindex","source","index","simplify","index_count","vertex_positions","vertex_count","vertex_positions_stride","target_index_count","target_error","options","te","ti","sp","si","target","error","Float32Array","simplifyAttr","vertex_attributes","vertex_attributes_stride","attribute_weights","vertex_lock","sa","sw","vl","simplifyScale","simplifyPoints","vertex_colors","vertex_colors_stride","color_weight","target_vertex_count","sc","simplifyOptions","LockBorder","Sparse","ErrorAbsolute","Prune","_InternalDebug","useExperimentalFeatures","compactMesh","Int32Array","Uint16Array","Int16Array","indices32","BYTES_PER_ELEMENT","meshopt_optimizeVertexFetchRemap","flags","meshopt_simplify","constructor","simplifyWithAttributes","Array","isArray","meshopt_simplifyWithAttributes","getScale","meshopt_simplifyScale","meshopt_simplifyPoints","undefined"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/meshoptimizer/meshopt_simplifier.module.js"],"sourcesContent":["// This file is part of meshoptimizer library and is distributed under the terms of MIT License.\n// Copyright (C) 2016-2024, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)\nvar MeshoptSimplifier = (function () {\n\t// Built with clang version 18.1.2\n\t// Built from meshoptimizer 0.22\n\tvar wasm =\n\t\t'b9H79Tebbbe9Hk9Geueu9Geub9Gbb9Gsuuuuuuuuuuuu99uueu9Gvuuuuub9Gvuuuuue999Gquuuuuuu99uueu9Gwuuuuuu99ueu9Giuuue999Gluuuueu9GiuuueuizsdilvoirwDbqqbeqlve9Weiiviebeoweuecj:Pdkr:Tewo9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bbz9TW79O9V9Wt9F79P9T9W29P9M95bl8E9TW79O9V9Wt9F79P9T9W29P9M959x9Pt9OcttV9P9I91tW7bvQ9TW79O9V9Wt9F79P9T9W29P9M959q9V9P9Ut7boX9TW79O9V9Wt9F79P9T9W29P9M959t9J9H2Wbra9TW79O9V9Wt9F9V9Wt9P9T9P96W9wWVtW94SWt9J9O9sW9T9H9Wbwl79IV9RbDDwebcekdmxq;UMesdbk:kfvKue99euY99Qu8Jjjjjbc;W;qb9Rgs8Kjjjjbcbhzascxfcbc;Kbz:ljjjb8AdnabaeSmbabaeadcdtz:kjjjb8AkdnamcdGTmbalcrfci4gHcbyd;S1jjbHjjjjbbheascxfasyd2gOcdtfaeBdbasaOcefBd2aecbaHz:ljjjbhAcbhlcbhednadTmbcbhlabheadhHinaAaeydbgOci4fgCaCRbbgCceaOcrGgOtV86bbaCcu7aO4ceGalfhlaeclfheaHcufgHmbkcualcdtalcFFFFi0Ehekaecbyd;S1jjbHjjjjbbhzascxfasyd2gecdtfazBdbasaecefBd2alcd4alfhOcehHinaHgecethHaeaO6mbkcbhXcuaecdtgOaecFFFFi0Ecbyd;S1jjbHjjjjbbhHascxfasyd2gCcdtfaHBdbasaCcefBd2aHcFeaOz:ljjjbhQdnadTmbaecufhCcbhLinabaXcdtfgKydbgAc:v;t;h;Ev2hOcbhedndninaQaOaCGgOcdtfgYydbgHcuSmeazaHcdtfydbaASmdaecefgeaOfhOaeaC9nmbxdkkazaLcdtfaABdbaYaLBdbaLhHaLcefhLkaKaHBdbaXcefgXad9hmbkkaQcbyd;O1jjbH:bjjjbbasasyd2cufBd2kcualcefgecdtaecFFFFi0Ecbyd;S1jjbHjjjjbbh8Aascxfasyd2gecdtfa8ABdbasa8ABdlasaecefBd2cuadcitadcFFFFe0Ecbyd;S1jjbHjjjjbbhEascxfasyd2gecdtfaEBdbasaEBdwasaecefBd2asclfabadalcbz:cjjjbcualcdtg3alcFFFFi0Eg5cbyd;S1jjbHjjjjbbhQascxfasyd2gecdtfaQBdbasaecefBd2a5cbyd;S1jjbHjjjjbbh8Eascxfasyd2gecdtfa8EBdbasaecefBd2alcd4alfhOcehHinaHgecethHaeaO6mbkcbhLcuaecdtgOaecFFFFi0Ecbyd;S1jjbHjjjjbbhHascxfasyd2gCcdtfaHBdbasaCcefBd2aHcFeaOz:ljjjbhXdnalTmbavcd4hCaecufhHinaLhednazTmbazaLcdtfydbhekaiaeaC2cdtfgeydlgOcH4aO7c:F:b:DD2aeydbgOcH4aO7c;D;O:B8J27aeydwgecH4ae7c:3F;N8N27aHGheaLcdth8FdndndndndnazTmbaza8FfhKcbhOinaXaecdtfgYydbgAcuSmlaiazaAcdtfydbaC2cdtfaiaKydbaC2cdtfcxz:ojjjbTmiaOcefgOaefaHGheaOaH9nmbxdkkaiaLaC2cdtfhKcbhOinaXaecdtfgYydbgAcuSmiaiaAaC2cdtfaKcxz:ojjjbTmdaOcefgOaefaHGheaOaH9nmbkkcbhYkaYydbgecu9hmekaYaLBdbaLhekaQa8FfaeBdbaLcefgLal9hmbkcbhea8EhHinaHaeBdbaHclfhHalaecefge9hmbkcbheaQhHa8EhOindnaeaHydbgCSmbaOa8EaCcdtfgCydbBdbaCaeBdbkaHclfhHaOclfhOalaecefge9hmbkkcbhaaXcbyd;O1jjbH:bjjjbbasasyd2cufBd2alcbyd;S1jjbHjjjjbbhXascxfasyd2gecdtfaXBdbasaecefBd2a5cbyd;S1jjbHjjjjbbheascxfasyd2gHcdtfaeBdbasaHcefBd2a5cbyd;S1jjbHjjjjbbhHascxfasyd2gOcdtfaHBdbasaOcefBd2aecFea3z:ljjjbhhaHcFea3z:ljjjbhgdnalTmbaEcwfh8Jindna8AaagOcefgacdtfydbgCa8AaOcdtgefydbgHSmbaCaH9Rh8FaEaHcitfh3agaefh8KahaefhLcbhAindndna3aAcitfydbgYaO9hmbaLaOBdba8KaOBdbxekdna8AaYcdtg8LfgeclfydbgHaeydbgeSmbaEaecitgCfydbaOSmeaHae9Rh8Maecu7aHfhKa8JaCfhHcbheinaKaeSmeaecefheaHydbhCaHcwfhHaCaO9hmbkaea8M6mekaga8LfgeaOaYaeydbcuSEBdbaLaYaOaLydbcuSEBdbkaAcefgAa8F9hmbkkaaal9hmbkaQhHa8EhOaghCahhAcbheindndnaeaHydbgY9hmbdnaeaOydbgY9hmbaAydbhYdnaCydbgKcu9hmbaYcu9hmbaXaefcb86bbxikaXaefhLdnaeaKSmbaeaYSmbaLce86bbxikaLcl86bbxdkdnaea8EaYcdtgKfydb9hmbdnaCydbgLcuSmbaeaLSmbaAydbg8FcuSmbaea8FSmbagaKfydbg3cuSmba3aYSmbahaKfydbgKcuSmbaKaYSmbdnaQaLcdtfydbgYaQaKcdtfydb9hmbaYaQa8FcdtfydbgKSmbaKaQa3cdtfydb9hmbaXaefcd86bbxlkaXaefcl86bbxikaXaefcl86bbxdkaXaefcl86bbxekaXaefaXaYfRbb86bbkaHclfhHaOclfhOaCclfhCaAclfhAalaecefge9hmbkdnaqTmbdndnazTmbazheaQhHalhOindnaqaeydbfRbbTmbaXaHydbfcl86bbkaeclfheaHclfhHaOcufgOmbxdkkaQhealhHindnaqRbbTmbaXaeydbfcl86bbkaqcefhqaeclfheaHcufgHmbkkaQhealhOaXhHindnaXaeydbfRbbcl9hmbaHcl86bbkaeclfheaHcefhHaOcufgOmbkkamceGTmbaXhealhHindnaeRbbce9hmbaecl86bbkaecefheaHcufgHmbkkcualcx2alc;v:Q;v:Qe0Ecbyd;S1jjbHjjjjbbhaascxfasyd2gecdtfaaBdbasaecefBd2aaaialavazz:djjjbh8NdndnaDmbcbhycbh8Jxekcbh8JawhecbhHindnaeIdbJbbbb9ETmbasc;Wbfa8JcdtfaHBdba8Jcefh8JkaeclfheaDaHcefgH9hmbkcua8Jal2gecdtaecFFFFi0Ecbyd;S1jjbHjjjjbbhyascxfasyd2gecdtfayBdbasaecefBd2alTmba8JTmbarcd4hLdnazTmba8JcdthicbhYayhKinaoazaYcdtfydbaL2cdtfhAasc;WbfheaKhHa8JhOinaHaAaeydbcdtgCfIdbawaCfIdbNUdbaeclfheaHclfhHaOcufgOmbkaKaifhKaYcefgYal9hmbxdkka8JcdthicbhYayhKinaoaYaL2cdtfhAasc;WbfheaKhHa8JhOinaHaAaeydbcdtgCfIdbawaCfIdbNUdbaeclfheaHclfhHaOcufgOmbkaKaifhKaYcefgYal9hmbkkcualc8S2gHalc;D;O;f8U0EgCcbyd;S1jjbHjjjjbbheascxfasyd2gOcdtfaeBdbasaOcefBd2aecbaHz:ljjjbhqdndndndna8JTmbaCcbyd;S1jjbHjjjjbbhvascxfasyd2gecdtfavBdbcehOasaecefBd2avcbaHz:ljjjb8Acua8Jal2gecltgHaecFFFFb0Ecbyd;S1jjbHjjjjbbhrascxfasyd2gecdtfarBdbasaecefBd2arcbaHz:ljjjb8AadmexikcbhvadTmecbhrkcbhAabhHindnaaaHclfydbgYcx2fgeIdbaaaHydbgKcx2fgOIdbg8P:tgIaaaHcwfydbgLcx2fgCIdlaOIdlg8R:tg8SNaCIdba8P:tgRaeIdla8R:tg8UN:tg8Va8VNa8UaCIdwaOIdwg8W:tg8XNa8SaeIdwa8W:tg8UN:tg8Sa8SNa8UaRNa8XaIN:tgIaINMM:rgRJbbbb9ETmba8VaR:vh8VaIaR:vhIa8SaR:vh8SkaqaQaKcdtfydbc8S2fgea8SaR:rgRa8SNNg8UaeIdbMUdbaeaIaRaINg8YNg8XaeIdlMUdlaea8VaRa8VNg8ZNg80aeIdwMUdwaea8Ya8SNg8YaeIdxMUdxaea8Za8SNg81aeIdzMUdzaea8ZaINg8ZaeIdCMUdCaea8SaRa8Va8WNa8Sa8PNa8RaINMM:mg8RNg8PNg8SaeIdKMUdKaeaIa8PNgIaeId3MUd3aea8Va8PNg8VaeIdaMUdaaea8Pa8RNg8PaeId8KMUd8KaeaRaeIdyMUdyaqaQaYcdtfydbc8S2fgea8UaeIdbMUdbaea8XaeIdlMUdlaea80aeIdwMUdwaea8YaeIdxMUdxaea81aeIdzMUdzaea8ZaeIdCMUdCaea8SaeIdKMUdKaeaIaeId3MUd3aea8VaeIdaMUdaaea8PaeId8KMUd8KaeaRaeIdyMUdyaqaQaLcdtfydbc8S2fgea8UaeIdbMUdbaea8XaeIdlMUdlaea80aeIdwMUdwaea8YaeIdxMUdxaea81aeIdzMUdzaea8ZaeIdCMUdCaea8SaeIdKMUdKaeaIaeId3MUd3aea8VaeIdaMUdaaea8PaeId8KMUd8KaeaRaeIdyMUdyaHcxfhHaAcifgAad6mbkcbhiabhKinabaicdtfhYcbhHinaXaYaHc:G1jjbfydbcdtfydbgOfRbbhedndnaXaKaHfydbgCfRbbgAc99fcFeGcpe0mbaeceSmbaecd9hmekdnaAcufcFeGce0mbahaCcdtfydbaO9hmekdnaecufcFeGce0mbagaOcdtfydbaC9hmekdnaAcv2aefcj1jjbfRbbTmbaQaOcdtfydbaQaCcdtfydb0mekJbbacJbbacJbbjZaeceSEaAceSEh8ZdnaaaYaHc:K1jjbfydbcdtfydbcx2fgeIdwaaaCcx2fgAIdwg8R:tg8VaaaOcx2fgLIdwa8R:tg8Sa8SNaLIdbaAIdbg8W:tgIaINaLIdlaAIdlg8U:tgRaRNMMg8PNa8Va8SNaeIdba8W:tg80aINaRaeIdla8U:tg8YNMMg8Xa8SN:tg8Va8VNa80a8PNa8XaIN:tg8Sa8SNa8Ya8PNa8XaRN:tgIaINMM:rgRJbbbb9ETmba8VaR:vh8VaIaR:vhIa8SaR:vh8SkaqaQaCcdtfydbc8S2fgea8Sa8Za8P:rNgRa8SNNg8XaeIdbMUdbaeaIaRaINg8ZNg80aeIdlMUdlaea8VaRa8VNg8PNg8YaeIdwMUdwaea8Za8SNg8ZaeIdxMUdxaea8Pa8SNg81aeIdzMUdzaea8PaINgBaeIdCMUdCaea8SaRa8Va8RNa8Sa8WNa8UaINMM:mg8RNg8PNg8SaeIdKMUdKaeaIa8PNgIaeId3MUd3aea8Va8PNg8VaeIdaMUdaaea8Pa8RNg8PaeId8KMUd8KaeaRaeIdyMUdyaqaQaOcdtfydbc8S2fgea8XaeIdbMUdbaea80aeIdlMUdlaea8YaeIdwMUdwaea8ZaeIdxMUdxaea81aeIdzMUdzaeaBaeIdCMUdCaea8SaeIdKMUdKaeaIaeId3MUd3aea8VaeIdaMUdaaea8PaeId8KMUd8KaeaRaeIdyMUdykaHclfgHcx9hmbkaKcxfhKaicifgiad6mbkdna8JTmbcbhKinJbbbbh8WaaabaKcdtfgeclfydbgLcx2fgHIdwaaaeydbgicx2fgOIdwg8Y:tgIaINaHIdbaOIdbg81:tg8Va8VNaHIdlaOIdlgB:tgRaRNMMg8Zaaaecwfydbg8Fcx2fgeIdwa8Y:tg8PNaIaIa8PNa8VaeIdba81:tg8RNaRaeIdlaB:tg8UNMMg8SN:tJbbbbJbbjZa8Za8Pa8PNa8Ra8RNa8Ua8UNMMg80Na8Sa8SN:tg8X:va8XJbbbb9BEg8XNh83a80aINa8Pa8SN:ta8XNhUa8Za8UNaRa8SN:ta8XNh85a80aRNa8Ua8SN:ta8XNh86a8Za8RNa8Va8SN:ta8XNh87a80a8VNa8Ra8SN:ta8XNh88a8Va8UNa8RaRN:tg8Sa8SNaRa8PNa8UaIN:tg8Sa8SNaIa8RNa8Pa8VN:tg8Sa8SNMM:rJbbbZNh8Sayaia8J2g3cdtfhHaya8Fa8J2gwcdtfhOayaLa8J2g8LcdtfhCa8Y:mh89aB:mh8:a81:mhZcbhAa8JhYJbbbbh8UJbbbbh8XJbbbbh8ZJbbbbh80Jbbbbh8YJbbbbh81JbbbbhBJbbbbhnJbbbbhcinasc;WbfaAfgecwfa8SaUaCIdbaHIdbg8P:tgRNa83aOIdba8P:tg8RNMgINUdbaeclfa8Sa86aRNa85a8RNMg8VNUdbaea8Sa88aRNa87a8RNMgRNUdbaecxfa8Sa89aINa8:a8VNa8PaZaRNMMMg8PNUdba8SaIa8VNNa80Mh80a8SaIaRNNa8YMh8Ya8Sa8VaRNNa81Mh81a8Sa8Pa8PNNa8WMh8Wa8SaIa8PNNa8UMh8Ua8Sa8Va8PNNa8XMh8Xa8SaRa8PNNa8ZMh8Za8SaIaINNaBMhBa8Sa8Va8VNNanMhna8SaRaRNNacMhcaHclfhHaCclfhCaOclfhOaAczfhAaYcufgYmbkavaic8S2fgeacaeIdbMUdbaeanaeIdlMUdlaeaBaeIdwMUdwaea81aeIdxMUdxaea8YaeIdzMUdzaea80aeIdCMUdCaea8ZaeIdKMUdKaea8XaeId3MUd3aea8UaeIdaMUdaaea8WaeId8KMUd8Kaea8SaeIdyMUdyavaLc8S2fgeacaeIdbMUdbaeanaeIdlMUdlaeaBaeIdwMUdwaea81aeIdxMUdxaea8YaeIdzMUdzaea80aeIdCMUdCaea8ZaeIdKMUdKaea8XaeId3MUd3aea8UaeIdaMUdaaea8WaeId8KMUd8Kaea8SaeIdyMUdyava8Fc8S2fgeacaeIdbMUdbaeanaeIdlMUdlaeaBaeIdwMUdwaea81aeIdxMUdxaea8YaeIdzMUdzaea80aeIdCMUdCaea8ZaeIdKMUdKaea8XaeId3MUd3aea8UaeIdaMUdaaea8WaeId8KMUd8Kaea8SaeIdyMUdyara3cltfhYcbhHa8JhCinaYaHfgeasc;WbfaHfgOIdbaeIdbMUdbaeclfgAaOclfIdbaAIdbMUdbaecwfgAaOcwfIdbaAIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaCcufgCmbkara8LcltfhYcbhHa8JhCinaYaHfgeasc;WbfaHfgOIdbaeIdbMUdbaeclfgAaOclfIdbaAIdbMUdbaecwfgAaOcwfIdbaAIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaCcufgCmbkarawcltfhYcbhHa8JhCinaYaHfgeasc;WbfaHfgOIdbaeIdbMUdbaeclfgAaOclfIdbaAIdbMUdbaecwfgAaOcwfIdbaAIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaCcufgCmbkaKcifgKad6mbkkcbhOxekcehOcbhrkcbh8FdndnamcwGg9cmbJbbbbh8ZcbhJcbhocbhCxekcbhea5cbyd;S1jjbHjjjjbbhCascxfasyd2gHcdtfaCBdbasaHcefBd2dnalTmbaChHinaHaeBdbaHclfhHalaecefge9hmbkkdnaOmbcbhiinabaicdtfhLcbhKinaQaLaKcdtgec:G1jjbfydbcdtfydbcdtfydbhHdnaCaQaLaefydbcdtfydbgOcdtfgAydbgeaOSmbinaAaCaegOcdtfgYydbgeBdbaYhAaOae9hmbkkdnaCaHcdtfgAydbgeaHSmbinaAaCaegHcdtfgYydbgeBdbaYhAaHae9hmbkkdnaOaHSmbaCaOaHaOaH0EcdtfaOaHaOaH6EBdbkaKcefgKci9hmbkaicifgiad6mbkkcbhJdnalTmbcbhYindnaQaYcdtgefydbaY9hmbaYhHdnaCaefgKydbgeaYSmbaKhOinaOaCaegHcdtfgAydbgeBdbaAhOaHae9hmbkkaKaHBdbkaYcefgYal9hmbkcbheaQhOaChHcbhJindndnaeaOydbgA9hmbdnaeaHydbgA9hmbaHaJBdbaJcefhJxdkaHaCaAcdtfydbBdbxekaHaCaAcdtfydbBdbkaOclfhOaHclfhHalaecefge9hmbkkcuaJcltgeaJcjjjjiGEcbyd;S1jjbHjjjjbbhoascxfasyd2gHcdtfaoBdbasaHcefBd2aocbaez:ljjjbhAdnalTmbaChOaahealhYinaecwfIdbh8SaeclfIdbhIaAaOydbcltfgHaeIdbaHIdbMUdbaHclfgKaIaKIdbMUdbaHcwfgKa8SaKIdbMUdbaHcxfgHaHIdbJbbjZMUdbaOclfhOaecxfheaYcufgYmbkkdnaJTmbaAheaJhHinaecxfgOIdbh8SaOcbBdbaeaeIdbJbbbbJbbjZa8S:va8SJbbbb9BEg8SNUdbaeclfgOa8SaOIdbNUdbaecwfgOa8SaOIdbNUdbaeczfheaHcufgHmbkkdnalTmbaChOaahealhYinaAaOydbcltfgHcxfgKaecwfIdbaHcwfIdb:tg8Sa8SNaeIdbaHIdb:tg8Sa8SNaeclfIdbaHclfIdb:tg8Sa8SNMMg8SaKIdbgIaIa8S9DEUdbaOclfhOaecxfheaYcufgYmbkkdnaJmbcbhJJFFuuh8ZxekaAcxfheaAhHaJhOinaHaeIdbUdbaeczfheaHclfhHaOcufgOmbkJFFuuh8ZaAheaJhHinaeIdbg8Sa8Za8Za8S9EEh8ZaeclfheaHcufgHmbkkasydlh9ednalTmba9eclfhea9eydbhAaXhHalhYcbhOincbaeydbgKaA9RaHRbbcpeGEaOfhOaHcefhHaeclfheaKhAaYcufgYmbkaOce4h8Fkcuada8F9RcifgTcx2aTc;v:Q;v:Qe0Ecbyd;S1jjbHjjjjbbhDascxfasyd2gecdtfaDBdbasaecefBd2cuaTcdtaTcFFFFi0Ecbyd;S1jjbHjjjjbbhSascxfasyd2gecdtfaSBdbasaecefBd2a5cbyd;S1jjbHjjjjbbh8Mascxfasyd2gecdtfa8MBdbasaecefBd2alcbyd;S1jjbHjjjjbbh9hascxfasyd2gecdtfa9hBdbasaecefBd2axaxNa8NJbbjZamclGEg83a83N:vhcJbbbbhndnadak9nmbdnaTci6mba8Jclth9iaDcwfh6JbbbbhBJbbbbhninasclfabadalaQz:cjjjbabh8FcbhEcbh5inaba5cdtfh3cbheindnaQa8FaefydbgOcdtgifydbgYaQa3aec:W1jjbfydbcdtfydbgHcdtgwfydbgKSmbaXaHfRbbgLcv2aXaOfRbbgAfc;a1jjbfRbbg8AaAcv2aLfg8Lc;a1jjbfRbbg8KVcFeGTmbdnaKaY9nmba8Lcj1jjbfRbbcFeGmekaAcufhYdnaAaL9hmbaYcFeGce0mbahaifydbaH9hmekdndnaAclSmbaLcl9hmekdnaYcFeGce0mbahaifydbaH9hmdkaLcufcFeGce0mbagawfydbaO9hmekaDaEcx2fgAaHaOa8KcFeGgYEBdlaAaOaHaYEBdbaAaYa8AGcb9hBdwaEcefhEkaeclfgecx9hmbkdna5cifg5ad9pmba8Fcxfh8FaEcifaT9nmekkaETmdcbhiinJbbbbJbbjZaqaQaDaicx2fgAydlgKaAydbgYaAydwgHEgLcdtfydbc8S2fgeIdyg8S:va8SJbbbb9BEaeIdwaaaYaKaHEg8Fcx2fgHIdwgRNaeIdzaHIdbg8PNaeIdaMg8Sa8SMMaRNaeIdlaHIdlg8RNaeIdCaRNaeId3Mg8Sa8SMMa8RNaeIdba8PNaeIdxa8RNaeIdKMg8Sa8SMMa8PNaeId8KMMM:lNh80JbbbbJbbjZaqaQaYcdtfydbc8S2fgeIdyg8S:va8SJbbbb9BEaeIdwaaaKcx2fgHIdwg8VNaeIdzaHIdbg8WNaeIdaMg8Sa8SMMa8VNaeIdlaHIdlg8UNaeIdCa8VNaeId3Mg8Sa8SMMa8UNaeIdba8WNaeIdxa8UNaeIdKMg8Sa8SMMa8WNaeId8KMMM:lNh8YaAcwfh3aAclfhwdna8JTmbavaYc8S2fgOIdwa8VNaOIdza8WNaOIdaMg8Sa8SMMa8VNaOIdla8UNaOIdCa8VNaOId3Mg8Sa8SMMa8UNaOIdba8WNaOIdxa8UNaOIdKMg8Sa8SMMa8WNaOId8KMMMh8SayaKa8J2cdtfhHaraYa8J2cltfheaOIdyh8Xa8JhOinaHIdbgIaIa8XNaecxfIdba8VaecwfIdbNa8WaeIdbNa8UaeclfIdbNMMMgIaIM:tNa8SMh8SaHclfhHaeczfheaOcufgOmbkavaLc8S2fgOIdwaRNaOIdza8PNaOIdaMgIaIMMaRNaOIdla8RNaOIdCaRNaOId3MgIaIMMa8RNaOIdba8PNaOIdxa8RNaOIdKMgIaIMMa8PNaOId8KMMMhIaya8Fa8J2cdtfhHaraLa8J2cltfheaOIdyh8Wa8JhOinaHIdbg8Va8Va8WNaecxfIdbaRaecwfIdbNa8PaeIdbNa8RaeclfIdbNMMMg8Va8VM:tNaIMhIaHclfhHaeczfheaOcufgOmbka80aI:lMh80a8Ya8S:lMh8YkawaKa8Fa8Ya809FgeEBdbaAaYaLaeEBdba3a8Ya80aeEUdbaicefgiaE9hmbkasc;Wbfcbcj;qbz:ljjjb8Aa6heaEhHinasc;WbfaeydbcA4cF8FGgOcFAaOcFA6EcdtfgOaOydbcefBdbaecxfheaHcufgHmbkcbhecbhHinasc;WbfaefgOydbhAaOaHBdbaAaHfhHaeclfgecj;qb9hmbkcbhea6hHinasc;WbfaHydbcA4cF8FGgOcFAaOcFA6EcdtfgOaOydbgOcefBdbaSaOcdtfaeBdbaHcxfhHaEaecefge9hmbkadak9RgOci9Uh9kdnalTmbcbhea8MhHinaHaeBdbaHclfhHalaecefge9hmbkkcbh0a9hcbalz:ljjjbh9maOcO9Uh9na9kce4h9oasydwh9pcbh8KcbhwdninaDaSawcdtfydbcx2fg3Idwg8Sac9Emea8Ka9k9pmeJFFuuhIdna9oaE9pmbaDaSa9ocdtfydbcx2fIdwJbb;aZNhIkdna8SaI9ETmba8San9ETmba8Ka9n0mdkdna9maQa3ydlgicdtg9qfydbgAfg9rRbba9maQa3ydbgLcdtg9sfydbgHfg9tRbbVmbaXaLfRbbh9udna9eaHcdtfgeclfydbgOaeydbgeSmbaOae9RhKa9paecitfheaaaAcx2fg8Lcwfh5a8Lclfh9vaaaHcx2fg8Acwfh9wa8Aclfh9xcbhHceh8Fdnindna8MaeydbcdtfydbgOaASmba8MaeclfydbcdtfydbgYaASmbaOaYSmbaaaYcx2fgYIdbaaaOcx2fgOIdbg8V:tg8Sa9xIdbaOIdlgR:tg8WNa8AIdba8V:tg8UaYIdlaR:tgIN:tg8Pa8Sa9vIdbaR:tg8XNa8LIdba8V:tg80aIN:tgRNaIa9wIdbaOIdwg8R:tg8YNa8WaYIdwa8R:tg8VN:tg8WaIa5Idba8R:tg81Na8Xa8VN:tgINa8Va8UNa8Ya8SN:tg8Ra8Va80Na81a8SN:tg8SNMMa8Pa8PNa8Wa8WNa8Ra8RNMMaRaRNaIaINa8Sa8SNMMN:rJbbj8:N9FmdkaecwfheaHcefgHaK6h8FaKaH9hmbkka8FceGTmba9ocefh9oxeka3cwfhHdndndndna9uc9:fPdebdkaLheina8MaecdtgefaiBdba8EaefydbgeaL9hmbxikkdnagahaha9sfydbaiSEa8Ea9sfydbgLcdtfydbgecu9hmba8Ea9qfydbheka8Ma9sfaiBdbaehika8MaLcdtfaiBdbka9tce86bba9rce86bbaHIdbg8Sanana8S9DEhna0cefh0cecda9uceSEa8Kfh8KkawcefgwaE9hmbkka0TmddnalTmbcbhKcbhiindna8MaicdtgefydbgOaiSmbaQaOcdtfydbh8FdnaiaQaefydb9hg3mbaqa8Fc8S2fgeaqaic8S2fgHIdbaeIdbMUdbaeaHIdlaeIdlMUdlaeaHIdwaeIdwMUdwaeaHIdxaeIdxMUdxaeaHIdzaeIdzMUdzaeaHIdCaeIdCMUdCaeaHIdKaeIdKMUdKaeaHId3aeId3MUd3aeaHIdaaeIdaMUdaaeaHId8KaeId8KMUd8KaeaHIdyaeIdyMUdyka8JTmbavaOc8S2fgeavaic8S2gwfgHIdbaeIdbMUdbaeaHIdlaeIdlMUdlaeaHIdwaeIdwMUdwaeaHIdxaeIdxMUdxaeaHIdzaeIdzMUdzaeaHIdCaeIdCMUdCaeaHIdKaeIdKMUdKaeaHId3aeId3MUd3aeaHIdaaeIdaMUdaaeaHId8KaeId8KMUd8KaeaHIdyaeIdyMUdya9iaO2hLarhHa8JhAinaHaLfgeaHaKfgOIdbaeIdbMUdbaeclfgYaOclfIdbaYIdbMUdbaecwfgYaOcwfIdbaYIdbMUdbaecxfgeaOcxfIdbaeIdbMUdbaHczfhHaAcufgAmbka3mbJbbbbJbbjZaqawfgeIdyg8S:va8SJbbbb9BEaeIdwaaa8Fcx2fgHIdwg8SNaeIdzaHIdbgINaeIdaMg8Va8VMMa8SNaeIdlaHIdlg8VNaeIdCa8SNaeId3Mg8Sa8SMMa8VNaeIdbaINaeIdxa8VNaeIdKMg8Sa8SMMaINaeId8KMMM:lNg8SaBaBa8S9DEhBkaKa9ifhKaicefgial9hmbkcbhHahheindnaeydbgOcuSmbdnaHa8MaOcdtgAfydbgO9hmbcuhOahaAfydbgAcuSmba8MaAcdtfydbhOkaeaOBdbkaeclfhealaHcefgH9hmbkcbhHagheindnaeydbgOcuSmbdnaHa8MaOcdtgAfydbgO9hmbcuhOagaAfydbgAcuSmba8MaAcdtfydbhOkaeaOBdbkaeclfhealaHcefgH9hmbkkaBana8JEhBcbhYabhecbhKindna8MaeydbcdtfydbgHa8MaeclfydbcdtfydbgOSmbaHa8MaecwfydbcdtfydbgASmbaOaASmbabaYcdtfgLaHBdbaLcwfaABdbaLclfaOBdbaYcifhYkaecxfheaKcifgKad6mbkdndna9cTmbaYak9nmba8ZaB9FTmbcbhdabhecbhHindnaoaCaeydbgOcdtfydbcdtfIdbaB9ETmbabadcdtfgAaOBdbaAclfaeclfydbBdbaAcwfaecwfydbBdbadcifhdkaecxfheaHcifgHaY6mbkJFFuuh8ZaJTmeaoheaJhHJFFuuh8SinaeIdbgIa8Sa8SaI9EEg8Va8SaIaB9EgOEh8Sa8Va8ZaOEh8ZaeclfheaHcufgHmbxdkkaYhdkadak0mbxdkkasclfabadalaQz:cjjjbkdndnadak0mbadhOxekdna9cmbadhOxekdna8Zac9FmbadhOxekina8ZJbb;aZNg8Saca8Sac9DEh8VJbbbbh8SdnaJTmbaoheaJhHinaeIdbgIa8SaIa8V9FEa8SaIa8S9EEh8SaeclfheaHcufgHmbkkcbhOabhecbhHindnaoaCaeydbgAcdtfydbcdtfIdba8V9ETmbabaOcdtfgYaABdbaYclfaeclfydbBdbaYcwfaecwfydbBdbaOcifhOkaecxfheaHcifgHad6mbkJFFuuh8ZdnaJTmbaoheaJhHJFFuuhIinaeIdbgRaIaIaR9EEg8PaIaRa8V9EgAEhIa8Pa8ZaAEh8ZaeclfheaHcufgHmbkkdnaOad9hmbadhOxdka8Sanana8S9DEhnaOak9nmeaOhda8Zac9FmbkkdnamcjjjjlGTmbazmbaOTmbcbhQabheinaXaeydbgAfRbbc3thKaecwfgLydbhHdndnahaAcdtg8FfydbaeclfgiydbgCSmbcbhYagaCcdtfydbaA9hmekcjjjj94hYkaeaKaYVaAVBdbaXaCfRbbc3thKdndnahaCcdtfydbaHSmbcbhYagaHcdtfydbaC9hmekcjjjj94hYkaiaKaYVaCVBdbaXaHfRbbc3thYdndnahaHcdtfydbaASmbcbhCaga8FfydbaH9hmekcjjjj94hCkaLaYaCVaHVBdbaecxfheaQcifgQaO6mbkkdnazTmbaOTmbaOheinabazabydbcdtfydbBdbabclfhbaecufgembkkdnaPTmbaPa83an:rNUdbkasyd2gecdtascxffc98fhHdninaeTmeaHydbcbyd;O1jjbH:bjjjbbaHc98fhHaecufhexbkkasc;W;qbf8KjjjjbaOk;Yieouabydlhvabydbclfcbaicdtz:ljjjbhoadci9UhrdnadTmbdnalTmbaehwadhDinaoalawydbcdtfydbcdtfgqaqydbcefBdbawclfhwaDcufgDmbxdkkaehwadhDinaoawydbcdtfgqaqydbcefBdbawclfhwaDcufgDmbkkdnaiTmbcbhDaohwinawydbhqawaDBdbawclfhwaqaDfhDaicufgimbkkdnadci6mbinaecwfydbhwaeclfydbhDaeydbhidnalTmbalawcdtfydbhwalaDcdtfydbhDalaicdtfydbhikavaoaicdtfgqydbcitfaDBdbavaqydbcitfawBdlaqaqydbcefBdbavaoaDcdtfgqydbcitfawBdbavaqydbcitfaiBdlaqaqydbcefBdbavaoawcdtfgwydbcitfaiBdbavawydbcitfaDBdlawawydbcefBdbaecxfhearcufgrmbkkabydbcbBdbk;Podvuv998Jjjjjbca9RgvcFFF;7rBd3av9cFFF;7;3FF:;Fb83dCavcFFF97Bdzav9cFFF;7FFF:;u83dwdnadTmbaicd4hodnabmbdnalTmbcbhrinaealarcdtfydbao2cdtfhwcbhiinavcCfaifgDawaifIdbgqaDIdbgkakaq9EEUdbavcwfaifgDaqaDIdbgkakaq9DEUdbaiclfgicx9hmbkarcefgrad9hmbxikkaocdthrcbhwincbhiinavcCfaifgDaeaifIdbgqaDIdbgkakaq9EEUdbavcwfaifgDaqaDIdbgkakaq9DEUdbaiclfgicx9hmbkaearfheawcefgwad9hmbxdkkdnalTmbcbhrinabarcx2fgiaealarcdtfydbao2cdtfgwIdbUdbaiawIdlUdlaiawIdwUdwcbhiinavcCfaifgDawaifIdbgqaDIdbgkakaq9EEUdbavcwfaifgDaqaDIdbgkakaq9DEUdbaiclfgicx9hmbkarcefgrad9hmbxdkkaocdthlcbhraehwinabarcx2fgiaearao2cdtfgDIdbUdbaiaDIdlUdlaiaDIdwUdwcbhiinavcCfaifgDawaifIdbgqaDIdbgkakaq9EEUdbavcwfaifgDaqaDIdbgkakaq9DEUdbaiclfgicx9hmbkawalfhwarcefgrad9hmbkkJbbbbavIdwavIdCgk:tgqaqJbbbb9DEgqavIdxavIdKgx:tgmamaq9DEgqavIdzavId3gm:tgPaPaq9DEhPdnabTmbadTmbJbbbbJbbjZaP:vaPJbbbb9BEhqinabaqabIdbak:tNUdbabclfgvaqavIdbax:tNUdbabcwfgvaqavIdbam:tNUdbabcxfhbadcufgdmbkkaPk8MbabaeadaialavcbcbcbcbcbaoarawaDz:bjjjbk8MbabaeadaialavaoarawaDaqakaxamaPz:bjjjbk:nCoDud99rue99lul998Jjjjjbc;Wb9Rgw8KjjjjbdndnarmbcbhDxekawcxfcbc;Kbz:ljjjb8Aawcuadcx2adc;v:Q;v:Qe0Ecbyd;S1jjbHjjjjbbgqBdxawceBd2aqaeadaicbz:djjjb8AawcuadcdtadcFFFFi0Egkcbyd;S1jjbHjjjjbbgxBdzawcdBd2adcd4adfhmceheinaegicetheaiam6mbkcbhPawcuaicdtgsaicFFFFi0Ecbyd;S1jjbHjjjjbbgzBdCawciBd2dndnar:ZgH:rJbbbZMgO:lJbbb9p9DTmbaO:Ohexekcjjjj94hekaicufhAc:bwhmcbhCadhXcbhQinaChLaeamgKcufaeaK9iEaPgDcefaeaD9kEhYdndnadTmbaYcuf:YhOaqhiaxheadhmindndnaiIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhCxekcjjjj94hCkaCcCthCdndnaiclfIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhExekcjjjj94hEkaEcqtaCVhCdndnaicwfIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhExekcjjjj94hEkaeaCaEVBdbaicxfhiaeclfheamcufgmmbkazcFeasz:ljjjbh3cbh5cbh8Eindna3axa8EcdtfydbgCcm4aC7c:v;t;h;Ev2gics4ai7aAGgmcdtfgEydbgecuSmbaeaCSmbcehiina3amaifaAGgmcdtfgEydbgecuSmeaicefhiaeaC9hmbkkaEaCBdba5aecuSfh5a8Ecefg8Ead9hmbxdkkazcFeasz:ljjjb8Acbh5kaDaYa5ar0giEhPaLa5aiEhCdna5arSmbaYaKaiEgmaP9Rcd9imbdndnaQcl0mbdnaX:ZgOaL:Zg8A:taY:Yg8FaD:Y:tgaa8FaK:Y:tgha5:ZggaH:tNNNaOaH:tahNa8Aag:tNa8AaH:taaNagaO:tNM:va8FMJbbbZMgO:lJbbb9p9DTmbaO:Ohexdkcjjjj94hexekaPamfcd9Theka5aXaiEhXaQcefgQcs9hmekkdndnaCmbcihicbhDxekcbhiawakcbyd;S1jjbHjjjjbbg8EBdKawclBd2aPcuf:Yh8AdndnadTmbaqhiaxheadhmindndnaiIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhCxekcjjjj94hCkaCcCthCdndnaiclfIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhExekcjjjj94hEkaEcqtaCVhCdndnaicwfIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhExekcjjjj94hEkaeaCaEVBdbaicxfhiaeclfheamcufgmmbkazcFeasz:ljjjbh3cbhDcbh5inaxa5cdtgYfydbgCcm4aC7c:v;t;h;Ev2gics4ai7hecbhidndnina3aeaAGgmcdtfgEydbgecuSmednaxaecdtgEfydbaCSmbaicefgiamfheaiaA9nmekka8EaEfydbhixekaEa5BdbaDhiaDcefhDka8EaYfaiBdba5cefg5ad9hmbkcuaDc32giaDc;j:KM;jb0EhexekazcFeasz:ljjjb8AcbhDcbhekawaecbyd;S1jjbHjjjjbbgeBd3awcvBd2aecbaiz:ljjjbhEavcd4hxdnadTmbdnalTmbaxcdth3a8EhCalheaqhmadhAinaEaCydbc32fgiamIdbaiIdbMUdbaiamclfIdbaiIdlMUdlaiamcwfIdbaiIdwMUdwaiaeIdbaiIdxMUdxaiaeclfIdbaiIdzMUdzaiaecwfIdbaiIdCMUdCaiaiIdKJbbjZMUdKaCclfhCaea3fheamcxfhmaAcufgAmbxdkka8EhmaqheadhCinaEamydbc32fgiaeIdbaiIdbMUdbaiaeclfIdbaiIdlMUdlaiaecwfIdbaiIdwMUdwaiaiIdxJbbbbMUdxaiaiIdzJbbbbMUdzaiaiIdCJbbbbMUdCaiaiIdKJbbjZMUdKamclfhmaecxfheaCcufgCmbkkdnaDTmbaEhiaDheinaiaiIdbJbbbbJbbjZaicKfIdbgO:vaOJbbbb9BEgONUdbaiclfgmaOamIdbNUdbaicwfgmaOamIdbNUdbaicxfgmaOamIdbNUdbaiczfgmaOamIdbNUdbaicCfgmaOamIdbNUdbaic3fhiaecufgembkkcbhCawcuaDcdtgYaDcFFFFi0Egicbyd;S1jjbHjjjjbbgeBdaawcoBd2awaicbyd;S1jjbHjjjjbbg3Bd8KaecFeaYz:ljjjbh5dnadTmbJbbjZJbbjZa8A:vaPceSEaoNgOaONh8Aaxcdthxalheina8Aaec;C1jjbalEgmIdwaEa8EydbgAc32fgiIdC:tgOaONamIdbaiIdx:tgOaONamIdlaiIdz:tgOaONMMNaqcwfIdbaiIdw:tgOaONaqIdbaiIdb:tgOaONaqclfIdbaiIdl:tgOaONMMMhOdndna5aAcdtgifgmydbcuSmba3aifIdbaO9ETmekamaCBdba3aifaOUdbka8Eclfh8EaeaxfheaqcxfhqadaCcefgC9hmbkkaba5aYz:kjjjb8AcrhikaicdthiinaiTmeaic98fgiawcxffydbcbyd;O1jjbH:bjjjbbxbkkawc;Wbf8KjjjjbaDk:Odieui99iu8Jjjjjbca9RgicFFF;7rBd3ai9cFFF;7;3FF:;Fb83dCaicFFF97Bdzai9cFFF;7FFF:;u83dwdndnaembJbbjFhlJbbjFhvJbbjFhoxekadcd4cdthrcbhwincbhdinaicCfadfgDabadfIdbglaDIdbgvaval9EEUdbaicwfadfgDalaDIdbgvaval9DEUdbadclfgdcx9hmbkabarfhbawcefgwae9hmbkaiIdzaiId3:thoaiIdxaiIdK:thvaiIdwaiIdC:thlkJbbbbalalJbbbb9DEglavaval9DEglaoaoal9DEk9DeeuabcFeaicdtz:ljjjbhlcbhbdnadTmbindnalaeydbcdtfgiydbcu9hmbaiabBdbabcefhbkaeclfheadcufgdmbkkabk9teiucbcbyd;W1jjbgeabcifc98GfgbBd;W1jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik;LeeeudndnaeabVciGTmbabhixekdndnadcz9pmbabhixekabhiinaiaeydbBdbaiclfaeclfydbBdbaicwfaecwfydbBdbaicxfaecxfydbBdbaeczfheaiczfhiadc9Wfgdcs0mbkkadcl6mbinaiaeydbBdbaeclfheaiclfhiadc98fgdci0mbkkdnadTmbinaiaeRbb86bbaicefhiaecefheadcufgdmbkkabk;aeedudndnabciGTmbabhixekaecFeGc:b:c:ew2hldndnadcz9pmbabhixekabhiinaialBdbaicxfalBdbaicwfalBdbaiclfalBdbaiczfhiadc9Wfgdcs0mbkkadcl6mbinaialBdbaiclfhiadc98fgdci0mbkkdnadTmbinaiae86bbaicefhiadcufgdmbkkabk9teiucbcbyd;W1jjbgeabcrfc94GfgbBd;W1jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik9:eiuZbhedndncbyd;W1jjbgdaecztgi9nmbcuheadai9RcFFifcz4nbcuSmekadhekcbabae9Rcifc98Gcbyd;W1jjbfgdBd;W1jjbdnadZbcztge9nmbadae9RcFFifcz4nb8Akk6eiucbhidnadTmbdninabRbbglaeRbbgv9hmeaecefheabcefhbadcufgdmbxdkkalav9Rhikaikk:bedbcjwk9Oeeebeebebbeeebebbbbbebebbbbbbbbbebbbdbbbbbbbebbbebbbdbbbbbbbbbbbeeeeebebbebbebebbbeebbbbbbbbbbbbbbbbbbbbbc;OwkxebbbdbbbjNbb'; // embed! wasm\n\n\tvar wasmpack = new Uint8Array([\n\t\t32, 0, 65, 2, 1, 106, 34, 33, 3, 128, 11, 4, 13, 64, 6, 253, 10, 7, 15, 116, 127, 5, 8, 12, 40, 16, 19, 54, 20, 9, 27, 255, 113, 17, 42, 67,\n\t\t24, 23, 146, 148, 18, 14, 22, 45, 70, 69, 56, 114, 101, 21, 25, 63, 75, 136, 108, 28, 118, 29, 73, 115,\n\t]);\n\n\tif (typeof WebAssembly !== 'object') {\n\t\treturn {\n\t\t\tsupported: false,\n\t\t};\n\t}\n\n\tvar instance;\n\n\tvar ready = WebAssembly.instantiate(unpack(wasm), {}).then(function (result) {\n\t\tinstance = result.instance;\n\t\tinstance.exports.__wasm_call_ctors();\n\t});\n\n\tfunction unpack(data) {\n\t\tvar result = new Uint8Array(data.length);\n\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\tvar ch = data.charCodeAt(i);\n\t\t\tresult[i] = ch > 96 ? ch - 97 : ch > 64 ? ch - 39 : ch + 4;\n\t\t}\n\t\tvar write = 0;\n\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\tresult[write++] = result[i] < 60 ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];\n\t\t}\n\t\treturn result.buffer.slice(0, write);\n\t}\n\n\tfunction assert(cond) {\n\t\tif (!cond) {\n\t\t\tthrow new Error('Assertion failed');\n\t\t}\n\t}\n\n\tfunction bytes(view) {\n\t\treturn new Uint8Array(view.buffer, view.byteOffset, view.byteLength);\n\t}\n\n\tfunction reorder(fun, indices, vertices) {\n\t\tvar sbrk = instance.exports.sbrk;\n\t\tvar ip = sbrk(indices.length * 4);\n\t\tvar rp = sbrk(vertices * 4);\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\tvar indices8 = bytes(indices);\n\t\theap.set(indices8, ip);\n\t\tvar unique = fun(rp, ip, indices.length, vertices);\n\t\t// heap may have grown\n\t\theap = new Uint8Array(instance.exports.memory.buffer);\n\t\tvar remap = new Uint32Array(vertices);\n\t\tnew Uint8Array(remap.buffer).set(heap.subarray(rp, rp + vertices * 4));\n\t\tindices8.set(heap.subarray(ip, ip + indices.length * 4));\n\t\tsbrk(ip - sbrk(0));\n\n\t\tfor (var i = 0; i < indices.length; ++i) indices[i] = remap[indices[i]];\n\n\t\treturn [remap, unique];\n\t}\n\n\tfunction maxindex(source) {\n\t\tvar result = 0;\n\t\tfor (var i = 0; i < source.length; ++i) {\n\t\t\tvar index = source[i];\n\t\t\tresult = result < index ? index : result;\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction simplify(fun, indices, index_count, vertex_positions, vertex_count, vertex_positions_stride, target_index_count, target_error, options) {\n\t\tvar sbrk = instance.exports.sbrk;\n\t\tvar te = sbrk(4);\n\t\tvar ti = sbrk(index_count * 4);\n\t\tvar sp = sbrk(vertex_count * vertex_positions_stride);\n\t\tvar si = sbrk(index_count * 4);\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\theap.set(bytes(vertex_positions), sp);\n\t\theap.set(bytes(indices), si);\n\t\tvar result = fun(ti, si, index_count, sp, vertex_count, vertex_positions_stride, target_index_count, target_error, options, te);\n\t\t// heap may have grown\n\t\theap = new Uint8Array(instance.exports.memory.buffer);\n\t\tvar target = new Uint32Array(result);\n\t\tbytes(target).set(heap.subarray(ti, ti + result * 4));\n\t\tvar error = new Float32Array(1);\n\t\tbytes(error).set(heap.subarray(te, te + 4));\n\t\tsbrk(te - sbrk(0));\n\t\treturn [target, error[0]];\n\t}\n\n\tfunction simplifyAttr(\n\t\tfun,\n\t\tindices,\n\t\tindex_count,\n\t\tvertex_positions,\n\t\tvertex_count,\n\t\tvertex_positions_stride,\n\t\tvertex_attributes,\n\t\tvertex_attributes_stride,\n\t\tattribute_weights,\n\t\tvertex_lock,\n\t\ttarget_index_count,\n\t\ttarget_error,\n\t\toptions\n\t) {\n\t\tvar sbrk = instance.exports.sbrk;\n\t\tvar te = sbrk(4);\n\t\tvar ti = sbrk(index_count * 4);\n\t\tvar sp = sbrk(vertex_count * vertex_positions_stride);\n\t\tvar sa = sbrk(vertex_count * vertex_attributes_stride);\n\t\tvar sw = sbrk(attribute_weights.length * 4);\n\t\tvar si = sbrk(index_count * 4);\n\t\tvar vl = vertex_lock ? sbrk(vertex_count) : 0;\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\theap.set(bytes(vertex_positions), sp);\n\t\theap.set(bytes(vertex_attributes), sa);\n\t\theap.set(bytes(attribute_weights), sw);\n\t\theap.set(bytes(indices), si);\n\t\tif (vertex_lock) {\n\t\t\theap.set(bytes(vertex_lock), vl);\n\t\t}\n\t\tvar result = fun(\n\t\t\tti,\n\t\t\tsi,\n\t\t\tindex_count,\n\t\t\tsp,\n\t\t\tvertex_count,\n\t\t\tvertex_positions_stride,\n\t\t\tsa,\n\t\t\tvertex_attributes_stride,\n\t\t\tsw,\n\t\t\tattribute_weights.length,\n\t\t\tvl,\n\t\t\ttarget_index_count,\n\t\t\ttarget_error,\n\t\t\toptions,\n\t\t\tte\n\t\t);\n\t\t// heap may have grown\n\t\theap = new Uint8Array(instance.exports.memory.buffer);\n\t\tvar target = new Uint32Array(result);\n\t\tbytes(target).set(heap.subarray(ti, ti + result * 4));\n\t\tvar error = new Float32Array(1);\n\t\tbytes(error).set(heap.subarray(te, te + 4));\n\t\tsbrk(te - sbrk(0));\n\t\treturn [target, error[0]];\n\t}\n\n\tfunction simplifyScale(fun, vertex_positions, vertex_count, vertex_positions_stride) {\n\t\tvar sbrk = instance.exports.sbrk;\n\t\tvar sp = sbrk(vertex_count * vertex_positions_stride);\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\theap.set(bytes(vertex_positions), sp);\n\t\tvar result = fun(sp, vertex_count, vertex_positions_stride);\n\t\tsbrk(sp - sbrk(0));\n\t\treturn result;\n\t}\n\n\tfunction simplifyPoints(\n\t\tfun,\n\t\tvertex_positions,\n\t\tvertex_count,\n\t\tvertex_positions_stride,\n\t\tvertex_colors,\n\t\tvertex_colors_stride,\n\t\tcolor_weight,\n\t\ttarget_vertex_count\n\t) {\n\t\tvar sbrk = instance.exports.sbrk;\n\t\tvar ti = sbrk(target_vertex_count * 4);\n\t\tvar sp = sbrk(vertex_count * vertex_positions_stride);\n\t\tvar sc = sbrk(vertex_count * vertex_colors_stride);\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\theap.set(bytes(vertex_positions), sp);\n\t\tif (vertex_colors) {\n\t\t\theap.set(bytes(vertex_colors), sc);\n\t\t}\n\t\tvar result = fun(ti, sp, vertex_count, vertex_positions_stride, sc, vertex_colors_stride, color_weight, target_vertex_count);\n\t\t// heap may have grown\n\t\theap = new Uint8Array(instance.exports.memory.buffer);\n\t\tvar target = new Uint32Array(result);\n\t\tbytes(target).set(heap.subarray(ti, ti + result * 4));\n\t\tsbrk(ti - sbrk(0));\n\t\treturn target;\n\t}\n\n\tvar simplifyOptions = {\n\t\tLockBorder: 1,\n\t\tSparse: 2,\n\t\tErrorAbsolute: 4,\n\t\tPrune: 8,\n\t\t_InternalDebug: 1 << 30, // internal, don't use!\n\t};\n\n\treturn {\n\t\tready: ready,\n\t\tsupported: true,\n\n\t\t// set this to true to be able to use simplifyPoints and simplifyWithAttributes\n\t\t// note that these functions are experimental and may change interface/behavior in a way that will require revising calling code\n\t\tuseExperimentalFeatures: false,\n\n\t\tcompactMesh: function (indices) {\n\t\t\tassert(\n\t\t\t\tindices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array\n\t\t\t);\n\t\t\tassert(indices.length % 3 == 0);\n\n\t\t\tvar indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);\n\t\t\treturn reorder(instance.exports.meshopt_optimizeVertexFetchRemap, indices32, maxindex(indices) + 1);\n\t\t},\n\n\t\tsimplify: function (indices, vertex_positions, vertex_positions_stride, target_index_count, target_error, flags) {\n\t\t\tassert(\n\t\t\t\tindices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array\n\t\t\t);\n\t\t\tassert(indices.length % 3 == 0);\n\t\t\tassert(vertex_positions instanceof Float32Array);\n\t\t\tassert(vertex_positions.length % vertex_positions_stride == 0);\n\t\t\tassert(vertex_positions_stride >= 3);\n\t\t\tassert(target_index_count >= 0 && target_index_count <= indices.length);\n\t\t\tassert(target_index_count % 3 == 0);\n\t\t\tassert(target_error >= 0);\n\n\t\t\tvar options = 0;\n\t\t\tfor (var i = 0; i < (flags ? flags.length : 0); ++i) {\n\t\t\t\tassert(flags[i] in simplifyOptions);\n\t\t\t\tassert(this.useExperimentalFeatures || flags[i] != 'Prune'); // set useExperimentalFeatures to use experimental flags like Prune\n\t\t\t\toptions |= simplifyOptions[flags[i]];\n\t\t\t}\n\n\t\t\tvar indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);\n\t\t\tvar result = simplify(\n\t\t\t\tinstance.exports.meshopt_simplify,\n\t\t\t\tindices32,\n\t\t\t\tindices.length,\n\t\t\t\tvertex_positions,\n\t\t\t\tvertex_positions.length / vertex_positions_stride,\n\t\t\t\tvertex_positions_stride * 4,\n\t\t\t\ttarget_index_count,\n\t\t\t\ttarget_error,\n\t\t\t\toptions\n\t\t\t);\n\t\t\tresult[0] = indices instanceof Uint32Array ? result[0] : new indices.constructor(result[0]);\n\n\t\t\treturn result;\n\t\t},\n\n\t\tsimplifyWithAttributes: function (\n\t\t\tindices,\n\t\t\tvertex_positions,\n\t\t\tvertex_positions_stride,\n\t\t\tvertex_attributes,\n\t\t\tvertex_attributes_stride,\n\t\t\tattribute_weights,\n\t\t\tvertex_lock,\n\t\t\ttarget_index_count,\n\t\t\ttarget_error,\n\t\t\tflags\n\t\t) {\n\t\t\tassert(this.useExperimentalFeatures); // set useExperimentalFeatures to use this; note that this function is experimental and may change interface in a way that will require revising calling code\n\t\t\tassert(\n\t\t\t\tindices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array\n\t\t\t);\n\t\t\tassert(indices.length % 3 == 0);\n\t\t\tassert(vertex_positions instanceof Float32Array);\n\t\t\tassert(vertex_positions.length % vertex_positions_stride == 0);\n\t\t\tassert(vertex_positions_stride >= 3);\n\t\t\tassert(vertex_attributes instanceof Float32Array);\n\t\t\tassert(vertex_attributes.length % vertex_attributes_stride == 0);\n\t\t\tassert(vertex_attributes_stride >= 0);\n\t\t\tassert(vertex_lock == null || vertex_lock instanceof Uint8Array);\n\t\t\tassert(vertex_lock == null || vertex_lock.length == vertex_positions.length / vertex_positions_stride);\n\t\t\tassert(target_index_count >= 0 && target_index_count <= indices.length);\n\t\t\tassert(target_index_count % 3 == 0);\n\t\t\tassert(target_error >= 0);\n\t\t\tassert(Array.isArray(attribute_weights));\n\t\t\tassert(vertex_attributes_stride >= attribute_weights.length);\n\t\t\tassert(attribute_weights.length <= 32);\n\t\t\tfor (var i = 0; i < attribute_weights.length; ++i) {\n\t\t\t\tassert(attribute_weights[i] >= 0);\n\t\t\t}\n\n\t\t\tvar options = 0;\n\t\t\tfor (var i = 0; i < (flags ? flags.length : 0); ++i) {\n\t\t\t\tassert(flags[i] in simplifyOptions);\n\t\t\t\toptions |= simplifyOptions[flags[i]];\n\t\t\t}\n\n\t\t\tvar indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);\n\t\t\tvar result = simplifyAttr(\n\t\t\t\tinstance.exports.meshopt_simplifyWithAttributes,\n\t\t\t\tindices32,\n\t\t\t\tindices.length,\n\t\t\t\tvertex_positions,\n\t\t\t\tvertex_positions.length / vertex_positions_stride,\n\t\t\t\tvertex_positions_stride * 4,\n\t\t\t\tvertex_attributes,\n\t\t\t\tvertex_attributes_stride * 4,\n\t\t\t\tnew Float32Array(attribute_weights),\n\t\t\t\tvertex_lock ? new Uint8Array(vertex_lock) : null,\n\t\t\t\ttarget_index_count,\n\t\t\t\ttarget_error,\n\t\t\t\toptions\n\t\t\t);\n\t\t\tresult[0] = indices instanceof Uint32Array ? result[0] : new indices.constructor(result[0]);\n\n\t\t\treturn result;\n\t\t},\n\n\t\tgetScale: function (vertex_positions, vertex_positions_stride) {\n\t\t\tassert(vertex_positions instanceof Float32Array);\n\t\t\tassert(vertex_positions.length % vertex_positions_stride == 0);\n\t\t\tassert(vertex_positions_stride >= 3);\n\t\t\treturn simplifyScale(\n\t\t\t\tinstance.exports.meshopt_simplifyScale,\n\t\t\t\tvertex_positions,\n\t\t\t\tvertex_positions.length / vertex_positions_stride,\n\t\t\t\tvertex_positions_stride * 4\n\t\t\t);\n\t\t},\n\n\t\tsimplifyPoints: function (vertex_positions, vertex_positions_stride, target_vertex_count, vertex_colors, vertex_colors_stride, color_weight) {\n\t\t\tassert(this.useExperimentalFeatures); // set useExperimentalFeatures to use this; note that this function is experimental and may change interface in a way that will require revising calling code\n\t\t\tassert(vertex_positions instanceof Float32Array);\n\t\t\tassert(vertex_positions.length % vertex_positions_stride == 0);\n\t\t\tassert(vertex_positions_stride >= 3);\n\t\t\tassert(target_vertex_count >= 0 && target_vertex_count <= vertex_positions.length / vertex_positions_stride);\n\t\t\tif (vertex_colors) {\n\t\t\t\tassert(vertex_colors instanceof Float32Array);\n\t\t\t\tassert(vertex_colors.length % vertex_colors_stride == 0);\n\t\t\t\tassert(vertex_colors_stride >= 3);\n\t\t\t\tassert(vertex_positions.length / vertex_positions_stride == vertex_colors.length / vertex_colors_stride);\n\t\t\t\treturn simplifyPoints(\n\t\t\t\t\tinstance.exports.meshopt_simplifyPoints,\n\t\t\t\t\tvertex_positions,\n\t\t\t\t\tvertex_positions.length / vertex_positions_stride,\n\t\t\t\t\tvertex_positions_stride * 4,\n\t\t\t\t\tvertex_colors,\n\t\t\t\t\tvertex_colors_stride * 4,\n\t\t\t\t\tcolor_weight,\n\t\t\t\t\ttarget_vertex_count\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn simplifyPoints(\n\t\t\t\t\tinstance.exports.meshopt_simplifyPoints,\n\t\t\t\t\tvertex_positions,\n\t\t\t\t\tvertex_positions.length / vertex_positions_stride,\n\t\t\t\t\tvertex_positions_stride * 4,\n\t\t\t\t\tundefined,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\ttarget_vertex_count\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t};\n})();\n\nexport { MeshoptSimplifier };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}