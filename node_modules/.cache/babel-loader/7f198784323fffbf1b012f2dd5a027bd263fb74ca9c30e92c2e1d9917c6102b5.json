{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Globe/Globe.js\",\n  _s = $RefreshSig$();\n/* global Cesium */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLang } from '../Context/LangContext'; // Adjust the path based on your project structure\nimport '../styles/Globe.css'; // Import the separate style file\nimport useLocationInfo from '../hooks/useLocationInfo'; // Adjust the path based on your project structure\nimport LocationInfoPanel from './LocationInfoPanel'; // Import the LocationInfoPanel component\nimport PropTypes from 'prop-types';\n\n/**\n * Function to perform reverse geocoding using OpenCage Geocoding API.\n * In production, it's recommended to handle this on the backend to secure the API key.\n *\n * @param {string} latitude\n * @param {string} longitude\n * @param {string} language - Language code ('en' for English, 'ko' for Korean)\n * @returns {Promise<string>} - Returns the formatted address in the desired language.\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst reverseGeocode = async (latitude, longitude, language = 'en') => {\n  const apiKey = process.env.REACT_APP_OPENCAGE_API_KEY; // Ensure this is set in .env\n  const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}&language=${language}`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.results && data.results.length > 0) {\n      return data.results[0].formatted;\n    } else {\n      return 'Address not found';\n    }\n  } catch (error) {\n    console.error('Error in reverse geocoding:', error);\n    throw error;\n  }\n};\nconst Globe = () => {\n  _s();\n  const globeRef = useRef(null); // Reference to the Cesium container div\n  const viewerRef = useRef(null); // Reference to the Cesium Viewer instance\n  const animationIdRef = useRef(null); // Reference to the animation frame ID\n\n  // State to manage rotation status\n  const [isRotating, setIsRotating] = useState(true);\n\n  // Use the global language context to determine if text should be English or Korean\n  const {\n    language\n  } = useLang();\n\n  // Inline dictionary for multi-language support\n  const text = {\n    en: {\n      stopRotation: \"Stop Rotation\",\n      startRotation: \"Start Rotation\",\n      locationDetails: \"Location Details\",\n      address: \"Address\",\n      latitude: \"Latitude\",\n      longitude: \"Longitude\",\n      height: \"Height\",\n      zoomLevel: \"Zoom Level\",\n      unknown: \"Unknown\",\n      loading: \"Loading...\",\n      error: \"Error\"\n    },\n    ko: {\n      stopRotation: \"회전 중지\",\n      startRotation: \"회전 시작\",\n      locationDetails: \"위치 정보\",\n      address: \"주소\",\n      latitude: \"위도\",\n      longitude: \"경도\",\n      height: \"높이\",\n      zoomLevel: \"확대 수준\",\n      unknown: \"알 수 없음\",\n      loading: \"로딩 중...\",\n      error: \"오류\"\n    }\n  };\n\n  // Helper function to return the correct text based on the current language\n  const t = key => text[language][key];\n\n  /**\n   * Function to handle rotation toggle.\n   * Starts or stops the Earth's rotation based on current state.\n   */\n  const handleRotationToggle = () => {\n    if (isRotating) {\n      // Stop rotation\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n      setIsRotating(false);\n    } else {\n      // Start rotation\n      if (!animationIdRef.current && viewerRef.current) {\n        const rotateEarth = () => {\n          const spinRate = 0.01;\n          const delta = spinRate / 60; // Assuming 60 FPS\n          viewerRef.current.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -delta);\n          animationIdRef.current = requestAnimationFrame(rotateEarth);\n        };\n        rotateEarth();\n      }\n      setIsRotating(true);\n    }\n  };\n\n  /**\n   * Hide or show other site elements (Navbar, Footer, Home text, etc.)\n   * based on whether we're in fullscreen mode.\n   */\n  const toggleElementsVisibility = hide => {\n    // List any CSS selectors you want hidden in fullscreen\n    const selectors = ['.navbar',\n    // Navbar\n    '.footer',\n    // Footer\n    '.intro',\n    // Intro section in Home.js\n    '.features' // Features section in Home.js\n    ];\n    selectors.forEach(selector => {\n      document.querySelectorAll(selector).forEach(elem => {\n        // If hide === true => display: 'none'\n        // If hide === false => display: ''\n        elem.style.display = hide ? 'none' : '';\n      });\n    });\n  };\n\n  /**\n   * Check for 'fullscreenchange' events:\n   * if document.fullscreenElement is set, we hide other site elements;\n   * otherwise, we restore them.\n   */\n  const handleFullScreenChange = () => {\n    const isFullScreen = !!document.fullscreenElement;\n    toggleElementsVisibility(isFullScreen);\n  };\n\n  // Initialize Cesium Viewer and handle rotation controls\n  useEffect(() => {\n    // Set your Cesium Ion access token from environment variables\n    Cesium.Ion.defaultAccessToken = process.env.REACT_APP_CESIUM_ION_ACCESS_TOKEN;\n\n    // Listen for the 'fullscreenchange' event on the document\n    document.addEventListener('fullscreenchange', handleFullScreenChange);\n\n    // Initialize Cesium Viewer if it doesn't exist yet\n    if (globeRef.current && !viewerRef.current) {\n      try {\n        viewerRef.current = new Cesium.Viewer(globeRef.current, {\n          terrainProvider: Cesium.createWorldTerrain(),\n          // High-resolution terrain\n          imageryProvider: new Cesium.IonImageryProvider({\n            assetId: 2\n          }),\n          // Example asset ID\n          baseLayerPicker: false,\n          geocoder: false,\n          homeButton: false,\n          infoBox: false,\n          // We'll handle info boxes manually\n          navigationHelpButton: false,\n          sceneModePicker: false,\n          timeline: false,\n          animation: false,\n          fullscreenButton: true,\n          // Enable fullscreen\n          requestRenderMode: true,\n          maximumRenderTimeChange: Infinity\n        });\n\n        // Set initial camera view (New York coordinates as example)\n        viewerRef.current.camera.setView({\n          destination: Cesium.Cartesian3.fromDegrees(-74.0707383, 40.7117244, 10000000),\n          orientation: {\n            heading: Cesium.Math.toRadians(0),\n            pitch: Cesium.Math.toRadians(-90),\n            roll: 0.0\n          }\n        });\n\n        // Continuous rotation\n        const rotateEarth = () => {\n          const spinRate = 0.01;\n          const delta = spinRate / 60; // 60 FPS assumption\n          viewerRef.current.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -delta);\n          animationIdRef.current = requestAnimationFrame(rotateEarth);\n        };\n        rotateEarth(); // Start rotation immediately\n\n        // Scene interactions to stop/start rotation on user actions\n        viewerRef.current.scene.screenSpaceCameraController.inertiaSpin = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaTranslate = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaZoom = 0;\n        const stopRotation = () => {\n          if (animationIdRef.current) {\n            cancelAnimationFrame(animationIdRef.current);\n            animationIdRef.current = null;\n            setIsRotating(false);\n          }\n        };\n        const startRotation = () => {\n          if (!animationIdRef.current) {\n            rotateEarth();\n            setIsRotating(true);\n          }\n        };\n\n        // Stop rotation on pointer down/wheel\n        viewerRef.current.canvas.addEventListener('pointerdown', stopRotation);\n        viewerRef.current.canvas.addEventListener('wheel', stopRotation, {\n          passive: true\n        });\n\n        // Resume rotation on pointer up/wheel end\n        viewerRef.current.canvas.addEventListener('pointerup', startRotation);\n        viewerRef.current.canvas.addEventListener('wheel', startRotation, {\n          passive: true,\n          capture: true\n        });\n      } catch (error) {\n        console.error('Failed to initialize Cesium viewer:', error);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullScreenChange);\n      if (viewerRef.current) {\n        viewerRef.current.destroy();\n        viewerRef.current = null;\n      }\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n    };\n  }, [language]); // Added 'language' as a dependency to refetch location info on language change\n\n  // Use the custom hook to manage location info, passing the current language\n  const {\n    locationInfo,\n    loading,\n    error\n  } = useLocationInfo(viewerRef.current, Cesium, reverseGeocode, language // Pass the selected language\n  );\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef,\n      id: \"cesiumContainer\",\n      style: {\n        height: '100vh',\n        width: '100vw'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tabs\",\n          role: \"tablist\",\n          \"aria-label\": \"Rotation Controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `tab-button ${isRotating ? 'active' : ''}`,\n            onClick: handleRotationToggle,\n            \"aria-selected\": isRotating,\n            role: \"tab\",\n            \"aria-controls\": \"start-rotation-panel\",\n            id: \"start-rotation-tab\",\n            children: t(\"startRotation\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `tab-button ${!isRotating ? 'active' : ''}`,\n            onClick: handleRotationToggle,\n            \"aria-selected\": !isRotating,\n            role: \"tab\",\n            \"aria-controls\": \"stop-rotation-panel\",\n            id: \"stop-rotation-tab\",\n            children: t(\"stopRotation\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LocationInfoPanel, {\n        locationInfo: locationInfo,\n        loading: loading,\n        error: error,\n        translate: t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Globe, \"+oELvtptwVl7N8UGaIO471mfGCk=\", false, function () {\n  return [useLang, useLocationInfo];\n});\n_c = Globe;\nGlobe.propTypes = {\n  // Define prop types if necessary\n};\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLang","useLocationInfo","LocationInfoPanel","PropTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","reverseGeocode","latitude","longitude","language","apiKey","process","env","REACT_APP_OPENCAGE_API_KEY","url","response","fetch","data","json","results","length","formatted","error","console","Globe","_s","globeRef","viewerRef","animationIdRef","isRotating","setIsRotating","text","en","stopRotation","startRotation","locationDetails","address","height","zoomLevel","unknown","loading","ko","t","key","handleRotationToggle","current","cancelAnimationFrame","rotateEarth","spinRate","delta","scene","camera","rotate","Cesium","Cartesian3","UNIT_Z","requestAnimationFrame","toggleElementsVisibility","hide","selectors","forEach","selector","document","querySelectorAll","elem","style","display","handleFullScreenChange","isFullScreen","fullscreenElement","Ion","defaultAccessToken","REACT_APP_CESIUM_ION_ACCESS_TOKEN","addEventListener","Viewer","terrainProvider","createWorldTerrain","imageryProvider","IonImageryProvider","assetId","baseLayerPicker","geocoder","homeButton","infoBox","navigationHelpButton","sceneModePicker","timeline","animation","fullscreenButton","requestRenderMode","maximumRenderTimeChange","Infinity","setView","destination","fromDegrees","orientation","heading","Math","toRadians","pitch","roll","screenSpaceCameraController","inertiaSpin","inertiaTranslate","inertiaZoom","canvas","passive","capture","removeEventListener","destroy","locationInfo","children","ref","id","width","className","role","onClick","fileName","_jsxFileName","lineNumber","columnNumber","translate","_c","propTypes","$RefreshReg$"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Globe/Globe.js"],"sourcesContent":["/* global Cesium */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLang } from '../Context/LangContext'; // Adjust the path based on your project structure\nimport '../styles/Globe.css'; // Import the separate style file\nimport useLocationInfo from '../hooks/useLocationInfo'; // Adjust the path based on your project structure\nimport LocationInfoPanel from './LocationInfoPanel'; // Import the LocationInfoPanel component\nimport PropTypes from 'prop-types';\n\n/**\n * Function to perform reverse geocoding using OpenCage Geocoding API.\n * In production, it's recommended to handle this on the backend to secure the API key.\n *\n * @param {string} latitude\n * @param {string} longitude\n * @param {string} language - Language code ('en' for English, 'ko' for Korean)\n * @returns {Promise<string>} - Returns the formatted address in the desired language.\n */\nconst reverseGeocode = async (latitude, longitude, language = 'en') => {\n  const apiKey = process.env.REACT_APP_OPENCAGE_API_KEY; // Ensure this is set in .env\n  const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}&language=${language}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.results && data.results.length > 0) {\n      return data.results[0].formatted;\n    } else {\n      return 'Address not found';\n    }\n  } catch (error) {\n    console.error('Error in reverse geocoding:', error);\n    throw error;\n  }\n};\n\nconst Globe = () => {\n  const globeRef = useRef(null); // Reference to the Cesium container div\n  const viewerRef = useRef(null); // Reference to the Cesium Viewer instance\n  const animationIdRef = useRef(null); // Reference to the animation frame ID\n\n  // State to manage rotation status\n  const [isRotating, setIsRotating] = useState(true);\n\n  // Use the global language context to determine if text should be English or Korean\n  const { language } = useLang();\n\n  // Inline dictionary for multi-language support\n  const text = {\n    en: {\n      stopRotation: \"Stop Rotation\",\n      startRotation: \"Start Rotation\",\n      locationDetails: \"Location Details\",\n      address: \"Address\",\n      latitude: \"Latitude\",\n      longitude: \"Longitude\",\n      height: \"Height\",\n      zoomLevel: \"Zoom Level\",\n      unknown: \"Unknown\",\n      loading: \"Loading...\",\n      error: \"Error\",\n    },\n    ko: {\n      stopRotation: \"회전 중지\",\n      startRotation: \"회전 시작\",\n      locationDetails: \"위치 정보\",\n      address: \"주소\",\n      latitude: \"위도\",\n      longitude: \"경도\",\n      height: \"높이\",\n      zoomLevel: \"확대 수준\",\n      unknown: \"알 수 없음\",\n      loading: \"로딩 중...\",\n      error: \"오류\",\n    },\n  };\n\n  // Helper function to return the correct text based on the current language\n  const t = (key) => text[language][key];\n\n  /**\n   * Function to handle rotation toggle.\n   * Starts or stops the Earth's rotation based on current state.\n   */\n  const handleRotationToggle = () => {\n    if (isRotating) {\n      // Stop rotation\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n      setIsRotating(false);\n    } else {\n      // Start rotation\n      if (!animationIdRef.current && viewerRef.current) {\n        const rotateEarth = () => {\n          const spinRate = 0.01;\n          const delta = spinRate / 60; // Assuming 60 FPS\n          viewerRef.current.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -delta);\n          animationIdRef.current = requestAnimationFrame(rotateEarth);\n        };\n        rotateEarth();\n      }\n      setIsRotating(true);\n    }\n  };\n\n  /**\n   * Hide or show other site elements (Navbar, Footer, Home text, etc.)\n   * based on whether we're in fullscreen mode.\n   */\n  const toggleElementsVisibility = (hide) => {\n    // List any CSS selectors you want hidden in fullscreen\n    const selectors = [\n      '.navbar',    // Navbar\n      '.footer',    // Footer\n      '.intro',     // Intro section in Home.js\n      '.features'   // Features section in Home.js\n    ];\n\n    selectors.forEach((selector) => {\n      document.querySelectorAll(selector).forEach((elem) => {\n        // If hide === true => display: 'none'\n        // If hide === false => display: ''\n        elem.style.display = hide ? 'none' : '';\n      });\n    });\n  };\n\n  /**\n   * Check for 'fullscreenchange' events:\n   * if document.fullscreenElement is set, we hide other site elements;\n   * otherwise, we restore them.\n   */\n  const handleFullScreenChange = () => {\n    const isFullScreen = !!document.fullscreenElement;\n    toggleElementsVisibility(isFullScreen);\n  };\n\n  // Initialize Cesium Viewer and handle rotation controls\n  useEffect(() => {\n    // Set your Cesium Ion access token from environment variables\n    Cesium.Ion.defaultAccessToken = process.env.REACT_APP_CESIUM_ION_ACCESS_TOKEN;\n\n    // Listen for the 'fullscreenchange' event on the document\n    document.addEventListener('fullscreenchange', handleFullScreenChange);\n\n    // Initialize Cesium Viewer if it doesn't exist yet\n    if (globeRef.current && !viewerRef.current) {\n      try {\n        viewerRef.current = new Cesium.Viewer(globeRef.current, {\n          terrainProvider: Cesium.createWorldTerrain(), // High-resolution terrain\n          imageryProvider: new Cesium.IonImageryProvider({ assetId: 2 }), // Example asset ID\n          baseLayerPicker: false,\n          geocoder: false,\n          homeButton: false,\n          infoBox: false, // We'll handle info boxes manually\n          navigationHelpButton: false,\n          sceneModePicker: false,\n          timeline: false,\n          animation: false,\n          fullscreenButton: true, // Enable fullscreen\n          requestRenderMode: true,\n          maximumRenderTimeChange: Infinity,\n        });\n\n        // Set initial camera view (New York coordinates as example)\n        viewerRef.current.camera.setView({\n          destination: Cesium.Cartesian3.fromDegrees(\n            -74.0707383,\n            40.7117244,\n            10000000\n          ),\n          orientation: {\n            heading: Cesium.Math.toRadians(0),\n            pitch: Cesium.Math.toRadians(-90),\n            roll: 0.0,\n          },\n        });\n\n        // Continuous rotation\n        const rotateEarth = () => {\n          const spinRate = 0.01;\n          const delta = spinRate / 60; // 60 FPS assumption\n          viewerRef.current.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -delta);\n          animationIdRef.current = requestAnimationFrame(rotateEarth);\n        };\n\n        rotateEarth(); // Start rotation immediately\n\n        // Scene interactions to stop/start rotation on user actions\n        viewerRef.current.scene.screenSpaceCameraController.inertiaSpin = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaTranslate = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaZoom = 0;\n\n        const stopRotation = () => {\n          if (animationIdRef.current) {\n            cancelAnimationFrame(animationIdRef.current);\n            animationIdRef.current = null;\n            setIsRotating(false);\n          }\n        };\n\n        const startRotation = () => {\n          if (!animationIdRef.current) {\n            rotateEarth();\n            setIsRotating(true);\n          }\n        };\n\n        // Stop rotation on pointer down/wheel\n        viewerRef.current.canvas.addEventListener('pointerdown', stopRotation);\n        viewerRef.current.canvas.addEventListener('wheel', stopRotation, { passive: true });\n\n        // Resume rotation on pointer up/wheel end\n        viewerRef.current.canvas.addEventListener('pointerup', startRotation);\n        viewerRef.current.canvas.addEventListener('wheel', startRotation, {\n          passive: true,\n          capture: true,\n        });\n      } catch (error) {\n        console.error('Failed to initialize Cesium viewer:', error);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullScreenChange);\n      if (viewerRef.current) {\n        viewerRef.current.destroy();\n        viewerRef.current = null;\n      }\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n    };\n  }, [language]); // Added 'language' as a dependency to refetch location info on language change\n\n  // Use the custom hook to manage location info, passing the current language\n  const { locationInfo, loading, error } = useLocationInfo(\n    viewerRef.current,\n    Cesium,\n    reverseGeocode,\n    language // Pass the selected language\n  );\n\n  return (\n    <>\n      {/* Cesium Globe Container */}\n      <div\n        ref={globeRef}\n        id=\"cesiumContainer\"\n        style={{ height: '100vh', width: '100vw' }}\n      >\n        {/* Controls */}\n        <div className=\"controls-container\">\n          <div className=\"tabs\" role=\"tablist\" aria-label=\"Rotation Controls\">\n            <button\n              className={`tab-button ${isRotating ? 'active' : ''}`}\n              onClick={handleRotationToggle}\n              aria-selected={isRotating}\n              role=\"tab\"\n              aria-controls=\"start-rotation-panel\"\n              id=\"start-rotation-tab\"\n            >\n              {t(\"startRotation\")}\n            </button>\n            <button\n              className={`tab-button ${!isRotating ? 'active' : ''}`}\n              onClick={handleRotationToggle}\n              aria-selected={!isRotating}\n              role=\"tab\"\n              aria-controls=\"stop-rotation-panel\"\n              id=\"stop-rotation-tab\"\n            >\n              {t(\"stopRotation\")}\n            </button>\n          </div>\n        </div>\n\n        {/* Location Details Panel */}\n        <LocationInfoPanel\n          locationInfo={locationInfo}\n          loading={loading}\n          error={error}\n          translate={t}\n        />\n      </div>\n    </>\n  );\n};\n\nGlobe.propTypes = {\n  // Define prop types if necessary\n};\n\nexport default Globe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}