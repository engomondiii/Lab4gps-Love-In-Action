{"ast":null,"code":"/**\n * A utility for dynamically-generating a GLSL struct.\n *\n * @alias ShaderStruct\n * @constructor\n *\n * @see {@link ShaderBuilder}\n * @param {string} name The name of the struct as it will appear in the shader.\n * @example\n * // Generate the struct:\n * //\n * // struct Attributes\n * // {\n * //     vec3 position;\n * //     vec3 normal;\n * //     vec2 texCoord;\n * // };\n * const struct = new ShaderStruct(\"Attributes\");\n * struct.addField(\"vec3\", \"position\");\n * struct.addField(\"vec3\", \"normal\");\n * struct.addField(\"vec2\", \"texCoord\");\n * const generatedLines = struct.generateGlslLines();\n *\n * @private\n */\nfunction ShaderStruct(name) {\n  this.name = name;\n  this.fields = [];\n}\n\n/**\n * Add a field to the struct\n * @param {string} type The type of the struct field\n * @param {string} identifier The identifier of the struct field\n */\nShaderStruct.prototype.addField = function (type, identifier) {\n  const field = `    ${type} ${identifier};`;\n  this.fields.push(field);\n};\n\n/**\n * Generate a list of lines of GLSL code for use with {@link ShaderBuilder}\n * @return {string[]} The generated GLSL code.\n */\nShaderStruct.prototype.generateGlslLines = function () {\n  let fields = this.fields;\n  if (fields.length === 0) {\n    // GLSL requires structs to have at least one field\n    fields = [\"    float _empty;\"];\n  }\n  return [].concat(`struct ${this.name}`, \"{\", fields, \"};\");\n};\nexport default ShaderStruct;","map":{"version":3,"names":["ShaderStruct","name","fields","prototype","addField","type","identifier","field","push","generateGlslLines","length","concat"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/ShaderStruct.js"],"sourcesContent":["/**\n * A utility for dynamically-generating a GLSL struct.\n *\n * @alias ShaderStruct\n * @constructor\n *\n * @see {@link ShaderBuilder}\n * @param {string} name The name of the struct as it will appear in the shader.\n * @example\n * // Generate the struct:\n * //\n * // struct Attributes\n * // {\n * //     vec3 position;\n * //     vec3 normal;\n * //     vec2 texCoord;\n * // };\n * const struct = new ShaderStruct(\"Attributes\");\n * struct.addField(\"vec3\", \"position\");\n * struct.addField(\"vec3\", \"normal\");\n * struct.addField(\"vec2\", \"texCoord\");\n * const generatedLines = struct.generateGlslLines();\n *\n * @private\n */\nfunction ShaderStruct(name) {\n  this.name = name;\n  this.fields = [];\n}\n\n/**\n * Add a field to the struct\n * @param {string} type The type of the struct field\n * @param {string} identifier The identifier of the struct field\n */\nShaderStruct.prototype.addField = function (type, identifier) {\n  const field = `    ${type} ${identifier};`;\n  this.fields.push(field);\n};\n\n/**\n * Generate a list of lines of GLSL code for use with {@link ShaderBuilder}\n * @return {string[]} The generated GLSL code.\n */\nShaderStruct.prototype.generateGlslLines = function () {\n  let fields = this.fields;\n  if (fields.length === 0) {\n    // GLSL requires structs to have at least one field\n    fields = [\"    float _empty;\"];\n  }\n\n  return [].concat(`struct ${this.name}`, \"{\", fields, \"};\");\n};\n\nexport default ShaderStruct;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAYA,CAACC,IAAI,EAAE;EAC1B,IAAI,CAACA,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,MAAM,GAAG,EAAE;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACAF,YAAY,CAACG,SAAS,CAACC,QAAQ,GAAG,UAAUC,IAAI,EAAEC,UAAU,EAAE;EAC5D,MAAMC,KAAK,GAAG,OAAOF,IAAI,IAAIC,UAAU,GAAG;EAC1C,IAAI,CAACJ,MAAM,CAACM,IAAI,CAACD,KAAK,CAAC;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACAP,YAAY,CAACG,SAAS,CAACM,iBAAiB,GAAG,YAAY;EACrD,IAAIP,MAAM,GAAG,IAAI,CAACA,MAAM;EACxB,IAAIA,MAAM,CAACQ,MAAM,KAAK,CAAC,EAAE;IACvB;IACAR,MAAM,GAAG,CAAC,mBAAmB,CAAC;EAChC;EAEA,OAAO,EAAE,CAACS,MAAM,CAAC,UAAU,IAAI,CAACV,IAAI,EAAE,EAAE,GAAG,EAAEC,MAAM,EAAE,IAAI,CAAC;AAC5D,CAAC;AAED,eAAeF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}