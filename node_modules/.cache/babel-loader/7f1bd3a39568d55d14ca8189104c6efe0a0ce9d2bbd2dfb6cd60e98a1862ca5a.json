{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\n\n/**\n * This class represents a single entity in the <code>MetadataTable</code> owned by an implicit subtree. The entity is specified by the entityId.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles\n * </p>\n *\n * @param {MetadataTable} options.metadataTable The metadata table.\n * @param {MetadataClass} options.class The class that the metadata conforms to.\n * @param {number} options.entityId The ID of the entity the metadata belongs to.\n * @param {object} options.propertyTableJson The JSON that contains the property table of the entity.\n *\n * @alias ImplicitMetadataView\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction ImplicitMetadataView(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const metadataTable = options.metadataTable;\n  const metadataClass = options.class;\n  const entityId = options.entityId;\n  const propertyTableJson = options.propertyTableJson;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.metadataTable\", metadataTable);\n  Check.typeOf.object(\"options.class\", metadataClass);\n  Check.typeOf.number(\"options.entityId\", entityId);\n  Check.typeOf.object(\"options.propertyTableJson\", propertyTableJson);\n\n  //>>includeEnd('debug');\n\n  this._class = metadataClass;\n  this._metadataTable = metadataTable;\n  this._entityId = entityId;\n  this._extensions = propertyTableJson.extensions;\n  this._extras = propertyTableJson.extras;\n}\nObject.defineProperties(ImplicitMetadataView.prototype, {\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof ImplicitMetadataView.prototype\n   * @type {MetadataClass}\n   * @readonly\n   */\n  class: {\n    get: function () {\n      return this._class;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof ImplicitMetadataView.prototype\n   * @type {object}\n   * @readonly\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof ImplicitMetadataView.prototype\n   * @type {object}\n   * @readonly\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\n\n/**\n * Returns whether the metadata contains this property.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {boolean} Whether the tile has this property.\n * @private\n */\nImplicitMetadataView.prototype.hasProperty = function (propertyId) {\n  return this._metadataTable.hasProperty(propertyId);\n};\n\n/**\n * Returns whether the metadata contains a property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {boolean} Whether the tile has a property with the given semantic.\n * @private\n */\nImplicitMetadataView.prototype.hasPropertyBySemantic = function (semantic) {\n  return this._metadataTable.hasPropertyBySemantic(semantic);\n};\n\n/**\n * Returns an array of property IDs in the metadata table.\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The property IDs.\n * @private\n */\nImplicitMetadataView.prototype.getPropertyIds = function (results) {\n  return this._metadataTable.getPropertyIds(results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n * <p>\n * If the property is normalized the normalized value is returned.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this property.\n * @private\n */\nImplicitMetadataView.prototype.getProperty = function (propertyId) {\n  return this._metadataTable.getProperty(this._entityId, propertyId);\n};\n\n/**\n * Sets the value of the property with the given ID in the metadata table.\n * <p>\n * If the property is normalized a normalized value must be provided to this function.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nImplicitMetadataView.prototype.setProperty = function (propertyId, value) {\n  return this._metadataTable.setProperty(this._entityId, propertyId, value);\n};\n\n/**\n * Returns a copy of the value of the property with the given semantic in the metadata table.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this semantic.\n * @private\n */\nImplicitMetadataView.prototype.getPropertyBySemantic = function (semantic) {\n  return this._metadataTable.getPropertyBySemantic(this._entityId, semantic);\n};\n\n/**\n * Sets the value of the property with the given semantic in the metadata table.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\n\nImplicitMetadataView.prototype.setPropertyBySemantic = function (semantic, value) {\n  return this._metadataTable.setPropertyBySemantic(this._entityId, semantic, value);\n};\nexport default ImplicitMetadataView;","map":{"version":3,"names":["Check","defaultValue","ImplicitMetadataView","options","EMPTY_OBJECT","metadataTable","metadataClass","class","entityId","propertyTableJson","typeOf","object","number","_class","_metadataTable","_entityId","_extensions","extensions","_extras","extras","Object","defineProperties","prototype","get","hasProperty","propertyId","hasPropertyBySemantic","semantic","getPropertyIds","results","getProperty","setProperty","value","getPropertyBySemantic","setPropertyBySemantic"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ImplicitMetadataView.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\n\n/**\n * This class represents a single entity in the <code>MetadataTable</code> owned by an implicit subtree. The entity is specified by the entityId.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles\n * </p>\n *\n * @param {MetadataTable} options.metadataTable The metadata table.\n * @param {MetadataClass} options.class The class that the metadata conforms to.\n * @param {number} options.entityId The ID of the entity the metadata belongs to.\n * @param {object} options.propertyTableJson The JSON that contains the property table of the entity.\n *\n * @alias ImplicitMetadataView\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction ImplicitMetadataView(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const metadataTable = options.metadataTable;\n  const metadataClass = options.class;\n  const entityId = options.entityId;\n  const propertyTableJson = options.propertyTableJson;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.metadataTable\", metadataTable);\n  Check.typeOf.object(\"options.class\", metadataClass);\n  Check.typeOf.number(\"options.entityId\", entityId);\n  Check.typeOf.object(\"options.propertyTableJson\", propertyTableJson);\n\n  //>>includeEnd('debug');\n\n  this._class = metadataClass;\n  this._metadataTable = metadataTable;\n  this._entityId = entityId;\n\n  this._extensions = propertyTableJson.extensions;\n  this._extras = propertyTableJson.extras;\n}\n\nObject.defineProperties(ImplicitMetadataView.prototype, {\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof ImplicitMetadataView.prototype\n   * @type {MetadataClass}\n   * @readonly\n   */\n  class: {\n    get: function () {\n      return this._class;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof ImplicitMetadataView.prototype\n   * @type {object}\n   * @readonly\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof ImplicitMetadataView.prototype\n   * @type {object}\n   * @readonly\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\n/**\n * Returns whether the metadata contains this property.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {boolean} Whether the tile has this property.\n * @private\n */\nImplicitMetadataView.prototype.hasProperty = function (propertyId) {\n  return this._metadataTable.hasProperty(propertyId);\n};\n\n/**\n * Returns whether the metadata contains a property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {boolean} Whether the tile has a property with the given semantic.\n * @private\n */\nImplicitMetadataView.prototype.hasPropertyBySemantic = function (semantic) {\n  return this._metadataTable.hasPropertyBySemantic(semantic);\n};\n\n/**\n * Returns an array of property IDs in the metadata table.\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The property IDs.\n * @private\n */\nImplicitMetadataView.prototype.getPropertyIds = function (results) {\n  return this._metadataTable.getPropertyIds(results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n * <p>\n * If the property is normalized the normalized value is returned.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this property.\n * @private\n */\nImplicitMetadataView.prototype.getProperty = function (propertyId) {\n  return this._metadataTable.getProperty(this._entityId, propertyId);\n};\n\n/**\n * Sets the value of the property with the given ID in the metadata table.\n * <p>\n * If the property is normalized a normalized value must be provided to this function.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nImplicitMetadataView.prototype.setProperty = function (propertyId, value) {\n  return this._metadataTable.setProperty(this._entityId, propertyId, value);\n};\n\n/**\n * Returns a copy of the value of the property with the given semantic in the metadata table.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this semantic.\n * @private\n */\nImplicitMetadataView.prototype.getPropertyBySemantic = function (semantic) {\n  return this._metadataTable.getPropertyBySemantic(this._entityId, semantic);\n};\n\n/**\n * Sets the value of the property with the given semantic in the metadata table.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\n\nImplicitMetadataView.prototype.setPropertyBySemantic = function (\n  semantic,\n  value,\n) {\n  return this._metadataTable.setPropertyBySemantic(\n    this._entityId,\n    semantic,\n    value,\n  );\n};\n\nexport default ImplicitMetadataView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}