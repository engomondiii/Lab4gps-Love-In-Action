{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Globe/Globe.js\",\n  _s = $RefreshSig$();\n/* global Cesium */\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/Globe.css'; // Import the separate style file\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const globeRef = useRef(null);\n  const viewerRef = useRef(null);\n  const animationIdRef = useRef(null); // To store the animation frame ID\n\n  // Track whether the globe is currently rotating\n  const [isRotating, setIsRotating] = useState(true);\n\n  // Continuous rotation function\n  const rotateEarth = () => {\n    if (!viewerRef.current) return; // If viewer is not set up, do nothing\n    const spinRate = 0.01;\n    const delta = spinRate / 60; // Assuming ~60 FPS\n    viewerRef.current.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -delta);\n    animationIdRef.current = requestAnimationFrame(rotateEarth);\n  };\n  useEffect(() => {\n    Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJkMWY1MGUyNC0wNjFkLTQ1YWMtYTBhNi1mYTRkMTAzNWYzOGEiLCJpZCI6MjYzODA1LCJpYXQiOjE3MzQ2Nzk0ODd9.OvjRSddy3Mt1P1rOGIFKOQQcxIqTX2i7sM1Ha4s7_qs';\n    if (globeRef.current && !viewerRef.current) {\n      try {\n        // Viewer initialization\n        viewerRef.current = new Cesium.Viewer(globeRef.current, {\n          imageryProvider: new Cesium.IonImageryProvider({\n            assetId: 2\n          }),\n          baseLayerPicker: false,\n          geocoder: false,\n          homeButton: false,\n          infoBox: false,\n          navigationHelpButton: false,\n          sceneModePicker: false,\n          timeline: false,\n          animation: false,\n          requestRenderMode: true,\n          maximumRenderTimeChange: Infinity\n        });\n\n        // Set the initial top-down view\n        viewerRef.current.scene.camera.setView({\n          destination: Cesium.Cartesian3.fromDegrees(-74.0707383, 40.7117244, 10000000),\n          orientation: {\n            heading: Cesium.Math.toRadians(0),\n            pitch: Cesium.Math.toRadians(-90),\n            roll: 0.0\n          }\n        });\n\n        // If we start as rotating, begin rotation immediately\n        if (isRotating) {\n          rotateEarth();\n        }\n\n        // Configure scene interactions to stop rotation on user drag/zoom\n        viewerRef.current.scene.screenSpaceCameraController.inertiaSpin = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaTranslate = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaZoom = 0;\n        const stopRotation = () => {\n          if (animationIdRef.current) {\n            cancelAnimationFrame(animationIdRef.current);\n            animationIdRef.current = null;\n          }\n        };\n        const startRotation = () => {\n          // Only start if not running yet and user wants rotation\n          if (!animationIdRef.current && isRotating) {\n            rotateEarth();\n          }\n        };\n\n        // Stop rotation on pointer down/wheel\n        viewerRef.current.canvas.addEventListener('pointerdown', stopRotation);\n        viewerRef.current.canvas.addEventListener('wheel', stopRotation, {\n          passive: true\n        });\n\n        // Resume rotation on pointer up/wheel end only if user hasn't disabled rotation\n        viewerRef.current.canvas.addEventListener('pointerup', () => {\n          if (isRotating) {\n            startRotation();\n          }\n        });\n        viewerRef.current.canvas.addEventListener('wheel', () => {\n          if (isRotating) {\n            startRotation();\n          }\n        }, {\n          passive: true,\n          delay: 1000\n        });\n      } catch (error) {\n        console.error('Failed to initialize Cesium viewer:', error);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (viewerRef.current) {\n        viewerRef.current.destroy();\n        viewerRef.current = null;\n      }\n    };\n  }, [isRotating]); // Re-run effect if isRotating changes\n\n  // Whenever isRotating changes, apply or cancel rotation immediately\n  useEffect(() => {\n    if (!viewerRef.current) return;\n    if (isRotating) {\n      // Start rotation if not already running\n      if (!animationIdRef.current) {\n        rotateEarth();\n      }\n    } else {\n      // Stop rotation immediately\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n    }\n  }, [isRotating]);\n\n  // Button click toggles rotation state\n  const handleStopRotationClick = () => {\n    setIsRotating(!isRotating);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stop-rotation-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stop-rotation-button\",\n        onClick: handleStopRotationClick,\n        children: isRotating ? 'Stop Rotation' : 'Resume Rotation'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef,\n      id: \"cesiumContainer\",\n      style: {\n        height: \"100vh\",\n        width: \"100vw\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Globe, \"0mc50xO1PNqHdlvdQG8yEhH6d+M=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Globe","_s","globeRef","viewerRef","animationIdRef","isRotating","setIsRotating","rotateEarth","current","spinRate","delta","scene","camera","rotate","Cesium","Cartesian3","UNIT_Z","requestAnimationFrame","Ion","defaultAccessToken","Viewer","imageryProvider","IonImageryProvider","assetId","baseLayerPicker","geocoder","homeButton","infoBox","navigationHelpButton","sceneModePicker","timeline","animation","requestRenderMode","maximumRenderTimeChange","Infinity","setView","destination","fromDegrees","orientation","heading","Math","toRadians","pitch","roll","screenSpaceCameraController","inertiaSpin","inertiaTranslate","inertiaZoom","stopRotation","cancelAnimationFrame","startRotation","canvas","addEventListener","passive","delay","error","console","destroy","handleStopRotationClick","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","id","style","height","width","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Globe/Globe.js"],"sourcesContent":["/* global Cesium */\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/Globe.css'; // Import the separate style file\n\nconst Globe = () => {\n    const globeRef = useRef(null);\n    const viewerRef = useRef(null);\n    const animationIdRef = useRef(null);  // To store the animation frame ID\n\n    // Track whether the globe is currently rotating\n    const [isRotating, setIsRotating] = useState(true);\n\n    // Continuous rotation function\n    const rotateEarth = () => {\n        if (!viewerRef.current) return;  // If viewer is not set up, do nothing\n        const spinRate = 0.01;\n        const delta = spinRate / 60;  // Assuming ~60 FPS\n        viewerRef.current.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -delta);\n        animationIdRef.current = requestAnimationFrame(rotateEarth);\n    };\n\n    useEffect(() => {\n        Cesium.Ion.defaultAccessToken =\n            'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJkMWY1MGUyNC0wNjFkLTQ1YWMtYTBhNi1mYTRkMTAzNWYzOGEiLCJpZCI6MjYzODA1LCJpYXQiOjE3MzQ2Nzk0ODd9.OvjRSddy3Mt1P1rOGIFKOQQcxIqTX2i7sM1Ha4s7_qs';\n\n        if (globeRef.current && !viewerRef.current) {\n            try {\n                // Viewer initialization\n                viewerRef.current = new Cesium.Viewer(globeRef.current, {\n                    imageryProvider: new Cesium.IonImageryProvider({ assetId: 2 }),\n                    baseLayerPicker: false,\n                    geocoder: false,\n                    homeButton: false,\n                    infoBox: false,\n                    navigationHelpButton: false,\n                    sceneModePicker: false,\n                    timeline: false,\n                    animation: false,\n                    requestRenderMode: true,\n                    maximumRenderTimeChange: Infinity,\n                });\n\n                // Set the initial top-down view\n                viewerRef.current.scene.camera.setView({\n                    destination: Cesium.Cartesian3.fromDegrees(-74.0707383, 40.7117244, 10000000),\n                    orientation: {\n                        heading: Cesium.Math.toRadians(0),\n                        pitch: Cesium.Math.toRadians(-90),\n                        roll: 0.0\n                    }\n                });\n\n                // If we start as rotating, begin rotation immediately\n                if (isRotating) {\n                    rotateEarth();\n                }\n\n                // Configure scene interactions to stop rotation on user drag/zoom\n                viewerRef.current.scene.screenSpaceCameraController.inertiaSpin = 0;\n                viewerRef.current.scene.screenSpaceCameraController.inertiaTranslate = 0;\n                viewerRef.current.scene.screenSpaceCameraController.inertiaZoom = 0;\n\n                const stopRotation = () => {\n                    if (animationIdRef.current) {\n                        cancelAnimationFrame(animationIdRef.current);\n                        animationIdRef.current = null;\n                    }\n                };\n\n                const startRotation = () => {\n                    // Only start if not running yet and user wants rotation\n                    if (!animationIdRef.current && isRotating) {\n                        rotateEarth();\n                    }\n                };\n\n                // Stop rotation on pointer down/wheel\n                viewerRef.current.canvas.addEventListener('pointerdown', stopRotation);\n                viewerRef.current.canvas.addEventListener('wheel', stopRotation, { passive: true });\n\n                // Resume rotation on pointer up/wheel end only if user hasn't disabled rotation\n                viewerRef.current.canvas.addEventListener('pointerup', () => {\n                    if (isRotating) {\n                        startRotation();\n                    }\n                });\n                viewerRef.current.canvas.addEventListener('wheel', () => {\n                    if (isRotating) {\n                        startRotation();\n                    }\n                }, { passive: true, delay: 1000 });\n\n            } catch (error) {\n                console.error('Failed to initialize Cesium viewer:', error);\n            }\n        }\n\n        // Cleanup on unmount\n        return () => {\n            if (viewerRef.current) {\n                viewerRef.current.destroy();\n                viewerRef.current = null;\n            }\n        };\n    }, [isRotating]); // Re-run effect if isRotating changes\n\n    // Whenever isRotating changes, apply or cancel rotation immediately\n    useEffect(() => {\n        if (!viewerRef.current) return;\n\n        if (isRotating) {\n            // Start rotation if not already running\n            if (!animationIdRef.current) {\n                rotateEarth();\n            }\n        } else {\n            // Stop rotation immediately\n            if (animationIdRef.current) {\n                cancelAnimationFrame(animationIdRef.current);\n                animationIdRef.current = null;\n            }\n        }\n    }, [isRotating]);\n\n    // Button click toggles rotation state\n    const handleStopRotationClick = () => {\n        setIsRotating(!isRotating);\n    };\n\n    return (\n        <>\n            {/* Button to manually stop or resume rotation */}\n            <div className=\"stop-rotation-button-container\">\n                <button\n                    className=\"stop-rotation-button\"\n                    onClick={handleStopRotationClick}\n                >\n                    {isRotating ? 'Stop Rotation' : 'Resume Rotation'}\n                </button>\n            </div>\n\n            <div\n                ref={globeRef}\n                id=\"cesiumContainer\"\n                style={{ height: \"100vh\", width: \"100vw\" }}\n            />\n        </>\n    );\n};\n\nexport default Globe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}