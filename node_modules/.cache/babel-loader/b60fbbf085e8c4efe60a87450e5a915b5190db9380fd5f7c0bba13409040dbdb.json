{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport isLeapYear from \"./isLeapYear.js\";\nconst daysInYear = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n/**\n * Represents a Gregorian date in a more precise format than the JavaScript Date object.\n * In addition to submillisecond precision, this object can also represent leap seconds.\n * @alias GregorianDate\n * @constructor\n *\n * @param {number} [year] The year as a whole number.\n * @param {number} [month] The month as a whole number with range [1, 12].\n * @param {number} [day] The day of the month as a whole number starting at 1.\n * @param {number} [hour] The hour as a whole number with range [0, 23].\n * @param {number} [minute] The minute of the hour as a whole number with range [0, 59].\n * @param {number} [second] The second of the minute as a whole number with range [0, 60], with 60 representing a leap second.\n * @param {number} [millisecond] The millisecond of the second as a floating point number with range [0.0, 1000.0).\n * @param {boolean} [isLeapSecond] Whether this time is during a leap second.\n *\n * @see JulianDate#toGregorianDate\n */\nfunction GregorianDate(year, month, day, hour, minute, second, millisecond, isLeapSecond) {\n  const minimumYear = 1;\n  const minimumMonth = 1;\n  const minimumDay = 1;\n  const minimumHour = 0;\n  const minimumMinute = 0;\n  const minimumSecond = 0;\n  const minimumMillisecond = 0;\n  year = defaultValue(year, minimumYear);\n  month = defaultValue(month, minimumMonth);\n  day = defaultValue(day, minimumDay);\n  hour = defaultValue(hour, minimumHour);\n  minute = defaultValue(minute, minimumMinute);\n  second = defaultValue(second, minimumSecond);\n  millisecond = defaultValue(millisecond, minimumMillisecond);\n  isLeapSecond = defaultValue(isLeapSecond, false);\n  //>>includeStart('debug', pragmas.debug);\n  validateRange();\n  validateDate();\n  //>>includeEnd('debug');\n\n  /**\n   * Gets or sets the year as a whole number.\n   * @type {number}\n   */\n  this.year = year;\n  /**\n   * Gets or sets the month as a whole number with range [1, 12].\n   * @type {number}\n   */\n  this.month = month;\n  /**\n   * Gets or sets the day of the month as a whole number starting at 1.\n   * @type {number}\n   */\n  this.day = day;\n  /**\n   * Gets or sets the hour as a whole number with range [0, 23].\n   * @type {number}\n   */\n  this.hour = hour;\n  /**\n   * Gets or sets the minute of the hour as a whole number with range [0, 59].\n   * @type {number}\n   */\n  this.minute = minute;\n  /**\n   * Gets or sets the second of the minute as a whole number with range [0, 60], with 60 representing a leap second.\n   * @type {number}\n   */\n  this.second = second;\n  /**\n   * Gets or sets the millisecond of the second as a floating point number with range [0.0, 1000.0).\n   * @type {number}\n   */\n  this.millisecond = millisecond;\n  /**\n   * Gets or sets whether this time is during a leap second.\n   * @type {boolean}\n   */\n  this.isLeapSecond = isLeapSecond;\n  function validateRange() {\n    const maximumYear = 9999;\n    const maximumMonth = 12;\n    const maximumDay = 31;\n    const maximumHour = 23;\n    const maximumMinute = 59;\n    const maximumSecond = 59;\n    const excludedMaximumMilisecond = 1000;\n    Check.typeOf.number.greaterThanOrEquals(\"Year\", year, minimumYear);\n    Check.typeOf.number.lessThanOrEquals(\"Year\", year, maximumYear);\n    Check.typeOf.number.greaterThanOrEquals(\"Month\", month, minimumMonth);\n    Check.typeOf.number.lessThanOrEquals(\"Month\", month, maximumMonth);\n    Check.typeOf.number.greaterThanOrEquals(\"Day\", day, minimumDay);\n    Check.typeOf.number.lessThanOrEquals(\"Day\", day, maximumDay);\n    Check.typeOf.number.greaterThanOrEquals(\"Hour\", hour, minimumHour);\n    Check.typeOf.number.lessThanOrEquals(\"Hour\", hour, maximumHour);\n    Check.typeOf.number.greaterThanOrEquals(\"Minute\", minute, minimumMinute);\n    Check.typeOf.number.lessThanOrEquals(\"Minute\", minute, maximumMinute);\n    Check.typeOf.bool(\"IsLeapSecond\", isLeapSecond);\n    Check.typeOf.number.greaterThanOrEquals(\"Second\", second, minimumSecond);\n    Check.typeOf.number.lessThanOrEquals(\"Second\", second, isLeapSecond ? maximumSecond + 1 : maximumSecond);\n    Check.typeOf.number.greaterThanOrEquals(\"Millisecond\", millisecond, minimumMillisecond);\n    Check.typeOf.number.lessThan(\"Millisecond\", millisecond, excludedMaximumMilisecond);\n  }\n\n  // Javascript date object supports only dates greater than 1901. Thus validating with custom logic\n  function validateDate() {\n    const daysInMonth = month === 2 && isLeapYear(year) ? daysInYear[month - 1] + 1 : daysInYear[month - 1];\n    if (day > daysInMonth) {\n      throw new DeveloperError(\"Month and Day represents invalid date\");\n    }\n  }\n}\nexport default GregorianDate;","map":{"version":3,"names":["Check","defaultValue","DeveloperError","isLeapYear","daysInYear","GregorianDate","year","month","day","hour","minute","second","millisecond","isLeapSecond","minimumYear","minimumMonth","minimumDay","minimumHour","minimumMinute","minimumSecond","minimumMillisecond","validateRange","validateDate","maximumYear","maximumMonth","maximumDay","maximumHour","maximumMinute","maximumSecond","excludedMaximumMilisecond","typeOf","number","greaterThanOrEquals","lessThanOrEquals","bool","lessThan","daysInMonth"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/GregorianDate.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport isLeapYear from \"./isLeapYear.js\";\n\nconst daysInYear = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n/**\n * Represents a Gregorian date in a more precise format than the JavaScript Date object.\n * In addition to submillisecond precision, this object can also represent leap seconds.\n * @alias GregorianDate\n * @constructor\n *\n * @param {number} [year] The year as a whole number.\n * @param {number} [month] The month as a whole number with range [1, 12].\n * @param {number} [day] The day of the month as a whole number starting at 1.\n * @param {number} [hour] The hour as a whole number with range [0, 23].\n * @param {number} [minute] The minute of the hour as a whole number with range [0, 59].\n * @param {number} [second] The second of the minute as a whole number with range [0, 60], with 60 representing a leap second.\n * @param {number} [millisecond] The millisecond of the second as a floating point number with range [0.0, 1000.0).\n * @param {boolean} [isLeapSecond] Whether this time is during a leap second.\n *\n * @see JulianDate#toGregorianDate\n */\nfunction GregorianDate(\n  year,\n  month,\n  day,\n  hour,\n  minute,\n  second,\n  millisecond,\n  isLeapSecond,\n) {\n  const minimumYear = 1;\n  const minimumMonth = 1;\n  const minimumDay = 1;\n  const minimumHour = 0;\n  const minimumMinute = 0;\n  const minimumSecond = 0;\n  const minimumMillisecond = 0;\n\n  year = defaultValue(year, minimumYear);\n  month = defaultValue(month, minimumMonth);\n  day = defaultValue(day, minimumDay);\n  hour = defaultValue(hour, minimumHour);\n  minute = defaultValue(minute, minimumMinute);\n  second = defaultValue(second, minimumSecond);\n  millisecond = defaultValue(millisecond, minimumMillisecond);\n  isLeapSecond = defaultValue(isLeapSecond, false);\n  //>>includeStart('debug', pragmas.debug);\n  validateRange();\n  validateDate();\n  //>>includeEnd('debug');\n\n  /**\n   * Gets or sets the year as a whole number.\n   * @type {number}\n   */\n  this.year = year;\n  /**\n   * Gets or sets the month as a whole number with range [1, 12].\n   * @type {number}\n   */\n  this.month = month;\n  /**\n   * Gets or sets the day of the month as a whole number starting at 1.\n   * @type {number}\n   */\n  this.day = day;\n  /**\n   * Gets or sets the hour as a whole number with range [0, 23].\n   * @type {number}\n   */\n  this.hour = hour;\n  /**\n   * Gets or sets the minute of the hour as a whole number with range [0, 59].\n   * @type {number}\n   */\n  this.minute = minute;\n  /**\n   * Gets or sets the second of the minute as a whole number with range [0, 60], with 60 representing a leap second.\n   * @type {number}\n   */\n  this.second = second;\n  /**\n   * Gets or sets the millisecond of the second as a floating point number with range [0.0, 1000.0).\n   * @type {number}\n   */\n  this.millisecond = millisecond;\n  /**\n   * Gets or sets whether this time is during a leap second.\n   * @type {boolean}\n   */\n  this.isLeapSecond = isLeapSecond;\n\n  function validateRange() {\n    const maximumYear = 9999;\n    const maximumMonth = 12;\n    const maximumDay = 31;\n    const maximumHour = 23;\n    const maximumMinute = 59;\n    const maximumSecond = 59;\n    const excludedMaximumMilisecond = 1000;\n\n    Check.typeOf.number.greaterThanOrEquals(\"Year\", year, minimumYear);\n    Check.typeOf.number.lessThanOrEquals(\"Year\", year, maximumYear);\n\n    Check.typeOf.number.greaterThanOrEquals(\"Month\", month, minimumMonth);\n    Check.typeOf.number.lessThanOrEquals(\"Month\", month, maximumMonth);\n\n    Check.typeOf.number.greaterThanOrEquals(\"Day\", day, minimumDay);\n    Check.typeOf.number.lessThanOrEquals(\"Day\", day, maximumDay);\n\n    Check.typeOf.number.greaterThanOrEquals(\"Hour\", hour, minimumHour);\n    Check.typeOf.number.lessThanOrEquals(\"Hour\", hour, maximumHour);\n\n    Check.typeOf.number.greaterThanOrEquals(\"Minute\", minute, minimumMinute);\n    Check.typeOf.number.lessThanOrEquals(\"Minute\", minute, maximumMinute);\n\n    Check.typeOf.bool(\"IsLeapSecond\", isLeapSecond);\n\n    Check.typeOf.number.greaterThanOrEquals(\"Second\", second, minimumSecond);\n    Check.typeOf.number.lessThanOrEquals(\n      \"Second\",\n      second,\n      isLeapSecond ? maximumSecond + 1 : maximumSecond,\n    );\n\n    Check.typeOf.number.greaterThanOrEquals(\n      \"Millisecond\",\n      millisecond,\n      minimumMillisecond,\n    );\n    Check.typeOf.number.lessThan(\n      \"Millisecond\",\n      millisecond,\n      excludedMaximumMilisecond,\n    );\n  }\n\n  // Javascript date object supports only dates greater than 1901. Thus validating with custom logic\n  function validateDate() {\n    const daysInMonth =\n      month === 2 && isLeapYear(year)\n        ? daysInYear[month - 1] + 1\n        : daysInYear[month - 1];\n\n    if (day > daysInMonth) {\n      throw new DeveloperError(\"Month and Day represents invalid date\");\n    }\n  }\n}\nexport default GregorianDate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}