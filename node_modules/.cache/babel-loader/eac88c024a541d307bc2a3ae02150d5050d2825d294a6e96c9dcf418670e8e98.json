{"ast":null,"code":"import Uri from \"urijs\";\nimport Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ion from \"./Ion.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\n/**\n * A {@link Resource} instance that encapsulates Cesium ion asset access.\n * This object is normally not instantiated directly, use {@link IonResource.fromAssetId}.\n *\n * @alias IonResource\n * @constructor\n * @augments Resource\n *\n * @param {object} endpoint The result of the Cesium ion asset endpoint service.\n * @param {Resource} endpointResource The resource used to retrieve the endpoint.\n *\n * @see Ion\n * @see IonImageryProvider\n * @see createWorldTerrain\n * @see https://cesium.com\n */\nfunction IonResource(endpoint, endpointResource) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"endpoint\", endpoint);\n  Check.defined(\"endpointResource\", endpointResource);\n  //>>includeEnd('debug');\n\n  let options;\n  const externalType = endpoint.externalType;\n  const isExternal = defined(externalType);\n  if (!isExternal) {\n    options = {\n      url: endpoint.url,\n      retryAttempts: 1,\n      retryCallback: retryCallback\n    };\n  } else if (externalType === \"3DTILES\" || externalType === \"STK_TERRAIN_SERVER\") {\n    // 3D Tiles and STK Terrain Server external assets can still be represented as an IonResource\n    options = {\n      url: endpoint.options.url\n    };\n  } else {\n    //External imagery assets have additional configuration that can't be represented as a Resource\n    throw new RuntimeError(\"Ion.createResource does not support external imagery assets; use IonImageryProvider instead.\");\n  }\n  Resource.call(this, options);\n\n  // The asset endpoint data returned from ion.\n  this._ionEndpoint = endpoint;\n  this._ionEndpointDomain = isExternal ? undefined : new Uri(endpoint.url).authority();\n\n  // The endpoint resource to fetch when a new token is needed\n  this._ionEndpointResource = endpointResource;\n\n  // The primary IonResource from which an instance is derived\n  this._ionRoot = undefined;\n\n  // Shared promise for endpooint requests amd credits (only ever set on the root request)\n  this._pendingPromise = undefined;\n  this._credits = undefined;\n  this._isExternal = isExternal;\n}\nif (defined(Object.create)) {\n  IonResource.prototype = Object.create(Resource.prototype);\n  IonResource.prototype.constructor = IonResource;\n}\n\n/**\n * Asynchronously creates an instance.\n *\n * @param {number} assetId The Cesium ion asset id.\n * @param {object} [options] An object with the following properties:\n * @param {string} [options.accessToken=Ion.defaultAccessToken] The access token to use.\n * @param {string|Resource} [options.server=Ion.defaultServer] The resource to the Cesium ion API server.\n * @returns {Promise<IonResource>} A Promise to am instance representing the Cesium ion Asset.\n *\n * @example\n * // Load a Cesium3DTileset with asset ID of 124624234\n * try {\n *   const resource = await Cesium.IonResource.fromAssetId(124624234);\n *   const tileset = await Cesium.Cesium3DTileset.fromUrl(resource);\n *   scene.primitives.add(tileset);\n * } catch (error) {\n *   console.error(`Error creating tileset: ${error}`);\n * }\n *\n * @example\n * //Load a CZML file with asset ID of 10890\n * Cesium.IonResource.fromAssetId(10890)\n *   .then(function (resource) {\n *     viewer.dataSources.add(Cesium.CzmlDataSource.load(resource));\n *   });\n */\nIonResource.fromAssetId = function (assetId, options) {\n  const endpointResource = IonResource._createEndpointResource(assetId, options);\n  return endpointResource.fetchJson().then(function (endpoint) {\n    return new IonResource(endpoint, endpointResource);\n  });\n};\nObject.defineProperties(IonResource.prototype, {\n  /**\n   * Gets the credits required for attribution of the asset.\n   *\n   * @memberof IonResource.prototype\n   * @type {Credit[]}\n   * @readonly\n   */\n  credits: {\n    get: function () {\n      // Only we're not the root, return its credits;\n      if (defined(this._ionRoot)) {\n        return this._ionRoot.credits;\n      }\n\n      // We are the root\n      if (defined(this._credits)) {\n        return this._credits;\n      }\n      this._credits = IonResource.getCreditsFromEndpoint(this._ionEndpoint, this._ionEndpointResource);\n      return this._credits;\n    }\n  }\n});\n\n/** @private */\nIonResource.getCreditsFromEndpoint = function (endpoint, endpointResource) {\n  const credits = endpoint.attributions.map(Credit.getIonCredit);\n  const defaultTokenCredit = Ion.getDefaultTokenCredit(endpointResource.queryParameters.access_token);\n  if (defined(defaultTokenCredit)) {\n    credits.push(Credit.clone(defaultTokenCredit));\n  }\n  return credits;\n};\n\n/** @inheritdoc */\nIonResource.prototype.clone = function (result) {\n  // We always want to use the root's information because it's the most up-to-date\n  const ionRoot = defaultValue(this._ionRoot, this);\n  if (!defined(result)) {\n    result = new IonResource(ionRoot._ionEndpoint, ionRoot._ionEndpointResource);\n  }\n  result = Resource.prototype.clone.call(this, result);\n  result._ionRoot = ionRoot;\n  result._isExternal = this._isExternal;\n  return result;\n};\nIonResource.prototype.fetchImage = function (options) {\n  if (!this._isExternal) {\n    const userOptions = options;\n    options = {\n      preferBlob: true\n    };\n    if (defined(userOptions)) {\n      options.flipY = userOptions.flipY;\n      options.preferImageBitmap = userOptions.preferImageBitmap;\n    }\n  }\n  return Resource.prototype.fetchImage.call(this, options);\n};\nIonResource.prototype._makeRequest = function (options) {\n  // Don't send ion access token to non-ion servers.\n  if (this._isExternal || new Uri(this.url).authority() !== this._ionEndpointDomain) {\n    return Resource.prototype._makeRequest.call(this, options);\n  }\n  if (!defined(options.headers)) {\n    options.headers = {};\n  }\n  options.headers.Authorization = `Bearer ${this._ionEndpoint.accessToken}`;\n  options.headers[\"X-Cesium-Client\"] = \"CesiumJS\";\n  /* global CESIUM_VERSION */\n  if (typeof CESIUM_VERSION !== \"undefined\") {\n    options.headers[\"X-Cesium-Client-Version\"] = CESIUM_VERSION;\n  }\n  return Resource.prototype._makeRequest.call(this, options);\n};\n\n/**\n * @private\n */\nIonResource._createEndpointResource = function (assetId, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"assetId\", assetId);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let server = defaultValue(options.server, Ion.defaultServer);\n  const accessToken = defaultValue(options.accessToken, Ion.defaultAccessToken);\n  server = Resource.createIfNeeded(server);\n  const resourceOptions = {\n    url: `v1/assets/${assetId}/endpoint`\n  };\n  if (defined(accessToken)) {\n    resourceOptions.queryParameters = {\n      access_token: accessToken\n    };\n  }\n  return server.getDerivedResource(resourceOptions);\n};\nfunction retryCallback(that, error) {\n  const ionRoot = defaultValue(that._ionRoot, that);\n  const endpointResource = ionRoot._ionEndpointResource;\n\n  // Image is not available in worker threads, so this avoids\n  // a ReferenceError\n  const imageDefined = typeof Image !== \"undefined\";\n\n  // We only want to retry in the case of invalid credentials (401) or image\n  // requests(since Image failures can not provide a status code)\n  if (!defined(error) || error.statusCode !== 401 && !(imageDefined && error.target instanceof Image)) {\n    return Promise.resolve(false);\n  }\n\n  // We use a shared pending promise for all derived assets, since they share\n  // a common access_token.  If we're already requesting a new token for this\n  // asset, we wait on the same promise.\n  if (!defined(ionRoot._pendingPromise)) {\n    ionRoot._pendingPromise = endpointResource.fetchJson().then(function (newEndpoint) {\n      //Set the token for root resource so new derived resources automatically pick it up\n      ionRoot._ionEndpoint = newEndpoint;\n      return newEndpoint;\n    }).finally(function (newEndpoint) {\n      // Pass or fail, we're done with this promise, the next failure should use a new one.\n      ionRoot._pendingPromise = undefined;\n      return newEndpoint;\n    });\n  }\n  return ionRoot._pendingPromise.then(function (newEndpoint) {\n    // Set the new token and endpoint for this resource\n    that._ionEndpoint = newEndpoint;\n    return true;\n  });\n}\nexport default IonResource;","map":{"version":3,"names":["Uri","Check","Credit","defaultValue","defined","Ion","Resource","RuntimeError","IonResource","endpoint","endpointResource","options","externalType","isExternal","url","retryAttempts","retryCallback","call","_ionEndpoint","_ionEndpointDomain","undefined","authority","_ionEndpointResource","_ionRoot","_pendingPromise","_credits","_isExternal","Object","create","prototype","constructor","fromAssetId","assetId","_createEndpointResource","fetchJson","then","defineProperties","credits","get","getCreditsFromEndpoint","attributions","map","getIonCredit","defaultTokenCredit","getDefaultTokenCredit","queryParameters","access_token","push","clone","result","ionRoot","fetchImage","userOptions","preferBlob","flipY","preferImageBitmap","_makeRequest","headers","Authorization","accessToken","CESIUM_VERSION","EMPTY_OBJECT","server","defaultServer","defaultAccessToken","createIfNeeded","resourceOptions","getDerivedResource","that","error","imageDefined","Image","statusCode","target","Promise","resolve","newEndpoint","finally"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/IonResource.js"],"sourcesContent":["import Uri from \"urijs\";\nimport Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ion from \"./Ion.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\n/**\n * A {@link Resource} instance that encapsulates Cesium ion asset access.\n * This object is normally not instantiated directly, use {@link IonResource.fromAssetId}.\n *\n * @alias IonResource\n * @constructor\n * @augments Resource\n *\n * @param {object} endpoint The result of the Cesium ion asset endpoint service.\n * @param {Resource} endpointResource The resource used to retrieve the endpoint.\n *\n * @see Ion\n * @see IonImageryProvider\n * @see createWorldTerrain\n * @see https://cesium.com\n */\nfunction IonResource(endpoint, endpointResource) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"endpoint\", endpoint);\n  Check.defined(\"endpointResource\", endpointResource);\n  //>>includeEnd('debug');\n\n  let options;\n  const externalType = endpoint.externalType;\n  const isExternal = defined(externalType);\n\n  if (!isExternal) {\n    options = {\n      url: endpoint.url,\n      retryAttempts: 1,\n      retryCallback: retryCallback,\n    };\n  } else if (\n    externalType === \"3DTILES\" ||\n    externalType === \"STK_TERRAIN_SERVER\"\n  ) {\n    // 3D Tiles and STK Terrain Server external assets can still be represented as an IonResource\n    options = { url: endpoint.options.url };\n  } else {\n    //External imagery assets have additional configuration that can't be represented as a Resource\n    throw new RuntimeError(\n      \"Ion.createResource does not support external imagery assets; use IonImageryProvider instead.\",\n    );\n  }\n\n  Resource.call(this, options);\n\n  // The asset endpoint data returned from ion.\n  this._ionEndpoint = endpoint;\n  this._ionEndpointDomain = isExternal\n    ? undefined\n    : new Uri(endpoint.url).authority();\n\n  // The endpoint resource to fetch when a new token is needed\n  this._ionEndpointResource = endpointResource;\n\n  // The primary IonResource from which an instance is derived\n  this._ionRoot = undefined;\n\n  // Shared promise for endpooint requests amd credits (only ever set on the root request)\n  this._pendingPromise = undefined;\n  this._credits = undefined;\n  this._isExternal = isExternal;\n}\n\nif (defined(Object.create)) {\n  IonResource.prototype = Object.create(Resource.prototype);\n  IonResource.prototype.constructor = IonResource;\n}\n\n/**\n * Asynchronously creates an instance.\n *\n * @param {number} assetId The Cesium ion asset id.\n * @param {object} [options] An object with the following properties:\n * @param {string} [options.accessToken=Ion.defaultAccessToken] The access token to use.\n * @param {string|Resource} [options.server=Ion.defaultServer] The resource to the Cesium ion API server.\n * @returns {Promise<IonResource>} A Promise to am instance representing the Cesium ion Asset.\n *\n * @example\n * // Load a Cesium3DTileset with asset ID of 124624234\n * try {\n *   const resource = await Cesium.IonResource.fromAssetId(124624234);\n *   const tileset = await Cesium.Cesium3DTileset.fromUrl(resource);\n *   scene.primitives.add(tileset);\n * } catch (error) {\n *   console.error(`Error creating tileset: ${error}`);\n * }\n *\n * @example\n * //Load a CZML file with asset ID of 10890\n * Cesium.IonResource.fromAssetId(10890)\n *   .then(function (resource) {\n *     viewer.dataSources.add(Cesium.CzmlDataSource.load(resource));\n *   });\n */\nIonResource.fromAssetId = function (assetId, options) {\n  const endpointResource = IonResource._createEndpointResource(\n    assetId,\n    options,\n  );\n\n  return endpointResource.fetchJson().then(function (endpoint) {\n    return new IonResource(endpoint, endpointResource);\n  });\n};\n\nObject.defineProperties(IonResource.prototype, {\n  /**\n   * Gets the credits required for attribution of the asset.\n   *\n   * @memberof IonResource.prototype\n   * @type {Credit[]}\n   * @readonly\n   */\n  credits: {\n    get: function () {\n      // Only we're not the root, return its credits;\n      if (defined(this._ionRoot)) {\n        return this._ionRoot.credits;\n      }\n\n      // We are the root\n      if (defined(this._credits)) {\n        return this._credits;\n      }\n\n      this._credits = IonResource.getCreditsFromEndpoint(\n        this._ionEndpoint,\n        this._ionEndpointResource,\n      );\n\n      return this._credits;\n    },\n  },\n});\n\n/** @private */\nIonResource.getCreditsFromEndpoint = function (endpoint, endpointResource) {\n  const credits = endpoint.attributions.map(Credit.getIonCredit);\n  const defaultTokenCredit = Ion.getDefaultTokenCredit(\n    endpointResource.queryParameters.access_token,\n  );\n  if (defined(defaultTokenCredit)) {\n    credits.push(Credit.clone(defaultTokenCredit));\n  }\n  return credits;\n};\n\n/** @inheritdoc */\nIonResource.prototype.clone = function (result) {\n  // We always want to use the root's information because it's the most up-to-date\n  const ionRoot = defaultValue(this._ionRoot, this);\n\n  if (!defined(result)) {\n    result = new IonResource(\n      ionRoot._ionEndpoint,\n      ionRoot._ionEndpointResource,\n    );\n  }\n\n  result = Resource.prototype.clone.call(this, result);\n  result._ionRoot = ionRoot;\n  result._isExternal = this._isExternal;\n\n  return result;\n};\n\nIonResource.prototype.fetchImage = function (options) {\n  if (!this._isExternal) {\n    const userOptions = options;\n    options = {\n      preferBlob: true,\n    };\n    if (defined(userOptions)) {\n      options.flipY = userOptions.flipY;\n      options.preferImageBitmap = userOptions.preferImageBitmap;\n    }\n  }\n\n  return Resource.prototype.fetchImage.call(this, options);\n};\n\nIonResource.prototype._makeRequest = function (options) {\n  // Don't send ion access token to non-ion servers.\n  if (\n    this._isExternal ||\n    new Uri(this.url).authority() !== this._ionEndpointDomain\n  ) {\n    return Resource.prototype._makeRequest.call(this, options);\n  }\n\n  if (!defined(options.headers)) {\n    options.headers = {};\n  }\n  options.headers.Authorization = `Bearer ${this._ionEndpoint.accessToken}`;\n  options.headers[\"X-Cesium-Client\"] = \"CesiumJS\";\n  /* global CESIUM_VERSION */\n  if (typeof CESIUM_VERSION !== \"undefined\") {\n    options.headers[\"X-Cesium-Client-Version\"] = CESIUM_VERSION;\n  }\n\n  return Resource.prototype._makeRequest.call(this, options);\n};\n\n/**\n * @private\n */\nIonResource._createEndpointResource = function (assetId, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"assetId\", assetId);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let server = defaultValue(options.server, Ion.defaultServer);\n  const accessToken = defaultValue(options.accessToken, Ion.defaultAccessToken);\n  server = Resource.createIfNeeded(server);\n\n  const resourceOptions = {\n    url: `v1/assets/${assetId}/endpoint`,\n  };\n\n  if (defined(accessToken)) {\n    resourceOptions.queryParameters = { access_token: accessToken };\n  }\n\n  return server.getDerivedResource(resourceOptions);\n};\n\nfunction retryCallback(that, error) {\n  const ionRoot = defaultValue(that._ionRoot, that);\n  const endpointResource = ionRoot._ionEndpointResource;\n\n  // Image is not available in worker threads, so this avoids\n  // a ReferenceError\n  const imageDefined = typeof Image !== \"undefined\";\n\n  // We only want to retry in the case of invalid credentials (401) or image\n  // requests(since Image failures can not provide a status code)\n  if (\n    !defined(error) ||\n    (error.statusCode !== 401 &&\n      !(imageDefined && error.target instanceof Image))\n  ) {\n    return Promise.resolve(false);\n  }\n\n  // We use a shared pending promise for all derived assets, since they share\n  // a common access_token.  If we're already requesting a new token for this\n  // asset, we wait on the same promise.\n  if (!defined(ionRoot._pendingPromise)) {\n    ionRoot._pendingPromise = endpointResource\n      .fetchJson()\n      .then(function (newEndpoint) {\n        //Set the token for root resource so new derived resources automatically pick it up\n        ionRoot._ionEndpoint = newEndpoint;\n        return newEndpoint;\n      })\n      .finally(function (newEndpoint) {\n        // Pass or fail, we're done with this promise, the next failure should use a new one.\n        ionRoot._pendingPromise = undefined;\n        return newEndpoint;\n      });\n  }\n\n  return ionRoot._pendingPromise.then(function (newEndpoint) {\n    // Set the new token and endpoint for this resource\n    that._ionEndpoint = newEndpoint;\n    return true;\n  });\n}\nexport default IonResource;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}