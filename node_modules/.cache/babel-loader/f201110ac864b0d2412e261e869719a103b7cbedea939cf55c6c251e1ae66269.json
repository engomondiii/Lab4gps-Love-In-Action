{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport Resource from \"../Core/Resource.js\";\nimport HeightReference, { isHeightReferenceRelative } from \"./HeightReference.js\";\nimport HorizontalOrigin from \"./HorizontalOrigin.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\nimport VerticalOrigin from \"./VerticalOrigin.js\";\nimport SplitDirection from \"./SplitDirection.js\";\n\n/**\n * @typedef {object} Billboard.ConstructorOptions\n *\n * Initialization options for the first param of Billboard constructor\n *\n * @property {Cartesian3} position The cartesian position of the billboard.\n * @property {*} [id] A user-defined object to return when the billboard is picked with {@link Scene#pick}.\n * @property {boolean} [show=true] Determines if this billboard will be shown.\n * @property {string | HTMLCanvasElement} [image] A loaded HTMLImageElement, ImageData, or a url to an image to use for the billboard.\n * @property {number} [scale=1.0] A number specifying the uniform scale that is multiplied with the billboard's image size in pixels.\n * @property {Cartesian2} [pixelOffset=Cartesian2.ZERO] A {@link Cartesian2} Specifying the pixel offset in screen space from the origin of this billboard.\n * @property {Cartesian3} [eyeOffset=Cartesian3.ZERO] A {@link Cartesian3} Specifying the 3D Cartesian offset applied to this billboard in eye coordinates.\n * @property {HorizontalOrigin} [horizontalOrigin=HorizontalOrigin.CENTER] A {@link HorizontalOrigin} Specifying the horizontal origin of this billboard.\n * @property {VerticalOrigin} [verticalOrigin=VerticalOrigin.CENTER] A {@link VerticalOrigin} Specifying the vertical origin of this billboard.\n * @property {HeightReference} [heightReference=HeightReference.NONE] A {@link HeightReference} Specifying the height reference of this billboard.\n * @property {Color} [color=Color.WHITE] A {@link Color} Specifying the color that is multiplied with the billboard's texture.\n * @property {number} [rotation=0] A number specifying the rotation angle in radians.\n * @property {Cartesian3} [alignedAxis=Cartesian3.ZERO] A {@link Cartesian3} Specifying the aligned axis in world space.\n * @property {boolean} [sizeInMeters] A boolean specifying if the billboard size is in meters or pixels.\n * @property {number} [width] A number specifying the width of the billboard. If undefined, the image width will be used.\n * @property {number} [height] A number specifying the height of the billboard. If undefined, the image height will be used.\n * @property {NearFarScalar} [scaleByDistance] A {@link NearFarScalar} Specifying near and far scaling properties of a Billboard based on the billboard's distance from the camera.\n * @property {NearFarScalar} [translucencyByDistance] A {@link NearFarScalar} Specifying near and far translucency properties of a Billboard based on the billboard's distance from the camera.\n * @property {NearFarScalar} [pixelOffsetScaleByDistance] A {@link NearFarScalar} Specifying near and far pixel offset scaling properties of a Billboard based on the billboard's distance from the camera.\n * @property {BoundingRectangle} [imageSubRegion] A {@link BoundingRectangle} Specifying the sub-region of the image to use for the billboard, rather than the entire image.\n * @property {DistanceDisplayCondition} [distanceDisplayCondition] A {@link DistanceDisplayCondition} Specifying the distance from the camera at which this billboard will be displayed.\n * @property {number} [disableDepthTestDistance] A number specifying the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n * @property {SplitDirection} [splitDirection] A {@link SplitDirection} Specifying the split property of the billboard.\n */\n\n/**\n * <div class=\"notice\">\n * A billboard is created and its initial\n * properties are set by calling {@link BillboardCollection#add}. Do not call the constructor directly.\n * </div>\n * A viewport-aligned image positioned in the 3D scene, that is created\n * and rendered using a {@link BillboardCollection}.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n *\n * @alias Billboard\n *\n * @performance Reading a property, e.g., {@link Billboard#show}, is constant time.\n * Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link BillboardCollection#update} is called.  The per-billboard traffic is\n * the same regardless of how many properties were updated.  If most billboards in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link BillboardCollection#removeAll}\n * and add new billboards instead of modifying each one.\n *\n * @exception {DeveloperError} scaleByDistance.far must be greater than scaleByDistance.near\n * @exception {DeveloperError} translucencyByDistance.far must be greater than translucencyByDistance.near\n * @exception {DeveloperError} pixelOffsetScaleByDistance.far must be greater than pixelOffsetScaleByDistance.near\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @see BillboardCollection\n * @see BillboardCollection#add\n * @see Label\n *\n * @internalConstructor\n * @class\n *\n * @param {Billboard.ConstructorOptions} options Object describing initialization options\n * @param {BillboardCollection} billboardCollection Instance of BillboardCollection\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n */\nfunction Billboard(options, billboardCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(options.disableDepthTestDistance) && options.disableDepthTestDistance < 0.0) {\n    throw new DeveloperError(\"disableDepthTestDistance must be greater than or equal to 0.0.\");\n  }\n  //>>includeEnd('debug');\n\n  let translucencyByDistance = options.translucencyByDistance;\n  let pixelOffsetScaleByDistance = options.pixelOffsetScaleByDistance;\n  let scaleByDistance = options.scaleByDistance;\n  let distanceDisplayCondition = options.distanceDisplayCondition;\n  if (defined(translucencyByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (translucencyByDistance.far <= translucencyByDistance.near) {\n      throw new DeveloperError(\"translucencyByDistance.far must be greater than translucencyByDistance.near.\");\n    }\n    //>>includeEnd('debug');\n    translucencyByDistance = NearFarScalar.clone(translucencyByDistance);\n  }\n  if (defined(pixelOffsetScaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (pixelOffsetScaleByDistance.far <= pixelOffsetScaleByDistance.near) {\n      throw new DeveloperError(\"pixelOffsetScaleByDistance.far must be greater than pixelOffsetScaleByDistance.near.\");\n    }\n    //>>includeEnd('debug');\n    pixelOffsetScaleByDistance = NearFarScalar.clone(pixelOffsetScaleByDistance);\n  }\n  if (defined(scaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (scaleByDistance.far <= scaleByDistance.near) {\n      throw new DeveloperError(\"scaleByDistance.far must be greater than scaleByDistance.near.\");\n    }\n    //>>includeEnd('debug');\n    scaleByDistance = NearFarScalar.clone(scaleByDistance);\n  }\n  if (defined(distanceDisplayCondition)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n      throw new DeveloperError(\"distanceDisplayCondition.far must be greater than distanceDisplayCondition.near.\");\n    }\n    //>>includeEnd('debug');\n    distanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition);\n  }\n  this._show = defaultValue(options.show, true);\n  this._position = Cartesian3.clone(defaultValue(options.position, Cartesian3.ZERO));\n  this._actualPosition = Cartesian3.clone(this._position); // For columbus view and 2D\n  this._pixelOffset = Cartesian2.clone(defaultValue(options.pixelOffset, Cartesian2.ZERO));\n  this._translate = new Cartesian2(0.0, 0.0); // used by labels for glyph vertex translation\n  this._eyeOffset = Cartesian3.clone(defaultValue(options.eyeOffset, Cartesian3.ZERO));\n  this._heightReference = defaultValue(options.heightReference, HeightReference.NONE);\n  this._verticalOrigin = defaultValue(options.verticalOrigin, VerticalOrigin.CENTER);\n  this._horizontalOrigin = defaultValue(options.horizontalOrigin, HorizontalOrigin.CENTER);\n  this._scale = defaultValue(options.scale, 1.0);\n  this._color = Color.clone(defaultValue(options.color, Color.WHITE));\n  this._rotation = defaultValue(options.rotation, 0.0);\n  this._alignedAxis = Cartesian3.clone(defaultValue(options.alignedAxis, Cartesian3.ZERO));\n  this._width = options.width;\n  this._height = options.height;\n  this._scaleByDistance = scaleByDistance;\n  this._translucencyByDistance = translucencyByDistance;\n  this._pixelOffsetScaleByDistance = pixelOffsetScaleByDistance;\n  this._sizeInMeters = defaultValue(options.sizeInMeters, false);\n  this._distanceDisplayCondition = distanceDisplayCondition;\n  this._disableDepthTestDistance = options.disableDepthTestDistance;\n  this._id = options.id;\n  this._collection = defaultValue(options.collection, billboardCollection);\n  this._pickId = undefined;\n  this._pickPrimitive = defaultValue(options._pickPrimitive, this);\n  this._billboardCollection = billboardCollection;\n  this._dirty = false;\n  this._index = -1; //Used only by BillboardCollection\n  this._batchIndex = undefined; // Used only by Vector3DTilePoints and BillboardCollection\n\n  this._imageIndex = -1;\n  this._imageIndexPromise = undefined;\n  this._imageId = undefined;\n  this._image = undefined;\n  this._imageSubRegion = undefined;\n  this._imageWidth = undefined;\n  this._imageHeight = undefined;\n  this._labelDimensions = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelTranslate = undefined;\n  const image = options.image;\n  let imageId = options.imageId;\n  if (defined(image)) {\n    if (!defined(imageId)) {\n      if (typeof image === \"string\") {\n        imageId = image;\n      } else if (defined(image.src)) {\n        imageId = image.src;\n      } else {\n        imageId = createGuid();\n      }\n    }\n    this._imageId = imageId;\n    this._image = image;\n  }\n  if (defined(options.imageSubRegion)) {\n    this._imageId = imageId;\n    this._imageSubRegion = options.imageSubRegion;\n  }\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n  this._actualClampedPosition = undefined;\n  this._removeCallbackFunc = undefined;\n  this._mode = SceneMode.SCENE3D;\n  this._clusterShow = true;\n  this._outlineColor = Color.clone(defaultValue(options.outlineColor, Color.BLACK));\n  this._outlineWidth = defaultValue(options.outlineWidth, 0.0);\n  this._updateClamping();\n  this._splitDirection = defaultValue(options.splitDirection, SplitDirection.NONE);\n}\nconst SHOW_INDEX = Billboard.SHOW_INDEX = 0;\nconst POSITION_INDEX = Billboard.POSITION_INDEX = 1;\nconst PIXEL_OFFSET_INDEX = Billboard.PIXEL_OFFSET_INDEX = 2;\nconst EYE_OFFSET_INDEX = Billboard.EYE_OFFSET_INDEX = 3;\nconst HORIZONTAL_ORIGIN_INDEX = Billboard.HORIZONTAL_ORIGIN_INDEX = 4;\nconst VERTICAL_ORIGIN_INDEX = Billboard.VERTICAL_ORIGIN_INDEX = 5;\nconst SCALE_INDEX = Billboard.SCALE_INDEX = 6;\nconst IMAGE_INDEX_INDEX = Billboard.IMAGE_INDEX_INDEX = 7;\nconst COLOR_INDEX = Billboard.COLOR_INDEX = 8;\nconst ROTATION_INDEX = Billboard.ROTATION_INDEX = 9;\nconst ALIGNED_AXIS_INDEX = Billboard.ALIGNED_AXIS_INDEX = 10;\nconst SCALE_BY_DISTANCE_INDEX = Billboard.SCALE_BY_DISTANCE_INDEX = 11;\nconst TRANSLUCENCY_BY_DISTANCE_INDEX = Billboard.TRANSLUCENCY_BY_DISTANCE_INDEX = 12;\nconst PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = Billboard.PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = 13;\nconst DISTANCE_DISPLAY_CONDITION = Billboard.DISTANCE_DISPLAY_CONDITION = 14;\nconst DISABLE_DEPTH_DISTANCE = Billboard.DISABLE_DEPTH_DISTANCE = 15;\nBillboard.TEXTURE_COORDINATE_BOUNDS = 16;\nconst SDF_INDEX = Billboard.SDF_INDEX = 17;\nconst SPLIT_DIRECTION_INDEX = Billboard.SPLIT_DIRECTION_INDEX = 18;\nBillboard.NUMBER_OF_PROPERTIES = 19;\nfunction makeDirty(billboard, propertyChanged) {\n  const billboardCollection = billboard._billboardCollection;\n  if (defined(billboardCollection)) {\n    billboardCollection._updateBillboard(billboard, propertyChanged);\n    billboard._dirty = true;\n  }\n}\nObject.defineProperties(Billboard.prototype, {\n  /**\n   * Determines if this billboard will be shown.  Use this to hide or show a billboard, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof Billboard.prototype\n   * @type {boolean}\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the Cartesian position of this billboard.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const position = this._position;\n      if (!Cartesian3.equals(position, value)) {\n        Cartesian3.clone(value, position);\n        Cartesian3.clone(value, this._actualPosition);\n        this._updateClamping();\n        makeDirty(this, POSITION_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the height reference of this billboard.\n   * @memberof Billboard.prototype\n   * @type {HeightReference}\n   * @default HeightReference.NONE\n   */\n  heightReference: {\n    get: function () {\n      return this._heightReference;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      const heightReference = this._heightReference;\n      if (value !== heightReference) {\n        this._heightReference = value;\n        this._updateClamping();\n        makeDirty(this, POSITION_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the pixel offset in screen space from the origin of this billboard.  This is commonly used\n   * to align multiple billboards and labels at the same position, e.g., an image and text.  The\n   * screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n   * left to right, and <code>y</code> increases from top to bottom.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src='Images/Billboard.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The billboard's origin is indicated by the yellow point.\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Cartesian2}\n   */\n  pixelOffset: {\n    get: function () {\n      return this._pixelOffset;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const pixelOffset = this._pixelOffset;\n      if (!Cartesian2.equals(pixelOffset, value)) {\n        Cartesian2.clone(value, pixelOffset);\n        makeDirty(this, PIXEL_OFFSET_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets near and far scaling properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's scale remains clamped to the nearest bound.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's scaleByDistance to scale by 1.5 when the\n   * // camera is 1500 meters from the billboard and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * b.scaleByDistance = new Cesium.NearFarScalar(1.5e2, 1.5, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable scaling by distance\n   * b.scaleByDistance = undefined;\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.object(\"value\", value);\n        if (value.far <= value.near) {\n          throw new DeveloperError(\"far distance must be greater than near distance.\");\n        }\n      }\n      //>>includeEnd('debug');\n\n      const scaleByDistance = this._scaleByDistance;\n      if (!NearFarScalar.equals(scaleByDistance, value)) {\n        this._scaleByDistance = NearFarScalar.clone(value, scaleByDistance);\n        makeDirty(this, SCALE_BY_DISTANCE_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets near and far translucency properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's translucency remains clamped to the nearest bound.  If undefined,\n   * translucencyByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's translucency to 1.0 when the\n   * // camera is 1500 meters from the billboard and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * b.translucencyByDistance = new Cesium.NearFarScalar(1.5e2, 1.0, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable translucency by distance\n   * b.translucencyByDistance = undefined;\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.object(\"value\", value);\n        if (value.far <= value.near) {\n          throw new DeveloperError(\"far distance must be greater than near distance.\");\n        }\n      }\n      //>>includeEnd('debug');\n\n      const translucencyByDistance = this._translucencyByDistance;\n      if (!NearFarScalar.equals(translucencyByDistance, value)) {\n        this._translucencyByDistance = NearFarScalar.clone(value, translucencyByDistance);\n        makeDirty(this, TRANSLUCENCY_BY_DISTANCE_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets near and far pixel offset scaling properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's pixel offset will be scaled between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's pixel offset scale remains clamped to the nearest bound.  If undefined,\n   * pixelOffsetScaleByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's pixel offset scale to 0.0 when the\n   * // camera is 1500 meters from the billboard and scale pixel offset to 10.0 pixels\n   * // in the y direction the camera distance approaches 8.0e6 meters.\n   * b.pixelOffset = new Cesium.Cartesian2(0.0, 1.0);\n   * b.pixelOffsetScaleByDistance = new Cesium.NearFarScalar(1.5e2, 0.0, 8.0e6, 10.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable pixel offset by distance\n   * b.pixelOffsetScaleByDistance = undefined;\n   */\n  pixelOffsetScaleByDistance: {\n    get: function () {\n      return this._pixelOffsetScaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.object(\"value\", value);\n        if (value.far <= value.near) {\n          throw new DeveloperError(\"far distance must be greater than near distance.\");\n        }\n      }\n      //>>includeEnd('debug');\n\n      const pixelOffsetScaleByDistance = this._pixelOffsetScaleByDistance;\n      if (!NearFarScalar.equals(pixelOffsetScaleByDistance, value)) {\n        this._pixelOffsetScaleByDistance = NearFarScalar.clone(value, pixelOffsetScaleByDistance);\n        makeDirty(this, PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the 3D Cartesian offset applied to this billboard in eye coordinates.  Eye coordinates is a left-handed\n   * coordinate system, where <code>x</code> points towards the viewer's right, <code>y</code> points up, and\n   * <code>z</code> points into the screen.  Eye coordinates use the same scale as world and model coordinates,\n   * which is typically meters.\n   * <br /><br />\n   * An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to\n   * arrange a billboard above its corresponding 3D model.\n   * <br /><br />\n   * Below, the billboard is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code><br /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   */\n  eyeOffset: {\n    get: function () {\n      return this._eyeOffset;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const eyeOffset = this._eyeOffset;\n      if (!Cartesian3.equals(eyeOffset, value)) {\n        Cartesian3.clone(value, eyeOffset);\n        makeDirty(this, EYE_OFFSET_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the horizontal origin of this billboard, which determines if the billboard is\n   * to the left, center, or right of its anchor position.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setHorizontalOrigin.png' width='648' height='196' /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {HorizontalOrigin}\n   * @example\n   * // Use a bottom, left origin\n   * b.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;\n   * b.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._horizontalOrigin !== value) {\n        this._horizontalOrigin = value;\n        makeDirty(this, HORIZONTAL_ORIGIN_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the vertical origin of this billboard, which determines if the billboard is\n   * to the above, below, or at the center of its anchor position.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setVerticalOrigin.png' width='695' height='175' /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {VerticalOrigin}\n   * @example\n   * // Use a bottom, left origin\n   * b.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;\n   * b.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._verticalOrigin !== value) {\n        this._verticalOrigin = value;\n        makeDirty(this, VERTICAL_ORIGIN_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the uniform scale that is multiplied with the billboard's image size in pixels.\n   * A scale of <code>1.0</code> does not change the size of the billboard; a scale greater than\n   * <code>1.0</code> enlarges the billboard; a positive scale less than <code>1.0</code> shrinks\n   * the billboard.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>,\n   * and <code>2.0</code>.\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {number}\n   */\n  scale: {\n    get: function () {\n      return this._scale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._scale !== value) {\n        this._scale = value;\n        makeDirty(this, SCALE_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the color that is multiplied with the billboard's texture.  This has two common use cases.  First,\n   * the same white texture may be used by many different billboards, each with a different color, to create\n   * colored billboards.  Second, the color's alpha component can be used to make the billboard translucent as shown below.\n   * An alpha of <code>0.0</code> makes the billboard transparent, and <code>1.0</code> makes the billboard opaque.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setColor.Alpha255.png' width='250' height='188' /></td>\n   * <td align='center'><code>alpha : 0.5</code><br/><img src='Images/Billboard.setColor.Alpha127.png' width='250' height='188' /></td>\n   * </tr></table>\n   * </div>\n   * <br />\n   * The red, green, blue, and alpha values are indicated by <code>value</code>'s <code>red</code>, <code>green</code>,\n   * <code>blue</code>, and <code>alpha</code> properties as shown in Example 1.  These components range from <code>0.0</code>\n   * (no intensity) to <code>1.0</code> (full intensity).\n   * @memberof Billboard.prototype\n   * @type {Color}\n   *\n   * @example\n   * // Example 1. Assign yellow.\n   * b.color = Cesium.Color.YELLOW;\n   *\n   * @example\n   * // Example 2. Make a billboard 50% translucent.\n   * b.color = new Cesium.Color(1.0, 1.0, 1.0, 0.5);\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const color = this._color;\n      if (!Color.equals(color, value)) {\n        Color.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the rotation angle in radians.\n   * @memberof Billboard.prototype\n   * @type {number}\n   */\n  rotation: {\n    get: function () {\n      return this._rotation;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._rotation !== value) {\n        this._rotation = value;\n        makeDirty(this, ROTATION_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the aligned axis in world space. The aligned axis is the unit vector that the billboard up vector points towards.\n   * The default is the zero vector, which means the billboard is aligned to the screen up vector.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   * @example\n   * // Example 1.\n   * // Have the billboard up vector point north\n   * billboard.alignedAxis = Cesium.Cartesian3.UNIT_Z;\n   *\n   * @example\n   * // Example 2.\n   * // Have the billboard point east.\n   * billboard.alignedAxis = Cesium.Cartesian3.UNIT_Z;\n   * billboard.rotation = -Cesium.Math.PI_OVER_TWO;\n   *\n   * @example\n   * // Example 3.\n   * // Reset the aligned axis\n   * billboard.alignedAxis = Cesium.Cartesian3.ZERO;\n   */\n  alignedAxis: {\n    get: function () {\n      return this._alignedAxis;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const alignedAxis = this._alignedAxis;\n      if (!Cartesian3.equals(alignedAxis, value)) {\n        Cartesian3.clone(value, alignedAxis);\n        makeDirty(this, ALIGNED_AXIS_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets a width for the billboard. If undefined, the image width will be used.\n   * @memberof Billboard.prototype\n   * @type {number}\n   */\n  width: {\n    get: function () {\n      return defaultValue(this._width, this._imageWidth);\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.number(\"value\", value);\n      }\n      //>>includeEnd('debug');\n      if (this._width !== value) {\n        this._width = value;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets a height for the billboard. If undefined, the image height will be used.\n   * @memberof Billboard.prototype\n   * @type {number}\n   */\n  height: {\n    get: function () {\n      return defaultValue(this._height, this._imageHeight);\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.number(\"value\", value);\n      }\n      //>>includeEnd('debug');\n      if (this._height !== value) {\n        this._height = value;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets if the billboard size is in meters or pixels. <code>true</code> to size the billboard in meters;\n   * otherwise, the size is in pixels.\n   * @memberof Billboard.prototype\n   * @type {boolean}\n   * @default false\n   */\n  sizeInMeters: {\n    get: function () {\n      return this._sizeInMeters;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"value\", value);\n      //>>includeEnd('debug');\n      if (this._sizeInMeters !== value) {\n        this._sizeInMeters = value;\n        makeDirty(this, COLOR_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this billboard will be displayed.\n   * @memberof Billboard.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      if (!DistanceDisplayCondition.equals(value, this._distanceDisplayCondition)) {\n        //>>includeStart('debug', pragmas.debug);\n        if (defined(value)) {\n          Check.typeOf.object(\"value\", value);\n          if (value.far <= value.near) {\n            throw new DeveloperError(\"far distance must be greater than near distance.\");\n          }\n        }\n        //>>includeEnd('debug');\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(value, this._distanceDisplayCondition);\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION);\n      }\n    }\n  },\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof Billboard.prototype\n   * @type {number}\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.number(\"value\", value);\n        if (value < 0.0) {\n          throw new DeveloperError(\"disableDepthTestDistance must be greater than or equal to 0.0.\");\n        }\n      }\n      //>>includeEnd('debug');\n      if (this._disableDepthTestDistance !== value) {\n        this._disableDepthTestDistance = value;\n        makeDirty(this, DISABLE_DEPTH_DISTANCE);\n      }\n    }\n  },\n  /**\n   * Gets or sets the user-defined object returned when the billboard is picked.\n   * @memberof Billboard.prototype\n   * @type {*}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    }\n  },\n  /**\n   * The primitive to return when picking this billboard.\n   * @memberof Billboard.prototype\n   * @private\n   */\n  pickPrimitive: {\n    get: function () {\n      return this._pickPrimitive;\n    },\n    set: function (value) {\n      this._pickPrimitive = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.primitive = value;\n      }\n    }\n  },\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    }\n  },\n  /**\n   * <p>\n   * Gets or sets the image to be used for this billboard.  If a texture has already been created for the\n   * given image, the existing texture is used.\n   * </p>\n   * <p>\n   * This property can be set to a loaded Image, a URL which will be loaded as an Image automatically,\n   * a canvas, or another billboard's image property (from the same billboard collection).\n   * </p>\n   *\n   * @memberof Billboard.prototype\n   * @type {string}\n   * @example\n   * // load an image from a URL\n   * b.image = 'some/image/url.png';\n   *\n   * // assuming b1 and b2 are billboards in the same billboard collection,\n   * // use the same image for both billboards.\n   * b2.image = b1.image;\n   */\n  image: {\n    get: function () {\n      return this._imageId;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        this._imageIndex = -1;\n        this._imageSubRegion = undefined;\n        this._imageId = undefined;\n        this._image = undefined;\n        this._imageIndexPromise = undefined;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      } else if (typeof value === \"string\") {\n        this.setImage(value, value);\n      } else if (value instanceof Resource) {\n        this.setImage(value.url, value);\n      } else if (defined(value.src)) {\n        this.setImage(value.src, value);\n      } else {\n        this.setImage(createGuid(), value);\n      }\n    }\n  },\n  /**\n   * When <code>true</code>, this billboard is ready to render, i.e., the image\n   * has been downloaded and the WebGL resources are created.\n   *\n   * @memberof Billboard.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return this._imageIndex !== -1;\n    }\n  },\n  /**\n   * Keeps track of the position of the billboard based on the height reference.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   * @private\n   */\n  _clampedPosition: {\n    get: function () {\n      return this._actualClampedPosition;\n    },\n    set: function (value) {\n      this._actualClampedPosition = Cartesian3.clone(value, this._actualClampedPosition);\n      makeDirty(this, POSITION_INDEX);\n    }\n  },\n  /**\n   * Determines whether or not this billboard will be shown or hidden because it was clustered.\n   * @memberof Billboard.prototype\n   * @type {boolean}\n   * @private\n   */\n  clusterShow: {\n    get: function () {\n      return this._clusterShow;\n    },\n    set: function (value) {\n      if (this._clusterShow !== value) {\n        this._clusterShow = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  },\n  /**\n   * The outline color of this Billboard.  Effective only for SDF billboards like Label glyphs.\n   * @memberof Billboard.prototype\n   * @type {Color}\n   * @private\n   */\n  outlineColor: {\n    get: function () {\n      return this._outlineColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      const outlineColor = this._outlineColor;\n      if (!Color.equals(outlineColor, value)) {\n        Color.clone(value, outlineColor);\n        makeDirty(this, SDF_INDEX);\n      }\n    }\n  },\n  /**\n   * The outline width of this Billboard in pixels.  Effective only for SDF billboards like Label glyphs.\n   * @memberof Billboard.prototype\n   * @type {number}\n   * @private\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n    set: function (value) {\n      if (this._outlineWidth !== value) {\n        this._outlineWidth = value;\n        makeDirty(this, SDF_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the {@link SplitDirection} of this billboard.\n   * @memberof Billboard.prototype\n   * @type {SplitDirection}\n   * @default {@link SplitDirection.NONE}\n   */\n  splitDirection: {\n    get: function () {\n      return this._splitDirection;\n    },\n    set: function (value) {\n      if (this._splitDirection !== value) {\n        this._splitDirection = value;\n        makeDirty(this, SPLIT_DIRECTION_INDEX);\n      }\n    }\n  }\n});\nBillboard.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this._pickPrimitive,\n      collection: this._collection,\n      id: this._id\n    });\n  }\n  return this._pickId;\n};\nBillboard.prototype._updateClamping = function () {\n  Billboard._updateClamping(this._billboardCollection, this);\n};\nconst scratchCartographic = new Cartographic();\nBillboard._updateClamping = function (collection, owner) {\n  const scene = collection._scene;\n  if (!defined(scene)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (owner._heightReference !== HeightReference.NONE) {\n      throw new DeveloperError(\"Height reference is not supported without a scene.\");\n    }\n    //>>includeEnd('debug');\n    return;\n  }\n  const ellipsoid = defaultValue(scene.ellipsoid, Ellipsoid.default);\n  const mode = scene.frameState.mode;\n  const modeChanged = mode !== owner._mode;\n  owner._mode = mode;\n  if ((owner._heightReference === HeightReference.NONE || modeChanged) && defined(owner._removeCallbackFunc)) {\n    owner._removeCallbackFunc();\n    owner._removeCallbackFunc = undefined;\n    owner._clampedPosition = undefined;\n  }\n  if (owner._heightReference === HeightReference.NONE || !defined(owner._position)) {\n    return;\n  }\n  if (defined(owner._removeCallbackFunc)) {\n    owner._removeCallbackFunc();\n  }\n  const position = ellipsoid.cartesianToCartographic(owner._position);\n  if (!defined(position)) {\n    owner._actualClampedPosition = undefined;\n    return;\n  }\n  function updateFunction(clampedPosition) {\n    const updatedClampedPosition = ellipsoid.cartographicToCartesian(clampedPosition, owner._clampedPosition);\n    if (isHeightReferenceRelative(owner._heightReference)) {\n      if (owner._mode === SceneMode.SCENE3D) {\n        clampedPosition.height += position.height;\n        ellipsoid.cartographicToCartesian(clampedPosition, updatedClampedPosition);\n      } else {\n        updatedClampedPosition.x += position.height;\n      }\n    }\n    owner._clampedPosition = updatedClampedPosition;\n  }\n  owner._removeCallbackFunc = scene.updateHeight(position, updateFunction, owner._heightReference);\n  Cartographic.clone(position, scratchCartographic);\n  const height = scene.getHeight(position, owner._heightReference);\n  if (defined(height)) {\n    scratchCartographic.height = height;\n  }\n  updateFunction(scratchCartographic);\n};\nBillboard.prototype._loadImage = function () {\n  const atlas = this._billboardCollection._textureAtlas;\n  const imageId = this._imageId;\n  const image = this._image;\n  const imageSubRegion = this._imageSubRegion;\n  let imageIndexPromise;\n  const that = this;\n  function completeImageLoad(index) {\n    if (that._imageId !== imageId || that._image !== image || !BoundingRectangle.equals(that._imageSubRegion, imageSubRegion)) {\n      // another load occurred before this one finished, ignore the index\n      return;\n    }\n\n    // fill in imageWidth and imageHeight\n    const textureCoordinates = atlas.textureCoordinates[index];\n    that._imageWidth = atlas.texture.width * textureCoordinates.width;\n    that._imageHeight = atlas.texture.height * textureCoordinates.height;\n    that._imageIndex = index;\n    that._ready = true;\n    that._image = undefined;\n    that._imageIndexPromise = undefined;\n    makeDirty(that, IMAGE_INDEX_INDEX);\n    const scene = that._billboardCollection._scene;\n    if (!defined(scene)) {\n      return;\n    }\n    // Request a new render in request render mode\n    scene.frameState.afterRender.push(() => true);\n  }\n  if (defined(image)) {\n    imageIndexPromise = atlas.addImage(imageId, image);\n  }\n  if (defined(imageSubRegion)) {\n    imageIndexPromise = atlas.addSubRegion(imageId, imageSubRegion);\n  }\n  this._imageIndexPromise = imageIndexPromise;\n  if (!defined(imageIndexPromise)) {\n    return;\n  }\n\n  // If the promise has already successfully resolved, we can return immediately without waiting a frame\n  const index = atlas.getImageIndex(imageId);\n  if (defined(index) && !defined(imageSubRegion)) {\n    completeImageLoad(index);\n    return;\n  }\n  imageIndexPromise.then(completeImageLoad).catch(function (error) {\n    console.error(`Error loading image for billboard: ${error}`);\n    that._imageIndexPromise = undefined;\n  });\n};\n\n/**\n * <p>\n * Sets the image to be used for this billboard.  If a texture has already been created for the\n * given id, the existing texture is used.\n * </p>\n * <p>\n * This function is useful for dynamically creating textures that are shared across many billboards.\n * Only the first billboard will actually call the function and create the texture, while subsequent\n * billboards created with the same id will simply re-use the existing texture.\n * </p>\n * <p>\n * To load an image from a URL, setting the {@link Billboard#image} property is more convenient.\n * </p>\n *\n * @param {string} id The id of the image.  This can be any string that uniquely identifies the image.\n * @param {HTMLImageElement|HTMLCanvasElement|string|Resource|Billboard.CreateImageCallback} image The image to load.  This parameter\n *        can either be a loaded Image or Canvas, a URL which will be loaded as an Image automatically,\n *        or a function which will be called to create the image if it hasn't been loaded already.\n * @example\n * // create a billboard image dynamically\n * function drawImage(id) {\n *   // create and draw an image using a canvas\n *   const canvas = document.createElement('canvas');\n *   const context2D = canvas.getContext('2d');\n *   // ... draw image\n *   return canvas;\n * }\n * // drawImage will be called to create the texture\n * b.setImage('myImage', drawImage);\n *\n * // subsequent billboards created in the same collection using the same id will use the existing\n * // texture, without the need to create the canvas or draw the image\n * b2.setImage('myImage', drawImage);\n */\nBillboard.prototype.setImage = function (id, image) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n  if (!defined(image)) {\n    throw new DeveloperError(\"image is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (this._imageId === id) {\n    return;\n  }\n  this._imageIndex = -1;\n  this._imageSubRegion = undefined;\n  this._imageId = id;\n  this._image = image;\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n};\n\n/**\n * Uses a sub-region of the image with the given id as the image for this billboard,\n * measured in pixels from the bottom-left.\n *\n * @param {string} id The id of the image to use.\n * @param {BoundingRectangle} subRegion The sub-region of the image.\n *\n * @exception {RuntimeError} image with id must be in the atlas\n */\nBillboard.prototype.setImageSubRegion = function (id, subRegion) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n  if (!defined(subRegion)) {\n    throw new DeveloperError(\"subRegion is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (this._imageId === id && BoundingRectangle.equals(this._imageSubRegion, subRegion)) {\n    return;\n  }\n  this._imageIndex = -1;\n  this._imageId = id;\n  this._imageSubRegion = BoundingRectangle.clone(subRegion);\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n};\nBillboard.prototype._setTranslate = function (value) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const translate = this._translate;\n  if (!Cartesian2.equals(translate, value)) {\n    Cartesian2.clone(value, translate);\n    makeDirty(this, PIXEL_OFFSET_INDEX);\n  }\n};\nBillboard.prototype._getActualPosition = function () {\n  return defined(this._clampedPosition) ? this._clampedPosition : this._actualPosition;\n};\nBillboard.prototype._setActualPosition = function (value) {\n  if (!defined(this._clampedPosition)) {\n    Cartesian3.clone(value, this._actualPosition);\n  }\n  makeDirty(this, POSITION_INDEX);\n};\nconst tempCartesian3 = new Cartesian4();\nBillboard._computeActualPosition = function (billboard, position, frameState, modelMatrix) {\n  if (defined(billboard._clampedPosition)) {\n    if (frameState.mode !== billboard._mode) {\n      billboard._updateClamping();\n    }\n    return billboard._clampedPosition;\n  } else if (frameState.mode === SceneMode.SCENE3D) {\n    return position;\n  }\n  Matrix4.multiplyByPoint(modelMatrix, position, tempCartesian3);\n  return SceneTransforms.computeActualEllipsoidPosition(frameState, tempCartesian3);\n};\nconst scratchCartesian3 = new Cartesian3();\n\n// This function is basically a stripped-down JavaScript version of BillboardCollectionVS.glsl\nBillboard._computeScreenSpacePosition = function (modelMatrix, position, eyeOffset, pixelOffset, scene, result) {\n  // Model to world coordinates\n  const positionWorld = Matrix4.multiplyByPoint(modelMatrix, position, scratchCartesian3);\n\n  // World to window coordinates\n  const positionWC = SceneTransforms.worldWithEyeOffsetToWindowCoordinates(scene, positionWorld, eyeOffset, result);\n  if (!defined(positionWC)) {\n    return undefined;\n  }\n\n  // Apply pixel offset\n  Cartesian2.add(positionWC, pixelOffset, positionWC);\n  return positionWC;\n};\nconst scratchPixelOffset = new Cartesian2(0.0, 0.0);\n\n/**\n * Computes the screen-space position of the billboard's origin, taking into account eye and pixel offsets.\n * The screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n * left to right, and <code>y</code> increases from top to bottom.\n *\n * @param {Scene} scene The scene.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The screen-space position of the billboard.\n *\n * @exception {DeveloperError} Billboard must be in a collection.\n *\n * @example\n * console.log(b.computeScreenSpacePosition(scene).toString());\n *\n * @see Billboard#eyeOffset\n * @see Billboard#pixelOffset\n */\nBillboard.prototype.computeScreenSpacePosition = function (scene, result) {\n  const billboardCollection = this._billboardCollection;\n  if (!defined(result)) {\n    result = new Cartesian2();\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(billboardCollection)) {\n    throw new DeveloperError(\"Billboard must be in a collection.  Was it removed?\");\n  }\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  // pixel offset for screen space computation is the pixelOffset + screen space translate\n  Cartesian2.clone(this._pixelOffset, scratchPixelOffset);\n  Cartesian2.add(scratchPixelOffset, this._translate, scratchPixelOffset);\n  let modelMatrix = billboardCollection.modelMatrix;\n  let position = this._position;\n  if (defined(this._clampedPosition)) {\n    position = this._clampedPosition;\n    if (scene.mode !== SceneMode.SCENE3D) {\n      // position needs to be in world coordinates\n      const projection = scene.mapProjection;\n      const ellipsoid = projection.ellipsoid;\n      const cart = projection.unproject(position, scratchCartographic);\n      position = ellipsoid.cartographicToCartesian(cart, scratchCartesian3);\n      modelMatrix = Matrix4.IDENTITY;\n    }\n  }\n  const windowCoordinates = Billboard._computeScreenSpacePosition(modelMatrix, position, this._eyeOffset, scratchPixelOffset, scene, result);\n  return windowCoordinates;\n};\n\n/**\n * Gets a billboard's screen space bounding box centered around screenSpacePosition.\n * @param {Billboard} billboard The billboard to get the screen space bounding box for.\n * @param {Cartesian2} screenSpacePosition The screen space center of the label.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The screen space bounding box.\n *\n * @private\n */\nBillboard.getScreenSpaceBoundingBox = function (billboard, screenSpacePosition, result) {\n  let width = billboard.width;\n  let height = billboard.height;\n  const scale = billboard.scale;\n  width *= scale;\n  height *= scale;\n  let x = screenSpacePosition.x;\n  if (billboard.horizontalOrigin === HorizontalOrigin.RIGHT) {\n    x -= width;\n  } else if (billboard.horizontalOrigin === HorizontalOrigin.CENTER) {\n    x -= width * 0.5;\n  }\n  let y = screenSpacePosition.y;\n  if (billboard.verticalOrigin === VerticalOrigin.BOTTOM || billboard.verticalOrigin === VerticalOrigin.BASELINE) {\n    y -= height;\n  } else if (billboard.verticalOrigin === VerticalOrigin.CENTER) {\n    y -= height * 0.5;\n  }\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n  return result;\n};\n\n/**\n * Determines if this billboard equals another billboard.  Billboards are equal if all their properties\n * are equal.  Billboards in different collections can be equal.\n *\n * @param {Billboard} other The billboard to compare for equality.\n * @returns {boolean} <code>true</code> if the billboards are equal; otherwise, <code>false</code>.\n */\nBillboard.prototype.equals = function (other) {\n  return this === other || defined(other) && this._id === other._id && Cartesian3.equals(this._position, other._position) && this._imageId === other._imageId && this._show === other._show && this._scale === other._scale && this._verticalOrigin === other._verticalOrigin && this._horizontalOrigin === other._horizontalOrigin && this._heightReference === other._heightReference && BoundingRectangle.equals(this._imageSubRegion, other._imageSubRegion) && Color.equals(this._color, other._color) && Cartesian2.equals(this._pixelOffset, other._pixelOffset) && Cartesian2.equals(this._translate, other._translate) && Cartesian3.equals(this._eyeOffset, other._eyeOffset) && NearFarScalar.equals(this._scaleByDistance, other._scaleByDistance) && NearFarScalar.equals(this._translucencyByDistance, other._translucencyByDistance) && NearFarScalar.equals(this._pixelOffsetScaleByDistance, other._pixelOffsetScaleByDistance) && DistanceDisplayCondition.equals(this._distanceDisplayCondition, other._distanceDisplayCondition) && this._disableDepthTestDistance === other._disableDepthTestDistance && this._splitDirection === other._splitDirection;\n};\nBillboard.prototype._destroy = function () {\n  if (defined(this._customData)) {\n    this._billboardCollection._scene.globe._surface.removeTileCustomData(this._customData);\n    this._customData = undefined;\n  }\n  if (defined(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n    this._removeCallbackFunc = undefined;\n  }\n  this.image = undefined;\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._billboardCollection = undefined;\n};\n\n/**\n * A function that creates an image.\n * @callback Billboard.CreateImageCallback\n * @param {string} id The identifier of the image to load.\n * @returns {HTMLImageElement|HTMLCanvasElement|Promise<HTMLImageElement|HTMLCanvasElement>} The image, or a promise that will resolve to an image.\n */\nexport default Billboard;","map":{"version":3,"names":["BoundingRectangle","Cartesian2","Cartesian3","Cartesian4","Cartographic","Check","Color","createGuid","defaultValue","defined","DeveloperError","DistanceDisplayCondition","Ellipsoid","Matrix4","NearFarScalar","Resource","HeightReference","isHeightReferenceRelative","HorizontalOrigin","SceneMode","SceneTransforms","VerticalOrigin","SplitDirection","Billboard","options","billboardCollection","EMPTY_OBJECT","disableDepthTestDistance","translucencyByDistance","pixelOffsetScaleByDistance","scaleByDistance","distanceDisplayCondition","far","near","clone","_show","show","_position","position","ZERO","_actualPosition","_pixelOffset","pixelOffset","_translate","_eyeOffset","eyeOffset","_heightReference","heightReference","NONE","_verticalOrigin","verticalOrigin","CENTER","_horizontalOrigin","horizontalOrigin","_scale","scale","_color","color","WHITE","_rotation","rotation","_alignedAxis","alignedAxis","_width","width","_height","height","_scaleByDistance","_translucencyByDistance","_pixelOffsetScaleByDistance","_sizeInMeters","sizeInMeters","_distanceDisplayCondition","_disableDepthTestDistance","_id","id","_collection","collection","_pickId","undefined","_pickPrimitive","_billboardCollection","_dirty","_index","_batchIndex","_imageIndex","_imageIndexPromise","_imageId","_image","_imageSubRegion","_imageWidth","_imageHeight","_labelDimensions","_labelHorizontalOrigin","_labelTranslate","image","imageId","src","imageSubRegion","_textureAtlas","_loadImage","_actualClampedPosition","_removeCallbackFunc","_mode","SCENE3D","_clusterShow","_outlineColor","outlineColor","BLACK","_outlineWidth","outlineWidth","_updateClamping","_splitDirection","splitDirection","SHOW_INDEX","POSITION_INDEX","PIXEL_OFFSET_INDEX","EYE_OFFSET_INDEX","HORIZONTAL_ORIGIN_INDEX","VERTICAL_ORIGIN_INDEX","SCALE_INDEX","IMAGE_INDEX_INDEX","COLOR_INDEX","ROTATION_INDEX","ALIGNED_AXIS_INDEX","SCALE_BY_DISTANCE_INDEX","TRANSLUCENCY_BY_DISTANCE_INDEX","PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX","DISTANCE_DISPLAY_CONDITION","DISABLE_DEPTH_DISTANCE","TEXTURE_COORDINATE_BOUNDS","SDF_INDEX","SPLIT_DIRECTION_INDEX","NUMBER_OF_PROPERTIES","makeDirty","billboard","propertyChanged","_updateBillboard","Object","defineProperties","prototype","get","set","value","typeOf","bool","object","equals","number","pickPrimitive","primitive","pickId","setImage","url","ready","_clampedPosition","clusterShow","getPickId","context","createPickId","scratchCartographic","owner","scene","_scene","ellipsoid","default","mode","frameState","modeChanged","cartesianToCartographic","updateFunction","clampedPosition","updatedClampedPosition","cartographicToCartesian","x","updateHeight","getHeight","atlas","imageIndexPromise","that","completeImageLoad","index","textureCoordinates","texture","_ready","afterRender","push","addImage","addSubRegion","getImageIndex","then","catch","error","console","setImageSubRegion","subRegion","_setTranslate","translate","_getActualPosition","_setActualPosition","tempCartesian3","_computeActualPosition","modelMatrix","multiplyByPoint","computeActualEllipsoidPosition","scratchCartesian3","_computeScreenSpacePosition","result","positionWorld","positionWC","worldWithEyeOffsetToWindowCoordinates","add","scratchPixelOffset","computeScreenSpacePosition","projection","mapProjection","cart","unproject","IDENTITY","windowCoordinates","getScreenSpaceBoundingBox","screenSpacePosition","RIGHT","y","BOTTOM","BASELINE","other","_destroy","_customData","globe","_surface","removeTileCustomData","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Billboard.js"],"sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport Resource from \"../Core/Resource.js\";\nimport HeightReference, {\n  isHeightReferenceRelative,\n} from \"./HeightReference.js\";\nimport HorizontalOrigin from \"./HorizontalOrigin.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\nimport VerticalOrigin from \"./VerticalOrigin.js\";\nimport SplitDirection from \"./SplitDirection.js\";\n\n/**\n * @typedef {object} Billboard.ConstructorOptions\n *\n * Initialization options for the first param of Billboard constructor\n *\n * @property {Cartesian3} position The cartesian position of the billboard.\n * @property {*} [id] A user-defined object to return when the billboard is picked with {@link Scene#pick}.\n * @property {boolean} [show=true] Determines if this billboard will be shown.\n * @property {string | HTMLCanvasElement} [image] A loaded HTMLImageElement, ImageData, or a url to an image to use for the billboard.\n * @property {number} [scale=1.0] A number specifying the uniform scale that is multiplied with the billboard's image size in pixels.\n * @property {Cartesian2} [pixelOffset=Cartesian2.ZERO] A {@link Cartesian2} Specifying the pixel offset in screen space from the origin of this billboard.\n * @property {Cartesian3} [eyeOffset=Cartesian3.ZERO] A {@link Cartesian3} Specifying the 3D Cartesian offset applied to this billboard in eye coordinates.\n * @property {HorizontalOrigin} [horizontalOrigin=HorizontalOrigin.CENTER] A {@link HorizontalOrigin} Specifying the horizontal origin of this billboard.\n * @property {VerticalOrigin} [verticalOrigin=VerticalOrigin.CENTER] A {@link VerticalOrigin} Specifying the vertical origin of this billboard.\n * @property {HeightReference} [heightReference=HeightReference.NONE] A {@link HeightReference} Specifying the height reference of this billboard.\n * @property {Color} [color=Color.WHITE] A {@link Color} Specifying the color that is multiplied with the billboard's texture.\n * @property {number} [rotation=0] A number specifying the rotation angle in radians.\n * @property {Cartesian3} [alignedAxis=Cartesian3.ZERO] A {@link Cartesian3} Specifying the aligned axis in world space.\n * @property {boolean} [sizeInMeters] A boolean specifying if the billboard size is in meters or pixels.\n * @property {number} [width] A number specifying the width of the billboard. If undefined, the image width will be used.\n * @property {number} [height] A number specifying the height of the billboard. If undefined, the image height will be used.\n * @property {NearFarScalar} [scaleByDistance] A {@link NearFarScalar} Specifying near and far scaling properties of a Billboard based on the billboard's distance from the camera.\n * @property {NearFarScalar} [translucencyByDistance] A {@link NearFarScalar} Specifying near and far translucency properties of a Billboard based on the billboard's distance from the camera.\n * @property {NearFarScalar} [pixelOffsetScaleByDistance] A {@link NearFarScalar} Specifying near and far pixel offset scaling properties of a Billboard based on the billboard's distance from the camera.\n * @property {BoundingRectangle} [imageSubRegion] A {@link BoundingRectangle} Specifying the sub-region of the image to use for the billboard, rather than the entire image.\n * @property {DistanceDisplayCondition} [distanceDisplayCondition] A {@link DistanceDisplayCondition} Specifying the distance from the camera at which this billboard will be displayed.\n * @property {number} [disableDepthTestDistance] A number specifying the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n * @property {SplitDirection} [splitDirection] A {@link SplitDirection} Specifying the split property of the billboard.\n */\n\n/**\n * <div class=\"notice\">\n * A billboard is created and its initial\n * properties are set by calling {@link BillboardCollection#add}. Do not call the constructor directly.\n * </div>\n * A viewport-aligned image positioned in the 3D scene, that is created\n * and rendered using a {@link BillboardCollection}.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n *\n * @alias Billboard\n *\n * @performance Reading a property, e.g., {@link Billboard#show}, is constant time.\n * Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link BillboardCollection#update} is called.  The per-billboard traffic is\n * the same regardless of how many properties were updated.  If most billboards in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link BillboardCollection#removeAll}\n * and add new billboards instead of modifying each one.\n *\n * @exception {DeveloperError} scaleByDistance.far must be greater than scaleByDistance.near\n * @exception {DeveloperError} translucencyByDistance.far must be greater than translucencyByDistance.near\n * @exception {DeveloperError} pixelOffsetScaleByDistance.far must be greater than pixelOffsetScaleByDistance.near\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @see BillboardCollection\n * @see BillboardCollection#add\n * @see Label\n *\n * @internalConstructor\n * @class\n *\n * @param {Billboard.ConstructorOptions} options Object describing initialization options\n * @param {BillboardCollection} billboardCollection Instance of BillboardCollection\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n */\nfunction Billboard(options, billboardCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    defined(options.disableDepthTestDistance) &&\n    options.disableDepthTestDistance < 0.0\n  ) {\n    throw new DeveloperError(\n      \"disableDepthTestDistance must be greater than or equal to 0.0.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  let translucencyByDistance = options.translucencyByDistance;\n  let pixelOffsetScaleByDistance = options.pixelOffsetScaleByDistance;\n  let scaleByDistance = options.scaleByDistance;\n  let distanceDisplayCondition = options.distanceDisplayCondition;\n  if (defined(translucencyByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (translucencyByDistance.far <= translucencyByDistance.near) {\n      throw new DeveloperError(\n        \"translucencyByDistance.far must be greater than translucencyByDistance.near.\",\n      );\n    }\n    //>>includeEnd('debug');\n    translucencyByDistance = NearFarScalar.clone(translucencyByDistance);\n  }\n  if (defined(pixelOffsetScaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (pixelOffsetScaleByDistance.far <= pixelOffsetScaleByDistance.near) {\n      throw new DeveloperError(\n        \"pixelOffsetScaleByDistance.far must be greater than pixelOffsetScaleByDistance.near.\",\n      );\n    }\n    //>>includeEnd('debug');\n    pixelOffsetScaleByDistance = NearFarScalar.clone(\n      pixelOffsetScaleByDistance,\n    );\n  }\n  if (defined(scaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (scaleByDistance.far <= scaleByDistance.near) {\n      throw new DeveloperError(\n        \"scaleByDistance.far must be greater than scaleByDistance.near.\",\n      );\n    }\n    //>>includeEnd('debug');\n    scaleByDistance = NearFarScalar.clone(scaleByDistance);\n  }\n  if (defined(distanceDisplayCondition)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n      throw new DeveloperError(\n        \"distanceDisplayCondition.far must be greater than distanceDisplayCondition.near.\",\n      );\n    }\n    //>>includeEnd('debug');\n    distanceDisplayCondition = DistanceDisplayCondition.clone(\n      distanceDisplayCondition,\n    );\n  }\n\n  this._show = defaultValue(options.show, true);\n  this._position = Cartesian3.clone(\n    defaultValue(options.position, Cartesian3.ZERO),\n  );\n  this._actualPosition = Cartesian3.clone(this._position); // For columbus view and 2D\n  this._pixelOffset = Cartesian2.clone(\n    defaultValue(options.pixelOffset, Cartesian2.ZERO),\n  );\n  this._translate = new Cartesian2(0.0, 0.0); // used by labels for glyph vertex translation\n  this._eyeOffset = Cartesian3.clone(\n    defaultValue(options.eyeOffset, Cartesian3.ZERO),\n  );\n  this._heightReference = defaultValue(\n    options.heightReference,\n    HeightReference.NONE,\n  );\n  this._verticalOrigin = defaultValue(\n    options.verticalOrigin,\n    VerticalOrigin.CENTER,\n  );\n  this._horizontalOrigin = defaultValue(\n    options.horizontalOrigin,\n    HorizontalOrigin.CENTER,\n  );\n  this._scale = defaultValue(options.scale, 1.0);\n  this._color = Color.clone(defaultValue(options.color, Color.WHITE));\n  this._rotation = defaultValue(options.rotation, 0.0);\n  this._alignedAxis = Cartesian3.clone(\n    defaultValue(options.alignedAxis, Cartesian3.ZERO),\n  );\n  this._width = options.width;\n  this._height = options.height;\n  this._scaleByDistance = scaleByDistance;\n  this._translucencyByDistance = translucencyByDistance;\n  this._pixelOffsetScaleByDistance = pixelOffsetScaleByDistance;\n  this._sizeInMeters = defaultValue(options.sizeInMeters, false);\n  this._distanceDisplayCondition = distanceDisplayCondition;\n  this._disableDepthTestDistance = options.disableDepthTestDistance;\n  this._id = options.id;\n  this._collection = defaultValue(options.collection, billboardCollection);\n\n  this._pickId = undefined;\n  this._pickPrimitive = defaultValue(options._pickPrimitive, this);\n  this._billboardCollection = billboardCollection;\n  this._dirty = false;\n  this._index = -1; //Used only by BillboardCollection\n  this._batchIndex = undefined; // Used only by Vector3DTilePoints and BillboardCollection\n\n  this._imageIndex = -1;\n  this._imageIndexPromise = undefined;\n  this._imageId = undefined;\n  this._image = undefined;\n  this._imageSubRegion = undefined;\n  this._imageWidth = undefined;\n  this._imageHeight = undefined;\n\n  this._labelDimensions = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelTranslate = undefined;\n\n  const image = options.image;\n  let imageId = options.imageId;\n  if (defined(image)) {\n    if (!defined(imageId)) {\n      if (typeof image === \"string\") {\n        imageId = image;\n      } else if (defined(image.src)) {\n        imageId = image.src;\n      } else {\n        imageId = createGuid();\n      }\n    }\n\n    this._imageId = imageId;\n    this._image = image;\n  }\n\n  if (defined(options.imageSubRegion)) {\n    this._imageId = imageId;\n    this._imageSubRegion = options.imageSubRegion;\n  }\n\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n\n  this._actualClampedPosition = undefined;\n  this._removeCallbackFunc = undefined;\n  this._mode = SceneMode.SCENE3D;\n\n  this._clusterShow = true;\n  this._outlineColor = Color.clone(\n    defaultValue(options.outlineColor, Color.BLACK),\n  );\n  this._outlineWidth = defaultValue(options.outlineWidth, 0.0);\n\n  this._updateClamping();\n\n  this._splitDirection = defaultValue(\n    options.splitDirection,\n    SplitDirection.NONE,\n  );\n}\n\nconst SHOW_INDEX = (Billboard.SHOW_INDEX = 0);\nconst POSITION_INDEX = (Billboard.POSITION_INDEX = 1);\nconst PIXEL_OFFSET_INDEX = (Billboard.PIXEL_OFFSET_INDEX = 2);\nconst EYE_OFFSET_INDEX = (Billboard.EYE_OFFSET_INDEX = 3);\nconst HORIZONTAL_ORIGIN_INDEX = (Billboard.HORIZONTAL_ORIGIN_INDEX = 4);\nconst VERTICAL_ORIGIN_INDEX = (Billboard.VERTICAL_ORIGIN_INDEX = 5);\nconst SCALE_INDEX = (Billboard.SCALE_INDEX = 6);\nconst IMAGE_INDEX_INDEX = (Billboard.IMAGE_INDEX_INDEX = 7);\nconst COLOR_INDEX = (Billboard.COLOR_INDEX = 8);\nconst ROTATION_INDEX = (Billboard.ROTATION_INDEX = 9);\nconst ALIGNED_AXIS_INDEX = (Billboard.ALIGNED_AXIS_INDEX = 10);\nconst SCALE_BY_DISTANCE_INDEX = (Billboard.SCALE_BY_DISTANCE_INDEX = 11);\nconst TRANSLUCENCY_BY_DISTANCE_INDEX =\n  (Billboard.TRANSLUCENCY_BY_DISTANCE_INDEX = 12);\nconst PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX =\n  (Billboard.PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = 13);\nconst DISTANCE_DISPLAY_CONDITION = (Billboard.DISTANCE_DISPLAY_CONDITION = 14);\nconst DISABLE_DEPTH_DISTANCE = (Billboard.DISABLE_DEPTH_DISTANCE = 15);\nBillboard.TEXTURE_COORDINATE_BOUNDS = 16;\nconst SDF_INDEX = (Billboard.SDF_INDEX = 17);\nconst SPLIT_DIRECTION_INDEX = (Billboard.SPLIT_DIRECTION_INDEX = 18);\nBillboard.NUMBER_OF_PROPERTIES = 19;\n\nfunction makeDirty(billboard, propertyChanged) {\n  const billboardCollection = billboard._billboardCollection;\n  if (defined(billboardCollection)) {\n    billboardCollection._updateBillboard(billboard, propertyChanged);\n    billboard._dirty = true;\n  }\n}\n\nObject.defineProperties(Billboard.prototype, {\n  /**\n   * Determines if this billboard will be shown.  Use this to hide or show a billboard, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof Billboard.prototype\n   * @type {boolean}\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the Cartesian position of this billboard.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const position = this._position;\n      if (!Cartesian3.equals(position, value)) {\n        Cartesian3.clone(value, position);\n        Cartesian3.clone(value, this._actualPosition);\n        this._updateClamping();\n        makeDirty(this, POSITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the height reference of this billboard.\n   * @memberof Billboard.prototype\n   * @type {HeightReference}\n   * @default HeightReference.NONE\n   */\n  heightReference: {\n    get: function () {\n      return this._heightReference;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      const heightReference = this._heightReference;\n      if (value !== heightReference) {\n        this._heightReference = value;\n        this._updateClamping();\n        makeDirty(this, POSITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the pixel offset in screen space from the origin of this billboard.  This is commonly used\n   * to align multiple billboards and labels at the same position, e.g., an image and text.  The\n   * screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n   * left to right, and <code>y</code> increases from top to bottom.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src='Images/Billboard.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The billboard's origin is indicated by the yellow point.\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Cartesian2}\n   */\n  pixelOffset: {\n    get: function () {\n      return this._pixelOffset;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const pixelOffset = this._pixelOffset;\n      if (!Cartesian2.equals(pixelOffset, value)) {\n        Cartesian2.clone(value, pixelOffset);\n        makeDirty(this, PIXEL_OFFSET_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far scaling properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's scale remains clamped to the nearest bound.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's scaleByDistance to scale by 1.5 when the\n   * // camera is 1500 meters from the billboard and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * b.scaleByDistance = new Cesium.NearFarScalar(1.5e2, 1.5, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable scaling by distance\n   * b.scaleByDistance = undefined;\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.object(\"value\", value);\n        if (value.far <= value.near) {\n          throw new DeveloperError(\n            \"far distance must be greater than near distance.\",\n          );\n        }\n      }\n      //>>includeEnd('debug');\n\n      const scaleByDistance = this._scaleByDistance;\n      if (!NearFarScalar.equals(scaleByDistance, value)) {\n        this._scaleByDistance = NearFarScalar.clone(value, scaleByDistance);\n        makeDirty(this, SCALE_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far translucency properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's translucency remains clamped to the nearest bound.  If undefined,\n   * translucencyByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's translucency to 1.0 when the\n   * // camera is 1500 meters from the billboard and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * b.translucencyByDistance = new Cesium.NearFarScalar(1.5e2, 1.0, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable translucency by distance\n   * b.translucencyByDistance = undefined;\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.object(\"value\", value);\n        if (value.far <= value.near) {\n          throw new DeveloperError(\n            \"far distance must be greater than near distance.\",\n          );\n        }\n      }\n      //>>includeEnd('debug');\n\n      const translucencyByDistance = this._translucencyByDistance;\n      if (!NearFarScalar.equals(translucencyByDistance, value)) {\n        this._translucencyByDistance = NearFarScalar.clone(\n          value,\n          translucencyByDistance,\n        );\n        makeDirty(this, TRANSLUCENCY_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far pixel offset scaling properties of a Billboard based on the billboard's distance from the camera.\n   * A billboard's pixel offset will be scaled between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's pixel offset scale remains clamped to the nearest bound.  If undefined,\n   * pixelOffsetScaleByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard's pixel offset scale to 0.0 when the\n   * // camera is 1500 meters from the billboard and scale pixel offset to 10.0 pixels\n   * // in the y direction the camera distance approaches 8.0e6 meters.\n   * b.pixelOffset = new Cesium.Cartesian2(0.0, 1.0);\n   * b.pixelOffsetScaleByDistance = new Cesium.NearFarScalar(1.5e2, 0.0, 8.0e6, 10.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable pixel offset by distance\n   * b.pixelOffsetScaleByDistance = undefined;\n   */\n  pixelOffsetScaleByDistance: {\n    get: function () {\n      return this._pixelOffsetScaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.object(\"value\", value);\n        if (value.far <= value.near) {\n          throw new DeveloperError(\n            \"far distance must be greater than near distance.\",\n          );\n        }\n      }\n      //>>includeEnd('debug');\n\n      const pixelOffsetScaleByDistance = this._pixelOffsetScaleByDistance;\n      if (!NearFarScalar.equals(pixelOffsetScaleByDistance, value)) {\n        this._pixelOffsetScaleByDistance = NearFarScalar.clone(\n          value,\n          pixelOffsetScaleByDistance,\n        );\n        makeDirty(this, PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the 3D Cartesian offset applied to this billboard in eye coordinates.  Eye coordinates is a left-handed\n   * coordinate system, where <code>x</code> points towards the viewer's right, <code>y</code> points up, and\n   * <code>z</code> points into the screen.  Eye coordinates use the same scale as world and model coordinates,\n   * which is typically meters.\n   * <br /><br />\n   * An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to\n   * arrange a billboard above its corresponding 3D model.\n   * <br /><br />\n   * Below, the billboard is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code><br /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   */\n  eyeOffset: {\n    get: function () {\n      return this._eyeOffset;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const eyeOffset = this._eyeOffset;\n      if (!Cartesian3.equals(eyeOffset, value)) {\n        Cartesian3.clone(value, eyeOffset);\n        makeDirty(this, EYE_OFFSET_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this billboard, which determines if the billboard is\n   * to the left, center, or right of its anchor position.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setHorizontalOrigin.png' width='648' height='196' /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {HorizontalOrigin}\n   * @example\n   * // Use a bottom, left origin\n   * b.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;\n   * b.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._horizontalOrigin !== value) {\n        this._horizontalOrigin = value;\n        makeDirty(this, HORIZONTAL_ORIGIN_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the vertical origin of this billboard, which determines if the billboard is\n   * to the above, below, or at the center of its anchor position.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setVerticalOrigin.png' width='695' height='175' /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {VerticalOrigin}\n   * @example\n   * // Use a bottom, left origin\n   * b.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;\n   * b.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._verticalOrigin !== value) {\n        this._verticalOrigin = value;\n        makeDirty(this, VERTICAL_ORIGIN_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the uniform scale that is multiplied with the billboard's image size in pixels.\n   * A scale of <code>1.0</code> does not change the size of the billboard; a scale greater than\n   * <code>1.0</code> enlarges the billboard; a positive scale less than <code>1.0</code> shrinks\n   * the billboard.\n   * <br /><br />\n   * <div align='center'>\n   * <img src='Images/Billboard.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>,\n   * and <code>2.0</code>.\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {number}\n   */\n  scale: {\n    get: function () {\n      return this._scale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._scale !== value) {\n        this._scale = value;\n        makeDirty(this, SCALE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the color that is multiplied with the billboard's texture.  This has two common use cases.  First,\n   * the same white texture may be used by many different billboards, each with a different color, to create\n   * colored billboards.  Second, the color's alpha component can be used to make the billboard translucent as shown below.\n   * An alpha of <code>0.0</code> makes the billboard transparent, and <code>1.0</code> makes the billboard opaque.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setColor.Alpha255.png' width='250' height='188' /></td>\n   * <td align='center'><code>alpha : 0.5</code><br/><img src='Images/Billboard.setColor.Alpha127.png' width='250' height='188' /></td>\n   * </tr></table>\n   * </div>\n   * <br />\n   * The red, green, blue, and alpha values are indicated by <code>value</code>'s <code>red</code>, <code>green</code>,\n   * <code>blue</code>, and <code>alpha</code> properties as shown in Example 1.  These components range from <code>0.0</code>\n   * (no intensity) to <code>1.0</code> (full intensity).\n   * @memberof Billboard.prototype\n   * @type {Color}\n   *\n   * @example\n   * // Example 1. Assign yellow.\n   * b.color = Cesium.Color.YELLOW;\n   *\n   * @example\n   * // Example 2. Make a billboard 50% translucent.\n   * b.color = new Cesium.Color(1.0, 1.0, 1.0, 0.5);\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const color = this._color;\n      if (!Color.equals(color, value)) {\n        Color.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the rotation angle in radians.\n   * @memberof Billboard.prototype\n   * @type {number}\n   */\n  rotation: {\n    get: function () {\n      return this._rotation;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._rotation !== value) {\n        this._rotation = value;\n        makeDirty(this, ROTATION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the aligned axis in world space. The aligned axis is the unit vector that the billboard up vector points towards.\n   * The default is the zero vector, which means the billboard is aligned to the screen up vector.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   * @example\n   * // Example 1.\n   * // Have the billboard up vector point north\n   * billboard.alignedAxis = Cesium.Cartesian3.UNIT_Z;\n   *\n   * @example\n   * // Example 2.\n   * // Have the billboard point east.\n   * billboard.alignedAxis = Cesium.Cartesian3.UNIT_Z;\n   * billboard.rotation = -Cesium.Math.PI_OVER_TWO;\n   *\n   * @example\n   * // Example 3.\n   * // Reset the aligned axis\n   * billboard.alignedAxis = Cesium.Cartesian3.ZERO;\n   */\n  alignedAxis: {\n    get: function () {\n      return this._alignedAxis;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const alignedAxis = this._alignedAxis;\n      if (!Cartesian3.equals(alignedAxis, value)) {\n        Cartesian3.clone(value, alignedAxis);\n        makeDirty(this, ALIGNED_AXIS_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets a width for the billboard. If undefined, the image width will be used.\n   * @memberof Billboard.prototype\n   * @type {number}\n   */\n  width: {\n    get: function () {\n      return defaultValue(this._width, this._imageWidth);\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.number(\"value\", value);\n      }\n      //>>includeEnd('debug');\n      if (this._width !== value) {\n        this._width = value;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets a height for the billboard. If undefined, the image height will be used.\n   * @memberof Billboard.prototype\n   * @type {number}\n   */\n  height: {\n    get: function () {\n      return defaultValue(this._height, this._imageHeight);\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.number(\"value\", value);\n      }\n      //>>includeEnd('debug');\n      if (this._height !== value) {\n        this._height = value;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets if the billboard size is in meters or pixels. <code>true</code> to size the billboard in meters;\n   * otherwise, the size is in pixels.\n   * @memberof Billboard.prototype\n   * @type {boolean}\n   * @default false\n   */\n  sizeInMeters: {\n    get: function () {\n      return this._sizeInMeters;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"value\", value);\n      //>>includeEnd('debug');\n      if (this._sizeInMeters !== value) {\n        this._sizeInMeters = value;\n        makeDirty(this, COLOR_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this billboard will be displayed.\n   * @memberof Billboard.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      if (\n        !DistanceDisplayCondition.equals(value, this._distanceDisplayCondition)\n      ) {\n        //>>includeStart('debug', pragmas.debug);\n        if (defined(value)) {\n          Check.typeOf.object(\"value\", value);\n          if (value.far <= value.near) {\n            throw new DeveloperError(\n              \"far distance must be greater than near distance.\",\n            );\n          }\n        }\n        //>>includeEnd('debug');\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(\n          value,\n          this._distanceDisplayCondition,\n        );\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof Billboard.prototype\n   * @type {number}\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value)) {\n        Check.typeOf.number(\"value\", value);\n        if (value < 0.0) {\n          throw new DeveloperError(\n            \"disableDepthTestDistance must be greater than or equal to 0.0.\",\n          );\n        }\n      }\n      //>>includeEnd('debug');\n      if (this._disableDepthTestDistance !== value) {\n        this._disableDepthTestDistance = value;\n        makeDirty(this, DISABLE_DEPTH_DISTANCE);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the user-defined object returned when the billboard is picked.\n   * @memberof Billboard.prototype\n   * @type {*}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    },\n  },\n\n  /**\n   * The primitive to return when picking this billboard.\n   * @memberof Billboard.prototype\n   * @private\n   */\n  pickPrimitive: {\n    get: function () {\n      return this._pickPrimitive;\n    },\n    set: function (value) {\n      this._pickPrimitive = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.primitive = value;\n      }\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n  },\n\n  /**\n   * <p>\n   * Gets or sets the image to be used for this billboard.  If a texture has already been created for the\n   * given image, the existing texture is used.\n   * </p>\n   * <p>\n   * This property can be set to a loaded Image, a URL which will be loaded as an Image automatically,\n   * a canvas, or another billboard's image property (from the same billboard collection).\n   * </p>\n   *\n   * @memberof Billboard.prototype\n   * @type {string}\n   * @example\n   * // load an image from a URL\n   * b.image = 'some/image/url.png';\n   *\n   * // assuming b1 and b2 are billboards in the same billboard collection,\n   * // use the same image for both billboards.\n   * b2.image = b1.image;\n   */\n  image: {\n    get: function () {\n      return this._imageId;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        this._imageIndex = -1;\n        this._imageSubRegion = undefined;\n        this._imageId = undefined;\n        this._image = undefined;\n        this._imageIndexPromise = undefined;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      } else if (typeof value === \"string\") {\n        this.setImage(value, value);\n      } else if (value instanceof Resource) {\n        this.setImage(value.url, value);\n      } else if (defined(value.src)) {\n        this.setImage(value.src, value);\n      } else {\n        this.setImage(createGuid(), value);\n      }\n    },\n  },\n\n  /**\n   * When <code>true</code>, this billboard is ready to render, i.e., the image\n   * has been downloaded and the WebGL resources are created.\n   *\n   * @memberof Billboard.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return this._imageIndex !== -1;\n    },\n  },\n\n  /**\n   * Keeps track of the position of the billboard based on the height reference.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   * @private\n   */\n  _clampedPosition: {\n    get: function () {\n      return this._actualClampedPosition;\n    },\n    set: function (value) {\n      this._actualClampedPosition = Cartesian3.clone(\n        value,\n        this._actualClampedPosition,\n      );\n      makeDirty(this, POSITION_INDEX);\n    },\n  },\n\n  /**\n   * Determines whether or not this billboard will be shown or hidden because it was clustered.\n   * @memberof Billboard.prototype\n   * @type {boolean}\n   * @private\n   */\n  clusterShow: {\n    get: function () {\n      return this._clusterShow;\n    },\n    set: function (value) {\n      if (this._clusterShow !== value) {\n        this._clusterShow = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * The outline color of this Billboard.  Effective only for SDF billboards like Label glyphs.\n   * @memberof Billboard.prototype\n   * @type {Color}\n   * @private\n   */\n  outlineColor: {\n    get: function () {\n      return this._outlineColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      const outlineColor = this._outlineColor;\n      if (!Color.equals(outlineColor, value)) {\n        Color.clone(value, outlineColor);\n        makeDirty(this, SDF_INDEX);\n      }\n    },\n  },\n\n  /**\n   * The outline width of this Billboard in pixels.  Effective only for SDF billboards like Label glyphs.\n   * @memberof Billboard.prototype\n   * @type {number}\n   * @private\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n    set: function (value) {\n      if (this._outlineWidth !== value) {\n        this._outlineWidth = value;\n        makeDirty(this, SDF_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the {@link SplitDirection} of this billboard.\n   * @memberof Billboard.prototype\n   * @type {SplitDirection}\n   * @default {@link SplitDirection.NONE}\n   */\n  splitDirection: {\n    get: function () {\n      return this._splitDirection;\n    },\n    set: function (value) {\n      if (this._splitDirection !== value) {\n        this._splitDirection = value;\n        makeDirty(this, SPLIT_DIRECTION_INDEX);\n      }\n    },\n  },\n});\n\nBillboard.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this._pickPrimitive,\n      collection: this._collection,\n      id: this._id,\n    });\n  }\n\n  return this._pickId;\n};\n\nBillboard.prototype._updateClamping = function () {\n  Billboard._updateClamping(this._billboardCollection, this);\n};\n\nconst scratchCartographic = new Cartographic();\nBillboard._updateClamping = function (collection, owner) {\n  const scene = collection._scene;\n  if (!defined(scene)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (owner._heightReference !== HeightReference.NONE) {\n      throw new DeveloperError(\n        \"Height reference is not supported without a scene.\",\n      );\n    }\n    //>>includeEnd('debug');\n    return;\n  }\n\n  const ellipsoid = defaultValue(scene.ellipsoid, Ellipsoid.default);\n\n  const mode = scene.frameState.mode;\n\n  const modeChanged = mode !== owner._mode;\n  owner._mode = mode;\n\n  if (\n    (owner._heightReference === HeightReference.NONE || modeChanged) &&\n    defined(owner._removeCallbackFunc)\n  ) {\n    owner._removeCallbackFunc();\n    owner._removeCallbackFunc = undefined;\n    owner._clampedPosition = undefined;\n  }\n\n  if (\n    owner._heightReference === HeightReference.NONE ||\n    !defined(owner._position)\n  ) {\n    return;\n  }\n\n  if (defined(owner._removeCallbackFunc)) {\n    owner._removeCallbackFunc();\n  }\n\n  const position = ellipsoid.cartesianToCartographic(owner._position);\n  if (!defined(position)) {\n    owner._actualClampedPosition = undefined;\n    return;\n  }\n\n  function updateFunction(clampedPosition) {\n    const updatedClampedPosition = ellipsoid.cartographicToCartesian(\n      clampedPosition,\n      owner._clampedPosition,\n    );\n\n    if (isHeightReferenceRelative(owner._heightReference)) {\n      if (owner._mode === SceneMode.SCENE3D) {\n        clampedPosition.height += position.height;\n        ellipsoid.cartographicToCartesian(\n          clampedPosition,\n          updatedClampedPosition,\n        );\n      } else {\n        updatedClampedPosition.x += position.height;\n      }\n    }\n\n    owner._clampedPosition = updatedClampedPosition;\n  }\n\n  owner._removeCallbackFunc = scene.updateHeight(\n    position,\n    updateFunction,\n    owner._heightReference,\n  );\n\n  Cartographic.clone(position, scratchCartographic);\n  const height = scene.getHeight(position, owner._heightReference);\n  if (defined(height)) {\n    scratchCartographic.height = height;\n  }\n\n  updateFunction(scratchCartographic);\n};\n\nBillboard.prototype._loadImage = function () {\n  const atlas = this._billboardCollection._textureAtlas;\n\n  const imageId = this._imageId;\n  const image = this._image;\n  const imageSubRegion = this._imageSubRegion;\n  let imageIndexPromise;\n\n  const that = this;\n  function completeImageLoad(index) {\n    if (\n      that._imageId !== imageId ||\n      that._image !== image ||\n      !BoundingRectangle.equals(that._imageSubRegion, imageSubRegion)\n    ) {\n      // another load occurred before this one finished, ignore the index\n      return;\n    }\n\n    // fill in imageWidth and imageHeight\n    const textureCoordinates = atlas.textureCoordinates[index];\n    that._imageWidth = atlas.texture.width * textureCoordinates.width;\n    that._imageHeight = atlas.texture.height * textureCoordinates.height;\n\n    that._imageIndex = index;\n    that._ready = true;\n    that._image = undefined;\n    that._imageIndexPromise = undefined;\n    makeDirty(that, IMAGE_INDEX_INDEX);\n\n    const scene = that._billboardCollection._scene;\n    if (!defined(scene)) {\n      return;\n    }\n    // Request a new render in request render mode\n    scene.frameState.afterRender.push(() => true);\n  }\n\n  if (defined(image)) {\n    imageIndexPromise = atlas.addImage(imageId, image);\n  }\n  if (defined(imageSubRegion)) {\n    imageIndexPromise = atlas.addSubRegion(imageId, imageSubRegion);\n  }\n\n  this._imageIndexPromise = imageIndexPromise;\n\n  if (!defined(imageIndexPromise)) {\n    return;\n  }\n\n  // If the promise has already successfully resolved, we can return immediately without waiting a frame\n  const index = atlas.getImageIndex(imageId);\n  if (defined(index) && !defined(imageSubRegion)) {\n    completeImageLoad(index);\n    return;\n  }\n\n  imageIndexPromise.then(completeImageLoad).catch(function (error) {\n    console.error(`Error loading image for billboard: ${error}`);\n    that._imageIndexPromise = undefined;\n  });\n};\n\n/**\n * <p>\n * Sets the image to be used for this billboard.  If a texture has already been created for the\n * given id, the existing texture is used.\n * </p>\n * <p>\n * This function is useful for dynamically creating textures that are shared across many billboards.\n * Only the first billboard will actually call the function and create the texture, while subsequent\n * billboards created with the same id will simply re-use the existing texture.\n * </p>\n * <p>\n * To load an image from a URL, setting the {@link Billboard#image} property is more convenient.\n * </p>\n *\n * @param {string} id The id of the image.  This can be any string that uniquely identifies the image.\n * @param {HTMLImageElement|HTMLCanvasElement|string|Resource|Billboard.CreateImageCallback} image The image to load.  This parameter\n *        can either be a loaded Image or Canvas, a URL which will be loaded as an Image automatically,\n *        or a function which will be called to create the image if it hasn't been loaded already.\n * @example\n * // create a billboard image dynamically\n * function drawImage(id) {\n *   // create and draw an image using a canvas\n *   const canvas = document.createElement('canvas');\n *   const context2D = canvas.getContext('2d');\n *   // ... draw image\n *   return canvas;\n * }\n * // drawImage will be called to create the texture\n * b.setImage('myImage', drawImage);\n *\n * // subsequent billboards created in the same collection using the same id will use the existing\n * // texture, without the need to create the canvas or draw the image\n * b2.setImage('myImage', drawImage);\n */\nBillboard.prototype.setImage = function (id, image) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n  if (!defined(image)) {\n    throw new DeveloperError(\"image is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (this._imageId === id) {\n    return;\n  }\n\n  this._imageIndex = -1;\n  this._imageSubRegion = undefined;\n  this._imageId = id;\n  this._image = image;\n\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n};\n\n/**\n * Uses a sub-region of the image with the given id as the image for this billboard,\n * measured in pixels from the bottom-left.\n *\n * @param {string} id The id of the image to use.\n * @param {BoundingRectangle} subRegion The sub-region of the image.\n *\n * @exception {RuntimeError} image with id must be in the atlas\n */\nBillboard.prototype.setImageSubRegion = function (id, subRegion) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n  if (!defined(subRegion)) {\n    throw new DeveloperError(\"subRegion is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (\n    this._imageId === id &&\n    BoundingRectangle.equals(this._imageSubRegion, subRegion)\n  ) {\n    return;\n  }\n\n  this._imageIndex = -1;\n  this._imageId = id;\n  this._imageSubRegion = BoundingRectangle.clone(subRegion);\n\n  if (defined(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n};\n\nBillboard.prototype._setTranslate = function (value) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const translate = this._translate;\n  if (!Cartesian2.equals(translate, value)) {\n    Cartesian2.clone(value, translate);\n    makeDirty(this, PIXEL_OFFSET_INDEX);\n  }\n};\n\nBillboard.prototype._getActualPosition = function () {\n  return defined(this._clampedPosition)\n    ? this._clampedPosition\n    : this._actualPosition;\n};\n\nBillboard.prototype._setActualPosition = function (value) {\n  if (!defined(this._clampedPosition)) {\n    Cartesian3.clone(value, this._actualPosition);\n  }\n  makeDirty(this, POSITION_INDEX);\n};\n\nconst tempCartesian3 = new Cartesian4();\nBillboard._computeActualPosition = function (\n  billboard,\n  position,\n  frameState,\n  modelMatrix,\n) {\n  if (defined(billboard._clampedPosition)) {\n    if (frameState.mode !== billboard._mode) {\n      billboard._updateClamping();\n    }\n    return billboard._clampedPosition;\n  } else if (frameState.mode === SceneMode.SCENE3D) {\n    return position;\n  }\n\n  Matrix4.multiplyByPoint(modelMatrix, position, tempCartesian3);\n  return SceneTransforms.computeActualEllipsoidPosition(\n    frameState,\n    tempCartesian3,\n  );\n};\n\nconst scratchCartesian3 = new Cartesian3();\n\n// This function is basically a stripped-down JavaScript version of BillboardCollectionVS.glsl\nBillboard._computeScreenSpacePosition = function (\n  modelMatrix,\n  position,\n  eyeOffset,\n  pixelOffset,\n  scene,\n  result,\n) {\n  // Model to world coordinates\n  const positionWorld = Matrix4.multiplyByPoint(\n    modelMatrix,\n    position,\n    scratchCartesian3,\n  );\n\n  // World to window coordinates\n  const positionWC = SceneTransforms.worldWithEyeOffsetToWindowCoordinates(\n    scene,\n    positionWorld,\n    eyeOffset,\n    result,\n  );\n  if (!defined(positionWC)) {\n    return undefined;\n  }\n\n  // Apply pixel offset\n  Cartesian2.add(positionWC, pixelOffset, positionWC);\n\n  return positionWC;\n};\n\nconst scratchPixelOffset = new Cartesian2(0.0, 0.0);\n\n/**\n * Computes the screen-space position of the billboard's origin, taking into account eye and pixel offsets.\n * The screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n * left to right, and <code>y</code> increases from top to bottom.\n *\n * @param {Scene} scene The scene.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The screen-space position of the billboard.\n *\n * @exception {DeveloperError} Billboard must be in a collection.\n *\n * @example\n * console.log(b.computeScreenSpacePosition(scene).toString());\n *\n * @see Billboard#eyeOffset\n * @see Billboard#pixelOffset\n */\nBillboard.prototype.computeScreenSpacePosition = function (scene, result) {\n  const billboardCollection = this._billboardCollection;\n  if (!defined(result)) {\n    result = new Cartesian2();\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(billboardCollection)) {\n    throw new DeveloperError(\n      \"Billboard must be in a collection.  Was it removed?\",\n    );\n  }\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  // pixel offset for screen space computation is the pixelOffset + screen space translate\n  Cartesian2.clone(this._pixelOffset, scratchPixelOffset);\n  Cartesian2.add(scratchPixelOffset, this._translate, scratchPixelOffset);\n\n  let modelMatrix = billboardCollection.modelMatrix;\n  let position = this._position;\n  if (defined(this._clampedPosition)) {\n    position = this._clampedPosition;\n    if (scene.mode !== SceneMode.SCENE3D) {\n      // position needs to be in world coordinates\n      const projection = scene.mapProjection;\n      const ellipsoid = projection.ellipsoid;\n      const cart = projection.unproject(position, scratchCartographic);\n      position = ellipsoid.cartographicToCartesian(cart, scratchCartesian3);\n      modelMatrix = Matrix4.IDENTITY;\n    }\n  }\n\n  const windowCoordinates = Billboard._computeScreenSpacePosition(\n    modelMatrix,\n    position,\n    this._eyeOffset,\n    scratchPixelOffset,\n    scene,\n    result,\n  );\n  return windowCoordinates;\n};\n\n/**\n * Gets a billboard's screen space bounding box centered around screenSpacePosition.\n * @param {Billboard} billboard The billboard to get the screen space bounding box for.\n * @param {Cartesian2} screenSpacePosition The screen space center of the label.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The screen space bounding box.\n *\n * @private\n */\nBillboard.getScreenSpaceBoundingBox = function (\n  billboard,\n  screenSpacePosition,\n  result,\n) {\n  let width = billboard.width;\n  let height = billboard.height;\n\n  const scale = billboard.scale;\n  width *= scale;\n  height *= scale;\n\n  let x = screenSpacePosition.x;\n  if (billboard.horizontalOrigin === HorizontalOrigin.RIGHT) {\n    x -= width;\n  } else if (billboard.horizontalOrigin === HorizontalOrigin.CENTER) {\n    x -= width * 0.5;\n  }\n\n  let y = screenSpacePosition.y;\n  if (\n    billboard.verticalOrigin === VerticalOrigin.BOTTOM ||\n    billboard.verticalOrigin === VerticalOrigin.BASELINE\n  ) {\n    y -= height;\n  } else if (billboard.verticalOrigin === VerticalOrigin.CENTER) {\n    y -= height * 0.5;\n  }\n\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n\n  return result;\n};\n\n/**\n * Determines if this billboard equals another billboard.  Billboards are equal if all their properties\n * are equal.  Billboards in different collections can be equal.\n *\n * @param {Billboard} other The billboard to compare for equality.\n * @returns {boolean} <code>true</code> if the billboards are equal; otherwise, <code>false</code>.\n */\nBillboard.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (defined(other) &&\n      this._id === other._id &&\n      Cartesian3.equals(this._position, other._position) &&\n      this._imageId === other._imageId &&\n      this._show === other._show &&\n      this._scale === other._scale &&\n      this._verticalOrigin === other._verticalOrigin &&\n      this._horizontalOrigin === other._horizontalOrigin &&\n      this._heightReference === other._heightReference &&\n      BoundingRectangle.equals(this._imageSubRegion, other._imageSubRegion) &&\n      Color.equals(this._color, other._color) &&\n      Cartesian2.equals(this._pixelOffset, other._pixelOffset) &&\n      Cartesian2.equals(this._translate, other._translate) &&\n      Cartesian3.equals(this._eyeOffset, other._eyeOffset) &&\n      NearFarScalar.equals(this._scaleByDistance, other._scaleByDistance) &&\n      NearFarScalar.equals(\n        this._translucencyByDistance,\n        other._translucencyByDistance,\n      ) &&\n      NearFarScalar.equals(\n        this._pixelOffsetScaleByDistance,\n        other._pixelOffsetScaleByDistance,\n      ) &&\n      DistanceDisplayCondition.equals(\n        this._distanceDisplayCondition,\n        other._distanceDisplayCondition,\n      ) &&\n      this._disableDepthTestDistance === other._disableDepthTestDistance &&\n      this._splitDirection === other._splitDirection)\n  );\n};\n\nBillboard.prototype._destroy = function () {\n  if (defined(this._customData)) {\n    this._billboardCollection._scene.globe._surface.removeTileCustomData(\n      this._customData,\n    );\n    this._customData = undefined;\n  }\n\n  if (defined(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n    this._removeCallbackFunc = undefined;\n  }\n\n  this.image = undefined;\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._billboardCollection = undefined;\n};\n\n/**\n * A function that creates an image.\n * @callback Billboard.CreateImageCallback\n * @param {string} id The identifier of the image to load.\n * @returns {HTMLImageElement|HTMLCanvasElement|Promise<HTMLImageElement|HTMLCanvasElement>} The image, or a promise that will resolve to an image.\n */\nexport default Billboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}