{"ast":null,"code":"import addExtensionsUsed from \"./addExtensionsUsed.js\";\nimport ForEach from \"./ForEach.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport WebGLConstants from \"../../Core/WebGLConstants.js\";\nconst defaultBlendEquation = [WebGLConstants.FUNC_ADD, WebGLConstants.FUNC_ADD];\nconst defaultBlendFactors = [WebGLConstants.ONE, WebGLConstants.ZERO, WebGLConstants.ONE, WebGLConstants.ZERO];\nfunction isStateEnabled(renderStates, state) {\n  const enabled = renderStates.enable;\n  if (!defined(enabled)) {\n    return false;\n  }\n  return enabled.indexOf(state) > -1;\n}\nconst supportedBlendFactors = [WebGLConstants.ZERO, WebGLConstants.ONE, WebGLConstants.SRC_COLOR, WebGLConstants.ONE_MINUS_SRC_COLOR, WebGLConstants.SRC_ALPHA, WebGLConstants.ONE_MINUS_SRC_ALPHA, WebGLConstants.DST_ALPHA, WebGLConstants.ONE_MINUS_DST_ALPHA, WebGLConstants.DST_COLOR, WebGLConstants.ONE_MINUS_DST_COLOR];\n\n// If any of the blend factors are not supported, return the default\nfunction getSupportedBlendFactors(value, defaultValue) {\n  if (!defined(value)) {\n    return defaultValue;\n  }\n  for (let i = 0; i < 4; i++) {\n    if (supportedBlendFactors.indexOf(value[i]) === -1) {\n      return defaultValue;\n    }\n  }\n  return value;\n}\n\n/**\n * Move glTF 1.0 technique render states to glTF 2.0 materials properties and KHR_blend extension.\n *\n * @param {object} gltf A javascript object containing a glTF asset.\n * @returns {object} The updated glTF asset.\n *\n * @private\n */\nfunction moveTechniqueRenderStates(gltf) {\n  const blendingForTechnique = {};\n  const materialPropertiesForTechnique = {};\n  const techniquesLegacy = gltf.techniques;\n  if (!defined(techniquesLegacy)) {\n    return gltf;\n  }\n  ForEach.technique(gltf, function (techniqueLegacy, techniqueIndex) {\n    const renderStates = techniqueLegacy.states;\n    if (defined(renderStates)) {\n      const materialProperties = materialPropertiesForTechnique[techniqueIndex] = {};\n\n      // If BLEND is enabled, the material should have alpha mode BLEND\n      if (isStateEnabled(renderStates, WebGLConstants.BLEND)) {\n        materialProperties.alphaMode = \"BLEND\";\n        const blendFunctions = renderStates.functions;\n        if (defined(blendFunctions) && (defined(blendFunctions.blendEquationSeparate) || defined(blendFunctions.blendFuncSeparate))) {\n          blendingForTechnique[techniqueIndex] = {\n            blendEquation: defaultValue(blendFunctions.blendEquationSeparate, defaultBlendEquation),\n            blendFactors: getSupportedBlendFactors(blendFunctions.blendFuncSeparate, defaultBlendFactors)\n          };\n        }\n      }\n\n      // If CULL_FACE is not enabled, the material should be doubleSided\n      if (!isStateEnabled(renderStates, WebGLConstants.CULL_FACE)) {\n        materialProperties.doubleSided = true;\n      }\n      delete techniqueLegacy.states;\n    }\n  });\n  if (Object.keys(blendingForTechnique).length > 0) {\n    if (!defined(gltf.extensions)) {\n      gltf.extensions = {};\n    }\n    addExtensionsUsed(gltf, \"KHR_blend\");\n  }\n  ForEach.material(gltf, function (material) {\n    if (defined(material.technique)) {\n      const materialProperties = materialPropertiesForTechnique[material.technique];\n      ForEach.objectLegacy(materialProperties, function (value, property) {\n        material[property] = value;\n      });\n      const blending = blendingForTechnique[material.technique];\n      if (defined(blending)) {\n        if (!defined(material.extensions)) {\n          material.extensions = {};\n        }\n        material.extensions.KHR_blend = blending;\n      }\n    }\n  });\n  return gltf;\n}\nexport default moveTechniqueRenderStates;","map":{"version":3,"names":["addExtensionsUsed","ForEach","defaultValue","defined","WebGLConstants","defaultBlendEquation","FUNC_ADD","defaultBlendFactors","ONE","ZERO","isStateEnabled","renderStates","state","enabled","enable","indexOf","supportedBlendFactors","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","getSupportedBlendFactors","value","i","moveTechniqueRenderStates","gltf","blendingForTechnique","materialPropertiesForTechnique","techniquesLegacy","techniques","technique","techniqueLegacy","techniqueIndex","states","materialProperties","BLEND","alphaMode","blendFunctions","functions","blendEquationSeparate","blendFuncSeparate","blendEquation","blendFactors","CULL_FACE","doubleSided","Object","keys","length","extensions","material","objectLegacy","property","blending","KHR_blend"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GltfPipeline/moveTechniqueRenderStates.js"],"sourcesContent":["import addExtensionsUsed from \"./addExtensionsUsed.js\";\nimport ForEach from \"./ForEach.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport WebGLConstants from \"../../Core/WebGLConstants.js\";\n\nconst defaultBlendEquation = [WebGLConstants.FUNC_ADD, WebGLConstants.FUNC_ADD];\n\nconst defaultBlendFactors = [\n  WebGLConstants.ONE,\n  WebGLConstants.ZERO,\n  WebGLConstants.ONE,\n  WebGLConstants.ZERO,\n];\n\nfunction isStateEnabled(renderStates, state) {\n  const enabled = renderStates.enable;\n  if (!defined(enabled)) {\n    return false;\n  }\n\n  return enabled.indexOf(state) > -1;\n}\n\nconst supportedBlendFactors = [\n  WebGLConstants.ZERO,\n  WebGLConstants.ONE,\n  WebGLConstants.SRC_COLOR,\n  WebGLConstants.ONE_MINUS_SRC_COLOR,\n  WebGLConstants.SRC_ALPHA,\n  WebGLConstants.ONE_MINUS_SRC_ALPHA,\n  WebGLConstants.DST_ALPHA,\n  WebGLConstants.ONE_MINUS_DST_ALPHA,\n  WebGLConstants.DST_COLOR,\n  WebGLConstants.ONE_MINUS_DST_COLOR,\n];\n\n// If any of the blend factors are not supported, return the default\nfunction getSupportedBlendFactors(value, defaultValue) {\n  if (!defined(value)) {\n    return defaultValue;\n  }\n\n  for (let i = 0; i < 4; i++) {\n    if (supportedBlendFactors.indexOf(value[i]) === -1) {\n      return defaultValue;\n    }\n  }\n\n  return value;\n}\n\n/**\n * Move glTF 1.0 technique render states to glTF 2.0 materials properties and KHR_blend extension.\n *\n * @param {object} gltf A javascript object containing a glTF asset.\n * @returns {object} The updated glTF asset.\n *\n * @private\n */\nfunction moveTechniqueRenderStates(gltf) {\n  const blendingForTechnique = {};\n  const materialPropertiesForTechnique = {};\n  const techniquesLegacy = gltf.techniques;\n  if (!defined(techniquesLegacy)) {\n    return gltf;\n  }\n\n  ForEach.technique(gltf, function (techniqueLegacy, techniqueIndex) {\n    const renderStates = techniqueLegacy.states;\n    if (defined(renderStates)) {\n      const materialProperties = (materialPropertiesForTechnique[\n        techniqueIndex\n      ] = {});\n\n      // If BLEND is enabled, the material should have alpha mode BLEND\n      if (isStateEnabled(renderStates, WebGLConstants.BLEND)) {\n        materialProperties.alphaMode = \"BLEND\";\n\n        const blendFunctions = renderStates.functions;\n        if (\n          defined(blendFunctions) &&\n          (defined(blendFunctions.blendEquationSeparate) ||\n            defined(blendFunctions.blendFuncSeparate))\n        ) {\n          blendingForTechnique[techniqueIndex] = {\n            blendEquation: defaultValue(\n              blendFunctions.blendEquationSeparate,\n              defaultBlendEquation\n            ),\n            blendFactors: getSupportedBlendFactors(\n              blendFunctions.blendFuncSeparate,\n              defaultBlendFactors\n            ),\n          };\n        }\n      }\n\n      // If CULL_FACE is not enabled, the material should be doubleSided\n      if (!isStateEnabled(renderStates, WebGLConstants.CULL_FACE)) {\n        materialProperties.doubleSided = true;\n      }\n\n      delete techniqueLegacy.states;\n    }\n  });\n\n  if (Object.keys(blendingForTechnique).length > 0) {\n    if (!defined(gltf.extensions)) {\n      gltf.extensions = {};\n    }\n\n    addExtensionsUsed(gltf, \"KHR_blend\");\n  }\n\n  ForEach.material(gltf, function (material) {\n    if (defined(material.technique)) {\n      const materialProperties =\n        materialPropertiesForTechnique[material.technique];\n      ForEach.objectLegacy(materialProperties, function (value, property) {\n        material[property] = value;\n      });\n\n      const blending = blendingForTechnique[material.technique];\n      if (defined(blending)) {\n        if (!defined(material.extensions)) {\n          material.extensions = {};\n        }\n\n        material.extensions.KHR_blend = blending;\n      }\n    }\n  });\n\n  return gltf;\n}\n\nexport default moveTechniqueRenderStates;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}