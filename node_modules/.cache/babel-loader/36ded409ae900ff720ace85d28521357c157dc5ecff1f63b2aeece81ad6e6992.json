{"ast":null,"code":"import defined from \"./defined.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\n/**\n * Functions for generating indices for model wireframes. The indices are\n * outputted as typed arrays, which can then be put into buffers for rendering.\n *\n * @namespace WireframeIndexGenerator\n * @private\n */\nconst WireframeIndexGenerator = {};\nfunction createWireframeFromTriangles(vertexCount) {\n  const wireframeIndices = IndexDatatype.createTypedArray(vertexCount, vertexCount * 2);\n  const length = vertexCount;\n  let index = 0;\n  for (let i = 0; i < length; i += 3) {\n    wireframeIndices[index++] = i;\n    wireframeIndices[index++] = i + 1;\n    wireframeIndices[index++] = i + 1;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = i;\n  }\n  return wireframeIndices;\n}\nfunction createWireframeFromTriangleIndices(vertexCount, originalIndices) {\n  const originalIndicesCount = originalIndices.length;\n  const wireframeIndices = IndexDatatype.createTypedArray(vertexCount, originalIndicesCount * 2);\n  let index = 0;\n  for (let i = 0; i < originalIndicesCount; i += 3) {\n    const point0 = originalIndices[i];\n    const point1 = originalIndices[i + 1];\n    const point2 = originalIndices[i + 2];\n    wireframeIndices[index++] = point0;\n    wireframeIndices[index++] = point1;\n    wireframeIndices[index++] = point1;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = point0;\n  }\n  return wireframeIndices;\n}\nfunction createWireframeFromTriangleStrip(vertexCount) {\n  const numberOfTriangles = vertexCount - 2;\n  const wireframeIndicesCount = 2 + numberOfTriangles * 4;\n  const wireframeIndices = IndexDatatype.createTypedArray(vertexCount, wireframeIndicesCount);\n  let index = 0;\n\n  // Handle the first edge\n  wireframeIndices[index++] = 0;\n  wireframeIndices[index++] = 1;\n\n  // Add two edges for every triangle in the strip\n  for (let i = 0; i < numberOfTriangles; i++) {\n    wireframeIndices[index++] = i + 1;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = i;\n  }\n  return wireframeIndices;\n}\nfunction createWireframeFromTriangleStripIndices(vertexCount, originalIndices) {\n  const originalIndicesCount = originalIndices.length;\n  const numberOfTriangles = originalIndicesCount - 2;\n  const wireframeIndicesCount = 2 + numberOfTriangles * 4;\n  const wireframeIndices = IndexDatatype.createTypedArray(vertexCount, wireframeIndicesCount);\n  let index = 0;\n\n  // Handle the first edge\n  wireframeIndices[index++] = originalIndices[0];\n  wireframeIndices[index++] = originalIndices[1];\n\n  // Add two edges for every triangle in the strip\n  for (let i = 0; i < numberOfTriangles; i++) {\n    const point0 = originalIndices[i];\n    const point1 = originalIndices[i + 1];\n    const point2 = originalIndices[i + 2];\n    wireframeIndices[index++] = point1;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = point0;\n  }\n  return wireframeIndices;\n}\nfunction createWireframeFromTriangleFan(vertexCount) {\n  const numberOfTriangles = vertexCount - 2;\n  const wireframeIndicesCount = 2 + numberOfTriangles * 4;\n  const wireframeIndices = IndexDatatype.createTypedArray(vertexCount, wireframeIndicesCount);\n  let index = 0;\n\n  // Handle the first edge\n  wireframeIndices[index++] = 0;\n  wireframeIndices[index++] = 1;\n\n  // Add two edges for every triangle in the fan\n  for (let i = 0; i < numberOfTriangles; i++) {\n    wireframeIndices[index++] = i + 1;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = 0;\n  }\n  return wireframeIndices;\n}\nfunction createWireframeFromTriangleFanIndices(vertexCount, originalIndices) {\n  const originalIndicesCount = originalIndices.length;\n  const numberOfTriangles = originalIndicesCount - 2;\n  const wireframeIndicesCount = 2 + numberOfTriangles * 4;\n  const wireframeIndices = IndexDatatype.createTypedArray(vertexCount, wireframeIndicesCount);\n  let index = 0;\n\n  // Handle the first edge\n  const firstPoint = originalIndices[0];\n  wireframeIndices[index++] = firstPoint;\n  wireframeIndices[index++] = originalIndices[1];\n\n  // Add two edges for every triangle in the fan\n  for (let i = 0; i < numberOfTriangles; i++) {\n    const point1 = originalIndices[i + 1];\n    const point2 = originalIndices[i + 2];\n    wireframeIndices[index++] = point1;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = firstPoint;\n  }\n  return wireframeIndices;\n}\n\n/**\n * Generates a wireframe index buffer for a primitive, either by reindexing the existing indices\n * or creating them from scratch if the model had none.\n *\n * @param {PrimitiveType} primitiveType The primitive type.\n * @param {number} vertexCount The number of vertices in the primitive.\n * @param {Uint8Array|Uint16Array|Uint32Array} [originalIndices] A typed array containing the original indices of the primitive.\n *\n * @return {Uint16Array|Uint32Array} A typed array with the wireframe indices, or undefined if the primitive type does not use triangles.\n *\n * @private\n */\nWireframeIndexGenerator.createWireframeIndices = function (primitiveType, vertexCount, originalIndices) {\n  const hasOriginalIndices = defined(originalIndices);\n  if (primitiveType === PrimitiveType.TRIANGLES) {\n    return hasOriginalIndices ? createWireframeFromTriangleIndices(vertexCount, originalIndices) : createWireframeFromTriangles(vertexCount);\n  }\n  if (primitiveType === PrimitiveType.TRIANGLE_STRIP) {\n    return hasOriginalIndices ? createWireframeFromTriangleStripIndices(vertexCount, originalIndices) : createWireframeFromTriangleStrip(vertexCount);\n  }\n  if (primitiveType === PrimitiveType.TRIANGLE_FAN) {\n    return hasOriginalIndices ? createWireframeFromTriangleFanIndices(vertexCount, originalIndices) : createWireframeFromTriangleFan(vertexCount);\n  }\n  return undefined;\n};\n\n/**\n * Gets the number of indices in the wireframe index buffer of a primitive type.\n *\n * @param {PrimitiveType} primitiveType The primitive type.\n * @param {number} originalCount The original number of vertices or indices in the primitive.\n * @return {number} The number of indices in the primitive's wireframe.\n *\n * @private\n */\nWireframeIndexGenerator.getWireframeIndicesCount = function (primitiveType, originalCount) {\n  // For TRIANGLES, the wireframe takes every triangle (i.e. three of the original\n  // indices) and turns it into lines. Each triangle has three lines, and each line\n  // requires two indices, so the final count is twice the original.\n  if (primitiveType === PrimitiveType.TRIANGLES) {\n    return originalCount * 2;\n  }\n\n  // For TRIANGLE_STRIP and TRIANGLE_FAN, the number of triangles in the primitive\n  // is equal to the total number of vertices minus two. This is because after the\n  // first edge is specified by the first two indices, every point afterwards\n  // contributes two more edges with two of the previous points, forming a new triangle.\n  // Each of these edges requires two indices, so each triangle in the primitive\n  // results in four indices in addition to the first two.\n  if (primitiveType === PrimitiveType.TRIANGLE_STRIP || primitiveType === PrimitiveType.TRIANGLE_FAN) {\n    const numberOfTriangles = originalCount - 2;\n    return 2 + numberOfTriangles * 4;\n  }\n  return originalCount;\n};\nexport default WireframeIndexGenerator;","map":{"version":3,"names":["defined","IndexDatatype","PrimitiveType","WireframeIndexGenerator","createWireframeFromTriangles","vertexCount","wireframeIndices","createTypedArray","length","index","i","createWireframeFromTriangleIndices","originalIndices","originalIndicesCount","point0","point1","point2","createWireframeFromTriangleStrip","numberOfTriangles","wireframeIndicesCount","createWireframeFromTriangleStripIndices","createWireframeFromTriangleFan","createWireframeFromTriangleFanIndices","firstPoint","createWireframeIndices","primitiveType","hasOriginalIndices","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","undefined","getWireframeIndicesCount","originalCount"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/WireframeIndexGenerator.js"],"sourcesContent":["import defined from \"./defined.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\n/**\n * Functions for generating indices for model wireframes. The indices are\n * outputted as typed arrays, which can then be put into buffers for rendering.\n *\n * @namespace WireframeIndexGenerator\n * @private\n */\nconst WireframeIndexGenerator = {};\n\nfunction createWireframeFromTriangles(vertexCount) {\n  const wireframeIndices = IndexDatatype.createTypedArray(\n    vertexCount,\n    vertexCount * 2,\n  );\n  const length = vertexCount;\n  let index = 0;\n  for (let i = 0; i < length; i += 3) {\n    wireframeIndices[index++] = i;\n    wireframeIndices[index++] = i + 1;\n    wireframeIndices[index++] = i + 1;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = i;\n  }\n\n  return wireframeIndices;\n}\n\nfunction createWireframeFromTriangleIndices(vertexCount, originalIndices) {\n  const originalIndicesCount = originalIndices.length;\n  const wireframeIndices = IndexDatatype.createTypedArray(\n    vertexCount,\n    originalIndicesCount * 2,\n  );\n  let index = 0;\n  for (let i = 0; i < originalIndicesCount; i += 3) {\n    const point0 = originalIndices[i];\n    const point1 = originalIndices[i + 1];\n    const point2 = originalIndices[i + 2];\n\n    wireframeIndices[index++] = point0;\n    wireframeIndices[index++] = point1;\n    wireframeIndices[index++] = point1;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = point0;\n  }\n\n  return wireframeIndices;\n}\n\nfunction createWireframeFromTriangleStrip(vertexCount) {\n  const numberOfTriangles = vertexCount - 2;\n  const wireframeIndicesCount = 2 + numberOfTriangles * 4;\n  const wireframeIndices = IndexDatatype.createTypedArray(\n    vertexCount,\n    wireframeIndicesCount,\n  );\n  let index = 0;\n\n  // Handle the first edge\n  wireframeIndices[index++] = 0;\n  wireframeIndices[index++] = 1;\n\n  // Add two edges for every triangle in the strip\n  for (let i = 0; i < numberOfTriangles; i++) {\n    wireframeIndices[index++] = i + 1;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = i;\n  }\n\n  return wireframeIndices;\n}\n\nfunction createWireframeFromTriangleStripIndices(vertexCount, originalIndices) {\n  const originalIndicesCount = originalIndices.length;\n  const numberOfTriangles = originalIndicesCount - 2;\n  const wireframeIndicesCount = 2 + numberOfTriangles * 4;\n  const wireframeIndices = IndexDatatype.createTypedArray(\n    vertexCount,\n    wireframeIndicesCount,\n  );\n  let index = 0;\n\n  // Handle the first edge\n  wireframeIndices[index++] = originalIndices[0];\n  wireframeIndices[index++] = originalIndices[1];\n\n  // Add two edges for every triangle in the strip\n  for (let i = 0; i < numberOfTriangles; i++) {\n    const point0 = originalIndices[i];\n    const point1 = originalIndices[i + 1];\n    const point2 = originalIndices[i + 2];\n\n    wireframeIndices[index++] = point1;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = point0;\n  }\n\n  return wireframeIndices;\n}\n\nfunction createWireframeFromTriangleFan(vertexCount) {\n  const numberOfTriangles = vertexCount - 2;\n  const wireframeIndicesCount = 2 + numberOfTriangles * 4;\n  const wireframeIndices = IndexDatatype.createTypedArray(\n    vertexCount,\n    wireframeIndicesCount,\n  );\n  let index = 0;\n\n  // Handle the first edge\n  wireframeIndices[index++] = 0;\n  wireframeIndices[index++] = 1;\n\n  // Add two edges for every triangle in the fan\n  for (let i = 0; i < numberOfTriangles; i++) {\n    wireframeIndices[index++] = i + 1;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = i + 2;\n    wireframeIndices[index++] = 0;\n  }\n\n  return wireframeIndices;\n}\n\nfunction createWireframeFromTriangleFanIndices(vertexCount, originalIndices) {\n  const originalIndicesCount = originalIndices.length;\n  const numberOfTriangles = originalIndicesCount - 2;\n  const wireframeIndicesCount = 2 + numberOfTriangles * 4;\n  const wireframeIndices = IndexDatatype.createTypedArray(\n    vertexCount,\n    wireframeIndicesCount,\n  );\n  let index = 0;\n\n  // Handle the first edge\n  const firstPoint = originalIndices[0];\n  wireframeIndices[index++] = firstPoint;\n  wireframeIndices[index++] = originalIndices[1];\n\n  // Add two edges for every triangle in the fan\n  for (let i = 0; i < numberOfTriangles; i++) {\n    const point1 = originalIndices[i + 1];\n    const point2 = originalIndices[i + 2];\n\n    wireframeIndices[index++] = point1;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = point2;\n    wireframeIndices[index++] = firstPoint;\n  }\n\n  return wireframeIndices;\n}\n\n/**\n * Generates a wireframe index buffer for a primitive, either by reindexing the existing indices\n * or creating them from scratch if the model had none.\n *\n * @param {PrimitiveType} primitiveType The primitive type.\n * @param {number} vertexCount The number of vertices in the primitive.\n * @param {Uint8Array|Uint16Array|Uint32Array} [originalIndices] A typed array containing the original indices of the primitive.\n *\n * @return {Uint16Array|Uint32Array} A typed array with the wireframe indices, or undefined if the primitive type does not use triangles.\n *\n * @private\n */\nWireframeIndexGenerator.createWireframeIndices = function (\n  primitiveType,\n  vertexCount,\n  originalIndices,\n) {\n  const hasOriginalIndices = defined(originalIndices);\n  if (primitiveType === PrimitiveType.TRIANGLES) {\n    return hasOriginalIndices\n      ? createWireframeFromTriangleIndices(vertexCount, originalIndices)\n      : createWireframeFromTriangles(vertexCount);\n  }\n\n  if (primitiveType === PrimitiveType.TRIANGLE_STRIP) {\n    return hasOriginalIndices\n      ? createWireframeFromTriangleStripIndices(vertexCount, originalIndices)\n      : createWireframeFromTriangleStrip(vertexCount);\n  }\n\n  if (primitiveType === PrimitiveType.TRIANGLE_FAN) {\n    return hasOriginalIndices\n      ? createWireframeFromTriangleFanIndices(vertexCount, originalIndices)\n      : createWireframeFromTriangleFan(vertexCount);\n  }\n\n  return undefined;\n};\n\n/**\n * Gets the number of indices in the wireframe index buffer of a primitive type.\n *\n * @param {PrimitiveType} primitiveType The primitive type.\n * @param {number} originalCount The original number of vertices or indices in the primitive.\n * @return {number} The number of indices in the primitive's wireframe.\n *\n * @private\n */\nWireframeIndexGenerator.getWireframeIndicesCount = function (\n  primitiveType,\n  originalCount,\n) {\n  // For TRIANGLES, the wireframe takes every triangle (i.e. three of the original\n  // indices) and turns it into lines. Each triangle has three lines, and each line\n  // requires two indices, so the final count is twice the original.\n  if (primitiveType === PrimitiveType.TRIANGLES) {\n    return originalCount * 2;\n  }\n\n  // For TRIANGLE_STRIP and TRIANGLE_FAN, the number of triangles in the primitive\n  // is equal to the total number of vertices minus two. This is because after the\n  // first edge is specified by the first two indices, every point afterwards\n  // contributes two more edges with two of the previous points, forming a new triangle.\n  // Each of these edges requires two indices, so each triangle in the primitive\n  // results in four indices in addition to the first two.\n  if (\n    primitiveType === PrimitiveType.TRIANGLE_STRIP ||\n    primitiveType === PrimitiveType.TRIANGLE_FAN\n  ) {\n    const numberOfTriangles = originalCount - 2;\n    return 2 + numberOfTriangles * 4;\n  }\n\n  return originalCount;\n};\n\nexport default WireframeIndexGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}