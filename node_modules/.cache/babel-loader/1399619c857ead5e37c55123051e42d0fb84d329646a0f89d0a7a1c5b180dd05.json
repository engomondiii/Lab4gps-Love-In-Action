{"ast":null,"code":"import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport CorridorGeometry from \"../Core/CorridorGeometry.js\";\nimport CorridorOutlineGeometry from \"../Core/CorridorOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport GroundGeometryUpdater from \"./GroundGeometryUpdater.js\";\nimport Property from \"./Property.js\";\nconst scratchColor = new Color();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\nconst scratchRectangle = new Rectangle();\nfunction CorridorGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.positions = undefined;\n  this.width = undefined;\n  this.cornerType = undefined;\n  this.height = undefined;\n  this.extrudedHeight = undefined;\n  this.granularity = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for corridors.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias CorridorGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction CorridorGeometryUpdater(entity, scene) {\n  GroundGeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new CorridorGeometryOptions(entity),\n    geometryPropertyName: \"corridor\",\n    observedPropertyNames: [\"availability\", \"corridor\"]\n  });\n  this._onEntityPropertyChanged(entity, \"corridor\", entity.corridor, undefined);\n}\nif (defined(Object.create)) {\n  CorridorGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n  CorridorGeometryUpdater.prototype.constructor = CorridorGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nCorridorGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\"This instance does not represent a filled geometry.\");\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n    offset: undefined,\n    color: undefined\n  };\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n  }\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CorridorGeometry(this._options),\n    attributes: attributes\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nCorridorGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\"This instance does not represent an outlined geometry.\");\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n    offset: undefined\n  };\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n  }\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CorridorOutlineGeometry(this._options),\n    attributes: attributes\n  });\n};\nCorridorGeometryUpdater.prototype._computeCenter = function (time, result) {\n  const positions = Property.getValueOrUndefined(this._entity.corridor.positions, time);\n  if (!defined(positions) || positions.length === 0) {\n    return;\n  }\n  return Cartesian3.clone(positions[Math.floor(positions.length / 2.0)], result);\n};\nCorridorGeometryUpdater.prototype._isHidden = function (entity, corridor) {\n  return !defined(corridor.positions) || !defined(corridor.width) || GeometryUpdater.prototype._isHidden.call(this, entity, corridor);\n};\nCorridorGeometryUpdater.prototype._isDynamic = function (entity, corridor) {\n  return !corridor.positions.isConstant ||\n  //\n  !Property.isConstant(corridor.height) ||\n  //\n  !Property.isConstant(corridor.extrudedHeight) ||\n  //\n  !Property.isConstant(corridor.granularity) ||\n  //\n  !Property.isConstant(corridor.width) ||\n  //\n  !Property.isConstant(corridor.outlineWidth) ||\n  //\n  !Property.isConstant(corridor.cornerType) ||\n  //\n  !Property.isConstant(corridor.zIndex) ||\n  //\n  this._onTerrain && !Property.isConstant(this._materialProperty) && !(this._materialProperty instanceof ColorMaterialProperty);\n};\nCorridorGeometryUpdater.prototype._setStaticOptions = function (entity, corridor) {\n  let heightValue = Property.getValueOrUndefined(corridor.height, Iso8601.MINIMUM_VALUE);\n  const heightReferenceValue = Property.getValueOrDefault(corridor.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n  let extrudedHeightValue = Property.getValueOrUndefined(corridor.extrudedHeight, Iso8601.MINIMUM_VALUE);\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(corridor.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n  const options = this._options;\n  options.vertexFormat = this._materialProperty instanceof ColorMaterialProperty ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.positions = corridor.positions.getValue(Iso8601.MINIMUM_VALUE, options.positions);\n  options.width = corridor.width.getValue(Iso8601.MINIMUM_VALUE);\n  options.granularity = Property.getValueOrUndefined(corridor.granularity, Iso8601.MINIMUM_VALUE);\n  options.cornerType = Property.getValueOrUndefined(corridor.cornerType, Iso8601.MINIMUM_VALUE);\n  options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n  options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(CorridorGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n  }\n  options.extrudedHeight = extrudedHeightValue;\n};\nCorridorGeometryUpdater.DynamicGeometryUpdater = DynamicCorridorGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicCorridorGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n  DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n}\nif (defined(Object.create)) {\n  DynamicCorridorGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n  DynamicCorridorGeometryUpdater.prototype.constructor = DynamicCorridorGeometryUpdater;\n}\nDynamicCorridorGeometryUpdater.prototype._isHidden = function (entity, corridor, time) {\n  const options = this._options;\n  return !defined(options.positions) || !defined(options.width) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, corridor, time);\n};\nDynamicCorridorGeometryUpdater.prototype._setOptions = function (entity, corridor, time) {\n  const options = this._options;\n  let heightValue = Property.getValueOrUndefined(corridor.height, time);\n  const heightReferenceValue = Property.getValueOrDefault(corridor.heightReference, time, HeightReference.NONE);\n  let extrudedHeightValue = Property.getValueOrUndefined(corridor.extrudedHeight, time);\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(corridor.extrudedHeightReference, time, HeightReference.NONE);\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n  options.positions = Property.getValueOrUndefined(corridor.positions, time);\n  options.width = Property.getValueOrUndefined(corridor.width, time);\n  options.granularity = Property.getValueOrUndefined(corridor.granularity, time);\n  options.cornerType = Property.getValueOrUndefined(corridor.cornerType, time);\n  options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n  options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(CorridorGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n  }\n  options.extrudedHeight = extrudedHeightValue;\n};\nexport default CorridorGeometryUpdater;","map":{"version":3,"names":["ApproximateTerrainHeights","Cartesian3","Check","Color","ColorGeometryInstanceAttribute","CorridorGeometry","CorridorOutlineGeometry","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","GeometryInstance","Iso8601","OffsetGeometryInstanceAttribute","Rectangle","ShowGeometryInstanceAttribute","HeightReference","MaterialAppearance","PerInstanceColorAppearance","ColorMaterialProperty","DynamicGeometryUpdater","GeometryUpdater","GroundGeometryUpdater","Property","scratchColor","defaultOffset","ZERO","offsetScratch","scratchRectangle","CorridorGeometryOptions","entity","id","vertexFormat","undefined","positions","width","cornerType","height","extrudedHeight","granularity","offsetAttribute","CorridorGeometryUpdater","scene","call","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","corridor","Object","create","prototype","constructor","createFillGeometryInstance","time","_fillEnabled","_entity","isAvailable","attributes","show","isShowing","_showProperty","getValue","_fillProperty","distanceDisplayCondition","fromDistanceDisplayCondition","_distanceDisplayConditionProperty","offset","color","_materialProperty","currentColor","isConstant","WHITE","fromColor","_options","fromCartesian3","getValueOrDefault","_terrainOffsetProperty","geometry","createOutlineGeometryInstance","_outlineEnabled","outlineColor","_outlineColorProperty","BLACK","_showOutlineProperty","_computeCenter","result","getValueOrUndefined","length","clone","Math","floor","_isHidden","_isDynamic","outlineWidth","zIndex","_onTerrain","_setStaticOptions","heightValue","MINIMUM_VALUE","heightReferenceValue","heightReference","NONE","extrudedHeightValue","extrudedHeightReferenceValue","extrudedHeightReference","options","VERTEX_FORMAT","MaterialSupport","TEXTURED","computeGeometryOffsetAttribute","getGeometryHeight","getGeometryExtrudedHeight","CLAMP_TO_GROUND","getMinimumMaximumHeights","computeRectangle","minimumTerrainHeight","DynamicCorridorGeometryUpdater","geometryUpdater","primitives","groundPrimitives","_setOptions"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/CorridorGeometryUpdater.js"],"sourcesContent":["import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport CorridorGeometry from \"../Core/CorridorGeometry.js\";\nimport CorridorOutlineGeometry from \"../Core/CorridorOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport GroundGeometryUpdater from \"./GroundGeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nconst scratchColor = new Color();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\nconst scratchRectangle = new Rectangle();\n\nfunction CorridorGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.positions = undefined;\n  this.width = undefined;\n  this.cornerType = undefined;\n  this.height = undefined;\n  this.extrudedHeight = undefined;\n  this.granularity = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for corridors.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias CorridorGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction CorridorGeometryUpdater(entity, scene) {\n  GroundGeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new CorridorGeometryOptions(entity),\n    geometryPropertyName: \"corridor\",\n    observedPropertyNames: [\"availability\", \"corridor\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"corridor\", entity.corridor, undefined);\n}\n\nif (defined(Object.create)) {\n  CorridorGeometryUpdater.prototype = Object.create(\n    GroundGeometryUpdater.prototype,\n  );\n  CorridorGeometryUpdater.prototype.constructor = CorridorGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nCorridorGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._fillProperty.getValue(time),\n    ),\n    distanceDisplayCondition:\n      DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n        this._distanceDisplayConditionProperty.getValue(time),\n      ),\n    offset: undefined,\n    color: undefined,\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch,\n      ),\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CorridorGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nCorridorGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor,\n  );\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time),\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition:\n      DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n        this._distanceDisplayConditionProperty.getValue(time),\n      ),\n    offset: undefined,\n  };\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch,\n      ),\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CorridorOutlineGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\nCorridorGeometryUpdater.prototype._computeCenter = function (time, result) {\n  const positions = Property.getValueOrUndefined(\n    this._entity.corridor.positions,\n    time,\n  );\n  if (!defined(positions) || positions.length === 0) {\n    return;\n  }\n  return Cartesian3.clone(\n    positions[Math.floor(positions.length / 2.0)],\n    result,\n  );\n};\n\nCorridorGeometryUpdater.prototype._isHidden = function (entity, corridor) {\n  return (\n    !defined(corridor.positions) ||\n    !defined(corridor.width) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, corridor)\n  );\n};\n\nCorridorGeometryUpdater.prototype._isDynamic = function (entity, corridor) {\n  return (\n    !corridor.positions.isConstant || //\n    !Property.isConstant(corridor.height) || //\n    !Property.isConstant(corridor.extrudedHeight) || //\n    !Property.isConstant(corridor.granularity) || //\n    !Property.isConstant(corridor.width) || //\n    !Property.isConstant(corridor.outlineWidth) || //\n    !Property.isConstant(corridor.cornerType) || //\n    !Property.isConstant(corridor.zIndex) || //\n    (this._onTerrain &&\n      !Property.isConstant(this._materialProperty) &&\n      !(this._materialProperty instanceof ColorMaterialProperty))\n  );\n};\n\nCorridorGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  corridor,\n) {\n  let heightValue = Property.getValueOrUndefined(\n    corridor.height,\n    Iso8601.MINIMUM_VALUE,\n  );\n  const heightReferenceValue = Property.getValueOrDefault(\n    corridor.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE,\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    corridor.extrudedHeight,\n    Iso8601.MINIMUM_VALUE,\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    corridor.extrudedHeightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE,\n  );\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n\n  const options = this._options;\n  options.vertexFormat =\n    this._materialProperty instanceof ColorMaterialProperty\n      ? PerInstanceColorAppearance.VERTEX_FORMAT\n      : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.positions = corridor.positions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.positions,\n  );\n  options.width = corridor.width.getValue(Iso8601.MINIMUM_VALUE);\n  options.granularity = Property.getValueOrUndefined(\n    corridor.granularity,\n    Iso8601.MINIMUM_VALUE,\n  );\n  options.cornerType = Property.getValueOrUndefined(\n    corridor.cornerType,\n    Iso8601.MINIMUM_VALUE,\n  );\n  options.offsetAttribute =\n    GroundGeometryUpdater.computeGeometryOffsetAttribute(\n      heightValue,\n      heightReferenceValue,\n      extrudedHeightValue,\n      extrudedHeightReferenceValue,\n    );\n  options.height = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue,\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue,\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      CorridorGeometry.computeRectangle(options, scratchRectangle),\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\n\nCorridorGeometryUpdater.DynamicGeometryUpdater = DynamicCorridorGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicCorridorGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives,\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives,\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicCorridorGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype,\n  );\n  DynamicCorridorGeometryUpdater.prototype.constructor =\n    DynamicCorridorGeometryUpdater;\n}\n\nDynamicCorridorGeometryUpdater.prototype._isHidden = function (\n  entity,\n  corridor,\n  time,\n) {\n  const options = this._options;\n  return (\n    !defined(options.positions) ||\n    !defined(options.width) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(\n      this,\n      entity,\n      corridor,\n      time,\n    )\n  );\n};\n\nDynamicCorridorGeometryUpdater.prototype._setOptions = function (\n  entity,\n  corridor,\n  time,\n) {\n  const options = this._options;\n  let heightValue = Property.getValueOrUndefined(corridor.height, time);\n  const heightReferenceValue = Property.getValueOrDefault(\n    corridor.heightReference,\n    time,\n    HeightReference.NONE,\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    corridor.extrudedHeight,\n    time,\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    corridor.extrudedHeightReference,\n    time,\n    HeightReference.NONE,\n  );\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n\n  options.positions = Property.getValueOrUndefined(corridor.positions, time);\n  options.width = Property.getValueOrUndefined(corridor.width, time);\n  options.granularity = Property.getValueOrUndefined(\n    corridor.granularity,\n    time,\n  );\n  options.cornerType = Property.getValueOrUndefined(corridor.cornerType, time);\n  options.offsetAttribute =\n    GroundGeometryUpdater.computeGeometryOffsetAttribute(\n      heightValue,\n      heightReferenceValue,\n      extrudedHeightValue,\n      extrudedHeightReferenceValue,\n    );\n  options.height = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue,\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue,\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      CorridorGeometry.computeRectangle(options, scratchRectangle),\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\nexport default CorridorGeometryUpdater;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}