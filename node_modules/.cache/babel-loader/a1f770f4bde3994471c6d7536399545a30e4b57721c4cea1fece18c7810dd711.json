{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport GetFeatureInfoFormat from \"./GetFeatureInfoFormat.js\";\nimport TimeDynamicImagery from \"./TimeDynamicImagery.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\n\n/**\n * EPSG codes known to include reverse axis orders, but are not within 4000-5000.\n *\n * @type {number[]}\n */\nconst includesReverseAxis = [3034,\n// ETRS89-extended / LCC Europe\n3035,\n// ETRS89-extended / LAEA Europe\n3042,\n// ETRS89 / UTM zone 30N (N-E)\n3043,\n// ETRS89 / UTM zone 31N (N-E)\n3044 // ETRS89 / UTM zone 32N (N-E)\n];\n\n/**\n * EPSG codes known to not include reverse axis orders, and are within 4000-5000.\n *\n * @type {number[]}\n */\nconst excludesReverseAxis = [4471,\n// Mayotte\n4559 // French Antilles\n];\n\n/**\n * @typedef {object} WebMapServiceImageryProvider.ConstructorOptions\n *\n * Initialization options for the WebMapServiceImageryProvider constructor\n *\n * @property {Resource|string} url The URL of the WMS service. The URL supports the same keywords as the {@link UrlTemplateImageryProvider}.\n * @property {string} layers The layers to include, separated by commas.\n * @property {object} [parameters=WebMapServiceImageryProvider.DefaultParameters] Additional parameters to pass to the WMS server in the GetMap URL.\n * @property {object} [getFeatureInfoParameters=WebMapServiceImageryProvider.GetFeatureInfoDefaultParameters] Additional parameters to pass to the WMS server in the GetFeatureInfo URL.\n * @property {boolean} [enablePickFeatures=true] If true, {@link WebMapServiceImageryProvider#pickFeatures} will invoke\n *        the GetFeatureInfo operation on the WMS server and return the features included in the response.  If false,\n *        {@link WebMapServiceImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n *        without communicating with the server.  Set this property to false if you know your WMS server does not support\n *        GetFeatureInfo or if you don't want this provider's features to be pickable. Note that this can be dynamically\n *        overridden by modifying the WebMapServiceImageryProvider#enablePickFeatures property.\n * @property {GetFeatureInfoFormat[]} [getFeatureInfoFormats=WebMapServiceImageryProvider.DefaultGetFeatureInfoFormats] The formats\n *        in which to try WMS GetFeatureInfo requests.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle of the layer.\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme to use to divide the world into tiles.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *        this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *        parameter is specified, the WGS84 ellipsoid is used.\n * @property {number} [tileWidth=256] The width of each tile in pixels.\n * @property {number} [tileHeight=256] The height of each tile in pixels.\n * @property {number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when\n *        specifying this that the number of tiles at the minimum level is small, such as four or less.  A larger number is\n *        likely to result in rendering problems.\n * @property {number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n *        If not specified, there is no limit.\n * @property {string} [crs] CRS specification, for use with WMS specification >= 1.3.0.\n * @property {string} [srs] SRS specification, for use with WMS specification 1.1.0 or 1.1.1\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.\n * @property {string|string[]} [subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n * @property {Clock} [clock] A Clock instance that is used when determining the value for the time dimension. Required when `times` is specified.\n * @property {TimeIntervalCollection} [times] TimeIntervalCollection with its data property being an object containing time dynamic dimension and their values.\n * @property {Resource|string} [getFeatureInfoUrl] The getFeatureInfo URL of the WMS service. If the property is not defined then we use the property value of url.\n */\n\n/**\n * Provides tiled imagery hosted by a Web Map Service (WMS) server.\n *\n * @alias WebMapServiceImageryProvider\n * @constructor\n *\n * @param {WebMapServiceImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n * @see {@link http://resources.esri.com/help/9.3/arcgisserver/apis/rest/|ArcGIS Server REST API}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n *\n * @example\n * const provider = new Cesium.WebMapServiceImageryProvider({\n *     url : 'https://sampleserver1.arcgisonline.com/ArcGIS/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/WMSServer',\n *     layers : '0',\n *     proxy: new Cesium.DefaultProxy('/proxy/')\n * });\n * const imageryLayer = new Cesium.ImageryLayer(provider);\n * viewer.imageryLayers.add(imageryLayer);\n */\nfunction WebMapServiceImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  if (!defined(options.layers)) {\n    throw new DeveloperError(\"options.layers is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (defined(options.times) && !defined(options.clock)) {\n    throw new DeveloperError(\"options.times was specified, so options.clock is required.\");\n  }\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n  this._getFeatureInfoUrl = defaultValue(options.getFeatureInfoUrl, options.url);\n  const resource = Resource.createIfNeeded(options.url);\n  const pickFeatureResource = Resource.createIfNeeded(this._getFeatureInfoUrl);\n  resource.setQueryParameters(WebMapServiceImageryProvider.DefaultParameters, true);\n  pickFeatureResource.setQueryParameters(WebMapServiceImageryProvider.GetFeatureInfoDefaultParameters, true);\n  if (defined(options.parameters)) {\n    resource.setQueryParameters(objectToLowercase(options.parameters));\n  }\n  if (defined(options.getFeatureInfoParameters)) {\n    pickFeatureResource.setQueryParameters(objectToLowercase(options.getFeatureInfoParameters));\n  }\n  const that = this;\n  this._reload = undefined;\n  if (defined(options.times)) {\n    this._timeDynamicImagery = new TimeDynamicImagery({\n      clock: options.clock,\n      times: options.times,\n      requestImageFunction: function (x, y, level, request, interval) {\n        return requestImage(that, x, y, level, request, interval);\n      },\n      reloadFunction: function () {\n        if (defined(that._reload)) {\n          that._reload();\n        }\n      }\n    });\n  }\n  const parameters = {};\n  parameters.layers = options.layers;\n  parameters.bbox = \"{westProjected},{southProjected},{eastProjected},{northProjected}\";\n  parameters.width = \"{width}\";\n  parameters.height = \"{height}\";\n\n  // Use SRS or CRS based on the WMS version.\n  if (parseFloat(resource.queryParameters.version) >= 1.3) {\n    // Use CRS with 1.3.0 and going forward.\n    // For GeographicTilingScheme, use CRS:84 vice EPSG:4326 to specify lon, lat (x, y) ordering for\n    // bbox requests.\n    parameters.crs = defaultValue(options.crs, options.tilingScheme && options.tilingScheme.projection instanceof WebMercatorProjection ? \"EPSG:3857\" : \"CRS:84\");\n\n    // The axis order in previous versions of the WMS specifications was to always use easting (x or lon ) and northing (y or\n    // lat). WMS 1.3.0 specifies that, depending on the particular CRS, the x axis may or may not be oriented West-to-East,\n    // and the y axis may or may not be oriented South-to-North. The WMS portrayal operation shall account for axis order.\n    // This affects some of the EPSG codes that were commonly used such as ESPG:4326. The current implementation\n    // makes sure that coordinates passed to the server (as part of the GetMap BBOX parameter) as well as those advertised\n    // in the capabilities document reflect the inverse axe orders for EPSG codes between 4000 and 5000.\n    //  - Taken from Section 9.1.3 of https://download.osgeo.org/mapserver/docs/MapServer-56.pdf\n    const parts = parameters.crs.split(\":\");\n    if (parts[0] === \"EPSG\" && parts.length === 2) {\n      const code = Number(parts[1]);\n      if (code >= 4000 && code < 5000 && !excludesReverseAxis.includes(code) || includesReverseAxis.includes(code)) {\n        parameters.bbox = \"{southProjected},{westProjected},{northProjected},{eastProjected}\";\n      }\n    }\n  } else {\n    // SRS for WMS 1.1.0 or 1.1.1.\n    parameters.srs = defaultValue(options.srs, options.tilingScheme && options.tilingScheme.projection instanceof WebMercatorProjection ? \"EPSG:3857\" : \"EPSG:4326\");\n  }\n  resource.setQueryParameters(parameters, true);\n  pickFeatureResource.setQueryParameters(parameters, true);\n  const pickFeatureParams = {\n    query_layers: options.layers,\n    info_format: \"{format}\"\n  };\n  // use correct pixel coordinate identifier based on version\n  if (parseFloat(pickFeatureResource.queryParameters.version) >= 1.3) {\n    pickFeatureParams.i = \"{i}\";\n    pickFeatureParams.j = \"{j}\";\n  } else {\n    pickFeatureParams.x = \"{i}\";\n    pickFeatureParams.y = \"{j}\";\n  }\n  pickFeatureResource.setQueryParameters(pickFeatureParams, true);\n  this._resource = resource;\n  this._pickFeaturesResource = pickFeatureResource;\n  this._layers = options.layers;\n\n  // Let UrlTemplateImageryProvider do the actual URL building.\n  this._tileProvider = new UrlTemplateImageryProvider({\n    url: resource,\n    pickFeaturesUrl: pickFeatureResource,\n    tilingScheme: defaultValue(options.tilingScheme, new GeographicTilingScheme({\n      ellipsoid: options.ellipsoid\n    })),\n    rectangle: options.rectangle,\n    tileWidth: options.tileWidth,\n    tileHeight: options.tileHeight,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    subdomains: options.subdomains,\n    tileDiscardPolicy: options.tileDiscardPolicy,\n    credit: options.credit,\n    getFeatureInfoFormats: defaultValue(options.getFeatureInfoFormats, WebMapServiceImageryProvider.DefaultGetFeatureInfoFormats),\n    enablePickFeatures: options.enablePickFeatures\n  });\n}\nfunction requestImage(imageryProvider, col, row, level, request, interval) {\n  const dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  const tileProvider = imageryProvider._tileProvider;\n  if (defined(dynamicIntervalData)) {\n    // We set the query parameters within the tile provider, because it is managing the query.\n    tileProvider._resource.setQueryParameters(dynamicIntervalData);\n  }\n  return tileProvider.requestImage(col, row, level, request);\n}\nfunction pickFeatures(imageryProvider, x, y, level, longitude, latitude, interval) {\n  const dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  const tileProvider = imageryProvider._tileProvider;\n  if (defined(dynamicIntervalData)) {\n    // We set the query parameters within the tile provider, because it is managing the query.\n    tileProvider._pickFeaturesResource.setQueryParameters(dynamicIntervalData);\n  }\n  return tileProvider.pickFeatures(x, y, level, longitude, latitude);\n}\nObject.defineProperties(WebMapServiceImageryProvider.prototype, {\n  /**\n   * Gets the URL of the WMS server.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource._url;\n    }\n  },\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n  /**\n   * Gets the names of the WMS layers, separated by commas.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  layers: {\n    get: function () {\n      return this._layers;\n    }\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileProvider.tileWidth;\n    }\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileProvider.tileHeight;\n    }\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._tileProvider.maximumLevel;\n    }\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._tileProvider.minimumLevel;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tileProvider.tilingScheme;\n    }\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tileProvider.rectangle;\n    }\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileProvider.tileDiscardPolicy;\n    }\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._tileProvider.errorEvent;\n    }\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._tileProvider.credit;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._tileProvider.hasAlphaChannel;\n    }\n  },\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link WebMapServiceImageryProvider#pickFeatures} will\n   * invoke the <code>GetFeatureInfo</code> service on the WMS server and attempt to interpret the features included in the response.  If false,\n   * {@link WebMapServiceImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n   * features) without communicating with the server.  Set this property to false if you know your data\n   * source does not support picking features or if you don't want this provider's features to be pickable.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {boolean}\n   * @default true\n   */\n  enablePickFeatures: {\n    get: function () {\n      return this._tileProvider.enablePickFeatures;\n    },\n    set: function (enablePickFeatures) {\n      this._tileProvider.enablePickFeatures = enablePickFeatures;\n    }\n  },\n  /**\n   * Gets or sets a clock that is used to get keep the time used for time dynamic parameters.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function () {\n      return this._timeDynamicImagery.clock;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.clock = value;\n    }\n  },\n  /**\n   * Gets or sets a time interval collection that is used to get time dynamic parameters. The data of each\n   * TimeInterval is an object containing the keys and values of the properties that are used during\n   * tile requests.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TimeIntervalCollection}\n   */\n  times: {\n    get: function () {\n      return this._timeDynamicImagery.times;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.times = value;\n    }\n  },\n  /**\n   * Gets the getFeatureInfo URL of the WMS server.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Resource|string}\n   * @readonly\n   */\n  getFeatureInfoUrl: {\n    get: function () {\n      return this._getFeatureInfoUrl;\n    }\n  }\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nWebMapServiceImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return this._tileProvider.getTileCredits(x, y, level);\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nWebMapServiceImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  let result;\n  const timeDynamicImagery = this._timeDynamicImagery;\n  let currentInterval;\n\n  // Try and load from cache\n  if (defined(timeDynamicImagery)) {\n    currentInterval = timeDynamicImagery.currentInterval;\n    result = timeDynamicImagery.getFromCache(x, y, level, request);\n  }\n\n  // Couldn't load from cache\n  if (!defined(result)) {\n    result = requestImage(this, x, y, level, request, currentInterval);\n  }\n\n  // If we are approaching an interval, preload this tile in the next interval\n  if (defined(result) && defined(timeDynamicImagery)) {\n    timeDynamicImagery.checkApproachingInterval(x, y, level, request);\n  }\n  return result;\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {Promise<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n */\nWebMapServiceImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  const timeDynamicImagery = this._timeDynamicImagery;\n  const currentInterval = defined(timeDynamicImagery) ? timeDynamicImagery.currentInterval : undefined;\n  return pickFeatures(this, x, y, level, longitude, latitude, currentInterval);\n};\n\n/**\n * The default parameters to include in the WMS URL to obtain images.  The values are as follows:\n *    service=WMS\n *    version=1.1.1\n *    request=GetMap\n *    styles=\n *    format=image/jpeg\n *\n * @constant\n * @type {object}\n */\nWebMapServiceImageryProvider.DefaultParameters = Object.freeze({\n  service: \"WMS\",\n  version: \"1.1.1\",\n  request: \"GetMap\",\n  styles: \"\",\n  format: \"image/jpeg\"\n});\n\n/**\n * The default parameters to include in the WMS URL to get feature information.  The values are as follows:\n *     service=WMS\n *     version=1.1.1\n *     request=GetFeatureInfo\n *\n * @constant\n * @type {object}\n */\nWebMapServiceImageryProvider.GetFeatureInfoDefaultParameters = Object.freeze({\n  service: \"WMS\",\n  version: \"1.1.1\",\n  request: \"GetFeatureInfo\"\n});\nWebMapServiceImageryProvider.DefaultGetFeatureInfoFormats = Object.freeze([Object.freeze(new GetFeatureInfoFormat(\"json\", \"application/json\")), Object.freeze(new GetFeatureInfoFormat(\"xml\", \"text/xml\")), Object.freeze(new GetFeatureInfoFormat(\"text\", \"text/html\"))]);\nfunction objectToLowercase(obj) {\n  const result = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      result[key.toLowerCase()] = obj[key];\n    }\n  }\n  return result;\n}\nexport default WebMapServiceImageryProvider;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","GeographicTilingScheme","Resource","WebMercatorProjection","GetFeatureInfoFormat","TimeDynamicImagery","UrlTemplateImageryProvider","includesReverseAxis","excludesReverseAxis","WebMapServiceImageryProvider","options","EMPTY_OBJECT","url","layers","times","clock","_defaultAlpha","undefined","_defaultNightAlpha","_defaultDayAlpha","_defaultBrightness","_defaultContrast","_defaultHue","_defaultSaturation","_defaultGamma","_defaultMinificationFilter","_defaultMagnificationFilter","_getFeatureInfoUrl","getFeatureInfoUrl","resource","createIfNeeded","pickFeatureResource","setQueryParameters","DefaultParameters","GetFeatureInfoDefaultParameters","parameters","objectToLowercase","getFeatureInfoParameters","that","_reload","_timeDynamicImagery","requestImageFunction","x","y","level","request","interval","requestImage","reloadFunction","bbox","width","height","parseFloat","queryParameters","version","crs","tilingScheme","projection","parts","split","length","code","Number","includes","srs","pickFeatureParams","query_layers","info_format","i","j","_resource","_pickFeaturesResource","_layers","_tileProvider","pickFeaturesUrl","ellipsoid","rectangle","tileWidth","tileHeight","minimumLevel","maximumLevel","subdomains","tileDiscardPolicy","credit","getFeatureInfoFormats","DefaultGetFeatureInfoFormats","enablePickFeatures","imageryProvider","col","row","dynamicIntervalData","data","tileProvider","pickFeatures","longitude","latitude","Object","defineProperties","prototype","get","_url","proxy","errorEvent","hasAlphaChannel","set","value","getTileCredits","result","timeDynamicImagery","currentInterval","getFromCache","checkApproachingInterval","freeze","service","styles","format","obj","key","hasOwnProperty","toLowerCase"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/WebMapServiceImageryProvider.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport GetFeatureInfoFormat from \"./GetFeatureInfoFormat.js\";\nimport TimeDynamicImagery from \"./TimeDynamicImagery.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\n\n/**\n * EPSG codes known to include reverse axis orders, but are not within 4000-5000.\n *\n * @type {number[]}\n */\nconst includesReverseAxis = [\n  3034, // ETRS89-extended / LCC Europe\n  3035, // ETRS89-extended / LAEA Europe\n  3042, // ETRS89 / UTM zone 30N (N-E)\n  3043, // ETRS89 / UTM zone 31N (N-E)\n  3044, // ETRS89 / UTM zone 32N (N-E)\n];\n\n/**\n * EPSG codes known to not include reverse axis orders, and are within 4000-5000.\n *\n * @type {number[]}\n */\nconst excludesReverseAxis = [\n  4471, // Mayotte\n  4559, // French Antilles\n];\n\n/**\n * @typedef {object} WebMapServiceImageryProvider.ConstructorOptions\n *\n * Initialization options for the WebMapServiceImageryProvider constructor\n *\n * @property {Resource|string} url The URL of the WMS service. The URL supports the same keywords as the {@link UrlTemplateImageryProvider}.\n * @property {string} layers The layers to include, separated by commas.\n * @property {object} [parameters=WebMapServiceImageryProvider.DefaultParameters] Additional parameters to pass to the WMS server in the GetMap URL.\n * @property {object} [getFeatureInfoParameters=WebMapServiceImageryProvider.GetFeatureInfoDefaultParameters] Additional parameters to pass to the WMS server in the GetFeatureInfo URL.\n * @property {boolean} [enablePickFeatures=true] If true, {@link WebMapServiceImageryProvider#pickFeatures} will invoke\n *        the GetFeatureInfo operation on the WMS server and return the features included in the response.  If false,\n *        {@link WebMapServiceImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n *        without communicating with the server.  Set this property to false if you know your WMS server does not support\n *        GetFeatureInfo or if you don't want this provider's features to be pickable. Note that this can be dynamically\n *        overridden by modifying the WebMapServiceImageryProvider#enablePickFeatures property.\n * @property {GetFeatureInfoFormat[]} [getFeatureInfoFormats=WebMapServiceImageryProvider.DefaultGetFeatureInfoFormats] The formats\n *        in which to try WMS GetFeatureInfo requests.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle of the layer.\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme to use to divide the world into tiles.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *        this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *        parameter is specified, the WGS84 ellipsoid is used.\n * @property {number} [tileWidth=256] The width of each tile in pixels.\n * @property {number} [tileHeight=256] The height of each tile in pixels.\n * @property {number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when\n *        specifying this that the number of tiles at the minimum level is small, such as four or less.  A larger number is\n *        likely to result in rendering problems.\n * @property {number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n *        If not specified, there is no limit.\n * @property {string} [crs] CRS specification, for use with WMS specification >= 1.3.0.\n * @property {string} [srs] SRS specification, for use with WMS specification 1.1.0 or 1.1.1\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.\n * @property {string|string[]} [subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n * @property {Clock} [clock] A Clock instance that is used when determining the value for the time dimension. Required when `times` is specified.\n * @property {TimeIntervalCollection} [times] TimeIntervalCollection with its data property being an object containing time dynamic dimension and their values.\n * @property {Resource|string} [getFeatureInfoUrl] The getFeatureInfo URL of the WMS service. If the property is not defined then we use the property value of url.\n */\n\n/**\n * Provides tiled imagery hosted by a Web Map Service (WMS) server.\n *\n * @alias WebMapServiceImageryProvider\n * @constructor\n *\n * @param {WebMapServiceImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n * @see {@link http://resources.esri.com/help/9.3/arcgisserver/apis/rest/|ArcGIS Server REST API}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n *\n * @example\n * const provider = new Cesium.WebMapServiceImageryProvider({\n *     url : 'https://sampleserver1.arcgisonline.com/ArcGIS/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/WMSServer',\n *     layers : '0',\n *     proxy: new Cesium.DefaultProxy('/proxy/')\n * });\n * const imageryLayer = new Cesium.ImageryLayer(provider);\n * viewer.imageryLayers.add(imageryLayer);\n */\nfunction WebMapServiceImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  if (!defined(options.layers)) {\n    throw new DeveloperError(\"options.layers is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (defined(options.times) && !defined(options.clock)) {\n    throw new DeveloperError(\n      \"options.times was specified, so options.clock is required.\",\n    );\n  }\n\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  this._getFeatureInfoUrl = defaultValue(\n    options.getFeatureInfoUrl,\n    options.url,\n  );\n\n  const resource = Resource.createIfNeeded(options.url);\n  const pickFeatureResource = Resource.createIfNeeded(this._getFeatureInfoUrl);\n\n  resource.setQueryParameters(\n    WebMapServiceImageryProvider.DefaultParameters,\n    true,\n  );\n  pickFeatureResource.setQueryParameters(\n    WebMapServiceImageryProvider.GetFeatureInfoDefaultParameters,\n    true,\n  );\n\n  if (defined(options.parameters)) {\n    resource.setQueryParameters(objectToLowercase(options.parameters));\n  }\n\n  if (defined(options.getFeatureInfoParameters)) {\n    pickFeatureResource.setQueryParameters(\n      objectToLowercase(options.getFeatureInfoParameters),\n    );\n  }\n\n  const that = this;\n  this._reload = undefined;\n  if (defined(options.times)) {\n    this._timeDynamicImagery = new TimeDynamicImagery({\n      clock: options.clock,\n      times: options.times,\n      requestImageFunction: function (x, y, level, request, interval) {\n        return requestImage(that, x, y, level, request, interval);\n      },\n      reloadFunction: function () {\n        if (defined(that._reload)) {\n          that._reload();\n        }\n      },\n    });\n  }\n\n  const parameters = {};\n  parameters.layers = options.layers;\n  parameters.bbox =\n    \"{westProjected},{southProjected},{eastProjected},{northProjected}\";\n  parameters.width = \"{width}\";\n  parameters.height = \"{height}\";\n\n  // Use SRS or CRS based on the WMS version.\n  if (parseFloat(resource.queryParameters.version) >= 1.3) {\n    // Use CRS with 1.3.0 and going forward.\n    // For GeographicTilingScheme, use CRS:84 vice EPSG:4326 to specify lon, lat (x, y) ordering for\n    // bbox requests.\n    parameters.crs = defaultValue(\n      options.crs,\n      options.tilingScheme &&\n        options.tilingScheme.projection instanceof WebMercatorProjection\n        ? \"EPSG:3857\"\n        : \"CRS:84\",\n    );\n\n    // The axis order in previous versions of the WMS specifications was to always use easting (x or lon ) and northing (y or\n    // lat). WMS 1.3.0 specifies that, depending on the particular CRS, the x axis may or may not be oriented West-to-East,\n    // and the y axis may or may not be oriented South-to-North. The WMS portrayal operation shall account for axis order.\n    // This affects some of the EPSG codes that were commonly used such as ESPG:4326. The current implementation\n    // makes sure that coordinates passed to the server (as part of the GetMap BBOX parameter) as well as those advertised\n    // in the capabilities document reflect the inverse axe orders for EPSG codes between 4000 and 5000.\n    //  - Taken from Section 9.1.3 of https://download.osgeo.org/mapserver/docs/MapServer-56.pdf\n    const parts = parameters.crs.split(\":\");\n    if (parts[0] === \"EPSG\" && parts.length === 2) {\n      const code = Number(parts[1]);\n      if (\n        (code >= 4000 && code < 5000 && !excludesReverseAxis.includes(code)) ||\n        includesReverseAxis.includes(code)\n      ) {\n        parameters.bbox =\n          \"{southProjected},{westProjected},{northProjected},{eastProjected}\";\n      }\n    }\n  } else {\n    // SRS for WMS 1.1.0 or 1.1.1.\n    parameters.srs = defaultValue(\n      options.srs,\n      options.tilingScheme &&\n        options.tilingScheme.projection instanceof WebMercatorProjection\n        ? \"EPSG:3857\"\n        : \"EPSG:4326\",\n    );\n  }\n\n  resource.setQueryParameters(parameters, true);\n  pickFeatureResource.setQueryParameters(parameters, true);\n\n  const pickFeatureParams = {\n    query_layers: options.layers,\n    info_format: \"{format}\",\n  };\n  // use correct pixel coordinate identifier based on version\n  if (parseFloat(pickFeatureResource.queryParameters.version) >= 1.3) {\n    pickFeatureParams.i = \"{i}\";\n    pickFeatureParams.j = \"{j}\";\n  } else {\n    pickFeatureParams.x = \"{i}\";\n    pickFeatureParams.y = \"{j}\";\n  }\n  pickFeatureResource.setQueryParameters(pickFeatureParams, true);\n\n  this._resource = resource;\n  this._pickFeaturesResource = pickFeatureResource;\n  this._layers = options.layers;\n\n  // Let UrlTemplateImageryProvider do the actual URL building.\n  this._tileProvider = new UrlTemplateImageryProvider({\n    url: resource,\n    pickFeaturesUrl: pickFeatureResource,\n    tilingScheme: defaultValue(\n      options.tilingScheme,\n      new GeographicTilingScheme({ ellipsoid: options.ellipsoid }),\n    ),\n    rectangle: options.rectangle,\n    tileWidth: options.tileWidth,\n    tileHeight: options.tileHeight,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    subdomains: options.subdomains,\n    tileDiscardPolicy: options.tileDiscardPolicy,\n    credit: options.credit,\n    getFeatureInfoFormats: defaultValue(\n      options.getFeatureInfoFormats,\n      WebMapServiceImageryProvider.DefaultGetFeatureInfoFormats,\n    ),\n    enablePickFeatures: options.enablePickFeatures,\n  });\n}\n\nfunction requestImage(imageryProvider, col, row, level, request, interval) {\n  const dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  const tileProvider = imageryProvider._tileProvider;\n\n  if (defined(dynamicIntervalData)) {\n    // We set the query parameters within the tile provider, because it is managing the query.\n    tileProvider._resource.setQueryParameters(dynamicIntervalData);\n  }\n  return tileProvider.requestImage(col, row, level, request);\n}\n\nfunction pickFeatures(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  interval,\n) {\n  const dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  const tileProvider = imageryProvider._tileProvider;\n\n  if (defined(dynamicIntervalData)) {\n    // We set the query parameters within the tile provider, because it is managing the query.\n    tileProvider._pickFeaturesResource.setQueryParameters(dynamicIntervalData);\n  }\n  return tileProvider.pickFeatures(x, y, level, longitude, latitude);\n}\n\nObject.defineProperties(WebMapServiceImageryProvider.prototype, {\n  /**\n   * Gets the URL of the WMS server.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource._url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the names of the WMS layers, separated by commas.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  layers: {\n    get: function () {\n      return this._layers;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileProvider.tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileProvider.tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._tileProvider.maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._tileProvider.minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tileProvider.tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tileProvider.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileProvider.tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._tileProvider.errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._tileProvider.credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._tileProvider.hasAlphaChannel;\n    },\n  },\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link WebMapServiceImageryProvider#pickFeatures} will\n   * invoke the <code>GetFeatureInfo</code> service on the WMS server and attempt to interpret the features included in the response.  If false,\n   * {@link WebMapServiceImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n   * features) without communicating with the server.  Set this property to false if you know your data\n   * source does not support picking features or if you don't want this provider's features to be pickable.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {boolean}\n   * @default true\n   */\n  enablePickFeatures: {\n    get: function () {\n      return this._tileProvider.enablePickFeatures;\n    },\n    set: function (enablePickFeatures) {\n      this._tileProvider.enablePickFeatures = enablePickFeatures;\n    },\n  },\n\n  /**\n   * Gets or sets a clock that is used to get keep the time used for time dynamic parameters.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function () {\n      return this._timeDynamicImagery.clock;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.clock = value;\n    },\n  },\n  /**\n   * Gets or sets a time interval collection that is used to get time dynamic parameters. The data of each\n   * TimeInterval is an object containing the keys and values of the properties that are used during\n   * tile requests.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TimeIntervalCollection}\n   */\n  times: {\n    get: function () {\n      return this._timeDynamicImagery.times;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.times = value;\n    },\n  },\n\n  /**\n   * Gets the getFeatureInfo URL of the WMS server.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Resource|string}\n   * @readonly\n   */\n  getFeatureInfoUrl: {\n    get: function () {\n      return this._getFeatureInfoUrl;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nWebMapServiceImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return this._tileProvider.getTileCredits(x, y, level);\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nWebMapServiceImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request,\n) {\n  let result;\n  const timeDynamicImagery = this._timeDynamicImagery;\n  let currentInterval;\n\n  // Try and load from cache\n  if (defined(timeDynamicImagery)) {\n    currentInterval = timeDynamicImagery.currentInterval;\n    result = timeDynamicImagery.getFromCache(x, y, level, request);\n  }\n\n  // Couldn't load from cache\n  if (!defined(result)) {\n    result = requestImage(this, x, y, level, request, currentInterval);\n  }\n\n  // If we are approaching an interval, preload this tile in the next interval\n  if (defined(result) && defined(timeDynamicImagery)) {\n    timeDynamicImagery.checkApproachingInterval(x, y, level, request);\n  }\n\n  return result;\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {Promise<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n */\nWebMapServiceImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  const timeDynamicImagery = this._timeDynamicImagery;\n  const currentInterval = defined(timeDynamicImagery)\n    ? timeDynamicImagery.currentInterval\n    : undefined;\n\n  return pickFeatures(this, x, y, level, longitude, latitude, currentInterval);\n};\n\n/**\n * The default parameters to include in the WMS URL to obtain images.  The values are as follows:\n *    service=WMS\n *    version=1.1.1\n *    request=GetMap\n *    styles=\n *    format=image/jpeg\n *\n * @constant\n * @type {object}\n */\nWebMapServiceImageryProvider.DefaultParameters = Object.freeze({\n  service: \"WMS\",\n  version: \"1.1.1\",\n  request: \"GetMap\",\n  styles: \"\",\n  format: \"image/jpeg\",\n});\n\n/**\n * The default parameters to include in the WMS URL to get feature information.  The values are as follows:\n *     service=WMS\n *     version=1.1.1\n *     request=GetFeatureInfo\n *\n * @constant\n * @type {object}\n */\nWebMapServiceImageryProvider.GetFeatureInfoDefaultParameters = Object.freeze({\n  service: \"WMS\",\n  version: \"1.1.1\",\n  request: \"GetFeatureInfo\",\n});\n\nWebMapServiceImageryProvider.DefaultGetFeatureInfoFormats = Object.freeze([\n  Object.freeze(new GetFeatureInfoFormat(\"json\", \"application/json\")),\n  Object.freeze(new GetFeatureInfoFormat(\"xml\", \"text/xml\")),\n  Object.freeze(new GetFeatureInfoFormat(\"text\", \"text/html\")),\n]);\n\nfunction objectToLowercase(obj) {\n  const result = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      result[key.toLowerCase()] = obj[key];\n    }\n  }\n  return result;\n}\nexport default WebMapServiceImageryProvider;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,sBAAsB,MAAM,mCAAmC;AACtE,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,qBAAqB,MAAM,kCAAkC;AACpE,OAAOC,oBAAoB,MAAM,2BAA2B;AAC5D,OAAOC,kBAAkB,MAAM,yBAAyB;AACxD,OAAOC,0BAA0B,MAAM,iCAAiC;;AAExE;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,CAC1B,IAAI;AAAE;AACN,IAAI;AAAE;AACN,IAAI;AAAE;AACN,IAAI;AAAE;AACN,IAAI,CAAE;AAAA,CACP;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,CAC1B,IAAI;AAAE;AACN,IAAI,CAAE;AAAA,CACP;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,4BAA4BA,CAACC,OAAO,EAAE;EAC7CA,OAAO,GAAGZ,YAAY,CAACY,OAAO,EAAEZ,YAAY,CAACa,YAAY,CAAC;;EAE1D;EACA,IAAI,CAACZ,OAAO,CAACW,OAAO,CAACE,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIZ,cAAc,CAAC,0BAA0B,CAAC;EACtD;EACA,IAAI,CAACD,OAAO,CAACW,OAAO,CAACG,MAAM,CAAC,EAAE;IAC5B,MAAM,IAAIb,cAAc,CAAC,6BAA6B,CAAC;EACzD;EACA;;EAEA,IAAID,OAAO,CAACW,OAAO,CAACI,KAAK,CAAC,IAAI,CAACf,OAAO,CAACW,OAAO,CAACK,KAAK,CAAC,EAAE;IACrD,MAAM,IAAIf,cAAc,CACtB,4DACF,CAAC;EACH;EAEA,IAAI,CAACgB,aAAa,GAAGC,SAAS;EAC9B,IAAI,CAACC,kBAAkB,GAAGD,SAAS;EACnC,IAAI,CAACE,gBAAgB,GAAGF,SAAS;EACjC,IAAI,CAACG,kBAAkB,GAAGH,SAAS;EACnC,IAAI,CAACI,gBAAgB,GAAGJ,SAAS;EACjC,IAAI,CAACK,WAAW,GAAGL,SAAS;EAC5B,IAAI,CAACM,kBAAkB,GAAGN,SAAS;EACnC,IAAI,CAACO,aAAa,GAAGP,SAAS;EAC9B,IAAI,CAACQ,0BAA0B,GAAGR,SAAS;EAC3C,IAAI,CAACS,2BAA2B,GAAGT,SAAS;EAE5C,IAAI,CAACU,kBAAkB,GAAG7B,YAAY,CACpCY,OAAO,CAACkB,iBAAiB,EACzBlB,OAAO,CAACE,GACV,CAAC;EAED,MAAMiB,QAAQ,GAAG3B,QAAQ,CAAC4B,cAAc,CAACpB,OAAO,CAACE,GAAG,CAAC;EACrD,MAAMmB,mBAAmB,GAAG7B,QAAQ,CAAC4B,cAAc,CAAC,IAAI,CAACH,kBAAkB,CAAC;EAE5EE,QAAQ,CAACG,kBAAkB,CACzBvB,4BAA4B,CAACwB,iBAAiB,EAC9C,IACF,CAAC;EACDF,mBAAmB,CAACC,kBAAkB,CACpCvB,4BAA4B,CAACyB,+BAA+B,EAC5D,IACF,CAAC;EAED,IAAInC,OAAO,CAACW,OAAO,CAACyB,UAAU,CAAC,EAAE;IAC/BN,QAAQ,CAACG,kBAAkB,CAACI,iBAAiB,CAAC1B,OAAO,CAACyB,UAAU,CAAC,CAAC;EACpE;EAEA,IAAIpC,OAAO,CAACW,OAAO,CAAC2B,wBAAwB,CAAC,EAAE;IAC7CN,mBAAmB,CAACC,kBAAkB,CACpCI,iBAAiB,CAAC1B,OAAO,CAAC2B,wBAAwB,CACpD,CAAC;EACH;EAEA,MAAMC,IAAI,GAAG,IAAI;EACjB,IAAI,CAACC,OAAO,GAAGtB,SAAS;EACxB,IAAIlB,OAAO,CAACW,OAAO,CAACI,KAAK,CAAC,EAAE;IAC1B,IAAI,CAAC0B,mBAAmB,GAAG,IAAInC,kBAAkB,CAAC;MAChDU,KAAK,EAAEL,OAAO,CAACK,KAAK;MACpBD,KAAK,EAAEJ,OAAO,CAACI,KAAK;MACpB2B,oBAAoB,EAAE,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,OAAO,EAAEC,QAAQ,EAAE;QAC9D,OAAOC,YAAY,CAACT,IAAI,EAAEI,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,OAAO,EAAEC,QAAQ,CAAC;MAC3D,CAAC;MACDE,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAIjD,OAAO,CAACuC,IAAI,CAACC,OAAO,CAAC,EAAE;UACzBD,IAAI,CAACC,OAAO,CAAC,CAAC;QAChB;MACF;IACF,CAAC,CAAC;EACJ;EAEA,MAAMJ,UAAU,GAAG,CAAC,CAAC;EACrBA,UAAU,CAACtB,MAAM,GAAGH,OAAO,CAACG,MAAM;EAClCsB,UAAU,CAACc,IAAI,GACb,mEAAmE;EACrEd,UAAU,CAACe,KAAK,GAAG,SAAS;EAC5Bf,UAAU,CAACgB,MAAM,GAAG,UAAU;;EAE9B;EACA,IAAIC,UAAU,CAACvB,QAAQ,CAACwB,eAAe,CAACC,OAAO,CAAC,IAAI,GAAG,EAAE;IACvD;IACA;IACA;IACAnB,UAAU,CAACoB,GAAG,GAAGzD,YAAY,CAC3BY,OAAO,CAAC6C,GAAG,EACX7C,OAAO,CAAC8C,YAAY,IAClB9C,OAAO,CAAC8C,YAAY,CAACC,UAAU,YAAYtD,qBAAqB,GAC9D,WAAW,GACX,QACN,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMuD,KAAK,GAAGvB,UAAU,CAACoB,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC;IACvC,IAAID,KAAK,CAAC,CAAC,CAAC,KAAK,MAAM,IAAIA,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;MAC7C,MAAMC,IAAI,GAAGC,MAAM,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;MAC7B,IACGG,IAAI,IAAI,IAAI,IAAIA,IAAI,GAAG,IAAI,IAAI,CAACrD,mBAAmB,CAACuD,QAAQ,CAACF,IAAI,CAAC,IACnEtD,mBAAmB,CAACwD,QAAQ,CAACF,IAAI,CAAC,EAClC;QACA1B,UAAU,CAACc,IAAI,GACb,mEAAmE;MACvE;IACF;EACF,CAAC,MAAM;IACL;IACAd,UAAU,CAAC6B,GAAG,GAAGlE,YAAY,CAC3BY,OAAO,CAACsD,GAAG,EACXtD,OAAO,CAAC8C,YAAY,IAClB9C,OAAO,CAAC8C,YAAY,CAACC,UAAU,YAAYtD,qBAAqB,GAC9D,WAAW,GACX,WACN,CAAC;EACH;EAEA0B,QAAQ,CAACG,kBAAkB,CAACG,UAAU,EAAE,IAAI,CAAC;EAC7CJ,mBAAmB,CAACC,kBAAkB,CAACG,UAAU,EAAE,IAAI,CAAC;EAExD,MAAM8B,iBAAiB,GAAG;IACxBC,YAAY,EAAExD,OAAO,CAACG,MAAM;IAC5BsD,WAAW,EAAE;EACf,CAAC;EACD;EACA,IAAIf,UAAU,CAACrB,mBAAmB,CAACsB,eAAe,CAACC,OAAO,CAAC,IAAI,GAAG,EAAE;IAClEW,iBAAiB,CAACG,CAAC,GAAG,KAAK;IAC3BH,iBAAiB,CAACI,CAAC,GAAG,KAAK;EAC7B,CAAC,MAAM;IACLJ,iBAAiB,CAACvB,CAAC,GAAG,KAAK;IAC3BuB,iBAAiB,CAACtB,CAAC,GAAG,KAAK;EAC7B;EACAZ,mBAAmB,CAACC,kBAAkB,CAACiC,iBAAiB,EAAE,IAAI,CAAC;EAE/D,IAAI,CAACK,SAAS,GAAGzC,QAAQ;EACzB,IAAI,CAAC0C,qBAAqB,GAAGxC,mBAAmB;EAChD,IAAI,CAACyC,OAAO,GAAG9D,OAAO,CAACG,MAAM;;EAE7B;EACA,IAAI,CAAC4D,aAAa,GAAG,IAAInE,0BAA0B,CAAC;IAClDM,GAAG,EAAEiB,QAAQ;IACb6C,eAAe,EAAE3C,mBAAmB;IACpCyB,YAAY,EAAE1D,YAAY,CACxBY,OAAO,CAAC8C,YAAY,EACpB,IAAIvD,sBAAsB,CAAC;MAAE0E,SAAS,EAAEjE,OAAO,CAACiE;IAAU,CAAC,CAC7D,CAAC;IACDC,SAAS,EAAElE,OAAO,CAACkE,SAAS;IAC5BC,SAAS,EAAEnE,OAAO,CAACmE,SAAS;IAC5BC,UAAU,EAAEpE,OAAO,CAACoE,UAAU;IAC9BC,YAAY,EAAErE,OAAO,CAACqE,YAAY;IAClCC,YAAY,EAAEtE,OAAO,CAACsE,YAAY;IAClCC,UAAU,EAAEvE,OAAO,CAACuE,UAAU;IAC9BC,iBAAiB,EAAExE,OAAO,CAACwE,iBAAiB;IAC5CC,MAAM,EAAEzE,OAAO,CAACyE,MAAM;IACtBC,qBAAqB,EAAEtF,YAAY,CACjCY,OAAO,CAAC0E,qBAAqB,EAC7B3E,4BAA4B,CAAC4E,4BAC/B,CAAC;IACDC,kBAAkB,EAAE5E,OAAO,CAAC4E;EAC9B,CAAC,CAAC;AACJ;AAEA,SAASvC,YAAYA,CAACwC,eAAe,EAAEC,GAAG,EAAEC,GAAG,EAAE7C,KAAK,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACzE,MAAM4C,mBAAmB,GAAG3F,OAAO,CAAC+C,QAAQ,CAAC,GAAGA,QAAQ,CAAC6C,IAAI,GAAG1E,SAAS;EACzE,MAAM2E,YAAY,GAAGL,eAAe,CAACd,aAAa;EAElD,IAAI1E,OAAO,CAAC2F,mBAAmB,CAAC,EAAE;IAChC;IACAE,YAAY,CAACtB,SAAS,CAACtC,kBAAkB,CAAC0D,mBAAmB,CAAC;EAChE;EACA,OAAOE,YAAY,CAAC7C,YAAY,CAACyC,GAAG,EAAEC,GAAG,EAAE7C,KAAK,EAAEC,OAAO,CAAC;AAC5D;AAEA,SAASgD,YAAYA,CACnBN,eAAe,EACf7C,CAAC,EACDC,CAAC,EACDC,KAAK,EACLkD,SAAS,EACTC,QAAQ,EACRjD,QAAQ,EACR;EACA,MAAM4C,mBAAmB,GAAG3F,OAAO,CAAC+C,QAAQ,CAAC,GAAGA,QAAQ,CAAC6C,IAAI,GAAG1E,SAAS;EACzE,MAAM2E,YAAY,GAAGL,eAAe,CAACd,aAAa;EAElD,IAAI1E,OAAO,CAAC2F,mBAAmB,CAAC,EAAE;IAChC;IACAE,YAAY,CAACrB,qBAAqB,CAACvC,kBAAkB,CAAC0D,mBAAmB,CAAC;EAC5E;EACA,OAAOE,YAAY,CAACC,YAAY,CAACnD,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEkD,SAAS,EAAEC,QAAQ,CAAC;AACpE;AAEAC,MAAM,CAACC,gBAAgB,CAACxF,4BAA4B,CAACyF,SAAS,EAAE;EAC9D;AACF;AACA;AACA;AACA;AACA;EACEtF,GAAG,EAAE;IACHuF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC7B,SAAS,CAAC8B,IAAI;IAC5B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAE;IACLF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC7B,SAAS,CAAC+B,KAAK;IAC7B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACExF,MAAM,EAAE;IACNsF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC3B,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEK,SAAS,EAAE;IACTsB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAACI,SAAS;IACrC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE;IACVqB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAACK,UAAU;IACtC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEE,YAAY,EAAE;IACZmB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAACO,YAAY;IACxC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACED,YAAY,EAAE;IACZoB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAACM,YAAY;IACxC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEvB,YAAY,EAAE;IACZ2C,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAACjB,YAAY;IACxC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEoB,SAAS,EAAE;IACTuB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAACG,SAAS;IACrC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,iBAAiB,EAAE;IACjBiB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAACS,iBAAiB;IAC7C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,UAAU,EAAE;IACVH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAAC6B,UAAU;IACtC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEnB,MAAM,EAAE;IACNgB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAACU,MAAM;IAClC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,eAAe,EAAE;IACfJ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAAC8B,eAAe;IAC3C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,kBAAkB,EAAE;IAClBa,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1B,aAAa,CAACa,kBAAkB;IAC9C,CAAC;IACDkB,GAAG,EAAE,SAAAA,CAAUlB,kBAAkB,EAAE;MACjC,IAAI,CAACb,aAAa,CAACa,kBAAkB,GAAGA,kBAAkB;IAC5D;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEvE,KAAK,EAAE;IACLoF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC3D,mBAAmB,CAACzB,KAAK;IACvC,CAAC;IACDyF,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB,IAAI,CAACjE,mBAAmB,CAACzB,KAAK,GAAG0F,KAAK;IACxC;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACE3F,KAAK,EAAE;IACLqF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC3D,mBAAmB,CAAC1B,KAAK;IACvC,CAAC;IACD0F,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB,IAAI,CAACjE,mBAAmB,CAAC1B,KAAK,GAAG2F,KAAK;IACxC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACE7E,iBAAiB,EAAE;IACjBuE,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACxE,kBAAkB;IAChC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlB,4BAA4B,CAACyF,SAAS,CAACQ,cAAc,GAAG,UAAUhE,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAE;EAC7E,OAAO,IAAI,CAAC6B,aAAa,CAACiC,cAAc,CAAChE,CAAC,EAAEC,CAAC,EAAEC,KAAK,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnC,4BAA4B,CAACyF,SAAS,CAACnD,YAAY,GAAG,UACpDL,CAAC,EACDC,CAAC,EACDC,KAAK,EACLC,OAAO,EACP;EACA,IAAI8D,MAAM;EACV,MAAMC,kBAAkB,GAAG,IAAI,CAACpE,mBAAmB;EACnD,IAAIqE,eAAe;;EAEnB;EACA,IAAI9G,OAAO,CAAC6G,kBAAkB,CAAC,EAAE;IAC/BC,eAAe,GAAGD,kBAAkB,CAACC,eAAe;IACpDF,MAAM,GAAGC,kBAAkB,CAACE,YAAY,CAACpE,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,OAAO,CAAC;EAChE;;EAEA;EACA,IAAI,CAAC9C,OAAO,CAAC4G,MAAM,CAAC,EAAE;IACpBA,MAAM,GAAG5D,YAAY,CAAC,IAAI,EAAEL,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,OAAO,EAAEgE,eAAe,CAAC;EACpE;;EAEA;EACA,IAAI9G,OAAO,CAAC4G,MAAM,CAAC,IAAI5G,OAAO,CAAC6G,kBAAkB,CAAC,EAAE;IAClDA,kBAAkB,CAACG,wBAAwB,CAACrE,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,OAAO,CAAC;EACnE;EAEA,OAAO8D,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlG,4BAA4B,CAACyF,SAAS,CAACL,YAAY,GAAG,UACpDnD,CAAC,EACDC,CAAC,EACDC,KAAK,EACLkD,SAAS,EACTC,QAAQ,EACR;EACA,MAAMa,kBAAkB,GAAG,IAAI,CAACpE,mBAAmB;EACnD,MAAMqE,eAAe,GAAG9G,OAAO,CAAC6G,kBAAkB,CAAC,GAC/CA,kBAAkB,CAACC,eAAe,GAClC5F,SAAS;EAEb,OAAO4E,YAAY,CAAC,IAAI,EAAEnD,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEkD,SAAS,EAAEC,QAAQ,EAAEc,eAAe,CAAC;AAC9E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApG,4BAA4B,CAACwB,iBAAiB,GAAG+D,MAAM,CAACgB,MAAM,CAAC;EAC7DC,OAAO,EAAE,KAAK;EACd3D,OAAO,EAAE,OAAO;EAChBT,OAAO,EAAE,QAAQ;EACjBqE,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1G,4BAA4B,CAACyB,+BAA+B,GAAG8D,MAAM,CAACgB,MAAM,CAAC;EAC3EC,OAAO,EAAE,KAAK;EACd3D,OAAO,EAAE,OAAO;EAChBT,OAAO,EAAE;AACX,CAAC,CAAC;AAEFpC,4BAA4B,CAAC4E,4BAA4B,GAAGW,MAAM,CAACgB,MAAM,CAAC,CACxEhB,MAAM,CAACgB,MAAM,CAAC,IAAI5G,oBAAoB,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC,EACnE4F,MAAM,CAACgB,MAAM,CAAC,IAAI5G,oBAAoB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,EAC1D4F,MAAM,CAACgB,MAAM,CAAC,IAAI5G,oBAAoB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAC7D,CAAC;AAEF,SAASgC,iBAAiBA,CAACgF,GAAG,EAAE;EAC9B,MAAMT,MAAM,GAAG,CAAC,CAAC;EACjB,KAAK,MAAMU,GAAG,IAAID,GAAG,EAAE;IACrB,IAAIA,GAAG,CAACE,cAAc,CAACD,GAAG,CAAC,EAAE;MAC3BV,MAAM,CAACU,GAAG,CAACE,WAAW,CAAC,CAAC,CAAC,GAAGH,GAAG,CAACC,GAAG,CAAC;IACtC;EACF;EACA,OAAOV,MAAM;AACf;AACA,eAAelG,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}