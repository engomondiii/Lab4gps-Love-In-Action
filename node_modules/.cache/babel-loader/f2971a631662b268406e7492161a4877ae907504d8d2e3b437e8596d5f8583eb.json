{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} which evaluates to a {@link Cartesian3} vector\n * based on the velocity of the provided {@link PositionProperty}.\n *\n * @alias VelocityVectorProperty\n * @constructor\n *\n * @param {PositionProperty} [position] The position property used to compute the velocity.\n * @param {boolean} [normalize=true] Whether to normalize the computed velocity vector.\n *\n * @example\n * //Create an entity with a billboard rotated to match its velocity.\n * const position = new Cesium.SampledProperty();\n * position.addSamples(...);\n * const entity = viewer.entities.add({\n *   position : position,\n *   billboard : {\n *     image : 'image.png',\n *     alignedAxis : new Cesium.VelocityVectorProperty(position, true) // alignedAxis must be a unit vector\n *   }\n * }));\n */\nfunction VelocityVectorProperty(position, normalize) {\n  this._position = undefined;\n  this._subscription = undefined;\n  this._definitionChanged = new Event();\n  this._normalize = defaultValue(normalize, true);\n  this.position = position;\n}\nObject.defineProperties(VelocityVectorProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof VelocityVectorProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._position);\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * @memberof VelocityVectorProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the position property used to compute the velocity vector.\n   * @memberof VelocityVectorProperty.prototype\n   *\n   * @type {Property|undefined}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      const oldValue = this._position;\n      if (oldValue !== value) {\n        if (defined(oldValue)) {\n          this._subscription();\n        }\n        this._position = value;\n        if (defined(value)) {\n          this._subscription = value._definitionChanged.addEventListener(function () {\n            this._definitionChanged.raiseEvent(this);\n          }, this);\n        }\n        this._definitionChanged.raiseEvent(this);\n      }\n    }\n  },\n  /**\n   * Gets or sets whether the vector produced by this property\n   * will be normalized or not.\n   * @memberof VelocityVectorProperty.prototype\n   *\n   * @type {boolean}\n   */\n  normalize: {\n    get: function () {\n      return this._normalize;\n    },\n    set: function (value) {\n      if (this._normalize === value) {\n        return;\n      }\n      this._normalize = value;\n      this._definitionChanged.raiseEvent(this);\n    }\n  }\n});\nconst position1Scratch = new Cartesian3();\nconst position2Scratch = new Cartesian3();\nconst timeScratch = new JulianDate();\nconst timeNowScratch = new JulianDate();\nconst step = 1.0 / 60.0;\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nVelocityVectorProperty.prototype.getValue = function (time, result) {\n  return this._getValue(time, result);\n};\n\n/**\n * @private\n */\nVelocityVectorProperty.prototype._getValue = function (time, velocityResult, positionResult) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeNowScratch);\n  }\n  if (!defined(velocityResult)) {\n    velocityResult = new Cartesian3();\n  }\n  const property = this._position;\n  if (Property.isConstant(property)) {\n    return this._normalize ? undefined : Cartesian3.clone(Cartesian3.ZERO, velocityResult);\n  }\n  let position1 = property.getValue(time, position1Scratch);\n  let position2 = property.getValue(JulianDate.addSeconds(time, step, timeScratch), position2Scratch);\n\n  //If we don't have a position for now, return undefined.\n  if (!defined(position1)) {\n    return undefined;\n  }\n\n  //If we don't have a position for now + step, see if we have a position for now - step.\n  if (!defined(position2)) {\n    position2 = position1;\n    position1 = property.getValue(JulianDate.addSeconds(time, -step, timeScratch), position2Scratch);\n    if (!defined(position1)) {\n      return undefined;\n    }\n  }\n  if (Cartesian3.equals(position1, position2)) {\n    return this._normalize ? undefined : Cartesian3.clone(Cartesian3.ZERO, velocityResult);\n  }\n  if (defined(positionResult)) {\n    position1.clone(positionResult);\n  }\n  const velocity = Cartesian3.subtract(position2, position1, velocityResult);\n  if (this._normalize) {\n    return Cartesian3.normalize(velocity, velocityResult);\n  }\n  return Cartesian3.divideByScalar(velocity, step, velocityResult);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nVelocityVectorProperty.prototype.equals = function (other) {\n  return this === other ||\n  //\n  other instanceof VelocityVectorProperty && Property.equals(this._position, other._position);\n};\nexport default VelocityVectorProperty;","map":{"version":3,"names":["Cartesian3","defaultValue","defined","Event","JulianDate","Property","VelocityVectorProperty","position","normalize","_position","undefined","_subscription","_definitionChanged","_normalize","Object","defineProperties","prototype","isConstant","get","definitionChanged","set","value","oldValue","addEventListener","raiseEvent","position1Scratch","position2Scratch","timeScratch","timeNowScratch","step","getValue","time","result","_getValue","velocityResult","positionResult","now","property","clone","ZERO","position1","position2","addSeconds","equals","velocity","subtract","divideByScalar","other"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/VelocityVectorProperty.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} which evaluates to a {@link Cartesian3} vector\n * based on the velocity of the provided {@link PositionProperty}.\n *\n * @alias VelocityVectorProperty\n * @constructor\n *\n * @param {PositionProperty} [position] The position property used to compute the velocity.\n * @param {boolean} [normalize=true] Whether to normalize the computed velocity vector.\n *\n * @example\n * //Create an entity with a billboard rotated to match its velocity.\n * const position = new Cesium.SampledProperty();\n * position.addSamples(...);\n * const entity = viewer.entities.add({\n *   position : position,\n *   billboard : {\n *     image : 'image.png',\n *     alignedAxis : new Cesium.VelocityVectorProperty(position, true) // alignedAxis must be a unit vector\n *   }\n * }));\n */\nfunction VelocityVectorProperty(position, normalize) {\n  this._position = undefined;\n  this._subscription = undefined;\n  this._definitionChanged = new Event();\n  this._normalize = defaultValue(normalize, true);\n\n  this.position = position;\n}\n\nObject.defineProperties(VelocityVectorProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof VelocityVectorProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._position);\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * @memberof VelocityVectorProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the position property used to compute the velocity vector.\n   * @memberof VelocityVectorProperty.prototype\n   *\n   * @type {Property|undefined}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      const oldValue = this._position;\n      if (oldValue !== value) {\n        if (defined(oldValue)) {\n          this._subscription();\n        }\n\n        this._position = value;\n\n        if (defined(value)) {\n          this._subscription = value._definitionChanged.addEventListener(\n            function () {\n              this._definitionChanged.raiseEvent(this);\n            },\n            this,\n          );\n        }\n\n        this._definitionChanged.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * Gets or sets whether the vector produced by this property\n   * will be normalized or not.\n   * @memberof VelocityVectorProperty.prototype\n   *\n   * @type {boolean}\n   */\n  normalize: {\n    get: function () {\n      return this._normalize;\n    },\n    set: function (value) {\n      if (this._normalize === value) {\n        return;\n      }\n\n      this._normalize = value;\n      this._definitionChanged.raiseEvent(this);\n    },\n  },\n});\n\nconst position1Scratch = new Cartesian3();\nconst position2Scratch = new Cartesian3();\nconst timeScratch = new JulianDate();\nconst timeNowScratch = new JulianDate();\nconst step = 1.0 / 60.0;\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nVelocityVectorProperty.prototype.getValue = function (time, result) {\n  return this._getValue(time, result);\n};\n\n/**\n * @private\n */\nVelocityVectorProperty.prototype._getValue = function (\n  time,\n  velocityResult,\n  positionResult,\n) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeNowScratch);\n  }\n\n  if (!defined(velocityResult)) {\n    velocityResult = new Cartesian3();\n  }\n\n  const property = this._position;\n  if (Property.isConstant(property)) {\n    return this._normalize\n      ? undefined\n      : Cartesian3.clone(Cartesian3.ZERO, velocityResult);\n  }\n\n  let position1 = property.getValue(time, position1Scratch);\n  let position2 = property.getValue(\n    JulianDate.addSeconds(time, step, timeScratch),\n    position2Scratch,\n  );\n\n  //If we don't have a position for now, return undefined.\n  if (!defined(position1)) {\n    return undefined;\n  }\n\n  //If we don't have a position for now + step, see if we have a position for now - step.\n  if (!defined(position2)) {\n    position2 = position1;\n    position1 = property.getValue(\n      JulianDate.addSeconds(time, -step, timeScratch),\n      position2Scratch,\n    );\n\n    if (!defined(position1)) {\n      return undefined;\n    }\n  }\n\n  if (Cartesian3.equals(position1, position2)) {\n    return this._normalize\n      ? undefined\n      : Cartesian3.clone(Cartesian3.ZERO, velocityResult);\n  }\n\n  if (defined(positionResult)) {\n    position1.clone(positionResult);\n  }\n\n  const velocity = Cartesian3.subtract(position2, position1, velocityResult);\n  if (this._normalize) {\n    return Cartesian3.normalize(velocity, velocityResult);\n  }\n\n  return Cartesian3.divideByScalar(velocity, step, velocityResult);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nVelocityVectorProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof VelocityVectorProperty &&\n      Property.equals(this._position, other._position))\n  );\n};\nexport default VelocityVectorProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}