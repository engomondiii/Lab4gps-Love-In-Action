{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipsoidGeometry from \"./EllipsoidGeometry.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * A description of a sphere centered at the origin.\n *\n * @alias SphereGeometry\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {number} [options.radius=1.0] The radius of the sphere.\n * @param {number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\n * @param {number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\n *\n * @see SphereGeometry#createGeometry\n *\n * @example\n * const sphere = new Cesium.SphereGeometry({\n *   radius : 100.0,\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n * });\n * const geometry = Cesium.SphereGeometry.createGeometry(sphere);\n */\nfunction SphereGeometry(options) {\n  const radius = defaultValue(options.radius, 1.0);\n  const radii = new Cartesian3(radius, radius, radius);\n  const ellipsoidOptions = {\n    radii: radii,\n    stackPartitions: options.stackPartitions,\n    slicePartitions: options.slicePartitions,\n    vertexFormat: options.vertexFormat\n  };\n  this._ellipsoidGeometry = new EllipsoidGeometry(ellipsoidOptions);\n  this._workerName = \"createSphereGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nSphereGeometry.packedLength = EllipsoidGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {SphereGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nSphereGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n\n  return EllipsoidGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\n};\nconst scratchEllipsoidGeometry = new EllipsoidGeometry();\nconst scratchOptions = {\n  radius: undefined,\n  radii: new Cartesian3(),\n  vertexFormat: new VertexFormat(),\n  stackPartitions: undefined,\n  slicePartitions: undefined\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {SphereGeometry} [result] The object into which to store the result.\n * @returns {SphereGeometry} The modified result parameter or a new SphereGeometry instance if one was not provided.\n */\nSphereGeometry.unpack = function (array, startingIndex, result) {\n  const ellipsoidGeometry = EllipsoidGeometry.unpack(array, startingIndex, scratchEllipsoidGeometry);\n  scratchOptions.vertexFormat = VertexFormat.clone(ellipsoidGeometry._vertexFormat, scratchOptions.vertexFormat);\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\n  if (!defined(result)) {\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\n    return new SphereGeometry(scratchOptions);\n  }\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\n  result._ellipsoidGeometry = new EllipsoidGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of a sphere, including its vertices, indices, and a bounding sphere.\n *\n * @param {SphereGeometry} sphereGeometry A description of the sphere.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nSphereGeometry.createGeometry = function (sphereGeometry) {\n  return EllipsoidGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\n};\nexport default SphereGeometry;","map":{"version":3,"names":["Cartesian3","Check","defaultValue","defined","EllipsoidGeometry","VertexFormat","SphereGeometry","options","radius","radii","ellipsoidOptions","stackPartitions","slicePartitions","vertexFormat","_ellipsoidGeometry","_workerName","packedLength","pack","value","array","startingIndex","typeOf","object","scratchEllipsoidGeometry","scratchOptions","undefined","unpack","result","ellipsoidGeometry","clone","_vertexFormat","_stackPartitions","_slicePartitions","_radii","x","createGeometry","sphereGeometry"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/SphereGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipsoidGeometry from \"./EllipsoidGeometry.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * A description of a sphere centered at the origin.\n *\n * @alias SphereGeometry\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {number} [options.radius=1.0] The radius of the sphere.\n * @param {number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\n * @param {number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\n *\n * @see SphereGeometry#createGeometry\n *\n * @example\n * const sphere = new Cesium.SphereGeometry({\n *   radius : 100.0,\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n * });\n * const geometry = Cesium.SphereGeometry.createGeometry(sphere);\n */\nfunction SphereGeometry(options) {\n  const radius = defaultValue(options.radius, 1.0);\n  const radii = new Cartesian3(radius, radius, radius);\n  const ellipsoidOptions = {\n    radii: radii,\n    stackPartitions: options.stackPartitions,\n    slicePartitions: options.slicePartitions,\n    vertexFormat: options.vertexFormat,\n  };\n\n  this._ellipsoidGeometry = new EllipsoidGeometry(ellipsoidOptions);\n  this._workerName = \"createSphereGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nSphereGeometry.packedLength = EllipsoidGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {SphereGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nSphereGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n\n  return EllipsoidGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\n};\n\nconst scratchEllipsoidGeometry = new EllipsoidGeometry();\nconst scratchOptions = {\n  radius: undefined,\n  radii: new Cartesian3(),\n  vertexFormat: new VertexFormat(),\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {SphereGeometry} [result] The object into which to store the result.\n * @returns {SphereGeometry} The modified result parameter or a new SphereGeometry instance if one was not provided.\n */\nSphereGeometry.unpack = function (array, startingIndex, result) {\n  const ellipsoidGeometry = EllipsoidGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipsoidGeometry,\n  );\n  scratchOptions.vertexFormat = VertexFormat.clone(\n    ellipsoidGeometry._vertexFormat,\n    scratchOptions.vertexFormat,\n  );\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\n    return new SphereGeometry(scratchOptions);\n  }\n\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\n  result._ellipsoidGeometry = new EllipsoidGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of a sphere, including its vertices, indices, and a bounding sphere.\n *\n * @param {SphereGeometry} sphereGeometry A description of the sphere.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nSphereGeometry.createGeometry = function (sphereGeometry) {\n  return EllipsoidGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\n};\nexport default SphereGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}