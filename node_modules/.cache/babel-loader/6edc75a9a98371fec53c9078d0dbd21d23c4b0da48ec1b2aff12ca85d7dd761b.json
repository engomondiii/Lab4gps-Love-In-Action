{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/* Intersection defines\\n\\\n#define INTERSECTION_COUNT ###\\n\\\n*/\\n\\\n\\n\\\n#define NO_HIT (-czm_infinity)\\n\\\n#define INF_HIT (czm_infinity * 0.5)\\n\\\n\\n\\\nstruct RayShapeIntersection {\\n\\\n    vec4 entry;\\n\\\n    vec4 exit;\\n\\\n};\\n\\\n\\n\\\nvec4 intersectionMin(in vec4 intersect0, in vec4 intersect1)\\n\\\n{\\n\\\n    if (intersect0.w == NO_HIT) {\\n\\\n        return intersect1;\\n\\\n    } else if (intersect1.w == NO_HIT) {\\n\\\n        return intersect0;\\n\\\n    }\\n\\\n    return (intersect0.w <= intersect1.w) ? intersect0 : intersect1;\\n\\\n}\\n\\\n\\n\\\nvec4 intersectionMax(in vec4 intersect0, in vec4 intersect1)\\n\\\n{\\n\\\n    return (intersect0.w >= intersect1.w) ? intersect0 : intersect1;\\n\\\n}\\n\\\n\\n\\\nRayShapeIntersection intersectIntersections(in Ray ray, in RayShapeIntersection intersect0, in RayShapeIntersection intersect1)\\n\\\n{\\n\\\n    bool missed = (intersect0.entry.w == NO_HIT) ||\\n\\\n        (intersect1.entry.w == NO_HIT) ||\\n\\\n        (intersect0.exit.w < intersect1.entry.w) ||\\n\\\n        (intersect0.entry.w > intersect1.exit.w);\\n\\\n    if (missed) {\\n\\\n        vec4 miss = vec4(normalize(ray.dir), NO_HIT);\\n\\\n        return RayShapeIntersection(miss, miss);\\n\\\n    }\\n\\\n\\n\\\n    vec4 entry = intersectionMax(intersect0.entry, intersect1.entry);\\n\\\n    vec4 exit = intersectionMin(intersect0.exit, intersect1.exit);\\n\\\n\\n\\\n    return RayShapeIntersection(entry, exit);\\n\\\n}\\n\\\n\\n\\\nstruct Intersections {\\n\\\n    // Don't access these member variables directly - call the functions instead.\\n\\\n\\n\\\n    // Store an array of ray-surface intersections. Each intersection is composed of:\\n\\\n    //  .xyz for the surface normal at the intersection point\\n\\\n    //  .w for the T value\\n\\\n    // The scale of the normal encodes the shape intersection type:\\n\\\n    //  length(intersection.xyz) = 1: positive shape entry\\n\\\n    //  length(intersection.xyz) = 2: positive shape exit\\n\\\n    //  length(intersection.xyz) = 3: negative shape entry\\n\\\n    //  length(intersection.xyz) = 4: negative shape exit\\n\\\n    // INTERSECTION_COUNT is the number of ray-*shape* (volume) intersections,\\n\\\n    // so we need twice as many to track ray-*surface* intersections\\n\\\n    vec4 intersections[INTERSECTION_COUNT * 2];\\n\\\n\\n\\\n    #if (INTERSECTION_COUNT > 1)\\n\\\n        // Maintain state for future nextIntersection calls\\n\\\n        int index;\\n\\\n        int surroundCount;\\n\\\n        bool surroundIsPositive;\\n\\\n    #endif\\n\\\n};\\n\\\n\\n\\\nRayShapeIntersection getFirstIntersection(in Intersections ix) \\n\\\n{\\n\\\n    return RayShapeIntersection(ix.intersections[0], ix.intersections[1]);\\n\\\n}\\n\\\n\\n\\\nvec4 encodeIntersectionType(vec4 intersection, int index, bool entry)\\n\\\n{\\n\\\n    float scale = float(index > 0) * 2.0 + float(!entry) + 1.0;\\n\\\n    return vec4(intersection.xyz * scale, intersection.w);\\n\\\n}\\n\\\n\\n\\\n// Use defines instead of real functions because WebGL1 cannot access array with non-constant index.\\n\\\n#define setIntersection(/*inout Intersections*/ ix, /*int*/ index, /*float*/ t, /*bool*/ positive, /*bool*/ enter) (ix).intersections[(index)] = vec4(0.0, float(!positive) * 2.0 + float(!enter) + 1.0, 0.0, (t))\\n\\\n#define setIntersectionPair(/*inout Intersections*/ ix, /*int*/ index, /*vec2*/ entryExit) (ix).intersections[(index) * 2 + 0] = vec4(0.0, float((index) > 0) * 2.0 + 1.0, 0.0, (entryExit).x); (ix).intersections[(index) * 2 + 1] = vec4(0.0, float((index) > 0) * 2.0 + 2.0, 0.0, (entryExit).y)\\n\\\n#define setSurfaceIntersection(/*inout Intersections*/ ix, /*int*/ index, /*vec4*/ intersection, /*bool*/ positive, /*bool*/ enter) (ix).intersections[(index)] = encodeIntersectionType((intersection), int(!positive), (enter))\\n\\\n#define setShapeIntersection(/*inout Intersections*/ ix, /*int*/ index, /*RayShapeIntersection*/ intersection) (ix).intersections[(index) * 2 + 0] = encodeIntersectionType((intersection).entry, (index), true); (ix).intersections[(index) * 2 + 1] = encodeIntersectionType((intersection).exit, (index), false)\\n\\\n\\n\\\n#if (INTERSECTION_COUNT > 1)\\n\\\nvoid initializeIntersections(inout Intersections ix) {\\n\\\n    // Sort the intersections from min T to max T with bubble sort.\\n\\\n    // Note: If this sorting function changes, some of the intersection test may\\n\\\n    // need to be updated. Search for \\\"bubble sort\\\" to find those areas.\\n\\\n    const int sortPasses = INTERSECTION_COUNT * 2 - 1;\\n\\\n    for (int n = sortPasses; n > 0; --n) {\\n\\\n        for (int i = 0; i < sortPasses; ++i) {\\n\\\n            // The loop should be: for (i = 0; i < n; ++i) {...} but WebGL1 cannot\\n\\\n            // loop with non-constant condition, so it has to break early instead\\n\\\n            if (i >= n) { break; }\\n\\\n\\n\\\n            vec4 intersect0 = ix.intersections[i + 0];\\n\\\n            vec4 intersect1 = ix.intersections[i + 1];\\n\\\n\\n\\\n            bool inOrder = intersect0.w <= intersect1.w;\\n\\\n\\n\\\n            ix.intersections[i + 0] = inOrder ? intersect0 : intersect1;\\n\\\n            ix.intersections[i + 1] = inOrder ? intersect1 : intersect0;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    // Prepare initial state for nextIntersection\\n\\\n    ix.index = 0;\\n\\\n    ix.surroundCount = 0;\\n\\\n    ix.surroundIsPositive = false;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n#if (INTERSECTION_COUNT > 1)\\n\\\nRayShapeIntersection nextIntersection(inout Intersections ix) {\\n\\\n    vec4 surfaceIntersection = vec4(0.0, 0.0, 0.0, NO_HIT);\\n\\\n    RayShapeIntersection shapeIntersection = RayShapeIntersection(surfaceIntersection, surfaceIntersection);\\n\\\n\\n\\\n    const int passCount = INTERSECTION_COUNT * 2;\\n\\\n\\n\\\n    if (ix.index == passCount) {\\n\\\n        return shapeIntersection;\\n\\\n    }\\n\\\n\\n\\\n    for (int i = 0; i < passCount; ++i) {\\n\\\n        // The loop should be: for (i = ix.index; i < passCount; ++i) {...} but WebGL1 cannot\\n\\\n        // loop with non-constant condition, so it has to continue instead.\\n\\\n        if (i < ix.index) {\\n\\\n            continue;\\n\\\n        }\\n\\\n\\n\\\n        ix.index = i + 1;\\n\\\n\\n\\\n        surfaceIntersection = ix.intersections[i];\\n\\\n        int intersectionType = int(length(surfaceIntersection.xyz) - 0.5);\\n\\\n        bool currShapeIsPositive = intersectionType < 2;\\n\\\n        bool enter = intMod(intersectionType, 2) == 0;\\n\\\n\\n\\\n        ix.surroundCount += enter ? +1 : -1;\\n\\\n        ix.surroundIsPositive = currShapeIsPositive ? enter : ix.surroundIsPositive;\\n\\\n\\n\\\n        // entering positive or exiting negative\\n\\\n        if (ix.surroundCount == 1 && ix.surroundIsPositive && enter == currShapeIsPositive) {\\n\\\n            shapeIntersection.entry = surfaceIntersection;\\n\\\n        }\\n\\\n\\n\\\n        // exiting positive or entering negative after being inside positive\\n\\\n        bool exitPositive = !enter && currShapeIsPositive && ix.surroundCount == 0;\\n\\\n        bool enterNegativeFromPositive = enter && !currShapeIsPositive && ix.surroundCount == 2 && ix.surroundIsPositive;\\n\\\n        if (exitPositive || enterNegativeFromPositive) {\\n\\\n            shapeIntersection.exit = surfaceIntersection;\\n\\\n\\n\\\n            // entry and exit have been found, so the loop can stop\\n\\\n            if (exitPositive) {\\n\\\n                // After exiting positive shape there is nothing left to intersect, so jump to the end index.\\n\\\n                ix.index = passCount;\\n\\\n            }\\n\\\n            break;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    return shapeIntersection;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n// NOTE: initializeIntersections, nextIntersection aren't even declared unless INTERSECTION_COUNT > 1\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Voxels/IntersectionUtils.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"/* Intersection defines\\n\\\n#define INTERSECTION_COUNT ###\\n\\\n*/\\n\\\n\\n\\\n#define NO_HIT (-czm_infinity)\\n\\\n#define INF_HIT (czm_infinity * 0.5)\\n\\\n\\n\\\nstruct RayShapeIntersection {\\n\\\n    vec4 entry;\\n\\\n    vec4 exit;\\n\\\n};\\n\\\n\\n\\\nvec4 intersectionMin(in vec4 intersect0, in vec4 intersect1)\\n\\\n{\\n\\\n    if (intersect0.w == NO_HIT) {\\n\\\n        return intersect1;\\n\\\n    } else if (intersect1.w == NO_HIT) {\\n\\\n        return intersect0;\\n\\\n    }\\n\\\n    return (intersect0.w <= intersect1.w) ? intersect0 : intersect1;\\n\\\n}\\n\\\n\\n\\\nvec4 intersectionMax(in vec4 intersect0, in vec4 intersect1)\\n\\\n{\\n\\\n    return (intersect0.w >= intersect1.w) ? intersect0 : intersect1;\\n\\\n}\\n\\\n\\n\\\nRayShapeIntersection intersectIntersections(in Ray ray, in RayShapeIntersection intersect0, in RayShapeIntersection intersect1)\\n\\\n{\\n\\\n    bool missed = (intersect0.entry.w == NO_HIT) ||\\n\\\n        (intersect1.entry.w == NO_HIT) ||\\n\\\n        (intersect0.exit.w < intersect1.entry.w) ||\\n\\\n        (intersect0.entry.w > intersect1.exit.w);\\n\\\n    if (missed) {\\n\\\n        vec4 miss = vec4(normalize(ray.dir), NO_HIT);\\n\\\n        return RayShapeIntersection(miss, miss);\\n\\\n    }\\n\\\n\\n\\\n    vec4 entry = intersectionMax(intersect0.entry, intersect1.entry);\\n\\\n    vec4 exit = intersectionMin(intersect0.exit, intersect1.exit);\\n\\\n\\n\\\n    return RayShapeIntersection(entry, exit);\\n\\\n}\\n\\\n\\n\\\nstruct Intersections {\\n\\\n    // Don't access these member variables directly - call the functions instead.\\n\\\n\\n\\\n    // Store an array of ray-surface intersections. Each intersection is composed of:\\n\\\n    //  .xyz for the surface normal at the intersection point\\n\\\n    //  .w for the T value\\n\\\n    // The scale of the normal encodes the shape intersection type:\\n\\\n    //  length(intersection.xyz) = 1: positive shape entry\\n\\\n    //  length(intersection.xyz) = 2: positive shape exit\\n\\\n    //  length(intersection.xyz) = 3: negative shape entry\\n\\\n    //  length(intersection.xyz) = 4: negative shape exit\\n\\\n    // INTERSECTION_COUNT is the number of ray-*shape* (volume) intersections,\\n\\\n    // so we need twice as many to track ray-*surface* intersections\\n\\\n    vec4 intersections[INTERSECTION_COUNT * 2];\\n\\\n\\n\\\n    #if (INTERSECTION_COUNT > 1)\\n\\\n        // Maintain state for future nextIntersection calls\\n\\\n        int index;\\n\\\n        int surroundCount;\\n\\\n        bool surroundIsPositive;\\n\\\n    #endif\\n\\\n};\\n\\\n\\n\\\nRayShapeIntersection getFirstIntersection(in Intersections ix) \\n\\\n{\\n\\\n    return RayShapeIntersection(ix.intersections[0], ix.intersections[1]);\\n\\\n}\\n\\\n\\n\\\nvec4 encodeIntersectionType(vec4 intersection, int index, bool entry)\\n\\\n{\\n\\\n    float scale = float(index > 0) * 2.0 + float(!entry) + 1.0;\\n\\\n    return vec4(intersection.xyz * scale, intersection.w);\\n\\\n}\\n\\\n\\n\\\n// Use defines instead of real functions because WebGL1 cannot access array with non-constant index.\\n\\\n#define setIntersection(/*inout Intersections*/ ix, /*int*/ index, /*float*/ t, /*bool*/ positive, /*bool*/ enter) (ix).intersections[(index)] = vec4(0.0, float(!positive) * 2.0 + float(!enter) + 1.0, 0.0, (t))\\n\\\n#define setIntersectionPair(/*inout Intersections*/ ix, /*int*/ index, /*vec2*/ entryExit) (ix).intersections[(index) * 2 + 0] = vec4(0.0, float((index) > 0) * 2.0 + 1.0, 0.0, (entryExit).x); (ix).intersections[(index) * 2 + 1] = vec4(0.0, float((index) > 0) * 2.0 + 2.0, 0.0, (entryExit).y)\\n\\\n#define setSurfaceIntersection(/*inout Intersections*/ ix, /*int*/ index, /*vec4*/ intersection, /*bool*/ positive, /*bool*/ enter) (ix).intersections[(index)] = encodeIntersectionType((intersection), int(!positive), (enter))\\n\\\n#define setShapeIntersection(/*inout Intersections*/ ix, /*int*/ index, /*RayShapeIntersection*/ intersection) (ix).intersections[(index) * 2 + 0] = encodeIntersectionType((intersection).entry, (index), true); (ix).intersections[(index) * 2 + 1] = encodeIntersectionType((intersection).exit, (index), false)\\n\\\n\\n\\\n#if (INTERSECTION_COUNT > 1)\\n\\\nvoid initializeIntersections(inout Intersections ix) {\\n\\\n    // Sort the intersections from min T to max T with bubble sort.\\n\\\n    // Note: If this sorting function changes, some of the intersection test may\\n\\\n    // need to be updated. Search for \\\"bubble sort\\\" to find those areas.\\n\\\n    const int sortPasses = INTERSECTION_COUNT * 2 - 1;\\n\\\n    for (int n = sortPasses; n > 0; --n) {\\n\\\n        for (int i = 0; i < sortPasses; ++i) {\\n\\\n            // The loop should be: for (i = 0; i < n; ++i) {...} but WebGL1 cannot\\n\\\n            // loop with non-constant condition, so it has to break early instead\\n\\\n            if (i >= n) { break; }\\n\\\n\\n\\\n            vec4 intersect0 = ix.intersections[i + 0];\\n\\\n            vec4 intersect1 = ix.intersections[i + 1];\\n\\\n\\n\\\n            bool inOrder = intersect0.w <= intersect1.w;\\n\\\n\\n\\\n            ix.intersections[i + 0] = inOrder ? intersect0 : intersect1;\\n\\\n            ix.intersections[i + 1] = inOrder ? intersect1 : intersect0;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    // Prepare initial state for nextIntersection\\n\\\n    ix.index = 0;\\n\\\n    ix.surroundCount = 0;\\n\\\n    ix.surroundIsPositive = false;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n#if (INTERSECTION_COUNT > 1)\\n\\\nRayShapeIntersection nextIntersection(inout Intersections ix) {\\n\\\n    vec4 surfaceIntersection = vec4(0.0, 0.0, 0.0, NO_HIT);\\n\\\n    RayShapeIntersection shapeIntersection = RayShapeIntersection(surfaceIntersection, surfaceIntersection);\\n\\\n\\n\\\n    const int passCount = INTERSECTION_COUNT * 2;\\n\\\n\\n\\\n    if (ix.index == passCount) {\\n\\\n        return shapeIntersection;\\n\\\n    }\\n\\\n\\n\\\n    for (int i = 0; i < passCount; ++i) {\\n\\\n        // The loop should be: for (i = ix.index; i < passCount; ++i) {...} but WebGL1 cannot\\n\\\n        // loop with non-constant condition, so it has to continue instead.\\n\\\n        if (i < ix.index) {\\n\\\n            continue;\\n\\\n        }\\n\\\n\\n\\\n        ix.index = i + 1;\\n\\\n\\n\\\n        surfaceIntersection = ix.intersections[i];\\n\\\n        int intersectionType = int(length(surfaceIntersection.xyz) - 0.5);\\n\\\n        bool currShapeIsPositive = intersectionType < 2;\\n\\\n        bool enter = intMod(intersectionType, 2) == 0;\\n\\\n\\n\\\n        ix.surroundCount += enter ? +1 : -1;\\n\\\n        ix.surroundIsPositive = currShapeIsPositive ? enter : ix.surroundIsPositive;\\n\\\n\\n\\\n        // entering positive or exiting negative\\n\\\n        if (ix.surroundCount == 1 && ix.surroundIsPositive && enter == currShapeIsPositive) {\\n\\\n            shapeIntersection.entry = surfaceIntersection;\\n\\\n        }\\n\\\n\\n\\\n        // exiting positive or entering negative after being inside positive\\n\\\n        bool exitPositive = !enter && currShapeIsPositive && ix.surroundCount == 0;\\n\\\n        bool enterNegativeFromPositive = enter && !currShapeIsPositive && ix.surroundCount == 2 && ix.surroundIsPositive;\\n\\\n        if (exitPositive || enterNegativeFromPositive) {\\n\\\n            shapeIntersection.exit = surfaceIntersection;\\n\\\n\\n\\\n            // entry and exit have been found, so the loop can stop\\n\\\n            if (exitPositive) {\\n\\\n                // After exiting positive shape there is nothing left to intersect, so jump to the end index.\\n\\\n                ix.index = passCount;\\n\\\n            }\\n\\\n            break;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    return shapeIntersection;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n// NOTE: initializeIntersections, nextIntersection aren't even declared unless INTERSECTION_COUNT > 1\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACfignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}