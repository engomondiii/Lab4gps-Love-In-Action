{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { assertNever } from '../utils';\nimport { AbstractMatch } from './abstract-match';\n/**\n * @class Autolinker.match.Hashtag\n * @extends Autolinker.match.AbstractMatch\n *\n * Represents a Hashtag match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\nvar HashtagMatch = /** @class */function (_super) {\n  __extends(HashtagMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n  function HashtagMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @public\n     * @property {'hashtag'} type\n     *\n     * A string name for the type of match that this class represents. Can be\n     * used in a TypeScript discriminating union to type-narrow from the\n     * `Match` type.\n     */\n    _this.type = 'hashtag';\n    /**\n     * @cfg {String} serviceName\n     *\n     * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n     * for available values.\n     */\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {String} hashtag (required)\n     *\n     * The HashtagMatch that was matched, without the '#'.\n     */\n    _this.hashtag = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    _this.serviceName = cfg.serviceName;\n    _this.hashtag = cfg.hashtag;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of HashtagMatch, returns 'hashtag'.\n   *\n   * @return {String}\n   */\n  HashtagMatch.prototype.getType = function () {\n    return 'hashtag';\n  };\n  /**\n   * Returns the configured {@link #serviceName} to point the HashtagMatch to.\n   * Ex: 'facebook', 'twitter'.\n   *\n   * @return {String}\n   */\n  HashtagMatch.prototype.getServiceName = function () {\n    return this.serviceName;\n  };\n  /**\n   * Returns the matched hashtag, without the '#' character.\n   *\n   * @return {String}\n   */\n  HashtagMatch.prototype.getHashtag = function () {\n    return this.hashtag;\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n  HashtagMatch.prototype.getAnchorHref = function () {\n    var serviceName = this.serviceName,\n      hashtag = this.hashtag;\n    switch (serviceName) {\n      case 'twitter':\n        return 'https://twitter.com/hashtag/' + hashtag;\n      case 'facebook':\n        return 'https://www.facebook.com/hashtag/' + hashtag;\n      case 'instagram':\n        return 'https://instagram.com/explore/tags/' + hashtag;\n      case 'tiktok':\n        return 'https://www.tiktok.com/tag/' + hashtag;\n      default:\n        // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case\n        assertNever(serviceName);\n        throw new Error(\"Invalid hashtag service: \".concat(serviceName));\n    }\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n  HashtagMatch.prototype.getAnchorText = function () {\n    return '#' + this.hashtag;\n  };\n  /**\n   * Returns the CSS class suffixes that should be used on a tag built with\n   * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n   * details.\n   *\n   * @return {String[]}\n   */\n  HashtagMatch.prototype.getCssClassSuffixes = function () {\n    var cssClassSuffixes = _super.prototype.getCssClassSuffixes.call(this),\n      serviceName = this.getServiceName();\n    if (serviceName) {\n      cssClassSuffixes.push(serviceName);\n    }\n    return cssClassSuffixes;\n  };\n  return HashtagMatch;\n}(AbstractMatch);\nexport { HashtagMatch };","map":{"version":3,"names":["assertNever","AbstractMatch","HashtagMatch","_super","__extends","cfg","_this","call","type","serviceName","hashtag","prototype","getType","getServiceName","getHashtag","getAnchorHref","Error","concat","getAnchorText","getCssClassSuffixes","cssClassSuffixes","push"],"sources":["../../../src/match/hashtag-match.ts"],"sourcesContent":[null],"mappings":";AACA,SAASA,WAAW,QAAQ,UAAU;AACtC,SAASC,aAAa,QAA6B,kBAAkB;AAErE;;;;;;;;;;AAUA,IAAAC,YAAA,0BAAAC,MAAA;EAAkCC,SAAA,CAAAF,YAAA,EAAAC,MAAA;EA0B9B;;;;;EAKA,SAAAD,aAAYG,GAAuB;IAAnC,IAAAC,KAAA,GACIH,MAAA,CAAAI,IAAA,OAAMF,GAAG,CAAC;IA/Bd;;;;;;;;IAQgBC,KAAA,CAAAE,IAAI,GAAc,SAAS;IAE3C;;;;;;IAMiBF,KAAA,CAAAG,WAAW,GAAmB,SAAS,CAAC,CAAC;IAE1D;;;;;IAKiBH,KAAA,CAAAI,OAAO,GAAW,EAAE,CAAC,CAAC;IAUnCJ,KAAI,CAACG,WAAW,GAAGJ,GAAG,CAACI,WAAW;IAClCH,KAAI,CAACI,OAAO,GAAGL,GAAG,CAACK,OAAO;;EAC9B;EAEA;;;;;;EAMAR,YAAA,CAAAS,SAAA,CAAAC,OAAO,GAAP;IACI,OAAO,SAAS;EACpB,CAAC;EAED;;;;;;EAMAV,YAAA,CAAAS,SAAA,CAAAE,cAAc,GAAd;IACI,OAAO,IAAI,CAACJ,WAAW;EAC3B,CAAC;EAED;;;;;EAKAP,YAAA,CAAAS,SAAA,CAAAG,UAAU,GAAV;IACI,OAAO,IAAI,CAACJ,OAAO;EACvB,CAAC;EAED;;;;;EAKAR,YAAA,CAAAS,SAAA,CAAAI,aAAa,GAAb;IACI,IAAIN,WAAW,GAAG,IAAI,CAACA,WAAW;MAC9BC,OAAO,GAAG,IAAI,CAACA,OAAO;IAE1B,QAAQD,WAAW;MACf,KAAK,SAAS;QACV,OAAO,8BAA8B,GAAGC,OAAO;MACnD,KAAK,UAAU;QACX,OAAO,mCAAmC,GAAGA,OAAO;MACxD,KAAK,WAAW;QACZ,OAAO,qCAAqC,GAAGA,OAAO;MAC1D,KAAK,QAAQ;QACT,OAAO,6BAA6B,GAAGA,OAAO;MAElD;QACI;QACAV,WAAW,CAACS,WAAW,CAAC;QACxB,MAAM,IAAIO,KAAK,CAAC,4BAAAC,MAAA,CAA4BR,WAAW,CAAE,CAAC;;EAEtE,CAAC;EAED;;;;;EAKAP,YAAA,CAAAS,SAAA,CAAAO,aAAa,GAAb;IACI,OAAO,GAAG,GAAG,IAAI,CAACR,OAAO;EAC7B,CAAC;EAED;;;;;;;EAOAR,YAAA,CAAAS,SAAA,CAAAQ,mBAAmB,GAAnB;IACI,IAAIC,gBAAgB,GAAGjB,MAAA,CAAAQ,SAAA,CAAMQ,mBAAmB,CAAAZ,IAAA,MAAE;MAC9CE,WAAW,GAAG,IAAI,CAACI,cAAc,EAAE;IAEvC,IAAIJ,WAAW,EAAE;MACbW,gBAAgB,CAACC,IAAI,CAACZ,WAAW,CAAC;;IAEtC,OAAOW,gBAAgB;EAC3B,CAAC;EACL,OAAAlB,YAAC;AAAD,CAAC,CAtHiCD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}