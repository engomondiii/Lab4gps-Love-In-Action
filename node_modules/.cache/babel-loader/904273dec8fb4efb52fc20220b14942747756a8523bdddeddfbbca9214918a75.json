{"ast":null,"code":"import Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Event from \"./Event.js\";\nimport GeographicTilingScheme from \"./GeographicTilingScheme.js\";\nimport HeightmapTerrainData from \"./HeightmapTerrainData.js\";\nimport TerrainProvider from \"./TerrainProvider.js\";\n\n/**\n * @callback CustomHeightmapTerrainProvider.GeometryCallback\n * @param {number} x The X coordinate of the tile for which to request geometry.\n * @param {number} y The Y coordinate of the tile for which to request geometry.\n * @param {number} level The level of the tile for which to request geometry.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array|number[]|Promise<Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array|number[]>|undefined} An array or a promise to an array of heights in row-major order. If undefined, the globe will render the parent tile.\n */\n\n/**\n * A simple {@link TerrainProvider} that gets height values from a callback function.\n * It can be used for procedurally generated terrain or as a way to load custom\n * heightmap data without creating a subclass of {@link TerrainProvider}.\n *\n * There are some limitations such as no water mask, no vertex normals, and no\n * availability, so a full-fledged {@link TerrainProvider} subclass is better suited\n * for these more sophisticated use cases.\n *\n * @alias CustomHeightmapTerrainProvider\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {CustomHeightmapTerrainProvider.GeometryCallback} options.callback The callback function for requesting tile geometry.\n * @param {number} options.width The number of columns per heightmap tile.\n * @param {number} options.height The number of rows per heightmap tile.\n * @param {TilingScheme} [options.tilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles. If this parameter is not provided, a {@link GeographicTilingScheme}\n * is used.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid.  If the tilingScheme is specified,\n * this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n * parameter is specified, the default ellipsoid is used.\n * @param {Credit|string} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @example\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrainProvider: new Cesium.CustomHeightmapTerrainProvider({\n *     width: 32,\n *     height: 32,\n *     callback: function (x, y, level) {\n *       return new Float32Array(32 * 32); // all zeros\n *     },\n *   }),\n * });\n *\n * @see TerrainProvider\n */\nfunction CustomHeightmapTerrainProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.callback\", options.callback);\n  Check.defined(\"options.width\", options.width);\n  Check.defined(\"options.height\", options.height);\n  //>>includeEnd('debug');\n\n  this._callback = options.callback;\n  this._tilingScheme = options.tilingScheme;\n  if (!defined(this._tilingScheme)) {\n    this._tilingScheme = new GeographicTilingScheme({\n      ellipsoid: defaultValue(options.ellipsoid, Ellipsoid.default)\n    });\n  }\n  this._width = options.width;\n  this._height = options.height;\n  const maxTileDimensions = Math.max(this._width, this._height);\n  this._levelZeroMaximumGeometricError = TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap(this._tilingScheme.ellipsoid, maxTileDimensions, this._tilingScheme.getNumberOfXTilesAtLevel(0));\n  this._errorEvent = new Event();\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n}\nObject.defineProperties(CustomHeightmapTerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error. By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it. Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets the credit to display when this terrain provider is active. Typically this is used to credit\n   * the source of the terrain.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask. The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.\n   * Water mask is not supported by {@link CustomHeightmapTerrainProvider}, so the return\n   * value will always be false.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasWaterMask: {\n    get: function () {\n      return false;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * Vertex normals are not supported by {@link CustomHeightmapTerrainProvider}, so the return\n   * value will always be false.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasVertexNormals: {\n    get: function () {\n      return false;\n    }\n  },\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles. This property may be undefined if availability\n   * information is not available.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Gets the number of columns per heightmap tile.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  width: {\n    get: function () {\n      return this._width;\n    }\n  },\n  /**\n   * Gets the number of rows per heightmap tile.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  height: {\n    get: function () {\n      return this._height;\n    }\n  }\n});\n\n/**\n * Requests the geometry for a given tile. The result includes terrain\n * data and indicates that all child tiles are available.\n *\n * @param {number} x The X coordinate of the tile for which to request geometry.\n * @param {number} y The Y coordinate of the tile for which to request geometry.\n * @param {number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise<TerrainData>|undefined} A promise for the requested geometry. If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\nCustomHeightmapTerrainProvider.prototype.requestTileGeometry = function (x, y, level, request) {\n  const promise = this._callback(x, y, level);\n  if (!defined(promise)) {\n    return undefined;\n  }\n  const width = this._width;\n  const height = this._height;\n  return Promise.resolve(promise).then(function (heightmapData) {\n    let buffer = heightmapData;\n    if (Array.isArray(buffer)) {\n      // HeightmapTerrainData expects a TypedArray, so convert from number[] to Float64Array\n      buffer = new Float64Array(buffer);\n    }\n    return new HeightmapTerrainData({\n      buffer: buffer,\n      width: width,\n      height: height\n    });\n  });\n};\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {number} level The tile level for which to get the maximum geometric error.\n * @returns {number} The maximum geometric error.\n */\nCustomHeightmapTerrainProvider.prototype.getLevelMaximumGeometricError = function (level) {\n  return this._levelZeroMaximumGeometricError / (1 << level);\n};\n\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {number} x The X coordinate of the tile for which to request geometry.\n * @param {number} y The Y coordinate of the tile for which to request geometry.\n * @param {number} level The level of the tile for which to request geometry.\n * @returns {boolean|undefined} Undefined if not supported, otherwise true or false.\n */\nCustomHeightmapTerrainProvider.prototype.getTileDataAvailable = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {number} x The X coordinate of the tile for which to request geometry.\n * @param {number} y The Y coordinate of the tile for which to request geometry.\n * @param {number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nCustomHeightmapTerrainProvider.prototype.loadTileDataAvailability = function (x, y, level) {\n  return undefined;\n};\nexport default CustomHeightmapTerrainProvider;","map":{"version":3,"names":["Check","Credit","defaultValue","defined","Ellipsoid","Event","GeographicTilingScheme","HeightmapTerrainData","TerrainProvider","CustomHeightmapTerrainProvider","options","EMPTY_OBJECT","callback","width","height","_callback","_tilingScheme","tilingScheme","ellipsoid","default","_width","_height","maxTileDimensions","Math","max","_levelZeroMaximumGeometricError","getEstimatedLevelZeroGeometricErrorForAHeightmap","getNumberOfXTilesAtLevel","_errorEvent","credit","_credit","Object","defineProperties","prototype","errorEvent","get","hasWaterMask","hasVertexNormals","availability","undefined","requestTileGeometry","x","y","level","request","promise","Promise","resolve","then","heightmapData","buffer","Array","isArray","Float64Array","getLevelMaximumGeometricError","getTileDataAvailable","loadTileDataAvailability"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/CustomHeightmapTerrainProvider.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Event from \"./Event.js\";\nimport GeographicTilingScheme from \"./GeographicTilingScheme.js\";\nimport HeightmapTerrainData from \"./HeightmapTerrainData.js\";\nimport TerrainProvider from \"./TerrainProvider.js\";\n\n/**\n * @callback CustomHeightmapTerrainProvider.GeometryCallback\n * @param {number} x The X coordinate of the tile for which to request geometry.\n * @param {number} y The Y coordinate of the tile for which to request geometry.\n * @param {number} level The level of the tile for which to request geometry.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array|number[]|Promise<Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array|number[]>|undefined} An array or a promise to an array of heights in row-major order. If undefined, the globe will render the parent tile.\n */\n\n/**\n * A simple {@link TerrainProvider} that gets height values from a callback function.\n * It can be used for procedurally generated terrain or as a way to load custom\n * heightmap data without creating a subclass of {@link TerrainProvider}.\n *\n * There are some limitations such as no water mask, no vertex normals, and no\n * availability, so a full-fledged {@link TerrainProvider} subclass is better suited\n * for these more sophisticated use cases.\n *\n * @alias CustomHeightmapTerrainProvider\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {CustomHeightmapTerrainProvider.GeometryCallback} options.callback The callback function for requesting tile geometry.\n * @param {number} options.width The number of columns per heightmap tile.\n * @param {number} options.height The number of rows per heightmap tile.\n * @param {TilingScheme} [options.tilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles. If this parameter is not provided, a {@link GeographicTilingScheme}\n * is used.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid.  If the tilingScheme is specified,\n * this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n * parameter is specified, the default ellipsoid is used.\n * @param {Credit|string} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @example\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrainProvider: new Cesium.CustomHeightmapTerrainProvider({\n *     width: 32,\n *     height: 32,\n *     callback: function (x, y, level) {\n *       return new Float32Array(32 * 32); // all zeros\n *     },\n *   }),\n * });\n *\n * @see TerrainProvider\n */\nfunction CustomHeightmapTerrainProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.callback\", options.callback);\n  Check.defined(\"options.width\", options.width);\n  Check.defined(\"options.height\", options.height);\n  //>>includeEnd('debug');\n\n  this._callback = options.callback;\n\n  this._tilingScheme = options.tilingScheme;\n  if (!defined(this._tilingScheme)) {\n    this._tilingScheme = new GeographicTilingScheme({\n      ellipsoid: defaultValue(options.ellipsoid, Ellipsoid.default),\n    });\n  }\n\n  this._width = options.width;\n  this._height = options.height;\n  const maxTileDimensions = Math.max(this._width, this._height);\n\n  this._levelZeroMaximumGeometricError =\n    TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap(\n      this._tilingScheme.ellipsoid,\n      maxTileDimensions,\n      this._tilingScheme.getNumberOfXTilesAtLevel(0),\n    );\n\n  this._errorEvent = new Event();\n\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n}\n\nObject.defineProperties(CustomHeightmapTerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error. By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it. Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active. Typically this is used to credit\n   * the source of the terrain.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask. The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.\n   * Water mask is not supported by {@link CustomHeightmapTerrainProvider}, so the return\n   * value will always be false.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasWaterMask: {\n    get: function () {\n      return false;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * Vertex normals are not supported by {@link CustomHeightmapTerrainProvider}, so the return\n   * value will always be false.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasVertexNormals: {\n    get: function () {\n      return false;\n    },\n  },\n\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles. This property may be undefined if availability\n   * information is not available.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the number of columns per heightmap tile.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  width: {\n    get: function () {\n      return this._width;\n    },\n  },\n\n  /**\n   * Gets the number of rows per heightmap tile.\n   * @memberof CustomHeightmapTerrainProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  height: {\n    get: function () {\n      return this._height;\n    },\n  },\n});\n\n/**\n * Requests the geometry for a given tile. The result includes terrain\n * data and indicates that all child tiles are available.\n *\n * @param {number} x The X coordinate of the tile for which to request geometry.\n * @param {number} y The Y coordinate of the tile for which to request geometry.\n * @param {number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise<TerrainData>|undefined} A promise for the requested geometry. If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\nCustomHeightmapTerrainProvider.prototype.requestTileGeometry = function (\n  x,\n  y,\n  level,\n  request,\n) {\n  const promise = this._callback(x, y, level);\n  if (!defined(promise)) {\n    return undefined;\n  }\n\n  const width = this._width;\n  const height = this._height;\n\n  return Promise.resolve(promise).then(function (heightmapData) {\n    let buffer = heightmapData;\n    if (Array.isArray(buffer)) {\n      // HeightmapTerrainData expects a TypedArray, so convert from number[] to Float64Array\n      buffer = new Float64Array(buffer);\n    }\n\n    return new HeightmapTerrainData({\n      buffer: buffer,\n      width: width,\n      height: height,\n    });\n  });\n};\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {number} level The tile level for which to get the maximum geometric error.\n * @returns {number} The maximum geometric error.\n */\nCustomHeightmapTerrainProvider.prototype.getLevelMaximumGeometricError =\n  function (level) {\n    return this._levelZeroMaximumGeometricError / (1 << level);\n  };\n\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {number} x The X coordinate of the tile for which to request geometry.\n * @param {number} y The Y coordinate of the tile for which to request geometry.\n * @param {number} level The level of the tile for which to request geometry.\n * @returns {boolean|undefined} Undefined if not supported, otherwise true or false.\n */\nCustomHeightmapTerrainProvider.prototype.getTileDataAvailable = function (\n  x,\n  y,\n  level,\n) {\n  return undefined;\n};\n\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {number} x The X coordinate of the tile for which to request geometry.\n * @param {number} y The Y coordinate of the tile for which to request geometry.\n * @param {number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nCustomHeightmapTerrainProvider.prototype.loadTileDataAvailability = function (\n  x,\n  y,\n  level,\n) {\n  return undefined;\n};\nexport default CustomHeightmapTerrainProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}