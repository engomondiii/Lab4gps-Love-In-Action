{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport getAbsoluteUri from \"../Core/getAbsoluteUri.js\";\nimport GltfLoaderUtil from \"./GltfLoaderUtil.js\";\nimport hasExtension from \"./hasExtension.js\";\n\n/**\n * Compute cache keys for resources in {@link ResourceCache}.\n *\n * @namespace ResourceCacheKey\n *\n * @private\n */\nconst ResourceCacheKey = {};\nfunction getExternalResourceCacheKey(resource) {\n  return getAbsoluteUri(resource.url);\n}\nfunction getBufferViewCacheKey(bufferView) {\n  let {\n    byteOffset,\n    byteLength\n  } = bufferView;\n  if (hasExtension(bufferView, \"EXT_meshopt_compression\")) {\n    const meshopt = bufferView.extensions.EXT_meshopt_compression;\n    byteOffset = defaultValue(meshopt.byteOffset, 0);\n    byteLength = meshopt.byteLength;\n  }\n  return `${byteOffset}-${byteOffset + byteLength}`;\n}\nfunction getAccessorCacheKey(accessor, bufferView) {\n  const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n  const {\n    componentType,\n    type,\n    count\n  } = accessor;\n  return `${byteOffset}-${componentType}-${type}-${count}`;\n}\nfunction getEmbeddedBufferCacheKey(parentResource, bufferId) {\n  const parentCacheKey = getExternalResourceCacheKey(parentResource);\n  return `${parentCacheKey}-buffer-id-${bufferId}`;\n}\nfunction getBufferCacheKey(buffer, bufferId, gltfResource, baseResource) {\n  if (defined(buffer.uri)) {\n    const resource = baseResource.getDerivedResource({\n      url: buffer.uri\n    });\n    return getExternalResourceCacheKey(resource);\n  }\n  return getEmbeddedBufferCacheKey(gltfResource, bufferId);\n}\nfunction getDracoCacheKey(gltf, draco, gltfResource, baseResource) {\n  const bufferViewId = draco.bufferView;\n  const bufferView = gltf.bufferViews[bufferViewId];\n  const bufferId = bufferView.buffer;\n  const buffer = gltf.buffers[bufferId];\n  const bufferCacheKey = getBufferCacheKey(buffer, bufferId, gltfResource, baseResource);\n  const bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n  return `${bufferCacheKey}-range-${bufferViewCacheKey}`;\n}\nfunction getImageCacheKey(gltf, imageId, gltfResource, baseResource) {\n  const image = gltf.images[imageId];\n  const bufferViewId = image.bufferView;\n  const uri = image.uri;\n  if (defined(uri)) {\n    const resource = baseResource.getDerivedResource({\n      url: uri\n    });\n    return getExternalResourceCacheKey(resource);\n  }\n  const bufferView = gltf.bufferViews[bufferViewId];\n  const bufferId = bufferView.buffer;\n  const buffer = gltf.buffers[bufferId];\n  const bufferCacheKey = getBufferCacheKey(buffer, bufferId, gltfResource, baseResource);\n  const bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n  return `${bufferCacheKey}-range-${bufferViewCacheKey}`;\n}\nfunction getSamplerCacheKey(gltf, textureInfo) {\n  const sampler = GltfLoaderUtil.createSampler({\n    gltf: gltf,\n    textureInfo: textureInfo\n  });\n  return `${sampler.wrapS}-${sampler.wrapT}-${sampler.minificationFilter}-${sampler.magnificationFilter}`;\n}\n\n/**\n * Gets the schema cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} [options.schema] An object that explicitly defines a schema JSON. Mutually exclusive with options.resource.\n * @param {Resource} [options.resource] The {@link Resource} pointing to the schema JSON. Mutually exclusive with options.schema.\n *\n * @returns {string} The schema cache key.\n *\n * @exception {DeveloperError} One of options.schema and options.resource must be defined.\n * @private\n */\nResourceCacheKey.getSchemaCacheKey = function (options) {\n  const {\n    schema,\n    resource\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(schema) === defined(resource)) {\n    throw new DeveloperError(\"One of options.schema and options.resource must be defined.\");\n  }\n  //>>includeEnd('debug');\n\n  if (defined(schema)) {\n    return `embedded-schema:${JSON.stringify(schema)}`;\n  }\n  return `external-schema:${getExternalResourceCacheKey(resource)}`;\n};\n\n/**\n * Gets the external buffer cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {Resource} options.resource The {@link Resource} pointing to the external buffer.\n *\n * @returns {string} The external buffer cache key.\n * @private\n */\nResourceCacheKey.getExternalBufferCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    resource\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.resource\", resource);\n  //>>includeEnd('debug');\n\n  return `external-buffer:${getExternalResourceCacheKey(resource)}`;\n};\n\n/**\n * Gets the embedded buffer cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {Resource} options.parentResource The {@link Resource} containing the embedded buffer.\n * @param {number} options.bufferId A unique identifier of the embedded buffer within the parent resource.\n *\n * @returns {string} The embedded buffer cache key.\n * @private\n */\nResourceCacheKey.getEmbeddedBufferCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    parentResource,\n    bufferId\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.parentResource\", parentResource);\n  Check.typeOf.number(\"options.bufferId\", bufferId);\n  //>>includeEnd('debug');\n\n  return `embedded-buffer:${getEmbeddedBufferCacheKey(parentResource, bufferId)}`;\n};\n\n/**\n * Gets the glTF cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n *\n * @returns {string} The glTF cache key.\n * @private\n */\nResourceCacheKey.getGltfCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    gltfResource\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  //>>includeEnd('debug');\n\n  return `gltf:${getExternalResourceCacheKey(gltfResource)}`;\n};\n\n/**\n * Gets the buffer view cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {number} options.bufferViewId The bufferView ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {string} The buffer view cache key.\n * @private\n */\nResourceCacheKey.getBufferViewCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    gltf,\n    bufferViewId,\n    gltfResource,\n    baseResource\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.number(\"options.bufferViewId\", bufferViewId);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  const bufferView = gltf.bufferViews[bufferViewId];\n  let bufferId = bufferView.buffer;\n  const buffer = gltf.buffers[bufferId];\n  if (hasExtension(bufferView, \"EXT_meshopt_compression\")) {\n    const meshopt = bufferView.extensions.EXT_meshopt_compression;\n    bufferId = meshopt.buffer;\n  }\n  const bufferCacheKey = getBufferCacheKey(buffer, bufferId, gltfResource, baseResource);\n  const bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n  return `buffer-view:${bufferCacheKey}-range-${bufferViewCacheKey}`;\n};\n\n/**\n * Gets the Draco cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {object} options.draco The Draco extension object.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {string} The Draco cache key.\n * @private\n */\nResourceCacheKey.getDracoCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    gltf,\n    draco,\n    gltfResource,\n    baseResource\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.object(\"options.draco\", draco);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  return `draco:${getDracoCacheKey(gltf, draco, gltfResource, baseResource)}`;\n};\n\n/**\n * Gets the vertex buffer cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {FrameState} options.frameState The frame state.\n * @param {number} [options.bufferViewId] The bufferView ID corresponding to the vertex buffer.\n * @param {object} [options.draco] The Draco extension object.\n * @param {string} [options.attributeSemantic] The attribute semantic, e.g. POSITION or NORMAL.\n * @param {boolean} [options.dequantize=false] Determines whether or not the vertex buffer will be dequantized on the CPU.\n * @param {boolean} [options.loadBuffer=false] Load vertex buffer as a GPU vertex buffer.\n * @param {boolean} [options.loadTypedArray=false] Load vertex buffer as a typed array.\n * @exception {DeveloperError} One of options.bufferViewId and options.draco must be defined.\n * @exception {DeveloperError} When options.draco is defined options.attributeSemantic must also be defined.\n *\n * @returns {string} The vertex buffer cache key.\n * @private\n */\nResourceCacheKey.getVertexBufferCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    gltf,\n    gltfResource,\n    baseResource,\n    frameState,\n    bufferViewId,\n    draco,\n    attributeSemantic,\n    dequantize = false,\n    loadBuffer = false,\n    loadTypedArray = false\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  Check.typeOf.object(\"options.frameState\", frameState);\n  const hasBufferViewId = defined(bufferViewId);\n  const hasDraco = hasDracoCompression(draco, attributeSemantic);\n  const hasAttributeSemantic = defined(attributeSemantic);\n  if (hasBufferViewId === hasDraco) {\n    throw new DeveloperError(\"One of options.bufferViewId and options.draco must be defined.\");\n  }\n  if (hasDraco && !hasAttributeSemantic) {\n    throw new DeveloperError(\"When options.draco is defined options.attributeSemantic must also be defined.\");\n  }\n  if (hasDraco) {\n    Check.typeOf.object(\"options.draco\", draco);\n    Check.typeOf.string(\"options.attributeSemantic\", attributeSemantic);\n  }\n  if (!loadBuffer && !loadTypedArray) {\n    throw new DeveloperError(\"At least one of loadBuffer and loadTypedArray must be true.\");\n  }\n  //>>includeEnd('debug');\n\n  let cacheKeySuffix = \"\";\n  if (dequantize) {\n    cacheKeySuffix += \"-dequantize\";\n  }\n  if (loadBuffer) {\n    cacheKeySuffix += \"-buffer\";\n    cacheKeySuffix += `-context-${frameState.context.id}`;\n  }\n  if (loadTypedArray) {\n    cacheKeySuffix += \"-typed-array\";\n  }\n  if (defined(draco)) {\n    const dracoCacheKey = getDracoCacheKey(gltf, draco, gltfResource, baseResource);\n    return `vertex-buffer:${dracoCacheKey}-draco-${attributeSemantic}${cacheKeySuffix}`;\n  }\n  const bufferView = gltf.bufferViews[bufferViewId];\n  const bufferId = bufferView.buffer;\n  const buffer = gltf.buffers[bufferId];\n  const bufferCacheKey = getBufferCacheKey(buffer, bufferId, gltfResource, baseResource);\n  const bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n  return `vertex-buffer:${bufferCacheKey}-range-${bufferViewCacheKey}${cacheKeySuffix}`;\n};\nfunction hasDracoCompression(draco, semantic) {\n  return defined(draco) && defined(draco.attributes) && defined(draco.attributes[semantic]);\n}\n\n/**\n * Gets the index buffer cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {number} options.accessorId The accessor ID corresponding to the index buffer.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {FrameState} options.frameState The frame state.\n * @param {object} [options.draco] The Draco extension object.\n * @param {boolean} [options.loadBuffer=false] Load index buffer as a GPU index buffer.\n * @param {boolean} [options.loadTypedArray=false] Load index buffer as a typed array.\n *\n * @returns {string} The index buffer cache key.\n * @private\n */\nResourceCacheKey.getIndexBufferCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    gltf,\n    accessorId,\n    gltfResource,\n    baseResource,\n    frameState,\n    draco,\n    loadBuffer = false,\n    loadTypedArray = false\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.number(\"options.accessorId\", accessorId);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  Check.typeOf.object(\"options.frameState\", frameState);\n  if (!loadBuffer && !loadTypedArray) {\n    throw new DeveloperError(\"At least one of loadBuffer and loadTypedArray must be true.\");\n  }\n  //>>includeEnd('debug');\n\n  let cacheKeySuffix = \"\";\n  if (loadBuffer) {\n    cacheKeySuffix += \"-buffer\";\n    cacheKeySuffix += `-context-${frameState.context.id}`;\n  }\n  if (loadTypedArray) {\n    cacheKeySuffix += \"-typed-array\";\n  }\n  if (defined(draco)) {\n    const dracoCacheKey = getDracoCacheKey(gltf, draco, gltfResource, baseResource);\n    return `index-buffer:${dracoCacheKey}-draco${cacheKeySuffix}`;\n  }\n  const accessor = gltf.accessors[accessorId];\n  const bufferViewId = accessor.bufferView;\n  const bufferView = gltf.bufferViews[bufferViewId];\n  const bufferId = bufferView.buffer;\n  const buffer = gltf.buffers[bufferId];\n  const bufferCacheKey = getBufferCacheKey(buffer, bufferId, gltfResource, baseResource);\n  const accessorCacheKey = getAccessorCacheKey(accessor, bufferView);\n  return `index-buffer:${bufferCacheKey}-accessor-${accessorCacheKey}${cacheKeySuffix}`;\n};\n\n/**\n * Gets the image cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {number} options.imageId The image ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {string} The image cache key.\n * @private\n */\nResourceCacheKey.getImageCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    gltf,\n    imageId,\n    gltfResource,\n    baseResource\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.number(\"options.imageId\", imageId);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  const imageCacheKey = getImageCacheKey(gltf, imageId, gltfResource, baseResource);\n  return `image:${imageCacheKey}`;\n};\n\n/**\n * Gets the texture cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {object} options.textureInfo The texture info object.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {SupportedImageFormats} options.supportedImageFormats The supported image formats.\n * @param {FrameState} options.frameState The frame state.\n *\n * @returns {string} The texture cache key.\n * @private\n */\nResourceCacheKey.getTextureCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    gltf,\n    textureInfo,\n    gltfResource,\n    baseResource,\n    supportedImageFormats,\n    frameState\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.object(\"options.textureInfo\", textureInfo);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  Check.typeOf.object(\"options.supportedImageFormats\", supportedImageFormats);\n  Check.typeOf.object(\"options.frameState\", frameState);\n  //>>includeEnd('debug');\n\n  const textureId = textureInfo.index;\n  const imageId = GltfLoaderUtil.getImageIdFromTexture({\n    gltf: gltf,\n    textureId: textureId,\n    supportedImageFormats: supportedImageFormats\n  });\n  const imageCacheKey = getImageCacheKey(gltf, imageId, gltfResource, baseResource);\n\n  // Include the sampler cache key in the texture cache key since textures and\n  // samplers are coupled in WebGL 1. When upgrading to WebGL 2 consider\n  // removing the sampleCacheKey here.\n  const samplerCacheKey = getSamplerCacheKey(gltf, textureInfo);\n  return `texture:${imageCacheKey}-sampler-${samplerCacheKey}-context-${frameState.context.id}`;\n};\nexport default ResourceCacheKey;","map":{"version":3,"names":["Check","defaultValue","defined","DeveloperError","getAbsoluteUri","GltfLoaderUtil","hasExtension","ResourceCacheKey","getExternalResourceCacheKey","resource","url","getBufferViewCacheKey","bufferView","byteOffset","byteLength","meshopt","extensions","EXT_meshopt_compression","getAccessorCacheKey","accessor","componentType","type","count","getEmbeddedBufferCacheKey","parentResource","bufferId","parentCacheKey","getBufferCacheKey","buffer","gltfResource","baseResource","uri","getDerivedResource","getDracoCacheKey","gltf","draco","bufferViewId","bufferViews","buffers","bufferCacheKey","bufferViewCacheKey","getImageCacheKey","imageId","image","images","getSamplerCacheKey","textureInfo","sampler","createSampler","wrapS","wrapT","minificationFilter","magnificationFilter","getSchemaCacheKey","options","schema","JSON","stringify","getExternalBufferCacheKey","EMPTY_OBJECT","typeOf","object","number","getGltfCacheKey","getVertexBufferCacheKey","frameState","attributeSemantic","dequantize","loadBuffer","loadTypedArray","hasBufferViewId","hasDraco","hasDracoCompression","hasAttributeSemantic","string","cacheKeySuffix","context","id","dracoCacheKey","semantic","attributes","getIndexBufferCacheKey","accessorId","accessors","accessorCacheKey","imageCacheKey","getTextureCacheKey","supportedImageFormats","textureId","index","getImageIdFromTexture","samplerCacheKey"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ResourceCacheKey.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport getAbsoluteUri from \"../Core/getAbsoluteUri.js\";\nimport GltfLoaderUtil from \"./GltfLoaderUtil.js\";\nimport hasExtension from \"./hasExtension.js\";\n\n/**\n * Compute cache keys for resources in {@link ResourceCache}.\n *\n * @namespace ResourceCacheKey\n *\n * @private\n */\nconst ResourceCacheKey = {};\n\nfunction getExternalResourceCacheKey(resource) {\n  return getAbsoluteUri(resource.url);\n}\n\nfunction getBufferViewCacheKey(bufferView) {\n  let { byteOffset, byteLength } = bufferView;\n\n  if (hasExtension(bufferView, \"EXT_meshopt_compression\")) {\n    const meshopt = bufferView.extensions.EXT_meshopt_compression;\n    byteOffset = defaultValue(meshopt.byteOffset, 0);\n    byteLength = meshopt.byteLength;\n  }\n\n  return `${byteOffset}-${byteOffset + byteLength}`;\n}\n\nfunction getAccessorCacheKey(accessor, bufferView) {\n  const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n  const { componentType, type, count } = accessor;\n  return `${byteOffset}-${componentType}-${type}-${count}`;\n}\n\nfunction getEmbeddedBufferCacheKey(parentResource, bufferId) {\n  const parentCacheKey = getExternalResourceCacheKey(parentResource);\n  return `${parentCacheKey}-buffer-id-${bufferId}`;\n}\n\nfunction getBufferCacheKey(buffer, bufferId, gltfResource, baseResource) {\n  if (defined(buffer.uri)) {\n    const resource = baseResource.getDerivedResource({\n      url: buffer.uri,\n    });\n    return getExternalResourceCacheKey(resource);\n  }\n\n  return getEmbeddedBufferCacheKey(gltfResource, bufferId);\n}\n\nfunction getDracoCacheKey(gltf, draco, gltfResource, baseResource) {\n  const bufferViewId = draco.bufferView;\n  const bufferView = gltf.bufferViews[bufferViewId];\n  const bufferId = bufferView.buffer;\n  const buffer = gltf.buffers[bufferId];\n\n  const bufferCacheKey = getBufferCacheKey(\n    buffer,\n    bufferId,\n    gltfResource,\n    baseResource,\n  );\n\n  const bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n\n  return `${bufferCacheKey}-range-${bufferViewCacheKey}`;\n}\n\nfunction getImageCacheKey(gltf, imageId, gltfResource, baseResource) {\n  const image = gltf.images[imageId];\n  const bufferViewId = image.bufferView;\n  const uri = image.uri;\n\n  if (defined(uri)) {\n    const resource = baseResource.getDerivedResource({\n      url: uri,\n    });\n    return getExternalResourceCacheKey(resource);\n  }\n\n  const bufferView = gltf.bufferViews[bufferViewId];\n  const bufferId = bufferView.buffer;\n  const buffer = gltf.buffers[bufferId];\n\n  const bufferCacheKey = getBufferCacheKey(\n    buffer,\n    bufferId,\n    gltfResource,\n    baseResource,\n  );\n\n  const bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n\n  return `${bufferCacheKey}-range-${bufferViewCacheKey}`;\n}\n\nfunction getSamplerCacheKey(gltf, textureInfo) {\n  const sampler = GltfLoaderUtil.createSampler({\n    gltf: gltf,\n    textureInfo: textureInfo,\n  });\n\n  return `${sampler.wrapS}-${sampler.wrapT}-${sampler.minificationFilter}-${sampler.magnificationFilter}`;\n}\n\n/**\n * Gets the schema cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} [options.schema] An object that explicitly defines a schema JSON. Mutually exclusive with options.resource.\n * @param {Resource} [options.resource] The {@link Resource} pointing to the schema JSON. Mutually exclusive with options.schema.\n *\n * @returns {string} The schema cache key.\n *\n * @exception {DeveloperError} One of options.schema and options.resource must be defined.\n * @private\n */\nResourceCacheKey.getSchemaCacheKey = function (options) {\n  const { schema, resource } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(schema) === defined(resource)) {\n    throw new DeveloperError(\n      \"One of options.schema and options.resource must be defined.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  if (defined(schema)) {\n    return `embedded-schema:${JSON.stringify(schema)}`;\n  }\n\n  return `external-schema:${getExternalResourceCacheKey(resource)}`;\n};\n\n/**\n * Gets the external buffer cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {Resource} options.resource The {@link Resource} pointing to the external buffer.\n *\n * @returns {string} The external buffer cache key.\n * @private\n */\nResourceCacheKey.getExternalBufferCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const { resource } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.resource\", resource);\n  //>>includeEnd('debug');\n\n  return `external-buffer:${getExternalResourceCacheKey(resource)}`;\n};\n\n/**\n * Gets the embedded buffer cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {Resource} options.parentResource The {@link Resource} containing the embedded buffer.\n * @param {number} options.bufferId A unique identifier of the embedded buffer within the parent resource.\n *\n * @returns {string} The embedded buffer cache key.\n * @private\n */\nResourceCacheKey.getEmbeddedBufferCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const { parentResource, bufferId } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.parentResource\", parentResource);\n  Check.typeOf.number(\"options.bufferId\", bufferId);\n  //>>includeEnd('debug');\n\n  return `embedded-buffer:${getEmbeddedBufferCacheKey(\n    parentResource,\n    bufferId,\n  )}`;\n};\n\n/**\n * Gets the glTF cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n *\n * @returns {string} The glTF cache key.\n * @private\n */\nResourceCacheKey.getGltfCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const { gltfResource } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  //>>includeEnd('debug');\n\n  return `gltf:${getExternalResourceCacheKey(gltfResource)}`;\n};\n\n/**\n * Gets the buffer view cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {number} options.bufferViewId The bufferView ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {string} The buffer view cache key.\n * @private\n */\nResourceCacheKey.getBufferViewCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const { gltf, bufferViewId, gltfResource, baseResource } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.number(\"options.bufferViewId\", bufferViewId);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  const bufferView = gltf.bufferViews[bufferViewId];\n  let bufferId = bufferView.buffer;\n  const buffer = gltf.buffers[bufferId];\n  if (hasExtension(bufferView, \"EXT_meshopt_compression\")) {\n    const meshopt = bufferView.extensions.EXT_meshopt_compression;\n    bufferId = meshopt.buffer;\n  }\n\n  const bufferCacheKey = getBufferCacheKey(\n    buffer,\n    bufferId,\n    gltfResource,\n    baseResource,\n  );\n\n  const bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n\n  return `buffer-view:${bufferCacheKey}-range-${bufferViewCacheKey}`;\n};\n\n/**\n * Gets the Draco cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {object} options.draco The Draco extension object.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {string} The Draco cache key.\n * @private\n */\nResourceCacheKey.getDracoCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const { gltf, draco, gltfResource, baseResource } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.object(\"options.draco\", draco);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  return `draco:${getDracoCacheKey(gltf, draco, gltfResource, baseResource)}`;\n};\n\n/**\n * Gets the vertex buffer cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {FrameState} options.frameState The frame state.\n * @param {number} [options.bufferViewId] The bufferView ID corresponding to the vertex buffer.\n * @param {object} [options.draco] The Draco extension object.\n * @param {string} [options.attributeSemantic] The attribute semantic, e.g. POSITION or NORMAL.\n * @param {boolean} [options.dequantize=false] Determines whether or not the vertex buffer will be dequantized on the CPU.\n * @param {boolean} [options.loadBuffer=false] Load vertex buffer as a GPU vertex buffer.\n * @param {boolean} [options.loadTypedArray=false] Load vertex buffer as a typed array.\n * @exception {DeveloperError} One of options.bufferViewId and options.draco must be defined.\n * @exception {DeveloperError} When options.draco is defined options.attributeSemantic must also be defined.\n *\n * @returns {string} The vertex buffer cache key.\n * @private\n */\nResourceCacheKey.getVertexBufferCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    gltf,\n    gltfResource,\n    baseResource,\n    frameState,\n    bufferViewId,\n    draco,\n    attributeSemantic,\n    dequantize = false,\n    loadBuffer = false,\n    loadTypedArray = false,\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  Check.typeOf.object(\"options.frameState\", frameState);\n\n  const hasBufferViewId = defined(bufferViewId);\n  const hasDraco = hasDracoCompression(draco, attributeSemantic);\n  const hasAttributeSemantic = defined(attributeSemantic);\n\n  if (hasBufferViewId === hasDraco) {\n    throw new DeveloperError(\n      \"One of options.bufferViewId and options.draco must be defined.\",\n    );\n  }\n\n  if (hasDraco && !hasAttributeSemantic) {\n    throw new DeveloperError(\n      \"When options.draco is defined options.attributeSemantic must also be defined.\",\n    );\n  }\n\n  if (hasDraco) {\n    Check.typeOf.object(\"options.draco\", draco);\n    Check.typeOf.string(\"options.attributeSemantic\", attributeSemantic);\n  }\n\n  if (!loadBuffer && !loadTypedArray) {\n    throw new DeveloperError(\n      \"At least one of loadBuffer and loadTypedArray must be true.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  let cacheKeySuffix = \"\";\n  if (dequantize) {\n    cacheKeySuffix += \"-dequantize\";\n  }\n\n  if (loadBuffer) {\n    cacheKeySuffix += \"-buffer\";\n    cacheKeySuffix += `-context-${frameState.context.id}`;\n  }\n\n  if (loadTypedArray) {\n    cacheKeySuffix += \"-typed-array\";\n  }\n\n  if (defined(draco)) {\n    const dracoCacheKey = getDracoCacheKey(\n      gltf,\n      draco,\n      gltfResource,\n      baseResource,\n    );\n    return `vertex-buffer:${dracoCacheKey}-draco-${attributeSemantic}${cacheKeySuffix}`;\n  }\n\n  const bufferView = gltf.bufferViews[bufferViewId];\n  const bufferId = bufferView.buffer;\n  const buffer = gltf.buffers[bufferId];\n\n  const bufferCacheKey = getBufferCacheKey(\n    buffer,\n    bufferId,\n    gltfResource,\n    baseResource,\n  );\n\n  const bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n\n  return `vertex-buffer:${bufferCacheKey}-range-${bufferViewCacheKey}${cacheKeySuffix}`;\n};\n\nfunction hasDracoCompression(draco, semantic) {\n  return (\n    defined(draco) &&\n    defined(draco.attributes) &&\n    defined(draco.attributes[semantic])\n  );\n}\n\n/**\n * Gets the index buffer cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {number} options.accessorId The accessor ID corresponding to the index buffer.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {FrameState} options.frameState The frame state.\n * @param {object} [options.draco] The Draco extension object.\n * @param {boolean} [options.loadBuffer=false] Load index buffer as a GPU index buffer.\n * @param {boolean} [options.loadTypedArray=false] Load index buffer as a typed array.\n *\n * @returns {string} The index buffer cache key.\n * @private\n */\nResourceCacheKey.getIndexBufferCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    gltf,\n    accessorId,\n    gltfResource,\n    baseResource,\n    frameState,\n    draco,\n    loadBuffer = false,\n    loadTypedArray = false,\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.number(\"options.accessorId\", accessorId);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  Check.typeOf.object(\"options.frameState\", frameState);\n\n  if (!loadBuffer && !loadTypedArray) {\n    throw new DeveloperError(\n      \"At least one of loadBuffer and loadTypedArray must be true.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  let cacheKeySuffix = \"\";\n  if (loadBuffer) {\n    cacheKeySuffix += \"-buffer\";\n    cacheKeySuffix += `-context-${frameState.context.id}`;\n  }\n\n  if (loadTypedArray) {\n    cacheKeySuffix += \"-typed-array\";\n  }\n\n  if (defined(draco)) {\n    const dracoCacheKey = getDracoCacheKey(\n      gltf,\n      draco,\n      gltfResource,\n      baseResource,\n    );\n    return `index-buffer:${dracoCacheKey}-draco${cacheKeySuffix}`;\n  }\n\n  const accessor = gltf.accessors[accessorId];\n  const bufferViewId = accessor.bufferView;\n  const bufferView = gltf.bufferViews[bufferViewId];\n  const bufferId = bufferView.buffer;\n  const buffer = gltf.buffers[bufferId];\n\n  const bufferCacheKey = getBufferCacheKey(\n    buffer,\n    bufferId,\n    gltfResource,\n    baseResource,\n  );\n\n  const accessorCacheKey = getAccessorCacheKey(accessor, bufferView);\n\n  return `index-buffer:${bufferCacheKey}-accessor-${accessorCacheKey}${cacheKeySuffix}`;\n};\n\n/**\n * Gets the image cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {number} options.imageId The image ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {string} The image cache key.\n * @private\n */\nResourceCacheKey.getImageCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const { gltf, imageId, gltfResource, baseResource } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.number(\"options.imageId\", imageId);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  const imageCacheKey = getImageCacheKey(\n    gltf,\n    imageId,\n    gltfResource,\n    baseResource,\n  );\n\n  return `image:${imageCacheKey}`;\n};\n\n/**\n * Gets the texture cache key.\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.gltf The glTF JSON.\n * @param {object} options.textureInfo The texture info object.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {SupportedImageFormats} options.supportedImageFormats The supported image formats.\n * @param {FrameState} options.frameState The frame state.\n *\n * @returns {string} The texture cache key.\n * @private\n */\nResourceCacheKey.getTextureCacheKey = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    gltf,\n    textureInfo,\n    gltfResource,\n    baseResource,\n    supportedImageFormats,\n    frameState,\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.object(\"options.textureInfo\", textureInfo);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  Check.typeOf.object(\"options.supportedImageFormats\", supportedImageFormats);\n  Check.typeOf.object(\"options.frameState\", frameState);\n  //>>includeEnd('debug');\n\n  const textureId = textureInfo.index;\n\n  const imageId = GltfLoaderUtil.getImageIdFromTexture({\n    gltf: gltf,\n    textureId: textureId,\n    supportedImageFormats: supportedImageFormats,\n  });\n\n  const imageCacheKey = getImageCacheKey(\n    gltf,\n    imageId,\n    gltfResource,\n    baseResource,\n  );\n\n  // Include the sampler cache key in the texture cache key since textures and\n  // samplers are coupled in WebGL 1. When upgrading to WebGL 2 consider\n  // removing the sampleCacheKey here.\n  const samplerCacheKey = getSamplerCacheKey(gltf, textureInfo);\n\n  return `texture:${imageCacheKey}-sampler-${samplerCacheKey}-context-${frameState.context.id}`;\n};\n\nexport default ResourceCacheKey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}