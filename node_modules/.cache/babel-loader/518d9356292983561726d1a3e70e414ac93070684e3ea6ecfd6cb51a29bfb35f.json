{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport WindingOrder from \"../Core/WindingOrder.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport freezeRenderState from \"./freezeRenderState.js\";\nfunction validateBlendEquation(blendEquation) {\n  return blendEquation === WebGLConstants.FUNC_ADD || blendEquation === WebGLConstants.FUNC_SUBTRACT || blendEquation === WebGLConstants.FUNC_REVERSE_SUBTRACT || blendEquation === WebGLConstants.MIN || blendEquation === WebGLConstants.MAX;\n}\nfunction validateBlendFunction(blendFunction) {\n  return blendFunction === WebGLConstants.ZERO || blendFunction === WebGLConstants.ONE || blendFunction === WebGLConstants.SRC_COLOR || blendFunction === WebGLConstants.ONE_MINUS_SRC_COLOR || blendFunction === WebGLConstants.DST_COLOR || blendFunction === WebGLConstants.ONE_MINUS_DST_COLOR || blendFunction === WebGLConstants.SRC_ALPHA || blendFunction === WebGLConstants.ONE_MINUS_SRC_ALPHA || blendFunction === WebGLConstants.DST_ALPHA || blendFunction === WebGLConstants.ONE_MINUS_DST_ALPHA || blendFunction === WebGLConstants.CONSTANT_COLOR || blendFunction === WebGLConstants.ONE_MINUS_CONSTANT_COLOR || blendFunction === WebGLConstants.CONSTANT_ALPHA || blendFunction === WebGLConstants.ONE_MINUS_CONSTANT_ALPHA || blendFunction === WebGLConstants.SRC_ALPHA_SATURATE;\n}\nfunction validateCullFace(cullFace) {\n  return cullFace === WebGLConstants.FRONT || cullFace === WebGLConstants.BACK || cullFace === WebGLConstants.FRONT_AND_BACK;\n}\nfunction validateDepthFunction(depthFunction) {\n  return depthFunction === WebGLConstants.NEVER || depthFunction === WebGLConstants.LESS || depthFunction === WebGLConstants.EQUAL || depthFunction === WebGLConstants.LEQUAL || depthFunction === WebGLConstants.GREATER || depthFunction === WebGLConstants.NOTEQUAL || depthFunction === WebGLConstants.GEQUAL || depthFunction === WebGLConstants.ALWAYS;\n}\nfunction validateStencilFunction(stencilFunction) {\n  return stencilFunction === WebGLConstants.NEVER || stencilFunction === WebGLConstants.LESS || stencilFunction === WebGLConstants.EQUAL || stencilFunction === WebGLConstants.LEQUAL || stencilFunction === WebGLConstants.GREATER || stencilFunction === WebGLConstants.NOTEQUAL || stencilFunction === WebGLConstants.GEQUAL || stencilFunction === WebGLConstants.ALWAYS;\n}\nfunction validateStencilOperation(stencilOperation) {\n  return stencilOperation === WebGLConstants.ZERO || stencilOperation === WebGLConstants.KEEP || stencilOperation === WebGLConstants.REPLACE || stencilOperation === WebGLConstants.INCR || stencilOperation === WebGLConstants.DECR || stencilOperation === WebGLConstants.INVERT || stencilOperation === WebGLConstants.INCR_WRAP || stencilOperation === WebGLConstants.DECR_WRAP;\n}\n\n/**\n * @private\n */\nfunction RenderState(renderState) {\n  const rs = defaultValue(renderState, defaultValue.EMPTY_OBJECT);\n  const cull = defaultValue(rs.cull, defaultValue.EMPTY_OBJECT);\n  const polygonOffset = defaultValue(rs.polygonOffset, defaultValue.EMPTY_OBJECT);\n  const scissorTest = defaultValue(rs.scissorTest, defaultValue.EMPTY_OBJECT);\n  const scissorTestRectangle = defaultValue(scissorTest.rectangle, defaultValue.EMPTY_OBJECT);\n  const depthRange = defaultValue(rs.depthRange, defaultValue.EMPTY_OBJECT);\n  const depthTest = defaultValue(rs.depthTest, defaultValue.EMPTY_OBJECT);\n  const colorMask = defaultValue(rs.colorMask, defaultValue.EMPTY_OBJECT);\n  const blending = defaultValue(rs.blending, defaultValue.EMPTY_OBJECT);\n  const blendingColor = defaultValue(blending.color, defaultValue.EMPTY_OBJECT);\n  const stencilTest = defaultValue(rs.stencilTest, defaultValue.EMPTY_OBJECT);\n  const stencilTestFrontOperation = defaultValue(stencilTest.frontOperation, defaultValue.EMPTY_OBJECT);\n  const stencilTestBackOperation = defaultValue(stencilTest.backOperation, defaultValue.EMPTY_OBJECT);\n  const sampleCoverage = defaultValue(rs.sampleCoverage, defaultValue.EMPTY_OBJECT);\n  const viewport = rs.viewport;\n  this.frontFace = defaultValue(rs.frontFace, WindingOrder.COUNTER_CLOCKWISE);\n  this.cull = {\n    enabled: defaultValue(cull.enabled, false),\n    face: defaultValue(cull.face, WebGLConstants.BACK)\n  };\n  this.lineWidth = defaultValue(rs.lineWidth, 1.0);\n  this.polygonOffset = {\n    enabled: defaultValue(polygonOffset.enabled, false),\n    factor: defaultValue(polygonOffset.factor, 0),\n    units: defaultValue(polygonOffset.units, 0)\n  };\n  this.scissorTest = {\n    enabled: defaultValue(scissorTest.enabled, false),\n    rectangle: BoundingRectangle.clone(scissorTestRectangle)\n  };\n  this.depthRange = {\n    near: defaultValue(depthRange.near, 0),\n    far: defaultValue(depthRange.far, 1)\n  };\n  this.depthTest = {\n    enabled: defaultValue(depthTest.enabled, false),\n    func: defaultValue(depthTest.func, WebGLConstants.LESS) // func, because function is a JavaScript keyword\n  };\n  this.colorMask = {\n    red: defaultValue(colorMask.red, true),\n    green: defaultValue(colorMask.green, true),\n    blue: defaultValue(colorMask.blue, true),\n    alpha: defaultValue(colorMask.alpha, true)\n  };\n  this.depthMask = defaultValue(rs.depthMask, true);\n  this.stencilMask = defaultValue(rs.stencilMask, ~0);\n  this.blending = {\n    enabled: defaultValue(blending.enabled, false),\n    color: new Color(defaultValue(blendingColor.red, 0.0), defaultValue(blendingColor.green, 0.0), defaultValue(blendingColor.blue, 0.0), defaultValue(blendingColor.alpha, 0.0)),\n    equationRgb: defaultValue(blending.equationRgb, WebGLConstants.FUNC_ADD),\n    equationAlpha: defaultValue(blending.equationAlpha, WebGLConstants.FUNC_ADD),\n    functionSourceRgb: defaultValue(blending.functionSourceRgb, WebGLConstants.ONE),\n    functionSourceAlpha: defaultValue(blending.functionSourceAlpha, WebGLConstants.ONE),\n    functionDestinationRgb: defaultValue(blending.functionDestinationRgb, WebGLConstants.ZERO),\n    functionDestinationAlpha: defaultValue(blending.functionDestinationAlpha, WebGLConstants.ZERO)\n  };\n  this.stencilTest = {\n    enabled: defaultValue(stencilTest.enabled, false),\n    frontFunction: defaultValue(stencilTest.frontFunction, WebGLConstants.ALWAYS),\n    backFunction: defaultValue(stencilTest.backFunction, WebGLConstants.ALWAYS),\n    reference: defaultValue(stencilTest.reference, 0),\n    mask: defaultValue(stencilTest.mask, ~0),\n    frontOperation: {\n      fail: defaultValue(stencilTestFrontOperation.fail, WebGLConstants.KEEP),\n      zFail: defaultValue(stencilTestFrontOperation.zFail, WebGLConstants.KEEP),\n      zPass: defaultValue(stencilTestFrontOperation.zPass, WebGLConstants.KEEP)\n    },\n    backOperation: {\n      fail: defaultValue(stencilTestBackOperation.fail, WebGLConstants.KEEP),\n      zFail: defaultValue(stencilTestBackOperation.zFail, WebGLConstants.KEEP),\n      zPass: defaultValue(stencilTestBackOperation.zPass, WebGLConstants.KEEP)\n    }\n  };\n  this.sampleCoverage = {\n    enabled: defaultValue(sampleCoverage.enabled, false),\n    value: defaultValue(sampleCoverage.value, 1.0),\n    invert: defaultValue(sampleCoverage.invert, false)\n  };\n  this.viewport = defined(viewport) ? new BoundingRectangle(viewport.x, viewport.y, viewport.width, viewport.height) : undefined;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (this.lineWidth < ContextLimits.minimumAliasedLineWidth || this.lineWidth > ContextLimits.maximumAliasedLineWidth) {\n    throw new DeveloperError(\"renderState.lineWidth is out of range.  Check minimumAliasedLineWidth and maximumAliasedLineWidth.\");\n  }\n  if (!WindingOrder.validate(this.frontFace)) {\n    throw new DeveloperError(\"Invalid renderState.frontFace.\");\n  }\n  if (!validateCullFace(this.cull.face)) {\n    throw new DeveloperError(\"Invalid renderState.cull.face.\");\n  }\n  if (this.scissorTest.rectangle.width < 0 || this.scissorTest.rectangle.height < 0) {\n    throw new DeveloperError(\"renderState.scissorTest.rectangle.width and renderState.scissorTest.rectangle.height must be greater than or equal to zero.\");\n  }\n  if (this.depthRange.near > this.depthRange.far) {\n    // WebGL specific - not an error in GL ES\n    throw new DeveloperError(\"renderState.depthRange.near can not be greater than renderState.depthRange.far.\");\n  }\n  if (this.depthRange.near < 0) {\n    // Would be clamped by GL\n    throw new DeveloperError(\"renderState.depthRange.near must be greater than or equal to zero.\");\n  }\n  if (this.depthRange.far > 1) {\n    // Would be clamped by GL\n    throw new DeveloperError(\"renderState.depthRange.far must be less than or equal to one.\");\n  }\n  if (!validateDepthFunction(this.depthTest.func)) {\n    throw new DeveloperError(\"Invalid renderState.depthTest.func.\");\n  }\n  if (this.blending.color.red < 0.0 || this.blending.color.red > 1.0 || this.blending.color.green < 0.0 || this.blending.color.green > 1.0 || this.blending.color.blue < 0.0 || this.blending.color.blue > 1.0 || this.blending.color.alpha < 0.0 || this.blending.color.alpha > 1.0) {\n    // Would be clamped by GL\n    throw new DeveloperError(\"renderState.blending.color components must be greater than or equal to zero and less than or equal to one.\");\n  }\n  if (!validateBlendEquation(this.blending.equationRgb)) {\n    throw new DeveloperError(\"Invalid renderState.blending.equationRgb.\");\n  }\n  if (!validateBlendEquation(this.blending.equationAlpha)) {\n    throw new DeveloperError(\"Invalid renderState.blending.equationAlpha.\");\n  }\n  if (!validateBlendFunction(this.blending.functionSourceRgb)) {\n    throw new DeveloperError(\"Invalid renderState.blending.functionSourceRgb.\");\n  }\n  if (!validateBlendFunction(this.blending.functionSourceAlpha)) {\n    throw new DeveloperError(\"Invalid renderState.blending.functionSourceAlpha.\");\n  }\n  if (!validateBlendFunction(this.blending.functionDestinationRgb)) {\n    throw new DeveloperError(\"Invalid renderState.blending.functionDestinationRgb.\");\n  }\n  if (!validateBlendFunction(this.blending.functionDestinationAlpha)) {\n    throw new DeveloperError(\"Invalid renderState.blending.functionDestinationAlpha.\");\n  }\n  if (!validateStencilFunction(this.stencilTest.frontFunction)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.frontFunction.\");\n  }\n  if (!validateStencilFunction(this.stencilTest.backFunction)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.backFunction.\");\n  }\n  if (!validateStencilOperation(this.stencilTest.frontOperation.fail)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.frontOperation.fail.\");\n  }\n  if (!validateStencilOperation(this.stencilTest.frontOperation.zFail)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.frontOperation.zFail.\");\n  }\n  if (!validateStencilOperation(this.stencilTest.frontOperation.zPass)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.frontOperation.zPass.\");\n  }\n  if (!validateStencilOperation(this.stencilTest.backOperation.fail)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.backOperation.fail.\");\n  }\n  if (!validateStencilOperation(this.stencilTest.backOperation.zFail)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.backOperation.zFail.\");\n  }\n  if (!validateStencilOperation(this.stencilTest.backOperation.zPass)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.backOperation.zPass.\");\n  }\n  if (defined(this.viewport)) {\n    if (this.viewport.width < 0) {\n      throw new DeveloperError(\"renderState.viewport.width must be greater than or equal to zero.\");\n    }\n    if (this.viewport.height < 0) {\n      throw new DeveloperError(\"renderState.viewport.height must be greater than or equal to zero.\");\n    }\n    if (this.viewport.width > ContextLimits.maximumViewportWidth) {\n      throw new DeveloperError(`renderState.viewport.width must be less than or equal to the maximum viewport width (${ContextLimits.maximumViewportWidth.toString()}).  Check maximumViewportWidth.`);\n    }\n    if (this.viewport.height > ContextLimits.maximumViewportHeight) {\n      throw new DeveloperError(`renderState.viewport.height must be less than or equal to the maximum viewport height (${ContextLimits.maximumViewportHeight.toString()}).  Check maximumViewportHeight.`);\n    }\n  }\n  //>>includeEnd('debug');\n\n  this.id = 0;\n  this._applyFunctions = [];\n}\nlet nextRenderStateId = 0;\nlet renderStateCache = {};\n\n/**\n * Validates and then finds or creates an immutable render state, which defines the pipeline\n * state for a {@link DrawCommand} or {@link ClearCommand}.  All inputs states are optional.  Omitted states\n * use the defaults shown in the example below.\n *\n * @param {object} [renderState] The states defining the render state as shown in the example below.\n *\n * @exception {RuntimeError} renderState.lineWidth is out of range.\n * @exception {DeveloperError} Invalid renderState.frontFace.\n * @exception {DeveloperError} Invalid renderState.cull.face.\n * @exception {DeveloperError} scissorTest.rectangle.width and scissorTest.rectangle.height must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.depthRange.near can't be greater than renderState.depthRange.far.\n * @exception {DeveloperError} renderState.depthRange.near must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.depthRange.far must be less than or equal to zero.\n * @exception {DeveloperError} Invalid renderState.depthTest.func.\n * @exception {DeveloperError} renderState.blending.color components must be greater than or equal to zero and less than or equal to one\n * @exception {DeveloperError} Invalid renderState.blending.equationRgb.\n * @exception {DeveloperError} Invalid renderState.blending.equationAlpha.\n * @exception {DeveloperError} Invalid renderState.blending.functionSourceRgb.\n * @exception {DeveloperError} Invalid renderState.blending.functionSourceAlpha.\n * @exception {DeveloperError} Invalid renderState.blending.functionDestinationRgb.\n * @exception {DeveloperError} Invalid renderState.blending.functionDestinationAlpha.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontFunction.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backFunction.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.fail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.zFail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.zPass.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.fail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.zFail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.zPass.\n * @exception {DeveloperError} renderState.viewport.width must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.viewport.width must be less than or equal to the maximum viewport width.\n * @exception {DeveloperError} renderState.viewport.height must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.viewport.height must be less than or equal to the maximum viewport height.\n *\n *\n * @example\n * const defaults = {\n *     frontFace : WindingOrder.COUNTER_CLOCKWISE,\n *     cull : {\n *         enabled : false,\n *         face : CullFace.BACK\n *     },\n *     lineWidth : 1,\n *     polygonOffset : {\n *         enabled : false,\n *         factor : 0,\n *         units : 0\n *     },\n *     scissorTest : {\n *         enabled : false,\n *         rectangle : {\n *             x : 0,\n *             y : 0,\n *             width : 0,\n *             height : 0\n *         }\n *     },\n *     depthRange : {\n *         near : 0,\n *         far : 1\n *     },\n *     depthTest : {\n *         enabled : false,\n *         func : DepthFunction.LESS\n *      },\n *     colorMask : {\n *         red : true,\n *         green : true,\n *         blue : true,\n *         alpha : true\n *     },\n *     depthMask : true,\n *     stencilMask : ~0,\n *     blending : {\n *         enabled : false,\n *         color : {\n *             red : 0.0,\n *             green : 0.0,\n *             blue : 0.0,\n *             alpha : 0.0\n *         },\n *         equationRgb : BlendEquation.ADD,\n *         equationAlpha : BlendEquation.ADD,\n *         functionSourceRgb : BlendFunction.ONE,\n *         functionSourceAlpha : BlendFunction.ONE,\n *         functionDestinationRgb : BlendFunction.ZERO,\n *         functionDestinationAlpha : BlendFunction.ZERO\n *     },\n *     stencilTest : {\n *         enabled : false,\n *         frontFunction : StencilFunction.ALWAYS,\n *         backFunction : StencilFunction.ALWAYS,\n *         reference : 0,\n *         mask : ~0,\n *         frontOperation : {\n *             fail : StencilOperation.KEEP,\n *             zFail : StencilOperation.KEEP,\n *             zPass : StencilOperation.KEEP\n *         },\n *         backOperation : {\n *             fail : StencilOperation.KEEP,\n *             zFail : StencilOperation.KEEP,\n *             zPass : StencilOperation.KEEP\n *         }\n *     },\n *     sampleCoverage : {\n *         enabled : false,\n *         value : 1.0,\n *         invert : false\n *      }\n * };\n *\n * const rs = RenderState.fromCache(defaults);\n *\n * @see DrawCommand\n * @see ClearCommand\n *\n * @private\n */\nRenderState.fromCache = function (renderState) {\n  const partialKey = JSON.stringify(renderState);\n  let cachedState = renderStateCache[partialKey];\n  if (defined(cachedState)) {\n    ++cachedState.referenceCount;\n    return cachedState.state;\n  }\n\n  // Cache miss.  Fully define render state and try again.\n  let states = new RenderState(renderState);\n  const fullKey = JSON.stringify(states);\n  cachedState = renderStateCache[fullKey];\n  if (!defined(cachedState)) {\n    states.id = nextRenderStateId++;\n    //>>includeStart('debug', pragmas.debug);\n    states = freezeRenderState(states);\n    //>>includeEnd('debug');\n    cachedState = {\n      referenceCount: 0,\n      state: states\n    };\n\n    // Cache full render state.  Multiple partially defined render states may map to this.\n    renderStateCache[fullKey] = cachedState;\n  }\n  ++cachedState.referenceCount;\n\n  // Cache partial render state so we can skip validation on a cache hit for a partially defined render state\n  renderStateCache[partialKey] = {\n    referenceCount: 1,\n    state: cachedState.state\n  };\n  return cachedState.state;\n};\n\n/**\n * @private\n */\nRenderState.removeFromCache = function (renderState) {\n  const states = new RenderState(renderState);\n  const fullKey = JSON.stringify(states);\n  const fullCachedState = renderStateCache[fullKey];\n\n  // decrement partial key reference count\n  const partialKey = JSON.stringify(renderState);\n  const cachedState = renderStateCache[partialKey];\n  if (defined(cachedState)) {\n    --cachedState.referenceCount;\n    if (cachedState.referenceCount === 0) {\n      // remove partial key\n      delete renderStateCache[partialKey];\n\n      // decrement full key reference count\n      if (defined(fullCachedState)) {\n        --fullCachedState.referenceCount;\n      }\n    }\n  }\n\n  // remove full key if reference count is zero\n  if (defined(fullCachedState) && fullCachedState.referenceCount === 0) {\n    delete renderStateCache[fullKey];\n  }\n};\n\n/**\n * This function is for testing purposes only.\n * @private\n */\nRenderState.getCache = function () {\n  return renderStateCache;\n};\n\n/**\n * This function is for testing purposes only.\n * @private\n */\nRenderState.clearCache = function () {\n  renderStateCache = {};\n};\nfunction enableOrDisable(gl, glEnum, enable) {\n  if (enable) {\n    gl.enable(glEnum);\n  } else {\n    gl.disable(glEnum);\n  }\n}\nfunction applyFrontFace(gl, renderState) {\n  gl.frontFace(renderState.frontFace);\n}\nfunction applyCull(gl, renderState) {\n  const cull = renderState.cull;\n  const enabled = cull.enabled;\n  enableOrDisable(gl, gl.CULL_FACE, enabled);\n  if (enabled) {\n    gl.cullFace(cull.face);\n  }\n}\nfunction applyLineWidth(gl, renderState) {\n  gl.lineWidth(renderState.lineWidth);\n}\nfunction applyPolygonOffset(gl, renderState) {\n  const polygonOffset = renderState.polygonOffset;\n  const enabled = polygonOffset.enabled;\n  enableOrDisable(gl, gl.POLYGON_OFFSET_FILL, enabled);\n  if (enabled) {\n    gl.polygonOffset(polygonOffset.factor, polygonOffset.units);\n  }\n}\nfunction applyScissorTest(gl, renderState, passState) {\n  const scissorTest = renderState.scissorTest;\n  const enabled = defined(passState.scissorTest) ? passState.scissorTest.enabled : scissorTest.enabled;\n  enableOrDisable(gl, gl.SCISSOR_TEST, enabled);\n  if (enabled) {\n    const rectangle = defined(passState.scissorTest) ? passState.scissorTest.rectangle : scissorTest.rectangle;\n    gl.scissor(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n  }\n}\nfunction applyDepthRange(gl, renderState) {\n  const depthRange = renderState.depthRange;\n  gl.depthRange(depthRange.near, depthRange.far);\n}\nfunction applyDepthTest(gl, renderState) {\n  const depthTest = renderState.depthTest;\n  const enabled = depthTest.enabled;\n  enableOrDisable(gl, gl.DEPTH_TEST, enabled);\n  if (enabled) {\n    gl.depthFunc(depthTest.func);\n  }\n}\nfunction applyColorMask(gl, renderState) {\n  const colorMask = renderState.colorMask;\n  gl.colorMask(colorMask.red, colorMask.green, colorMask.blue, colorMask.alpha);\n}\nfunction applyDepthMask(gl, renderState) {\n  gl.depthMask(renderState.depthMask);\n}\nfunction applyStencilMask(gl, renderState) {\n  gl.stencilMask(renderState.stencilMask);\n}\nfunction applyBlendingColor(gl, color) {\n  gl.blendColor(color.red, color.green, color.blue, color.alpha);\n}\nfunction applyBlending(gl, renderState, passState) {\n  const blending = renderState.blending;\n  const enabled = defined(passState.blendingEnabled) ? passState.blendingEnabled : blending.enabled;\n  enableOrDisable(gl, gl.BLEND, enabled);\n  if (enabled) {\n    applyBlendingColor(gl, blending.color);\n    gl.blendEquationSeparate(blending.equationRgb, blending.equationAlpha);\n    gl.blendFuncSeparate(blending.functionSourceRgb, blending.functionDestinationRgb, blending.functionSourceAlpha, blending.functionDestinationAlpha);\n  }\n}\nfunction applyStencilTest(gl, renderState) {\n  const stencilTest = renderState.stencilTest;\n  const enabled = stencilTest.enabled;\n  enableOrDisable(gl, gl.STENCIL_TEST, enabled);\n  if (enabled) {\n    const frontFunction = stencilTest.frontFunction;\n    const backFunction = stencilTest.backFunction;\n    const reference = stencilTest.reference;\n    const mask = stencilTest.mask;\n\n    // Section 6.8 of the WebGL spec requires the reference and masks to be the same for\n    // front- and back-face tests.  This call prevents invalid operation errors when calling\n    // stencilFuncSeparate on Firefox.  Perhaps they should delay validation to avoid requiring this.\n    gl.stencilFunc(frontFunction, reference, mask);\n    gl.stencilFuncSeparate(gl.BACK, backFunction, reference, mask);\n    gl.stencilFuncSeparate(gl.FRONT, frontFunction, reference, mask);\n    const frontOperation = stencilTest.frontOperation;\n    const frontOperationFail = frontOperation.fail;\n    const frontOperationZFail = frontOperation.zFail;\n    const frontOperationZPass = frontOperation.zPass;\n    gl.stencilOpSeparate(gl.FRONT, frontOperationFail, frontOperationZFail, frontOperationZPass);\n    const backOperation = stencilTest.backOperation;\n    const backOperationFail = backOperation.fail;\n    const backOperationZFail = backOperation.zFail;\n    const backOperationZPass = backOperation.zPass;\n    gl.stencilOpSeparate(gl.BACK, backOperationFail, backOperationZFail, backOperationZPass);\n  }\n}\nfunction applySampleCoverage(gl, renderState) {\n  const sampleCoverage = renderState.sampleCoverage;\n  const enabled = sampleCoverage.enabled;\n  enableOrDisable(gl, gl.SAMPLE_COVERAGE, enabled);\n  if (enabled) {\n    gl.sampleCoverage(sampleCoverage.value, sampleCoverage.invert);\n  }\n}\nconst scratchViewport = new BoundingRectangle();\nfunction applyViewport(gl, renderState, passState) {\n  let viewport = defaultValue(renderState.viewport, passState.viewport);\n  if (!defined(viewport)) {\n    viewport = scratchViewport;\n    viewport.width = passState.context.drawingBufferWidth;\n    viewport.height = passState.context.drawingBufferHeight;\n  }\n  passState.context.uniformState.viewport = viewport;\n  gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n}\nRenderState.apply = function (gl, renderState, passState) {\n  applyFrontFace(gl, renderState);\n  applyCull(gl, renderState);\n  applyLineWidth(gl, renderState);\n  applyPolygonOffset(gl, renderState);\n  applyDepthRange(gl, renderState);\n  applyDepthTest(gl, renderState);\n  applyColorMask(gl, renderState);\n  applyDepthMask(gl, renderState);\n  applyStencilMask(gl, renderState);\n  applyStencilTest(gl, renderState);\n  applySampleCoverage(gl, renderState);\n  applyScissorTest(gl, renderState, passState);\n  applyBlending(gl, renderState, passState);\n  applyViewport(gl, renderState, passState);\n};\nfunction createFuncs(previousState, nextState) {\n  const funcs = [];\n  if (previousState.frontFace !== nextState.frontFace) {\n    funcs.push(applyFrontFace);\n  }\n  if (previousState.cull.enabled !== nextState.cull.enabled || previousState.cull.face !== nextState.cull.face) {\n    funcs.push(applyCull);\n  }\n  if (previousState.lineWidth !== nextState.lineWidth) {\n    funcs.push(applyLineWidth);\n  }\n  if (previousState.polygonOffset.enabled !== nextState.polygonOffset.enabled || previousState.polygonOffset.factor !== nextState.polygonOffset.factor || previousState.polygonOffset.units !== nextState.polygonOffset.units) {\n    funcs.push(applyPolygonOffset);\n  }\n  if (previousState.depthRange.near !== nextState.depthRange.near || previousState.depthRange.far !== nextState.depthRange.far) {\n    funcs.push(applyDepthRange);\n  }\n  if (previousState.depthTest.enabled !== nextState.depthTest.enabled || previousState.depthTest.func !== nextState.depthTest.func) {\n    funcs.push(applyDepthTest);\n  }\n  if (previousState.colorMask.red !== nextState.colorMask.red || previousState.colorMask.green !== nextState.colorMask.green || previousState.colorMask.blue !== nextState.colorMask.blue || previousState.colorMask.alpha !== nextState.colorMask.alpha) {\n    funcs.push(applyColorMask);\n  }\n  if (previousState.depthMask !== nextState.depthMask) {\n    funcs.push(applyDepthMask);\n  }\n  if (previousState.stencilMask !== nextState.stencilMask) {\n    funcs.push(applyStencilMask);\n  }\n  if (previousState.stencilTest.enabled !== nextState.stencilTest.enabled || previousState.stencilTest.frontFunction !== nextState.stencilTest.frontFunction || previousState.stencilTest.backFunction !== nextState.stencilTest.backFunction || previousState.stencilTest.reference !== nextState.stencilTest.reference || previousState.stencilTest.mask !== nextState.stencilTest.mask || previousState.stencilTest.frontOperation.fail !== nextState.stencilTest.frontOperation.fail || previousState.stencilTest.frontOperation.zFail !== nextState.stencilTest.frontOperation.zFail || previousState.stencilTest.backOperation.fail !== nextState.stencilTest.backOperation.fail || previousState.stencilTest.backOperation.zFail !== nextState.stencilTest.backOperation.zFail || previousState.stencilTest.backOperation.zPass !== nextState.stencilTest.backOperation.zPass) {\n    funcs.push(applyStencilTest);\n  }\n  if (previousState.sampleCoverage.enabled !== nextState.sampleCoverage.enabled || previousState.sampleCoverage.value !== nextState.sampleCoverage.value || previousState.sampleCoverage.invert !== nextState.sampleCoverage.invert) {\n    funcs.push(applySampleCoverage);\n  }\n  return funcs;\n}\nRenderState.partialApply = function (gl, previousRenderState, renderState, previousPassState, passState, clear) {\n  if (previousRenderState !== renderState) {\n    // When a new render state is applied, instead of making WebGL calls for all the states or first\n    // comparing the states one-by-one with the previous state (basically a linear search), we take\n    // advantage of RenderState's immutability, and store a dynamically populated sparse data structure\n    // containing functions that make the minimum number of WebGL calls when transitioning from one state\n    // to the other.  In practice, this works well since state-to-state transitions generally only require a\n    // few WebGL calls, especially if commands are stored by state.\n    let funcs = renderState._applyFunctions[previousRenderState.id];\n    if (!defined(funcs)) {\n      funcs = createFuncs(previousRenderState, renderState);\n      renderState._applyFunctions[previousRenderState.id] = funcs;\n    }\n    const len = funcs.length;\n    for (let i = 0; i < len; ++i) {\n      funcs[i](gl, renderState);\n    }\n  }\n  const previousScissorTest = defined(previousPassState.scissorTest) ? previousPassState.scissorTest : previousRenderState.scissorTest;\n  const scissorTest = defined(passState.scissorTest) ? passState.scissorTest : renderState.scissorTest;\n\n  // Our scissor rectangle can get out of sync with the GL scissor rectangle on clears.\n  // Seems to be a problem only on ANGLE. See https://github.com/CesiumGS/cesium/issues/2994\n  if (previousScissorTest !== scissorTest || clear) {\n    applyScissorTest(gl, renderState, passState);\n  }\n  const previousBlendingEnabled = defined(previousPassState.blendingEnabled) ? previousPassState.blendingEnabled : previousRenderState.blending.enabled;\n  const blendingEnabled = defined(passState.blendingEnabled) ? passState.blendingEnabled : renderState.blending.enabled;\n  if (previousBlendingEnabled !== blendingEnabled || blendingEnabled && previousRenderState.blending !== renderState.blending) {\n    applyBlending(gl, renderState, passState);\n  }\n  if (previousRenderState !== renderState || previousPassState !== passState || previousPassState.context !== passState.context) {\n    applyViewport(gl, renderState, passState);\n  }\n};\nRenderState.getState = function (renderState) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(renderState)) {\n    throw new DeveloperError(\"renderState is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return {\n    frontFace: renderState.frontFace,\n    cull: {\n      enabled: renderState.cull.enabled,\n      face: renderState.cull.face\n    },\n    lineWidth: renderState.lineWidth,\n    polygonOffset: {\n      enabled: renderState.polygonOffset.enabled,\n      factor: renderState.polygonOffset.factor,\n      units: renderState.polygonOffset.units\n    },\n    scissorTest: {\n      enabled: renderState.scissorTest.enabled,\n      rectangle: BoundingRectangle.clone(renderState.scissorTest.rectangle)\n    },\n    depthRange: {\n      near: renderState.depthRange.near,\n      far: renderState.depthRange.far\n    },\n    depthTest: {\n      enabled: renderState.depthTest.enabled,\n      func: renderState.depthTest.func\n    },\n    colorMask: {\n      red: renderState.colorMask.red,\n      green: renderState.colorMask.green,\n      blue: renderState.colorMask.blue,\n      alpha: renderState.colorMask.alpha\n    },\n    depthMask: renderState.depthMask,\n    stencilMask: renderState.stencilMask,\n    blending: {\n      enabled: renderState.blending.enabled,\n      color: Color.clone(renderState.blending.color),\n      equationRgb: renderState.blending.equationRgb,\n      equationAlpha: renderState.blending.equationAlpha,\n      functionSourceRgb: renderState.blending.functionSourceRgb,\n      functionSourceAlpha: renderState.blending.functionSourceAlpha,\n      functionDestinationRgb: renderState.blending.functionDestinationRgb,\n      functionDestinationAlpha: renderState.blending.functionDestinationAlpha\n    },\n    stencilTest: {\n      enabled: renderState.stencilTest.enabled,\n      frontFunction: renderState.stencilTest.frontFunction,\n      backFunction: renderState.stencilTest.backFunction,\n      reference: renderState.stencilTest.reference,\n      mask: renderState.stencilTest.mask,\n      frontOperation: {\n        fail: renderState.stencilTest.frontOperation.fail,\n        zFail: renderState.stencilTest.frontOperation.zFail,\n        zPass: renderState.stencilTest.frontOperation.zPass\n      },\n      backOperation: {\n        fail: renderState.stencilTest.backOperation.fail,\n        zFail: renderState.stencilTest.backOperation.zFail,\n        zPass: renderState.stencilTest.backOperation.zPass\n      }\n    },\n    sampleCoverage: {\n      enabled: renderState.sampleCoverage.enabled,\n      value: renderState.sampleCoverage.value,\n      invert: renderState.sampleCoverage.invert\n    },\n    viewport: defined(renderState.viewport) ? BoundingRectangle.clone(renderState.viewport) : undefined\n  };\n};\nexport default RenderState;","map":{"version":3,"names":["BoundingRectangle","Color","defaultValue","defined","DeveloperError","WebGLConstants","WindingOrder","ContextLimits","freezeRenderState","validateBlendEquation","blendEquation","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","validateBlendFunction","blendFunction","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","SRC_ALPHA_SATURATE","validateCullFace","cullFace","FRONT","BACK","FRONT_AND_BACK","validateDepthFunction","depthFunction","NEVER","LESS","EQUAL","LEQUAL","GREATER","NOTEQUAL","GEQUAL","ALWAYS","validateStencilFunction","stencilFunction","validateStencilOperation","stencilOperation","KEEP","REPLACE","INCR","DECR","INVERT","INCR_WRAP","DECR_WRAP","RenderState","renderState","rs","EMPTY_OBJECT","cull","polygonOffset","scissorTest","scissorTestRectangle","rectangle","depthRange","depthTest","colorMask","blending","blendingColor","color","stencilTest","stencilTestFrontOperation","frontOperation","stencilTestBackOperation","backOperation","sampleCoverage","viewport","frontFace","COUNTER_CLOCKWISE","enabled","face","lineWidth","factor","units","clone","near","far","func","red","green","blue","alpha","depthMask","stencilMask","equationRgb","equationAlpha","functionSourceRgb","functionSourceAlpha","functionDestinationRgb","functionDestinationAlpha","frontFunction","backFunction","reference","mask","fail","zFail","zPass","value","invert","x","y","width","height","undefined","minimumAliasedLineWidth","maximumAliasedLineWidth","validate","maximumViewportWidth","toString","maximumViewportHeight","id","_applyFunctions","nextRenderStateId","renderStateCache","fromCache","partialKey","JSON","stringify","cachedState","referenceCount","state","states","fullKey","removeFromCache","fullCachedState","getCache","clearCache","enableOrDisable","gl","glEnum","enable","disable","applyFrontFace","applyCull","CULL_FACE","applyLineWidth","applyPolygonOffset","POLYGON_OFFSET_FILL","applyScissorTest","passState","SCISSOR_TEST","scissor","applyDepthRange","applyDepthTest","DEPTH_TEST","depthFunc","applyColorMask","applyDepthMask","applyStencilMask","applyBlendingColor","blendColor","applyBlending","blendingEnabled","BLEND","blendEquationSeparate","blendFuncSeparate","applyStencilTest","STENCIL_TEST","stencilFunc","stencilFuncSeparate","frontOperationFail","frontOperationZFail","frontOperationZPass","stencilOpSeparate","backOperationFail","backOperationZFail","backOperationZPass","applySampleCoverage","SAMPLE_COVERAGE","scratchViewport","applyViewport","context","drawingBufferWidth","drawingBufferHeight","uniformState","apply","createFuncs","previousState","nextState","funcs","push","partialApply","previousRenderState","previousPassState","clear","len","length","i","previousScissorTest","previousBlendingEnabled","getState"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/RenderState.js"],"sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport WindingOrder from \"../Core/WindingOrder.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport freezeRenderState from \"./freezeRenderState.js\";\n\nfunction validateBlendEquation(blendEquation) {\n  return (\n    blendEquation === WebGLConstants.FUNC_ADD ||\n    blendEquation === WebGLConstants.FUNC_SUBTRACT ||\n    blendEquation === WebGLConstants.FUNC_REVERSE_SUBTRACT ||\n    blendEquation === WebGLConstants.MIN ||\n    blendEquation === WebGLConstants.MAX\n  );\n}\n\nfunction validateBlendFunction(blendFunction) {\n  return (\n    blendFunction === WebGLConstants.ZERO ||\n    blendFunction === WebGLConstants.ONE ||\n    blendFunction === WebGLConstants.SRC_COLOR ||\n    blendFunction === WebGLConstants.ONE_MINUS_SRC_COLOR ||\n    blendFunction === WebGLConstants.DST_COLOR ||\n    blendFunction === WebGLConstants.ONE_MINUS_DST_COLOR ||\n    blendFunction === WebGLConstants.SRC_ALPHA ||\n    blendFunction === WebGLConstants.ONE_MINUS_SRC_ALPHA ||\n    blendFunction === WebGLConstants.DST_ALPHA ||\n    blendFunction === WebGLConstants.ONE_MINUS_DST_ALPHA ||\n    blendFunction === WebGLConstants.CONSTANT_COLOR ||\n    blendFunction === WebGLConstants.ONE_MINUS_CONSTANT_COLOR ||\n    blendFunction === WebGLConstants.CONSTANT_ALPHA ||\n    blendFunction === WebGLConstants.ONE_MINUS_CONSTANT_ALPHA ||\n    blendFunction === WebGLConstants.SRC_ALPHA_SATURATE\n  );\n}\n\nfunction validateCullFace(cullFace) {\n  return (\n    cullFace === WebGLConstants.FRONT ||\n    cullFace === WebGLConstants.BACK ||\n    cullFace === WebGLConstants.FRONT_AND_BACK\n  );\n}\n\nfunction validateDepthFunction(depthFunction) {\n  return (\n    depthFunction === WebGLConstants.NEVER ||\n    depthFunction === WebGLConstants.LESS ||\n    depthFunction === WebGLConstants.EQUAL ||\n    depthFunction === WebGLConstants.LEQUAL ||\n    depthFunction === WebGLConstants.GREATER ||\n    depthFunction === WebGLConstants.NOTEQUAL ||\n    depthFunction === WebGLConstants.GEQUAL ||\n    depthFunction === WebGLConstants.ALWAYS\n  );\n}\n\nfunction validateStencilFunction(stencilFunction) {\n  return (\n    stencilFunction === WebGLConstants.NEVER ||\n    stencilFunction === WebGLConstants.LESS ||\n    stencilFunction === WebGLConstants.EQUAL ||\n    stencilFunction === WebGLConstants.LEQUAL ||\n    stencilFunction === WebGLConstants.GREATER ||\n    stencilFunction === WebGLConstants.NOTEQUAL ||\n    stencilFunction === WebGLConstants.GEQUAL ||\n    stencilFunction === WebGLConstants.ALWAYS\n  );\n}\n\nfunction validateStencilOperation(stencilOperation) {\n  return (\n    stencilOperation === WebGLConstants.ZERO ||\n    stencilOperation === WebGLConstants.KEEP ||\n    stencilOperation === WebGLConstants.REPLACE ||\n    stencilOperation === WebGLConstants.INCR ||\n    stencilOperation === WebGLConstants.DECR ||\n    stencilOperation === WebGLConstants.INVERT ||\n    stencilOperation === WebGLConstants.INCR_WRAP ||\n    stencilOperation === WebGLConstants.DECR_WRAP\n  );\n}\n\n/**\n * @private\n */\nfunction RenderState(renderState) {\n  const rs = defaultValue(renderState, defaultValue.EMPTY_OBJECT);\n  const cull = defaultValue(rs.cull, defaultValue.EMPTY_OBJECT);\n  const polygonOffset = defaultValue(\n    rs.polygonOffset,\n    defaultValue.EMPTY_OBJECT,\n  );\n  const scissorTest = defaultValue(rs.scissorTest, defaultValue.EMPTY_OBJECT);\n  const scissorTestRectangle = defaultValue(\n    scissorTest.rectangle,\n    defaultValue.EMPTY_OBJECT,\n  );\n  const depthRange = defaultValue(rs.depthRange, defaultValue.EMPTY_OBJECT);\n  const depthTest = defaultValue(rs.depthTest, defaultValue.EMPTY_OBJECT);\n  const colorMask = defaultValue(rs.colorMask, defaultValue.EMPTY_OBJECT);\n  const blending = defaultValue(rs.blending, defaultValue.EMPTY_OBJECT);\n  const blendingColor = defaultValue(blending.color, defaultValue.EMPTY_OBJECT);\n  const stencilTest = defaultValue(rs.stencilTest, defaultValue.EMPTY_OBJECT);\n  const stencilTestFrontOperation = defaultValue(\n    stencilTest.frontOperation,\n    defaultValue.EMPTY_OBJECT,\n  );\n  const stencilTestBackOperation = defaultValue(\n    stencilTest.backOperation,\n    defaultValue.EMPTY_OBJECT,\n  );\n  const sampleCoverage = defaultValue(\n    rs.sampleCoverage,\n    defaultValue.EMPTY_OBJECT,\n  );\n  const viewport = rs.viewport;\n\n  this.frontFace = defaultValue(rs.frontFace, WindingOrder.COUNTER_CLOCKWISE);\n  this.cull = {\n    enabled: defaultValue(cull.enabled, false),\n    face: defaultValue(cull.face, WebGLConstants.BACK),\n  };\n  this.lineWidth = defaultValue(rs.lineWidth, 1.0);\n  this.polygonOffset = {\n    enabled: defaultValue(polygonOffset.enabled, false),\n    factor: defaultValue(polygonOffset.factor, 0),\n    units: defaultValue(polygonOffset.units, 0),\n  };\n  this.scissorTest = {\n    enabled: defaultValue(scissorTest.enabled, false),\n    rectangle: BoundingRectangle.clone(scissorTestRectangle),\n  };\n  this.depthRange = {\n    near: defaultValue(depthRange.near, 0),\n    far: defaultValue(depthRange.far, 1),\n  };\n  this.depthTest = {\n    enabled: defaultValue(depthTest.enabled, false),\n    func: defaultValue(depthTest.func, WebGLConstants.LESS), // func, because function is a JavaScript keyword\n  };\n  this.colorMask = {\n    red: defaultValue(colorMask.red, true),\n    green: defaultValue(colorMask.green, true),\n    blue: defaultValue(colorMask.blue, true),\n    alpha: defaultValue(colorMask.alpha, true),\n  };\n  this.depthMask = defaultValue(rs.depthMask, true);\n  this.stencilMask = defaultValue(rs.stencilMask, ~0);\n  this.blending = {\n    enabled: defaultValue(blending.enabled, false),\n    color: new Color(\n      defaultValue(blendingColor.red, 0.0),\n      defaultValue(blendingColor.green, 0.0),\n      defaultValue(blendingColor.blue, 0.0),\n      defaultValue(blendingColor.alpha, 0.0),\n    ),\n    equationRgb: defaultValue(blending.equationRgb, WebGLConstants.FUNC_ADD),\n    equationAlpha: defaultValue(\n      blending.equationAlpha,\n      WebGLConstants.FUNC_ADD,\n    ),\n    functionSourceRgb: defaultValue(\n      blending.functionSourceRgb,\n      WebGLConstants.ONE,\n    ),\n    functionSourceAlpha: defaultValue(\n      blending.functionSourceAlpha,\n      WebGLConstants.ONE,\n    ),\n    functionDestinationRgb: defaultValue(\n      blending.functionDestinationRgb,\n      WebGLConstants.ZERO,\n    ),\n    functionDestinationAlpha: defaultValue(\n      blending.functionDestinationAlpha,\n      WebGLConstants.ZERO,\n    ),\n  };\n  this.stencilTest = {\n    enabled: defaultValue(stencilTest.enabled, false),\n    frontFunction: defaultValue(\n      stencilTest.frontFunction,\n      WebGLConstants.ALWAYS,\n    ),\n    backFunction: defaultValue(stencilTest.backFunction, WebGLConstants.ALWAYS),\n    reference: defaultValue(stencilTest.reference, 0),\n    mask: defaultValue(stencilTest.mask, ~0),\n    frontOperation: {\n      fail: defaultValue(stencilTestFrontOperation.fail, WebGLConstants.KEEP),\n      zFail: defaultValue(stencilTestFrontOperation.zFail, WebGLConstants.KEEP),\n      zPass: defaultValue(stencilTestFrontOperation.zPass, WebGLConstants.KEEP),\n    },\n    backOperation: {\n      fail: defaultValue(stencilTestBackOperation.fail, WebGLConstants.KEEP),\n      zFail: defaultValue(stencilTestBackOperation.zFail, WebGLConstants.KEEP),\n      zPass: defaultValue(stencilTestBackOperation.zPass, WebGLConstants.KEEP),\n    },\n  };\n  this.sampleCoverage = {\n    enabled: defaultValue(sampleCoverage.enabled, false),\n    value: defaultValue(sampleCoverage.value, 1.0),\n    invert: defaultValue(sampleCoverage.invert, false),\n  };\n  this.viewport = defined(viewport)\n    ? new BoundingRectangle(\n        viewport.x,\n        viewport.y,\n        viewport.width,\n        viewport.height,\n      )\n    : undefined;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    this.lineWidth < ContextLimits.minimumAliasedLineWidth ||\n    this.lineWidth > ContextLimits.maximumAliasedLineWidth\n  ) {\n    throw new DeveloperError(\n      \"renderState.lineWidth is out of range.  Check minimumAliasedLineWidth and maximumAliasedLineWidth.\",\n    );\n  }\n  if (!WindingOrder.validate(this.frontFace)) {\n    throw new DeveloperError(\"Invalid renderState.frontFace.\");\n  }\n  if (!validateCullFace(this.cull.face)) {\n    throw new DeveloperError(\"Invalid renderState.cull.face.\");\n  }\n  if (\n    this.scissorTest.rectangle.width < 0 ||\n    this.scissorTest.rectangle.height < 0\n  ) {\n    throw new DeveloperError(\n      \"renderState.scissorTest.rectangle.width and renderState.scissorTest.rectangle.height must be greater than or equal to zero.\",\n    );\n  }\n  if (this.depthRange.near > this.depthRange.far) {\n    // WebGL specific - not an error in GL ES\n    throw new DeveloperError(\n      \"renderState.depthRange.near can not be greater than renderState.depthRange.far.\",\n    );\n  }\n  if (this.depthRange.near < 0) {\n    // Would be clamped by GL\n    throw new DeveloperError(\n      \"renderState.depthRange.near must be greater than or equal to zero.\",\n    );\n  }\n  if (this.depthRange.far > 1) {\n    // Would be clamped by GL\n    throw new DeveloperError(\n      \"renderState.depthRange.far must be less than or equal to one.\",\n    );\n  }\n  if (!validateDepthFunction(this.depthTest.func)) {\n    throw new DeveloperError(\"Invalid renderState.depthTest.func.\");\n  }\n  if (\n    this.blending.color.red < 0.0 ||\n    this.blending.color.red > 1.0 ||\n    this.blending.color.green < 0.0 ||\n    this.blending.color.green > 1.0 ||\n    this.blending.color.blue < 0.0 ||\n    this.blending.color.blue > 1.0 ||\n    this.blending.color.alpha < 0.0 ||\n    this.blending.color.alpha > 1.0\n  ) {\n    // Would be clamped by GL\n    throw new DeveloperError(\n      \"renderState.blending.color components must be greater than or equal to zero and less than or equal to one.\",\n    );\n  }\n  if (!validateBlendEquation(this.blending.equationRgb)) {\n    throw new DeveloperError(\"Invalid renderState.blending.equationRgb.\");\n  }\n  if (!validateBlendEquation(this.blending.equationAlpha)) {\n    throw new DeveloperError(\"Invalid renderState.blending.equationAlpha.\");\n  }\n  if (!validateBlendFunction(this.blending.functionSourceRgb)) {\n    throw new DeveloperError(\"Invalid renderState.blending.functionSourceRgb.\");\n  }\n  if (!validateBlendFunction(this.blending.functionSourceAlpha)) {\n    throw new DeveloperError(\n      \"Invalid renderState.blending.functionSourceAlpha.\",\n    );\n  }\n  if (!validateBlendFunction(this.blending.functionDestinationRgb)) {\n    throw new DeveloperError(\n      \"Invalid renderState.blending.functionDestinationRgb.\",\n    );\n  }\n  if (!validateBlendFunction(this.blending.functionDestinationAlpha)) {\n    throw new DeveloperError(\n      \"Invalid renderState.blending.functionDestinationAlpha.\",\n    );\n  }\n  if (!validateStencilFunction(this.stencilTest.frontFunction)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.frontFunction.\");\n  }\n  if (!validateStencilFunction(this.stencilTest.backFunction)) {\n    throw new DeveloperError(\"Invalid renderState.stencilTest.backFunction.\");\n  }\n  if (!validateStencilOperation(this.stencilTest.frontOperation.fail)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.frontOperation.fail.\",\n    );\n  }\n  if (!validateStencilOperation(this.stencilTest.frontOperation.zFail)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.frontOperation.zFail.\",\n    );\n  }\n  if (!validateStencilOperation(this.stencilTest.frontOperation.zPass)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.frontOperation.zPass.\",\n    );\n  }\n  if (!validateStencilOperation(this.stencilTest.backOperation.fail)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.backOperation.fail.\",\n    );\n  }\n  if (!validateStencilOperation(this.stencilTest.backOperation.zFail)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.backOperation.zFail.\",\n    );\n  }\n  if (!validateStencilOperation(this.stencilTest.backOperation.zPass)) {\n    throw new DeveloperError(\n      \"Invalid renderState.stencilTest.backOperation.zPass.\",\n    );\n  }\n\n  if (defined(this.viewport)) {\n    if (this.viewport.width < 0) {\n      throw new DeveloperError(\n        \"renderState.viewport.width must be greater than or equal to zero.\",\n      );\n    }\n    if (this.viewport.height < 0) {\n      throw new DeveloperError(\n        \"renderState.viewport.height must be greater than or equal to zero.\",\n      );\n    }\n\n    if (this.viewport.width > ContextLimits.maximumViewportWidth) {\n      throw new DeveloperError(\n        `renderState.viewport.width must be less than or equal to the maximum viewport width (${ContextLimits.maximumViewportWidth.toString()}).  Check maximumViewportWidth.`,\n      );\n    }\n    if (this.viewport.height > ContextLimits.maximumViewportHeight) {\n      throw new DeveloperError(\n        `renderState.viewport.height must be less than or equal to the maximum viewport height (${ContextLimits.maximumViewportHeight.toString()}).  Check maximumViewportHeight.`,\n      );\n    }\n  }\n  //>>includeEnd('debug');\n\n  this.id = 0;\n  this._applyFunctions = [];\n}\n\nlet nextRenderStateId = 0;\nlet renderStateCache = {};\n\n/**\n * Validates and then finds or creates an immutable render state, which defines the pipeline\n * state for a {@link DrawCommand} or {@link ClearCommand}.  All inputs states are optional.  Omitted states\n * use the defaults shown in the example below.\n *\n * @param {object} [renderState] The states defining the render state as shown in the example below.\n *\n * @exception {RuntimeError} renderState.lineWidth is out of range.\n * @exception {DeveloperError} Invalid renderState.frontFace.\n * @exception {DeveloperError} Invalid renderState.cull.face.\n * @exception {DeveloperError} scissorTest.rectangle.width and scissorTest.rectangle.height must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.depthRange.near can't be greater than renderState.depthRange.far.\n * @exception {DeveloperError} renderState.depthRange.near must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.depthRange.far must be less than or equal to zero.\n * @exception {DeveloperError} Invalid renderState.depthTest.func.\n * @exception {DeveloperError} renderState.blending.color components must be greater than or equal to zero and less than or equal to one\n * @exception {DeveloperError} Invalid renderState.blending.equationRgb.\n * @exception {DeveloperError} Invalid renderState.blending.equationAlpha.\n * @exception {DeveloperError} Invalid renderState.blending.functionSourceRgb.\n * @exception {DeveloperError} Invalid renderState.blending.functionSourceAlpha.\n * @exception {DeveloperError} Invalid renderState.blending.functionDestinationRgb.\n * @exception {DeveloperError} Invalid renderState.blending.functionDestinationAlpha.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontFunction.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backFunction.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.fail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.zFail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.frontOperation.zPass.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.fail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.zFail.\n * @exception {DeveloperError} Invalid renderState.stencilTest.backOperation.zPass.\n * @exception {DeveloperError} renderState.viewport.width must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.viewport.width must be less than or equal to the maximum viewport width.\n * @exception {DeveloperError} renderState.viewport.height must be greater than or equal to zero.\n * @exception {DeveloperError} renderState.viewport.height must be less than or equal to the maximum viewport height.\n *\n *\n * @example\n * const defaults = {\n *     frontFace : WindingOrder.COUNTER_CLOCKWISE,\n *     cull : {\n *         enabled : false,\n *         face : CullFace.BACK\n *     },\n *     lineWidth : 1,\n *     polygonOffset : {\n *         enabled : false,\n *         factor : 0,\n *         units : 0\n *     },\n *     scissorTest : {\n *         enabled : false,\n *         rectangle : {\n *             x : 0,\n *             y : 0,\n *             width : 0,\n *             height : 0\n *         }\n *     },\n *     depthRange : {\n *         near : 0,\n *         far : 1\n *     },\n *     depthTest : {\n *         enabled : false,\n *         func : DepthFunction.LESS\n *      },\n *     colorMask : {\n *         red : true,\n *         green : true,\n *         blue : true,\n *         alpha : true\n *     },\n *     depthMask : true,\n *     stencilMask : ~0,\n *     blending : {\n *         enabled : false,\n *         color : {\n *             red : 0.0,\n *             green : 0.0,\n *             blue : 0.0,\n *             alpha : 0.0\n *         },\n *         equationRgb : BlendEquation.ADD,\n *         equationAlpha : BlendEquation.ADD,\n *         functionSourceRgb : BlendFunction.ONE,\n *         functionSourceAlpha : BlendFunction.ONE,\n *         functionDestinationRgb : BlendFunction.ZERO,\n *         functionDestinationAlpha : BlendFunction.ZERO\n *     },\n *     stencilTest : {\n *         enabled : false,\n *         frontFunction : StencilFunction.ALWAYS,\n *         backFunction : StencilFunction.ALWAYS,\n *         reference : 0,\n *         mask : ~0,\n *         frontOperation : {\n *             fail : StencilOperation.KEEP,\n *             zFail : StencilOperation.KEEP,\n *             zPass : StencilOperation.KEEP\n *         },\n *         backOperation : {\n *             fail : StencilOperation.KEEP,\n *             zFail : StencilOperation.KEEP,\n *             zPass : StencilOperation.KEEP\n *         }\n *     },\n *     sampleCoverage : {\n *         enabled : false,\n *         value : 1.0,\n *         invert : false\n *      }\n * };\n *\n * const rs = RenderState.fromCache(defaults);\n *\n * @see DrawCommand\n * @see ClearCommand\n *\n * @private\n */\nRenderState.fromCache = function (renderState) {\n  const partialKey = JSON.stringify(renderState);\n  let cachedState = renderStateCache[partialKey];\n  if (defined(cachedState)) {\n    ++cachedState.referenceCount;\n    return cachedState.state;\n  }\n\n  // Cache miss.  Fully define render state and try again.\n  let states = new RenderState(renderState);\n  const fullKey = JSON.stringify(states);\n  cachedState = renderStateCache[fullKey];\n  if (!defined(cachedState)) {\n    states.id = nextRenderStateId++;\n    //>>includeStart('debug', pragmas.debug);\n    states = freezeRenderState(states);\n    //>>includeEnd('debug');\n    cachedState = {\n      referenceCount: 0,\n      state: states,\n    };\n\n    // Cache full render state.  Multiple partially defined render states may map to this.\n    renderStateCache[fullKey] = cachedState;\n  }\n\n  ++cachedState.referenceCount;\n\n  // Cache partial render state so we can skip validation on a cache hit for a partially defined render state\n  renderStateCache[partialKey] = {\n    referenceCount: 1,\n    state: cachedState.state,\n  };\n\n  return cachedState.state;\n};\n\n/**\n * @private\n */\nRenderState.removeFromCache = function (renderState) {\n  const states = new RenderState(renderState);\n  const fullKey = JSON.stringify(states);\n  const fullCachedState = renderStateCache[fullKey];\n\n  // decrement partial key reference count\n  const partialKey = JSON.stringify(renderState);\n  const cachedState = renderStateCache[partialKey];\n  if (defined(cachedState)) {\n    --cachedState.referenceCount;\n\n    if (cachedState.referenceCount === 0) {\n      // remove partial key\n      delete renderStateCache[partialKey];\n\n      // decrement full key reference count\n      if (defined(fullCachedState)) {\n        --fullCachedState.referenceCount;\n      }\n    }\n  }\n\n  // remove full key if reference count is zero\n  if (defined(fullCachedState) && fullCachedState.referenceCount === 0) {\n    delete renderStateCache[fullKey];\n  }\n};\n\n/**\n * This function is for testing purposes only.\n * @private\n */\nRenderState.getCache = function () {\n  return renderStateCache;\n};\n\n/**\n * This function is for testing purposes only.\n * @private\n */\nRenderState.clearCache = function () {\n  renderStateCache = {};\n};\n\nfunction enableOrDisable(gl, glEnum, enable) {\n  if (enable) {\n    gl.enable(glEnum);\n  } else {\n    gl.disable(glEnum);\n  }\n}\n\nfunction applyFrontFace(gl, renderState) {\n  gl.frontFace(renderState.frontFace);\n}\n\nfunction applyCull(gl, renderState) {\n  const cull = renderState.cull;\n  const enabled = cull.enabled;\n\n  enableOrDisable(gl, gl.CULL_FACE, enabled);\n\n  if (enabled) {\n    gl.cullFace(cull.face);\n  }\n}\n\nfunction applyLineWidth(gl, renderState) {\n  gl.lineWidth(renderState.lineWidth);\n}\n\nfunction applyPolygonOffset(gl, renderState) {\n  const polygonOffset = renderState.polygonOffset;\n  const enabled = polygonOffset.enabled;\n\n  enableOrDisable(gl, gl.POLYGON_OFFSET_FILL, enabled);\n\n  if (enabled) {\n    gl.polygonOffset(polygonOffset.factor, polygonOffset.units);\n  }\n}\n\nfunction applyScissorTest(gl, renderState, passState) {\n  const scissorTest = renderState.scissorTest;\n  const enabled = defined(passState.scissorTest)\n    ? passState.scissorTest.enabled\n    : scissorTest.enabled;\n\n  enableOrDisable(gl, gl.SCISSOR_TEST, enabled);\n\n  if (enabled) {\n    const rectangle = defined(passState.scissorTest)\n      ? passState.scissorTest.rectangle\n      : scissorTest.rectangle;\n    gl.scissor(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n  }\n}\n\nfunction applyDepthRange(gl, renderState) {\n  const depthRange = renderState.depthRange;\n  gl.depthRange(depthRange.near, depthRange.far);\n}\n\nfunction applyDepthTest(gl, renderState) {\n  const depthTest = renderState.depthTest;\n  const enabled = depthTest.enabled;\n\n  enableOrDisable(gl, gl.DEPTH_TEST, enabled);\n\n  if (enabled) {\n    gl.depthFunc(depthTest.func);\n  }\n}\n\nfunction applyColorMask(gl, renderState) {\n  const colorMask = renderState.colorMask;\n  gl.colorMask(colorMask.red, colorMask.green, colorMask.blue, colorMask.alpha);\n}\n\nfunction applyDepthMask(gl, renderState) {\n  gl.depthMask(renderState.depthMask);\n}\n\nfunction applyStencilMask(gl, renderState) {\n  gl.stencilMask(renderState.stencilMask);\n}\n\nfunction applyBlendingColor(gl, color) {\n  gl.blendColor(color.red, color.green, color.blue, color.alpha);\n}\n\nfunction applyBlending(gl, renderState, passState) {\n  const blending = renderState.blending;\n  const enabled = defined(passState.blendingEnabled)\n    ? passState.blendingEnabled\n    : blending.enabled;\n\n  enableOrDisable(gl, gl.BLEND, enabled);\n\n  if (enabled) {\n    applyBlendingColor(gl, blending.color);\n    gl.blendEquationSeparate(blending.equationRgb, blending.equationAlpha);\n    gl.blendFuncSeparate(\n      blending.functionSourceRgb,\n      blending.functionDestinationRgb,\n      blending.functionSourceAlpha,\n      blending.functionDestinationAlpha,\n    );\n  }\n}\n\nfunction applyStencilTest(gl, renderState) {\n  const stencilTest = renderState.stencilTest;\n  const enabled = stencilTest.enabled;\n\n  enableOrDisable(gl, gl.STENCIL_TEST, enabled);\n\n  if (enabled) {\n    const frontFunction = stencilTest.frontFunction;\n    const backFunction = stencilTest.backFunction;\n    const reference = stencilTest.reference;\n    const mask = stencilTest.mask;\n\n    // Section 6.8 of the WebGL spec requires the reference and masks to be the same for\n    // front- and back-face tests.  This call prevents invalid operation errors when calling\n    // stencilFuncSeparate on Firefox.  Perhaps they should delay validation to avoid requiring this.\n    gl.stencilFunc(frontFunction, reference, mask);\n    gl.stencilFuncSeparate(gl.BACK, backFunction, reference, mask);\n    gl.stencilFuncSeparate(gl.FRONT, frontFunction, reference, mask);\n\n    const frontOperation = stencilTest.frontOperation;\n    const frontOperationFail = frontOperation.fail;\n    const frontOperationZFail = frontOperation.zFail;\n    const frontOperationZPass = frontOperation.zPass;\n\n    gl.stencilOpSeparate(\n      gl.FRONT,\n      frontOperationFail,\n      frontOperationZFail,\n      frontOperationZPass,\n    );\n\n    const backOperation = stencilTest.backOperation;\n    const backOperationFail = backOperation.fail;\n    const backOperationZFail = backOperation.zFail;\n    const backOperationZPass = backOperation.zPass;\n\n    gl.stencilOpSeparate(\n      gl.BACK,\n      backOperationFail,\n      backOperationZFail,\n      backOperationZPass,\n    );\n  }\n}\n\nfunction applySampleCoverage(gl, renderState) {\n  const sampleCoverage = renderState.sampleCoverage;\n  const enabled = sampleCoverage.enabled;\n\n  enableOrDisable(gl, gl.SAMPLE_COVERAGE, enabled);\n\n  if (enabled) {\n    gl.sampleCoverage(sampleCoverage.value, sampleCoverage.invert);\n  }\n}\n\nconst scratchViewport = new BoundingRectangle();\n\nfunction applyViewport(gl, renderState, passState) {\n  let viewport = defaultValue(renderState.viewport, passState.viewport);\n  if (!defined(viewport)) {\n    viewport = scratchViewport;\n    viewport.width = passState.context.drawingBufferWidth;\n    viewport.height = passState.context.drawingBufferHeight;\n  }\n\n  passState.context.uniformState.viewport = viewport;\n  gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n}\n\nRenderState.apply = function (gl, renderState, passState) {\n  applyFrontFace(gl, renderState);\n  applyCull(gl, renderState);\n  applyLineWidth(gl, renderState);\n  applyPolygonOffset(gl, renderState);\n  applyDepthRange(gl, renderState);\n  applyDepthTest(gl, renderState);\n  applyColorMask(gl, renderState);\n  applyDepthMask(gl, renderState);\n  applyStencilMask(gl, renderState);\n  applyStencilTest(gl, renderState);\n  applySampleCoverage(gl, renderState);\n  applyScissorTest(gl, renderState, passState);\n  applyBlending(gl, renderState, passState);\n  applyViewport(gl, renderState, passState);\n};\n\nfunction createFuncs(previousState, nextState) {\n  const funcs = [];\n\n  if (previousState.frontFace !== nextState.frontFace) {\n    funcs.push(applyFrontFace);\n  }\n\n  if (\n    previousState.cull.enabled !== nextState.cull.enabled ||\n    previousState.cull.face !== nextState.cull.face\n  ) {\n    funcs.push(applyCull);\n  }\n\n  if (previousState.lineWidth !== nextState.lineWidth) {\n    funcs.push(applyLineWidth);\n  }\n\n  if (\n    previousState.polygonOffset.enabled !== nextState.polygonOffset.enabled ||\n    previousState.polygonOffset.factor !== nextState.polygonOffset.factor ||\n    previousState.polygonOffset.units !== nextState.polygonOffset.units\n  ) {\n    funcs.push(applyPolygonOffset);\n  }\n\n  if (\n    previousState.depthRange.near !== nextState.depthRange.near ||\n    previousState.depthRange.far !== nextState.depthRange.far\n  ) {\n    funcs.push(applyDepthRange);\n  }\n\n  if (\n    previousState.depthTest.enabled !== nextState.depthTest.enabled ||\n    previousState.depthTest.func !== nextState.depthTest.func\n  ) {\n    funcs.push(applyDepthTest);\n  }\n\n  if (\n    previousState.colorMask.red !== nextState.colorMask.red ||\n    previousState.colorMask.green !== nextState.colorMask.green ||\n    previousState.colorMask.blue !== nextState.colorMask.blue ||\n    previousState.colorMask.alpha !== nextState.colorMask.alpha\n  ) {\n    funcs.push(applyColorMask);\n  }\n\n  if (previousState.depthMask !== nextState.depthMask) {\n    funcs.push(applyDepthMask);\n  }\n\n  if (previousState.stencilMask !== nextState.stencilMask) {\n    funcs.push(applyStencilMask);\n  }\n\n  if (\n    previousState.stencilTest.enabled !== nextState.stencilTest.enabled ||\n    previousState.stencilTest.frontFunction !==\n      nextState.stencilTest.frontFunction ||\n    previousState.stencilTest.backFunction !==\n      nextState.stencilTest.backFunction ||\n    previousState.stencilTest.reference !== nextState.stencilTest.reference ||\n    previousState.stencilTest.mask !== nextState.stencilTest.mask ||\n    previousState.stencilTest.frontOperation.fail !==\n      nextState.stencilTest.frontOperation.fail ||\n    previousState.stencilTest.frontOperation.zFail !==\n      nextState.stencilTest.frontOperation.zFail ||\n    previousState.stencilTest.backOperation.fail !==\n      nextState.stencilTest.backOperation.fail ||\n    previousState.stencilTest.backOperation.zFail !==\n      nextState.stencilTest.backOperation.zFail ||\n    previousState.stencilTest.backOperation.zPass !==\n      nextState.stencilTest.backOperation.zPass\n  ) {\n    funcs.push(applyStencilTest);\n  }\n\n  if (\n    previousState.sampleCoverage.enabled !== nextState.sampleCoverage.enabled ||\n    previousState.sampleCoverage.value !== nextState.sampleCoverage.value ||\n    previousState.sampleCoverage.invert !== nextState.sampleCoverage.invert\n  ) {\n    funcs.push(applySampleCoverage);\n  }\n\n  return funcs;\n}\n\nRenderState.partialApply = function (\n  gl,\n  previousRenderState,\n  renderState,\n  previousPassState,\n  passState,\n  clear,\n) {\n  if (previousRenderState !== renderState) {\n    // When a new render state is applied, instead of making WebGL calls for all the states or first\n    // comparing the states one-by-one with the previous state (basically a linear search), we take\n    // advantage of RenderState's immutability, and store a dynamically populated sparse data structure\n    // containing functions that make the minimum number of WebGL calls when transitioning from one state\n    // to the other.  In practice, this works well since state-to-state transitions generally only require a\n    // few WebGL calls, especially if commands are stored by state.\n    let funcs = renderState._applyFunctions[previousRenderState.id];\n    if (!defined(funcs)) {\n      funcs = createFuncs(previousRenderState, renderState);\n      renderState._applyFunctions[previousRenderState.id] = funcs;\n    }\n\n    const len = funcs.length;\n    for (let i = 0; i < len; ++i) {\n      funcs[i](gl, renderState);\n    }\n  }\n\n  const previousScissorTest = defined(previousPassState.scissorTest)\n    ? previousPassState.scissorTest\n    : previousRenderState.scissorTest;\n  const scissorTest = defined(passState.scissorTest)\n    ? passState.scissorTest\n    : renderState.scissorTest;\n\n  // Our scissor rectangle can get out of sync with the GL scissor rectangle on clears.\n  // Seems to be a problem only on ANGLE. See https://github.com/CesiumGS/cesium/issues/2994\n  if (previousScissorTest !== scissorTest || clear) {\n    applyScissorTest(gl, renderState, passState);\n  }\n\n  const previousBlendingEnabled = defined(previousPassState.blendingEnabled)\n    ? previousPassState.blendingEnabled\n    : previousRenderState.blending.enabled;\n  const blendingEnabled = defined(passState.blendingEnabled)\n    ? passState.blendingEnabled\n    : renderState.blending.enabled;\n  if (\n    previousBlendingEnabled !== blendingEnabled ||\n    (blendingEnabled && previousRenderState.blending !== renderState.blending)\n  ) {\n    applyBlending(gl, renderState, passState);\n  }\n\n  if (\n    previousRenderState !== renderState ||\n    previousPassState !== passState ||\n    previousPassState.context !== passState.context\n  ) {\n    applyViewport(gl, renderState, passState);\n  }\n};\n\nRenderState.getState = function (renderState) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(renderState)) {\n    throw new DeveloperError(\"renderState is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return {\n    frontFace: renderState.frontFace,\n    cull: {\n      enabled: renderState.cull.enabled,\n      face: renderState.cull.face,\n    },\n    lineWidth: renderState.lineWidth,\n    polygonOffset: {\n      enabled: renderState.polygonOffset.enabled,\n      factor: renderState.polygonOffset.factor,\n      units: renderState.polygonOffset.units,\n    },\n    scissorTest: {\n      enabled: renderState.scissorTest.enabled,\n      rectangle: BoundingRectangle.clone(renderState.scissorTest.rectangle),\n    },\n    depthRange: {\n      near: renderState.depthRange.near,\n      far: renderState.depthRange.far,\n    },\n    depthTest: {\n      enabled: renderState.depthTest.enabled,\n      func: renderState.depthTest.func,\n    },\n    colorMask: {\n      red: renderState.colorMask.red,\n      green: renderState.colorMask.green,\n      blue: renderState.colorMask.blue,\n      alpha: renderState.colorMask.alpha,\n    },\n    depthMask: renderState.depthMask,\n    stencilMask: renderState.stencilMask,\n    blending: {\n      enabled: renderState.blending.enabled,\n      color: Color.clone(renderState.blending.color),\n      equationRgb: renderState.blending.equationRgb,\n      equationAlpha: renderState.blending.equationAlpha,\n      functionSourceRgb: renderState.blending.functionSourceRgb,\n      functionSourceAlpha: renderState.blending.functionSourceAlpha,\n      functionDestinationRgb: renderState.blending.functionDestinationRgb,\n      functionDestinationAlpha: renderState.blending.functionDestinationAlpha,\n    },\n    stencilTest: {\n      enabled: renderState.stencilTest.enabled,\n      frontFunction: renderState.stencilTest.frontFunction,\n      backFunction: renderState.stencilTest.backFunction,\n      reference: renderState.stencilTest.reference,\n      mask: renderState.stencilTest.mask,\n      frontOperation: {\n        fail: renderState.stencilTest.frontOperation.fail,\n        zFail: renderState.stencilTest.frontOperation.zFail,\n        zPass: renderState.stencilTest.frontOperation.zPass,\n      },\n      backOperation: {\n        fail: renderState.stencilTest.backOperation.fail,\n        zFail: renderState.stencilTest.backOperation.zFail,\n        zPass: renderState.stencilTest.backOperation.zPass,\n      },\n    },\n    sampleCoverage: {\n      enabled: renderState.sampleCoverage.enabled,\n      value: renderState.sampleCoverage.value,\n      invert: renderState.sampleCoverage.invert,\n    },\n    viewport: defined(renderState.viewport)\n      ? BoundingRectangle.clone(renderState.viewport)\n      : undefined,\n  };\n};\nexport default RenderState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}