{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\n\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {number} [length=0] The initial length of the array.\n */\nfunction ManagedArray(length) {\n  length = defaultValue(length, 0);\n  this._array = new Array(length);\n  this._length = length;\n}\nObject.defineProperties(ManagedArray.prototype, {\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type {number}\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n    set: function (length) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n      //>>includeEnd('debug');\n      const array = this._array;\n      const originalLength = this._length;\n      if (length < originalLength) {\n        // Remove trailing references\n        for (let i = length; i < originalLength; ++i) {\n          array[i] = undefined;\n        }\n      } else if (length > array.length) {\n        array.length = length;\n      }\n      this._length = length;\n    }\n  },\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type {Array}\n   * @readonly\n   */\n  values: {\n    get: function () {\n      return this._array;\n    }\n  }\n});\n\n/**\n * Gets the element at an index.\n *\n * @param {number} index The index to get.\n */\nManagedArray.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.lessThan(\"index\", index, this._array.length);\n  //>>includeEnd('debug');\n\n  return this._array[index];\n};\n\n/**\n * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n *\n * @param {number} index The index to set.\n * @param {*} element The element to set at index.\n */\nManagedArray.prototype.set = function (index, element) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index);\n  //>>includeEnd('debug');\n\n  if (index >= this._length) {\n    this.length = index + 1;\n  }\n  this._array[index] = element;\n};\n\n/**\n * Returns the last element in the array without modifying the array.\n *\n * @returns {*} The last element in the array.\n */\nManagedArray.prototype.peek = function () {\n  return this._array[this._length - 1];\n};\n\n/**\n * Push an element into the array.\n *\n * @param {*} element The element to push.\n */\nManagedArray.prototype.push = function (element) {\n  const index = this.length++;\n  this._array[index] = element;\n};\n\n/**\n * Pop an element from the array.\n *\n * @returns {*} The last element in the array.\n */\nManagedArray.prototype.pop = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n  const element = this._array[this._length - 1];\n  --this.length;\n  return element;\n};\n\n/**\n * Resize the internal array if length > _array.length.\n *\n * @param {number} length The length.\n */\nManagedArray.prototype.reserve = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n  //>>includeEnd('debug');\n\n  if (length > this._array.length) {\n    this._array.length = length;\n  }\n};\n\n/**\n * Resize the array.\n *\n * @param {number} length The length.\n */\nManagedArray.prototype.resize = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n  //>>includeEnd('debug');\n\n  this.length = length;\n};\n\n/**\n * Trim the internal array to the specified length. Defaults to the current length.\n *\n * @param {number} [length] The length.\n */\nManagedArray.prototype.trim = function (length) {\n  length = defaultValue(length, this._length);\n  this._array.length = length;\n};\nexport default ManagedArray;","map":{"version":3,"names":["Check","defaultValue","ManagedArray","length","_array","Array","_length","Object","defineProperties","prototype","get","set","typeOf","number","greaterThanOrEquals","array","originalLength","i","undefined","values","index","lessThan","element","peek","push","pop","reserve","resize","trim"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/ManagedArray.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\n\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {number} [length=0] The initial length of the array.\n */\nfunction ManagedArray(length) {\n  length = defaultValue(length, 0);\n  this._array = new Array(length);\n  this._length = length;\n}\n\nObject.defineProperties(ManagedArray.prototype, {\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type {number}\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n    set: function (length) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n      //>>includeEnd('debug');\n      const array = this._array;\n      const originalLength = this._length;\n      if (length < originalLength) {\n        // Remove trailing references\n        for (let i = length; i < originalLength; ++i) {\n          array[i] = undefined;\n        }\n      } else if (length > array.length) {\n        array.length = length;\n      }\n      this._length = length;\n    },\n  },\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type {Array}\n   * @readonly\n   */\n  values: {\n    get: function () {\n      return this._array;\n    },\n  },\n});\n\n/**\n * Gets the element at an index.\n *\n * @param {number} index The index to get.\n */\nManagedArray.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.lessThan(\"index\", index, this._array.length);\n  //>>includeEnd('debug');\n\n  return this._array[index];\n};\n\n/**\n * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n *\n * @param {number} index The index to set.\n * @param {*} element The element to set at index.\n */\nManagedArray.prototype.set = function (index, element) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index);\n  //>>includeEnd('debug');\n\n  if (index >= this._length) {\n    this.length = index + 1;\n  }\n  this._array[index] = element;\n};\n\n/**\n * Returns the last element in the array without modifying the array.\n *\n * @returns {*} The last element in the array.\n */\nManagedArray.prototype.peek = function () {\n  return this._array[this._length - 1];\n};\n\n/**\n * Push an element into the array.\n *\n * @param {*} element The element to push.\n */\nManagedArray.prototype.push = function (element) {\n  const index = this.length++;\n  this._array[index] = element;\n};\n\n/**\n * Pop an element from the array.\n *\n * @returns {*} The last element in the array.\n */\nManagedArray.prototype.pop = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n  const element = this._array[this._length - 1];\n  --this.length;\n  return element;\n};\n\n/**\n * Resize the internal array if length > _array.length.\n *\n * @param {number} length The length.\n */\nManagedArray.prototype.reserve = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n  //>>includeEnd('debug');\n\n  if (length > this._array.length) {\n    this._array.length = length;\n  }\n};\n\n/**\n * Resize the array.\n *\n * @param {number} length The length.\n */\nManagedArray.prototype.resize = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n  //>>includeEnd('debug');\n\n  this.length = length;\n};\n\n/**\n * Trim the internal array to the specified length. Defaults to the current length.\n *\n * @param {number} [length] The length.\n */\nManagedArray.prototype.trim = function (length) {\n  length = defaultValue(length, this._length);\n  this._array.length = length;\n};\nexport default ManagedArray;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}