{"ast":null,"code":"import buildModuleUrl from \"./buildModuleUrl.js\";\nimport Color from \"./Color.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport writeTextToCanvas from \"./writeTextToCanvas.js\";\n\n/**\n * A utility class for generating custom map pins as canvas elements.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/PinBuilder.png' width='500'/><br />\n * Example pins generated using both the maki icon set, which ships with Cesium, and single character text.\n * </div>\n *\n * @alias PinBuilder\n * @constructor\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Map%20Pins.html|Cesium Sandcastle PinBuilder Demo}\n */\nfunction PinBuilder() {\n  this._cache = {};\n}\n\n/**\n * Creates an empty pin of the specified color and size.\n *\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromColor = function (color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(undefined, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified icon, color, and size.\n *\n * @param {Resource|string} url The url of the image to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromUrl = function (url, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(url, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified {@link https://www.mapbox.com/maki/|maki} icon identifier, color, and size.\n *\n * @param {string} id The id of the maki icon to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromMakiIconId = function (id, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(buildModuleUrl(`Assets/Textures/maki/${encodeURIComponent(id)}.png`), undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified text, color, and size.  The text will be sized to be as large as possible\n * while still being contained completely within the pin.\n *\n * @param {string} text The text to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromText = function (text, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(text)) {\n    throw new DeveloperError(\"text is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n\n  return createPin(undefined, text, color, size, this._cache);\n};\nconst colorScratch = new Color();\n\n//This function (except for the 3 commented lines) was auto-generated from an online tool,\n//http://www.professorcloud.com/svg-to-canvas/, using Assets/Textures/pin.svg as input.\n//The reason we simply can't load and draw the SVG directly to the canvas is because\n//it taints the canvas in Internet Explorer (and possibly some other browsers); making\n//it impossible to create a WebGL texture from the result.\nfunction drawPin(context2D, color, size) {\n  context2D.save();\n  context2D.scale(size / 24, size / 24); //Added to auto-generated code to scale up to desired size.\n  context2D.fillStyle = color.toCssColorString(); //Modified from auto-generated code.\n  context2D.strokeStyle = color.brighten(0.6, colorScratch).toCssColorString(); //Modified from auto-generated code.\n  context2D.lineWidth = 0.846;\n  context2D.beginPath();\n  context2D.moveTo(6.72, 0.422);\n  context2D.lineTo(17.28, 0.422);\n  context2D.bezierCurveTo(18.553, 0.422, 19.577, 1.758, 19.577, 3.415);\n  context2D.lineTo(19.577, 10.973);\n  context2D.bezierCurveTo(19.577, 12.63, 18.553, 13.966, 17.282, 13.966);\n  context2D.lineTo(14.386, 14.008);\n  context2D.lineTo(11.826, 23.578);\n  context2D.lineTo(9.614, 14.008);\n  context2D.lineTo(6.719, 13.965);\n  context2D.bezierCurveTo(5.446, 13.983, 4.422, 12.629, 4.422, 10.972);\n  context2D.lineTo(4.422, 3.416);\n  context2D.bezierCurveTo(4.423, 1.76, 5.447, 0.423, 6.718, 0.423);\n  context2D.closePath();\n  context2D.fill();\n  context2D.stroke();\n  context2D.restore();\n}\n\n//This function takes an image or canvas and uses it as a template\n//to \"stamp\" the pin with a white image outlined in black.  The color\n//values of the input image are ignored completely and only the alpha\n//values are used.\nfunction drawIcon(context2D, image, size) {\n  //Size is the largest image that looks good inside of pin box.\n  const imageSize = size / 2.5;\n  let sizeX = imageSize;\n  let sizeY = imageSize;\n  if (image.width > image.height) {\n    sizeY = imageSize * (image.height / image.width);\n  } else if (image.width < image.height) {\n    sizeX = imageSize * (image.width / image.height);\n  }\n\n  //x and y are the center of the pin box\n  const x = Math.round((size - sizeX) / 2);\n  const y = Math.round(7 / 24 * size - sizeY / 2);\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x - 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y - 1, sizeX, sizeY);\n  context2D.drawImage(image, x + 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y + 1, sizeX, sizeY);\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.BLACK.toCssColorString();\n  context2D.fillRect(x - 1, y - 1, sizeX + 2, sizeY + 2);\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x, y, sizeX, sizeY);\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.WHITE.toCssColorString();\n  context2D.fillRect(x - 1, y - 2, sizeX + 2, sizeY + 2);\n}\nconst stringifyScratch = new Array(4);\nfunction createPin(url, label, color, size, cache) {\n  //Use the parameters as a unique ID for caching.\n  stringifyScratch[0] = url;\n  stringifyScratch[1] = label;\n  stringifyScratch[2] = color;\n  stringifyScratch[3] = size;\n  const id = JSON.stringify(stringifyScratch);\n  const item = cache[id];\n  if (defined(item)) {\n    return item;\n  }\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n  const context2D = canvas.getContext(\"2d\");\n  drawPin(context2D, color, size);\n  if (defined(url)) {\n    const resource = Resource.createIfNeeded(url);\n\n    //If we have an image url, load it and then stamp the pin.\n    const promise = resource.fetchImage().then(function (image) {\n      drawIcon(context2D, image, size);\n      cache[id] = canvas;\n      return canvas;\n    });\n    cache[id] = promise;\n    return promise;\n  } else if (defined(label)) {\n    //If we have a label, write it to a canvas and then stamp the pin.\n    const image = writeTextToCanvas(label, {\n      font: `bold ${size}px sans-serif`\n    });\n    drawIcon(context2D, image, size);\n  }\n  cache[id] = canvas;\n  return canvas;\n}\nexport default PinBuilder;","map":{"version":3,"names":["buildModuleUrl","Color","defined","DeveloperError","Resource","writeTextToCanvas","PinBuilder","_cache","prototype","fromColor","color","size","createPin","undefined","fromUrl","url","fromMakiIconId","id","encodeURIComponent","fromText","text","colorScratch","drawPin","context2D","save","scale","fillStyle","toCssColorString","strokeStyle","brighten","lineWidth","beginPath","moveTo","lineTo","bezierCurveTo","closePath","fill","stroke","restore","drawIcon","image","imageSize","sizeX","sizeY","width","height","x","Math","round","y","globalCompositeOperation","drawImage","BLACK","fillRect","WHITE","stringifyScratch","Array","label","cache","JSON","stringify","item","canvas","document","createElement","getContext","resource","createIfNeeded","promise","fetchImage","then","font"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/PinBuilder.js"],"sourcesContent":["import buildModuleUrl from \"./buildModuleUrl.js\";\nimport Color from \"./Color.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport writeTextToCanvas from \"./writeTextToCanvas.js\";\n\n/**\n * A utility class for generating custom map pins as canvas elements.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/PinBuilder.png' width='500'/><br />\n * Example pins generated using both the maki icon set, which ships with Cesium, and single character text.\n * </div>\n *\n * @alias PinBuilder\n * @constructor\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Map%20Pins.html|Cesium Sandcastle PinBuilder Demo}\n */\nfunction PinBuilder() {\n  this._cache = {};\n}\n\n/**\n * Creates an empty pin of the specified color and size.\n *\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromColor = function (color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(undefined, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified icon, color, and size.\n *\n * @param {Resource|string} url The url of the image to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromUrl = function (url, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(url, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified {@link https://www.mapbox.com/maki/|maki} icon identifier, color, and size.\n *\n * @param {string} id The id of the maki icon to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromMakiIconId = function (id, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(\n    buildModuleUrl(`Assets/Textures/maki/${encodeURIComponent(id)}.png`),\n    undefined,\n    color,\n    size,\n    this._cache,\n  );\n};\n\n/**\n * Creates a pin with the specified text, color, and size.  The text will be sized to be as large as possible\n * while still being contained completely within the pin.\n *\n * @param {string} text The text to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromText = function (text, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(text)) {\n    throw new DeveloperError(\"text is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n\n  return createPin(undefined, text, color, size, this._cache);\n};\n\nconst colorScratch = new Color();\n\n//This function (except for the 3 commented lines) was auto-generated from an online tool,\n//http://www.professorcloud.com/svg-to-canvas/, using Assets/Textures/pin.svg as input.\n//The reason we simply can't load and draw the SVG directly to the canvas is because\n//it taints the canvas in Internet Explorer (and possibly some other browsers); making\n//it impossible to create a WebGL texture from the result.\nfunction drawPin(context2D, color, size) {\n  context2D.save();\n  context2D.scale(size / 24, size / 24); //Added to auto-generated code to scale up to desired size.\n  context2D.fillStyle = color.toCssColorString(); //Modified from auto-generated code.\n  context2D.strokeStyle = color.brighten(0.6, colorScratch).toCssColorString(); //Modified from auto-generated code.\n  context2D.lineWidth = 0.846;\n  context2D.beginPath();\n  context2D.moveTo(6.72, 0.422);\n  context2D.lineTo(17.28, 0.422);\n  context2D.bezierCurveTo(18.553, 0.422, 19.577, 1.758, 19.577, 3.415);\n  context2D.lineTo(19.577, 10.973);\n  context2D.bezierCurveTo(19.577, 12.63, 18.553, 13.966, 17.282, 13.966);\n  context2D.lineTo(14.386, 14.008);\n  context2D.lineTo(11.826, 23.578);\n  context2D.lineTo(9.614, 14.008);\n  context2D.lineTo(6.719, 13.965);\n  context2D.bezierCurveTo(5.446, 13.983, 4.422, 12.629, 4.422, 10.972);\n  context2D.lineTo(4.422, 3.416);\n  context2D.bezierCurveTo(4.423, 1.76, 5.447, 0.423, 6.718, 0.423);\n  context2D.closePath();\n  context2D.fill();\n  context2D.stroke();\n  context2D.restore();\n}\n\n//This function takes an image or canvas and uses it as a template\n//to \"stamp\" the pin with a white image outlined in black.  The color\n//values of the input image are ignored completely and only the alpha\n//values are used.\nfunction drawIcon(context2D, image, size) {\n  //Size is the largest image that looks good inside of pin box.\n  const imageSize = size / 2.5;\n  let sizeX = imageSize;\n  let sizeY = imageSize;\n\n  if (image.width > image.height) {\n    sizeY = imageSize * (image.height / image.width);\n  } else if (image.width < image.height) {\n    sizeX = imageSize * (image.width / image.height);\n  }\n\n  //x and y are the center of the pin box\n  const x = Math.round((size - sizeX) / 2);\n  const y = Math.round((7 / 24) * size - sizeY / 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x - 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y - 1, sizeX, sizeY);\n  context2D.drawImage(image, x + 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y + 1, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.BLACK.toCssColorString();\n  context2D.fillRect(x - 1, y - 1, sizeX + 2, sizeY + 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x, y, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.WHITE.toCssColorString();\n  context2D.fillRect(x - 1, y - 2, sizeX + 2, sizeY + 2);\n}\n\nconst stringifyScratch = new Array(4);\nfunction createPin(url, label, color, size, cache) {\n  //Use the parameters as a unique ID for caching.\n  stringifyScratch[0] = url;\n  stringifyScratch[1] = label;\n  stringifyScratch[2] = color;\n  stringifyScratch[3] = size;\n  const id = JSON.stringify(stringifyScratch);\n\n  const item = cache[id];\n  if (defined(item)) {\n    return item;\n  }\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n\n  const context2D = canvas.getContext(\"2d\");\n  drawPin(context2D, color, size);\n\n  if (defined(url)) {\n    const resource = Resource.createIfNeeded(url);\n\n    //If we have an image url, load it and then stamp the pin.\n    const promise = resource.fetchImage().then(function (image) {\n      drawIcon(context2D, image, size);\n      cache[id] = canvas;\n      return canvas;\n    });\n    cache[id] = promise;\n    return promise;\n  } else if (defined(label)) {\n    //If we have a label, write it to a canvas and then stamp the pin.\n    const image = writeTextToCanvas(label, {\n      font: `bold ${size}px sans-serif`,\n    });\n    drawIcon(context2D, image, size);\n  }\n\n  cache[id] = canvas;\n  return canvas;\n}\nexport default PinBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}