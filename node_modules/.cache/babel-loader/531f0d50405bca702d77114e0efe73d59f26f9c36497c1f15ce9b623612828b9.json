{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport Event from \"../Core/Event.js\";\nimport createWorldBathymetryAsync from \"../Core/createWorldBathymetryAsync.js\";\nimport createWorldTerrainAsync from \"../Core/createWorldTerrainAsync.js\";\n\n/**\n * A helper to manage async operations of a terrain provider.\n *\n * @alias Terrain\n * @constructor\n *\n * @see Terrain.fromWorldTerrain\n * @see CesiumTerrainProvider\n * @see VRTheWorldTerrainProvider\n * @see GoogleEarthEnterpriseTerrainProvider\n *\n * @example\n * // Create\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrain: new Cesium.Terrain(Cesium.CesiumTerrainProvider.fromUrl(\"https://myTestTerrain.com\"));\n * });\n *\n * @example\n * // Handle loading events\n * const terrain = new Cesium.Terrain(Cesium.CesiumTerrainProvider.fromUrl(\"https://myTestTerrain.com\"));\n *\n * scene.setTerrain(terrain);\n *\n * terrain.readyEvent.addEventListener(provider => {\n *   scene.globe.enableLighting = true;\n *\n *   terrain.provider.errorEvent.addEventListener(error => {\n *     alert(`Encountered an error while loading terrain tiles! ${error}`);\n *   });\n * });\n *\n * terrain.errorEvent.addEventListener(error => {\n *   alert(`Encountered an error while creating terrain! ${error}`);\n * });\n *\n * @param {Promise<TerrainProvider>} terrainProviderPromise A promise which resolves to a terrain provider\n */\nfunction Terrain(terrainProviderPromise) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"terrainProviderPromise\", terrainProviderPromise);\n  //>>includeEnd('debug');\n\n  this._ready = false;\n  this._provider = undefined;\n  this._errorEvent = new Event();\n  this._readyEvent = new Event();\n  handlePromise(this, terrainProviderPromise);\n}\nObject.defineProperties(Terrain.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of the thrown error.\n   * @memberof Terrain.prototype\n   * @type {Event<Terrain.ErrorEventCallback>}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets an event that is raised when the terrain provider has been successfully created. Event listeners\n   * are passed the created instance of {@link TerrainProvider}.\n   * @memberof Terrain.prototype\n   * @type {Event<Terrain.ReadyEventCallback>}\n   * @readonly\n   */\n  readyEvent: {\n    get: function () {\n      return this._readyEvent;\n    }\n  },\n  /**\n   * Returns true when the terrain provider has been successfully created. Otherwise, returns false.\n   * @memberof Terrain.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    }\n  },\n  /**\n   * The terrain provider providing surface geometry to a globe. Do not use until {@link Terrain.readyEvent} is raised.\n   * @memberof Terrain.prototype\n   *\n   * @type {TerrainProvider}\n   * @readonly\n   */\n  provider: {\n    get: function () {\n      return this._provider;\n    }\n  }\n});\n/**\n * Creates a {@link Terrain} instance for {@link https://cesium.com/content/#cesium-world-terrain|Cesium World Terrain}.\n *\n * @function\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.requestVertexNormals=false] Flag that indicates if the client should request additional lighting information from the server if available.\n * @param {Boolean} [options.requestWaterMask=false] Flag that indicates if the client should request per tile water masks from the server if available.\n * @returns {Terrain} An asynchronous helper object for a CesiumTerrainProvider\n *\n * @see Ion\n * @see createWorldTerrainAsync\n *\n * @example\n * // Create Cesium World Terrain with default settings\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrain: Cesium.Terrain.fromWorldTerrain()\n * });\n *\n * @example\n * // Create Cesium World Terrain with water and normals.\n * const viewer1 = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrain: Cesium.Terrain.fromWorldTerrain({\n *      requestWaterMask: true,\n *      requestVertexNormals: true\n *    });\n * });\n *\n * @example\n * // Handle loading events\n * const terrain = Cesium.Terrain.fromWorldTerrain();\n *\n * scene.setTerrain(terrain);\n *\n * terrain.readyEvent.addEventListener(provider => {\n *   scene.globe.enableLighting = true;\n *\n *   terrain.provider.errorEvent.addEventListener(error => {\n *     alert(`Encountered an error while loading terrain tiles! ${error}`);\n *   });\n * });\n *\n * terrain.errorEvent.addEventListener(error => {\n *   alert(`Encountered an error while creating terrain! ${error}`);\n * });\n */\nTerrain.fromWorldTerrain = function (options) {\n  return new Terrain(createWorldTerrainAsync(options));\n};\n\n/**\n * Creates a {@link Terrain} instance for {@link https://cesium.com/content/#cesium-world-bathymetry|Cesium World Bathymetry}.\n *\n * @function\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.requestVertexNormals=false] Flag that indicates if the client should request additional lighting information from the server if available.\n * @returns {Terrain} An asynchronous helper object for a CesiumTerrainProvider\n *\n * @see Ion\n * @see createWorldBathymetryAsync\n *\n * @example\n * // Create Cesium World Bathymetry with default settings\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrain: Cesium.Terrain.fromWorldBathymetry)\n * });\n *\n * @example\n * // Create Cesium World Terrain with normals.\n * const viewer1 = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrain: Cesium.Terrain.fromWorldBathymetry({\n *      requestVertexNormals: true\n *    });\n * });\n *\n * @example\n * // Handle loading events\n * const bathymetry = Cesium.Terrain.fromWorldBathymetry();\n *\n * scene.setTerrain(bathymetry);\n *\n * bathymetry.readyEvent.addEventListener(provider => {\n *   scene.globe.enableLighting = true;\n *\n *   bathymetry.provider.errorEvent.addEventListener(error => {\n *     alert(`Encountered an error while loading bathymetric terrain tiles! ${error}`);\n *   });\n * });\n *\n * bathymetry.errorEvent.addEventListener(error => {\n *   alert(`Encountered an error while creating bathymetric terrain! ${error}`);\n * });\n */\nTerrain.fromWorldBathymetry = function (options) {\n  return new Terrain(createWorldBathymetryAsync(options));\n};\nfunction handleError(errorEvent, error) {\n  if (errorEvent.numberOfListeners > 0) {\n    errorEvent.raiseEvent(error);\n  } else {\n    // Default handler is to log to the console\n    console.error(error);\n  }\n}\nasync function handlePromise(instance, promise) {\n  let provider;\n  try {\n    provider = await Promise.resolve(promise);\n    instance._provider = provider;\n    instance._ready = true;\n    instance._readyEvent.raiseEvent(provider);\n  } catch (error) {\n    handleError(instance._errorEvent, error);\n  }\n}\nexport default Terrain;\n\n/**\n * A function that is called when an error occurs.\n * @callback Terrain.ErrorEventCallback\n *\n * @this Terrain\n * @param {Error} err An object holding details about the error that occurred.\n */\n\n/**\n * A function that is called when the provider has been created\n * @callback Terrain.ReadyEventCallback\n *\n * @this Terrain\n * @param {TerrainProvider} provider The created terrain provider.\n */","map":{"version":3,"names":["Check","Event","createWorldBathymetryAsync","createWorldTerrainAsync","Terrain","terrainProviderPromise","typeOf","object","_ready","_provider","undefined","_errorEvent","_readyEvent","handlePromise","Object","defineProperties","prototype","errorEvent","get","readyEvent","ready","provider","fromWorldTerrain","options","fromWorldBathymetry","handleError","error","numberOfListeners","raiseEvent","console","instance","promise","Promise","resolve"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Terrain.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport Event from \"../Core/Event.js\";\nimport createWorldBathymetryAsync from \"../Core/createWorldBathymetryAsync.js\";\nimport createWorldTerrainAsync from \"../Core/createWorldTerrainAsync.js\";\n\n/**\n * A helper to manage async operations of a terrain provider.\n *\n * @alias Terrain\n * @constructor\n *\n * @see Terrain.fromWorldTerrain\n * @see CesiumTerrainProvider\n * @see VRTheWorldTerrainProvider\n * @see GoogleEarthEnterpriseTerrainProvider\n *\n * @example\n * // Create\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrain: new Cesium.Terrain(Cesium.CesiumTerrainProvider.fromUrl(\"https://myTestTerrain.com\"));\n * });\n *\n * @example\n * // Handle loading events\n * const terrain = new Cesium.Terrain(Cesium.CesiumTerrainProvider.fromUrl(\"https://myTestTerrain.com\"));\n *\n * scene.setTerrain(terrain);\n *\n * terrain.readyEvent.addEventListener(provider => {\n *   scene.globe.enableLighting = true;\n *\n *   terrain.provider.errorEvent.addEventListener(error => {\n *     alert(`Encountered an error while loading terrain tiles! ${error}`);\n *   });\n * });\n *\n * terrain.errorEvent.addEventListener(error => {\n *   alert(`Encountered an error while creating terrain! ${error}`);\n * });\n *\n * @param {Promise<TerrainProvider>} terrainProviderPromise A promise which resolves to a terrain provider\n */\nfunction Terrain(terrainProviderPromise) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"terrainProviderPromise\", terrainProviderPromise);\n  //>>includeEnd('debug');\n\n  this._ready = false;\n  this._provider = undefined;\n  this._errorEvent = new Event();\n  this._readyEvent = new Event();\n\n  handlePromise(this, terrainProviderPromise);\n}\n\nObject.defineProperties(Terrain.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of the thrown error.\n   * @memberof Terrain.prototype\n   * @type {Event<Terrain.ErrorEventCallback>}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the terrain provider has been successfully created. Event listeners\n   * are passed the created instance of {@link TerrainProvider}.\n   * @memberof Terrain.prototype\n   * @type {Event<Terrain.ReadyEventCallback>}\n   * @readonly\n   */\n  readyEvent: {\n    get: function () {\n      return this._readyEvent;\n    },\n  },\n\n  /**\n   * Returns true when the terrain provider has been successfully created. Otherwise, returns false.\n   * @memberof Terrain.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * The terrain provider providing surface geometry to a globe. Do not use until {@link Terrain.readyEvent} is raised.\n   * @memberof Terrain.prototype\n   *\n   * @type {TerrainProvider}\n   * @readonly\n   */\n  provider: {\n    get: function () {\n      return this._provider;\n    },\n  },\n});\n/**\n * Creates a {@link Terrain} instance for {@link https://cesium.com/content/#cesium-world-terrain|Cesium World Terrain}.\n *\n * @function\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.requestVertexNormals=false] Flag that indicates if the client should request additional lighting information from the server if available.\n * @param {Boolean} [options.requestWaterMask=false] Flag that indicates if the client should request per tile water masks from the server if available.\n * @returns {Terrain} An asynchronous helper object for a CesiumTerrainProvider\n *\n * @see Ion\n * @see createWorldTerrainAsync\n *\n * @example\n * // Create Cesium World Terrain with default settings\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrain: Cesium.Terrain.fromWorldTerrain()\n * });\n *\n * @example\n * // Create Cesium World Terrain with water and normals.\n * const viewer1 = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrain: Cesium.Terrain.fromWorldTerrain({\n *      requestWaterMask: true,\n *      requestVertexNormals: true\n *    });\n * });\n *\n * @example\n * // Handle loading events\n * const terrain = Cesium.Terrain.fromWorldTerrain();\n *\n * scene.setTerrain(terrain);\n *\n * terrain.readyEvent.addEventListener(provider => {\n *   scene.globe.enableLighting = true;\n *\n *   terrain.provider.errorEvent.addEventListener(error => {\n *     alert(`Encountered an error while loading terrain tiles! ${error}`);\n *   });\n * });\n *\n * terrain.errorEvent.addEventListener(error => {\n *   alert(`Encountered an error while creating terrain! ${error}`);\n * });\n */\nTerrain.fromWorldTerrain = function (options) {\n  return new Terrain(createWorldTerrainAsync(options));\n};\n\n/**\n * Creates a {@link Terrain} instance for {@link https://cesium.com/content/#cesium-world-bathymetry|Cesium World Bathymetry}.\n *\n * @function\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.requestVertexNormals=false] Flag that indicates if the client should request additional lighting information from the server if available.\n * @returns {Terrain} An asynchronous helper object for a CesiumTerrainProvider\n *\n * @see Ion\n * @see createWorldBathymetryAsync\n *\n * @example\n * // Create Cesium World Bathymetry with default settings\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrain: Cesium.Terrain.fromWorldBathymetry)\n * });\n *\n * @example\n * // Create Cesium World Terrain with normals.\n * const viewer1 = new Cesium.Viewer(\"cesiumContainer\", {\n *   terrain: Cesium.Terrain.fromWorldBathymetry({\n *      requestVertexNormals: true\n *    });\n * });\n *\n * @example\n * // Handle loading events\n * const bathymetry = Cesium.Terrain.fromWorldBathymetry();\n *\n * scene.setTerrain(bathymetry);\n *\n * bathymetry.readyEvent.addEventListener(provider => {\n *   scene.globe.enableLighting = true;\n *\n *   bathymetry.provider.errorEvent.addEventListener(error => {\n *     alert(`Encountered an error while loading bathymetric terrain tiles! ${error}`);\n *   });\n * });\n *\n * bathymetry.errorEvent.addEventListener(error => {\n *   alert(`Encountered an error while creating bathymetric terrain! ${error}`);\n * });\n */\nTerrain.fromWorldBathymetry = function (options) {\n  return new Terrain(createWorldBathymetryAsync(options));\n};\n\nfunction handleError(errorEvent, error) {\n  if (errorEvent.numberOfListeners > 0) {\n    errorEvent.raiseEvent(error);\n  } else {\n    // Default handler is to log to the console\n    console.error(error);\n  }\n}\n\nasync function handlePromise(instance, promise) {\n  let provider;\n  try {\n    provider = await Promise.resolve(promise);\n    instance._provider = provider;\n    instance._ready = true;\n    instance._readyEvent.raiseEvent(provider);\n  } catch (error) {\n    handleError(instance._errorEvent, error);\n  }\n}\n\nexport default Terrain;\n\n/**\n * A function that is called when an error occurs.\n * @callback Terrain.ErrorEventCallback\n *\n * @this Terrain\n * @param {Error} err An object holding details about the error that occurred.\n */\n\n/**\n * A function that is called when the provider has been created\n * @callback Terrain.ReadyEventCallback\n *\n * @this Terrain\n * @param {TerrainProvider} provider The created terrain provider.\n */\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,0BAA0B,MAAM,uCAAuC;AAC9E,OAAOC,uBAAuB,MAAM,oCAAoC;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,sBAAsB,EAAE;EACvC;EACAL,KAAK,CAACM,MAAM,CAACC,MAAM,CAAC,wBAAwB,EAAEF,sBAAsB,CAAC;EACrE;;EAEA,IAAI,CAACG,MAAM,GAAG,KAAK;EACnB,IAAI,CAACC,SAAS,GAAGC,SAAS;EAC1B,IAAI,CAACC,WAAW,GAAG,IAAIV,KAAK,CAAC,CAAC;EAC9B,IAAI,CAACW,WAAW,GAAG,IAAIX,KAAK,CAAC,CAAC;EAE9BY,aAAa,CAAC,IAAI,EAAER,sBAAsB,CAAC;AAC7C;AAEAS,MAAM,CAACC,gBAAgB,CAACX,OAAO,CAACY,SAAS,EAAE;EACzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE;IACVC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACP,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEQ,UAAU,EAAE;IACVD,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACN,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEQ,KAAK,EAAE;IACLF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACV,MAAM;IACpB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEa,QAAQ,EAAE;IACRH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACT,SAAS;IACvB;EACF;AACF,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,OAAO,CAACkB,gBAAgB,GAAG,UAAUC,OAAO,EAAE;EAC5C,OAAO,IAAInB,OAAO,CAACD,uBAAuB,CAACoB,OAAO,CAAC,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,OAAO,CAACoB,mBAAmB,GAAG,UAAUD,OAAO,EAAE;EAC/C,OAAO,IAAInB,OAAO,CAACF,0BAA0B,CAACqB,OAAO,CAAC,CAAC;AACzD,CAAC;AAED,SAASE,WAAWA,CAACR,UAAU,EAAES,KAAK,EAAE;EACtC,IAAIT,UAAU,CAACU,iBAAiB,GAAG,CAAC,EAAE;IACpCV,UAAU,CAACW,UAAU,CAACF,KAAK,CAAC;EAC9B,CAAC,MAAM;IACL;IACAG,OAAO,CAACH,KAAK,CAACA,KAAK,CAAC;EACtB;AACF;AAEA,eAAeb,aAAaA,CAACiB,QAAQ,EAAEC,OAAO,EAAE;EAC9C,IAAIV,QAAQ;EACZ,IAAI;IACFA,QAAQ,GAAG,MAAMW,OAAO,CAACC,OAAO,CAACF,OAAO,CAAC;IACzCD,QAAQ,CAACrB,SAAS,GAAGY,QAAQ;IAC7BS,QAAQ,CAACtB,MAAM,GAAG,IAAI;IACtBsB,QAAQ,CAAClB,WAAW,CAACgB,UAAU,CAACP,QAAQ,CAAC;EAC3C,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdD,WAAW,CAACK,QAAQ,CAACnB,WAAW,EAAEe,KAAK,CAAC;EAC1C;AACF;AAEA,eAAetB,OAAO;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}