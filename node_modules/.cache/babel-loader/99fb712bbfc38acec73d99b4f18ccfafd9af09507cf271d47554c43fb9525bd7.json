{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Array implementation of a heap.\n *\n * @alias Heap\n * @constructor\n * @private\n *\n * @param {object} options Object with the following properties:\n * @param {Heap.ComparatorCallback} options.comparator The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n */\nfunction Heap(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.defined(\"options.comparator\", options.comparator);\n  //>>includeEnd('debug');\n\n  this._comparator = options.comparator;\n  this._array = [];\n  this._length = 0;\n  this._maximumLength = undefined;\n}\nObject.defineProperties(Heap.prototype, {\n  /**\n   * Gets the length of the heap.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    }\n  },\n  /**\n   * Gets the internal array.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Array}\n   * @readonly\n   */\n  internalArray: {\n    get: function () {\n      return this._array;\n    }\n  },\n  /**\n   * Gets and sets the maximum length of the heap.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {number}\n   */\n  maximumLength: {\n    get: function () {\n      return this._maximumLength;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"maximumLength\", value, 0);\n      //>>includeEnd('debug');\n      const originalLength = this._length;\n      if (value < originalLength) {\n        const array = this._array;\n        // Remove trailing references\n        for (let i = value; i < originalLength; ++i) {\n          array[i] = undefined;\n        }\n        this._length = value;\n        array.length = value;\n      }\n      this._maximumLength = value;\n    }\n  },\n  /**\n   * The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Heap.ComparatorCallback}\n   */\n  comparator: {\n    get: function () {\n      return this._comparator;\n    }\n  }\n});\nfunction swap(array, a, b) {\n  const temp = array[a];\n  array[a] = array[b];\n  array[b] = temp;\n}\n\n/**\n * Resizes the internal array of the heap.\n *\n * @param {number} [length] The length to resize internal array to. Defaults to the current length of the heap.\n */\nHeap.prototype.reserve = function (length) {\n  length = defaultValue(length, this._length);\n  this._array.length = length;\n};\n\n/**\n * Update the heap so that index and all descendants satisfy the heap property.\n *\n * @param {number} [index=0] The starting index to heapify from.\n */\nHeap.prototype.heapify = function (index) {\n  index = defaultValue(index, 0);\n  const length = this._length;\n  const comparator = this._comparator;\n  const array = this._array;\n  let candidate = -1;\n  let inserting = true;\n  while (inserting) {\n    const right = 2 * (index + 1);\n    const left = right - 1;\n    if (left < length && comparator(array[left], array[index]) < 0) {\n      candidate = left;\n    } else {\n      candidate = index;\n    }\n    if (right < length && comparator(array[right], array[candidate]) < 0) {\n      candidate = right;\n    }\n    if (candidate !== index) {\n      swap(array, candidate, index);\n      index = candidate;\n    } else {\n      inserting = false;\n    }\n  }\n};\n\n/**\n * Resort the heap.\n */\nHeap.prototype.resort = function () {\n  const length = this._length;\n  for (let i = Math.ceil(length / 2); i >= 0; --i) {\n    this.heapify(i);\n  }\n};\n\n/**\n * Insert an element into the heap. If the length would grow greater than maximumLength\n * of the heap, extra elements are removed.\n *\n * @param {*} element The element to insert\n *\n * @return {*} The element that was removed from the heap if the heap is at full capacity.\n */\nHeap.prototype.insert = function (element) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"element\", element);\n  //>>includeEnd('debug');\n\n  const array = this._array;\n  const comparator = this._comparator;\n  const maximumLength = this._maximumLength;\n  let index = this._length++;\n  if (index < array.length) {\n    array[index] = element;\n  } else {\n    array.push(element);\n  }\n  while (index !== 0) {\n    const parent = Math.floor((index - 1) / 2);\n    if (comparator(array[index], array[parent]) < 0) {\n      swap(array, index, parent);\n      index = parent;\n    } else {\n      break;\n    }\n  }\n  let removedElement;\n  if (defined(maximumLength) && this._length > maximumLength) {\n    removedElement = array[maximumLength];\n    this._length = maximumLength;\n  }\n  return removedElement;\n};\n\n/**\n * Remove the element specified by index from the heap and return it.\n *\n * @param {number} [index=0] The index to remove.\n * @returns {*} The specified element of the heap.\n */\nHeap.prototype.pop = function (index) {\n  index = defaultValue(index, 0);\n  if (this._length === 0) {\n    return undefined;\n  }\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.lessThan(\"index\", index, this._length);\n  //>>includeEnd('debug');\n\n  const array = this._array;\n  const root = array[index];\n  swap(array, index, --this._length);\n  this.heapify(index);\n  array[this._length] = undefined; // Remove trailing reference\n  return root;\n};\n\n/**\n * The comparator to use for the heap.\n * @callback Heap.ComparatorCallback\n * @param {*} a An element in the heap.\n * @param {*} b An element in the heap.\n * @returns {number} If the result of the comparison is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n */\nexport default Heap;","map":{"version":3,"names":["Check","defaultValue","defined","Heap","options","typeOf","object","comparator","_comparator","_array","_length","_maximumLength","undefined","Object","defineProperties","prototype","length","get","internalArray","maximumLength","set","value","number","greaterThanOrEquals","originalLength","array","i","swap","a","b","temp","reserve","heapify","index","candidate","inserting","right","left","resort","Math","ceil","insert","element","push","parent","floor","removedElement","pop","lessThan","root"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/Heap.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Array implementation of a heap.\n *\n * @alias Heap\n * @constructor\n * @private\n *\n * @param {object} options Object with the following properties:\n * @param {Heap.ComparatorCallback} options.comparator The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n */\nfunction Heap(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.defined(\"options.comparator\", options.comparator);\n  //>>includeEnd('debug');\n\n  this._comparator = options.comparator;\n  this._array = [];\n  this._length = 0;\n  this._maximumLength = undefined;\n}\n\nObject.defineProperties(Heap.prototype, {\n  /**\n   * Gets the length of the heap.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n  },\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Array}\n   * @readonly\n   */\n  internalArray: {\n    get: function () {\n      return this._array;\n    },\n  },\n\n  /**\n   * Gets and sets the maximum length of the heap.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {number}\n   */\n  maximumLength: {\n    get: function () {\n      return this._maximumLength;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"maximumLength\", value, 0);\n      //>>includeEnd('debug');\n      const originalLength = this._length;\n      if (value < originalLength) {\n        const array = this._array;\n        // Remove trailing references\n        for (let i = value; i < originalLength; ++i) {\n          array[i] = undefined;\n        }\n        this._length = value;\n        array.length = value;\n      }\n      this._maximumLength = value;\n    },\n  },\n\n  /**\n   * The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Heap.ComparatorCallback}\n   */\n  comparator: {\n    get: function () {\n      return this._comparator;\n    },\n  },\n});\n\nfunction swap(array, a, b) {\n  const temp = array[a];\n  array[a] = array[b];\n  array[b] = temp;\n}\n\n/**\n * Resizes the internal array of the heap.\n *\n * @param {number} [length] The length to resize internal array to. Defaults to the current length of the heap.\n */\nHeap.prototype.reserve = function (length) {\n  length = defaultValue(length, this._length);\n  this._array.length = length;\n};\n\n/**\n * Update the heap so that index and all descendants satisfy the heap property.\n *\n * @param {number} [index=0] The starting index to heapify from.\n */\nHeap.prototype.heapify = function (index) {\n  index = defaultValue(index, 0);\n  const length = this._length;\n  const comparator = this._comparator;\n  const array = this._array;\n  let candidate = -1;\n  let inserting = true;\n\n  while (inserting) {\n    const right = 2 * (index + 1);\n    const left = right - 1;\n\n    if (left < length && comparator(array[left], array[index]) < 0) {\n      candidate = left;\n    } else {\n      candidate = index;\n    }\n\n    if (right < length && comparator(array[right], array[candidate]) < 0) {\n      candidate = right;\n    }\n    if (candidate !== index) {\n      swap(array, candidate, index);\n      index = candidate;\n    } else {\n      inserting = false;\n    }\n  }\n};\n\n/**\n * Resort the heap.\n */\nHeap.prototype.resort = function () {\n  const length = this._length;\n  for (let i = Math.ceil(length / 2); i >= 0; --i) {\n    this.heapify(i);\n  }\n};\n\n/**\n * Insert an element into the heap. If the length would grow greater than maximumLength\n * of the heap, extra elements are removed.\n *\n * @param {*} element The element to insert\n *\n * @return {*} The element that was removed from the heap if the heap is at full capacity.\n */\nHeap.prototype.insert = function (element) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"element\", element);\n  //>>includeEnd('debug');\n\n  const array = this._array;\n  const comparator = this._comparator;\n  const maximumLength = this._maximumLength;\n\n  let index = this._length++;\n  if (index < array.length) {\n    array[index] = element;\n  } else {\n    array.push(element);\n  }\n\n  while (index !== 0) {\n    const parent = Math.floor((index - 1) / 2);\n    if (comparator(array[index], array[parent]) < 0) {\n      swap(array, index, parent);\n      index = parent;\n    } else {\n      break;\n    }\n  }\n\n  let removedElement;\n\n  if (defined(maximumLength) && this._length > maximumLength) {\n    removedElement = array[maximumLength];\n    this._length = maximumLength;\n  }\n\n  return removedElement;\n};\n\n/**\n * Remove the element specified by index from the heap and return it.\n *\n * @param {number} [index=0] The index to remove.\n * @returns {*} The specified element of the heap.\n */\nHeap.prototype.pop = function (index) {\n  index = defaultValue(index, 0);\n  if (this._length === 0) {\n    return undefined;\n  }\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.lessThan(\"index\", index, this._length);\n  //>>includeEnd('debug');\n\n  const array = this._array;\n  const root = array[index];\n  swap(array, index, --this._length);\n  this.heapify(index);\n  array[this._length] = undefined; // Remove trailing reference\n  return root;\n};\n\n/**\n * The comparator to use for the heap.\n * @callback Heap.ComparatorCallback\n * @param {*} a An element in the heap.\n * @param {*} b An element in the heap.\n * @returns {number} If the result of the comparison is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n */\nexport default Heap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}