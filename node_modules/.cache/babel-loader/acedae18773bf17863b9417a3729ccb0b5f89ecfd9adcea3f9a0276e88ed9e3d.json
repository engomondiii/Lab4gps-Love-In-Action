{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Provides voxel data. Intended to be used with {@link VoxelPrimitive}.\n * This type describes an interface and is not intended to be instantiated directly.\n *\n * @alias VoxelProvider\n * @constructor\n *\n * @see Cesium3DTilesVoxelProvider\n * @see VoxelPrimitive\n * @see VoxelShapeType\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction VoxelProvider() {\n  DeveloperError.throwInstantiationError();\n}\nObject.defineProperties(VoxelProvider.prototype, {\n  /**\n   * A transform from local space to global space. If undefined, the identity matrix will be used instead.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Matrix4|undefined}\n   * @readonly\n   */\n  globalTransform: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * A transform from shape space to local space. If undefined, the identity matrix will be used instead.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Matrix4|undefined}\n   * @readonly\n   */\n  shapeTransform: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the {@link VoxelShapeType}\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {VoxelShapeType}\n   * @readonly\n   */\n  shape: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the minimum bounds.\n   * If undefined, the shape's default minimum bounds will be used instead.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Cartesian3|undefined}\n   * @readonly\n   */\n  minBounds: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the maximum bounds.\n   * If undefined, the shape's default maximum bounds will be used instead.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Cartesian3|undefined}\n   * @readonly\n   */\n  maxBounds: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the number of voxels per dimension of a tile. This is the same for all tiles in the dataset.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Cartesian3}\n   * @readonly\n   */\n  dimensions: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the number of padding voxels before the tile. This improves rendering quality when sampling the edge of a tile, but it increases memory usage.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Cartesian3|undefined}\n   * @readonly\n   */\n  paddingBefore: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the number of padding voxels after the tile. This improves rendering quality when sampling the edge of a tile, but it increases memory usage.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Cartesian3|undefined}\n   * @readonly\n   */\n  paddingAfter: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the metadata names.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {string[]}\n   * @readonly\n   */\n  names: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the metadata types.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {MetadataType[]}\n   * @readonly\n   */\n  types: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the metadata component types.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {MetadataComponentType[]}\n   * @readonly\n   */\n  componentTypes: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the metadata minimum values.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {number[][]|undefined}\n   * @readonly\n   */\n  minimumValues: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the metadata maximum values.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {number[][]|undefined}\n   * @readonly\n   */\n  maximumValues: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * The maximum number of tiles that exist for this provider. This value is used as a hint to the voxel renderer to allocate an appropriate amount of GPU memory. If this value is not known it can be undefined.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumTileCount: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the number of keyframes in the dataset.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  keyframeCount: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the {@link TimeIntervalCollection} for the dataset, or undefined if it doesn't have timestamps.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {TimeIntervalCollection}\n   * @readonly\n   * @private\n   */\n  timeIntervalCollection: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n\n/**\n * Requests the data for a given tile. The data is a flattened 3D array ordered by X, then Y, then Z.\n * This function should not be called before {@link VoxelProvider#ready} returns true.\n * @function\n *\n * @param {object} [options] Object with the following properties:\n * @param {number} [options.tileLevel=0] The tile's level.\n * @param {number} [options.tileX=0] The tile's X coordinate.\n * @param {number} [options.tileY=0] The tile's Y coordinate.\n * @param {number} [options.tileZ=0] The tile's Z coordinate.\n * @privateparam {number} [options.keyframe=0] The requested keyframe.\n * @returns {Promise<Array[]>|undefined} A promise to an array of typed arrays containing the requested voxel data or undefined if there was a problem loading the data.\n */\nVoxelProvider.prototype.requestData = DeveloperError.throwInstantiationError;\nexport default VoxelProvider;","map":{"version":3,"names":["DeveloperError","VoxelProvider","throwInstantiationError","Object","defineProperties","prototype","globalTransform","get","shapeTransform","shape","minBounds","maxBounds","dimensions","paddingBefore","paddingAfter","names","types","componentTypes","minimumValues","maximumValues","maximumTileCount","keyframeCount","timeIntervalCollection","requestData"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/VoxelProvider.js"],"sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Provides voxel data. Intended to be used with {@link VoxelPrimitive}.\n * This type describes an interface and is not intended to be instantiated directly.\n *\n * @alias VoxelProvider\n * @constructor\n *\n * @see Cesium3DTilesVoxelProvider\n * @see VoxelPrimitive\n * @see VoxelShapeType\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction VoxelProvider() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(VoxelProvider.prototype, {\n  /**\n   * A transform from local space to global space. If undefined, the identity matrix will be used instead.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Matrix4|undefined}\n   * @readonly\n   */\n  globalTransform: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * A transform from shape space to local space. If undefined, the identity matrix will be used instead.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Matrix4|undefined}\n   * @readonly\n   */\n  shapeTransform: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the {@link VoxelShapeType}\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {VoxelShapeType}\n   * @readonly\n   */\n  shape: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the minimum bounds.\n   * If undefined, the shape's default minimum bounds will be used instead.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Cartesian3|undefined}\n   * @readonly\n   */\n  minBounds: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the maximum bounds.\n   * If undefined, the shape's default maximum bounds will be used instead.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Cartesian3|undefined}\n   * @readonly\n   */\n  maxBounds: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the number of voxels per dimension of a tile. This is the same for all tiles in the dataset.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Cartesian3}\n   * @readonly\n   */\n  dimensions: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the number of padding voxels before the tile. This improves rendering quality when sampling the edge of a tile, but it increases memory usage.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Cartesian3|undefined}\n   * @readonly\n   */\n  paddingBefore: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the number of padding voxels after the tile. This improves rendering quality when sampling the edge of a tile, but it increases memory usage.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {Cartesian3|undefined}\n   * @readonly\n   */\n  paddingAfter: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the metadata names.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {string[]}\n   * @readonly\n   */\n  names: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the metadata types.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {MetadataType[]}\n   * @readonly\n   */\n  types: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the metadata component types.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {MetadataComponentType[]}\n   * @readonly\n   */\n  componentTypes: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the metadata minimum values.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {number[][]|undefined}\n   * @readonly\n   */\n  minimumValues: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the metadata maximum values.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {number[][]|undefined}\n   * @readonly\n   */\n  maximumValues: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * The maximum number of tiles that exist for this provider. This value is used as a hint to the voxel renderer to allocate an appropriate amount of GPU memory. If this value is not known it can be undefined.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumTileCount: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the number of keyframes in the dataset.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  keyframeCount: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the {@link TimeIntervalCollection} for the dataset, or undefined if it doesn't have timestamps.\n   * This should not be called before {@link VoxelProvider#ready} returns true.\n   *\n   * @memberof VoxelProvider.prototype\n   * @type {TimeIntervalCollection}\n   * @readonly\n   * @private\n   */\n  timeIntervalCollection: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Requests the data for a given tile. The data is a flattened 3D array ordered by X, then Y, then Z.\n * This function should not be called before {@link VoxelProvider#ready} returns true.\n * @function\n *\n * @param {object} [options] Object with the following properties:\n * @param {number} [options.tileLevel=0] The tile's level.\n * @param {number} [options.tileX=0] The tile's X coordinate.\n * @param {number} [options.tileY=0] The tile's Y coordinate.\n * @param {number} [options.tileZ=0] The tile's Z coordinate.\n * @privateparam {number} [options.keyframe=0] The requested keyframe.\n * @returns {Promise<Array[]>|undefined} A promise to an array of typed arrays containing the requested voxel data or undefined if there was a problem loading the data.\n */\nVoxelProvider.prototype.requestData = DeveloperError.throwInstantiationError;\n\nexport default VoxelProvider;\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,2BAA2B;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAA,EAAG;EACvBD,cAAc,CAACE,uBAAuB,CAAC,CAAC;AAC1C;AAEAC,MAAM,CAACC,gBAAgB,CAACH,aAAa,CAACI,SAAS,EAAE;EAC/C;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,eAAe,EAAE;IACfC,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEM,cAAc,EAAE;IACdD,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,KAAK,EAAE;IACLF,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,SAAS,EAAE;IACTH,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,SAAS,EAAE;IACTJ,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEU,UAAU,EAAE;IACVL,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEW,aAAa,EAAE;IACbN,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEY,YAAY,EAAE;IACZP,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,KAAK,EAAE;IACLR,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,KAAK,EAAE;IACLT,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEe,cAAc,EAAE;IACdV,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEgB,aAAa,EAAE;IACbX,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEiB,aAAa,EAAE;IACbZ,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEkB,gBAAgB,EAAE;IAChBb,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmB,aAAa,EAAE;IACbd,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,sBAAsB,EAAE;IACtBf,GAAG,EAAEP,cAAc,CAACE;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,aAAa,CAACI,SAAS,CAACkB,WAAW,GAAGvB,cAAc,CAACE,uBAAuB;AAE5E,eAAeD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}