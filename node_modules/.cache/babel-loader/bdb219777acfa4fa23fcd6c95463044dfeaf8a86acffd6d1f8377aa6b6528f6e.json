{"ast":null,"code":"import ColorBlendMode from \"../ColorBlendMode.js\";\nimport CPUStylingStageVS from \"../../Shaders/Model/CPUStylingStageVS.js\";\nimport CPUStylingStageFS from \"../../Shaders/Model/CPUStylingStageFS.js\";\nimport defined from \"../../Core/defined.js\";\nimport ModelColorPipelineStage from \"./ModelColorPipelineStage.js\";\nimport Pass from \"../../Renderer/Pass.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\n\n/**\n * The CPU styling stage is responsible for ensuring that the feature's color\n * is applied at runtime.\n *\n * @namespace CPUStylingPipelineStage\n *\n * @private\n */\nconst CPUStylingPipelineStage = {\n  name: \"CPUStylingPipelineStage\" // Helps with debugging\n};\n\n/**\n * Processes a primitive. This modifies the following parts of the render resources:\n * <ul>\n *  <li>adds the styling code to both the vertex and fragment shaders</li>\n *  <li>adds the define to trigger the stage's shader functions</li>\n *  <li>adds a uniform with the model's color blend mode and amount</li>\n * </ul>\n *\n * @param {PrimitiveRenderResources} renderResources The render resources for this primitive.\n * @param {ModelComponents.Primitive} primitive The primitive.\n * @param {FrameState} frameState The frame state.\n *\n * @private\n */\nCPUStylingPipelineStage.process = function (renderResources, primitive, frameState) {\n  const model = renderResources.model;\n  const shaderBuilder = renderResources.shaderBuilder;\n  shaderBuilder.addVertexLines(CPUStylingStageVS);\n  shaderBuilder.addFragmentLines(CPUStylingStageFS);\n  shaderBuilder.addDefine(\"USE_CPU_STYLING\", undefined, ShaderDestination.BOTH);\n\n  // These uniforms may have already been added by the ModelColorStage\n  // if a static color is applied.\n  if (!defined(model.color)) {\n    shaderBuilder.addUniform(\"float\", ModelColorPipelineStage.COLOR_BLEND_UNIFORM_NAME, ShaderDestination.FRAGMENT);\n    renderResources.uniformMap[ModelColorPipelineStage.COLOR_BLEND_UNIFORM_NAME] = function () {\n      return ColorBlendMode.getColorBlend(model.colorBlendMode, model.colorBlendAmount);\n    };\n  }\n  shaderBuilder.addUniform(\"bool\", \"model_commandTranslucent\", ShaderDestination.BOTH);\n  renderResources.uniformMap.model_commandTranslucent = function () {\n    // Always check the current value, because custom shaders may\n    // change the value with the translucencyMode parameter\n    return renderResources.alphaOptions.pass === Pass.TRANSLUCENT;\n  };\n};\nexport default CPUStylingPipelineStage;","map":{"version":3,"names":["ColorBlendMode","CPUStylingStageVS","CPUStylingStageFS","defined","ModelColorPipelineStage","Pass","ShaderDestination","CPUStylingPipelineStage","name","process","renderResources","primitive","frameState","model","shaderBuilder","addVertexLines","addFragmentLines","addDefine","undefined","BOTH","color","addUniform","COLOR_BLEND_UNIFORM_NAME","FRAGMENT","uniformMap","getColorBlend","colorBlendMode","colorBlendAmount","model_commandTranslucent","alphaOptions","pass","TRANSLUCENT"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/CPUStylingPipelineStage.js"],"sourcesContent":["import ColorBlendMode from \"../ColorBlendMode.js\";\nimport CPUStylingStageVS from \"../../Shaders/Model/CPUStylingStageVS.js\";\nimport CPUStylingStageFS from \"../../Shaders/Model/CPUStylingStageFS.js\";\nimport defined from \"../../Core/defined.js\";\nimport ModelColorPipelineStage from \"./ModelColorPipelineStage.js\";\nimport Pass from \"../../Renderer/Pass.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\n\n/**\n * The CPU styling stage is responsible for ensuring that the feature's color\n * is applied at runtime.\n *\n * @namespace CPUStylingPipelineStage\n *\n * @private\n */\nconst CPUStylingPipelineStage = {\n  name: \"CPUStylingPipelineStage\", // Helps with debugging\n};\n\n/**\n * Processes a primitive. This modifies the following parts of the render resources:\n * <ul>\n *  <li>adds the styling code to both the vertex and fragment shaders</li>\n *  <li>adds the define to trigger the stage's shader functions</li>\n *  <li>adds a uniform with the model's color blend mode and amount</li>\n * </ul>\n *\n * @param {PrimitiveRenderResources} renderResources The render resources for this primitive.\n * @param {ModelComponents.Primitive} primitive The primitive.\n * @param {FrameState} frameState The frame state.\n *\n * @private\n */\nCPUStylingPipelineStage.process = function (\n  renderResources,\n  primitive,\n  frameState,\n) {\n  const model = renderResources.model;\n  const shaderBuilder = renderResources.shaderBuilder;\n\n  shaderBuilder.addVertexLines(CPUStylingStageVS);\n  shaderBuilder.addFragmentLines(CPUStylingStageFS);\n  shaderBuilder.addDefine(\"USE_CPU_STYLING\", undefined, ShaderDestination.BOTH);\n\n  // These uniforms may have already been added by the ModelColorStage\n  // if a static color is applied.\n  if (!defined(model.color)) {\n    shaderBuilder.addUniform(\n      \"float\",\n      ModelColorPipelineStage.COLOR_BLEND_UNIFORM_NAME,\n      ShaderDestination.FRAGMENT,\n    );\n    renderResources.uniformMap[\n      ModelColorPipelineStage.COLOR_BLEND_UNIFORM_NAME\n    ] = function () {\n      return ColorBlendMode.getColorBlend(\n        model.colorBlendMode,\n        model.colorBlendAmount,\n      );\n    };\n  }\n\n  shaderBuilder.addUniform(\n    \"bool\",\n    \"model_commandTranslucent\",\n    ShaderDestination.BOTH,\n  );\n  renderResources.uniformMap.model_commandTranslucent = function () {\n    // Always check the current value, because custom shaders may\n    // change the value with the translucencyMode parameter\n    return renderResources.alphaOptions.pass === Pass.TRANSLUCENT;\n  };\n};\n\nexport default CPUStylingPipelineStage;\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,sBAAsB;AACjD,OAAOC,iBAAiB,MAAM,0CAA0C;AACxE,OAAOC,iBAAiB,MAAM,0CAA0C;AACxE,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,uBAAuB,MAAM,8BAA8B;AAClE,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,iBAAiB,MAAM,qCAAqC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG;EAC9BC,IAAI,EAAE,yBAAyB,CAAE;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,uBAAuB,CAACE,OAAO,GAAG,UAChCC,eAAe,EACfC,SAAS,EACTC,UAAU,EACV;EACA,MAAMC,KAAK,GAAGH,eAAe,CAACG,KAAK;EACnC,MAAMC,aAAa,GAAGJ,eAAe,CAACI,aAAa;EAEnDA,aAAa,CAACC,cAAc,CAACd,iBAAiB,CAAC;EAC/Ca,aAAa,CAACE,gBAAgB,CAACd,iBAAiB,CAAC;EACjDY,aAAa,CAACG,SAAS,CAAC,iBAAiB,EAAEC,SAAS,EAAEZ,iBAAiB,CAACa,IAAI,CAAC;;EAE7E;EACA;EACA,IAAI,CAAChB,OAAO,CAACU,KAAK,CAACO,KAAK,CAAC,EAAE;IACzBN,aAAa,CAACO,UAAU,CACtB,OAAO,EACPjB,uBAAuB,CAACkB,wBAAwB,EAChDhB,iBAAiB,CAACiB,QACpB,CAAC;IACDb,eAAe,CAACc,UAAU,CACxBpB,uBAAuB,CAACkB,wBAAwB,CACjD,GAAG,YAAY;MACd,OAAOtB,cAAc,CAACyB,aAAa,CACjCZ,KAAK,CAACa,cAAc,EACpBb,KAAK,CAACc,gBACR,CAAC;IACH,CAAC;EACH;EAEAb,aAAa,CAACO,UAAU,CACtB,MAAM,EACN,0BAA0B,EAC1Bf,iBAAiB,CAACa,IACpB,CAAC;EACDT,eAAe,CAACc,UAAU,CAACI,wBAAwB,GAAG,YAAY;IAChE;IACA;IACA,OAAOlB,eAAe,CAACmB,YAAY,CAACC,IAAI,KAAKzB,IAAI,CAAC0B,WAAW;EAC/D,CAAC;AACH,CAAC;AAED,eAAexB,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}