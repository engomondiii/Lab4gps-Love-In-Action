{"ast":null,"code":"import Uri from \"urijs\";\nimport buildModuleUrl from \"./buildModuleUrl.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport destroyObject from \"./destroyObject.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Event from \"./Event.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport isCrossOriginUrl from \"./isCrossOriginUrl.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nfunction canTransferArrayBuffer() {\n  if (!defined(TaskProcessor._canTransferArrayBuffer)) {\n    const worker = createWorker(\"transferTypedArrayTest\");\n    worker.postMessage = defaultValue(worker.webkitPostMessage, worker.postMessage);\n    const value = 99;\n    const array = new Int8Array([value]);\n    try {\n      // postMessage might fail with a DataCloneError\n      // if transferring array buffers is not supported.\n      worker.postMessage({\n        array: array\n      }, [array.buffer]);\n    } catch (e) {\n      TaskProcessor._canTransferArrayBuffer = false;\n      return TaskProcessor._canTransferArrayBuffer;\n    }\n    TaskProcessor._canTransferArrayBuffer = new Promise(resolve => {\n      worker.onmessage = function (event) {\n        const array = event.data.array;\n\n        // some versions of Firefox silently fail to transfer typed arrays.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=841904\n        // Check to make sure the value round-trips successfully.\n        const result = defined(array) && array[0] === value;\n        resolve(result);\n        worker.terminate();\n        TaskProcessor._canTransferArrayBuffer = result;\n      };\n    });\n  }\n  return TaskProcessor._canTransferArrayBuffer;\n}\nconst taskCompletedEvent = new Event();\nfunction urlFromScript(script) {\n  let blob;\n  try {\n    blob = new Blob([script], {\n      type: \"application/javascript\"\n    });\n  } catch (e) {\n    const BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n    const blobBuilder = new BlobBuilder();\n    blobBuilder.append(script);\n    blob = blobBuilder.getBlob(\"application/javascript\");\n  }\n  const URL = window.URL || window.webkitURL;\n  return URL.createObjectURL(blob);\n}\nfunction createWorker(url) {\n  const uri = new Uri(url);\n  const isUri = uri.scheme().length !== 0 && uri.fragment().length === 0;\n  const moduleID = url.replace(/\\.js$/, \"\");\n  const options = {};\n  let workerPath;\n  let crossOriginUrl;\n\n  // If we are provided a fully resolved URL, check it is cross-origin\n  // Or if provided a module ID, check the full absolute URL instead.\n  if (isCrossOriginUrl(url)) {\n    crossOriginUrl = url;\n  } else if (!isUri) {\n    const moduleAbsoluteUrl = buildModuleUrl(`${TaskProcessor._workerModulePrefix}/${moduleID}.js`);\n    if (isCrossOriginUrl(moduleAbsoluteUrl)) {\n      crossOriginUrl = moduleAbsoluteUrl;\n    }\n  }\n  if (crossOriginUrl) {\n    // To load cross-origin, create a shim worker from a blob URL\n    const script = `import \"${crossOriginUrl}\";`;\n    workerPath = urlFromScript(script);\n    options.type = \"module\";\n    return new Worker(workerPath, options);\n  }\n\n  /* global CESIUM_WORKERS */\n  if (!isUri && typeof CESIUM_WORKERS !== \"undefined\") {\n    // If the workers are embedded, create a shim worker from the embedded script data\n    const script = `\n      importScripts(\"${urlFromScript(CESIUM_WORKERS)}\");\n      CesiumWorkers[\"${moduleID}\"]();\n    `;\n    workerPath = urlFromScript(script);\n    return new Worker(workerPath, options);\n  }\n  workerPath = url;\n  if (!isUri) {\n    workerPath = buildModuleUrl(`${TaskProcessor._workerModulePrefix + moduleID}.js`);\n  }\n  if (!FeatureDetection.supportsEsmWebWorkers()) {\n    throw new RuntimeError(\"This browser is not supported. Please update your browser to continue.\");\n  }\n  options.type = \"module\";\n  return new Worker(workerPath, options);\n}\nasync function getWebAssemblyLoaderConfig(processor, wasmOptions) {\n  const config = {\n    modulePath: undefined,\n    wasmBinaryFile: undefined,\n    wasmBinary: undefined\n  };\n\n  // Web assembly not supported, use fallback js module if provided\n  if (!FeatureDetection.supportsWebAssembly()) {\n    if (!defined(wasmOptions.fallbackModulePath)) {\n      throw new RuntimeError(`This browser does not support Web Assembly, and no backup module was provided for ${processor._workerPath}`);\n    }\n    config.modulePath = buildModuleUrl(wasmOptions.fallbackModulePath);\n    return config;\n  }\n  config.wasmBinaryFile = buildModuleUrl(wasmOptions.wasmBinaryFile);\n  const arrayBuffer = await Resource.fetchArrayBuffer({\n    url: config.wasmBinaryFile\n  });\n  config.wasmBinary = arrayBuffer;\n  return config;\n}\n\n/**\n * A wrapper around a web worker that allows scheduling tasks for a given worker,\n * returning results asynchronously via a promise.\n *\n * The Worker is not constructed until a task is scheduled.\n *\n * @alias TaskProcessor\n * @constructor\n *\n * @param {string} workerPath The Url to the worker. This can either be an absolute path or relative to the Cesium Workers folder.\n * @param {number} [maximumActiveTasks=Number.POSITIVE_INFINITY] The maximum number of active tasks.  Once exceeded,\n *                                        scheduleTask will not queue any more tasks, allowing\n *                                        work to be rescheduled in future frames.\n */\nfunction TaskProcessor(workerPath, maximumActiveTasks) {\n  this._workerPath = workerPath;\n  this._maximumActiveTasks = defaultValue(maximumActiveTasks, Number.POSITIVE_INFINITY);\n  this._activeTasks = 0;\n  this._nextID = 0;\n  this._webAssemblyPromise = undefined;\n}\nconst createOnmessageHandler = (worker, id, resolve, reject) => {\n  const listener = ({\n    data\n  }) => {\n    if (data.id !== id) {\n      return;\n    }\n    if (defined(data.error)) {\n      let error = data.error;\n      if (error.name === \"RuntimeError\") {\n        error = new RuntimeError(data.error.message);\n        error.stack = data.error.stack;\n      } else if (error.name === \"DeveloperError\") {\n        error = new DeveloperError(data.error.message);\n        error.stack = data.error.stack;\n      } else if (error.name === \"Error\") {\n        error = new Error(data.error.message);\n        error.stack = data.error.stack;\n      }\n      taskCompletedEvent.raiseEvent(error);\n      reject(error);\n    } else {\n      taskCompletedEvent.raiseEvent();\n      resolve(data.result);\n    }\n    worker.removeEventListener(\"message\", listener);\n  };\n  return listener;\n};\nconst emptyTransferableObjectArray = [];\nasync function runTask(processor, parameters, transferableObjects) {\n  const canTransfer = await Promise.resolve(canTransferArrayBuffer());\n  if (!defined(transferableObjects)) {\n    transferableObjects = emptyTransferableObjectArray;\n  } else if (!canTransfer) {\n    transferableObjects.length = 0;\n  }\n  const id = processor._nextID++;\n  const promise = new Promise((resolve, reject) => {\n    processor._worker.addEventListener(\"message\", createOnmessageHandler(processor._worker, id, resolve, reject));\n  });\n  processor._worker.postMessage({\n    id: id,\n    baseUrl: buildModuleUrl.getCesiumBaseUrl().url,\n    parameters: parameters,\n    canTransferArrayBuffer: canTransfer\n  }, transferableObjects);\n  return promise;\n}\nasync function scheduleTask(processor, parameters, transferableObjects) {\n  ++processor._activeTasks;\n  try {\n    const result = await runTask(processor, parameters, transferableObjects);\n    --processor._activeTasks;\n    return result;\n  } catch (error) {\n    --processor._activeTasks;\n    throw error;\n  }\n}\n\n/**\n * Schedule a task to be processed by the web worker asynchronously.  If there are currently more\n * tasks active than the maximum set by the constructor, will immediately return undefined.\n * Otherwise, returns a promise that will resolve to the result posted back by the worker when\n * finished.\n *\n * @param {object} parameters Any input data that will be posted to the worker.\n * @param {Object[]} [transferableObjects] An array of objects contained in parameters that should be\n *                                      transferred to the worker instead of copied.\n * @returns {Promise<object>|undefined} Either a promise that will resolve to the result when available, or undefined\n *                    if there are too many active tasks,\n *\n * @example\n * const taskProcessor = new Cesium.TaskProcessor('myWorkerPath');\n * const promise = taskProcessor.scheduleTask({\n *     someParameter : true,\n *     another : 'hello'\n * });\n * if (!Cesium.defined(promise)) {\n *     // too many active tasks - try again later\n * } else {\n *     promise.then(function(result) {\n *         // use the result of the task\n *     });\n * }\n */\nTaskProcessor.prototype.scheduleTask = function (parameters, transferableObjects) {\n  if (!defined(this._worker)) {\n    this._worker = createWorker(this._workerPath);\n  }\n  if (this._activeTasks >= this._maximumActiveTasks) {\n    return undefined;\n  }\n  return scheduleTask(this, parameters, transferableObjects);\n};\n\n/**\n * Posts a message to a web worker with configuration to initialize loading\n * and compiling a web assembly module asynchronously, as well as an optional\n * fallback JavaScript module to use if Web Assembly is not supported.\n *\n * @param {object} [webAssemblyOptions] An object with the following properties:\n * @param {string} [webAssemblyOptions.modulePath] The path of the web assembly JavaScript wrapper module.\n * @param {string} [webAssemblyOptions.wasmBinaryFile] The path of the web assembly binary file.\n * @param {string} [webAssemblyOptions.fallbackModulePath] The path of the fallback JavaScript module to use if web assembly is not supported.\n * @returns {Promise<*>} A promise that resolves to the result when the web worker has loaded and compiled the web assembly module and is ready to process tasks.\n *\n * @exception {RuntimeError} This browser does not support Web Assembly, and no backup module was provided\n */\nTaskProcessor.prototype.initWebAssemblyModule = async function (webAssemblyOptions) {\n  if (defined(this._webAssemblyPromise)) {\n    return this._webAssemblyPromise;\n  }\n  const init = async () => {\n    const worker = this._worker = createWorker(this._workerPath);\n    const wasmConfig = await getWebAssemblyLoaderConfig(this, webAssemblyOptions);\n    const canTransfer = await Promise.resolve(canTransferArrayBuffer());\n    let transferableObjects;\n    const binary = wasmConfig.wasmBinary;\n    if (defined(binary) && canTransfer) {\n      transferableObjects = [binary];\n    }\n    const promise = new Promise((resolve, reject) => {\n      worker.onmessage = function ({\n        data\n      }) {\n        if (defined(data)) {\n          resolve(data.result);\n        } else {\n          reject(new RuntimeError(\"Could not configure wasm module\"));\n        }\n      };\n    });\n    worker.postMessage({\n      canTransferArrayBuffer: canTransfer,\n      parameters: {\n        webAssemblyConfig: wasmConfig\n      }\n    }, transferableObjects);\n    return promise;\n  };\n  this._webAssemblyPromise = init();\n  return this._webAssemblyPromise;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see TaskProcessor#destroy\n */\nTaskProcessor.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys this object.  This will immediately terminate the Worker.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n */\nTaskProcessor.prototype.destroy = function () {\n  if (defined(this._worker)) {\n    this._worker.terminate();\n  }\n  return destroyObject(this);\n};\n\n/**\n * An event that's raised when a task is completed successfully.  Event handlers are passed\n * the error object is a task fails.\n *\n * @type {Event}\n *\n * @private\n */\nTaskProcessor.taskCompletedEvent = taskCompletedEvent;\n\n// exposed for testing purposes\nTaskProcessor._defaultWorkerModulePrefix = \"Workers/\";\nTaskProcessor._workerModulePrefix = TaskProcessor._defaultWorkerModulePrefix;\nTaskProcessor._canTransferArrayBuffer = undefined;\nexport default TaskProcessor;","map":{"version":3,"names":["Uri","buildModuleUrl","defaultValue","defined","destroyObject","DeveloperError","Event","FeatureDetection","isCrossOriginUrl","Resource","RuntimeError","canTransferArrayBuffer","TaskProcessor","_canTransferArrayBuffer","worker","createWorker","postMessage","webkitPostMessage","value","array","Int8Array","buffer","e","Promise","resolve","onmessage","event","data","result","terminate","taskCompletedEvent","urlFromScript","script","blob","Blob","type","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","URL","webkitURL","createObjectURL","url","uri","isUri","scheme","length","fragment","moduleID","replace","options","workerPath","crossOriginUrl","moduleAbsoluteUrl","_workerModulePrefix","Worker","CESIUM_WORKERS","supportsEsmWebWorkers","getWebAssemblyLoaderConfig","processor","wasmOptions","config","modulePath","undefined","wasmBinaryFile","wasmBinary","supportsWebAssembly","fallbackModulePath","_workerPath","arrayBuffer","fetchArrayBuffer","maximumActiveTasks","_maximumActiveTasks","Number","POSITIVE_INFINITY","_activeTasks","_nextID","_webAssemblyPromise","createOnmessageHandler","id","reject","listener","error","name","message","stack","Error","raiseEvent","removeEventListener","emptyTransferableObjectArray","runTask","parameters","transferableObjects","canTransfer","promise","_worker","addEventListener","baseUrl","getCesiumBaseUrl","scheduleTask","prototype","initWebAssemblyModule","webAssemblyOptions","init","wasmConfig","binary","webAssemblyConfig","isDestroyed","destroy","_defaultWorkerModulePrefix"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/TaskProcessor.js"],"sourcesContent":["import Uri from \"urijs\";\nimport buildModuleUrl from \"./buildModuleUrl.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport destroyObject from \"./destroyObject.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Event from \"./Event.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport isCrossOriginUrl from \"./isCrossOriginUrl.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\nfunction canTransferArrayBuffer() {\n  if (!defined(TaskProcessor._canTransferArrayBuffer)) {\n    const worker = createWorker(\"transferTypedArrayTest\");\n    worker.postMessage = defaultValue(\n      worker.webkitPostMessage,\n      worker.postMessage,\n    );\n\n    const value = 99;\n    const array = new Int8Array([value]);\n\n    try {\n      // postMessage might fail with a DataCloneError\n      // if transferring array buffers is not supported.\n      worker.postMessage(\n        {\n          array: array,\n        },\n        [array.buffer],\n      );\n    } catch (e) {\n      TaskProcessor._canTransferArrayBuffer = false;\n      return TaskProcessor._canTransferArrayBuffer;\n    }\n\n    TaskProcessor._canTransferArrayBuffer = new Promise((resolve) => {\n      worker.onmessage = function (event) {\n        const array = event.data.array;\n\n        // some versions of Firefox silently fail to transfer typed arrays.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=841904\n        // Check to make sure the value round-trips successfully.\n        const result = defined(array) && array[0] === value;\n        resolve(result);\n\n        worker.terminate();\n\n        TaskProcessor._canTransferArrayBuffer = result;\n      };\n    });\n  }\n\n  return TaskProcessor._canTransferArrayBuffer;\n}\n\nconst taskCompletedEvent = new Event();\n\nfunction urlFromScript(script) {\n  let blob;\n  try {\n    blob = new Blob([script], {\n      type: \"application/javascript\",\n    });\n  } catch (e) {\n    const BlobBuilder =\n      window.BlobBuilder ||\n      window.WebKitBlobBuilder ||\n      window.MozBlobBuilder ||\n      window.MSBlobBuilder;\n    const blobBuilder = new BlobBuilder();\n    blobBuilder.append(script);\n    blob = blobBuilder.getBlob(\"application/javascript\");\n  }\n\n  const URL = window.URL || window.webkitURL;\n  return URL.createObjectURL(blob);\n}\n\nfunction createWorker(url) {\n  const uri = new Uri(url);\n  const isUri = uri.scheme().length !== 0 && uri.fragment().length === 0;\n  const moduleID = url.replace(/\\.js$/, \"\");\n\n  const options = {};\n  let workerPath;\n  let crossOriginUrl;\n\n  // If we are provided a fully resolved URL, check it is cross-origin\n  // Or if provided a module ID, check the full absolute URL instead.\n  if (isCrossOriginUrl(url)) {\n    crossOriginUrl = url;\n  } else if (!isUri) {\n    const moduleAbsoluteUrl = buildModuleUrl(\n      `${TaskProcessor._workerModulePrefix}/${moduleID}.js`,\n    );\n\n    if (isCrossOriginUrl(moduleAbsoluteUrl)) {\n      crossOriginUrl = moduleAbsoluteUrl;\n    }\n  }\n\n  if (crossOriginUrl) {\n    // To load cross-origin, create a shim worker from a blob URL\n    const script = `import \"${crossOriginUrl}\";`;\n    workerPath = urlFromScript(script);\n    options.type = \"module\";\n    return new Worker(workerPath, options);\n  }\n\n  /* global CESIUM_WORKERS */\n  if (!isUri && typeof CESIUM_WORKERS !== \"undefined\") {\n    // If the workers are embedded, create a shim worker from the embedded script data\n    const script = `\n      importScripts(\"${urlFromScript(CESIUM_WORKERS)}\");\n      CesiumWorkers[\"${moduleID}\"]();\n    `;\n    workerPath = urlFromScript(script);\n    return new Worker(workerPath, options);\n  }\n\n  workerPath = url;\n\n  if (!isUri) {\n    workerPath = buildModuleUrl(\n      `${TaskProcessor._workerModulePrefix + moduleID}.js`,\n    );\n  }\n\n  if (!FeatureDetection.supportsEsmWebWorkers()) {\n    throw new RuntimeError(\n      \"This browser is not supported. Please update your browser to continue.\",\n    );\n  }\n\n  options.type = \"module\";\n\n  return new Worker(workerPath, options);\n}\n\nasync function getWebAssemblyLoaderConfig(processor, wasmOptions) {\n  const config = {\n    modulePath: undefined,\n    wasmBinaryFile: undefined,\n    wasmBinary: undefined,\n  };\n\n  // Web assembly not supported, use fallback js module if provided\n  if (!FeatureDetection.supportsWebAssembly()) {\n    if (!defined(wasmOptions.fallbackModulePath)) {\n      throw new RuntimeError(\n        `This browser does not support Web Assembly, and no backup module was provided for ${processor._workerPath}`,\n      );\n    }\n\n    config.modulePath = buildModuleUrl(wasmOptions.fallbackModulePath);\n    return config;\n  }\n\n  config.wasmBinaryFile = buildModuleUrl(wasmOptions.wasmBinaryFile);\n\n  const arrayBuffer = await Resource.fetchArrayBuffer({\n    url: config.wasmBinaryFile,\n  });\n\n  config.wasmBinary = arrayBuffer;\n  return config;\n}\n\n/**\n * A wrapper around a web worker that allows scheduling tasks for a given worker,\n * returning results asynchronously via a promise.\n *\n * The Worker is not constructed until a task is scheduled.\n *\n * @alias TaskProcessor\n * @constructor\n *\n * @param {string} workerPath The Url to the worker. This can either be an absolute path or relative to the Cesium Workers folder.\n * @param {number} [maximumActiveTasks=Number.POSITIVE_INFINITY] The maximum number of active tasks.  Once exceeded,\n *                                        scheduleTask will not queue any more tasks, allowing\n *                                        work to be rescheduled in future frames.\n */\nfunction TaskProcessor(workerPath, maximumActiveTasks) {\n  this._workerPath = workerPath;\n  this._maximumActiveTasks = defaultValue(\n    maximumActiveTasks,\n    Number.POSITIVE_INFINITY,\n  );\n  this._activeTasks = 0;\n  this._nextID = 0;\n  this._webAssemblyPromise = undefined;\n}\n\nconst createOnmessageHandler = (worker, id, resolve, reject) => {\n  const listener = ({ data }) => {\n    if (data.id !== id) {\n      return;\n    }\n\n    if (defined(data.error)) {\n      let error = data.error;\n      if (error.name === \"RuntimeError\") {\n        error = new RuntimeError(data.error.message);\n        error.stack = data.error.stack;\n      } else if (error.name === \"DeveloperError\") {\n        error = new DeveloperError(data.error.message);\n        error.stack = data.error.stack;\n      } else if (error.name === \"Error\") {\n        error = new Error(data.error.message);\n        error.stack = data.error.stack;\n      }\n      taskCompletedEvent.raiseEvent(error);\n      reject(error);\n    } else {\n      taskCompletedEvent.raiseEvent();\n      resolve(data.result);\n    }\n\n    worker.removeEventListener(\"message\", listener);\n  };\n\n  return listener;\n};\n\nconst emptyTransferableObjectArray = [];\nasync function runTask(processor, parameters, transferableObjects) {\n  const canTransfer = await Promise.resolve(canTransferArrayBuffer());\n  if (!defined(transferableObjects)) {\n    transferableObjects = emptyTransferableObjectArray;\n  } else if (!canTransfer) {\n    transferableObjects.length = 0;\n  }\n\n  const id = processor._nextID++;\n  const promise = new Promise((resolve, reject) => {\n    processor._worker.addEventListener(\n      \"message\",\n      createOnmessageHandler(processor._worker, id, resolve, reject),\n    );\n  });\n\n  processor._worker.postMessage(\n    {\n      id: id,\n      baseUrl: buildModuleUrl.getCesiumBaseUrl().url,\n      parameters: parameters,\n      canTransferArrayBuffer: canTransfer,\n    },\n    transferableObjects,\n  );\n\n  return promise;\n}\n\nasync function scheduleTask(processor, parameters, transferableObjects) {\n  ++processor._activeTasks;\n\n  try {\n    const result = await runTask(processor, parameters, transferableObjects);\n    --processor._activeTasks;\n    return result;\n  } catch (error) {\n    --processor._activeTasks;\n    throw error;\n  }\n}\n\n/**\n * Schedule a task to be processed by the web worker asynchronously.  If there are currently more\n * tasks active than the maximum set by the constructor, will immediately return undefined.\n * Otherwise, returns a promise that will resolve to the result posted back by the worker when\n * finished.\n *\n * @param {object} parameters Any input data that will be posted to the worker.\n * @param {Object[]} [transferableObjects] An array of objects contained in parameters that should be\n *                                      transferred to the worker instead of copied.\n * @returns {Promise<object>|undefined} Either a promise that will resolve to the result when available, or undefined\n *                    if there are too many active tasks,\n *\n * @example\n * const taskProcessor = new Cesium.TaskProcessor('myWorkerPath');\n * const promise = taskProcessor.scheduleTask({\n *     someParameter : true,\n *     another : 'hello'\n * });\n * if (!Cesium.defined(promise)) {\n *     // too many active tasks - try again later\n * } else {\n *     promise.then(function(result) {\n *         // use the result of the task\n *     });\n * }\n */\nTaskProcessor.prototype.scheduleTask = function (\n  parameters,\n  transferableObjects,\n) {\n  if (!defined(this._worker)) {\n    this._worker = createWorker(this._workerPath);\n  }\n\n  if (this._activeTasks >= this._maximumActiveTasks) {\n    return undefined;\n  }\n\n  return scheduleTask(this, parameters, transferableObjects);\n};\n\n/**\n * Posts a message to a web worker with configuration to initialize loading\n * and compiling a web assembly module asynchronously, as well as an optional\n * fallback JavaScript module to use if Web Assembly is not supported.\n *\n * @param {object} [webAssemblyOptions] An object with the following properties:\n * @param {string} [webAssemblyOptions.modulePath] The path of the web assembly JavaScript wrapper module.\n * @param {string} [webAssemblyOptions.wasmBinaryFile] The path of the web assembly binary file.\n * @param {string} [webAssemblyOptions.fallbackModulePath] The path of the fallback JavaScript module to use if web assembly is not supported.\n * @returns {Promise<*>} A promise that resolves to the result when the web worker has loaded and compiled the web assembly module and is ready to process tasks.\n *\n * @exception {RuntimeError} This browser does not support Web Assembly, and no backup module was provided\n */\nTaskProcessor.prototype.initWebAssemblyModule = async function (\n  webAssemblyOptions,\n) {\n  if (defined(this._webAssemblyPromise)) {\n    return this._webAssemblyPromise;\n  }\n\n  const init = async () => {\n    const worker = (this._worker = createWorker(this._workerPath));\n    const wasmConfig = await getWebAssemblyLoaderConfig(\n      this,\n      webAssemblyOptions,\n    );\n    const canTransfer = await Promise.resolve(canTransferArrayBuffer());\n    let transferableObjects;\n    const binary = wasmConfig.wasmBinary;\n    if (defined(binary) && canTransfer) {\n      transferableObjects = [binary];\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      worker.onmessage = function ({ data }) {\n        if (defined(data)) {\n          resolve(data.result);\n        } else {\n          reject(new RuntimeError(\"Could not configure wasm module\"));\n        }\n      };\n    });\n\n    worker.postMessage(\n      {\n        canTransferArrayBuffer: canTransfer,\n        parameters: { webAssemblyConfig: wasmConfig },\n      },\n      transferableObjects,\n    );\n\n    return promise;\n  };\n\n  this._webAssemblyPromise = init();\n  return this._webAssemblyPromise;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see TaskProcessor#destroy\n */\nTaskProcessor.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys this object.  This will immediately terminate the Worker.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n */\nTaskProcessor.prototype.destroy = function () {\n  if (defined(this._worker)) {\n    this._worker.terminate();\n  }\n  return destroyObject(this);\n};\n\n/**\n * An event that's raised when a task is completed successfully.  Event handlers are passed\n * the error object is a task fails.\n *\n * @type {Event}\n *\n * @private\n */\nTaskProcessor.taskCompletedEvent = taskCompletedEvent;\n\n// exposed for testing purposes\nTaskProcessor._defaultWorkerModulePrefix = \"Workers/\";\nTaskProcessor._workerModulePrefix = TaskProcessor._defaultWorkerModulePrefix;\nTaskProcessor._canTransferArrayBuffer = undefined;\nexport default TaskProcessor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}