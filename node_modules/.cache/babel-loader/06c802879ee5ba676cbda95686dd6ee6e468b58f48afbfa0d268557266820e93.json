{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * A property in a property attribute from EXT_structural_metadata.\n *\n * <p>\n * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension}\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.property The property JSON object.\n * @param {MetadataClassProperty} options.classProperty The class property.\n *\n * @alias PropertyAttributeProperty\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction PropertyAttributeProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const property = options.property;\n  const classProperty = options.classProperty;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.property\", property);\n  Check.typeOf.object(\"options.classProperty\", classProperty);\n  //>>includeEnd('debug');\n\n  this._attribute = property.attribute;\n  this._classProperty = classProperty;\n  this._min = property.min;\n  this._max = property.max;\n  let offset = property.offset;\n  let scale = property.scale;\n\n  // This needs to be set before handling default values\n  const hasValueTransform = classProperty.hasValueTransform || defined(offset) || defined(scale);\n\n  // If the property attribute does not define an offset/scale, it inherits from\n  // the class property. The class property handles setting the default of\n  // identity: (offset 0, scale 1) with the same scalar/vector/matrix types.\n  // array types are disallowed by the spec.\n  offset = defaultValue(offset, classProperty.offset);\n  scale = defaultValue(scale, classProperty.scale);\n\n  // offset and scale are applied on the GPU, so unpack the values\n  // as math types we can use in uniform callbacks.\n  offset = classProperty.unpackVectorAndMatrixTypes(offset);\n  scale = classProperty.unpackVectorAndMatrixTypes(scale);\n  this._offset = offset;\n  this._scale = scale;\n  this._hasValueTransform = hasValueTransform;\n  this._extras = property.extras;\n  this._extensions = property.extensions;\n}\nObject.defineProperties(PropertyAttributeProperty.prototype, {\n  /**\n   * The attribute semantic\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  attribute: {\n    get: function () {\n      return this._attribute;\n    }\n  },\n  /**\n   * True if offset/scale should be applied. If both offset/scale were\n   * undefined, they default to identity so this property is set false\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {boolean}\n   * @readonly\n   * @private\n   */\n  hasValueTransform: {\n    get: function () {\n      return this._hasValueTransform;\n    }\n  },\n  /**\n   * The offset to be added to property values as part of the value transform.\n   *\n   * This is always defined, even when `hasValueTransform` is `false`. If\n   * the property JSON itself did not define it, then it will inherit the\n   * value from the `MetadataClassProperty`. There, it also is always\n   * defined, and initialized to the default value if it was not contained\n   * in the class property JSON.\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @readonly\n   * @private\n   */\n  offset: {\n    get: function () {\n      return this._offset;\n    }\n  },\n  /**\n   * The scale to be multiplied to property values as part of the value transform.\n   *\n   * This is always defined, even when `hasValueTransform` is `false`. If\n   * the property JSON itself did not define it, then it will inherit the\n   * value from the `MetadataClassProperty`. There, it also is always\n   * defined, and initialized to the default value if it was not contained\n   * in the class property JSON.\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @readonly\n   * @private\n   */\n  scale: {\n    get: function () {\n      return this._scale;\n    }\n  },\n  /**\n   * The properties inherited from this property's class\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {MetadataClassProperty}\n   * @readonly\n   * @private\n   */\n  classProperty: {\n    get: function () {\n      return this._classProperty;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\nexport default PropertyAttributeProperty;","map":{"version":3,"names":["Check","defaultValue","defined","PropertyAttributeProperty","options","EMPTY_OBJECT","property","classProperty","typeOf","object","_attribute","attribute","_classProperty","_min","min","_max","max","offset","scale","hasValueTransform","unpackVectorAndMatrixTypes","_offset","_scale","_hasValueTransform","_extras","extras","_extensions","extensions","Object","defineProperties","prototype","get"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/PropertyAttributeProperty.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * A property in a property attribute from EXT_structural_metadata.\n *\n * <p>\n * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension}\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.property The property JSON object.\n * @param {MetadataClassProperty} options.classProperty The class property.\n *\n * @alias PropertyAttributeProperty\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction PropertyAttributeProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const property = options.property;\n  const classProperty = options.classProperty;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.property\", property);\n  Check.typeOf.object(\"options.classProperty\", classProperty);\n  //>>includeEnd('debug');\n\n  this._attribute = property.attribute;\n  this._classProperty = classProperty;\n  this._min = property.min;\n  this._max = property.max;\n\n  let offset = property.offset;\n  let scale = property.scale;\n\n  // This needs to be set before handling default values\n  const hasValueTransform =\n    classProperty.hasValueTransform || defined(offset) || defined(scale);\n\n  // If the property attribute does not define an offset/scale, it inherits from\n  // the class property. The class property handles setting the default of\n  // identity: (offset 0, scale 1) with the same scalar/vector/matrix types.\n  // array types are disallowed by the spec.\n  offset = defaultValue(offset, classProperty.offset);\n  scale = defaultValue(scale, classProperty.scale);\n\n  // offset and scale are applied on the GPU, so unpack the values\n  // as math types we can use in uniform callbacks.\n  offset = classProperty.unpackVectorAndMatrixTypes(offset);\n  scale = classProperty.unpackVectorAndMatrixTypes(scale);\n\n  this._offset = offset;\n  this._scale = scale;\n  this._hasValueTransform = hasValueTransform;\n\n  this._extras = property.extras;\n  this._extensions = property.extensions;\n}\n\nObject.defineProperties(PropertyAttributeProperty.prototype, {\n  /**\n   * The attribute semantic\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  attribute: {\n    get: function () {\n      return this._attribute;\n    },\n  },\n\n  /**\n   * True if offset/scale should be applied. If both offset/scale were\n   * undefined, they default to identity so this property is set false\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {boolean}\n   * @readonly\n   * @private\n   */\n  hasValueTransform: {\n    get: function () {\n      return this._hasValueTransform;\n    },\n  },\n\n  /**\n   * The offset to be added to property values as part of the value transform.\n   *\n   * This is always defined, even when `hasValueTransform` is `false`. If\n   * the property JSON itself did not define it, then it will inherit the\n   * value from the `MetadataClassProperty`. There, it also is always\n   * defined, and initialized to the default value if it was not contained\n   * in the class property JSON.\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @readonly\n   * @private\n   */\n  offset: {\n    get: function () {\n      return this._offset;\n    },\n  },\n\n  /**\n   * The scale to be multiplied to property values as part of the value transform.\n   *\n   * This is always defined, even when `hasValueTransform` is `false`. If\n   * the property JSON itself did not define it, then it will inherit the\n   * value from the `MetadataClassProperty`. There, it also is always\n   * defined, and initialized to the default value if it was not contained\n   * in the class property JSON.\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @readonly\n   * @private\n   */\n  scale: {\n    get: function () {\n      return this._scale;\n    },\n  },\n\n  /**\n   * The properties inherited from this property's class\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {MetadataClassProperty}\n   * @readonly\n   * @private\n   */\n  classProperty: {\n    get: function () {\n      return this._classProperty;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof PropertyAttributeProperty.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\nexport default PropertyAttributeProperty;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,yBAAyBA,CAACC,OAAO,EAAE;EAC1CA,OAAO,GAAGH,YAAY,CAACG,OAAO,EAAEH,YAAY,CAACI,YAAY,CAAC;EAC1D,MAAMC,QAAQ,GAAGF,OAAO,CAACE,QAAQ;EACjC,MAAMC,aAAa,GAAGH,OAAO,CAACG,aAAa;;EAE3C;EACAP,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,kBAAkB,EAAEH,QAAQ,CAAC;EACjDN,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,uBAAuB,EAAEF,aAAa,CAAC;EAC3D;;EAEA,IAAI,CAACG,UAAU,GAAGJ,QAAQ,CAACK,SAAS;EACpC,IAAI,CAACC,cAAc,GAAGL,aAAa;EACnC,IAAI,CAACM,IAAI,GAAGP,QAAQ,CAACQ,GAAG;EACxB,IAAI,CAACC,IAAI,GAAGT,QAAQ,CAACU,GAAG;EAExB,IAAIC,MAAM,GAAGX,QAAQ,CAACW,MAAM;EAC5B,IAAIC,KAAK,GAAGZ,QAAQ,CAACY,KAAK;;EAE1B;EACA,MAAMC,iBAAiB,GACrBZ,aAAa,CAACY,iBAAiB,IAAIjB,OAAO,CAACe,MAAM,CAAC,IAAIf,OAAO,CAACgB,KAAK,CAAC;;EAEtE;EACA;EACA;EACA;EACAD,MAAM,GAAGhB,YAAY,CAACgB,MAAM,EAAEV,aAAa,CAACU,MAAM,CAAC;EACnDC,KAAK,GAAGjB,YAAY,CAACiB,KAAK,EAAEX,aAAa,CAACW,KAAK,CAAC;;EAEhD;EACA;EACAD,MAAM,GAAGV,aAAa,CAACa,0BAA0B,CAACH,MAAM,CAAC;EACzDC,KAAK,GAAGX,aAAa,CAACa,0BAA0B,CAACF,KAAK,CAAC;EAEvD,IAAI,CAACG,OAAO,GAAGJ,MAAM;EACrB,IAAI,CAACK,MAAM,GAAGJ,KAAK;EACnB,IAAI,CAACK,kBAAkB,GAAGJ,iBAAiB;EAE3C,IAAI,CAACK,OAAO,GAAGlB,QAAQ,CAACmB,MAAM;EAC9B,IAAI,CAACC,WAAW,GAAGpB,QAAQ,CAACqB,UAAU;AACxC;AAEAC,MAAM,CAACC,gBAAgB,CAAC1B,yBAAyB,CAAC2B,SAAS,EAAE;EAC3D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEnB,SAAS,EAAE;IACToB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACrB,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,iBAAiB,EAAE;IACjBY,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACR,kBAAkB;IAChC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEN,MAAM,EAAE;IACNc,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACV,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEH,KAAK,EAAE;IACLa,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACT,MAAM;IACpB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEf,aAAa,EAAE;IACbwB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnB,cAAc;IAC5B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,MAAM,EAAE;IACNM,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACP,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,UAAU,EAAE;IACVI,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACL,WAAW;IACzB;EACF;AACF,CAAC,CAAC;AAEF,eAAevB,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}