{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport HeightReference, { isHeightReferenceRelative } from \"../Scene/HeightReference.js\";\nimport Property from \"./Property.js\";\nconst scratchPosition = new Cartesian3();\n\n/**\n * @private\n */\nfunction TerrainOffsetProperty(scene, positionProperty, heightReferenceProperty, extrudedHeightReferenceProperty) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"scene\", scene);\n  Check.defined(\"positionProperty\", positionProperty);\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n  this._heightReference = heightReferenceProperty;\n  this._extrudedHeightReference = extrudedHeightReferenceProperty;\n  this._positionProperty = positionProperty;\n  this._position = new Cartesian3();\n  this._cartographicPosition = new Cartographic();\n  this._normal = new Cartesian3();\n  this._definitionChanged = new Event();\n  this._terrainHeight = 0;\n  this._removeCallbackFunc = undefined;\n  this._removeEventListener = undefined;\n  this._removeModeListener = undefined;\n  const that = this;\n  if (defined(scene.globe)) {\n    this._removeEventListener = scene.terrainProviderChanged.addEventListener(function () {\n      that._updateClamping();\n    });\n    this._removeModeListener = scene.morphComplete.addEventListener(function () {\n      that._updateClamping();\n    });\n  }\n  if (positionProperty.isConstant) {\n    const position = positionProperty.getValue(Iso8601.MINIMUM_VALUE, scratchPosition);\n    if (!defined(position) || Cartesian3.equals(position, Cartesian3.ZERO) || !defined(scene.globe)) {\n      return;\n    }\n    this._position = Cartesian3.clone(position, this._position);\n    this._updateClamping();\n    this._normal = scene.ellipsoid.geodeticSurfaceNormal(position, this._normal);\n  }\n}\nObject.defineProperties(TerrainOffsetProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof TerrainOffsetProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return false;\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * @memberof TerrainOffsetProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  }\n});\n\n/**\n * @private\n */\nTerrainOffsetProperty.prototype._updateClamping = function () {\n  if (defined(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n  }\n  const scene = this._scene;\n  const position = this._position;\n  if (Cartesian3.equals(position, Cartesian3.ZERO)) {\n    this._terrainHeight = 0;\n    return;\n  }\n  const ellipsoid = scene.ellipsoid;\n  const cartographicPosition = ellipsoid.cartesianToCartographic(position, this._cartographicPosition);\n  const height = scene.getHeight(cartographicPosition, this._heightReference);\n  if (defined(height)) {\n    this._terrainHeight = height;\n  } else {\n    this._terrainHeight = 0;\n  }\n  const updateFunction = clampedPosition => {\n    this._terrainHeight = clampedPosition.height;\n    this.definitionChanged.raiseEvent();\n  };\n  this._removeCallbackFunc = scene.updateHeight(cartographicPosition, updateFunction, this._heightReference);\n};\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the height relative to the terrain based on the positions.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The offset\n */\nTerrainOffsetProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  const heightReference = Property.getValueOrDefault(this._heightReference, time, HeightReference.NONE);\n  const extrudedHeightReference = Property.getValueOrDefault(this._extrudedHeightReference, time, HeightReference.NONE);\n  if (heightReference === HeightReference.NONE && !isHeightReferenceRelative(extrudedHeightReference)) {\n    this._position = Cartesian3.clone(Cartesian3.ZERO, this._position);\n    return Cartesian3.clone(Cartesian3.ZERO, result);\n  }\n  if (this._positionProperty.isConstant) {\n    return Cartesian3.multiplyByScalar(this._normal, this._terrainHeight, result);\n  }\n  const scene = this._scene;\n  const position = this._positionProperty.getValue(time, scratchPosition);\n  if (!defined(position) || Cartesian3.equals(position, Cartesian3.ZERO) || !defined(scene.globe)) {\n    return Cartesian3.clone(Cartesian3.ZERO, result);\n  }\n  if (Cartesian3.equalsEpsilon(this._position, position, CesiumMath.EPSILON10)) {\n    return Cartesian3.multiplyByScalar(this._normal, this._terrainHeight, result);\n  }\n  this._position = Cartesian3.clone(position, this._position);\n  this._updateClamping();\n  const normal = scene.ellipsoid.geodeticSurfaceNormal(position, this._normal);\n  return Cartesian3.multiplyByScalar(normal, this._terrainHeight, result);\n};\nTerrainOffsetProperty.prototype.isDestroyed = function () {\n  return false;\n};\nTerrainOffsetProperty.prototype.destroy = function () {\n  if (defined(this._removeEventListener)) {\n    this._removeEventListener();\n  }\n  if (defined(this._removeModeListener)) {\n    this._removeModeListener();\n  }\n  if (defined(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n  }\n  return destroyObject(this);\n};\n\n/**\n * A function which creates one or more providers.\n * @callback TerrainOffsetProperty.PositionFunction\n * @param {JulianDate} time The clock time at which to retrieve the position\n * @param {Cartesian3} result The result position\n * @returns {Cartesian3} The position at which to do the terrain height check\n */\nexport default TerrainOffsetProperty;","map":{"version":3,"names":["Cartesian3","Cartographic","Check","defined","destroyObject","Event","Iso8601","JulianDate","CesiumMath","HeightReference","isHeightReferenceRelative","Property","scratchPosition","TerrainOffsetProperty","scene","positionProperty","heightReferenceProperty","extrudedHeightReferenceProperty","_scene","_heightReference","_extrudedHeightReference","_positionProperty","_position","_cartographicPosition","_normal","_definitionChanged","_terrainHeight","_removeCallbackFunc","undefined","_removeEventListener","_removeModeListener","that","globe","terrainProviderChanged","addEventListener","_updateClamping","morphComplete","isConstant","position","getValue","MINIMUM_VALUE","equals","ZERO","clone","ellipsoid","geodeticSurfaceNormal","Object","defineProperties","prototype","get","definitionChanged","cartographicPosition","cartesianToCartographic","height","getHeight","updateFunction","clampedPosition","raiseEvent","updateHeight","timeScratch","time","result","now","heightReference","getValueOrDefault","NONE","extrudedHeightReference","multiplyByScalar","equalsEpsilon","EPSILON10","normal","isDestroyed","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/TerrainOffsetProperty.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport HeightReference, {\n  isHeightReferenceRelative,\n} from \"../Scene/HeightReference.js\";\nimport Property from \"./Property.js\";\n\nconst scratchPosition = new Cartesian3();\n\n/**\n * @private\n */\nfunction TerrainOffsetProperty(\n  scene,\n  positionProperty,\n  heightReferenceProperty,\n  extrudedHeightReferenceProperty,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"scene\", scene);\n  Check.defined(\"positionProperty\", positionProperty);\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n  this._heightReference = heightReferenceProperty;\n  this._extrudedHeightReference = extrudedHeightReferenceProperty;\n  this._positionProperty = positionProperty;\n\n  this._position = new Cartesian3();\n  this._cartographicPosition = new Cartographic();\n  this._normal = new Cartesian3();\n\n  this._definitionChanged = new Event();\n  this._terrainHeight = 0;\n  this._removeCallbackFunc = undefined;\n  this._removeEventListener = undefined;\n  this._removeModeListener = undefined;\n\n  const that = this;\n  if (defined(scene.globe)) {\n    this._removeEventListener = scene.terrainProviderChanged.addEventListener(\n      function () {\n        that._updateClamping();\n      },\n    );\n    this._removeModeListener = scene.morphComplete.addEventListener(\n      function () {\n        that._updateClamping();\n      },\n    );\n  }\n\n  if (positionProperty.isConstant) {\n    const position = positionProperty.getValue(\n      Iso8601.MINIMUM_VALUE,\n      scratchPosition,\n    );\n    if (\n      !defined(position) ||\n      Cartesian3.equals(position, Cartesian3.ZERO) ||\n      !defined(scene.globe)\n    ) {\n      return;\n    }\n    this._position = Cartesian3.clone(position, this._position);\n\n    this._updateClamping();\n\n    this._normal = scene.ellipsoid.geodeticSurfaceNormal(\n      position,\n      this._normal,\n    );\n  }\n}\n\nObject.defineProperties(TerrainOffsetProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof TerrainOffsetProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return false;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * @memberof TerrainOffsetProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\n/**\n * @private\n */\nTerrainOffsetProperty.prototype._updateClamping = function () {\n  if (defined(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n  }\n\n  const scene = this._scene;\n  const position = this._position;\n\n  if (Cartesian3.equals(position, Cartesian3.ZERO)) {\n    this._terrainHeight = 0;\n    return;\n  }\n  const ellipsoid = scene.ellipsoid;\n  const cartographicPosition = ellipsoid.cartesianToCartographic(\n    position,\n    this._cartographicPosition,\n  );\n\n  const height = scene.getHeight(cartographicPosition, this._heightReference);\n  if (defined(height)) {\n    this._terrainHeight = height;\n  } else {\n    this._terrainHeight = 0;\n  }\n\n  const updateFunction = (clampedPosition) => {\n    this._terrainHeight = clampedPosition.height;\n    this.definitionChanged.raiseEvent();\n  };\n\n  this._removeCallbackFunc = scene.updateHeight(\n    cartographicPosition,\n    updateFunction,\n    this._heightReference,\n  );\n};\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the height relative to the terrain based on the positions.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The offset\n */\nTerrainOffsetProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n\n  const heightReference = Property.getValueOrDefault(\n    this._heightReference,\n    time,\n    HeightReference.NONE,\n  );\n  const extrudedHeightReference = Property.getValueOrDefault(\n    this._extrudedHeightReference,\n    time,\n    HeightReference.NONE,\n  );\n\n  if (\n    heightReference === HeightReference.NONE &&\n    !isHeightReferenceRelative(extrudedHeightReference)\n  ) {\n    this._position = Cartesian3.clone(Cartesian3.ZERO, this._position);\n    return Cartesian3.clone(Cartesian3.ZERO, result);\n  }\n\n  if (this._positionProperty.isConstant) {\n    return Cartesian3.multiplyByScalar(\n      this._normal,\n      this._terrainHeight,\n      result,\n    );\n  }\n\n  const scene = this._scene;\n  const position = this._positionProperty.getValue(time, scratchPosition);\n  if (\n    !defined(position) ||\n    Cartesian3.equals(position, Cartesian3.ZERO) ||\n    !defined(scene.globe)\n  ) {\n    return Cartesian3.clone(Cartesian3.ZERO, result);\n  }\n\n  if (\n    Cartesian3.equalsEpsilon(this._position, position, CesiumMath.EPSILON10)\n  ) {\n    return Cartesian3.multiplyByScalar(\n      this._normal,\n      this._terrainHeight,\n      result,\n    );\n  }\n\n  this._position = Cartesian3.clone(position, this._position);\n\n  this._updateClamping();\n\n  const normal = scene.ellipsoid.geodeticSurfaceNormal(position, this._normal);\n  return Cartesian3.multiplyByScalar(normal, this._terrainHeight, result);\n};\n\nTerrainOffsetProperty.prototype.isDestroyed = function () {\n  return false;\n};\n\nTerrainOffsetProperty.prototype.destroy = function () {\n  if (defined(this._removeEventListener)) {\n    this._removeEventListener();\n  }\n  if (defined(this._removeModeListener)) {\n    this._removeModeListener();\n  }\n  if (defined(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n  }\n  return destroyObject(this);\n};\n\n/**\n * A function which creates one or more providers.\n * @callback TerrainOffsetProperty.PositionFunction\n * @param {JulianDate} time The clock time at which to retrieve the position\n * @param {Cartesian3} result The result position\n * @returns {Cartesian3} The position at which to do the terrain height check\n */\nexport default TerrainOffsetProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}