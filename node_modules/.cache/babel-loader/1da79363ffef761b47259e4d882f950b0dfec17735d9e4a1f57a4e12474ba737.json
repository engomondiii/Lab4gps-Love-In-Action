{"ast":null,"code":"import combine from \"../Core/combine.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\nimport TimeDynamicImagery from \"./TimeDynamicImagery.js\";\nconst defaultParameters = Object.freeze({\n  service: \"WMTS\",\n  version: \"1.0.0\",\n  request: \"GetTile\"\n});\n\n/**\n * @typedef {object} WebMapTileServiceImageryProvider.ConstructorOptions\n *\n * Initialization options for the WebMapTileServiceImageryProvider constructor\n *\n * @property {Resource|string} url The base URL for the WMTS GetTile operation (for KVP-encoded requests) or the tile-URL template (for RESTful requests). The tile-URL template should contain the following variables: &#123;style&#125;, &#123;TileMatrixSet&#125;, &#123;TileMatrix&#125;, &#123;TileRow&#125;, &#123;TileCol&#125;. The first two are optional if actual values are hardcoded or not required by the server. The &#123;s&#125; keyword may be used to specify subdomains.\n * @property {string} [format='image/jpeg'] The MIME type for images to retrieve from the server.\n * @property {string} layer The layer name for WMTS requests.\n * @property {string} style The style name for WMTS requests.\n * @property {string} tileMatrixSetID The identifier of the TileMatrixSet to use for WMTS requests.\n * @property {Array} [tileMatrixLabels] A list of identifiers in the TileMatrix to use for WMTS requests, one per TileMatrix level.\n * @property {Clock} [clock] A Clock instance that is used when determining the value for the time dimension. Required when `times` is specified.\n * @property {TimeIntervalCollection} [times] TimeIntervalCollection with its <code>data</code> property being an object containing time dynamic dimension and their values.\n * @property {object} [dimensions] A object containing static dimensions and their values.\n * @property {number} [tileWidth=256] The tile width in pixels.\n * @property {number} [tileHeight=256] The tile height in pixels.\n * @property {TilingScheme} [tilingScheme] The tiling scheme corresponding to the organization of the tiles in the TileMatrixSet.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle covered by the layer.\n * @property {number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.\n * @property {number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.\n * @property {string|string[]} [subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n */\n\n/**\n * Provides tiled imagery served by {@link http://www.opengeospatial.org/standards/wmts|WMTS 1.0.0} compliant servers.\n * This provider supports HTTP KVP-encoded and RESTful GetTile requests, but does not yet support the SOAP encoding.\n *\n * @alias WebMapTileServiceImageryProvider\n * @constructor\n *\n * @param {WebMapTileServiceImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Web%20Map%20Tile%20Service%20with%20Time.html|Cesium Sandcastle Web Map Tile Service with Time Demo}\n *\n * @example\n * // Example 1. USGS shaded relief tiles (KVP)\n * const shadedRelief1 = new Cesium.WebMapTileServiceImageryProvider({\n *     url : 'http://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/WMTS',\n *     layer : 'USGSShadedReliefOnly',\n *     style : 'default',\n *     format : 'image/jpeg',\n *     tileMatrixSetID : 'default028mm',\n *     // tileMatrixLabels : ['default028mm:0', 'default028mm:1', 'default028mm:2' ...],\n *     maximumLevel: 19,\n *     credit : new Cesium.Credit('U. S. Geological Survey')\n * });\n * viewer.imageryLayers.addImageryProvider(shadedRelief1);\n *\n * @example\n * // Example 2. USGS shaded relief tiles (RESTful)\n * const shadedRelief2 = new Cesium.WebMapTileServiceImageryProvider({\n *     url : 'http://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/WMTS/tile/1.0.0/USGSShadedReliefOnly/{Style}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.jpg',\n *     layer : 'USGSShadedReliefOnly',\n *     style : 'default',\n *     format : 'image/jpeg',\n *     tileMatrixSetID : 'default028mm',\n *     maximumLevel: 19,\n *     credit : new Cesium.Credit('U. S. Geological Survey')\n * });\n * viewer.imageryLayers.addImageryProvider(shadedRelief2);\n *\n * @example\n * // Example 3. NASA time dynamic weather data (RESTful)\n * const times = Cesium.TimeIntervalCollection.fromIso8601({\n *     iso8601: '2015-07-30/2017-06-16/P1D',\n *     dataCallback: function dataCallback(interval, index) {\n *         return {\n *             Time: Cesium.JulianDate.toIso8601(interval.start)\n *         };\n *     }\n * });\n * const weather = new Cesium.WebMapTileServiceImageryProvider({\n *     url : 'https://gibs.earthdata.nasa.gov/wmts/epsg4326/best/AMSR2_Snow_Water_Equivalent/default/{Time}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.png',\n *     layer : 'AMSR2_Snow_Water_Equivalent',\n *     style : 'default',\n *     tileMatrixSetID : '2km',\n *     maximumLevel : 5,\n *     format : 'image/png',\n *     clock: clock,\n *     times: times,\n *     credit : new Cesium.Credit('NASA Global Imagery Browse Services for EOSDIS')\n * });\n * viewer.imageryLayers.addImageryProvider(weather);\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see UrlTemplateImageryProvider\n */\nfunction WebMapTileServiceImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  if (!defined(options.layer)) {\n    throw new DeveloperError(\"options.layer is required.\");\n  }\n  if (!defined(options.style)) {\n    throw new DeveloperError(\"options.style is required.\");\n  }\n  if (!defined(options.tileMatrixSetID)) {\n    throw new DeveloperError(\"options.tileMatrixSetID is required.\");\n  }\n  if (defined(options.times) && !defined(options.clock)) {\n    throw new DeveloperError(\"options.times was specified, so options.clock is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n  const resource = Resource.createIfNeeded(options.url);\n  const style = options.style;\n  const tileMatrixSetID = options.tileMatrixSetID;\n  const url = resource.url;\n  const bracketMatch = url.match(/{/g);\n  if (!defined(bracketMatch) || bracketMatch.length === 1 && /{s}/.test(url)) {\n    resource.setQueryParameters(defaultParameters);\n    this._useKvp = true;\n  } else {\n    const templateValues = {\n      style: style,\n      Style: style,\n      TileMatrixSet: tileMatrixSetID\n    };\n    resource.setTemplateValues(templateValues);\n    this._useKvp = false;\n  }\n  this._resource = resource;\n  this._layer = options.layer;\n  this._style = style;\n  this._tileMatrixSetID = tileMatrixSetID;\n  this._tileMatrixLabels = options.tileMatrixLabels;\n  this._format = defaultValue(options.format, \"image/jpeg\");\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._tilingScheme = defined(options.tilingScheme) ? options.tilingScheme : new WebMercatorTilingScheme({\n    ellipsoid: options.ellipsoid\n  });\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n  this._minimumLevel = defaultValue(options.minimumLevel, 0);\n  this._maximumLevel = options.maximumLevel;\n  this._rectangle = defaultValue(options.rectangle, this._tilingScheme.rectangle);\n  this._dimensions = options.dimensions;\n  const that = this;\n  this._reload = undefined;\n  if (defined(options.times)) {\n    this._timeDynamicImagery = new TimeDynamicImagery({\n      clock: options.clock,\n      times: options.times,\n      requestImageFunction: function (x, y, level, request, interval) {\n        return requestImage(that, x, y, level, request, interval);\n      },\n      reloadFunction: function () {\n        if (defined(that._reload)) {\n          that._reload();\n        }\n      }\n    });\n  }\n\n  // Check the number of tiles at the minimum level.  If it's more than four,\n  // throw an exception, because starting at the higher minimum\n  // level will cause too many tiles to be downloaded and rendered.\n  const swTile = this._tilingScheme.positionToTileXY(Rectangle.southwest(this._rectangle), this._minimumLevel);\n  const neTile = this._tilingScheme.positionToTileXY(Rectangle.northeast(this._rectangle), this._minimumLevel);\n  const tileCount = (Math.abs(neTile.x - swTile.x) + 1) * (Math.abs(neTile.y - swTile.y) + 1);\n  //>>includeStart('debug', pragmas.debug);\n  if (tileCount > 4) {\n    throw new DeveloperError(`The imagery provider's rectangle and minimumLevel indicate that there are ${tileCount} tiles at the minimum level. Imagery providers with more than four tiles at the minimum level are not supported.`);\n  }\n  //>>includeEnd('debug');\n\n  this._errorEvent = new Event();\n  const credit = options.credit;\n  this._credit = typeof credit === \"string\" ? new Credit(credit) : credit;\n  this._subdomains = options.subdomains;\n  if (Array.isArray(this._subdomains)) {\n    this._subdomains = this._subdomains.slice();\n  } else if (defined(this._subdomains) && this._subdomains.length > 0) {\n    this._subdomains = this._subdomains.split(\"\");\n  } else {\n    this._subdomains = [\"a\", \"b\", \"c\"];\n  }\n}\nfunction requestImage(imageryProvider, col, row, level, request, interval) {\n  const labels = imageryProvider._tileMatrixLabels;\n  const tileMatrix = defined(labels) ? labels[level] : level.toString();\n  const subdomains = imageryProvider._subdomains;\n  const staticDimensions = imageryProvider._dimensions;\n  const dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  let resource;\n  let templateValues;\n  if (!imageryProvider._useKvp) {\n    templateValues = {\n      TileMatrix: tileMatrix,\n      TileRow: row.toString(),\n      TileCol: col.toString(),\n      s: subdomains[(col + row + level) % subdomains.length]\n    };\n    resource = imageryProvider._resource.getDerivedResource({\n      request: request\n    });\n    resource.setTemplateValues(templateValues);\n    if (defined(staticDimensions)) {\n      resource.setTemplateValues(staticDimensions);\n    }\n    if (defined(dynamicIntervalData)) {\n      resource.setTemplateValues(dynamicIntervalData);\n    }\n  } else {\n    // build KVP request\n    let query = {};\n    query.tilematrix = tileMatrix;\n    query.layer = imageryProvider._layer;\n    query.style = imageryProvider._style;\n    query.tilerow = row;\n    query.tilecol = col;\n    query.tilematrixset = imageryProvider._tileMatrixSetID;\n    query.format = imageryProvider._format;\n    if (defined(staticDimensions)) {\n      query = combine(query, staticDimensions);\n    }\n    if (defined(dynamicIntervalData)) {\n      query = combine(query, dynamicIntervalData);\n    }\n    templateValues = {\n      s: subdomains[(col + row + level) % subdomains.length]\n    };\n    resource = imageryProvider._resource.getDerivedResource({\n      queryParameters: query,\n      request: request\n    });\n    resource.setTemplateValues(templateValues);\n  }\n  return ImageryProvider.loadImage(imageryProvider, resource);\n}\nObject.defineProperties(WebMapTileServiceImageryProvider.prototype, {\n  /**\n   * Gets the URL of the service hosting the imagery.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    }\n  },\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    }\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    }\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    }\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._minimumLevel;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    }\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    }\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets the mime type of images returned by this imagery provider.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  format: {\n    get: function () {\n      return this._format;\n    }\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    }\n  },\n  /**\n   * Gets or sets a clock that is used to get keep the time used for time dynamic parameters.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function () {\n      return this._timeDynamicImagery.clock;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.clock = value;\n    }\n  },\n  /**\n   * Gets or sets a time interval collection that is used to get time dynamic parameters. The data of each\n   * TimeInterval is an object containing the keys and values of the properties that are used during\n   * tile requests.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {TimeIntervalCollection}\n   */\n  times: {\n    get: function () {\n      return this._timeDynamicImagery.times;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.times = value;\n    }\n  },\n  /**\n   * Gets or sets an object that contains static dimensions and their values.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {object}\n   */\n  dimensions: {\n    get: function () {\n      return this._dimensions;\n    },\n    set: function (value) {\n      if (this._dimensions !== value) {\n        this._dimensions = value;\n        if (defined(this._reload)) {\n          this._reload();\n        }\n      }\n    }\n  }\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nWebMapTileServiceImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nWebMapTileServiceImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  let result;\n  const timeDynamicImagery = this._timeDynamicImagery;\n  let currentInterval;\n\n  // Try and load from cache\n  if (defined(timeDynamicImagery)) {\n    currentInterval = timeDynamicImagery.currentInterval;\n    result = timeDynamicImagery.getFromCache(x, y, level, request);\n  }\n\n  // Couldn't load from cache\n  if (!defined(result)) {\n    result = requestImage(this, x, y, level, request, currentInterval);\n  }\n\n  // If we are approaching an interval, preload this tile in the next interval\n  if (defined(result) && defined(timeDynamicImagery)) {\n    timeDynamicImagery.checkApproachingInterval(x, y, level, request);\n  }\n  return result;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nWebMapTileServiceImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n};\nexport default WebMapTileServiceImageryProvider;","map":{"version":3,"names":["combine","Credit","defaultValue","defined","DeveloperError","Event","Rectangle","Resource","WebMercatorTilingScheme","ImageryProvider","TimeDynamicImagery","defaultParameters","Object","freeze","service","version","request","WebMapTileServiceImageryProvider","options","EMPTY_OBJECT","url","layer","style","tileMatrixSetID","times","clock","_defaultAlpha","undefined","_defaultNightAlpha","_defaultDayAlpha","_defaultBrightness","_defaultContrast","_defaultHue","_defaultSaturation","_defaultGamma","_defaultMinificationFilter","_defaultMagnificationFilter","resource","createIfNeeded","bracketMatch","match","length","test","setQueryParameters","_useKvp","templateValues","Style","TileMatrixSet","setTemplateValues","_resource","_layer","_style","_tileMatrixSetID","_tileMatrixLabels","tileMatrixLabels","_format","format","_tileDiscardPolicy","tileDiscardPolicy","_tilingScheme","tilingScheme","ellipsoid","_tileWidth","tileWidth","_tileHeight","tileHeight","_minimumLevel","minimumLevel","_maximumLevel","maximumLevel","_rectangle","rectangle","_dimensions","dimensions","that","_reload","_timeDynamicImagery","requestImageFunction","x","y","level","interval","requestImage","reloadFunction","swTile","positionToTileXY","southwest","neTile","northeast","tileCount","Math","abs","_errorEvent","credit","_credit","_subdomains","subdomains","Array","isArray","slice","split","imageryProvider","col","row","labels","tileMatrix","toString","staticDimensions","dynamicIntervalData","data","TileMatrix","TileRow","TileCol","s","getDerivedResource","query","tilematrix","tilerow","tilecol","tilematrixset","queryParameters","loadImage","defineProperties","prototype","get","proxy","errorEvent","hasAlphaChannel","set","value","getTileCredits","result","timeDynamicImagery","currentInterval","getFromCache","checkApproachingInterval","pickFeatures","longitude","latitude"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/WebMapTileServiceImageryProvider.js"],"sourcesContent":["import combine from \"../Core/combine.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\nimport TimeDynamicImagery from \"./TimeDynamicImagery.js\";\n\nconst defaultParameters = Object.freeze({\n  service: \"WMTS\",\n  version: \"1.0.0\",\n  request: \"GetTile\",\n});\n\n/**\n * @typedef {object} WebMapTileServiceImageryProvider.ConstructorOptions\n *\n * Initialization options for the WebMapTileServiceImageryProvider constructor\n *\n * @property {Resource|string} url The base URL for the WMTS GetTile operation (for KVP-encoded requests) or the tile-URL template (for RESTful requests). The tile-URL template should contain the following variables: &#123;style&#125;, &#123;TileMatrixSet&#125;, &#123;TileMatrix&#125;, &#123;TileRow&#125;, &#123;TileCol&#125;. The first two are optional if actual values are hardcoded or not required by the server. The &#123;s&#125; keyword may be used to specify subdomains.\n * @property {string} [format='image/jpeg'] The MIME type for images to retrieve from the server.\n * @property {string} layer The layer name for WMTS requests.\n * @property {string} style The style name for WMTS requests.\n * @property {string} tileMatrixSetID The identifier of the TileMatrixSet to use for WMTS requests.\n * @property {Array} [tileMatrixLabels] A list of identifiers in the TileMatrix to use for WMTS requests, one per TileMatrix level.\n * @property {Clock} [clock] A Clock instance that is used when determining the value for the time dimension. Required when `times` is specified.\n * @property {TimeIntervalCollection} [times] TimeIntervalCollection with its <code>data</code> property being an object containing time dynamic dimension and their values.\n * @property {object} [dimensions] A object containing static dimensions and their values.\n * @property {number} [tileWidth=256] The tile width in pixels.\n * @property {number} [tileHeight=256] The tile height in pixels.\n * @property {TilingScheme} [tilingScheme] The tiling scheme corresponding to the organization of the tiles in the TileMatrixSet.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle covered by the layer.\n * @property {number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.\n * @property {number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.\n * @property {string|string[]} [subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n */\n\n/**\n * Provides tiled imagery served by {@link http://www.opengeospatial.org/standards/wmts|WMTS 1.0.0} compliant servers.\n * This provider supports HTTP KVP-encoded and RESTful GetTile requests, but does not yet support the SOAP encoding.\n *\n * @alias WebMapTileServiceImageryProvider\n * @constructor\n *\n * @param {WebMapTileServiceImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Web%20Map%20Tile%20Service%20with%20Time.html|Cesium Sandcastle Web Map Tile Service with Time Demo}\n *\n * @example\n * // Example 1. USGS shaded relief tiles (KVP)\n * const shadedRelief1 = new Cesium.WebMapTileServiceImageryProvider({\n *     url : 'http://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/WMTS',\n *     layer : 'USGSShadedReliefOnly',\n *     style : 'default',\n *     format : 'image/jpeg',\n *     tileMatrixSetID : 'default028mm',\n *     // tileMatrixLabels : ['default028mm:0', 'default028mm:1', 'default028mm:2' ...],\n *     maximumLevel: 19,\n *     credit : new Cesium.Credit('U. S. Geological Survey')\n * });\n * viewer.imageryLayers.addImageryProvider(shadedRelief1);\n *\n * @example\n * // Example 2. USGS shaded relief tiles (RESTful)\n * const shadedRelief2 = new Cesium.WebMapTileServiceImageryProvider({\n *     url : 'http://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/WMTS/tile/1.0.0/USGSShadedReliefOnly/{Style}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.jpg',\n *     layer : 'USGSShadedReliefOnly',\n *     style : 'default',\n *     format : 'image/jpeg',\n *     tileMatrixSetID : 'default028mm',\n *     maximumLevel: 19,\n *     credit : new Cesium.Credit('U. S. Geological Survey')\n * });\n * viewer.imageryLayers.addImageryProvider(shadedRelief2);\n *\n * @example\n * // Example 3. NASA time dynamic weather data (RESTful)\n * const times = Cesium.TimeIntervalCollection.fromIso8601({\n *     iso8601: '2015-07-30/2017-06-16/P1D',\n *     dataCallback: function dataCallback(interval, index) {\n *         return {\n *             Time: Cesium.JulianDate.toIso8601(interval.start)\n *         };\n *     }\n * });\n * const weather = new Cesium.WebMapTileServiceImageryProvider({\n *     url : 'https://gibs.earthdata.nasa.gov/wmts/epsg4326/best/AMSR2_Snow_Water_Equivalent/default/{Time}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.png',\n *     layer : 'AMSR2_Snow_Water_Equivalent',\n *     style : 'default',\n *     tileMatrixSetID : '2km',\n *     maximumLevel : 5,\n *     format : 'image/png',\n *     clock: clock,\n *     times: times,\n *     credit : new Cesium.Credit('NASA Global Imagery Browse Services for EOSDIS')\n * });\n * viewer.imageryLayers.addImageryProvider(weather);\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see UrlTemplateImageryProvider\n */\nfunction WebMapTileServiceImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  if (!defined(options.layer)) {\n    throw new DeveloperError(\"options.layer is required.\");\n  }\n  if (!defined(options.style)) {\n    throw new DeveloperError(\"options.style is required.\");\n  }\n  if (!defined(options.tileMatrixSetID)) {\n    throw new DeveloperError(\"options.tileMatrixSetID is required.\");\n  }\n  if (defined(options.times) && !defined(options.clock)) {\n    throw new DeveloperError(\n      \"options.times was specified, so options.clock is required.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  const resource = Resource.createIfNeeded(options.url);\n\n  const style = options.style;\n  const tileMatrixSetID = options.tileMatrixSetID;\n  const url = resource.url;\n\n  const bracketMatch = url.match(/{/g);\n  if (\n    !defined(bracketMatch) ||\n    (bracketMatch.length === 1 && /{s}/.test(url))\n  ) {\n    resource.setQueryParameters(defaultParameters);\n    this._useKvp = true;\n  } else {\n    const templateValues = {\n      style: style,\n      Style: style,\n      TileMatrixSet: tileMatrixSetID,\n    };\n\n    resource.setTemplateValues(templateValues);\n    this._useKvp = false;\n  }\n\n  this._resource = resource;\n  this._layer = options.layer;\n  this._style = style;\n  this._tileMatrixSetID = tileMatrixSetID;\n  this._tileMatrixLabels = options.tileMatrixLabels;\n  this._format = defaultValue(options.format, \"image/jpeg\");\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n\n  this._tilingScheme = defined(options.tilingScheme)\n    ? options.tilingScheme\n    : new WebMercatorTilingScheme({ ellipsoid: options.ellipsoid });\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n\n  this._minimumLevel = defaultValue(options.minimumLevel, 0);\n  this._maximumLevel = options.maximumLevel;\n\n  this._rectangle = defaultValue(\n    options.rectangle,\n    this._tilingScheme.rectangle,\n  );\n  this._dimensions = options.dimensions;\n\n  const that = this;\n  this._reload = undefined;\n  if (defined(options.times)) {\n    this._timeDynamicImagery = new TimeDynamicImagery({\n      clock: options.clock,\n      times: options.times,\n      requestImageFunction: function (x, y, level, request, interval) {\n        return requestImage(that, x, y, level, request, interval);\n      },\n      reloadFunction: function () {\n        if (defined(that._reload)) {\n          that._reload();\n        }\n      },\n    });\n  }\n\n  // Check the number of tiles at the minimum level.  If it's more than four,\n  // throw an exception, because starting at the higher minimum\n  // level will cause too many tiles to be downloaded and rendered.\n  const swTile = this._tilingScheme.positionToTileXY(\n    Rectangle.southwest(this._rectangle),\n    this._minimumLevel,\n  );\n  const neTile = this._tilingScheme.positionToTileXY(\n    Rectangle.northeast(this._rectangle),\n    this._minimumLevel,\n  );\n  const tileCount =\n    (Math.abs(neTile.x - swTile.x) + 1) * (Math.abs(neTile.y - swTile.y) + 1);\n  //>>includeStart('debug', pragmas.debug);\n  if (tileCount > 4) {\n    throw new DeveloperError(\n      `The imagery provider's rectangle and minimumLevel indicate that there are ${tileCount} tiles at the minimum level. Imagery providers with more than four tiles at the minimum level are not supported.`,\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._errorEvent = new Event();\n\n  const credit = options.credit;\n  this._credit = typeof credit === \"string\" ? new Credit(credit) : credit;\n\n  this._subdomains = options.subdomains;\n  if (Array.isArray(this._subdomains)) {\n    this._subdomains = this._subdomains.slice();\n  } else if (defined(this._subdomains) && this._subdomains.length > 0) {\n    this._subdomains = this._subdomains.split(\"\");\n  } else {\n    this._subdomains = [\"a\", \"b\", \"c\"];\n  }\n}\n\nfunction requestImage(imageryProvider, col, row, level, request, interval) {\n  const labels = imageryProvider._tileMatrixLabels;\n  const tileMatrix = defined(labels) ? labels[level] : level.toString();\n  const subdomains = imageryProvider._subdomains;\n  const staticDimensions = imageryProvider._dimensions;\n  const dynamicIntervalData = defined(interval) ? interval.data : undefined;\n\n  let resource;\n  let templateValues;\n  if (!imageryProvider._useKvp) {\n    templateValues = {\n      TileMatrix: tileMatrix,\n      TileRow: row.toString(),\n      TileCol: col.toString(),\n      s: subdomains[(col + row + level) % subdomains.length],\n    };\n\n    resource = imageryProvider._resource.getDerivedResource({\n      request: request,\n    });\n    resource.setTemplateValues(templateValues);\n\n    if (defined(staticDimensions)) {\n      resource.setTemplateValues(staticDimensions);\n    }\n\n    if (defined(dynamicIntervalData)) {\n      resource.setTemplateValues(dynamicIntervalData);\n    }\n  } else {\n    // build KVP request\n    let query = {};\n    query.tilematrix = tileMatrix;\n    query.layer = imageryProvider._layer;\n    query.style = imageryProvider._style;\n    query.tilerow = row;\n    query.tilecol = col;\n    query.tilematrixset = imageryProvider._tileMatrixSetID;\n    query.format = imageryProvider._format;\n\n    if (defined(staticDimensions)) {\n      query = combine(query, staticDimensions);\n    }\n\n    if (defined(dynamicIntervalData)) {\n      query = combine(query, dynamicIntervalData);\n    }\n\n    templateValues = {\n      s: subdomains[(col + row + level) % subdomains.length],\n    };\n\n    resource = imageryProvider._resource.getDerivedResource({\n      queryParameters: query,\n      request: request,\n    });\n    resource.setTemplateValues(templateValues);\n  }\n\n  return ImageryProvider.loadImage(imageryProvider, resource);\n}\n\nObject.defineProperties(WebMapTileServiceImageryProvider.prototype, {\n  /**\n   * Gets the URL of the service hosting the imagery.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the mime type of images returned by this imagery provider.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  format: {\n    get: function () {\n      return this._format;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n  /**\n   * Gets or sets a clock that is used to get keep the time used for time dynamic parameters.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function () {\n      return this._timeDynamicImagery.clock;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.clock = value;\n    },\n  },\n  /**\n   * Gets or sets a time interval collection that is used to get time dynamic parameters. The data of each\n   * TimeInterval is an object containing the keys and values of the properties that are used during\n   * tile requests.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {TimeIntervalCollection}\n   */\n  times: {\n    get: function () {\n      return this._timeDynamicImagery.times;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.times = value;\n    },\n  },\n  /**\n   * Gets or sets an object that contains static dimensions and their values.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {object}\n   */\n  dimensions: {\n    get: function () {\n      return this._dimensions;\n    },\n    set: function (value) {\n      if (this._dimensions !== value) {\n        this._dimensions = value;\n        if (defined(this._reload)) {\n          this._reload();\n        }\n      }\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nWebMapTileServiceImageryProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level,\n) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nWebMapTileServiceImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request,\n) {\n  let result;\n  const timeDynamicImagery = this._timeDynamicImagery;\n  let currentInterval;\n\n  // Try and load from cache\n  if (defined(timeDynamicImagery)) {\n    currentInterval = timeDynamicImagery.currentInterval;\n    result = timeDynamicImagery.getFromCache(x, y, level, request);\n  }\n\n  // Couldn't load from cache\n  if (!defined(result)) {\n    result = requestImage(this, x, y, level, request, currentInterval);\n  }\n\n  // If we are approaching an interval, preload this tile in the next interval\n  if (defined(result) && defined(timeDynamicImagery)) {\n    timeDynamicImagery.checkApproachingInterval(x, y, level, request);\n  }\n\n  return result;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nWebMapTileServiceImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  return undefined;\n};\nexport default WebMapTileServiceImageryProvider;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,oBAAoB;AACxC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,uBAAuB,MAAM,oCAAoC;AACxE,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,kBAAkB,MAAM,yBAAyB;AAExD,MAAMC,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAAC;EACtCC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,OAAO;EAChBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gCAAgCA,CAACC,OAAO,EAAE;EACjDA,OAAO,GAAGhB,YAAY,CAACgB,OAAO,EAAEhB,YAAY,CAACiB,YAAY,CAAC;;EAE1D;EACA,IAAI,CAAChB,OAAO,CAACe,OAAO,CAACE,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIhB,cAAc,CAAC,0BAA0B,CAAC;EACtD;EACA,IAAI,CAACD,OAAO,CAACe,OAAO,CAACG,KAAK,CAAC,EAAE;IAC3B,MAAM,IAAI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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}