{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\nimport GeocodeType from \"./GeocodeType.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\n\n/**\n * Provides geocoding via a {@link https://pelias.io/|Pelias} server.\n * @alias PeliasGeocoderService\n * @constructor\n *\n * @param {Resource|string} url The endpoint to the Pelias server.\n *\n * @example\n * // Configure a Viewer to use the Pelias server hosted by https://geocode.earth/\n * const viewer = new Cesium.Viewer('cesiumContainer', {\n *   geocoder: new Cesium.PeliasGeocoderService(new Cesium.Resource({\n *     url: 'https://api.geocode.earth/v1/',\n *       queryParameters: {\n *         api_key: '<Your geocode.earth API key>'\n *     }\n *   }))\n * });\n */\nfunction PeliasGeocoderService(url) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  //>>includeEnd('debug');\n\n  this._url = Resource.createIfNeeded(url);\n  this._url.appendForwardSlash();\n}\nObject.defineProperties(PeliasGeocoderService.prototype, {\n  /**\n   * The Resource used to access the Pelias endpoint.\n   * @type {Resource}\n   * @memberof PeliasGeocoderService.prototype\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._url;\n    }\n  },\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof PeliasGeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    }\n  }\n});\n\n/**\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @param {GeocodeType} [type=GeocodeType.SEARCH] The type of geocode to perform.\n * @returns {Promise<GeocoderService.Result[]>}\n */\nPeliasGeocoderService.prototype.geocode = async function (query, type) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  const resource = this._url.getDerivedResource({\n    url: type === GeocodeType.AUTOCOMPLETE ? \"autocomplete\" : \"search\",\n    queryParameters: {\n      text: query\n    }\n  });\n  return resource.fetchJson().then(function (results) {\n    return results.features.map(function (resultObject) {\n      let destination;\n      const bboxDegrees = resultObject.bbox;\n      if (defined(bboxDegrees)) {\n        destination = Rectangle.fromDegrees(bboxDegrees[0], bboxDegrees[1], bboxDegrees[2], bboxDegrees[3]);\n      } else {\n        const lon = resultObject.geometry.coordinates[0];\n        const lat = resultObject.geometry.coordinates[1];\n        destination = Cartesian3.fromDegrees(lon, lat);\n      }\n      return {\n        displayName: resultObject.properties.label,\n        destination: destination,\n        attributions: results.attributions\n      };\n    });\n  });\n};\nexport default PeliasGeocoderService;","map":{"version":3,"names":["Cartesian3","Check","defined","GeocodeType","Rectangle","Resource","PeliasGeocoderService","url","_url","createIfNeeded","appendForwardSlash","Object","defineProperties","prototype","get","credit","undefined","geocode","query","type","typeOf","string","resource","getDerivedResource","AUTOCOMPLETE","queryParameters","text","fetchJson","then","results","features","map","resultObject","destination","bboxDegrees","bbox","fromDegrees","lon","geometry","coordinates","lat","displayName","properties","label","attributions"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/PeliasGeocoderService.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\nimport GeocodeType from \"./GeocodeType.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\n\n/**\n * Provides geocoding via a {@link https://pelias.io/|Pelias} server.\n * @alias PeliasGeocoderService\n * @constructor\n *\n * @param {Resource|string} url The endpoint to the Pelias server.\n *\n * @example\n * // Configure a Viewer to use the Pelias server hosted by https://geocode.earth/\n * const viewer = new Cesium.Viewer('cesiumContainer', {\n *   geocoder: new Cesium.PeliasGeocoderService(new Cesium.Resource({\n *     url: 'https://api.geocode.earth/v1/',\n *       queryParameters: {\n *         api_key: '<Your geocode.earth API key>'\n *     }\n *   }))\n * });\n */\nfunction PeliasGeocoderService(url) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  //>>includeEnd('debug');\n\n  this._url = Resource.createIfNeeded(url);\n  this._url.appendForwardSlash();\n}\n\nObject.defineProperties(PeliasGeocoderService.prototype, {\n  /**\n   * The Resource used to access the Pelias endpoint.\n   * @type {Resource}\n   * @memberof PeliasGeocoderService.prototype\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._url;\n    },\n  },\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof PeliasGeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    },\n  },\n});\n\n/**\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @param {GeocodeType} [type=GeocodeType.SEARCH] The type of geocode to perform.\n * @returns {Promise<GeocoderService.Result[]>}\n */\nPeliasGeocoderService.prototype.geocode = async function (query, type) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  const resource = this._url.getDerivedResource({\n    url: type === GeocodeType.AUTOCOMPLETE ? \"autocomplete\" : \"search\",\n    queryParameters: {\n      text: query,\n    },\n  });\n\n  return resource.fetchJson().then(function (results) {\n    return results.features.map(function (resultObject) {\n      let destination;\n      const bboxDegrees = resultObject.bbox;\n\n      if (defined(bboxDegrees)) {\n        destination = Rectangle.fromDegrees(\n          bboxDegrees[0],\n          bboxDegrees[1],\n          bboxDegrees[2],\n          bboxDegrees[3],\n        );\n      } else {\n        const lon = resultObject.geometry.coordinates[0];\n        const lat = resultObject.geometry.coordinates[1];\n        destination = Cartesian3.fromDegrees(lon, lat);\n      }\n\n      return {\n        displayName: resultObject.properties.label,\n        destination: destination,\n        attributions: results.attributions,\n      };\n    });\n  });\n};\nexport default PeliasGeocoderService;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,iBAAiB;AACxC,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,GAAG,EAAE;EAClC;EACAN,KAAK,CAACC,OAAO,CAAC,KAAK,EAAEK,GAAG,CAAC;EACzB;;EAEA,IAAI,CAACC,IAAI,GAAGH,QAAQ,CAACI,cAAc,CAACF,GAAG,CAAC;EACxC,IAAI,CAACC,IAAI,CAACE,kBAAkB,CAAC,CAAC;AAChC;AAEAC,MAAM,CAACC,gBAAgB,CAACN,qBAAqB,CAACO,SAAS,EAAE;EACvD;AACF;AACA;AACA;AACA;AACA;EACEN,GAAG,EAAE;IACHO,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACN,IAAI;IAClB;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,MAAM,EAAE;IACND,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAOE,SAAS;IAClB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,qBAAqB,CAACO,SAAS,CAACI,OAAO,GAAG,gBAAgBC,KAAK,EAAEC,IAAI,EAAE;EACrE;EACAlB,KAAK,CAACmB,MAAM,CAACC,MAAM,CAAC,OAAO,EAAEH,KAAK,CAAC;EACnC;;EAEA,MAAMI,QAAQ,GAAG,IAAI,CAACd,IAAI,CAACe,kBAAkB,CAAC;IAC5ChB,GAAG,EAAEY,IAAI,KAAKhB,WAAW,CAACqB,YAAY,GAAG,cAAc,GAAG,QAAQ;IAClEC,eAAe,EAAE;MACfC,IAAI,EAAER;IACR;EACF,CAAC,CAAC;EAEF,OAAOI,QAAQ,CAACK,SAAS,CAAC,CAAC,CAACC,IAAI,CAAC,UAAUC,OAAO,EAAE;IAClD,OAAOA,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,UAAUC,YAAY,EAAE;MAClD,IAAIC,WAAW;MACf,MAAMC,WAAW,GAAGF,YAAY,CAACG,IAAI;MAErC,IAAIjC,OAAO,CAACgC,WAAW,CAAC,EAAE;QACxBD,WAAW,GAAG7B,SAAS,CAACgC,WAAW,CACjCF,WAAW,CAAC,CAAC,CAAC,EACdA,WAAW,CAAC,CAAC,CAAC,EACdA,WAAW,CAAC,CAAC,CAAC,EACdA,WAAW,CAAC,CAAC,CACf,CAAC;MACH,CAAC,MAAM;QACL,MAAMG,GAAG,GAAGL,YAAY,CAACM,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;QAChD,MAAMC,GAAG,GAAGR,YAAY,CAACM,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;QAChDN,WAAW,GAAGjC,UAAU,CAACoC,WAAW,CAACC,GAAG,EAAEG,GAAG,CAAC;MAChD;MAEA,OAAO;QACLC,WAAW,EAAET,YAAY,CAACU,UAAU,CAACC,KAAK;QAC1CV,WAAW,EAAEA,WAAW;QACxBW,YAAY,EAAEf,OAAO,CAACe;MACxB,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AACD,eAAetC,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}