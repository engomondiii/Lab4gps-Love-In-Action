{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport combine from \"../Core/combine.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\nconst templateRegex = /{[^}]+}/g;\nconst tags = {\n  x: xTag,\n  y: yTag,\n  z: zTag,\n  s: sTag,\n  reverseX: reverseXTag,\n  reverseY: reverseYTag,\n  reverseZ: reverseZTag,\n  westDegrees: westDegreesTag,\n  southDegrees: southDegreesTag,\n  eastDegrees: eastDegreesTag,\n  northDegrees: northDegreesTag,\n  westProjected: westProjectedTag,\n  southProjected: southProjectedTag,\n  eastProjected: eastProjectedTag,\n  northProjected: northProjectedTag,\n  width: widthTag,\n  height: heightTag\n};\nconst pickFeaturesTags = combine(tags, {\n  i: iTag,\n  j: jTag,\n  reverseI: reverseITag,\n  reverseJ: reverseJTag,\n  longitudeDegrees: longitudeDegreesTag,\n  latitudeDegrees: latitudeDegreesTag,\n  longitudeProjected: longitudeProjectedTag,\n  latitudeProjected: latitudeProjectedTag,\n  format: formatTag\n});\n\n/**\n * @typedef {object} UrlTemplateImageryProvider.ConstructorOptions\n *\n * Initialization options for the UrlTemplateImageryProvider constructor\n *\n * @property {Resource|string} url  The URL template to use to request tiles.  It has the following keywords:\n * <ul>\n *     <li><code>{z}</code>: The level of the tile in the tiling scheme.  Level zero is the root of the quadtree pyramid.</li>\n *     <li><code>{x}</code>: The tile X coordinate in the tiling scheme, where 0 is the Westernmost tile.</li>\n *     <li><code>{y}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Northernmost tile.</li>\n *     <li><code>{s}</code>: One of the available subdomains, used to overcome browser limits on the number of simultaneous requests per host.</li>\n *     <li><code>{reverseX}</code>: The tile X coordinate in the tiling scheme, where 0 is the Easternmost tile.</li>\n *     <li><code>{reverseY}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Southernmost tile.</li>\n *     <li><code>{reverseZ}</code>: The level of the tile in the tiling scheme, where level zero is the maximum level of the quadtree pyramid.  In order to use reverseZ, maximumLevel must be defined.</li>\n *     <li><code>{westDegrees}</code>: The Western edge of the tile in geodetic degrees.</li>\n *     <li><code>{southDegrees}</code>: The Southern edge of the tile in geodetic degrees.</li>\n *     <li><code>{eastDegrees}</code>: The Eastern edge of the tile in geodetic degrees.</li>\n *     <li><code>{northDegrees}</code>: The Northern edge of the tile in geodetic degrees.</li>\n *     <li><code>{westProjected}</code>: The Western edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{southProjected}</code>: The Southern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{eastProjected}</code>: The Eastern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{northProjected}</code>: The Northern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{width}</code>: The width of each tile in pixels.</li>\n *     <li><code>{height}</code>: The height of each tile in pixels.</li>\n * </ul>\n * @property {Resource|string} [pickFeaturesUrl] The URL template to use to pick features.  If this property is not specified,\n *                 {@link UrlTemplateImageryProvider#pickFeatures} will immediately returned undefined, indicating no\n *                 features picked.  The URL template supports all of the keywords supported by the <code>url</code>\n *                 parameter, plus the following:\n * <ul>\n *     <li><code>{i}</code>: The pixel column (horizontal coordinate) of the picked position, where the Westernmost pixel is 0.</li>\n *     <li><code>{j}</code>: The pixel row (vertical coordinate) of the picked position, where the Northernmost pixel is 0.</li>\n *     <li><code>{reverseI}</code>: The pixel column (horizontal coordinate) of the picked position, where the Easternmost pixel is 0.</li>\n *     <li><code>{reverseJ}</code>: The pixel row (vertical coordinate) of the picked position, where the Southernmost pixel is 0.</li>\n *     <li><code>{longitudeDegrees}</code>: The longitude of the picked position in degrees.</li>\n *     <li><code>{latitudeDegrees}</code>: The latitude of the picked position in degrees.</li>\n *     <li><code>{longitudeProjected}</code>: The longitude of the picked position in the projected coordinates of the tiling scheme.</li>\n *     <li><code>{latitudeProjected}</code>: The latitude of the picked position in the projected coordinates of the tiling scheme.</li>\n *     <li><code>{format}</code>: The format in which to get feature information, as specified in the {@link GetFeatureInfoFormat}.</li>\n * </ul>\n * @property {object} [urlSchemeZeroPadding] Gets the URL scheme zero padding for each tile coordinate. The format is '000' where\n * each coordinate will be padded on the left with zeros to match the width of the passed string of zeros. e.g. Setting:\n * urlSchemeZeroPadding : { '{x}' : '0000'}\n * will cause an 'x' value of 12 to return the string '0012' for {x} in the generated URL.\n * It the passed object has the following keywords:\n * <ul>\n *  <li> <code>{z}</code>: The zero padding for the level of the tile in the tiling scheme.</li>\n *  <li> <code>{x}</code>: The zero padding for the tile X coordinate in the tiling scheme.</li>\n *  <li> <code>{y}</code>: The zero padding for the the tile Y coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseX}</code>: The zero padding for the tile reverseX coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseY}</code>: The zero padding for the tile reverseY coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseZ}</code>: The zero padding for the reverseZ coordinate of the tile in the tiling scheme.</li>\n * </ul>\n * @property {string|string[]} [subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n * @property {Credit|string} [credit=''] A credit for the data source, which is displayed on the canvas.\n * @property {number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @property {number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {TilingScheme} [tilingScheme=WebMercatorTilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles.  If this parameter is not provided, a {@link WebMercatorTilingScheme}\n * is used.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @property {number} [tileWidth=256] Pixel width of image tiles.\n * @property {number} [tileHeight=256] Pixel height of image tiles.\n * @property {boolean} [hasAlphaChannel=true] true if the images provided by this imagery provider\n *                  include an alpha channel; otherwise, false.  If this property is false, an alpha channel, if\n *                  present, will be ignored.  If this property is true, any images without an alpha channel will\n *                  be treated as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n *                  and texture upload time are potentially reduced.\n * @property {GetFeatureInfoFormat[]} [getFeatureInfoFormats] The formats in which to get feature information at a\n *                                 specific location when {@link UrlTemplateImageryProvider#pickFeatures} is invoked.  If this\n *                                 parameter is not specified, feature picking is disabled.\n * @property {boolean} [enablePickFeatures=true] If true, {@link UrlTemplateImageryProvider#pickFeatures} will\n *        request the <code>pickFeaturesUrl</code> and attempt to interpret the features included in the response.  If false,\n *        {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n *        features) without communicating with the server.  Set this property to false if you know your data\n *        source does not support picking features or if you don't want this provider's features to be pickable. Note\n *        that this can be dynamically overridden by modifying the {@link UriTemplateImageryProvider#enablePickFeatures}\n *        property.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] A policy for discarding tile images according to some criteria\n * @property {Object} [customTags] Allow to replace custom keywords in the URL template. The object must have strings as keys and functions as values.\n */\n\n/**\n * Provides imagery by requesting tiles using a specified URL template.\n *\n * @alias UrlTemplateImageryProvider\n * @constructor\n *\n * @param {UrlTemplateImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @example\n * // Access Natural Earth II imagery, which uses a TMS tiling scheme and Geographic (EPSG:4326) project\n * const tms = new Cesium.UrlTemplateImageryProvider({\n *     url : Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII') + '/{z}/{x}/{reverseY}.jpg',\n *     tilingScheme : new Cesium.GeographicTilingScheme(),\n *     maximumLevel : 5\n * });\n * // Access the CartoDB Positron basemap, which uses an OpenStreetMap-like tiling scheme.\n * const positron = new Cesium.UrlTemplateImageryProvider({\n *     url : 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',\n *     credit : 'Map tiles by CartoDB, under CC BY 3.0. Data by OpenStreetMap, under ODbL.'\n * });\n * // Access a Web Map Service (WMS) server.\n * const wms = new Cesium.UrlTemplateImageryProvider({\n *    url : 'https://services.ga.gov.au/gis/services/NM_Hydrology_and_Marine_Points/MapServer/WMSServer?' +\n *          'tiled=true&transparent=true&format=image%2Fpng&exceptions=application%2Fvnd.ogc.se_xml&' +\n *          'styles=&service=WMS&version=1.3.0&request=GetMap&' +\n *          'layers=Bores&crs=EPSG%3A3857&' +\n *          'bbox={westProjected}%2C{southProjected}%2C{eastProjected}%2C{northProjected}&' +\n *          'width=256&height=256',\n *    rectangle : Cesium.Rectangle.fromDegrees(95.0, -55.0, 170.0, -1.0)  // From GetCapabilities EX_GeographicBoundingBox\n * });\n * // Using custom tags in your template url.\n * const custom = new Cesium.UrlTemplateImageryProvider({\n *    url : 'https://yoururl/{Time}/{z}/{y}/{x}.png',\n *    customTags : {\n *        Time: function(imageryProvider, x, y, level) {\n *            return '20171231'\n *        }\n *    }\n * });\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n */\nfunction UrlTemplateImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._errorEvent = new Event();\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.url\", options.url);\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(options.url);\n  const pickFeaturesResource = Resource.createIfNeeded(options.pickFeaturesUrl);\n  this._resource = resource;\n  this._urlSchemeZeroPadding = options.urlSchemeZeroPadding;\n  this._getFeatureInfoFormats = options.getFeatureInfoFormats;\n  this._pickFeaturesResource = pickFeaturesResource;\n  let subdomains = options.subdomains;\n  if (Array.isArray(subdomains)) {\n    subdomains = subdomains.slice();\n  } else if (defined(subdomains) && subdomains.length > 0) {\n    subdomains = subdomains.split(\"\");\n  } else {\n    subdomains = [\"a\", \"b\", \"c\"];\n  }\n  this._subdomains = subdomains;\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n  this._minimumLevel = defaultValue(options.minimumLevel, 0);\n  this._maximumLevel = options.maximumLevel;\n  this._tilingScheme = defaultValue(options.tilingScheme, new WebMercatorTilingScheme({\n    ellipsoid: options.ellipsoid\n  }));\n  this._rectangle = defaultValue(options.rectangle, this._tilingScheme.rectangle);\n  this._rectangle = Rectangle.intersection(this._rectangle, this._tilingScheme.rectangle);\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n  this._hasAlphaChannel = defaultValue(options.hasAlphaChannel, true);\n  const customTags = options.customTags;\n  const allTags = combine(tags, customTags);\n  const allPickFeaturesTags = combine(pickFeaturesTags, customTags);\n  this._tags = allTags;\n  this._pickFeaturesTags = allPickFeaturesTags;\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link UrlTemplateImageryProvider#pickFeatures} will\n   * request the <code>options.pickFeaturesUrl</code> and attempt to interpret the features included in the response.  If false,\n   * {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n   * features) without communicating with the server.  Set this property to false if you know your data\n   * source does not support picking features or if you don't want this provider's features to be pickable.\n   * @type {boolean}\n   * @default true\n   */\n  this.enablePickFeatures = defaultValue(options.enablePickFeatures, true);\n}\nObject.defineProperties(UrlTemplateImageryProvider.prototype, {\n  /**\n   * Gets the URL template to use to request tiles.  It has the following keywords:\n   * <ul>\n   *  <li> <code>{z}</code>: The level of the tile in the tiling scheme.  Level zero is the root of the quadtree pyramid.</li>\n   *  <li> <code>{x}</code>: The tile X coordinate in the tiling scheme, where 0 is the Westernmost tile.</li>\n   *  <li> <code>{y}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Northernmost tile.</li>\n   *  <li> <code>{s}</code>: One of the available subdomains, used to overcome browser limits on the number of simultaneous requests per host.</li>\n   *  <li> <code>{reverseX}</code>: The tile X coordinate in the tiling scheme, where 0 is the Easternmost tile.</li>\n   *  <li> <code>{reverseY}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Southernmost tile.</li>\n   *  <li> <code>{reverseZ}</code>: The level of the tile in the tiling scheme, where level zero is the maximum level of the quadtree pyramid.  In order to use reverseZ, maximumLevel must be defined.</li>\n   *  <li> <code>{westDegrees}</code>: The Western edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{southDegrees}</code>: The Southern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{eastDegrees}</code>: The Eastern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{northDegrees}</code>: The Northern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{westProjected}</code>: The Western edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{southProjected}</code>: The Southern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{eastProjected}</code>: The Eastern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{northProjected}</code>: The Northern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{width}</code>: The width of each tile in pixels.</li>\n   *  <li> <code>{height}</code>: The height of each tile in pixels.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    }\n  },\n  /**\n   * Gets the URL scheme zero padding for each tile coordinate. The format is '000' where each coordinate will be padded on\n   * the left with zeros to match the width of the passed string of zeros. e.g. Setting:\n   * urlSchemeZeroPadding : { '{x}' : '0000'}\n   * will cause an 'x' value of 12 to return the string '0012' for {x} in the generated URL.\n   * It has the following keywords:\n   * <ul>\n   *  <li> <code>{z}</code>: The zero padding for the level of the tile in the tiling scheme.</li>\n   *  <li> <code>{x}</code>: The zero padding for the tile X coordinate in the tiling scheme.</li>\n   *  <li> <code>{y}</code>: The zero padding for the the tile Y coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseX}</code>: The zero padding for the tile reverseX coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseY}</code>: The zero padding for the tile reverseY coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseZ}</code>: The zero padding for the reverseZ coordinate of the tile in the tiling scheme.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {object}\n   * @readonly\n   */\n  urlSchemeZeroPadding: {\n    get: function () {\n      return this._urlSchemeZeroPadding;\n    }\n  },\n  /**\n   * Gets the URL template to use to use to pick features.  If this property is not specified,\n   * {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined, indicating no\n   * features picked.  The URL template supports all of the keywords supported by the\n   * {@link UrlTemplateImageryProvider#url} property, plus the following:\n   * <ul>\n   *     <li><code>{i}</code>: The pixel column (horizontal coordinate) of the picked position, where the Westernmost pixel is 0.</li>\n   *     <li><code>{j}</code>: The pixel row (vertical coordinate) of the picked position, where the Northernmost pixel is 0.</li>\n   *     <li><code>{reverseI}</code>: The pixel column (horizontal coordinate) of the picked position, where the Easternmost pixel is 0.</li>\n   *     <li><code>{reverseJ}</code>: The pixel row (vertical coordinate) of the picked position, where the Southernmost pixel is 0.</li>\n   *     <li><code>{longitudeDegrees}</code>: The longitude of the picked position in degrees.</li>\n   *     <li><code>{latitudeDegrees}</code>: The latitude of the picked position in degrees.</li>\n   *     <li><code>{longitudeProjected}</code>: The longitude of the picked position in the projected coordinates of the tiling scheme.</li>\n   *     <li><code>{latitudeProjected}</code>: The latitude of the picked position in the projected coordinates of the tiling scheme.</li>\n   *     <li><code>{format}</code>: The format in which to get feature information, as specified in the {@link GetFeatureInfoFormat}.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  pickFeaturesUrl: {\n    get: function () {\n      return this._pickFeaturesResource.url;\n    }\n  },\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   * @default undefined\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   * @default 256\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    }\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   * @default 256\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    }\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested, or undefined if there is no limit.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   * @default undefined\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    }\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   * @default 0\n   */\n  minimumLevel: {\n    get: function () {\n      return this._minimumLevel;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   * @default new WebMercatorTilingScheme()\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   * @default tilingScheme.rectangle\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    }\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   * @default undefined\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    }\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   * @default undefined\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   * @default true\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._hasAlphaChannel;\n    }\n  }\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nUrlTemplateImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nUrlTemplateImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return ImageryProvider.loadImage(this, buildImageResource(this, x, y, level, request));\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {Promise<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nUrlTemplateImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  if (!this.enablePickFeatures || !defined(this._pickFeaturesResource) || this._getFeatureInfoFormats.length === 0) {\n    return undefined;\n  }\n  let formatIndex = 0;\n  const that = this;\n  function handleResponse(format, data) {\n    return format.callback(data);\n  }\n  function doRequest() {\n    if (formatIndex >= that._getFeatureInfoFormats.length) {\n      // No valid formats, so no features picked.\n      return Promise.resolve([]);\n    }\n    const format = that._getFeatureInfoFormats[formatIndex];\n    const resource = buildPickFeaturesResource(that, x, y, level, longitude, latitude, format.format);\n    ++formatIndex;\n    if (format.type === \"json\") {\n      return resource.fetchJson().then(format.callback).catch(doRequest);\n    } else if (format.type === \"xml\") {\n      return resource.fetchXML().then(format.callback).catch(doRequest);\n    } else if (format.type === \"text\" || format.type === \"html\") {\n      return resource.fetchText().then(format.callback).catch(doRequest);\n    }\n    return resource.fetch({\n      responseType: format.format\n    }).then(handleResponse.bind(undefined, format)).catch(doRequest);\n  }\n  return doRequest();\n};\nlet degreesScratchComputed = false;\nconst degreesScratch = new Rectangle();\nlet projectedScratchComputed = false;\nconst projectedScratch = new Rectangle();\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  degreesScratchComputed = false;\n  projectedScratchComputed = false;\n  const resource = imageryProvider._resource;\n  const url = resource.getUrlComponent(true);\n  const allTags = imageryProvider._tags;\n  const templateValues = {};\n  const match = url.match(templateRegex);\n  if (defined(match)) {\n    match.forEach(function (tag) {\n      const key = tag.substring(1, tag.length - 1); //strip {}\n      if (defined(allTags[key])) {\n        templateValues[key] = allTags[key](imageryProvider, x, y, level);\n      }\n    });\n  }\n  return resource.getDerivedResource({\n    request: request,\n    templateValues: templateValues\n  });\n}\nlet ijScratchComputed = false;\nconst ijScratch = new Cartesian2();\nlet longitudeLatitudeProjectedScratchComputed = false;\nfunction buildPickFeaturesResource(imageryProvider, x, y, level, longitude, latitude, format) {\n  degreesScratchComputed = false;\n  projectedScratchComputed = false;\n  ijScratchComputed = false;\n  longitudeLatitudeProjectedScratchComputed = false;\n  const resource = imageryProvider._pickFeaturesResource;\n  const url = resource.getUrlComponent(true);\n  const allTags = imageryProvider._pickFeaturesTags;\n  const templateValues = {};\n  const match = url.match(templateRegex);\n  if (defined(match)) {\n    match.forEach(function (tag) {\n      const key = tag.substring(1, tag.length - 1); //strip {}\n      if (defined(allTags[key])) {\n        templateValues[key] = allTags[key](imageryProvider, x, y, level, longitude, latitude, format);\n      }\n    });\n  }\n  return resource.getDerivedResource({\n    templateValues: templateValues\n  });\n}\nfunction padWithZerosIfNecessary(imageryProvider, key, value) {\n  if (imageryProvider && imageryProvider.urlSchemeZeroPadding && imageryProvider.urlSchemeZeroPadding.hasOwnProperty(key)) {\n    const paddingTemplate = imageryProvider.urlSchemeZeroPadding[key];\n    if (typeof paddingTemplate === \"string\") {\n      const paddingTemplateWidth = paddingTemplate.length;\n      if (paddingTemplateWidth > 1) {\n        value = value.length >= paddingTemplateWidth ? value : new Array(paddingTemplateWidth - value.toString().length + 1).join(\"0\") + value;\n      }\n    }\n  }\n  return value;\n}\nfunction xTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{x}\", x);\n}\nfunction reverseXTag(imageryProvider, x, y, level) {\n  const reverseX = imageryProvider.tilingScheme.getNumberOfXTilesAtLevel(level) - x - 1;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseX}\", reverseX);\n}\nfunction yTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{y}\", y);\n}\nfunction reverseYTag(imageryProvider, x, y, level) {\n  const reverseY = imageryProvider.tilingScheme.getNumberOfYTilesAtLevel(level) - y - 1;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseY}\", reverseY);\n}\nfunction reverseZTag(imageryProvider, x, y, level) {\n  const maximumLevel = imageryProvider.maximumLevel;\n  const reverseZ = defined(maximumLevel) && level < maximumLevel ? maximumLevel - level - 1 : level;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseZ}\", reverseZ);\n}\nfunction zTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{z}\", level);\n}\nfunction sTag(imageryProvider, x, y, level) {\n  const index = (x + y + level) % imageryProvider._subdomains.length;\n  return imageryProvider._subdomains[index];\n}\nfunction computeDegrees(imageryProvider, x, y, level) {\n  if (degreesScratchComputed) {\n    return;\n  }\n  imageryProvider.tilingScheme.tileXYToRectangle(x, y, level, degreesScratch);\n  degreesScratch.west = CesiumMath.toDegrees(degreesScratch.west);\n  degreesScratch.south = CesiumMath.toDegrees(degreesScratch.south);\n  degreesScratch.east = CesiumMath.toDegrees(degreesScratch.east);\n  degreesScratch.north = CesiumMath.toDegrees(degreesScratch.north);\n  degreesScratchComputed = true;\n}\nfunction westDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.west;\n}\nfunction southDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.south;\n}\nfunction eastDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.east;\n}\nfunction northDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.north;\n}\nfunction computeProjected(imageryProvider, x, y, level) {\n  if (projectedScratchComputed) {\n    return;\n  }\n  imageryProvider.tilingScheme.tileXYToNativeRectangle(x, y, level, projectedScratch);\n  projectedScratchComputed = true;\n}\nfunction westProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.west;\n}\nfunction southProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.south;\n}\nfunction eastProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.east;\n}\nfunction northProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.north;\n}\nfunction widthTag(imageryProvider, x, y, level) {\n  return imageryProvider.tileWidth;\n}\nfunction heightTag(imageryProvider, x, y, level) {\n  return imageryProvider.tileHeight;\n}\nfunction iTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return ijScratch.x;\n}\nfunction jTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return ijScratch.y;\n}\nfunction reverseITag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return imageryProvider.tileWidth - ijScratch.x - 1;\n}\nfunction reverseJTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return imageryProvider.tileHeight - ijScratch.y - 1;\n}\nconst rectangleScratch = new Rectangle();\nconst longitudeLatitudeProjectedScratch = new Cartesian3();\nfunction computeIJ(imageryProvider, x, y, level, longitude, latitude, format) {\n  if (ijScratchComputed) {\n    return;\n  }\n  computeLongitudeLatitudeProjected(imageryProvider, x, y, level, longitude, latitude);\n  const projected = longitudeLatitudeProjectedScratch;\n  const rectangle = imageryProvider.tilingScheme.tileXYToNativeRectangle(x, y, level, rectangleScratch);\n  ijScratch.x = imageryProvider.tileWidth * (projected.x - rectangle.west) / rectangle.width | 0;\n  ijScratch.y = imageryProvider.tileHeight * (rectangle.north - projected.y) / rectangle.height | 0;\n  ijScratchComputed = true;\n}\nfunction longitudeDegreesTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  return CesiumMath.toDegrees(longitude);\n}\nfunction latitudeDegreesTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  return CesiumMath.toDegrees(latitude);\n}\nfunction longitudeProjectedTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeLongitudeLatitudeProjected(imageryProvider, x, y, level, longitude, latitude);\n  return longitudeLatitudeProjectedScratch.x;\n}\nfunction latitudeProjectedTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeLongitudeLatitudeProjected(imageryProvider, x, y, level, longitude, latitude);\n  return longitudeLatitudeProjectedScratch.y;\n}\nconst cartographicScratch = new Cartographic();\nfunction computeLongitudeLatitudeProjected(imageryProvider, x, y, level, longitude, latitude, format) {\n  if (longitudeLatitudeProjectedScratchComputed) {\n    return;\n  }\n  if (imageryProvider.tilingScheme.projection instanceof GeographicProjection) {\n    longitudeLatitudeProjectedScratch.x = CesiumMath.toDegrees(longitude);\n    longitudeLatitudeProjectedScratch.y = CesiumMath.toDegrees(latitude);\n  } else {\n    const cartographic = cartographicScratch;\n    cartographic.longitude = longitude;\n    cartographic.latitude = latitude;\n    imageryProvider.tilingScheme.projection.project(cartographic, longitudeLatitudeProjectedScratch);\n  }\n  longitudeLatitudeProjectedScratchComputed = true;\n}\nfunction formatTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  return format;\n}\nexport default UrlTemplateImageryProvider;","map":{"version":3,"names":["Cartesian2","Cartesian3","Cartographic","Check","combine","Credit","defaultValue","defined","Event","GeographicProjection","CesiumMath","Rectangle","Resource","WebMercatorTilingScheme","ImageryProvider","templateRegex","tags","x","xTag","y","yTag","z","zTag","s","sTag","reverseX","reverseXTag","reverseY","reverseYTag","reverseZ","reverseZTag","westDegrees","westDegreesTag","southDegrees","southDegreesTag","eastDegrees","eastDegreesTag","northDegrees","northDegreesTag","westProjected","westProjectedTag","southProjected","southProjectedTag","eastProjected","eastProjectedTag","northProjected","northProjectedTag","width","widthTag","height","heightTag","pickFeaturesTags","i","iTag","j","jTag","reverseI","reverseITag","reverseJ","reverseJTag","longitudeDegrees","longitudeDegreesTag","latitudeDegrees","latitudeDegreesTag","longitudeProjected","longitudeProjectedTag","latitudeProjected","latitudeProjectedTag","format","formatTag","UrlTemplateImageryProvider","options","EMPTY_OBJECT","_errorEvent","url","resource","createIfNeeded","pickFeaturesResource","pickFeaturesUrl","_resource","_urlSchemeZeroPadding","urlSchemeZeroPadding","_getFeatureInfoFormats","getFeatureInfoFormats","_pickFeaturesResource","subdomains","Array","isArray","slice","length","split","_subdomains","_tileWidth","tileWidth","_tileHeight","tileHeight","_minimumLevel","minimumLevel","_maximumLevel","maximumLevel","_tilingScheme","tilingScheme","ellipsoid","_rectangle","rectangle","intersection","_tileDiscardPolicy","tileDiscardPolicy","credit","_credit","_hasAlphaChannel","hasAlphaChannel","customTags","allTags","allPickFeaturesTags","_tags","_pickFeaturesTags","_defaultAlpha","undefined","_defaultNightAlpha","_defaultDayAlpha","_defaultBrightness","_defaultContrast","_defaultHue","_defaultSaturation","_defaultGamma","_defaultMinificationFilter","_defaultMagnificationFilter","enablePickFeatures","Object","defineProperties","prototype","get","proxy","errorEvent","getTileCredits","level","requestImage","request","loadImage","buildImageResource","pickFeatures","longitude","latitude","formatIndex","that","handleResponse","data","callback","doRequest","Promise","resolve","buildPickFeaturesResource","type","fetchJson","then","catch","fetchXML","fetchText","fetch","responseType","bind","degreesScratchComputed","degreesScratch","projectedScratchComputed","projectedScratch","imageryProvider","getUrlComponent","templateValues","match","forEach","tag","key","substring","getDerivedResource","ijScratchComputed","ijScratch","longitudeLatitudeProjectedScratchComputed","padWithZerosIfNecessary","value","hasOwnProperty","paddingTemplate","paddingTemplateWidth","toString","join","getNumberOfXTilesAtLevel","getNumberOfYTilesAtLevel","index","computeDegrees","tileXYToRectangle","west","toDegrees","south","east","north","computeProjected","tileXYToNativeRectangle","computeIJ","rectangleScratch","longitudeLatitudeProjectedScratch","computeLongitudeLatitudeProjected","projected","cartographicScratch","projection","cartographic","project"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/UrlTemplateImageryProvider.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport combine from \"../Core/combine.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\nconst templateRegex = /{[^}]+}/g;\n\nconst tags = {\n  x: xTag,\n  y: yTag,\n  z: zTag,\n  s: sTag,\n  reverseX: reverseXTag,\n  reverseY: reverseYTag,\n  reverseZ: reverseZTag,\n  westDegrees: westDegreesTag,\n  southDegrees: southDegreesTag,\n  eastDegrees: eastDegreesTag,\n  northDegrees: northDegreesTag,\n  westProjected: westProjectedTag,\n  southProjected: southProjectedTag,\n  eastProjected: eastProjectedTag,\n  northProjected: northProjectedTag,\n  width: widthTag,\n  height: heightTag,\n};\n\nconst pickFeaturesTags = combine(tags, {\n  i: iTag,\n  j: jTag,\n  reverseI: reverseITag,\n  reverseJ: reverseJTag,\n  longitudeDegrees: longitudeDegreesTag,\n  latitudeDegrees: latitudeDegreesTag,\n  longitudeProjected: longitudeProjectedTag,\n  latitudeProjected: latitudeProjectedTag,\n  format: formatTag,\n});\n\n/**\n * @typedef {object} UrlTemplateImageryProvider.ConstructorOptions\n *\n * Initialization options for the UrlTemplateImageryProvider constructor\n *\n * @property {Resource|string} url  The URL template to use to request tiles.  It has the following keywords:\n * <ul>\n *     <li><code>{z}</code>: The level of the tile in the tiling scheme.  Level zero is the root of the quadtree pyramid.</li>\n *     <li><code>{x}</code>: The tile X coordinate in the tiling scheme, where 0 is the Westernmost tile.</li>\n *     <li><code>{y}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Northernmost tile.</li>\n *     <li><code>{s}</code>: One of the available subdomains, used to overcome browser limits on the number of simultaneous requests per host.</li>\n *     <li><code>{reverseX}</code>: The tile X coordinate in the tiling scheme, where 0 is the Easternmost tile.</li>\n *     <li><code>{reverseY}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Southernmost tile.</li>\n *     <li><code>{reverseZ}</code>: The level of the tile in the tiling scheme, where level zero is the maximum level of the quadtree pyramid.  In order to use reverseZ, maximumLevel must be defined.</li>\n *     <li><code>{westDegrees}</code>: The Western edge of the tile in geodetic degrees.</li>\n *     <li><code>{southDegrees}</code>: The Southern edge of the tile in geodetic degrees.</li>\n *     <li><code>{eastDegrees}</code>: The Eastern edge of the tile in geodetic degrees.</li>\n *     <li><code>{northDegrees}</code>: The Northern edge of the tile in geodetic degrees.</li>\n *     <li><code>{westProjected}</code>: The Western edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{southProjected}</code>: The Southern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{eastProjected}</code>: The Eastern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{northProjected}</code>: The Northern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{width}</code>: The width of each tile in pixels.</li>\n *     <li><code>{height}</code>: The height of each tile in pixels.</li>\n * </ul>\n * @property {Resource|string} [pickFeaturesUrl] The URL template to use to pick features.  If this property is not specified,\n *                 {@link UrlTemplateImageryProvider#pickFeatures} will immediately returned undefined, indicating no\n *                 features picked.  The URL template supports all of the keywords supported by the <code>url</code>\n *                 parameter, plus the following:\n * <ul>\n *     <li><code>{i}</code>: The pixel column (horizontal coordinate) of the picked position, where the Westernmost pixel is 0.</li>\n *     <li><code>{j}</code>: The pixel row (vertical coordinate) of the picked position, where the Northernmost pixel is 0.</li>\n *     <li><code>{reverseI}</code>: The pixel column (horizontal coordinate) of the picked position, where the Easternmost pixel is 0.</li>\n *     <li><code>{reverseJ}</code>: The pixel row (vertical coordinate) of the picked position, where the Southernmost pixel is 0.</li>\n *     <li><code>{longitudeDegrees}</code>: The longitude of the picked position in degrees.</li>\n *     <li><code>{latitudeDegrees}</code>: The latitude of the picked position in degrees.</li>\n *     <li><code>{longitudeProjected}</code>: The longitude of the picked position in the projected coordinates of the tiling scheme.</li>\n *     <li><code>{latitudeProjected}</code>: The latitude of the picked position in the projected coordinates of the tiling scheme.</li>\n *     <li><code>{format}</code>: The format in which to get feature information, as specified in the {@link GetFeatureInfoFormat}.</li>\n * </ul>\n * @property {object} [urlSchemeZeroPadding] Gets the URL scheme zero padding for each tile coordinate. The format is '000' where\n * each coordinate will be padded on the left with zeros to match the width of the passed string of zeros. e.g. Setting:\n * urlSchemeZeroPadding : { '{x}' : '0000'}\n * will cause an 'x' value of 12 to return the string '0012' for {x} in the generated URL.\n * It the passed object has the following keywords:\n * <ul>\n *  <li> <code>{z}</code>: The zero padding for the level of the tile in the tiling scheme.</li>\n *  <li> <code>{x}</code>: The zero padding for the tile X coordinate in the tiling scheme.</li>\n *  <li> <code>{y}</code>: The zero padding for the the tile Y coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseX}</code>: The zero padding for the tile reverseX coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseY}</code>: The zero padding for the tile reverseY coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseZ}</code>: The zero padding for the reverseZ coordinate of the tile in the tiling scheme.</li>\n * </ul>\n * @property {string|string[]} [subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n * @property {Credit|string} [credit=''] A credit for the data source, which is displayed on the canvas.\n * @property {number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @property {number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {TilingScheme} [tilingScheme=WebMercatorTilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles.  If this parameter is not provided, a {@link WebMercatorTilingScheme}\n * is used.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @property {number} [tileWidth=256] Pixel width of image tiles.\n * @property {number} [tileHeight=256] Pixel height of image tiles.\n * @property {boolean} [hasAlphaChannel=true] true if the images provided by this imagery provider\n *                  include an alpha channel; otherwise, false.  If this property is false, an alpha channel, if\n *                  present, will be ignored.  If this property is true, any images without an alpha channel will\n *                  be treated as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n *                  and texture upload time are potentially reduced.\n * @property {GetFeatureInfoFormat[]} [getFeatureInfoFormats] The formats in which to get feature information at a\n *                                 specific location when {@link UrlTemplateImageryProvider#pickFeatures} is invoked.  If this\n *                                 parameter is not specified, feature picking is disabled.\n * @property {boolean} [enablePickFeatures=true] If true, {@link UrlTemplateImageryProvider#pickFeatures} will\n *        request the <code>pickFeaturesUrl</code> and attempt to interpret the features included in the response.  If false,\n *        {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n *        features) without communicating with the server.  Set this property to false if you know your data\n *        source does not support picking features or if you don't want this provider's features to be pickable. Note\n *        that this can be dynamically overridden by modifying the {@link UriTemplateImageryProvider#enablePickFeatures}\n *        property.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] A policy for discarding tile images according to some criteria\n * @property {Object} [customTags] Allow to replace custom keywords in the URL template. The object must have strings as keys and functions as values.\n */\n\n/**\n * Provides imagery by requesting tiles using a specified URL template.\n *\n * @alias UrlTemplateImageryProvider\n * @constructor\n *\n * @param {UrlTemplateImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @example\n * // Access Natural Earth II imagery, which uses a TMS tiling scheme and Geographic (EPSG:4326) project\n * const tms = new Cesium.UrlTemplateImageryProvider({\n *     url : Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII') + '/{z}/{x}/{reverseY}.jpg',\n *     tilingScheme : new Cesium.GeographicTilingScheme(),\n *     maximumLevel : 5\n * });\n * // Access the CartoDB Positron basemap, which uses an OpenStreetMap-like tiling scheme.\n * const positron = new Cesium.UrlTemplateImageryProvider({\n *     url : 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',\n *     credit : 'Map tiles by CartoDB, under CC BY 3.0. Data by OpenStreetMap, under ODbL.'\n * });\n * // Access a Web Map Service (WMS) server.\n * const wms = new Cesium.UrlTemplateImageryProvider({\n *    url : 'https://services.ga.gov.au/gis/services/NM_Hydrology_and_Marine_Points/MapServer/WMSServer?' +\n *          'tiled=true&transparent=true&format=image%2Fpng&exceptions=application%2Fvnd.ogc.se_xml&' +\n *          'styles=&service=WMS&version=1.3.0&request=GetMap&' +\n *          'layers=Bores&crs=EPSG%3A3857&' +\n *          'bbox={westProjected}%2C{southProjected}%2C{eastProjected}%2C{northProjected}&' +\n *          'width=256&height=256',\n *    rectangle : Cesium.Rectangle.fromDegrees(95.0, -55.0, 170.0, -1.0)  // From GetCapabilities EX_GeographicBoundingBox\n * });\n * // Using custom tags in your template url.\n * const custom = new Cesium.UrlTemplateImageryProvider({\n *    url : 'https://yoururl/{Time}/{z}/{y}/{x}.png',\n *    customTags : {\n *        Time: function(imageryProvider, x, y, level) {\n *            return '20171231'\n *        }\n *    }\n * });\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n */\nfunction UrlTemplateImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._errorEvent = new Event();\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.url\", options.url);\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(options.url);\n  const pickFeaturesResource = Resource.createIfNeeded(options.pickFeaturesUrl);\n\n  this._resource = resource;\n  this._urlSchemeZeroPadding = options.urlSchemeZeroPadding;\n  this._getFeatureInfoFormats = options.getFeatureInfoFormats;\n  this._pickFeaturesResource = pickFeaturesResource;\n\n  let subdomains = options.subdomains;\n  if (Array.isArray(subdomains)) {\n    subdomains = subdomains.slice();\n  } else if (defined(subdomains) && subdomains.length > 0) {\n    subdomains = subdomains.split(\"\");\n  } else {\n    subdomains = [\"a\", \"b\", \"c\"];\n  }\n  this._subdomains = subdomains;\n\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n  this._minimumLevel = defaultValue(options.minimumLevel, 0);\n  this._maximumLevel = options.maximumLevel;\n  this._tilingScheme = defaultValue(\n    options.tilingScheme,\n    new WebMercatorTilingScheme({ ellipsoid: options.ellipsoid }),\n  );\n\n  this._rectangle = defaultValue(\n    options.rectangle,\n    this._tilingScheme.rectangle,\n  );\n  this._rectangle = Rectangle.intersection(\n    this._rectangle,\n    this._tilingScheme.rectangle,\n  );\n\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n  this._hasAlphaChannel = defaultValue(options.hasAlphaChannel, true);\n\n  const customTags = options.customTags;\n  const allTags = combine(tags, customTags);\n  const allPickFeaturesTags = combine(pickFeaturesTags, customTags);\n  this._tags = allTags;\n  this._pickFeaturesTags = allPickFeaturesTags;\n\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link UrlTemplateImageryProvider#pickFeatures} will\n   * request the <code>options.pickFeaturesUrl</code> and attempt to interpret the features included in the response.  If false,\n   * {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n   * features) without communicating with the server.  Set this property to false if you know your data\n   * source does not support picking features or if you don't want this provider's features to be pickable.\n   * @type {boolean}\n   * @default true\n   */\n  this.enablePickFeatures = defaultValue(options.enablePickFeatures, true);\n}\n\nObject.defineProperties(UrlTemplateImageryProvider.prototype, {\n  /**\n   * Gets the URL template to use to request tiles.  It has the following keywords:\n   * <ul>\n   *  <li> <code>{z}</code>: The level of the tile in the tiling scheme.  Level zero is the root of the quadtree pyramid.</li>\n   *  <li> <code>{x}</code>: The tile X coordinate in the tiling scheme, where 0 is the Westernmost tile.</li>\n   *  <li> <code>{y}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Northernmost tile.</li>\n   *  <li> <code>{s}</code>: One of the available subdomains, used to overcome browser limits on the number of simultaneous requests per host.</li>\n   *  <li> <code>{reverseX}</code>: The tile X coordinate in the tiling scheme, where 0 is the Easternmost tile.</li>\n   *  <li> <code>{reverseY}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Southernmost tile.</li>\n   *  <li> <code>{reverseZ}</code>: The level of the tile in the tiling scheme, where level zero is the maximum level of the quadtree pyramid.  In order to use reverseZ, maximumLevel must be defined.</li>\n   *  <li> <code>{westDegrees}</code>: The Western edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{southDegrees}</code>: The Southern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{eastDegrees}</code>: The Eastern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{northDegrees}</code>: The Northern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{westProjected}</code>: The Western edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{southProjected}</code>: The Southern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{eastProjected}</code>: The Eastern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{northProjected}</code>: The Northern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{width}</code>: The width of each tile in pixels.</li>\n   *  <li> <code>{height}</code>: The height of each tile in pixels.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * Gets the URL scheme zero padding for each tile coordinate. The format is '000' where each coordinate will be padded on\n   * the left with zeros to match the width of the passed string of zeros. e.g. Setting:\n   * urlSchemeZeroPadding : { '{x}' : '0000'}\n   * will cause an 'x' value of 12 to return the string '0012' for {x} in the generated URL.\n   * It has the following keywords:\n   * <ul>\n   *  <li> <code>{z}</code>: The zero padding for the level of the tile in the tiling scheme.</li>\n   *  <li> <code>{x}</code>: The zero padding for the tile X coordinate in the tiling scheme.</li>\n   *  <li> <code>{y}</code>: The zero padding for the the tile Y coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseX}</code>: The zero padding for the tile reverseX coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseY}</code>: The zero padding for the tile reverseY coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseZ}</code>: The zero padding for the reverseZ coordinate of the tile in the tiling scheme.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {object}\n   * @readonly\n   */\n  urlSchemeZeroPadding: {\n    get: function () {\n      return this._urlSchemeZeroPadding;\n    },\n  },\n\n  /**\n   * Gets the URL template to use to use to pick features.  If this property is not specified,\n   * {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined, indicating no\n   * features picked.  The URL template supports all of the keywords supported by the\n   * {@link UrlTemplateImageryProvider#url} property, plus the following:\n   * <ul>\n   *     <li><code>{i}</code>: The pixel column (horizontal coordinate) of the picked position, where the Westernmost pixel is 0.</li>\n   *     <li><code>{j}</code>: The pixel row (vertical coordinate) of the picked position, where the Northernmost pixel is 0.</li>\n   *     <li><code>{reverseI}</code>: The pixel column (horizontal coordinate) of the picked position, where the Easternmost pixel is 0.</li>\n   *     <li><code>{reverseJ}</code>: The pixel row (vertical coordinate) of the picked position, where the Southernmost pixel is 0.</li>\n   *     <li><code>{longitudeDegrees}</code>: The longitude of the picked position in degrees.</li>\n   *     <li><code>{latitudeDegrees}</code>: The latitude of the picked position in degrees.</li>\n   *     <li><code>{longitudeProjected}</code>: The longitude of the picked position in the projected coordinates of the tiling scheme.</li>\n   *     <li><code>{latitudeProjected}</code>: The latitude of the picked position in the projected coordinates of the tiling scheme.</li>\n   *     <li><code>{format}</code>: The format in which to get feature information, as specified in the {@link GetFeatureInfoFormat}.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  pickFeaturesUrl: {\n    get: function () {\n      return this._pickFeaturesResource.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   * @default undefined\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   * @default 256\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   * @default 256\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested, or undefined if there is no limit.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   * @default undefined\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   * @default 0\n   */\n  minimumLevel: {\n    get: function () {\n      return this._minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   * @default new WebMercatorTilingScheme()\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   * @default tilingScheme.rectangle\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   * @default undefined\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   * @default undefined\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   * @default true\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._hasAlphaChannel;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nUrlTemplateImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nUrlTemplateImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request,\n) {\n  return ImageryProvider.loadImage(\n    this,\n    buildImageResource(this, x, y, level, request),\n  );\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {Promise<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nUrlTemplateImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  if (\n    !this.enablePickFeatures ||\n    !defined(this._pickFeaturesResource) ||\n    this._getFeatureInfoFormats.length === 0\n  ) {\n    return undefined;\n  }\n\n  let formatIndex = 0;\n\n  const that = this;\n\n  function handleResponse(format, data) {\n    return format.callback(data);\n  }\n\n  function doRequest() {\n    if (formatIndex >= that._getFeatureInfoFormats.length) {\n      // No valid formats, so no features picked.\n      return Promise.resolve([]);\n    }\n\n    const format = that._getFeatureInfoFormats[formatIndex];\n    const resource = buildPickFeaturesResource(\n      that,\n      x,\n      y,\n      level,\n      longitude,\n      latitude,\n      format.format,\n    );\n\n    ++formatIndex;\n\n    if (format.type === \"json\") {\n      return resource.fetchJson().then(format.callback).catch(doRequest);\n    } else if (format.type === \"xml\") {\n      return resource.fetchXML().then(format.callback).catch(doRequest);\n    } else if (format.type === \"text\" || format.type === \"html\") {\n      return resource.fetchText().then(format.callback).catch(doRequest);\n    }\n    return resource\n      .fetch({\n        responseType: format.format,\n      })\n      .then(handleResponse.bind(undefined, format))\n      .catch(doRequest);\n  }\n\n  return doRequest();\n};\n\nlet degreesScratchComputed = false;\nconst degreesScratch = new Rectangle();\nlet projectedScratchComputed = false;\nconst projectedScratch = new Rectangle();\n\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  degreesScratchComputed = false;\n  projectedScratchComputed = false;\n\n  const resource = imageryProvider._resource;\n  const url = resource.getUrlComponent(true);\n  const allTags = imageryProvider._tags;\n  const templateValues = {};\n\n  const match = url.match(templateRegex);\n  if (defined(match)) {\n    match.forEach(function (tag) {\n      const key = tag.substring(1, tag.length - 1); //strip {}\n      if (defined(allTags[key])) {\n        templateValues[key] = allTags[key](imageryProvider, x, y, level);\n      }\n    });\n  }\n\n  return resource.getDerivedResource({\n    request: request,\n    templateValues: templateValues,\n  });\n}\n\nlet ijScratchComputed = false;\nconst ijScratch = new Cartesian2();\nlet longitudeLatitudeProjectedScratchComputed = false;\n\nfunction buildPickFeaturesResource(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format,\n) {\n  degreesScratchComputed = false;\n  projectedScratchComputed = false;\n  ijScratchComputed = false;\n  longitudeLatitudeProjectedScratchComputed = false;\n\n  const resource = imageryProvider._pickFeaturesResource;\n  const url = resource.getUrlComponent(true);\n  const allTags = imageryProvider._pickFeaturesTags;\n  const templateValues = {};\n  const match = url.match(templateRegex);\n  if (defined(match)) {\n    match.forEach(function (tag) {\n      const key = tag.substring(1, tag.length - 1); //strip {}\n      if (defined(allTags[key])) {\n        templateValues[key] = allTags[key](\n          imageryProvider,\n          x,\n          y,\n          level,\n          longitude,\n          latitude,\n          format,\n        );\n      }\n    });\n  }\n\n  return resource.getDerivedResource({\n    templateValues: templateValues,\n  });\n}\n\nfunction padWithZerosIfNecessary(imageryProvider, key, value) {\n  if (\n    imageryProvider &&\n    imageryProvider.urlSchemeZeroPadding &&\n    imageryProvider.urlSchemeZeroPadding.hasOwnProperty(key)\n  ) {\n    const paddingTemplate = imageryProvider.urlSchemeZeroPadding[key];\n    if (typeof paddingTemplate === \"string\") {\n      const paddingTemplateWidth = paddingTemplate.length;\n      if (paddingTemplateWidth > 1) {\n        value =\n          value.length >= paddingTemplateWidth\n            ? value\n            : new Array(\n                paddingTemplateWidth - value.toString().length + 1,\n              ).join(\"0\") + value;\n      }\n    }\n  }\n  return value;\n}\n\nfunction xTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{x}\", x);\n}\n\nfunction reverseXTag(imageryProvider, x, y, level) {\n  const reverseX =\n    imageryProvider.tilingScheme.getNumberOfXTilesAtLevel(level) - x - 1;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseX}\", reverseX);\n}\n\nfunction yTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{y}\", y);\n}\n\nfunction reverseYTag(imageryProvider, x, y, level) {\n  const reverseY =\n    imageryProvider.tilingScheme.getNumberOfYTilesAtLevel(level) - y - 1;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseY}\", reverseY);\n}\n\nfunction reverseZTag(imageryProvider, x, y, level) {\n  const maximumLevel = imageryProvider.maximumLevel;\n  const reverseZ =\n    defined(maximumLevel) && level < maximumLevel\n      ? maximumLevel - level - 1\n      : level;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseZ}\", reverseZ);\n}\n\nfunction zTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{z}\", level);\n}\n\nfunction sTag(imageryProvider, x, y, level) {\n  const index = (x + y + level) % imageryProvider._subdomains.length;\n  return imageryProvider._subdomains[index];\n}\n\nfunction computeDegrees(imageryProvider, x, y, level) {\n  if (degreesScratchComputed) {\n    return;\n  }\n\n  imageryProvider.tilingScheme.tileXYToRectangle(x, y, level, degreesScratch);\n  degreesScratch.west = CesiumMath.toDegrees(degreesScratch.west);\n  degreesScratch.south = CesiumMath.toDegrees(degreesScratch.south);\n  degreesScratch.east = CesiumMath.toDegrees(degreesScratch.east);\n  degreesScratch.north = CesiumMath.toDegrees(degreesScratch.north);\n\n  degreesScratchComputed = true;\n}\n\nfunction westDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.west;\n}\n\nfunction southDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.south;\n}\n\nfunction eastDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.east;\n}\n\nfunction northDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.north;\n}\n\nfunction computeProjected(imageryProvider, x, y, level) {\n  if (projectedScratchComputed) {\n    return;\n  }\n\n  imageryProvider.tilingScheme.tileXYToNativeRectangle(\n    x,\n    y,\n    level,\n    projectedScratch,\n  );\n\n  projectedScratchComputed = true;\n}\n\nfunction westProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.west;\n}\n\nfunction southProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.south;\n}\n\nfunction eastProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.east;\n}\n\nfunction northProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.north;\n}\n\nfunction widthTag(imageryProvider, x, y, level) {\n  return imageryProvider.tileWidth;\n}\n\nfunction heightTag(imageryProvider, x, y, level) {\n  return imageryProvider.tileHeight;\n}\n\nfunction iTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return ijScratch.x;\n}\n\nfunction jTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return ijScratch.y;\n}\n\nfunction reverseITag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format,\n) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return imageryProvider.tileWidth - ijScratch.x - 1;\n}\n\nfunction reverseJTag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format,\n) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return imageryProvider.tileHeight - ijScratch.y - 1;\n}\n\nconst rectangleScratch = new Rectangle();\nconst longitudeLatitudeProjectedScratch = new Cartesian3();\n\nfunction computeIJ(imageryProvider, x, y, level, longitude, latitude, format) {\n  if (ijScratchComputed) {\n    return;\n  }\n\n  computeLongitudeLatitudeProjected(\n    imageryProvider,\n    x,\n    y,\n    level,\n    longitude,\n    latitude,\n  );\n  const projected = longitudeLatitudeProjectedScratch;\n\n  const rectangle = imageryProvider.tilingScheme.tileXYToNativeRectangle(\n    x,\n    y,\n    level,\n    rectangleScratch,\n  );\n  ijScratch.x =\n    ((imageryProvider.tileWidth * (projected.x - rectangle.west)) /\n      rectangle.width) |\n    0;\n  ijScratch.y =\n    ((imageryProvider.tileHeight * (rectangle.north - projected.y)) /\n      rectangle.height) |\n    0;\n  ijScratchComputed = true;\n}\n\nfunction longitudeDegreesTag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format,\n) {\n  return CesiumMath.toDegrees(longitude);\n}\n\nfunction latitudeDegreesTag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format,\n) {\n  return CesiumMath.toDegrees(latitude);\n}\n\nfunction longitudeProjectedTag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format,\n) {\n  computeLongitudeLatitudeProjected(\n    imageryProvider,\n    x,\n    y,\n    level,\n    longitude,\n    latitude,\n  );\n  return longitudeLatitudeProjectedScratch.x;\n}\n\nfunction latitudeProjectedTag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format,\n) {\n  computeLongitudeLatitudeProjected(\n    imageryProvider,\n    x,\n    y,\n    level,\n    longitude,\n    latitude,\n  );\n  return longitudeLatitudeProjectedScratch.y;\n}\n\nconst cartographicScratch = new Cartographic();\n\nfunction computeLongitudeLatitudeProjected(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format,\n) {\n  if (longitudeLatitudeProjectedScratchComputed) {\n    return;\n  }\n\n  if (imageryProvider.tilingScheme.projection instanceof GeographicProjection) {\n    longitudeLatitudeProjectedScratch.x = CesiumMath.toDegrees(longitude);\n    longitudeLatitudeProjectedScratch.y = CesiumMath.toDegrees(latitude);\n  } else {\n    const cartographic = cartographicScratch;\n    cartographic.longitude = longitude;\n    cartographic.latitude = latitude;\n    imageryProvider.tilingScheme.projection.project(\n      cartographic,\n      longitudeLatitudeProjectedScratch,\n    );\n  }\n\n  longitudeLatitudeProjectedScratchComputed = true;\n}\n\nfunction formatTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  return format;\n}\nexport default UrlTemplateImageryProvider;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,oBAAoB,MAAM,iCAAiC;AAClE,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,uBAAuB,MAAM,oCAAoC;AACxE,OAAOC,eAAe,MAAM,sBAAsB;AAElD,MAAMC,aAAa,GAAG,UAAU;AAEhC,MAAMC,IAAI,GAAG;EACXC,CAAC,EAAEC,IAAI;EACPC,CAAC,EAAEC,IAAI;EACPC,CAAC,EAAEC,IAAI;EACPC,CAAC,EAAEC,IAAI;EACPC,QAAQ,EAAEC,WAAW;EACrBC,QAAQ,EAAEC,WAAW;EACrBC,QAAQ,EAAEC,WAAW;EACrBC,WAAW,EAAEC,cAAc;EAC3BC,YAAY,EAAEC,eAAe;EAC7BC,WAAW,EAAEC,cAAc;EAC3BC,YAAY,EAAEC,eAAe;EAC7BC,aAAa,EAAEC,gBAAgB;EAC/BC,cAAc,EAAEC,iBAAiB;EACjCC,aAAa,EAAEC,gBAAgB;EAC/BC,cAAc,EAAEC,iBAAiB;EACjCC,KAAK,EAAEC,QAAQ;EACfC,MAAM,EAAEC;AACV,CAAC;AAED,MAAMC,gBAAgB,GAAG/C,OAAO,CAACY,IAAI,EAAE;EACrCoC,CAAC,EAAEC,IAAI;EACPC,CAAC,EAAEC,IAAI;EACPC,QAAQ,EAAEC,WAAW;EACrBC,QAAQ,EAAEC,WAAW;EACrBC,gBAAgB,EAAEC,mBAAmB;EACrCC,eAAe,EAAEC,kBAAkB;EACnCC,kBAAkB,EAAEC,qBAAqB;EACzCC,iBAAiB,EAAEC,oBAAoB;EACvCC,MAAM,EAAEC;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,0BAA0BA,CAACC,OAAO,EAAE;EAC3CA,OAAO,GAAGjE,YAAY,CAACiE,OAAO,EAAEjE,YAAY,CAACkE,YAAY,CAAC;EAE1D,IAAI,CAACC,WAAW,GAAG,IAAIjE,KAAK,CAAC,CAAC;;EAE9B;EACAL,KAAK,CAACI,OAAO,CAAC,aAAa,EAAEgE,OAAO,CAACG,GAAG,CAAC;EACzC;;EAEA,MAAMC,QAAQ,GAAG/D,QAAQ,CAACgE,cAAc,CAACL,OAAO,CAACG,GAAG,CAAC;EACrD,MAAMG,oBAAoB,GAAGjE,QAAQ,CAACgE,cAAc,CAACL,OAAO,CAACO,eAAe,CAAC;EAE7E,IAAI,CAACC,SAAS,GAAGJ,QAAQ;EACzB,IAAI,CAACK,qBAAqB,GAAGT,OAAO,CAACU,oBAAoB;EACzD,IAAI,CAACC,sBAAsB,GAAGX,OAAO,CAACY,qBAAqB;EAC3D,IAAI,CAACC,qBAAqB,GAAGP,oBAAoB;EAEjD,IAAIQ,UAAU,GAAGd,OAA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,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEF,eAAe,EAAE;IACfsD,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAChD,qBAAqB,CAACV,GAAG;IACvC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE2D,KAAK,EAAE;IACLD,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACrD,SAAS,CAACsD,KAAK;IAC7B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACExC,SAAS,EAAE;IACTuC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACxC,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,UAAU,EAAE;IACVqC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACtC,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,YAAY,EAAE;IACZiC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAClC,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACED,YAAY,EAAE;IACZmC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACpC,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,YAAY,EAAE;IACZ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAChC,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,SAAS,EAAE;IACT4B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC7B,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,iBAAiB,EAAE;IACjByB,GAAG,EAAE,SAAAA,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}