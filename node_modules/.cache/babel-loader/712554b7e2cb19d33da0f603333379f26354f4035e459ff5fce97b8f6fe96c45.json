{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nconst defaultColor = Color.WHITE;\nconst defaultCellAlpha = 0.1;\nconst defaultLineCount = new Cartesian2(8, 8);\nconst defaultLineOffset = new Cartesian2(0, 0);\nconst defaultLineThickness = new Cartesian2(1, 1);\n\n/**\n * A {@link MaterialProperty} that maps to grid {@link Material} uniforms.\n * @alias GridMaterialProperty\n *\n * @param {object} [options] Object with the following properties:\n * @param {Property|Color} [options.color=Color.WHITE] A Property specifying the grid {@link Color}.\n * @param {Property|number} [options.cellAlpha=0.1] A numeric Property specifying cell alpha values.\n * @param {Property|Cartesian2} [options.lineCount=new Cartesian2(8, 8)] A {@link Cartesian2} Property specifying the number of grid lines along each axis.\n * @param {Property|Cartesian2} [options.lineThickness=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n * @param {Property|Cartesian2} [options.lineOffset=new Cartesian2(0.0, 0.0)] A {@link Cartesian2} Property specifying starting offset of grid lines along each axis.\n *\n * @constructor\n */\nfunction GridMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._cellAlpha = undefined;\n  this._cellAlphaSubscription = undefined;\n  this._lineCount = undefined;\n  this._lineCountSubscription = undefined;\n  this._lineThickness = undefined;\n  this._lineThicknessSubscription = undefined;\n  this._lineOffset = undefined;\n  this._lineOffsetSubscription = undefined;\n  this.color = options.color;\n  this.cellAlpha = options.cellAlpha;\n  this.lineCount = options.lineCount;\n  this.lineThickness = options.lineThickness;\n  this.lineOffset = options.lineOffset;\n}\nObject.defineProperties(GridMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._color) && Property.isConstant(this._cellAlpha) && Property.isConstant(this._lineCount) && Property.isConstant(this._lineThickness) && Property.isConstant(this._lineOffset);\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the Property specifying the grid {@link Color}.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n  /**\n   * Gets or sets the numeric Property specifying cell alpha values.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 0.1\n   */\n  cellAlpha: createPropertyDescriptor(\"cellAlpha\"),\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(8.0, 8.0)\n   */\n  lineCount: createPropertyDescriptor(\"lineCount\"),\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  lineThickness: createPropertyDescriptor(\"lineThickness\"),\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the starting offset of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(0.0, 0.0)\n   */\n  lineOffset: createPropertyDescriptor(\"lineOffset\")\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nGridMaterialProperty.prototype.getType = function (time) {\n  return \"Grid\";\n};\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nGridMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\n  result.cellAlpha = Property.getValueOrDefault(this._cellAlpha, time, defaultCellAlpha);\n  result.lineCount = Property.getValueOrClonedDefault(this._lineCount, time, defaultLineCount, result.lineCount);\n  result.lineThickness = Property.getValueOrClonedDefault(this._lineThickness, time, defaultLineThickness, result.lineThickness);\n  result.lineOffset = Property.getValueOrClonedDefault(this._lineOffset, time, defaultLineOffset, result.lineOffset);\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nGridMaterialProperty.prototype.equals = function (other) {\n  return this === other ||\n  //\n  other instanceof GridMaterialProperty &&\n  //\n  Property.equals(this._color, other._color) &&\n  //\n  Property.equals(this._cellAlpha, other._cellAlpha) &&\n  //\n  Property.equals(this._lineCount, other._lineCount) &&\n  //\n  Property.equals(this._lineThickness, other._lineThickness) &&\n  //\n  Property.equals(this._lineOffset, other._lineOffset);\n};\nexport default GridMaterialProperty;","map":{"version":3,"names":["Cartesian2","Color","defaultValue","defined","Event","JulianDate","createPropertyDescriptor","Property","defaultColor","WHITE","defaultCellAlpha","defaultLineCount","defaultLineOffset","defaultLineThickness","GridMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_color","undefined","_colorSubscription","_cellAlpha","_cellAlphaSubscription","_lineCount","_lineCountSubscription","_lineThickness","_lineThicknessSubscription","_lineOffset","_lineOffsetSubscription","color","cellAlpha","lineCount","lineThickness","lineOffset","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","timeScratch","getValue","result","now","getValueOrClonedDefault","getValueOrDefault","equals","other"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/GridMaterialProperty.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultColor = Color.WHITE;\nconst defaultCellAlpha = 0.1;\nconst defaultLineCount = new Cartesian2(8, 8);\nconst defaultLineOffset = new Cartesian2(0, 0);\nconst defaultLineThickness = new Cartesian2(1, 1);\n\n/**\n * A {@link MaterialProperty} that maps to grid {@link Material} uniforms.\n * @alias GridMaterialProperty\n *\n * @param {object} [options] Object with the following properties:\n * @param {Property|Color} [options.color=Color.WHITE] A Property specifying the grid {@link Color}.\n * @param {Property|number} [options.cellAlpha=0.1] A numeric Property specifying cell alpha values.\n * @param {Property|Cartesian2} [options.lineCount=new Cartesian2(8, 8)] A {@link Cartesian2} Property specifying the number of grid lines along each axis.\n * @param {Property|Cartesian2} [options.lineThickness=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n * @param {Property|Cartesian2} [options.lineOffset=new Cartesian2(0.0, 0.0)] A {@link Cartesian2} Property specifying starting offset of grid lines along each axis.\n *\n * @constructor\n */\nfunction GridMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._cellAlpha = undefined;\n  this._cellAlphaSubscription = undefined;\n  this._lineCount = undefined;\n  this._lineCountSubscription = undefined;\n  this._lineThickness = undefined;\n  this._lineThicknessSubscription = undefined;\n  this._lineOffset = undefined;\n  this._lineOffsetSubscription = undefined;\n\n  this.color = options.color;\n  this.cellAlpha = options.cellAlpha;\n  this.lineCount = options.lineCount;\n  this.lineThickness = options.lineThickness;\n  this.lineOffset = options.lineOffset;\n}\n\nObject.defineProperties(GridMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) &&\n        Property.isConstant(this._cellAlpha) &&\n        Property.isConstant(this._lineCount) &&\n        Property.isConstant(this._lineThickness) &&\n        Property.isConstant(this._lineOffset)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying the grid {@link Color}.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying cell alpha values.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 0.1\n   */\n  cellAlpha: createPropertyDescriptor(\"cellAlpha\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(8.0, 8.0)\n   */\n  lineCount: createPropertyDescriptor(\"lineCount\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  lineThickness: createPropertyDescriptor(\"lineThickness\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the starting offset of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(0.0, 0.0)\n   */\n  lineOffset: createPropertyDescriptor(\"lineOffset\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nGridMaterialProperty.prototype.getType = function (time) {\n  return \"Grid\";\n};\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nGridMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color,\n  );\n  result.cellAlpha = Property.getValueOrDefault(\n    this._cellAlpha,\n    time,\n    defaultCellAlpha,\n  );\n  result.lineCount = Property.getValueOrClonedDefault(\n    this._lineCount,\n    time,\n    defaultLineCount,\n    result.lineCount,\n  );\n  result.lineThickness = Property.getValueOrClonedDefault(\n    this._lineThickness,\n    time,\n    defaultLineThickness,\n    result.lineThickness,\n  );\n  result.lineOffset = Property.getValueOrClonedDefault(\n    this._lineOffset,\n    time,\n    defaultLineOffset,\n    result.lineOffset,\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nGridMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof GridMaterialProperty && //\n      Property.equals(this._color, other._color) && //\n      Property.equals(this._cellAlpha, other._cellAlpha) && //\n      Property.equals(this._lineCount, other._lineCount) && //\n      Property.equals(this._lineThickness, other._lineThickness) && //\n      Property.equals(this._lineOffset, other._lineOffset))\n  );\n};\nexport default GridMaterialProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}