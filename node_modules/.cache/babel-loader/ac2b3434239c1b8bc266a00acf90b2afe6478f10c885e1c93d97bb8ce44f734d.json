{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport RectangleCollisionChecker from \"../Core/RectangleCollisionChecker.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport ShadowVolumeAppearance from \"../Scene/ShadowVolumeAppearance.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\nconst defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\n// Encapsulates a Primitive and all the entities that it represents.\nfunction Batch(primitives, classificationType, appearanceType, materialProperty, usingSphericalTextureCoordinates, zIndex) {\n  this.primitives = primitives; // scene level primitive collection\n  this.classificationType = classificationType;\n  this.appearanceType = appearanceType;\n  this.materialProperty = materialProperty;\n  this.updaters = new AssociativeArray();\n  this.createPrimitive = true;\n  this.primitive = undefined; // a GroundPrimitive encapsulating all the entities\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.material = undefined;\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.invalidated = false;\n  this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n  this.usingSphericalTextureCoordinates = usingSphericalTextureCoordinates;\n  this.zIndex = zIndex;\n  this.rectangleCollisionCheck = new RectangleCollisionChecker();\n}\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\nBatch.prototype.overlapping = function (rectangle) {\n  return this.rectangleCollisionCheck.collides(rectangle);\n};\n\n// Check if the given updater's material is compatible with this batch\nBatch.prototype.isMaterial = function (updater) {\n  const material = this.materialProperty;\n  const updaterMaterial = updater.fillMaterialProperty;\n  if (updaterMaterial === material || updaterMaterial instanceof ColorMaterialProperty && material instanceof ColorMaterialProperty) {\n    return true;\n  }\n  return defined(material) && material.equals(updaterMaterial);\n};\nBatch.prototype.add = function (time, updater, geometryInstance) {\n  const id = updater.id;\n  this.updaters.set(id, updater);\n  this.geometry.set(id, geometryInstance);\n  this.rectangleCollisionCheck.insert(id, geometryInstance.geometry.rectangle);\n  // Updaters with dynamic attributes must be tracked separately, may exit the batch\n  if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    const that = this;\n    // Listen for show changes. These will be synchronized in updateShows.\n    this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function (entity, propertyName, newValue, oldValue) {\n      if (propertyName === \"isShowing\") {\n        that.showsUpdated.set(updater.id, updater);\n      }\n    }));\n  }\n  this.createPrimitive = true;\n};\nBatch.prototype.remove = function (updater) {\n  const id = updater.id;\n  const geometryInstance = this.geometry.get(id);\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.rectangleCollisionCheck.remove(id, geometryInstance.geometry.rectangle);\n    this.updatersWithAttributes.remove(id);\n    const unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\nBatch.prototype.update = function (time) {\n  let isUpdated = true;\n  let primitive = this.primitive;\n  const primitives = this.primitives;\n  const geometries = this.geometry.values;\n  let i;\n  if (this.createPrimitive) {\n    const geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        // Keep a handle to the old primitive so it can be removed when the updated version is ready.\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          // For if the new primitive changes again before it is ready.\n          primitives.remove(primitive);\n        }\n      }\n      this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n      primitive = new GroundPrimitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType({\n          material: this.material\n          // translucent and closed properties overridden\n        }),\n        classificationType: this.classificationType\n      });\n      primitives.add(primitive, this.zIndex);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n      const oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n    this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n    this.primitive.appearance.material = this.material;\n    const updatersWithAttributes = this.updatersWithAttributes.values;\n    const length = updatersWithAttributes.length;\n    for (i = 0; i < length; i++) {\n      const updater = updatersWithAttributes[i];\n      const entity = updater.entity;\n      const instance = this.geometry.get(updater.id);\n      let attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n      const show = entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      const currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      }\n      const distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        const distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n        if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n        }\n      }\n    }\n    this.updateShows(primitive);\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n  return isUpdated;\n};\nBatch.prototype.updateShows = function (primitive) {\n  const showsUpdated = this.showsUpdated.values;\n  const length = showsUpdated.length;\n  for (let i = 0; i < length; i++) {\n    const updater = showsUpdated[i];\n    const entity = updater.entity;\n    const instance = this.geometry.get(updater.id);\n    let attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n    const show = entity.isShowing;\n    const currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  const primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n  const attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n  if (!defined(attributes) || !defined(attributes.boundingSphere) || defined(attributes.show) && attributes.show[0] === 0) {\n    return BoundingSphereState.FAILED;\n  }\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\nBatch.prototype.destroy = function () {\n  const primitive = this.primitive;\n  const primitives = this.primitives;\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n  }\n  const oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n  }\n  this.removeMaterialSubscription();\n};\n\n/**\n * @private\n */\nfunction StaticGroundGeometryPerMaterialBatch(primitives, classificationType, appearanceType) {\n  this._items = [];\n  this._primitives = primitives;\n  this._classificationType = classificationType;\n  this._appearanceType = appearanceType;\n}\nStaticGroundGeometryPerMaterialBatch.prototype.add = function (time, updater) {\n  const items = this._items;\n  const length = items.length;\n  const geometryInstance = updater.createFillGeometryInstance(time);\n  const usingSphericalTextureCoordinates = ShadowVolumeAppearance.shouldUseSphericalCoordinates(geometryInstance.geometry.rectangle);\n  const zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n  // Check if the Entity represented by the updater can be placed in an existing batch. Requirements:\n  // * compatible material (same material or same color)\n  // * same type of texture coordinates (spherical vs. planar)\n  // * conservatively non-overlapping with any entities in the existing batch\n  for (let i = 0; i < length; ++i) {\n    const item = items[i];\n    if (item.isMaterial(updater) && item.usingSphericalTextureCoordinates === usingSphericalTextureCoordinates && item.zIndex === zIndex && !item.overlapping(geometryInstance.geometry.rectangle)) {\n      item.add(time, updater, geometryInstance);\n      return;\n    }\n  }\n  // If a compatible batch wasn't found, create a new batch.\n  const batch = new Batch(this._primitives, this._classificationType, this._appearanceType, updater.fillMaterialProperty, usingSphericalTextureCoordinates, zIndex);\n  batch.add(time, updater, geometryInstance);\n  items.push(batch);\n};\nStaticGroundGeometryPerMaterialBatch.prototype.remove = function (updater) {\n  const items = this._items;\n  const length = items.length;\n  for (let i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n      break;\n    }\n  }\n};\nStaticGroundGeometryPerMaterialBatch.prototype.update = function (time) {\n  let i;\n  const items = this._items;\n  const length = items.length;\n  for (i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.invalidated) {\n      items.splice(i, 1);\n      const updaters = item.updaters.values;\n      const updatersLength = updaters.length;\n      for (let h = 0; h < updatersLength; h++) {\n        this.add(time, updaters[h]);\n      }\n      item.destroy();\n    }\n  }\n  let isUpdated = true;\n  for (i = 0; i < items.length; i++) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n  return isUpdated;\n};\nStaticGroundGeometryPerMaterialBatch.prototype.getBoundingSphere = function (updater, result) {\n  const items = this._items;\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    const item = items[i];\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n  return BoundingSphereState.FAILED;\n};\nStaticGroundGeometryPerMaterialBatch.prototype.removeAllPrimitives = function () {\n  const items = this._items;\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n  this._items.length = 0;\n};\nexport default StaticGroundGeometryPerMaterialBatch;","map":{"version":3,"names":["AssociativeArray","defined","DistanceDisplayCondition","DistanceDisplayConditionGeometryInstanceAttribute","RectangleCollisionChecker","ShowGeometryInstanceAttribute","GroundPrimitive","ShadowVolumeAppearance","BoundingSphereState","ColorMaterialProperty","MaterialProperty","Property","distanceDisplayConditionScratch","defaultDistanceDisplayCondition","Batch","primitives","classificationType","appearanceType","materialProperty","usingSphericalTextureCoordinates","zIndex","updaters","createPrimitive","primitive","undefined","oldPrimitive","geometry","material","updatersWithAttributes","attributes","invalidated","removeMaterialSubscription","definitionChanged","addEventListener","prototype","onMaterialChanged","subscriptions","showsUpdated","rectangleCollisionCheck","overlapping","rectangle","collides","isMaterial","updater","updaterMaterial","fillMaterialProperty","equals","add","time","geometryInstance","id","set","insert","hasConstantFill","isConstant","distanceDisplayConditionProperty","that","entity","propertyName","newValue","oldValue","remove","get","unsubscribe","update","isUpdated","geometries","values","i","geometriesLength","length","getValue","show","asynchronous","geometryInstances","slice","appearance","removeAll","ready","instance","getGeometryInstanceAttributes","isShowing","isFilled","currentShow","toValue","distanceDisplayCondition","getValueOrDefault","_lastDistanceDisplayCondition","clone","updateShows","value","contains","getBoundingSphere","result","PENDING","boundingSphere","FAILED","DONE","destroy","StaticGroundGeometryPerMaterialBatch","_items","_primitives","_classificationType","_appearanceType","items","createFillGeometryInstance","shouldUseSphericalCoordinates","item","batch","push","splice","updatersLength","h","removeAllPrimitives"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/StaticGroundGeometryPerMaterialBatch.js"],"sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport RectangleCollisionChecker from \"../Core/RectangleCollisionChecker.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport ShadowVolumeAppearance from \"../Scene/ShadowVolumeAppearance.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\n\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\nconst defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\n// Encapsulates a Primitive and all the entities that it represents.\nfunction Batch(\n  primitives,\n  classificationType,\n  appearanceType,\n  materialProperty,\n  usingSphericalTextureCoordinates,\n  zIndex,\n) {\n  this.primitives = primitives; // scene level primitive collection\n  this.classificationType = classificationType;\n  this.appearanceType = appearanceType;\n  this.materialProperty = materialProperty;\n  this.updaters = new AssociativeArray();\n  this.createPrimitive = true;\n  this.primitive = undefined; // a GroundPrimitive encapsulating all the entities\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.material = undefined;\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.invalidated = false;\n  this.removeMaterialSubscription =\n    materialProperty.definitionChanged.addEventListener(\n      Batch.prototype.onMaterialChanged,\n      this,\n    );\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n  this.usingSphericalTextureCoordinates = usingSphericalTextureCoordinates;\n  this.zIndex = zIndex;\n  this.rectangleCollisionCheck = new RectangleCollisionChecker();\n}\n\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\n\nBatch.prototype.overlapping = function (rectangle) {\n  return this.rectangleCollisionCheck.collides(rectangle);\n};\n\n// Check if the given updater's material is compatible with this batch\nBatch.prototype.isMaterial = function (updater) {\n  const material = this.materialProperty;\n  const updaterMaterial = updater.fillMaterialProperty;\n\n  if (\n    updaterMaterial === material ||\n    (updaterMaterial instanceof ColorMaterialProperty &&\n      material instanceof ColorMaterialProperty)\n  ) {\n    return true;\n  }\n  return defined(material) && material.equals(updaterMaterial);\n};\n\nBatch.prototype.add = function (time, updater, geometryInstance) {\n  const id = updater.id;\n  this.updaters.set(id, updater);\n  this.geometry.set(id, geometryInstance);\n  this.rectangleCollisionCheck.insert(id, geometryInstance.geometry.rectangle);\n  // Updaters with dynamic attributes must be tracked separately, may exit the batch\n  if (\n    !updater.hasConstantFill ||\n    !updater.fillMaterialProperty.isConstant ||\n    !Property.isConstant(updater.distanceDisplayConditionProperty)\n  ) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    const that = this;\n    // Listen for show changes. These will be synchronized in updateShows.\n    this.subscriptions.set(\n      id,\n      updater.entity.definitionChanged.addEventListener(\n        function (entity, propertyName, newValue, oldValue) {\n          if (propertyName === \"isShowing\") {\n            that.showsUpdated.set(updater.id, updater);\n          }\n        },\n      ),\n    );\n  }\n  this.createPrimitive = true;\n};\n\nBatch.prototype.remove = function (updater) {\n  const id = updater.id;\n  const geometryInstance = this.geometry.get(id);\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.rectangleCollisionCheck.remove(\n      id,\n      geometryInstance.geometry.rectangle,\n    );\n    this.updatersWithAttributes.remove(id);\n    const unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\n\nBatch.prototype.update = function (time) {\n  let isUpdated = true;\n  let primitive = this.primitive;\n  const primitives = this.primitives;\n  const geometries = this.geometry.values;\n  let i;\n\n  if (this.createPrimitive) {\n    const geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        // Keep a handle to the old primitive so it can be removed when the updated version is ready.\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          // For if the new primitive changes again before it is ready.\n          primitives.remove(primitive);\n        }\n      }\n\n      this.material = MaterialProperty.getValue(\n        time,\n        this.materialProperty,\n        this.material,\n      );\n\n      primitive = new GroundPrimitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType({\n          material: this.material,\n          // translucent and closed properties overridden\n        }),\n        classificationType: this.classificationType,\n      });\n\n      primitives.add(primitive, this.zIndex);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n      const oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    this.material = MaterialProperty.getValue(\n      time,\n      this.materialProperty,\n      this.material,\n    );\n    this.primitive.appearance.material = this.material;\n\n    const updatersWithAttributes = this.updatersWithAttributes.values;\n    const length = updatersWithAttributes.length;\n    for (i = 0; i < length; i++) {\n      const updater = updatersWithAttributes[i];\n      const entity = updater.entity;\n      const instance = this.geometry.get(updater.id);\n\n      let attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      const show =\n        entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      const currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(\n          show,\n          attributes.show,\n        );\n      }\n\n      const distanceDisplayConditionProperty =\n        updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        const distanceDisplayCondition = Property.getValueOrDefault(\n          distanceDisplayConditionProperty,\n          time,\n          defaultDistanceDisplayCondition,\n          distanceDisplayConditionScratch,\n        );\n        if (\n          !DistanceDisplayCondition.equals(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition,\n          )\n        ) {\n          attributes._lastDistanceDisplayCondition =\n            DistanceDisplayCondition.clone(\n              distanceDisplayCondition,\n              attributes._lastDistanceDisplayCondition,\n            );\n          attributes.distanceDisplayCondition =\n            DistanceDisplayConditionGeometryInstanceAttribute.toValue(\n              distanceDisplayCondition,\n              attributes.distanceDisplayCondition,\n            );\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  const showsUpdated = this.showsUpdated.values;\n  const length = showsUpdated.length;\n  for (let i = 0; i < length; i++) {\n    const updater = showsUpdated[i];\n    const entity = updater.entity;\n    const instance = this.geometry.get(updater.id);\n\n    let attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    const show = entity.isShowing;\n    const currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(\n        show,\n        attributes.show,\n      );\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  const primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n  const attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n  if (\n    !defined(attributes) ||\n    !defined(attributes.boundingSphere) ||\n    (defined(attributes.show) && attributes.show[0] === 0)\n  ) {\n    return BoundingSphereState.FAILED;\n  }\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.destroy = function () {\n  const primitive = this.primitive;\n  const primitives = this.primitives;\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n  }\n  const oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n  }\n  this.removeMaterialSubscription();\n};\n\n/**\n * @private\n */\nfunction StaticGroundGeometryPerMaterialBatch(\n  primitives,\n  classificationType,\n  appearanceType,\n) {\n  this._items = [];\n  this._primitives = primitives;\n  this._classificationType = classificationType;\n  this._appearanceType = appearanceType;\n}\n\nStaticGroundGeometryPerMaterialBatch.prototype.add = function (time, updater) {\n  const items = this._items;\n  const length = items.length;\n  const geometryInstance = updater.createFillGeometryInstance(time);\n  const usingSphericalTextureCoordinates =\n    ShadowVolumeAppearance.shouldUseSphericalCoordinates(\n      geometryInstance.geometry.rectangle,\n    );\n  const zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n  // Check if the Entity represented by the updater can be placed in an existing batch. Requirements:\n  // * compatible material (same material or same color)\n  // * same type of texture coordinates (spherical vs. planar)\n  // * conservatively non-overlapping with any entities in the existing batch\n  for (let i = 0; i < length; ++i) {\n    const item = items[i];\n    if (\n      item.isMaterial(updater) &&\n      item.usingSphericalTextureCoordinates ===\n        usingSphericalTextureCoordinates &&\n      item.zIndex === zIndex &&\n      !item.overlapping(geometryInstance.geometry.rectangle)\n    ) {\n      item.add(time, updater, geometryInstance);\n      return;\n    }\n  }\n  // If a compatible batch wasn't found, create a new batch.\n  const batch = new Batch(\n    this._primitives,\n    this._classificationType,\n    this._appearanceType,\n    updater.fillMaterialProperty,\n    usingSphericalTextureCoordinates,\n    zIndex,\n  );\n  batch.add(time, updater, geometryInstance);\n  items.push(batch);\n};\n\nStaticGroundGeometryPerMaterialBatch.prototype.remove = function (updater) {\n  const items = this._items;\n  const length = items.length;\n  for (let i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n      break;\n    }\n  }\n};\n\nStaticGroundGeometryPerMaterialBatch.prototype.update = function (time) {\n  let i;\n  const items = this._items;\n  const length = items.length;\n\n  for (i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.invalidated) {\n      items.splice(i, 1);\n      const updaters = item.updaters.values;\n      const updatersLength = updaters.length;\n      for (let h = 0; h < updatersLength; h++) {\n        this.add(time, updaters[h]);\n      }\n      item.destroy();\n    }\n  }\n\n  let isUpdated = true;\n  for (i = 0; i < items.length; i++) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n  return isUpdated;\n};\n\nStaticGroundGeometryPerMaterialBatch.prototype.getBoundingSphere = function (\n  updater,\n  result,\n) {\n  const items = this._items;\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    const item = items[i];\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n  return BoundingSphereState.FAILED;\n};\n\nStaticGroundGeometryPerMaterialBatch.prototype.removeAllPrimitives =\n  function () {\n    const items = this._items;\n    const length = items.length;\n    for (let i = 0; i < length; i++) {\n      items[i].destroy();\n    }\n    this._items.length = 0;\n  };\nexport default StaticGroundGeometryPerMaterialBatch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}