{"ast":null,"code":"import { defaultValue, defined, destroyObject, DeveloperError, Fullscreen, getElement } from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link FullscreenButton}.\n * @alias FullscreenButtonViewModel\n * @constructor\n *\n * @param {Element|string} [fullscreenElement=document.body] The element or id to be placed into fullscreen mode.\n * @param {Element|string} [container] The DOM element or ID that will contain the widget.\n */\nfunction FullscreenButtonViewModel(fullscreenElement, container) {\n  if (!defined(container)) {\n    container = document.body;\n  }\n  container = getElement(container);\n  const that = this;\n  const tmpIsFullscreen = knockout.observable(Fullscreen.fullscreen);\n  const tmpIsEnabled = knockout.observable(Fullscreen.enabled);\n  const ownerDocument = container.ownerDocument;\n\n  /**\n   * Gets whether or not fullscreen mode is active.  This property is observable.\n   *\n   * @type {boolean}\n   */\n  this.isFullscreen = undefined;\n  knockout.defineProperty(this, \"isFullscreen\", {\n    get: function () {\n      return tmpIsFullscreen();\n    }\n  });\n\n  /**\n   * Gets or sets whether or not fullscreen functionality should be enabled.  This property is observable.\n   *\n   * @type {boolean}\n   * @see Fullscreen.enabled\n   */\n  this.isFullscreenEnabled = undefined;\n  knockout.defineProperty(this, \"isFullscreenEnabled\", {\n    get: function () {\n      return tmpIsEnabled();\n    },\n    set: function (value) {\n      tmpIsEnabled(value && Fullscreen.enabled);\n    }\n  });\n\n  /**\n   * Gets the tooltip.  This property is observable.\n   *\n   * @type {string}\n   */\n  this.tooltip = undefined;\n  knockout.defineProperty(this, \"tooltip\", function () {\n    if (!this.isFullscreenEnabled) {\n      return \"Full screen unavailable\";\n    }\n    return tmpIsFullscreen() ? \"Exit full screen\" : \"Full screen\";\n  });\n  this._command = createCommand(function () {\n    if (Fullscreen.fullscreen) {\n      Fullscreen.exitFullscreen();\n    } else {\n      Fullscreen.requestFullscreen(that._fullscreenElement);\n    }\n  }, knockout.getObservable(this, \"isFullscreenEnabled\"));\n  this._fullscreenElement = defaultValue(getElement(fullscreenElement), ownerDocument.body);\n  this._callback = function () {\n    tmpIsFullscreen(Fullscreen.fullscreen);\n  };\n  ownerDocument.addEventListener(Fullscreen.changeEventName, this._callback);\n}\nObject.defineProperties(FullscreenButtonViewModel.prototype, {\n  /**\n   * Gets or sets the HTML element to place into fullscreen mode when the\n   * corresponding button is pressed.\n   * @memberof FullscreenButtonViewModel.prototype\n   *\n   * @type {Element}\n   */\n  fullscreenElement: {\n    //TODO:@exception {DeveloperError} value must be a valid HTML Element.\n    get: function () {\n      return this._fullscreenElement;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!(value instanceof Element)) {\n        throw new DeveloperError(\"value must be a valid Element.\");\n      }\n      //>>includeEnd('debug');\n\n      this._fullscreenElement = value;\n    }\n  },\n  /**\n   * Gets the Command to toggle fullscreen mode.\n   * @memberof FullscreenButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    }\n  }\n});\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nFullscreenButtonViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.  Should be called to\n * properly clean up the view model when it is no longer needed.\n */\nFullscreenButtonViewModel.prototype.destroy = function () {\n  document.removeEventListener(Fullscreen.changeEventName, this._callback);\n  destroyObject(this);\n};\nexport default FullscreenButtonViewModel;","map":{"version":3,"names":["defaultValue","defined","destroyObject","DeveloperError","Fullscreen","getElement","knockout","createCommand","FullscreenButtonViewModel","fullscreenElement","container","document","body","that","tmpIsFullscreen","observable","fullscreen","tmpIsEnabled","enabled","ownerDocument","isFullscreen","undefined","defineProperty","get","isFullscreenEnabled","set","value","tooltip","_command","exitFullscreen","requestFullscreen","_fullscreenElement","getObservable","_callback","addEventListener","changeEventName","Object","defineProperties","prototype","Element","command","isDestroyed","destroy","removeEventListener"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/FullscreenButton/FullscreenButtonViewModel.js"],"sourcesContent":["import {\n  defaultValue,\n  defined,\n  destroyObject,\n  DeveloperError,\n  Fullscreen,\n  getElement,\n} from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link FullscreenButton}.\n * @alias FullscreenButtonViewModel\n * @constructor\n *\n * @param {Element|string} [fullscreenElement=document.body] The element or id to be placed into fullscreen mode.\n * @param {Element|string} [container] The DOM element or ID that will contain the widget.\n */\nfunction FullscreenButtonViewModel(fullscreenElement, container) {\n  if (!defined(container)) {\n    container = document.body;\n  }\n\n  container = getElement(container);\n\n  const that = this;\n\n  const tmpIsFullscreen = knockout.observable(Fullscreen.fullscreen);\n  const tmpIsEnabled = knockout.observable(Fullscreen.enabled);\n  const ownerDocument = container.ownerDocument;\n\n  /**\n   * Gets whether or not fullscreen mode is active.  This property is observable.\n   *\n   * @type {boolean}\n   */\n  this.isFullscreen = undefined;\n  knockout.defineProperty(this, \"isFullscreen\", {\n    get: function () {\n      return tmpIsFullscreen();\n    },\n  });\n\n  /**\n   * Gets or sets whether or not fullscreen functionality should be enabled.  This property is observable.\n   *\n   * @type {boolean}\n   * @see Fullscreen.enabled\n   */\n  this.isFullscreenEnabled = undefined;\n  knockout.defineProperty(this, \"isFullscreenEnabled\", {\n    get: function () {\n      return tmpIsEnabled();\n    },\n    set: function (value) {\n      tmpIsEnabled(value && Fullscreen.enabled);\n    },\n  });\n\n  /**\n   * Gets the tooltip.  This property is observable.\n   *\n   * @type {string}\n   */\n  this.tooltip = undefined;\n  knockout.defineProperty(this, \"tooltip\", function () {\n    if (!this.isFullscreenEnabled) {\n      return \"Full screen unavailable\";\n    }\n    return tmpIsFullscreen() ? \"Exit full screen\" : \"Full screen\";\n  });\n\n  this._command = createCommand(\n    function () {\n      if (Fullscreen.fullscreen) {\n        Fullscreen.exitFullscreen();\n      } else {\n        Fullscreen.requestFullscreen(that._fullscreenElement);\n      }\n    },\n    knockout.getObservable(this, \"isFullscreenEnabled\"),\n  );\n\n  this._fullscreenElement = defaultValue(\n    getElement(fullscreenElement),\n    ownerDocument.body,\n  );\n\n  this._callback = function () {\n    tmpIsFullscreen(Fullscreen.fullscreen);\n  };\n  ownerDocument.addEventListener(Fullscreen.changeEventName, this._callback);\n}\n\nObject.defineProperties(FullscreenButtonViewModel.prototype, {\n  /**\n   * Gets or sets the HTML element to place into fullscreen mode when the\n   * corresponding button is pressed.\n   * @memberof FullscreenButtonViewModel.prototype\n   *\n   * @type {Element}\n   */\n  fullscreenElement: {\n    //TODO:@exception {DeveloperError} value must be a valid HTML Element.\n    get: function () {\n      return this._fullscreenElement;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!(value instanceof Element)) {\n        throw new DeveloperError(\"value must be a valid Element.\");\n      }\n      //>>includeEnd('debug');\n\n      this._fullscreenElement = value;\n    },\n  },\n\n  /**\n   * Gets the Command to toggle fullscreen mode.\n   * @memberof FullscreenButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    },\n  },\n});\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nFullscreenButtonViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.  Should be called to\n * properly clean up the view model when it is no longer needed.\n */\nFullscreenButtonViewModel.prototype.destroy = function () {\n  document.removeEventListener(Fullscreen.changeEventName, this._callback);\n  destroyObject(this);\n};\nexport default FullscreenButtonViewModel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}