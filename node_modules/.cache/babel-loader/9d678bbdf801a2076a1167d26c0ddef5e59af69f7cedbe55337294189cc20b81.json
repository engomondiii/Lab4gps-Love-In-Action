{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport PerInstanceFlatColorAppearanceFS from \"../Shaders/Appearances/PerInstanceFlatColorAppearanceFS.js\";\nimport PolylineColorAppearanceVS from \"../Shaders/Appearances/PolylineColorAppearanceVS.js\";\nimport PolylineCommon from \"../Shaders/PolylineCommon.js\";\nimport Appearance from \"./Appearance.js\";\nlet defaultVertexShaderSource = `${PolylineCommon}\\n${PolylineColorAppearanceVS}`;\nconst defaultFragmentShaderSource = PerInstanceFlatColorAppearanceFS;\nif (!FeatureDetection.isInternetExplorer()) {\n  defaultVertexShaderSource = `#define CLIP_POLYLINE \\n${defaultVertexShaderSource}`;\n}\n\n/**\n * An appearance for {@link GeometryInstance} instances with color attributes and\n * {@link PolylineGeometry} or {@link GroundPolylineGeometry}.\n * This allows several geometry instances, each with a different color, to\n * be drawn with the same {@link Primitive}.\n *\n * @alias PolylineColorAppearance\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link PolylineColorAppearance#renderState} has alpha blending enabled.\n * @param {string} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {string} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {object} [options.renderState] Optional render state to override the default render state.\n *\n * @example\n * // A solid white line segment\n * const primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.PolylineGeometry({\n *       positions : Cesium.Cartesian3.fromDegreesArray([\n *         0.0, 0.0,\n *         5.0, 0.0\n *       ]),\n *       width : 10.0,\n *       vertexFormat : Cesium.PolylineColorAppearance.VERTEX_FORMAT\n *     }),\n *     attributes : {\n *       color : Cesium.ColorGeometryInstanceAttribute.fromColor(new Cesium.Color(1.0, 1.0, 1.0, 1.0))\n *     }\n *   }),\n *   appearance : new Cesium.PolylineColorAppearance({\n *     translucent : false\n *   })\n * });\n */\nfunction PolylineColorAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const translucent = defaultValue(options.translucent, true);\n  const closed = false;\n  const vertexFormat = PolylineColorAppearance.VERTEX_FORMAT;\n\n  /**\n   * This property is part of the {@link Appearance} interface, but is not\n   * used by {@link PolylineColorAppearance} since a fully custom fragment shader is used.\n   *\n   * @type Material\n   *\n   * @default undefined\n   */\n  this.material = undefined;\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent so\n   * {@link PolylineColorAppearance#renderState} has alpha blending enabled.\n   *\n   * @type {boolean}\n   *\n   * @default true\n   */\n  this.translucent = translucent;\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, defaultVertexShaderSource);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, defaultFragmentShaderSource);\n  this._renderState = Appearance.getDefaultRenderState(translucent, closed, options.renderState);\n  this._closed = closed;\n\n  // Non-derived members\n\n  this._vertexFormat = vertexFormat;\n}\nObject.defineProperties(PolylineColorAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    }\n  },\n  /**\n   * The GLSL source code for the fragment shader.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    }\n  },\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link PolylineColorAppearance}\n   * instance, or it is set implicitly via {@link PolylineColorAppearance#translucent}.\n   * </p>\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    }\n  },\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link PolylineColorAppearance#renderState} has backface culling enabled.\n   * This is always <code>false</code> for <code>PolylineColorAppearance</code>.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    }\n  },\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link PolylineColorAppearance.VERTEX_FORMAT}\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    }\n  }\n});\n\n/**\n * The {@link VertexFormat} that all {@link PolylineColorAppearance} instances\n * are compatible with. This requires only a <code>position</code> attribute.\n *\n * @type VertexFormat\n *\n * @constant\n */\nPolylineColorAppearance.VERTEX_FORMAT = VertexFormat.POSITION_ONLY;\n\n/**\n * Procedurally creates the full GLSL fragment shader source.\n *\n * @function\n *\n * @returns {string} The full GLSL fragment shader source.\n */\nPolylineColorAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link PolylineColorAppearance#translucent}.\n *\n * @function\n *\n * @returns {boolean} <code>true</code> if the appearance is translucent.\n */\nPolylineColorAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {object} The render state.\n */\nPolylineColorAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\nexport default PolylineColorAppearance;","map":{"version":3,"names":["defaultValue","FeatureDetection","VertexFormat","PerInstanceFlatColorAppearanceFS","PolylineColorAppearanceVS","PolylineCommon","Appearance","defaultVertexShaderSource","defaultFragmentShaderSource","isInternetExplorer","PolylineColorAppearance","options","EMPTY_OBJECT","translucent","closed","vertexFormat","VERTEX_FORMAT","material","undefined","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","getDefaultRenderState","renderState","_closed","_vertexFormat","Object","defineProperties","prototype","get","POSITION_ONLY","getFragmentShaderSource","isTranslucent","getRenderState"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/PolylineColorAppearance.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport PerInstanceFlatColorAppearanceFS from \"../Shaders/Appearances/PerInstanceFlatColorAppearanceFS.js\";\nimport PolylineColorAppearanceVS from \"../Shaders/Appearances/PolylineColorAppearanceVS.js\";\nimport PolylineCommon from \"../Shaders/PolylineCommon.js\";\nimport Appearance from \"./Appearance.js\";\n\nlet defaultVertexShaderSource = `${PolylineCommon}\\n${PolylineColorAppearanceVS}`;\nconst defaultFragmentShaderSource = PerInstanceFlatColorAppearanceFS;\n\nif (!FeatureDetection.isInternetExplorer()) {\n  defaultVertexShaderSource = `#define CLIP_POLYLINE \\n${defaultVertexShaderSource}`;\n}\n\n/**\n * An appearance for {@link GeometryInstance} instances with color attributes and\n * {@link PolylineGeometry} or {@link GroundPolylineGeometry}.\n * This allows several geometry instances, each with a different color, to\n * be drawn with the same {@link Primitive}.\n *\n * @alias PolylineColorAppearance\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link PolylineColorAppearance#renderState} has alpha blending enabled.\n * @param {string} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {string} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {object} [options.renderState] Optional render state to override the default render state.\n *\n * @example\n * // A solid white line segment\n * const primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.PolylineGeometry({\n *       positions : Cesium.Cartesian3.fromDegreesArray([\n *         0.0, 0.0,\n *         5.0, 0.0\n *       ]),\n *       width : 10.0,\n *       vertexFormat : Cesium.PolylineColorAppearance.VERTEX_FORMAT\n *     }),\n *     attributes : {\n *       color : Cesium.ColorGeometryInstanceAttribute.fromColor(new Cesium.Color(1.0, 1.0, 1.0, 1.0))\n *     }\n *   }),\n *   appearance : new Cesium.PolylineColorAppearance({\n *     translucent : false\n *   })\n * });\n */\nfunction PolylineColorAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const translucent = defaultValue(options.translucent, true);\n  const closed = false;\n  const vertexFormat = PolylineColorAppearance.VERTEX_FORMAT;\n\n  /**\n   * This property is part of the {@link Appearance} interface, but is not\n   * used by {@link PolylineColorAppearance} since a fully custom fragment shader is used.\n   *\n   * @type Material\n   *\n   * @default undefined\n   */\n  this.material = undefined;\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent so\n   * {@link PolylineColorAppearance#renderState} has alpha blending enabled.\n   *\n   * @type {boolean}\n   *\n   * @default true\n   */\n  this.translucent = translucent;\n\n  this._vertexShaderSource = defaultValue(\n    options.vertexShaderSource,\n    defaultVertexShaderSource,\n  );\n  this._fragmentShaderSource = defaultValue(\n    options.fragmentShaderSource,\n    defaultFragmentShaderSource,\n  );\n  this._renderState = Appearance.getDefaultRenderState(\n    translucent,\n    closed,\n    options.renderState,\n  );\n  this._closed = closed;\n\n  // Non-derived members\n\n  this._vertexFormat = vertexFormat;\n}\n\nObject.defineProperties(PolylineColorAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link PolylineColorAppearance}\n   * instance, or it is set implicitly via {@link PolylineColorAppearance#translucent}.\n   * </p>\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link PolylineColorAppearance#renderState} has backface culling enabled.\n   * This is always <code>false</code> for <code>PolylineColorAppearance</code>.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof PolylineColorAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link PolylineColorAppearance.VERTEX_FORMAT}\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    },\n  },\n});\n\n/**\n * The {@link VertexFormat} that all {@link PolylineColorAppearance} instances\n * are compatible with. This requires only a <code>position</code> attribute.\n *\n * @type VertexFormat\n *\n * @constant\n */\nPolylineColorAppearance.VERTEX_FORMAT = VertexFormat.POSITION_ONLY;\n\n/**\n * Procedurally creates the full GLSL fragment shader source.\n *\n * @function\n *\n * @returns {string} The full GLSL fragment shader source.\n */\nPolylineColorAppearance.prototype.getFragmentShaderSource =\n  Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link PolylineColorAppearance#translucent}.\n *\n * @function\n *\n * @returns {boolean} <code>true</code> if the appearance is translucent.\n */\nPolylineColorAppearance.prototype.isTranslucent =\n  Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {object} The render state.\n */\nPolylineColorAppearance.prototype.getRenderState =\n  Appearance.prototype.getRenderState;\nexport default PolylineColorAppearance;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,yBAAyB;AAClD,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,gCAAgC,MAAM,4DAA4D;AACzG,OAAOC,yBAAyB,MAAM,qDAAqD;AAC3F,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,UAAU,MAAM,iBAAiB;AAExC,IAAIC,yBAAyB,GAAG,GAAGF,cAAc,KAAKD,yBAAyB,EAAE;AACjF,MAAMI,2BAA2B,GAAGL,gCAAgC;AAEpE,IAAI,CAACF,gBAAgB,CAACQ,kBAAkB,CAAC,CAAC,EAAE;EAC1CF,yBAAyB,GAAG,2BAA2BA,yBAAyB,EAAE;AACpF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,uBAAuBA,CAACC,OAAO,EAAE;EACxCA,OAAO,GAAGX,YAAY,CAACW,OAAO,EAAEX,YAAY,CAACY,YAAY,CAAC;EAE1D,MAAMC,WAAW,GAAGb,YAAY,CAACW,OAAO,CAACE,WAAW,EAAE,IAAI,CAAC;EAC3D,MAAMC,MAAM,GAAG,KAAK;EACpB,MAAMC,YAAY,GAAGL,uBAAuB,CAACM,aAAa;;EAE1D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,QAAQ,GAAGC,SAAS;;EAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACL,WAAW,GAAGA,WAAW;EAE9B,IAAI,CAACM,mBAAmB,GAAGnB,YAAY,CACrCW,OAAO,CAACS,kBAAkB,EAC1Bb,yBACF,CAAC;EACD,IAAI,CAACc,qBAAqB,GAAGrB,YAAY,CACvCW,OAAO,CAACW,oBAAoB,EAC5Bd,2BACF,CAAC;EACD,IAAI,CAACe,YAAY,GAAGjB,UAAU,CAACkB,qBAAqB,CAClDX,WAAW,EACXC,MAAM,EACNH,OAAO,CAACc,WACV,CAAC;EACD,IAAI,CAACC,OAAO,GAAGZ,MAAM;;EAErB;;EAEA,IAAI,CAACa,aAAa,GAAGZ,YAAY;AACnC;AAEAa,MAAM,CAACC,gBAAgB,CAACnB,uBAAuB,CAACoB,SAAS,EAAE;EACzD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEV,kBAAkB,EAAE;IAClBW,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACZ,mBAAmB;IACjC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,oBAAoB,EAAE;IACpBS,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACV,qBAAqB;IACnC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,WAAW,EAAE;IACXM,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACR,YAAY;IAC1B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACET,MAAM,EAAE;IACNiB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACL,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEX,YAAY,EAAE;IACZgB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACJ,aAAa;IAC3B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,uBAAuB,CAACM,aAAa,GAAGd,YAAY,CAAC8B,aAAa;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,uBAAuB,CAACoB,SAAS,CAACG,uBAAuB,GACvD3B,UAAU,CAACwB,SAAS,CAACG,uBAAuB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACAvB,uBAAuB,CAACoB,SAAS,CAACI,aAAa,GAC7C5B,UAAU,CAACwB,SAAS,CAACI,aAAa;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxB,uBAAuB,CAACoB,SAAS,CAACK,cAAc,GAC9C7B,UAAU,CAACwB,SAAS,CAACK,cAAc;AACrC,eAAezB,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}