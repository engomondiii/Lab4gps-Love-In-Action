{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Globe/Globe.js\",\n  _s = $RefreshSig$();\n/* global Cesium */\nimport React, { useEffect, useRef } from 'react';\nimport { useLang } from '../Context/LangContext'; // Import your global language context\nimport '../styles/Globe.css'; // Import the separate style file\nimport useLocationInfo from '../hooks/useLocationInfo'; // Import the custom hook\nimport PropTypes from 'prop-types';\n\n/**\n * Function to perform reverse geocoding using OpenCage Geocoding API.\n * In production, it's recommended to handle this on the backend to secure the API key.\n *\n * @param {string} latitude\n * @param {string} longitude\n * @returns {Promise<string>} - Returns the formatted address.\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst reverseGeocode = async (latitude, longitude) => {\n  const apiKey = process.env.REACT_APP_OPENCAGE_API_KEY; // Ensure this is set in .env\n  const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.results && data.results.length > 0) {\n      return data.results[0].formatted;\n    } else {\n      return 'Address not found';\n    }\n  } catch (error) {\n    console.error('Error in reverse geocoding:', error);\n    throw error;\n  }\n};\nconst Globe = () => {\n  _s();\n  const globeRef = useRef(null); // Reference to the Cesium container div\n  const viewerRef = useRef(null); // Reference to the Cesium Viewer instance\n  const animationIdRef = useRef(null); // Reference to the animation frame ID\n\n  // Use the global language context to determine if text should be English or Korean\n  const {\n    language\n  } = useLang();\n\n  // Inline dictionary for multi-language support\n  const text = {\n    en: {\n      stopRotation: \"Stop Rotation\",\n      startRotation: \"Start Rotation\",\n      locationDetails: \"Location Details\",\n      address: \"Address\",\n      latitude: \"Latitude\",\n      longitude: \"Longitude\",\n      height: \"Height\",\n      zoomLevel: \"Zoom Level\",\n      unknown: \"Unknown\",\n      loading: \"Loading...\",\n      error: \"Error\"\n    },\n    ko: {\n      stopRotation: \"회전 중지\",\n      startRotation: \"회전 시작\",\n      locationDetails: \"위치 정보\",\n      address: \"주소\",\n      latitude: \"위도\",\n      longitude: \"경도\",\n      height: \"높이\",\n      zoomLevel: \"확대 수준\",\n      unknown: \"알 수 없음\",\n      loading: \"로딩 중...\",\n      error: \"오류\"\n    }\n  };\n\n  // Helper function to return the correct text based on the current language\n  const t = key => text[language][key];\n\n  /**\n   * Function to handle manual stop rotation.\n   */\n  const handleStopRotationClick = () => {\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n    }\n  };\n\n  /**\n   * Function to handle manual start rotation.\n   */\n  const handleStartRotationClick = () => {\n    if (!animationIdRef.current && viewerRef.current) {\n      const rotateEarth = () => {\n        const spinRate = 0.01;\n        const delta = spinRate / 60; // Assuming 60 FPS\n        viewerRef.current.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -delta);\n        animationIdRef.current = requestAnimationFrame(rotateEarth);\n      };\n      rotateEarth();\n    }\n  };\n\n  /**\n   * Hide or show other site elements (Navbar, Footer, Home text, etc.)\n   * based on whether we're in fullscreen mode.\n   */\n  const toggleElementsVisibility = hide => {\n    // List any CSS selectors you want hidden in fullscreen\n    const selectors = ['.navbar',\n    // Navbar\n    '.footer',\n    // Footer\n    '.intro',\n    // Intro section in Home.js\n    '.features' // Features section in Home.js\n    ];\n    selectors.forEach(selector => {\n      document.querySelectorAll(selector).forEach(elem => {\n        // If hide === true => display: 'none'\n        // If hide === false => display: ''\n        elem.style.display = hide ? 'none' : '';\n      });\n    });\n  };\n\n  /**\n   * Check for 'fullscreenchange' events:\n   * if document.fullscreenElement is set, we hide other site elements;\n   * otherwise, we restore them.\n   */\n  const handleFullScreenChange = () => {\n    const isFullScreen = !!document.fullscreenElement;\n    toggleElementsVisibility(isFullScreen);\n  };\n\n  // Initialize Cesium Viewer and handle rotation controls\n  useEffect(() => {\n    // Set your Cesium Ion access token from environment variables\n    Cesium.Ion.defaultAccessToken = process.env.REACT_APP_CESIUM_ION_ACCESS_TOKEN;\n\n    // Listen for the 'fullscreenchange' event on the document\n    document.addEventListener('fullscreenchange', handleFullScreenChange);\n\n    // Initialize Cesium Viewer if it doesn't exist yet\n    if (globeRef.current && !viewerRef.current) {\n      try {\n        viewerRef.current = new Cesium.Viewer(globeRef.current, {\n          terrainProvider: Cesium.createWorldTerrain(),\n          // High-resolution terrain\n          imageryProvider: new Cesium.IonImageryProvider({\n            assetId: 2\n          }),\n          // Example asset ID\n          baseLayerPicker: false,\n          geocoder: false,\n          homeButton: false,\n          infoBox: false,\n          // We'll handle info boxes manually\n          navigationHelpButton: false,\n          sceneModePicker: false,\n          timeline: false,\n          animation: false,\n          fullscreenButton: true,\n          // Enable fullscreen\n          requestRenderMode: true,\n          maximumRenderTimeChange: Infinity\n        });\n\n        // Set initial camera view (New York coordinates as example)\n        viewerRef.current.camera.setView({\n          destination: Cesium.Cartesian3.fromDegrees(-74.0707383, 40.7117244, 10000000),\n          orientation: {\n            heading: Cesium.Math.toRadians(0),\n            pitch: Cesium.Math.toRadians(-90),\n            roll: 0.0\n          }\n        });\n\n        // Continuous rotation\n        const rotateEarth = () => {\n          const spinRate = 0.01;\n          const delta = spinRate / 60; // 60 FPS assumption\n          viewerRef.current.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -delta);\n          animationIdRef.current = requestAnimationFrame(rotateEarth);\n        };\n        rotateEarth(); // Start rotation immediately\n\n        // Scene interactions to stop/start rotation on user actions\n        viewerRef.current.scene.screenSpaceCameraController.inertiaSpin = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaTranslate = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaZoom = 0;\n        const stopRotation = () => {\n          if (animationIdRef.current) {\n            cancelAnimationFrame(animationIdRef.current);\n            animationIdRef.current = null;\n          }\n        };\n        const startRotation = () => {\n          if (!animationIdRef.current) {\n            rotateEarth();\n          }\n        };\n\n        // Stop rotation on pointer down/wheel\n        viewerRef.current.canvas.addEventListener('pointerdown', stopRotation);\n        viewerRef.current.canvas.addEventListener('wheel', stopRotation, {\n          passive: true\n        });\n\n        // Resume rotation on pointer up/wheel end\n        viewerRef.current.canvas.addEventListener('pointerup', startRotation);\n        viewerRef.current.canvas.addEventListener('wheel', startRotation, {\n          passive: true,\n          capture: true\n        });\n      } catch (error) {\n        console.error('Failed to initialize Cesium viewer:', error);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullScreenChange);\n      if (viewerRef.current) {\n        viewerRef.current.destroy();\n        viewerRef.current = null;\n      }\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n    };\n  }, []);\n\n  // Use the custom hook to manage location info\n  const {\n    locationInfo,\n    loading,\n    error\n  } = useLocationInfo(viewerRef.current, Cesium, reverseGeocode);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef,\n      id: \"cesiumContainer\",\n      style: {\n        height: '100vh',\n        width: '100vw'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"stop-rotation-button\",\n          onClick: handleStopRotationClick,\n          \"aria-label\": t(\"stopRotation\"),\n          children: t(\"stopRotation\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-rotation-button\",\n          onClick: handleStartRotationClick,\n          \"aria-label\": text[language].startRotation,\n          children: text[language].startRotation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-info-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: text[language].locationDetails\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: text[language].loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 23\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: `${text[language].error}: ${error}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), locationInfo && !loading && !error && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [text[language].address, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 18\n            }, this), \" \", locationInfo.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [text[language].latitude, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 18\n            }, this), \" \", locationInfo.latitude]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [text[language].longitude, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 18\n            }, this), \" \", locationInfo.longitude]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [text[language].height, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 18\n            }, this), \" \", locationInfo.height, \" meters\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [text[language].zoomLevel, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 18\n            }, this), \" \", locationInfo.zoomLevel]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Globe, \"ogHvYPGNWetAjuUfyW/k9sZxI9E=\", false, function () {\n  return [useLang, useLocationInfo];\n});\n_c = Globe;\nGlobe.propTypes = {\n  // Define prop types if necessary\n};\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useLang","useLocationInfo","PropTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","reverseGeocode","latitude","longitude","apiKey","process","env","REACT_APP_OPENCAGE_API_KEY","url","response","fetch","data","json","results","length","formatted","error","console","Globe","_s","globeRef","viewerRef","animationIdRef","language","text","en","stopRotation","startRotation","locationDetails","address","height","zoomLevel","unknown","loading","ko","t","key","handleStopRotationClick","current","cancelAnimationFrame","handleStartRotationClick","rotateEarth","spinRate","delta","scene","camera","rotate","Cesium","Cartesian3","UNIT_Z","requestAnimationFrame","toggleElementsVisibility","hide","selectors","forEach","selector","document","querySelectorAll","elem","style","display","handleFullScreenChange","isFullScreen","fullscreenElement","Ion","defaultAccessToken","REACT_APP_CESIUM_ION_ACCESS_TOKEN","addEventListener","Viewer","terrainProvider","createWorldTerrain","imageryProvider","IonImageryProvider","assetId","baseLayerPicker","geocoder","homeButton","infoBox","navigationHelpButton","sceneModePicker","timeline","animation","fullscreenButton","requestRenderMode","maximumRenderTimeChange","Infinity","setView","destination","fromDegrees","orientation","heading","Math","toRadians","pitch","roll","screenSpaceCameraController","inertiaSpin","inertiaTranslate","inertiaZoom","canvas","passive","capture","removeEventListener","destroy","locationInfo","children","ref","id","width","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","$RefreshReg$"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Globe/Globe.js"],"sourcesContent":["/* global Cesium */\nimport React, { useEffect, useRef } from 'react';\nimport { useLang } from '../Context/LangContext'; // Import your global language context\nimport '../styles/Globe.css'; // Import the separate style file\nimport useLocationInfo from '../hooks/useLocationInfo'; // Import the custom hook\nimport PropTypes from 'prop-types';\n\n/**\n * Function to perform reverse geocoding using OpenCage Geocoding API.\n * In production, it's recommended to handle this on the backend to secure the API key.\n *\n * @param {string} latitude\n * @param {string} longitude\n * @returns {Promise<string>} - Returns the formatted address.\n */\nconst reverseGeocode = async (latitude, longitude) => {\n  const apiKey = process.env.REACT_APP_OPENCAGE_API_KEY; // Ensure this is set in .env\n  const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.results && data.results.length > 0) {\n      return data.results[0].formatted;\n    } else {\n      return 'Address not found';\n    }\n  } catch (error) {\n    console.error('Error in reverse geocoding:', error);\n    throw error;\n  }\n};\n\nconst Globe = () => {\n  const globeRef = useRef(null); // Reference to the Cesium container div\n  const viewerRef = useRef(null); // Reference to the Cesium Viewer instance\n  const animationIdRef = useRef(null); // Reference to the animation frame ID\n\n  // Use the global language context to determine if text should be English or Korean\n  const { language } = useLang();\n\n  // Inline dictionary for multi-language support\n  const text = {\n    en: {\n      stopRotation: \"Stop Rotation\",\n      startRotation: \"Start Rotation\",\n      locationDetails: \"Location Details\",\n      address: \"Address\",\n      latitude: \"Latitude\",\n      longitude: \"Longitude\",\n      height: \"Height\",\n      zoomLevel: \"Zoom Level\",\n      unknown: \"Unknown\",\n      loading: \"Loading...\",\n      error: \"Error\",\n    },\n    ko: {\n      stopRotation: \"회전 중지\",\n      startRotation: \"회전 시작\",\n      locationDetails: \"위치 정보\",\n      address: \"주소\",\n      latitude: \"위도\",\n      longitude: \"경도\",\n      height: \"높이\",\n      zoomLevel: \"확대 수준\",\n      unknown: \"알 수 없음\",\n      loading: \"로딩 중...\",\n      error: \"오류\",\n    },\n  };\n\n  // Helper function to return the correct text based on the current language\n  const t = (key) => text[language][key];\n\n  /**\n   * Function to handle manual stop rotation.\n   */\n  const handleStopRotationClick = () => {\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n    }\n  };\n\n  /**\n   * Function to handle manual start rotation.\n   */\n  const handleStartRotationClick = () => {\n    if (!animationIdRef.current && viewerRef.current) {\n      const rotateEarth = () => {\n        const spinRate = 0.01;\n        const delta = spinRate / 60; // Assuming 60 FPS\n        viewerRef.current.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -delta);\n        animationIdRef.current = requestAnimationFrame(rotateEarth);\n      };\n      rotateEarth();\n    }\n  };\n\n  /**\n   * Hide or show other site elements (Navbar, Footer, Home text, etc.)\n   * based on whether we're in fullscreen mode.\n   */\n  const toggleElementsVisibility = (hide) => {\n    // List any CSS selectors you want hidden in fullscreen\n    const selectors = [\n      '.navbar',    // Navbar\n      '.footer',    // Footer\n      '.intro',     // Intro section in Home.js\n      '.features'   // Features section in Home.js\n    ];\n\n    selectors.forEach((selector) => {\n      document.querySelectorAll(selector).forEach((elem) => {\n        // If hide === true => display: 'none'\n        // If hide === false => display: ''\n        elem.style.display = hide ? 'none' : '';\n      });\n    });\n  };\n\n  /**\n   * Check for 'fullscreenchange' events:\n   * if document.fullscreenElement is set, we hide other site elements;\n   * otherwise, we restore them.\n   */\n  const handleFullScreenChange = () => {\n    const isFullScreen = !!document.fullscreenElement;\n    toggleElementsVisibility(isFullScreen);\n  };\n\n  // Initialize Cesium Viewer and handle rotation controls\n  useEffect(() => {\n    // Set your Cesium Ion access token from environment variables\n    Cesium.Ion.defaultAccessToken = process.env.REACT_APP_CESIUM_ION_ACCESS_TOKEN;\n\n    // Listen for the 'fullscreenchange' event on the document\n    document.addEventListener('fullscreenchange', handleFullScreenChange);\n\n    // Initialize Cesium Viewer if it doesn't exist yet\n    if (globeRef.current && !viewerRef.current) {\n      try {\n        viewerRef.current = new Cesium.Viewer(globeRef.current, {\n          terrainProvider: Cesium.createWorldTerrain(), // High-resolution terrain\n          imageryProvider: new Cesium.IonImageryProvider({ assetId: 2 }), // Example asset ID\n          baseLayerPicker: false,\n          geocoder: false,\n          homeButton: false,\n          infoBox: false, // We'll handle info boxes manually\n          navigationHelpButton: false,\n          sceneModePicker: false,\n          timeline: false,\n          animation: false,\n          fullscreenButton: true, // Enable fullscreen\n          requestRenderMode: true,\n          maximumRenderTimeChange: Infinity,\n        });\n\n        // Set initial camera view (New York coordinates as example)\n        viewerRef.current.camera.setView({\n          destination: Cesium.Cartesian3.fromDegrees(\n            -74.0707383,\n            40.7117244,\n            10000000\n          ),\n          orientation: {\n            heading: Cesium.Math.toRadians(0),\n            pitch: Cesium.Math.toRadians(-90),\n            roll: 0.0,\n          },\n        });\n\n        // Continuous rotation\n        const rotateEarth = () => {\n          const spinRate = 0.01;\n          const delta = spinRate / 60; // 60 FPS assumption\n          viewerRef.current.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -delta);\n          animationIdRef.current = requestAnimationFrame(rotateEarth);\n        };\n\n        rotateEarth(); // Start rotation immediately\n\n        // Scene interactions to stop/start rotation on user actions\n        viewerRef.current.scene.screenSpaceCameraController.inertiaSpin = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaTranslate = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaZoom = 0;\n\n        const stopRotation = () => {\n          if (animationIdRef.current) {\n            cancelAnimationFrame(animationIdRef.current);\n            animationIdRef.current = null;\n          }\n        };\n\n        const startRotation = () => {\n          if (!animationIdRef.current) {\n            rotateEarth();\n          }\n        };\n\n        // Stop rotation on pointer down/wheel\n        viewerRef.current.canvas.addEventListener('pointerdown', stopRotation);\n        viewerRef.current.canvas.addEventListener('wheel', stopRotation, { passive: true });\n\n        // Resume rotation on pointer up/wheel end\n        viewerRef.current.canvas.addEventListener('pointerup', startRotation);\n        viewerRef.current.canvas.addEventListener('wheel', startRotation, {\n          passive: true,\n          capture: true,\n        });\n      } catch (error) {\n        console.error('Failed to initialize Cesium viewer:', error);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullScreenChange);\n      if (viewerRef.current) {\n        viewerRef.current.destroy();\n        viewerRef.current = null;\n      }\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n    };\n  }, []);\n\n  // Use the custom hook to manage location info\n  const { locationInfo, loading, error } = useLocationInfo(\n    viewerRef.current,\n    Cesium,\n    reverseGeocode\n  );\n\n  return (\n    <>\n      {/* Cesium Globe Container */}\n      <div\n        ref={globeRef}\n        id=\"cesiumContainer\"\n        style={{ height: '100vh', width: '100vw' }}\n      >\n        {/* Controls */}\n        <div className=\"controls-container\">\n          <button\n            className=\"stop-rotation-button\"\n            onClick={handleStopRotationClick}\n            aria-label={t(\"stopRotation\")}\n          >\n            {t(\"stopRotation\")}\n          </button>\n          <button\n            className=\"start-rotation-button\"\n            onClick={handleStartRotationClick}\n            aria-label={text[language].startRotation}\n          >\n            {text[language].startRotation}\n          </button>\n        </div>\n\n        {/* Location Details Panel */}\n        <div className=\"location-info-panel\">\n          <h2>{text[language].locationDetails}</h2>\n          {loading && <p>{text[language].loading}</p>}\n          {error && <p className=\"error-message\">{`${text[language].error}: ${error}`}</p>}\n          {locationInfo && !loading && !error && (\n            <>\n              <p><strong>{text[language].address}:</strong> {locationInfo.address}</p>\n              <p><strong>{text[language].latitude}:</strong> {locationInfo.latitude}</p>\n              <p><strong>{text[language].longitude}:</strong> {locationInfo.longitude}</p>\n              <p><strong>{text[language].height}:</strong> {locationInfo.height} meters</p>\n              <p><strong>{text[language].zoomLevel}:</strong> {locationInfo.zoomLevel}</p>\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nGlobe.propTypes = {\n  // Define prop types if necessary\n};\n\nexport default Globe;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,OAAO,QAAQ,wBAAwB,CAAC,CAAC;AAClD,OAAO,qBAAqB,CAAC,CAAC;AAC9B,OAAOC,eAAe,MAAM,0BAA0B,CAAC,CAAC;AACxD,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAQA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;EACpD,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAAC,CAAC;EACvD,MAAMC,GAAG,GAAG,kDAAkDN,QAAQ,IAAIC,SAAS,QAAQC,MAAM,EAAE;EAEnG,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC3C,OAAOH,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,SAAS;IAClC,CAAC,MAAM;MACL,OAAO,mBAAmB;IAC5B;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAME,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAG3B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,MAAM4B,SAAS,GAAG5B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAChC,MAAM6B,cAAc,GAAG7B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAErC;EACA,MAAM;IAAE8B;EAAS,CAAC,GAAG7B,OAAO,CAAC,CAAC;;EAE9B;EACA,MAAM8B,IAAI,GAAG;IACXC,EAAE,EAAE;MACFC,YAAY,EAAE,eAAe;MAC7BC,aAAa,EAAE,gBAAgB;MAC/BC,eAAe,EAAE,kBAAkB;MACnCC,OAAO,EAAE,SAAS;MAClB3B,QAAQ,EAAE,UAAU;MACpBC,SAAS,EAAE,WAAW;MACtB2B,MAAM,EAAE,QAAQ;MAChBC,SAAS,EAAE,YAAY;MACvBC,OAAO,EAAE,SAAS;MAClBC,OAAO,EAAE,YAAY;MACrBjB,KAAK,EAAE;IACT,CAAC;IACDkB,EAAE,EAAE;MACFR,YAAY,EAAE,OAAO;MACrBC,aAAa,EAAE,OAAO;MACtBC,eAAe,EAAE,OAAO;MACxBC,OAAO,EAAE,IAAI;MACb3B,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAE,IAAI;MACf2B,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,OAAO;MAClBC,OAAO,EAAE,QAAQ;MACjBC,OAAO,EAAE,SAAS;MAClBjB,KAAK,EAAE;IACT;EACF,CAAC;;EAED;EACA,MAAMmB,CAAC,GAAIC,GAAG,IAAKZ,IAAI,CAACD,QAAQ,CAAC,CAACa,GAAG,CAAC;;EAEtC;AACF;AACA;EACE,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAIf,cAAc,CAACgB,OAAO,EAAE;MAC1BC,oBAAoB,CAACjB,cAAc,CAACgB,OAAO,CAAC;MAC5ChB,cAAc,CAACgB,OAAO,GAAG,IAAI;IAC/B;EACF,CAAC;;EAED;AACF;AACA;EACE,MAAME,wBAAwB,GAAGA,CAAA,KAAM;IACrC,IAAI,CAAClB,cAAc,CAACgB,OAAO,IAAIjB,SAAS,CAACiB,OAAO,EAAE;MAChD,MAAMG,WAAW,GAAGA,CAAA,KAAM;QACxB,MAAMC,QAAQ,GAAG,IAAI;QACrB,MAAMC,KAAK,GAAGD,QAAQ,GAAG,EAAE,CAAC,CAAC;QAC7BrB,SAAS,CAACiB,OAAO,CAACM,KAAK,CAACC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,UAAU,CAACC,MAAM,EAAE,CAACN,KAAK,CAAC;QACvErB,cAAc,CAACgB,OAAO,GAAGY,qBAAqB,CAACT,WAAW,CAAC;MAC7D,CAAC;MACDA,WAAW,CAAC,CAAC;IACf;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMU,wBAAwB,GAAIC,IAAI,IAAK;IACzC;IACA,MAAMC,SAAS,GAAG,CAChB,SAAS;IAAK;IACd,SAAS;IAAK;IACd,QAAQ;IAAM;IACd,WAAW,CAAG;IAAA,CACf;IAEDA,SAAS,CAACC,OAAO,CAAEC,QAAQ,IAAK;MAC9BC,QAAQ,CAACC,gBAAgB,CAACF,QAAQ,CAAC,CAACD,OAAO,CAAEI,IAAI,IAAK;QACpD;QACA;QACAA,IAAI,CAACC,KAAK,CAACC,OAAO,GAAGR,IAAI,GAAG,MAAM,GAAG,EAAE;MACzC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAMS,sBAAsB,GAAGA,CAAA,KAAM;IACnC,MAAMC,YAAY,GAAG,CAAC,CAACN,QAAQ,CAACO,iBAAiB;IACjDZ,wBAAwB,CAACW,YAAY,CAAC;EACxC,CAAC;;EAED;EACAtE,SAAS,CAAC,MAAM;IACd;IACAuD,MAAM,CAACiB,GAAG,CAACC,kBAAkB,GAAG5D,OAAO,CAACC,GAAG,CAAC4D,iCAAiC;;IAE7E;IACAV,QAAQ,CAACW,gBAAgB,CAAC,kBAAkB,EAAEN,sBAAsB,CAAC;;IAErE;IACA,IAAIzC,QAAQ,CAACkB,OAAO,IAAI,CAACjB,SAAS,CAACiB,OAAO,EAAE;MAC1C,IAAI;QACFjB,SAAS,CAACiB,OAAO,GAAG,IAAIS,MAAM,CAACqB,MAAM,CAAChD,QAAQ,CAACkB,OAAO,EAAE;UACtD+B,eAAe,EAAEtB,MAAM,CAACuB,kBAAkB,CAAC,CAAC;UAAE;UAC9CC,eAAe,EAAE,IAAIxB,MAAM,CAACyB,kBAAkB,CAAC;YAAEC,OAAO,EAAE;UAAE,CAAC,CAAC;UAAE;UAChEC,eAAe,EAAE,KAAK;UACtBC,QAAQ,EAAE,KAAK;UACfC,UAAU,EAAE,KAAK;UACjBC,OAAO,EAAE,KAAK;UAAE;UAChBC,oBAAoB,EAAE,KAAK;UAC3BC,eAAe,EAAE,KAAK;UACtBC,QAAQ,EAAE,KAAK;UACfC,SAAS,EAAE,KAAK;UAChBC,gBAAgB,EAAE,IAAI;UAAE;UACxBC,iBAAiB,EAAE,IAAI;UACvBC,uBAAuB,EAAEC;QAC3B,CAAC,CAAC;;QAEF;QACAhE,SAAS,CAACiB,OAAO,CAACO,MAAM,CAACyC,OAAO,CAAC;UAC/BC,WAAW,EAAExC,MAAM,CAACC,UAAU,CAACwC,WAAW,CACxC,CAAC,UAAU,EACX,UAAU,EACV,QACF,CAAC;UACDC,WAAW,EAAE;YACXC,OAAO,EAAE3C,MAAM,CAAC4C,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;YACjCC,KAAK,EAAE9C,MAAM,CAAC4C,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC;YACjCE,IAAI,EAAE;UACR;QACF,CAAC,CAAC;;QAEF;QACA,MAAMrD,WAAW,GAAGA,CAAA,KAAM;UACxB,MAAMC,QAAQ,GAAG,IAAI;UACrB,MAAMC,KAAK,GAAGD,QAAQ,GAAG,EAAE,CAAC,CAAC;UAC7BrB,SAAS,CAACiB,OAAO,CAACM,KAAK,CAACC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,UAAU,CAACC,MAAM,EAAE,CAACN,KAAK,CAAC;UACvErB,cAAc,CAACgB,OAAO,GAAGY,qBAAqB,CAACT,WAAW,CAAC;QAC7D,CAAC;QAEDA,WAAW,CAAC,CAAC,CAAC,CAAC;;QAEf;QACApB,SAAS,CAACiB,OAAO,CAACM,KAAK,CAACmD,2BAA2B,CAACC,WAAW,GAAG,CAAC;QACnE3E,SAAS,CAACiB,OAAO,CAACM,KAAK,CAACmD,2BAA2B,CAACE,gBAAgB,GAAG,CAAC;QACxE5E,SAAS,CAACiB,OAAO,CAACM,KAAK,CAACmD,2BAA2B,CAACG,WAAW,GAAG,CAAC;QAEnE,MAAMxE,YAAY,GAAGA,CAAA,KAAM;UACzB,IAAIJ,cAAc,CAACgB,OAAO,EAAE;YAC1BC,oBAAoB,CAACjB,cAAc,CAACgB,OAAO,CAAC;YAC5ChB,cAAc,CAACgB,OAAO,GAAG,IAAI;UAC/B;QACF,CAAC;QAED,MAAMX,aAAa,GAAGA,CAAA,KAAM;UAC1B,IAAI,CAACL,cAAc,CAACgB,OAAO,EAAE;YAC3BG,WAAW,CAAC,CAAC;UACf;QACF,CAAC;;QAED;QACApB,SAAS,CAACiB,OAAO,CAAC6D,MAAM,CAAChC,gBAAgB,CAAC,aAAa,EAAEzC,YAAY,CAAC;QACtEL,SAAS,CAACiB,OAAO,CAAC6D,MAAM,CAAChC,gBAAgB,CAAC,OAAO,EAAEzC,YAAY,EAAE;UAAE0E,OAAO,EAAE;QAAK,CAAC,CAAC;;QAEnF;QACA/E,SAAS,CAACiB,OAAO,CAAC6D,MAAM,CAAChC,gBAAgB,CAAC,WAAW,EAAExC,aAAa,CAAC;QACrEN,SAAS,CAACiB,OAAO,CAAC6D,MAAM,CAAChC,gBAAgB,CAAC,OAAO,EAAExC,aAAa,EAAE;UAChEyE,OAAO,EAAE,IAAI;UACbC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOrF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D;IACF;;IAEA;IACA,OAAO,MAAM;MACXwC,QAAQ,CAAC8C,mBAAmB,CAAC,kBAAkB,EAAEzC,sBAAsB,CAAC;MACxE,IAAIxC,SAAS,CAACiB,OAAO,EAAE;QACrBjB,SAAS,CAACiB,OAAO,CAACiE,OAAO,CAAC,CAAC;QAC3BlF,SAAS,CAACiB,OAAO,GAAG,IAAI;MAC1B;MACA,IAAIhB,cAAc,CAACgB,OAAO,EAAE;QAC1BC,oBAAoB,CAACjB,cAAc,CAACgB,OAAO,CAAC;QAC5ChB,cAAc,CAACgB,OAAO,GAAG,IAAI;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM;IAAEkE,YAAY;IAAEvE,OAAO;IAAEjB;EAAM,CAAC,GAAGrB,eAAe,CACtD0B,SAAS,CAACiB,OAAO,EACjBS,MAAM,EACN9C,cACF,CAAC;EAED,oBACEH,OAAA,CAAAE,SAAA;IAAAyG,QAAA,eAEE3G,OAAA;MACE4G,GAAG,EAAEtF,QAAS;MACduF,EAAE,EAAC,iBAAiB;MACpBhD,KAAK,EAAE;QAAE7B,MAAM,EAAE,OAAO;QAAE8E,KAAK,EAAE;MAAQ,CAAE;MAAAH,QAAA,gBAG3C3G,OAAA;QAAK+G,SAAS,EAAC,oBAAoB;QAAAJ,QAAA,gBACjC3G,OAAA;UACE+G,SAAS,EAAC,sBAAsB;UAChCC,OAAO,EAAEzE,uBAAwB;UACjC,cAAYF,CAAC,CAAC,cAAc,CAAE;UAAAsE,QAAA,EAE7BtE,CAAC,CAAC,cAAc;QAAC;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CAAC,eACTpH,OAAA;UACE+G,SAAS,EAAC,uBAAuB;UACjCC,OAAO,EAAEtE,wBAAyB;UAClC,cAAYhB,IAAI,CAACD,QAAQ,CAAC,CAACI,aAAc;UAAA8E,QAAA,EAExCjF,IAAI,CAACD,QAAQ,CAAC,CAACI;QAAa;UAAAoF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAGNpH,OAAA;QAAK+G,SAAS,EAAC,qBAAqB;QAAAJ,QAAA,gBAClC3G,OAAA;UAAA2G,QAAA,EAAKjF,IAAI,CAACD,QAAQ,CAAC,CAACK;QAAe;UAAAmF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACxCjF,OAAO,iBAAInC,OAAA;UAAA2G,QAAA,EAAIjF,IAAI,CAACD,QAAQ,CAAC,CAACU;QAAO;UAAA8E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAC1ClG,KAAK,iBAAIlB,OAAA;UAAG+G,SAAS,EAAC,eAAe;UAAAJ,QAAA,EAAE,GAAGjF,IAAI,CAACD,QAAQ,CAAC,CAACP,KAAK,KAAKA,KAAK;QAAE;UAAA+F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAC/EV,YAAY,IAAI,CAACvE,OAAO,IAAI,CAACjB,KAAK,iBACjClB,OAAA,CAAAE,SAAA;UAAAyG,QAAA,gBACE3G,OAAA;YAAA2G,QAAA,gBAAG3G,OAAA;cAAA2G,QAAA,GAASjF,IAAI,CAACD,QAAQ,CAAC,CAACM,OAAO,EAAC,GAAC;YAAA;cAAAkF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACV,YAAY,CAAC3E,OAAO;UAAA;YAAAkF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxEpH,OAAA;YAAA2G,QAAA,gBAAG3G,OAAA;cAAA2G,QAAA,GAASjF,IAAI,CAACD,QAAQ,CAAC,CAACrB,QAAQ,EAAC,GAAC;YAAA;cAAA6G,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACV,YAAY,CAACtG,QAAQ;UAAA;YAAA6G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1EpH,OAAA;YAAA2G,QAAA,gBAAG3G,OAAA;cAAA2G,QAAA,GAASjF,IAAI,CAACD,QAAQ,CAAC,CAACpB,SAAS,EAAC,GAAC;YAAA;cAAA4G,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACV,YAAY,CAACrG,SAAS;UAAA;YAAA4G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5EpH,OAAA;YAAA2G,QAAA,gBAAG3G,OAAA;cAAA2G,QAAA,GAASjF,IAAI,CAACD,QAAQ,CAAC,CAACO,MAAM,EAAC,GAAC;YAAA;cAAAiF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACV,YAAY,CAAC1E,MAAM,EAAC,SAAO;UAAA;YAAAiF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAC7EpH,OAAA;YAAA2G,QAAA,gBAAG3G,OAAA;cAAA2G,QAAA,GAASjF,IAAI,CAACD,QAAQ,CAAC,CAACQ,SAAS,EAAC,GAAC;YAAA;cAAAgF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACV,YAAY,CAACzE,SAAS;UAAA;YAAAgF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,eAC5E,CACH;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC,gBACN,CAAC;AAEP,CAAC;AAAC/F,EAAA,CAvPID,KAAK;EAAA,QAMYxB,OAAO,EA+LaC,eAAe;AAAA;AAAAwH,EAAA,GArMpDjG,KAAK;AAyPXA,KAAK,CAACkG,SAAS,GAAG;EAChB;AAAA,CACD;AAED,eAAelG,KAAK;AAAC,IAAAiG,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}