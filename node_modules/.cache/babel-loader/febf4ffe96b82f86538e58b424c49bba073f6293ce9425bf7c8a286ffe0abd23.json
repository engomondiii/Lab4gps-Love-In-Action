{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"// See IntersectionUtils.glsl for the definitions of Ray, RayShapeIntersection,\\n\\\n// NO_HIT, Intersections\\n\\\n\\n\\\n/* Box defines (set in Scene/VoxelBoxShape.js)\\n\\\n#define BOX_INTERSECTION_INDEX ### // always 0\\n\\\n*/\\n\\\n\\n\\\nuniform vec3 u_renderMinBounds;\\n\\\nuniform vec3 u_renderMaxBounds;\\n\\\n\\n\\\nRayShapeIntersection intersectBox(in Ray ray, in vec3 minBound, in vec3 maxBound)\\n\\\n{\\n\\\n    // Consider the box as the intersection of the space between 3 pairs of parallel planes\\n\\\n    // Compute the distance along the ray to each plane\\n\\\n    vec3 t0 = (minBound - ray.pos) / ray.dir;\\n\\\n    vec3 t1 = (maxBound - ray.pos) / ray.dir;\\n\\\n\\n\\\n    // Identify candidate entries/exits based on distance from ray.pos\\n\\\n    vec3 entries = min(t0, t1);\\n\\\n    vec3 exits = max(t0, t1);\\n\\\n\\n\\\n    vec3 directions = sign(ray.dir);\\n\\\n\\n\\\n    // The actual intersection points are the furthest entry and the closest exit\\n\\\n    float lastEntry = maxComponent(entries);\\n\\\n    bvec3 isLastEntry = equal(entries, vec3(lastEntry));\\n\\\n    vec3 entryNormal = -1.0 * vec3(isLastEntry) * directions;\\n\\\n    vec4 entry = vec4(entryNormal, lastEntry);\\n\\\n\\n\\\n    float firstExit = minComponent(exits);\\n\\\n    bvec3 isFirstExit = equal(exits, vec3(firstExit));\\n\\\n    vec3 exitNormal = vec3(isLastEntry) * directions;\\n\\\n    vec4 exit = vec4(exitNormal, firstExit);\\n\\\n\\n\\\n    if (entry.w > exit.w) {\\n\\\n        entry.w = NO_HIT;\\n\\\n        exit.w = NO_HIT;\\n\\\n    }\\n\\\n\\n\\\n    return RayShapeIntersection(entry, exit);\\n\\\n}\\n\\\n\\n\\\nvoid intersectShape(in Ray ray, inout Intersections ix)\\n\\\n{\\n\\\n    RayShapeIntersection intersection = intersectBox(ray, u_renderMinBounds, u_renderMaxBounds);\\n\\\n    setShapeIntersection(ix, BOX_INTERSECTION_INDEX, intersection);\\n\\\n}\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Voxels/IntersectBox.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"// See IntersectionUtils.glsl for the definitions of Ray, RayShapeIntersection,\\n\\\n// NO_HIT, Intersections\\n\\\n\\n\\\n/* Box defines (set in Scene/VoxelBoxShape.js)\\n\\\n#define BOX_INTERSECTION_INDEX ### // always 0\\n\\\n*/\\n\\\n\\n\\\nuniform vec3 u_renderMinBounds;\\n\\\nuniform vec3 u_renderMaxBounds;\\n\\\n\\n\\\nRayShapeIntersection intersectBox(in Ray ray, in vec3 minBound, in vec3 maxBound)\\n\\\n{\\n\\\n    // Consider the box as the intersection of the space between 3 pairs of parallel planes\\n\\\n    // Compute the distance along the ray to each plane\\n\\\n    vec3 t0 = (minBound - ray.pos) / ray.dir;\\n\\\n    vec3 t1 = (maxBound - ray.pos) / ray.dir;\\n\\\n\\n\\\n    // Identify candidate entries/exits based on distance from ray.pos\\n\\\n    vec3 entries = min(t0, t1);\\n\\\n    vec3 exits = max(t0, t1);\\n\\\n\\n\\\n    vec3 directions = sign(ray.dir);\\n\\\n\\n\\\n    // The actual intersection points are the furthest entry and the closest exit\\n\\\n    float lastEntry = maxComponent(entries);\\n\\\n    bvec3 isLastEntry = equal(entries, vec3(lastEntry));\\n\\\n    vec3 entryNormal = -1.0 * vec3(isLastEntry) * directions;\\n\\\n    vec4 entry = vec4(entryNormal, lastEntry);\\n\\\n\\n\\\n    float firstExit = minComponent(exits);\\n\\\n    bvec3 isFirstExit = equal(exits, vec3(firstExit));\\n\\\n    vec3 exitNormal = vec3(isLastEntry) * directions;\\n\\\n    vec4 exit = vec4(exitNormal, firstExit);\\n\\\n\\n\\\n    if (entry.w > exit.w) {\\n\\\n        entry.w = NO_HIT;\\n\\\n        exit.w = NO_HIT;\\n\\\n    }\\n\\\n\\n\\\n    return RayShapeIntersection(entry, exit);\\n\\\n}\\n\\\n\\n\\\nvoid intersectShape(in Ray ray, inout Intersections ix)\\n\\\n{\\n\\\n    RayShapeIntersection intersection = intersectBox(ray, u_renderMinBounds, u_renderMaxBounds);\\n\\\n    setShapeIntersection(ix, BOX_INTERSECTION_INDEX, intersection);\\n\\\n}\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}