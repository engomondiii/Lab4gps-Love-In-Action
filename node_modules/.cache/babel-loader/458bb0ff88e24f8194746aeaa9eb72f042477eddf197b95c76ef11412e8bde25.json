{"ast":null,"code":"/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global BigInt, Response, WritableStream, ReadableStream, TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { MAX_32_BITS, MAX_16_BITS, COMPRESSION_METHOD_DEFLATE, COMPRESSION_METHOD_STORE, COMPRESSION_METHOD_AES, SPLIT_ZIP_FILE_SIGNATURE, LOCAL_FILE_HEADER_SIGNATURE, CENTRAL_FILE_HEADER_SIGNATURE, END_OF_CENTRAL_DIR_SIGNATURE, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE, ZIP64_END_OF_CENTRAL_DIR_SIGNATURE, EXTRAFIELD_TYPE_ZIP64, EXTRAFIELD_TYPE_UNICODE_PATH, EXTRAFIELD_TYPE_UNICODE_COMMENT, EXTRAFIELD_TYPE_AES, EXTRAFIELD_TYPE_NTFS, EXTRAFIELD_TYPE_NTFS_TAG1, EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP, EXTRAFIELD_TYPE_USDZ, END_OF_CENTRAL_DIR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LENGTH, BITFLAG_ENCRYPTED, BITFLAG_LEVEL, BITFLAG_DATA_DESCRIPTOR, BITFLAG_LANG_ENCODING_FLAG, FILE_ATTR_MSDOS_DIR_MASK, DIRECTORY_SIGNATURE, UNDEFINED_VALUE } from \"./constants.js\";\nimport { getConfiguration, getChunkSize } from \"./configuration.js\";\nimport { runWorker, CODEC_INFLATE, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ERR_ABORT_CHECK_PASSWORD } from \"./codec-pool.js\";\nimport { initStream, initReader, initWriter, readUint8Array, BlobReader } from \"./io.js\";\nimport { decodeText } from \"./util/decode-text.js\";\nimport { Crc32 } from \"./streams/codecs/crc32.js\";\nimport { PROPERTY_NAME_RAW_FILENAME, PROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_COMMENT, PROPERTY_NAME_COMMENT, PROPERTY_NAME_UNCOMPPRESSED_SIZE, PROPERTY_NAME_COMPPRESSED_SIZE, PROPERTY_NAME_OFFSET, PROPERTY_NAME_DISK_NUMBER_START, PROPERTY_NAME_LAST_MODIFICATION_DATE, PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE, PROPERTY_NAME_LAST_ACCESS_DATE, PROPERTY_NAME_RAW_LAST_ACCESS_DATE, PROPERTY_NAME_CREATION_DATE, PROPERTY_NAME_RAW_CREATION_DATE, Entry } from \"./zip-entry.js\";\nconst ERR_BAD_FORMAT = \"File format is not recognized\";\nconst ERR_EOCDR_NOT_FOUND = \"End of central directory not found\";\nconst ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND = \"End of Zip64 central directory locator not found\";\nconst ERR_CENTRAL_DIRECTORY_NOT_FOUND = \"Central directory header not found\";\nconst ERR_LOCAL_FILE_HEADER_NOT_FOUND = \"Local file header not found\";\nconst ERR_EXTRAFIELD_ZIP64_NOT_FOUND = \"Zip64 extra field not found\";\nconst ERR_ENCRYPTED = \"File contains encrypted entry\";\nconst ERR_UNSUPPORTED_ENCRYPTION = \"Encryption method not supported\";\nconst ERR_UNSUPPORTED_COMPRESSION = \"Compression method not supported\";\nconst ERR_SPLIT_ZIP_FILE = \"Split zip file\";\nconst CHARSET_UTF8 = \"utf-8\";\nconst CHARSET_CP437 = \"cp437\";\nconst ZIP64_PROPERTIES = [[PROPERTY_NAME_UNCOMPPRESSED_SIZE, MAX_32_BITS], [PROPERTY_NAME_COMPPRESSED_SIZE, MAX_32_BITS], [PROPERTY_NAME_OFFSET, MAX_32_BITS], [PROPERTY_NAME_DISK_NUMBER_START, MAX_16_BITS]];\nconst ZIP64_EXTRACTION = {\n  [MAX_16_BITS]: {\n    getValue: getUint32,\n    bytes: 4\n  },\n  [MAX_32_BITS]: {\n    getValue: getBigUint64,\n    bytes: 8\n  }\n};\nclass ZipReader {\n  constructor(reader, options = {}) {\n    Object.assign(this, {\n      reader: initReader(reader),\n      options,\n      config: getConfiguration()\n    });\n  }\n  async *getEntriesGenerator(options = {}) {\n    const zipReader = this;\n    let {\n      reader\n    } = zipReader;\n    const {\n      config\n    } = zipReader;\n    await initStream(reader);\n    if (reader.size === UNDEFINED_VALUE || !reader.readUint8Array) {\n      reader = new BlobReader(await new Response(reader.readable).blob());\n      await initStream(reader);\n    }\n    if (reader.size < END_OF_CENTRAL_DIR_LENGTH) {\n      throw new Error(ERR_BAD_FORMAT);\n    }\n    reader.chunkSize = getChunkSize(config);\n    const endOfDirectoryInfo = await seekSignature(reader, END_OF_CENTRAL_DIR_SIGNATURE, reader.size, END_OF_CENTRAL_DIR_LENGTH, MAX_16_BITS * 16);\n    if (!endOfDirectoryInfo) {\n      const signatureArray = await readUint8Array(reader, 0, 4);\n      const signatureView = getDataView(signatureArray);\n      if (getUint32(signatureView) == SPLIT_ZIP_FILE_SIGNATURE) {\n        throw new Error(ERR_SPLIT_ZIP_FILE);\n      } else {\n        throw new Error(ERR_EOCDR_NOT_FOUND);\n      }\n    }\n    const endOfDirectoryView = getDataView(endOfDirectoryInfo);\n    let directoryDataLength = getUint32(endOfDirectoryView, 12);\n    let directoryDataOffset = getUint32(endOfDirectoryView, 16);\n    const commentOffset = endOfDirectoryInfo.offset;\n    const commentLength = getUint16(endOfDirectoryView, 20);\n    const appendedDataOffset = commentOffset + END_OF_CENTRAL_DIR_LENGTH + commentLength;\n    let lastDiskNumber = getUint16(endOfDirectoryView, 4);\n    const expectedLastDiskNumber = reader.lastDiskNumber || 0;\n    let diskNumber = getUint16(endOfDirectoryView, 6);\n    let filesLength = getUint16(endOfDirectoryView, 8);\n    let prependedDataLength = 0;\n    let startOffset = 0;\n    if (directoryDataOffset == MAX_32_BITS || directoryDataLength == MAX_32_BITS || filesLength == MAX_16_BITS || diskNumber == MAX_16_BITS) {\n      const endOfDirectoryLocatorArray = await readUint8Array(reader, endOfDirectoryInfo.offset - ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH);\n      const endOfDirectoryLocatorView = getDataView(endOfDirectoryLocatorArray);\n      if (getUint32(endOfDirectoryLocatorView, 0) == ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE) {\n        directoryDataOffset = getBigUint64(endOfDirectoryLocatorView, 8);\n        let endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);\n        let endOfDirectoryView = getDataView(endOfDirectoryArray);\n        const expectedDirectoryDataOffset = endOfDirectoryInfo.offset - ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH - ZIP64_END_OF_CENTRAL_DIR_LENGTH;\n        if (getUint32(endOfDirectoryView, 0) != ZIP64_END_OF_CENTRAL_DIR_SIGNATURE && directoryDataOffset != expectedDirectoryDataOffset) {\n          const originalDirectoryDataOffset = directoryDataOffset;\n          directoryDataOffset = expectedDirectoryDataOffset;\n          prependedDataLength = directoryDataOffset - originalDirectoryDataOffset;\n          endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);\n          endOfDirectoryView = getDataView(endOfDirectoryArray);\n        }\n        if (getUint32(endOfDirectoryView, 0) != ZIP64_END_OF_CENTRAL_DIR_SIGNATURE) {\n          throw new Error(ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND);\n        }\n        if (lastDiskNumber == MAX_16_BITS) {\n          lastDiskNumber = getUint32(endOfDirectoryView, 16);\n        }\n        if (diskNumber == MAX_16_BITS) {\n          diskNumber = getUint32(endOfDirectoryView, 20);\n        }\n        if (filesLength == MAX_16_BITS) {\n          filesLength = getBigUint64(endOfDirectoryView, 32);\n        }\n        if (directoryDataLength == MAX_32_BITS) {\n          directoryDataLength = getBigUint64(endOfDirectoryView, 40);\n        }\n        directoryDataOffset -= directoryDataLength;\n      }\n    }\n    if (directoryDataOffset >= reader.size) {\n      prependedDataLength = reader.size - directoryDataOffset - directoryDataLength - END_OF_CENTRAL_DIR_LENGTH;\n      directoryDataOffset = reader.size - directoryDataLength - END_OF_CENTRAL_DIR_LENGTH;\n    }\n    if (expectedLastDiskNumber != lastDiskNumber) {\n      throw new Error(ERR_SPLIT_ZIP_FILE);\n    }\n    if (directoryDataOffset < 0) {\n      throw new Error(ERR_BAD_FORMAT);\n    }\n    let offset = 0;\n    let directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n    let directoryView = getDataView(directoryArray);\n    if (directoryDataLength) {\n      const expectedDirectoryDataOffset = endOfDirectoryInfo.offset - directoryDataLength;\n      if (getUint32(directoryView, offset) != CENTRAL_FILE_HEADER_SIGNATURE && directoryDataOffset != expectedDirectoryDataOffset) {\n        const originalDirectoryDataOffset = directoryDataOffset;\n        directoryDataOffset = expectedDirectoryDataOffset;\n        prependedDataLength += directoryDataOffset - originalDirectoryDataOffset;\n        directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n        directoryView = getDataView(directoryArray);\n      }\n    }\n    const expectedDirectoryDataLength = endOfDirectoryInfo.offset - directoryDataOffset - (reader.lastDiskOffset || 0);\n    if (directoryDataLength != expectedDirectoryDataLength && expectedDirectoryDataLength >= 0) {\n      directoryDataLength = expectedDirectoryDataLength;\n      directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n      directoryView = getDataView(directoryArray);\n    }\n    if (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {\n      throw new Error(ERR_BAD_FORMAT);\n    }\n    const filenameEncoding = getOptionValue(zipReader, options, \"filenameEncoding\");\n    const commentEncoding = getOptionValue(zipReader, options, \"commentEncoding\");\n    for (let indexFile = 0; indexFile < filesLength; indexFile++) {\n      const fileEntry = new ZipEntry(reader, config, zipReader.options);\n      if (getUint32(directoryView, offset) != CENTRAL_FILE_HEADER_SIGNATURE) {\n        throw new Error(ERR_CENTRAL_DIRECTORY_NOT_FOUND);\n      }\n      readCommonHeader(fileEntry, directoryView, offset + 6);\n      const languageEncodingFlag = Boolean(fileEntry.bitFlag.languageEncodingFlag);\n      const filenameOffset = offset + 46;\n      const extraFieldOffset = filenameOffset + fileEntry.filenameLength;\n      const commentOffset = extraFieldOffset + fileEntry.extraFieldLength;\n      const versionMadeBy = getUint16(directoryView, offset + 4);\n      const msDosCompatible = (versionMadeBy & 0) == 0;\n      const rawFilename = directoryArray.subarray(filenameOffset, extraFieldOffset);\n      const commentLength = getUint16(directoryView, offset + 32);\n      const endOffset = commentOffset + commentLength;\n      const rawComment = directoryArray.subarray(commentOffset, endOffset);\n      const filenameUTF8 = languageEncodingFlag;\n      const commentUTF8 = languageEncodingFlag;\n      const directory = msDosCompatible && (getUint8(directoryView, offset + 38) & FILE_ATTR_MSDOS_DIR_MASK) == FILE_ATTR_MSDOS_DIR_MASK;\n      const offsetFileEntry = getUint32(directoryView, offset + 42) + prependedDataLength;\n      Object.assign(fileEntry, {\n        versionMadeBy,\n        msDosCompatible,\n        compressedSize: 0,\n        uncompressedSize: 0,\n        commentLength,\n        directory,\n        offset: offsetFileEntry,\n        diskNumberStart: getUint16(directoryView, offset + 34),\n        internalFileAttribute: getUint16(directoryView, offset + 36),\n        externalFileAttribute: getUint32(directoryView, offset + 38),\n        rawFilename,\n        filenameUTF8,\n        commentUTF8,\n        rawExtraField: directoryArray.subarray(extraFieldOffset, commentOffset)\n      });\n      const decode = getOptionValue(zipReader, options, \"decodeText\") || decodeText;\n      const rawFilenameEncoding = filenameUTF8 ? CHARSET_UTF8 : filenameEncoding || CHARSET_CP437;\n      const rawCommentEncoding = commentUTF8 ? CHARSET_UTF8 : commentEncoding || CHARSET_CP437;\n      let filename = decode(rawFilename, rawFilenameEncoding);\n      if (filename === UNDEFINED_VALUE) {\n        filename = decodeText(rawFilename, rawFilenameEncoding);\n      }\n      let comment = decode(rawComment, rawCommentEncoding);\n      if (comment === UNDEFINED_VALUE) {\n        comment = decodeText(rawComment, rawCommentEncoding);\n      }\n      Object.assign(fileEntry, {\n        rawComment,\n        filename,\n        comment,\n        directory: directory || filename.endsWith(DIRECTORY_SIGNATURE)\n      });\n      startOffset = Math.max(offsetFileEntry, startOffset);\n      readCommonFooter(fileEntry, fileEntry, directoryView, offset + 6);\n      fileEntry.zipCrypto = fileEntry.encrypted && !fileEntry.extraFieldAES;\n      const entry = new Entry(fileEntry);\n      entry.getData = (writer, options) => fileEntry.getData(writer, entry, options);\n      offset = endOffset;\n      const {\n        onprogress\n      } = options;\n      if (onprogress) {\n        try {\n          await onprogress(indexFile + 1, filesLength, new Entry(fileEntry));\n        } catch (_error) {\n          // ignored\n        }\n      }\n      yield entry;\n    }\n    const extractPrependedData = getOptionValue(zipReader, options, \"extractPrependedData\");\n    const extractAppendedData = getOptionValue(zipReader, options, \"extractAppendedData\");\n    if (extractPrependedData) {\n      zipReader.prependedData = startOffset > 0 ? await readUint8Array(reader, 0, startOffset) : new Uint8Array();\n    }\n    zipReader.comment = commentLength ? await readUint8Array(reader, commentOffset + END_OF_CENTRAL_DIR_LENGTH, commentLength) : new Uint8Array();\n    if (extractAppendedData) {\n      zipReader.appendedData = appendedDataOffset < reader.size ? await readUint8Array(reader, appendedDataOffset, reader.size - appendedDataOffset) : new Uint8Array();\n    }\n    return true;\n  }\n  async getEntries(options = {}) {\n    const entries = [];\n    for await (const entry of this.getEntriesGenerator(options)) {\n      entries.push(entry);\n    }\n    return entries;\n  }\n  async close() {}\n}\nclass ZipReaderStream {\n  constructor(options = {}) {\n    const {\n      readable,\n      writable\n    } = new TransformStream();\n    const gen = new ZipReader(readable, options).getEntriesGenerator();\n    this.readable = new ReadableStream({\n      async pull(controller) {\n        const {\n          done,\n          value\n        } = await gen.next();\n        if (done) return controller.close();\n        const chunk = {\n          ...value,\n          readable: function () {\n            const {\n              readable,\n              writable\n            } = new TransformStream();\n            if (value.getData) {\n              value.getData(writable);\n              return readable;\n            }\n          }()\n        };\n        delete chunk.getData;\n        controller.enqueue(chunk);\n      }\n    });\n    this.writable = writable;\n  }\n}\nexport { ZipReader, ZipReaderStream, ERR_BAD_FORMAT, ERR_EOCDR_NOT_FOUND, ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND, ERR_CENTRAL_DIRECTORY_NOT_FOUND, ERR_LOCAL_FILE_HEADER_NOT_FOUND, ERR_EXTRAFIELD_ZIP64_NOT_FOUND, ERR_ENCRYPTED, ERR_UNSUPPORTED_ENCRYPTION, ERR_UNSUPPORTED_COMPRESSION, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ERR_SPLIT_ZIP_FILE };\nclass ZipEntry {\n  constructor(reader, config, options) {\n    Object.assign(this, {\n      reader,\n      config,\n      options\n    });\n  }\n  async getData(writer, fileEntry, options = {}) {\n    const zipEntry = this;\n    const {\n      reader,\n      offset,\n      diskNumberStart,\n      extraFieldAES,\n      compressionMethod,\n      config,\n      bitFlag,\n      signature,\n      rawLastModDate,\n      uncompressedSize,\n      compressedSize\n    } = zipEntry;\n    const localDirectory = fileEntry.localDirectory = {};\n    const dataArray = await readUint8Array(reader, offset, 30, diskNumberStart);\n    const dataView = getDataView(dataArray);\n    let password = getOptionValue(zipEntry, options, \"password\");\n    let rawPassword = getOptionValue(zipEntry, options, \"rawPassword\");\n    const passThrough = getOptionValue(zipEntry, options, \"passThrough\");\n    password = password && password.length && password;\n    rawPassword = rawPassword && rawPassword.length && rawPassword;\n    if (extraFieldAES) {\n      if (extraFieldAES.originalCompressionMethod != COMPRESSION_METHOD_AES) {\n        throw new Error(ERR_UNSUPPORTED_COMPRESSION);\n      }\n    }\n    if (compressionMethod != COMPRESSION_METHOD_STORE && compressionMethod != COMPRESSION_METHOD_DEFLATE && !passThrough) {\n      throw new Error(ERR_UNSUPPORTED_COMPRESSION);\n    }\n    if (getUint32(dataView, 0) != LOCAL_FILE_HEADER_SIGNATURE) {\n      throw new Error(ERR_LOCAL_FILE_HEADER_NOT_FOUND);\n    }\n    readCommonHeader(localDirectory, dataView, 4);\n    localDirectory.rawExtraField = localDirectory.extraFieldLength ? await readUint8Array(reader, offset + 30 + localDirectory.filenameLength, localDirectory.extraFieldLength, diskNumberStart) : new Uint8Array();\n    readCommonFooter(zipEntry, localDirectory, dataView, 4, true);\n    Object.assign(fileEntry, {\n      lastAccessDate: localDirectory.lastAccessDate,\n      creationDate: localDirectory.creationDate\n    });\n    const encrypted = zipEntry.encrypted && localDirectory.encrypted && !passThrough;\n    const zipCrypto = encrypted && !extraFieldAES;\n    if (!passThrough) {\n      fileEntry.zipCrypto = zipCrypto;\n    }\n    if (encrypted) {\n      if (!zipCrypto && extraFieldAES.strength === UNDEFINED_VALUE) {\n        throw new Error(ERR_UNSUPPORTED_ENCRYPTION);\n      } else if (!password && !rawPassword) {\n        throw new Error(ERR_ENCRYPTED);\n      }\n    }\n    const dataOffset = offset + 30 + localDirectory.filenameLength + localDirectory.extraFieldLength;\n    const size = compressedSize;\n    const readable = reader.readable;\n    Object.assign(readable, {\n      diskNumberStart,\n      offset: dataOffset,\n      size\n    });\n    const signal = getOptionValue(zipEntry, options, \"signal\");\n    const checkPasswordOnly = getOptionValue(zipEntry, options, \"checkPasswordOnly\");\n    if (checkPasswordOnly) {\n      writer = new WritableStream();\n    }\n    writer = initWriter(writer);\n    await initStream(writer, passThrough ? compressedSize : uncompressedSize);\n    const {\n      writable\n    } = writer;\n    const {\n      onstart,\n      onprogress,\n      onend\n    } = options;\n    const workerOptions = {\n      options: {\n        codecType: CODEC_INFLATE,\n        password,\n        rawPassword,\n        zipCrypto,\n        encryptionStrength: extraFieldAES && extraFieldAES.strength,\n        signed: getOptionValue(zipEntry, options, \"checkSignature\") && !passThrough,\n        passwordVerification: zipCrypto && (bitFlag.dataDescriptor ? rawLastModDate >>> 8 & 0xFF : signature >>> 24 & 0xFF),\n        signature,\n        compressed: compressionMethod != 0 && !passThrough,\n        encrypted: zipEntry.encrypted && !passThrough,\n        useWebWorkers: getOptionValue(zipEntry, options, \"useWebWorkers\"),\n        useCompressionStream: getOptionValue(zipEntry, options, \"useCompressionStream\"),\n        transferStreams: getOptionValue(zipEntry, options, \"transferStreams\"),\n        checkPasswordOnly\n      },\n      config,\n      streamOptions: {\n        signal,\n        size,\n        onstart,\n        onprogress,\n        onend\n      }\n    };\n    let outputSize = 0;\n    try {\n      ({\n        outputSize\n      } = await runWorker({\n        readable,\n        writable\n      }, workerOptions));\n    } catch (error) {\n      if (!checkPasswordOnly || error.message != ERR_ABORT_CHECK_PASSWORD) {\n        throw error;\n      }\n    } finally {\n      const preventClose = getOptionValue(zipEntry, options, \"preventClose\");\n      writable.size += outputSize;\n      if (!preventClose && !writable.locked) {\n        await writable.getWriter().close();\n      }\n    }\n    return checkPasswordOnly ? UNDEFINED_VALUE : writer.getData ? writer.getData() : writable;\n  }\n}\nfunction readCommonHeader(directory, dataView, offset) {\n  const rawBitFlag = directory.rawBitFlag = getUint16(dataView, offset + 2);\n  const encrypted = (rawBitFlag & BITFLAG_ENCRYPTED) == BITFLAG_ENCRYPTED;\n  const rawLastModDate = getUint32(dataView, offset + 6);\n  Object.assign(directory, {\n    encrypted,\n    version: getUint16(dataView, offset),\n    bitFlag: {\n      level: (rawBitFlag & BITFLAG_LEVEL) >> 1,\n      dataDescriptor: (rawBitFlag & BITFLAG_DATA_DESCRIPTOR) == BITFLAG_DATA_DESCRIPTOR,\n      languageEncodingFlag: (rawBitFlag & BITFLAG_LANG_ENCODING_FLAG) == BITFLAG_LANG_ENCODING_FLAG\n    },\n    rawLastModDate,\n    lastModDate: getDate(rawLastModDate),\n    filenameLength: getUint16(dataView, offset + 22),\n    extraFieldLength: getUint16(dataView, offset + 24)\n  });\n}\nfunction readCommonFooter(fileEntry, directory, dataView, offset, localDirectory) {\n  const {\n    rawExtraField\n  } = directory;\n  const extraField = directory.extraField = new Map();\n  const rawExtraFieldView = getDataView(new Uint8Array(rawExtraField));\n  let offsetExtraField = 0;\n  try {\n    while (offsetExtraField < rawExtraField.length) {\n      const type = getUint16(rawExtraFieldView, offsetExtraField);\n      const size = getUint16(rawExtraFieldView, offsetExtraField + 2);\n      extraField.set(type, {\n        type,\n        data: rawExtraField.slice(offsetExtraField + 4, offsetExtraField + 4 + size)\n      });\n      offsetExtraField += 4 + size;\n    }\n  } catch (_error) {\n    // ignored\n  }\n  const compressionMethod = getUint16(dataView, offset + 4);\n  Object.assign(directory, {\n    signature: getUint32(dataView, offset + 10),\n    uncompressedSize: getUint32(dataView, offset + 18),\n    compressedSize: getUint32(dataView, offset + 14)\n  });\n  const extraFieldZip64 = extraField.get(EXTRAFIELD_TYPE_ZIP64);\n  if (extraFieldZip64) {\n    readExtraFieldZip64(extraFieldZip64, directory);\n    directory.extraFieldZip64 = extraFieldZip64;\n  }\n  const extraFieldUnicodePath = extraField.get(EXTRAFIELD_TYPE_UNICODE_PATH);\n  if (extraFieldUnicodePath) {\n    readExtraFieldUnicode(extraFieldUnicodePath, PROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_FILENAME, directory, fileEntry);\n    directory.extraFieldUnicodePath = extraFieldUnicodePath;\n  }\n  const extraFieldUnicodeComment = extraField.get(EXTRAFIELD_TYPE_UNICODE_COMMENT);\n  if (extraFieldUnicodeComment) {\n    readExtraFieldUnicode(extraFieldUnicodeComment, PROPERTY_NAME_COMMENT, PROPERTY_NAME_RAW_COMMENT, directory, fileEntry);\n    directory.extraFieldUnicodeComment = extraFieldUnicodeComment;\n  }\n  const extraFieldAES = extraField.get(EXTRAFIELD_TYPE_AES);\n  if (extraFieldAES) {\n    readExtraFieldAES(extraFieldAES, directory, compressionMethod);\n    directory.extraFieldAES = extraFieldAES;\n  } else {\n    directory.compressionMethod = compressionMethod;\n  }\n  const extraFieldNTFS = extraField.get(EXTRAFIELD_TYPE_NTFS);\n  if (extraFieldNTFS) {\n    readExtraFieldNTFS(extraFieldNTFS, directory);\n    directory.extraFieldNTFS = extraFieldNTFS;\n  }\n  const extraFieldExtendedTimestamp = extraField.get(EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP);\n  if (extraFieldExtendedTimestamp) {\n    readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory, localDirectory);\n    directory.extraFieldExtendedTimestamp = extraFieldExtendedTimestamp;\n  }\n  const extraFieldUSDZ = extraField.get(EXTRAFIELD_TYPE_USDZ);\n  if (extraFieldUSDZ) {\n    directory.extraFieldUSDZ = extraFieldUSDZ;\n  }\n}\nfunction readExtraFieldZip64(extraFieldZip64, directory) {\n  directory.zip64 = true;\n  const extraFieldView = getDataView(extraFieldZip64.data);\n  const missingProperties = ZIP64_PROPERTIES.filter(([propertyName, max]) => directory[propertyName] == max);\n  for (let indexMissingProperty = 0, offset = 0; indexMissingProperty < missingProperties.length; indexMissingProperty++) {\n    const [propertyName, max] = missingProperties[indexMissingProperty];\n    if (directory[propertyName] == max) {\n      const extraction = ZIP64_EXTRACTION[max];\n      directory[propertyName] = extraFieldZip64[propertyName] = extraction.getValue(extraFieldView, offset);\n      offset += extraction.bytes;\n    } else if (extraFieldZip64[propertyName]) {\n      throw new Error(ERR_EXTRAFIELD_ZIP64_NOT_FOUND);\n    }\n  }\n}\nfunction readExtraFieldUnicode(extraFieldUnicode, propertyName, rawPropertyName, directory, fileEntry) {\n  const extraFieldView = getDataView(extraFieldUnicode.data);\n  const crc32 = new Crc32();\n  crc32.append(fileEntry[rawPropertyName]);\n  const dataViewSignature = getDataView(new Uint8Array(4));\n  dataViewSignature.setUint32(0, crc32.get(), true);\n  const signature = getUint32(extraFieldView, 1);\n  Object.assign(extraFieldUnicode, {\n    version: getUint8(extraFieldView, 0),\n    [propertyName]: decodeText(extraFieldUnicode.data.subarray(5)),\n    valid: !fileEntry.bitFlag.languageEncodingFlag && signature == getUint32(dataViewSignature, 0)\n  });\n  if (extraFieldUnicode.valid) {\n    directory[propertyName] = extraFieldUnicode[propertyName];\n    directory[propertyName + \"UTF8\"] = true;\n  }\n}\nfunction readExtraFieldAES(extraFieldAES, directory, compressionMethod) {\n  const extraFieldView = getDataView(extraFieldAES.data);\n  const strength = getUint8(extraFieldView, 4);\n  Object.assign(extraFieldAES, {\n    vendorVersion: getUint8(extraFieldView, 0),\n    vendorId: getUint8(extraFieldView, 2),\n    strength,\n    originalCompressionMethod: compressionMethod,\n    compressionMethod: getUint16(extraFieldView, 5)\n  });\n  directory.compressionMethod = extraFieldAES.compressionMethod;\n}\nfunction readExtraFieldNTFS(extraFieldNTFS, directory) {\n  const extraFieldView = getDataView(extraFieldNTFS.data);\n  let offsetExtraField = 4;\n  let tag1Data;\n  try {\n    while (offsetExtraField < extraFieldNTFS.data.length && !tag1Data) {\n      const tagValue = getUint16(extraFieldView, offsetExtraField);\n      const attributeSize = getUint16(extraFieldView, offsetExtraField + 2);\n      if (tagValue == EXTRAFIELD_TYPE_NTFS_TAG1) {\n        tag1Data = extraFieldNTFS.data.slice(offsetExtraField + 4, offsetExtraField + 4 + attributeSize);\n      }\n      offsetExtraField += 4 + attributeSize;\n    }\n  } catch (_error) {\n    // ignored\n  }\n  try {\n    if (tag1Data && tag1Data.length == 24) {\n      const tag1View = getDataView(tag1Data);\n      const rawLastModDate = tag1View.getBigUint64(0, true);\n      const rawLastAccessDate = tag1View.getBigUint64(8, true);\n      const rawCreationDate = tag1View.getBigUint64(16, true);\n      Object.assign(extraFieldNTFS, {\n        rawLastModDate,\n        rawLastAccessDate,\n        rawCreationDate\n      });\n      const lastModDate = getDateNTFS(rawLastModDate);\n      const lastAccessDate = getDateNTFS(rawLastAccessDate);\n      const creationDate = getDateNTFS(rawCreationDate);\n      const extraFieldData = {\n        lastModDate,\n        lastAccessDate,\n        creationDate\n      };\n      Object.assign(extraFieldNTFS, extraFieldData);\n      Object.assign(directory, extraFieldData);\n    }\n  } catch (_error) {\n    // ignored\n  }\n}\nfunction readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory, localDirectory) {\n  const extraFieldView = getDataView(extraFieldExtendedTimestamp.data);\n  const flags = getUint8(extraFieldView, 0);\n  const timeProperties = [];\n  const timeRawProperties = [];\n  if (localDirectory) {\n    if ((flags & 0x1) == 0x1) {\n      timeProperties.push(PROPERTY_NAME_LAST_MODIFICATION_DATE);\n      timeRawProperties.push(PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE);\n    }\n    if ((flags & 0x2) == 0x2) {\n      timeProperties.push(PROPERTY_NAME_LAST_ACCESS_DATE);\n      timeRawProperties.push(PROPERTY_NAME_RAW_LAST_ACCESS_DATE);\n    }\n    if ((flags & 0x4) == 0x4) {\n      timeProperties.push(PROPERTY_NAME_CREATION_DATE);\n      timeRawProperties.push(PROPERTY_NAME_RAW_CREATION_DATE);\n    }\n  } else if (extraFieldExtendedTimestamp.data.length >= 5) {\n    timeProperties.push(PROPERTY_NAME_LAST_MODIFICATION_DATE);\n    timeRawProperties.push(PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE);\n  }\n  let offset = 1;\n  timeProperties.forEach((propertyName, indexProperty) => {\n    if (extraFieldExtendedTimestamp.data.length >= offset + 4) {\n      const time = getUint32(extraFieldView, offset);\n      directory[propertyName] = extraFieldExtendedTimestamp[propertyName] = new Date(time * 1000);\n      const rawPropertyName = timeRawProperties[indexProperty];\n      extraFieldExtendedTimestamp[rawPropertyName] = time;\n    }\n    offset += 4;\n  });\n}\nasync function seekSignature(reader, signature, startOffset, minimumBytes, maximumLength) {\n  const signatureArray = new Uint8Array(4);\n  const signatureView = getDataView(signatureArray);\n  setUint32(signatureView, 0, signature);\n  const maximumBytes = minimumBytes + maximumLength;\n  return (await seek(minimumBytes)) || (await seek(Math.min(maximumBytes, startOffset)));\n  async function seek(length) {\n    const offset = startOffset - length;\n    const bytes = await readUint8Array(reader, offset, length);\n    for (let indexByte = bytes.length - minimumBytes; indexByte >= 0; indexByte--) {\n      if (bytes[indexByte] == signatureArray[0] && bytes[indexByte + 1] == signatureArray[1] && bytes[indexByte + 2] == signatureArray[2] && bytes[indexByte + 3] == signatureArray[3]) {\n        return {\n          offset: offset + indexByte,\n          buffer: bytes.slice(indexByte, indexByte + minimumBytes).buffer\n        };\n      }\n    }\n  }\n}\nfunction getOptionValue(zipReader, options, name) {\n  return options[name] === UNDEFINED_VALUE ? zipReader.options[name] : options[name];\n}\nfunction getDate(timeRaw) {\n  const date = (timeRaw & 0xffff0000) >> 16,\n    time = timeRaw & 0x0000ffff;\n  try {\n    return new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5, (time & 0x001F) * 2, 0);\n  } catch (_error) {\n    // ignored\n  }\n}\nfunction getDateNTFS(timeRaw) {\n  return new Date(Number(timeRaw / BigInt(10000) - BigInt(11644473600000)));\n}\nfunction getUint8(view, offset) {\n  return view.getUint8(offset);\n}\nfunction getUint16(view, offset) {\n  return view.getUint16(offset, true);\n}\nfunction getUint32(view, offset) {\n  return view.getUint32(offset, true);\n}\nfunction getBigUint64(view, offset) {\n  return Number(view.getBigUint64(offset, true));\n}\nfunction setUint32(view, offset, value) {\n  view.setUint32(offset, value, true);\n}\nfunction getDataView(array) {\n  return new DataView(array.buffer);\n}","map":{"version":3,"names":["MAX_32_BITS","MAX_16_BITS","COMPRESSION_METHOD_DEFLATE","COMPRESSION_METHOD_STORE","COMPRESSION_METHOD_AES","SPLIT_ZIP_FILE_SIGNATURE","LOCAL_FILE_HEADER_SIGNATURE","CENTRAL_FILE_HEADER_SIGNATURE","END_OF_CENTRAL_DIR_SIGNATURE","ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE","ZIP64_END_OF_CENTRAL_DIR_SIGNATURE","EXTRAFIELD_TYPE_ZIP64","EXTRAFIELD_TYPE_UNICODE_PATH","EXTRAFIELD_TYPE_UNICODE_COMMENT","EXTRAFIELD_TYPE_AES","EXTRAFIELD_TYPE_NTFS","EXTRAFIELD_TYPE_NTFS_TAG1","EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP","EXTRAFIELD_TYPE_USDZ","END_OF_CENTRAL_DIR_LENGTH","ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH","ZIP64_END_OF_CENTRAL_DIR_LENGTH","BITFLAG_ENCRYPTED","BITFLAG_LEVEL","BITFLAG_DATA_DESCRIPTOR","BITFLAG_LANG_ENCODING_FLAG","FILE_ATTR_MSDOS_DIR_MASK","DIRECTORY_SIGNATURE","UNDEFINED_VALUE","getConfiguration","getChunkSize","runWorker","CODEC_INFLATE","ERR_INVALID_SIGNATURE","ERR_INVALID_PASSWORD","ERR_ABORT_CHECK_PASSWORD","initStream","initReader","initWriter","readUint8Array","BlobReader","decodeText","Crc32","PROPERTY_NAME_RAW_FILENAME","PROPERTY_NAME_FILENAME","PROPERTY_NAME_RAW_COMMENT","PROPERTY_NAME_COMMENT","PROPERTY_NAME_UNCOMPPRESSED_SIZE","PROPERTY_NAME_COMPPRESSED_SIZE","PROPERTY_NAME_OFFSET","PROPERTY_NAME_DISK_NUMBER_START","PROPERTY_NAME_LAST_MODIFICATION_DATE","PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE","PROPERTY_NAME_LAST_ACCESS_DATE","PROPERTY_NAME_RAW_LAST_ACCESS_DATE","PROPERTY_NAME_CREATION_DATE","PROPERTY_NAME_RAW_CREATION_DATE","Entry","ERR_BAD_FORMAT","ERR_EOCDR_NOT_FOUND","ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND","ERR_CENTRAL_DIRECTORY_NOT_FOUND","ERR_LOCAL_FILE_HEADER_NOT_FOUND","ERR_EXTRAFIELD_ZIP64_NOT_FOUND","ERR_ENCRYPTED","ERR_UNSUPPORTED_ENCRYPTION","ERR_UNSUPPORTED_COMPRESSION","ERR_SPLIT_ZIP_FILE","CHARSET_UTF8","CHARSET_CP437","ZIP64_PROPERTIES","ZIP64_EXTRACTION","getValue","getUint32","bytes","getBigUint64","ZipReader","constructor","reader","options","Object","assign","config","getEntriesGenerator","zipReader","size","Response","readable","blob","Error","chunkSize","endOfDirectoryInfo","seekSignature","signatureArray","signatureView","getDataView","endOfDirectoryView","directoryDataLength","directoryDataOffset","commentOffset","offset","commentLength","getUint16","appendedDataOffset","lastDiskNumber","expectedLastDiskNumber","diskNumber","filesLength","prependedDataLength","startOffset","endOfDirectoryLocatorArray","endOfDirectoryLocatorView","endOfDirectoryArray","expectedDirectoryDataOffset","originalDirectoryDataOffset","directoryArray","directoryView","expectedDirectoryDataLength","lastDiskOffset","filenameEncoding","getOptionValue","commentEncoding","indexFile","fileEntry","ZipEntry","readCommonHeader","languageEncodingFlag","Boolean","bitFlag","filenameOffset","extraFieldOffset","filenameLength","extraFieldLength","versionMadeBy","msDosCompatible","rawFilename","subarray","endOffset","rawComment","filenameUTF8","commentUTF8","directory","getUint8","offsetFileEntry","compressedSize","uncompressedSize","diskNumberStart","internalFileAttribute","externalFileAttribute","rawExtraField","decode","rawFilenameEncoding","rawCommentEncoding","filename","comment","endsWith","Math","max","readCommonFooter","zipCrypto","encrypted","extraFieldAES","entry","getData","writer","onprogress","_error","extractPrependedData","extractAppendedData","prependedData","Uint8Array","appendedData","getEntries","entries","push","close","ZipReaderStream","writable","TransformStream","gen","ReadableStream","pull","controller","done","value","next","chunk","enqueue","zipEntry","compressionMethod","signature","rawLastModDate","localDirectory","dataArray","dataView","password","rawPassword","passThrough","length","originalCompressionMethod","lastAccessDate","creationDate","strength","dataOffset","signal","checkPasswordOnly","WritableStream","onstart","onend","workerOptions","codecType","encryptionStrength","signed","passwordVerification","dataDescriptor","compressed","useWebWorkers","useCompressionStream","transferStreams","streamOptions","outputSize","error","message","preventClose","locked","getWriter","rawBitFlag","version","level","lastModDate","getDate","extraField","Map","rawExtraFieldView","offsetExtraField","type","set","data","slice","extraFieldZip64","get","readExtraFieldZip64","extraFieldUnicodePath","readExtraFieldUnicode","extraFieldUnicodeComment","readExtraFieldAES","extraFieldNTFS","readExtraFieldNTFS","extraFieldExtendedTimestamp","readExtraFieldExtendedTimestamp","extraFieldUSDZ","zip64","extraFieldView","missingProperties","filter","propertyName","indexMissingProperty","extraction","extraFieldUnicode","rawPropertyName","crc32","append","dataViewSignature","setUint32","valid","vendorVersion","vendorId","tag1Data","tagValue","attributeSize","tag1View","rawLastAccessDate","rawCreationDate","getDateNTFS","extraFieldData","flags","timeProperties","timeRawProperties","forEach","indexProperty","time","Date","minimumBytes","maximumLength","maximumBytes","seek","min","indexByte","buffer","name","timeRaw","date","Number","BigInt","view","array","DataView"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@zip.js/zip.js/lib/core/zip-reader.js"],"sourcesContent":["/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global BigInt, Response, WritableStream, ReadableStream, TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport {\n\tMAX_32_BITS,\n\tMAX_16_BITS,\n\tCOMPRESSION_METHOD_DEFLATE,\n\tCOMPRESSION_METHOD_STORE,\n\tCOMPRESSION_METHOD_AES,\n\tSPLIT_ZIP_FILE_SIGNATURE,\n\tLOCAL_FILE_HEADER_SIGNATURE,\n\tCENTRAL_FILE_HEADER_SIGNATURE,\n\tEND_OF_CENTRAL_DIR_SIGNATURE,\n\tZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE,\n\tZIP64_END_OF_CENTRAL_DIR_SIGNATURE,\n\tEXTRAFIELD_TYPE_ZIP64,\n\tEXTRAFIELD_TYPE_UNICODE_PATH,\n\tEXTRAFIELD_TYPE_UNICODE_COMMENT,\n\tEXTRAFIELD_TYPE_AES,\n\tEXTRAFIELD_TYPE_NTFS,\n\tEXTRAFIELD_TYPE_NTFS_TAG1,\n\tEXTRAFIELD_TYPE_EXTENDED_TIMESTAMP,\n\tEXTRAFIELD_TYPE_USDZ,\n\tEND_OF_CENTRAL_DIR_LENGTH,\n\tZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH,\n\tZIP64_END_OF_CENTRAL_DIR_LENGTH,\n\tBITFLAG_ENCRYPTED,\n\tBITFLAG_LEVEL,\n\tBITFLAG_DATA_DESCRIPTOR,\n\tBITFLAG_LANG_ENCODING_FLAG,\n\tFILE_ATTR_MSDOS_DIR_MASK,\n\tDIRECTORY_SIGNATURE,\n\tUNDEFINED_VALUE\n} from \"./constants.js\";\nimport {\n\tgetConfiguration,\n\tgetChunkSize\n} from \"./configuration.js\";\nimport {\n\trunWorker,\n\tCODEC_INFLATE,\n\tERR_INVALID_SIGNATURE,\n\tERR_INVALID_PASSWORD,\n\tERR_ABORT_CHECK_PASSWORD\n} from \"./codec-pool.js\";\nimport {\n\tinitStream,\n\tinitReader,\n\tinitWriter,\n\treadUint8Array,\n\tBlobReader\n} from \"./io.js\";\nimport { decodeText } from \"./util/decode-text.js\";\nimport { Crc32 } from \"./streams/codecs/crc32.js\";\nimport {\n\tPROPERTY_NAME_RAW_FILENAME,\n\tPROPERTY_NAME_FILENAME,\n\tPROPERTY_NAME_RAW_COMMENT,\n\tPROPERTY_NAME_COMMENT,\n\tPROPERTY_NAME_UNCOMPPRESSED_SIZE,\n\tPROPERTY_NAME_COMPPRESSED_SIZE,\n\tPROPERTY_NAME_OFFSET,\n\tPROPERTY_NAME_DISK_NUMBER_START,\n\tPROPERTY_NAME_LAST_MODIFICATION_DATE,\n\tPROPERTY_NAME_RAW_LAST_MODIFICATION_DATE,\n\tPROPERTY_NAME_LAST_ACCESS_DATE,\n\tPROPERTY_NAME_RAW_LAST_ACCESS_DATE,\n\tPROPERTY_NAME_CREATION_DATE,\n\tPROPERTY_NAME_RAW_CREATION_DATE,\n\tEntry\n} from \"./zip-entry.js\";\n\nconst ERR_BAD_FORMAT = \"File format is not recognized\";\nconst ERR_EOCDR_NOT_FOUND = \"End of central directory not found\";\nconst ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND = \"End of Zip64 central directory locator not found\";\nconst ERR_CENTRAL_DIRECTORY_NOT_FOUND = \"Central directory header not found\";\nconst ERR_LOCAL_FILE_HEADER_NOT_FOUND = \"Local file header not found\";\nconst ERR_EXTRAFIELD_ZIP64_NOT_FOUND = \"Zip64 extra field not found\";\nconst ERR_ENCRYPTED = \"File contains encrypted entry\";\nconst ERR_UNSUPPORTED_ENCRYPTION = \"Encryption method not supported\";\nconst ERR_UNSUPPORTED_COMPRESSION = \"Compression method not supported\";\nconst ERR_SPLIT_ZIP_FILE = \"Split zip file\";\nconst CHARSET_UTF8 = \"utf-8\";\nconst CHARSET_CP437 = \"cp437\";\nconst ZIP64_PROPERTIES = [\n\t[PROPERTY_NAME_UNCOMPPRESSED_SIZE, MAX_32_BITS],\n\t[PROPERTY_NAME_COMPPRESSED_SIZE, MAX_32_BITS],\n\t[PROPERTY_NAME_OFFSET, MAX_32_BITS],\n\t[PROPERTY_NAME_DISK_NUMBER_START, MAX_16_BITS]\n];\nconst ZIP64_EXTRACTION = {\n\t[MAX_16_BITS]: {\n\t\tgetValue: getUint32,\n\t\tbytes: 4\n\t},\n\t[MAX_32_BITS]: {\n\t\tgetValue: getBigUint64,\n\t\tbytes: 8\n\t}\n};\n\nclass ZipReader {\n\n\tconstructor(reader, options = {}) {\n\t\tObject.assign(this, {\n\t\t\treader: initReader(reader),\n\t\t\toptions,\n\t\t\tconfig: getConfiguration()\n\t\t});\n\t}\n\n\tasync* getEntriesGenerator(options = {}) {\n\t\tconst zipReader = this;\n\t\tlet { reader } = zipReader;\n\t\tconst { config } = zipReader;\n\t\tawait initStream(reader);\n\t\tif (reader.size === UNDEFINED_VALUE || !reader.readUint8Array) {\n\t\t\treader = new BlobReader(await new Response(reader.readable).blob());\n\t\t\tawait initStream(reader);\n\t\t}\n\t\tif (reader.size < END_OF_CENTRAL_DIR_LENGTH) {\n\t\t\tthrow new Error(ERR_BAD_FORMAT);\n\t\t}\n\t\treader.chunkSize = getChunkSize(config);\n\t\tconst endOfDirectoryInfo = await seekSignature(reader, END_OF_CENTRAL_DIR_SIGNATURE, reader.size, END_OF_CENTRAL_DIR_LENGTH, MAX_16_BITS * 16);\n\t\tif (!endOfDirectoryInfo) {\n\t\t\tconst signatureArray = await readUint8Array(reader, 0, 4);\n\t\t\tconst signatureView = getDataView(signatureArray);\n\t\t\tif (getUint32(signatureView) == SPLIT_ZIP_FILE_SIGNATURE) {\n\t\t\t\tthrow new Error(ERR_SPLIT_ZIP_FILE);\n\t\t\t} else {\n\t\t\t\tthrow new Error(ERR_EOCDR_NOT_FOUND);\n\t\t\t}\n\t\t}\n\t\tconst endOfDirectoryView = getDataView(endOfDirectoryInfo);\n\t\tlet directoryDataLength = getUint32(endOfDirectoryView, 12);\n\t\tlet directoryDataOffset = getUint32(endOfDirectoryView, 16);\n\t\tconst commentOffset = endOfDirectoryInfo.offset;\n\t\tconst commentLength = getUint16(endOfDirectoryView, 20);\n\t\tconst appendedDataOffset = commentOffset + END_OF_CENTRAL_DIR_LENGTH + commentLength;\n\t\tlet lastDiskNumber = getUint16(endOfDirectoryView, 4);\n\t\tconst expectedLastDiskNumber = reader.lastDiskNumber || 0;\n\t\tlet diskNumber = getUint16(endOfDirectoryView, 6);\n\t\tlet filesLength = getUint16(endOfDirectoryView, 8);\n\t\tlet prependedDataLength = 0;\n\t\tlet startOffset = 0;\n\t\tif (directoryDataOffset == MAX_32_BITS || directoryDataLength == MAX_32_BITS || filesLength == MAX_16_BITS || diskNumber == MAX_16_BITS) {\n\t\t\tconst endOfDirectoryLocatorArray = await readUint8Array(reader, endOfDirectoryInfo.offset - ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH);\n\t\t\tconst endOfDirectoryLocatorView = getDataView(endOfDirectoryLocatorArray);\n\t\t\tif (getUint32(endOfDirectoryLocatorView, 0) == ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE) {\n\t\t\t\tdirectoryDataOffset = getBigUint64(endOfDirectoryLocatorView, 8);\n\t\t\t\tlet endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);\n\t\t\t\tlet endOfDirectoryView = getDataView(endOfDirectoryArray);\n\t\t\t\tconst expectedDirectoryDataOffset = endOfDirectoryInfo.offset - ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH - ZIP64_END_OF_CENTRAL_DIR_LENGTH;\n\t\t\t\tif (getUint32(endOfDirectoryView, 0) != ZIP64_END_OF_CENTRAL_DIR_SIGNATURE && directoryDataOffset != expectedDirectoryDataOffset) {\n\t\t\t\t\tconst originalDirectoryDataOffset = directoryDataOffset;\n\t\t\t\t\tdirectoryDataOffset = expectedDirectoryDataOffset;\n\t\t\t\t\tprependedDataLength = directoryDataOffset - originalDirectoryDataOffset;\n\t\t\t\t\tendOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);\n\t\t\t\t\tendOfDirectoryView = getDataView(endOfDirectoryArray);\n\t\t\t\t}\n\t\t\t\tif (getUint32(endOfDirectoryView, 0) != ZIP64_END_OF_CENTRAL_DIR_SIGNATURE) {\n\t\t\t\t\tthrow new Error(ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND);\n\t\t\t\t}\n\t\t\t\tif (lastDiskNumber == MAX_16_BITS) {\n\t\t\t\t\tlastDiskNumber = getUint32(endOfDirectoryView, 16);\n\t\t\t\t}\n\t\t\t\tif (diskNumber == MAX_16_BITS) {\n\t\t\t\t\tdiskNumber = getUint32(endOfDirectoryView, 20);\n\t\t\t\t}\n\t\t\t\tif (filesLength == MAX_16_BITS) {\n\t\t\t\t\tfilesLength = getBigUint64(endOfDirectoryView, 32);\n\t\t\t\t}\n\t\t\t\tif (directoryDataLength == MAX_32_BITS) {\n\t\t\t\t\tdirectoryDataLength = getBigUint64(endOfDirectoryView, 40);\n\t\t\t\t}\n\t\t\t\tdirectoryDataOffset -= directoryDataLength;\n\t\t\t}\n\t\t}\n\t\tif (directoryDataOffset >= reader.size) {\n\t\t\tprependedDataLength = reader.size - directoryDataOffset - directoryDataLength - END_OF_CENTRAL_DIR_LENGTH;\n\t\t\tdirectoryDataOffset = reader.size - directoryDataLength - END_OF_CENTRAL_DIR_LENGTH;\n\t\t}\n\t\tif (expectedLastDiskNumber != lastDiskNumber) {\n\t\t\tthrow new Error(ERR_SPLIT_ZIP_FILE);\n\t\t}\n\t\tif (directoryDataOffset < 0) {\n\t\t\tthrow new Error(ERR_BAD_FORMAT);\n\t\t}\n\t\tlet offset = 0;\n\t\tlet directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n\t\tlet directoryView = getDataView(directoryArray);\n\t\tif (directoryDataLength) {\n\t\t\tconst expectedDirectoryDataOffset = endOfDirectoryInfo.offset - directoryDataLength;\n\t\t\tif (getUint32(directoryView, offset) != CENTRAL_FILE_HEADER_SIGNATURE && directoryDataOffset != expectedDirectoryDataOffset) {\n\t\t\t\tconst originalDirectoryDataOffset = directoryDataOffset;\n\t\t\t\tdirectoryDataOffset = expectedDirectoryDataOffset;\n\t\t\t\tprependedDataLength += directoryDataOffset - originalDirectoryDataOffset;\n\t\t\t\tdirectoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n\t\t\t\tdirectoryView = getDataView(directoryArray);\n\t\t\t}\n\t\t}\n\t\tconst expectedDirectoryDataLength = endOfDirectoryInfo.offset - directoryDataOffset - (reader.lastDiskOffset || 0);\n\t\tif (directoryDataLength != expectedDirectoryDataLength && expectedDirectoryDataLength >= 0) {\n\t\t\tdirectoryDataLength = expectedDirectoryDataLength;\n\t\t\tdirectoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n\t\t\tdirectoryView = getDataView(directoryArray);\n\t\t}\n\t\tif (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {\n\t\t\tthrow new Error(ERR_BAD_FORMAT);\n\t\t}\n\t\tconst filenameEncoding = getOptionValue(zipReader, options, \"filenameEncoding\");\n\t\tconst commentEncoding = getOptionValue(zipReader, options, \"commentEncoding\");\n\t\tfor (let indexFile = 0; indexFile < filesLength; indexFile++) {\n\t\t\tconst fileEntry = new ZipEntry(reader, config, zipReader.options);\n\t\t\tif (getUint32(directoryView, offset) != CENTRAL_FILE_HEADER_SIGNATURE) {\n\t\t\t\tthrow new Error(ERR_CENTRAL_DIRECTORY_NOT_FOUND);\n\t\t\t}\n\t\t\treadCommonHeader(fileEntry, directoryView, offset + 6);\n\t\t\tconst languageEncodingFlag = Boolean(fileEntry.bitFlag.languageEncodingFlag);\n\t\t\tconst filenameOffset = offset + 46;\n\t\t\tconst extraFieldOffset = filenameOffset + fileEntry.filenameLength;\n\t\t\tconst commentOffset = extraFieldOffset + fileEntry.extraFieldLength;\n\t\t\tconst versionMadeBy = getUint16(directoryView, offset + 4);\n\t\t\tconst msDosCompatible = (versionMadeBy & 0) == 0;\n\t\t\tconst rawFilename = directoryArray.subarray(filenameOffset, extraFieldOffset);\n\t\t\tconst commentLength = getUint16(directoryView, offset + 32);\n\t\t\tconst endOffset = commentOffset + commentLength;\n\t\t\tconst rawComment = directoryArray.subarray(commentOffset, endOffset);\n\t\t\tconst filenameUTF8 = languageEncodingFlag;\n\t\t\tconst commentUTF8 = languageEncodingFlag;\n\t\t\tconst directory = msDosCompatible && ((getUint8(directoryView, offset + 38) & FILE_ATTR_MSDOS_DIR_MASK) == FILE_ATTR_MSDOS_DIR_MASK);\n\t\t\tconst offsetFileEntry = getUint32(directoryView, offset + 42) + prependedDataLength;\n\t\t\tObject.assign(fileEntry, {\n\t\t\t\tversionMadeBy,\n\t\t\t\tmsDosCompatible,\n\t\t\t\tcompressedSize: 0,\n\t\t\t\tuncompressedSize: 0,\n\t\t\t\tcommentLength,\n\t\t\t\tdirectory,\n\t\t\t\toffset: offsetFileEntry,\n\t\t\t\tdiskNumberStart: getUint16(directoryView, offset + 34),\n\t\t\t\tinternalFileAttribute: getUint16(directoryView, offset + 36),\n\t\t\t\texternalFileAttribute: getUint32(directoryView, offset + 38),\n\t\t\t\trawFilename,\n\t\t\t\tfilenameUTF8,\n\t\t\t\tcommentUTF8,\n\t\t\t\trawExtraField: directoryArray.subarray(extraFieldOffset, commentOffset)\n\t\t\t});\n\t\t\tconst decode = getOptionValue(zipReader, options, \"decodeText\") || decodeText;\n\t\t\tconst rawFilenameEncoding = filenameUTF8 ? CHARSET_UTF8 : filenameEncoding || CHARSET_CP437;\n\t\t\tconst rawCommentEncoding = commentUTF8 ? CHARSET_UTF8 : commentEncoding || CHARSET_CP437;\n\t\t\tlet filename = decode(rawFilename, rawFilenameEncoding);\n\t\t\tif (filename === UNDEFINED_VALUE) {\n\t\t\t\tfilename = decodeText(rawFilename, rawFilenameEncoding);\n\t\t\t}\n\t\t\tlet comment = decode(rawComment, rawCommentEncoding);\n\t\t\tif (comment === UNDEFINED_VALUE) {\n\t\t\t\tcomment = decodeText(rawComment, rawCommentEncoding);\n\t\t\t}\n\t\t\tObject.assign(fileEntry, {\n\t\t\t\trawComment,\n\t\t\t\tfilename,\n\t\t\t\tcomment,\n\t\t\t\tdirectory: directory || filename.endsWith(DIRECTORY_SIGNATURE)\n\t\t\t});\n\t\t\tstartOffset = Math.max(offsetFileEntry, startOffset);\n\t\t\treadCommonFooter(fileEntry, fileEntry, directoryView, offset + 6);\n\t\t\tfileEntry.zipCrypto = fileEntry.encrypted && !fileEntry.extraFieldAES;\n\t\t\tconst entry = new Entry(fileEntry);\n\t\t\tentry.getData = (writer, options) => fileEntry.getData(writer, entry, options);\n\t\t\toffset = endOffset;\n\t\t\tconst { onprogress } = options;\n\t\t\tif (onprogress) {\n\t\t\t\ttry {\n\t\t\t\t\tawait onprogress(indexFile + 1, filesLength, new Entry(fileEntry));\n\t\t\t\t} catch (_error) {\n\t\t\t\t\t// ignored\n\t\t\t\t}\n\t\t\t}\n\t\t\tyield entry;\n\t\t}\n\t\tconst extractPrependedData = getOptionValue(zipReader, options, \"extractPrependedData\");\n\t\tconst extractAppendedData = getOptionValue(zipReader, options, \"extractAppendedData\");\n\t\tif (extractPrependedData) {\n\t\t\tzipReader.prependedData = startOffset > 0 ? await readUint8Array(reader, 0, startOffset) : new Uint8Array();\n\t\t}\n\t\tzipReader.comment = commentLength ? await readUint8Array(reader, commentOffset + END_OF_CENTRAL_DIR_LENGTH, commentLength) : new Uint8Array();\n\t\tif (extractAppendedData) {\n\t\t\tzipReader.appendedData = appendedDataOffset < reader.size ? await readUint8Array(reader, appendedDataOffset, reader.size - appendedDataOffset) : new Uint8Array();\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync getEntries(options = {}) {\n\t\tconst entries = [];\n\t\tfor await (const entry of this.getEntriesGenerator(options)) {\n\t\t\tentries.push(entry);\n\t\t}\n\t\treturn entries;\n\t}\n\n\tasync close() {\n\t}\n}\n\nclass ZipReaderStream {\n\n\tconstructor(options = {}) {\n\t\tconst { readable, writable } = new TransformStream();\n\t\tconst gen = new ZipReader(readable, options).getEntriesGenerator();\n\t\tthis.readable = new ReadableStream({\n\t\t\tasync pull(controller) {\n\t\t\t\tconst { done, value } = await gen.next();\n\t\t\t\tif (done)\n\t\t\t\t\treturn controller.close();\n\t\t\t\tconst chunk = {\n\t\t\t\t\t...value,\n\t\t\t\t\treadable: (function () {\n\t\t\t\t\t\tconst { readable, writable } = new TransformStream();\n\t\t\t\t\t\tif (value.getData) {\n\t\t\t\t\t\t\tvalue.getData(writable);\n\t\t\t\t\t\t\treturn readable;\n\t\t\t\t\t\t}\n\t\t\t\t\t})()\n\t\t\t\t};\n\t\t\t\tdelete chunk.getData;\n\t\t\t\tcontroller.enqueue(chunk);\n\t\t\t}\n\t\t});\n\t\tthis.writable = writable;\n\t}\n}\n\nexport {\n\tZipReader,\n\tZipReaderStream,\n\tERR_BAD_FORMAT,\n\tERR_EOCDR_NOT_FOUND,\n\tERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND,\n\tERR_CENTRAL_DIRECTORY_NOT_FOUND,\n\tERR_LOCAL_FILE_HEADER_NOT_FOUND,\n\tERR_EXTRAFIELD_ZIP64_NOT_FOUND,\n\tERR_ENCRYPTED,\n\tERR_UNSUPPORTED_ENCRYPTION,\n\tERR_UNSUPPORTED_COMPRESSION,\n\tERR_INVALID_SIGNATURE,\n\tERR_INVALID_PASSWORD,\n\tERR_SPLIT_ZIP_FILE\n};\n\nclass ZipEntry {\n\n\tconstructor(reader, config, options) {\n\t\tObject.assign(this, {\n\t\t\treader,\n\t\t\tconfig,\n\t\t\toptions\n\t\t});\n\t}\n\n\tasync getData(writer, fileEntry, options = {}) {\n\t\tconst zipEntry = this;\n\t\tconst {\n\t\t\treader,\n\t\t\toffset,\n\t\t\tdiskNumberStart,\n\t\t\textraFieldAES,\n\t\t\tcompressionMethod,\n\t\t\tconfig,\n\t\t\tbitFlag,\n\t\t\tsignature,\n\t\t\trawLastModDate,\n\t\t\tuncompressedSize,\n\t\t\tcompressedSize\n\t\t} = zipEntry;\n\t\tconst localDirectory = fileEntry.localDirectory = {};\n\t\tconst dataArray = await readUint8Array(reader, offset, 30, diskNumberStart);\n\t\tconst dataView = getDataView(dataArray);\n\t\tlet password = getOptionValue(zipEntry, options, \"password\");\n\t\tlet rawPassword = getOptionValue(zipEntry, options, \"rawPassword\");\n\t\tconst passThrough = getOptionValue(zipEntry, options, \"passThrough\");\n\t\tpassword = password && password.length && password;\n\t\trawPassword = rawPassword && rawPassword.length && rawPassword;\n\t\tif (extraFieldAES) {\n\t\t\tif (extraFieldAES.originalCompressionMethod != COMPRESSION_METHOD_AES) {\n\t\t\t\tthrow new Error(ERR_UNSUPPORTED_COMPRESSION);\n\t\t\t}\n\t\t}\n\t\tif ((compressionMethod != COMPRESSION_METHOD_STORE && compressionMethod != COMPRESSION_METHOD_DEFLATE) && !passThrough) {\n\t\t\tthrow new Error(ERR_UNSUPPORTED_COMPRESSION);\n\t\t}\n\t\tif (getUint32(dataView, 0) != LOCAL_FILE_HEADER_SIGNATURE) {\n\t\t\tthrow new Error(ERR_LOCAL_FILE_HEADER_NOT_FOUND);\n\t\t}\n\t\treadCommonHeader(localDirectory, dataView, 4);\n\t\tlocalDirectory.rawExtraField = localDirectory.extraFieldLength ?\n\t\t\tawait readUint8Array(reader, offset + 30 + localDirectory.filenameLength, localDirectory.extraFieldLength, diskNumberStart) :\n\t\t\tnew Uint8Array();\n\t\treadCommonFooter(zipEntry, localDirectory, dataView, 4, true);\n\t\tObject.assign(fileEntry, {\n\t\t\tlastAccessDate: localDirectory.lastAccessDate,\n\t\t\tcreationDate: localDirectory.creationDate\n\t\t});\n\t\tconst encrypted = zipEntry.encrypted && localDirectory.encrypted && !passThrough;\n\t\tconst zipCrypto = encrypted && !extraFieldAES;\n\t\tif (!passThrough) {\n\t\t\tfileEntry.zipCrypto = zipCrypto;\n\t\t}\n\t\tif (encrypted) {\n\t\t\tif (!zipCrypto && extraFieldAES.strength === UNDEFINED_VALUE) {\n\t\t\t\tthrow new Error(ERR_UNSUPPORTED_ENCRYPTION);\n\t\t\t} else if (!password && !rawPassword) {\n\t\t\t\tthrow new Error(ERR_ENCRYPTED);\n\t\t\t}\n\t\t}\n\t\tconst dataOffset = offset + 30 + localDirectory.filenameLength + localDirectory.extraFieldLength;\n\t\tconst size = compressedSize;\n\t\tconst readable = reader.readable;\n\t\tObject.assign(readable, {\n\t\t\tdiskNumberStart,\n\t\t\toffset: dataOffset,\n\t\t\tsize\n\t\t});\n\t\tconst signal = getOptionValue(zipEntry, options, \"signal\");\n\t\tconst checkPasswordOnly = getOptionValue(zipEntry, options, \"checkPasswordOnly\");\n\t\tif (checkPasswordOnly) {\n\t\t\twriter = new WritableStream();\n\t\t}\n\t\twriter = initWriter(writer);\n\t\tawait initStream(writer, passThrough ? compressedSize : uncompressedSize);\n\t\tconst { writable } = writer;\n\t\tconst { onstart, onprogress, onend } = options;\n\t\tconst workerOptions = {\n\t\t\toptions: {\n\t\t\t\tcodecType: CODEC_INFLATE,\n\t\t\t\tpassword,\n\t\t\t\trawPassword,\n\t\t\t\tzipCrypto,\n\t\t\t\tencryptionStrength: extraFieldAES && extraFieldAES.strength,\n\t\t\t\tsigned: getOptionValue(zipEntry, options, \"checkSignature\") && !passThrough,\n\t\t\t\tpasswordVerification: zipCrypto && (bitFlag.dataDescriptor ? ((rawLastModDate >>> 8) & 0xFF) : ((signature >>> 24) & 0xFF)),\n\t\t\t\tsignature,\n\t\t\t\tcompressed: compressionMethod != 0 && !passThrough,\n\t\t\t\tencrypted: zipEntry.encrypted && !passThrough,\n\t\t\t\tuseWebWorkers: getOptionValue(zipEntry, options, \"useWebWorkers\"),\n\t\t\t\tuseCompressionStream: getOptionValue(zipEntry, options, \"useCompressionStream\"),\n\t\t\t\ttransferStreams: getOptionValue(zipEntry, options, \"transferStreams\"),\n\t\t\t\tcheckPasswordOnly\n\t\t\t},\n\t\t\tconfig,\n\t\t\tstreamOptions: { signal, size, onstart, onprogress, onend }\n\t\t};\n\t\tlet outputSize = 0;\n\t\ttry {\n\t\t\t({ outputSize } = (await runWorker({ readable, writable }, workerOptions)));\n\t\t} catch (error) {\n\t\t\tif (!checkPasswordOnly || error.message != ERR_ABORT_CHECK_PASSWORD) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t} finally {\n\t\t\tconst preventClose = getOptionValue(zipEntry, options, \"preventClose\");\n\t\t\twritable.size += outputSize;\n\t\t\tif (!preventClose && !writable.locked) {\n\t\t\t\tawait writable.getWriter().close();\n\t\t\t}\n\t\t}\n\t\treturn checkPasswordOnly ? UNDEFINED_VALUE : writer.getData ? writer.getData() : writable;\n\t}\n}\n\nfunction readCommonHeader(directory, dataView, offset) {\n\tconst rawBitFlag = directory.rawBitFlag = getUint16(dataView, offset + 2);\n\tconst encrypted = (rawBitFlag & BITFLAG_ENCRYPTED) == BITFLAG_ENCRYPTED;\n\tconst rawLastModDate = getUint32(dataView, offset + 6);\n\tObject.assign(directory, {\n\t\tencrypted,\n\t\tversion: getUint16(dataView, offset),\n\t\tbitFlag: {\n\t\t\tlevel: (rawBitFlag & BITFLAG_LEVEL) >> 1,\n\t\t\tdataDescriptor: (rawBitFlag & BITFLAG_DATA_DESCRIPTOR) == BITFLAG_DATA_DESCRIPTOR,\n\t\t\tlanguageEncodingFlag: (rawBitFlag & BITFLAG_LANG_ENCODING_FLAG) == BITFLAG_LANG_ENCODING_FLAG\n\t\t},\n\t\trawLastModDate,\n\t\tlastModDate: getDate(rawLastModDate),\n\t\tfilenameLength: getUint16(dataView, offset + 22),\n\t\textraFieldLength: getUint16(dataView, offset + 24)\n\t});\n}\n\nfunction readCommonFooter(fileEntry, directory, dataView, offset, localDirectory) {\n\tconst { rawExtraField } = directory;\n\tconst extraField = directory.extraField = new Map();\n\tconst rawExtraFieldView = getDataView(new Uint8Array(rawExtraField));\n\tlet offsetExtraField = 0;\n\ttry {\n\t\twhile (offsetExtraField < rawExtraField.length) {\n\t\t\tconst type = getUint16(rawExtraFieldView, offsetExtraField);\n\t\t\tconst size = getUint16(rawExtraFieldView, offsetExtraField + 2);\n\t\t\textraField.set(type, {\n\t\t\t\ttype,\n\t\t\t\tdata: rawExtraField.slice(offsetExtraField + 4, offsetExtraField + 4 + size)\n\t\t\t});\n\t\t\toffsetExtraField += 4 + size;\n\t\t}\n\t} catch (_error) {\n\t\t// ignored\n\t}\n\tconst compressionMethod = getUint16(dataView, offset + 4);\n\tObject.assign(directory, {\n\t\tsignature: getUint32(dataView, offset + 10),\n\t\tuncompressedSize: getUint32(dataView, offset + 18),\n\t\tcompressedSize: getUint32(dataView, offset + 14)\n\t});\n\tconst extraFieldZip64 = extraField.get(EXTRAFIELD_TYPE_ZIP64);\n\tif (extraFieldZip64) {\n\t\treadExtraFieldZip64(extraFieldZip64, directory);\n\t\tdirectory.extraFieldZip64 = extraFieldZip64;\n\t}\n\tconst extraFieldUnicodePath = extraField.get(EXTRAFIELD_TYPE_UNICODE_PATH);\n\tif (extraFieldUnicodePath) {\n\t\treadExtraFieldUnicode(extraFieldUnicodePath, PROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_FILENAME, directory, fileEntry);\n\t\tdirectory.extraFieldUnicodePath = extraFieldUnicodePath;\n\t}\n\tconst extraFieldUnicodeComment = extraField.get(EXTRAFIELD_TYPE_UNICODE_COMMENT);\n\tif (extraFieldUnicodeComment) {\n\t\treadExtraFieldUnicode(extraFieldUnicodeComment, PROPERTY_NAME_COMMENT, PROPERTY_NAME_RAW_COMMENT, directory, fileEntry);\n\t\tdirectory.extraFieldUnicodeComment = extraFieldUnicodeComment;\n\t}\n\tconst extraFieldAES = extraField.get(EXTRAFIELD_TYPE_AES);\n\tif (extraFieldAES) {\n\t\treadExtraFieldAES(extraFieldAES, directory, compressionMethod);\n\t\tdirectory.extraFieldAES = extraFieldAES;\n\t} else {\n\t\tdirectory.compressionMethod = compressionMethod;\n\t}\n\tconst extraFieldNTFS = extraField.get(EXTRAFIELD_TYPE_NTFS);\n\tif (extraFieldNTFS) {\n\t\treadExtraFieldNTFS(extraFieldNTFS, directory);\n\t\tdirectory.extraFieldNTFS = extraFieldNTFS;\n\t}\n\tconst extraFieldExtendedTimestamp = extraField.get(EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP);\n\tif (extraFieldExtendedTimestamp) {\n\t\treadExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory, localDirectory);\n\t\tdirectory.extraFieldExtendedTimestamp = extraFieldExtendedTimestamp;\n\t}\n\tconst extraFieldUSDZ = extraField.get(EXTRAFIELD_TYPE_USDZ);\n\tif (extraFieldUSDZ) {\n\t\tdirectory.extraFieldUSDZ = extraFieldUSDZ;\n\t}\n}\n\nfunction readExtraFieldZip64(extraFieldZip64, directory) {\n\tdirectory.zip64 = true;\n\tconst extraFieldView = getDataView(extraFieldZip64.data);\n\tconst missingProperties = ZIP64_PROPERTIES.filter(([propertyName, max]) => directory[propertyName] == max);\n\tfor (let indexMissingProperty = 0, offset = 0; indexMissingProperty < missingProperties.length; indexMissingProperty++) {\n\t\tconst [propertyName, max] = missingProperties[indexMissingProperty];\n\t\tif (directory[propertyName] == max) {\n\t\t\tconst extraction = ZIP64_EXTRACTION[max];\n\t\t\tdirectory[propertyName] = extraFieldZip64[propertyName] = extraction.getValue(extraFieldView, offset);\n\t\t\toffset += extraction.bytes;\n\t\t} else if (extraFieldZip64[propertyName]) {\n\t\t\tthrow new Error(ERR_EXTRAFIELD_ZIP64_NOT_FOUND);\n\t\t}\n\t}\n}\n\nfunction readExtraFieldUnicode(extraFieldUnicode, propertyName, rawPropertyName, directory, fileEntry) {\n\tconst extraFieldView = getDataView(extraFieldUnicode.data);\n\tconst crc32 = new Crc32();\n\tcrc32.append(fileEntry[rawPropertyName]);\n\tconst dataViewSignature = getDataView(new Uint8Array(4));\n\tdataViewSignature.setUint32(0, crc32.get(), true);\n\tconst signature = getUint32(extraFieldView, 1);\n\tObject.assign(extraFieldUnicode, {\n\t\tversion: getUint8(extraFieldView, 0),\n\t\t[propertyName]: decodeText(extraFieldUnicode.data.subarray(5)),\n\t\tvalid: !fileEntry.bitFlag.languageEncodingFlag && signature == getUint32(dataViewSignature, 0)\n\t});\n\tif (extraFieldUnicode.valid) {\n\t\tdirectory[propertyName] = extraFieldUnicode[propertyName];\n\t\tdirectory[propertyName + \"UTF8\"] = true;\n\t}\n}\n\nfunction readExtraFieldAES(extraFieldAES, directory, compressionMethod) {\n\tconst extraFieldView = getDataView(extraFieldAES.data);\n\tconst strength = getUint8(extraFieldView, 4);\n\tObject.assign(extraFieldAES, {\n\t\tvendorVersion: getUint8(extraFieldView, 0),\n\t\tvendorId: getUint8(extraFieldView, 2),\n\t\tstrength,\n\t\toriginalCompressionMethod: compressionMethod,\n\t\tcompressionMethod: getUint16(extraFieldView, 5)\n\t});\n\tdirectory.compressionMethod = extraFieldAES.compressionMethod;\n}\n\nfunction readExtraFieldNTFS(extraFieldNTFS, directory) {\n\tconst extraFieldView = getDataView(extraFieldNTFS.data);\n\tlet offsetExtraField = 4;\n\tlet tag1Data;\n\ttry {\n\t\twhile (offsetExtraField < extraFieldNTFS.data.length && !tag1Data) {\n\t\t\tconst tagValue = getUint16(extraFieldView, offsetExtraField);\n\t\t\tconst attributeSize = getUint16(extraFieldView, offsetExtraField + 2);\n\t\t\tif (tagValue == EXTRAFIELD_TYPE_NTFS_TAG1) {\n\t\t\t\ttag1Data = extraFieldNTFS.data.slice(offsetExtraField + 4, offsetExtraField + 4 + attributeSize);\n\t\t\t}\n\t\t\toffsetExtraField += 4 + attributeSize;\n\t\t}\n\t} catch (_error) {\n\t\t// ignored\n\t}\n\ttry {\n\t\tif (tag1Data && tag1Data.length == 24) {\n\t\t\tconst tag1View = getDataView(tag1Data);\n\t\t\tconst rawLastModDate = tag1View.getBigUint64(0, true);\n\t\t\tconst rawLastAccessDate = tag1View.getBigUint64(8, true);\n\t\t\tconst rawCreationDate = tag1View.getBigUint64(16, true);\n\t\t\tObject.assign(extraFieldNTFS, {\n\t\t\t\trawLastModDate,\n\t\t\t\trawLastAccessDate,\n\t\t\t\trawCreationDate\n\t\t\t});\n\t\t\tconst lastModDate = getDateNTFS(rawLastModDate);\n\t\t\tconst lastAccessDate = getDateNTFS(rawLastAccessDate);\n\t\t\tconst creationDate = getDateNTFS(rawCreationDate);\n\t\t\tconst extraFieldData = { lastModDate, lastAccessDate, creationDate };\n\t\t\tObject.assign(extraFieldNTFS, extraFieldData);\n\t\t\tObject.assign(directory, extraFieldData);\n\t\t}\n\t} catch (_error) {\n\t\t// ignored\n\t}\n}\n\nfunction readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory, localDirectory) {\n\tconst extraFieldView = getDataView(extraFieldExtendedTimestamp.data);\n\tconst flags = getUint8(extraFieldView, 0);\n\tconst timeProperties = [];\n\tconst timeRawProperties = [];\n\tif (localDirectory) {\n\t\tif ((flags & 0x1) == 0x1) {\n\t\t\ttimeProperties.push(PROPERTY_NAME_LAST_MODIFICATION_DATE);\n\t\t\ttimeRawProperties.push(PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE);\n\t\t}\n\t\tif ((flags & 0x2) == 0x2) {\n\t\t\ttimeProperties.push(PROPERTY_NAME_LAST_ACCESS_DATE);\n\t\t\ttimeRawProperties.push(PROPERTY_NAME_RAW_LAST_ACCESS_DATE);\n\t\t}\n\t\tif ((flags & 0x4) == 0x4) {\n\t\t\ttimeProperties.push(PROPERTY_NAME_CREATION_DATE);\n\t\t\ttimeRawProperties.push(PROPERTY_NAME_RAW_CREATION_DATE);\n\t\t}\n\t} else if (extraFieldExtendedTimestamp.data.length >= 5) {\n\t\ttimeProperties.push(PROPERTY_NAME_LAST_MODIFICATION_DATE);\n\t\ttimeRawProperties.push(PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE);\n\t}\n\tlet offset = 1;\n\ttimeProperties.forEach((propertyName, indexProperty) => {\n\t\tif (extraFieldExtendedTimestamp.data.length >= offset + 4) {\n\t\t\tconst time = getUint32(extraFieldView, offset);\n\t\t\tdirectory[propertyName] = extraFieldExtendedTimestamp[propertyName] = new Date(time * 1000);\n\t\t\tconst rawPropertyName = timeRawProperties[indexProperty];\n\t\t\textraFieldExtendedTimestamp[rawPropertyName] = time;\n\t\t}\n\t\toffset += 4;\n\t});\n}\n\nasync function seekSignature(reader, signature, startOffset, minimumBytes, maximumLength) {\n\tconst signatureArray = new Uint8Array(4);\n\tconst signatureView = getDataView(signatureArray);\n\tsetUint32(signatureView, 0, signature);\n\tconst maximumBytes = minimumBytes + maximumLength;\n\treturn (await seek(minimumBytes)) || await seek(Math.min(maximumBytes, startOffset));\n\n\tasync function seek(length) {\n\t\tconst offset = startOffset - length;\n\t\tconst bytes = await readUint8Array(reader, offset, length);\n\t\tfor (let indexByte = bytes.length - minimumBytes; indexByte >= 0; indexByte--) {\n\t\t\tif (bytes[indexByte] == signatureArray[0] && bytes[indexByte + 1] == signatureArray[1] &&\n\t\t\t\tbytes[indexByte + 2] == signatureArray[2] && bytes[indexByte + 3] == signatureArray[3]) {\n\t\t\t\treturn {\n\t\t\t\t\toffset: offset + indexByte,\n\t\t\t\t\tbuffer: bytes.slice(indexByte, indexByte + minimumBytes).buffer\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction getOptionValue(zipReader, options, name) {\n\treturn options[name] === UNDEFINED_VALUE ? zipReader.options[name] : options[name];\n}\n\nfunction getDate(timeRaw) {\n\tconst date = (timeRaw & 0xffff0000) >> 16, time = timeRaw & 0x0000ffff;\n\ttry {\n\t\treturn new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5, (time & 0x001F) * 2, 0);\n\t} catch (_error) {\n\t\t// ignored\n\t}\n}\n\nfunction getDateNTFS(timeRaw) {\n\treturn new Date((Number((timeRaw / BigInt(10000)) - BigInt(11644473600000))));\n}\n\nfunction getUint8(view, offset) {\n\treturn view.getUint8(offset);\n}\n\nfunction getUint16(view, offset) {\n\treturn view.getUint16(offset, true);\n}\n\nfunction getUint32(view, offset) {\n\treturn view.getUint32(offset, true);\n}\n\nfunction getBigUint64(view, offset) {\n\treturn Number(view.getBigUint64(offset, true));\n}\n\nfunction setUint32(view, offset, value) {\n\tview.setUint32(offset, value, true);\n}\n\nfunction getDataView(array) {\n\treturn new DataView(array.buffer);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}