{"ast":null,"code":"/**\n * Indicates if the scene is viewed in 3D, 2D, or 2.5D Columbus view.\n *\n * @enum {number}\n * @see Scene#mode\n */\nconst SceneMode = {\n  /**\n   * Morphing between mode, e.g., 3D to 2D.\n   *\n   * @type {number}\n   * @constant\n   */\n  MORPHING: 0,\n  /**\n   * Columbus View mode.  A 2.5D perspective view where the map is laid out\n   * flat and objects with non-zero height are drawn above it.\n   *\n   * @type {number}\n   * @constant\n   */\n  COLUMBUS_VIEW: 1,\n  /**\n   * 2D mode.  The map is viewed top-down with an orthographic projection.\n   *\n   * @type {number}\n   * @constant\n   */\n  SCENE2D: 2,\n  /**\n   * 3D mode.  A traditional 3D perspective view of the globe.\n   *\n   * @type {number}\n   * @constant\n   */\n  SCENE3D: 3\n};\n\n/**\n * Returns the morph time for the given scene mode.\n *\n * @param {SceneMode} value The scene mode\n * @returns {number} The morph time\n */\nSceneMode.getMorphTime = function (value) {\n  if (value === SceneMode.SCENE3D) {\n    return 1.0;\n  } else if (value === SceneMode.MORPHING) {\n    return undefined;\n  }\n  return 0.0;\n};\nexport default Object.freeze(SceneMode);","map":{"version":3,"names":["SceneMode","MORPHING","COLUMBUS_VIEW","SCENE2D","SCENE3D","getMorphTime","value","undefined","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/SceneMode.js"],"sourcesContent":["/**\n * Indicates if the scene is viewed in 3D, 2D, or 2.5D Columbus view.\n *\n * @enum {number}\n * @see Scene#mode\n */\nconst SceneMode = {\n  /**\n   * Morphing between mode, e.g., 3D to 2D.\n   *\n   * @type {number}\n   * @constant\n   */\n  MORPHING: 0,\n\n  /**\n   * Columbus View mode.  A 2.5D perspective view where the map is laid out\n   * flat and objects with non-zero height are drawn above it.\n   *\n   * @type {number}\n   * @constant\n   */\n  COLUMBUS_VIEW: 1,\n\n  /**\n   * 2D mode.  The map is viewed top-down with an orthographic projection.\n   *\n   * @type {number}\n   * @constant\n   */\n  SCENE2D: 2,\n\n  /**\n   * 3D mode.  A traditional 3D perspective view of the globe.\n   *\n   * @type {number}\n   * @constant\n   */\n  SCENE3D: 3,\n};\n\n/**\n * Returns the morph time for the given scene mode.\n *\n * @param {SceneMode} value The scene mode\n * @returns {number} The morph time\n */\nSceneMode.getMorphTime = function (value) {\n  if (value === SceneMode.SCENE3D) {\n    return 1.0;\n  } else if (value === SceneMode.MORPHING) {\n    return undefined;\n  }\n  return 0.0;\n};\nexport default Object.freeze(SceneMode);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,GAAG;EAChB;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,CAAC;EAEX;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,aAAa,EAAE,CAAC;EAEhB;AACF;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAE,CAAC;EAEV;AACF;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAJ,SAAS,CAACK,YAAY,GAAG,UAAUC,KAAK,EAAE;EACxC,IAAIA,KAAK,KAAKN,SAAS,CAACI,OAAO,EAAE;IAC/B,OAAO,GAAG;EACZ,CAAC,MAAM,IAAIE,KAAK,KAAKN,SAAS,CAACC,QAAQ,EAAE;IACvC,OAAOM,SAAS;EAClB;EACA,OAAO,GAAG;AACZ,CAAC;AACD,eAAeC,MAAM,CAACC,MAAM,CAACT,SAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}