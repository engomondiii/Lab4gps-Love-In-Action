{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport SceneMode from \"./SceneMode.js\";\n\n/**\n * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n * performance improvements by rendering less geometry and dispatching less terrain requests.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Fog.html|Cesium Sandcastle Fog Demo}\n *\n * @alias Fog\n * @constructor\n */\nfunction Fog() {\n  /**\n   * <code>true</code> if fog is enabled, <code>false</code> otherwise.\n   * @type {boolean}\n   * @default true\n   * @example\n   * // Disable fog in the scene\n   * viewer.scene.fog.enabled = false;\n   */\n  this.enabled = true;\n  /**\n   * <code>true</code> if fog is renderable in shaders, <code>false</code> otherwise.\n   * This allows to benefits from optimized tile loading strategy based on fog density without the actual visual rendering.\n   * @type {boolean}\n   * @default true\n   * @example\n   * // Use fog culling but don't render it\n   * viewer.scene.fog.enabled = true;\n   * viewer.scene.fog.renderable = false;\n   */\n  this.renderable = true;\n  /**\n   * A scalar that determines the density of the fog. Terrain that is in full fog are culled.\n   * The density of the fog increases as this number approaches 1.0 and becomes less dense as it approaches zero.\n   * The more dense the fog is, the more aggressively the terrain is culled. For example, if the camera is a height of\n   * 1000.0m above the ellipsoid, increasing the value to 3.0e-3 will cause many tiles close to the viewer be culled.\n   * Decreasing the value will push the fog further from the viewer, but decrease performance as more of the terrain is rendered.\n   * @type {number}\n   * @default 0.0006\n   * @example\n   * // Double the default fog density\n   * viewer.scene.fog.density = 0.0012;\n   */\n  this.density = 0.0006;\n  /**\n   * A scalar used in the function to adjust density based on the height of the camera above the terrain.\n   * @type {number}\n   * @default 0.001\n   */\n  this.heightScalar = 0.001;\n  this._heightFalloff = 0.59;\n  /**\n   * The maximum height fog is applied. If the camera is above this height fog will be disabled.\n   * @type {number}\n   * @default 800000.0\n   */\n  this.maxHeight = 800000.0;\n  /**\n   * A scalar that impacts the visual density of fog. This value does not impact the culling of terrain.\n   * Use in combination with the {@link Fog.density} to make fog appear more or less dense.\n   * @type {number}\n   * @default 0.15\n   * @experimental The value of this scalar may not be final and is subject to change.\n   * @example\n   * // Increase fog appearance effect\n   * viewer.scene.fog.visualDensityScalar = 0.6;\n   */\n  this.visualDensityScalar = 0.15;\n  /**\n   * A factor used to increase the screen space error of terrain tiles when they are partially in fog. The effect is to reduce\n   * the number of terrain tiles requested for rendering. If set to zero, the feature will be disabled. If the value is increased\n   * for mountainous regions, less tiles will need to be requested, but the terrain meshes near the horizon may be a noticeably\n   * lower resolution. If the value is increased in a relatively flat area, there will be little noticeable change on the horizon.\n   * @type {number}\n   * @default 2.0\n   */\n  this.screenSpaceErrorFactor = 2.0;\n  /**\n   * The minimum brightness of the fog color from lighting. A value of 0.0 can cause the fog to be completely black. A value of 1.0 will not affect\n   * the brightness at all.\n   * @type {number}\n   * @default 0.03\n   */\n  this.minimumBrightness = 0.03;\n}\nObject.defineProperties(Fog.prototype, {\n  /**\n   * Exponent factor used in the function to adjust how density changes based on the height of the camera above the ellipsoid. Smaller values produce a more gradual transition as camera height increases.\n   * Value must be greater than 0.\n   * @memberof Fog.prototype\n   * @type {number}\n   * @default 0.59\n   */\n  heightFalloff: {\n    get: function () {\n      return this._heightFalloff;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value < 0) {\n        throw new DeveloperError(\"value must be positive.\");\n      }\n      //>>includeEnd('debug');\n\n      this._heightFalloff = value;\n    }\n  }\n});\nconst scratchPositionNormal = new Cartesian3();\n\n/**\n * @param {FrameState} frameState\n * @private\n */\nFog.prototype.update = function (frameState) {\n  const enabled = frameState.fog.enabled = this.enabled;\n  if (!enabled) {\n    return;\n  }\n  frameState.fog.renderable = this.renderable;\n  const camera = frameState.camera;\n  const positionCartographic = camera.positionCartographic;\n\n  // Turn off fog in space.\n  if (!defined(positionCartographic) || positionCartographic.height > this.maxHeight || frameState.mode !== SceneMode.SCENE3D) {\n    frameState.fog.enabled = false;\n    frameState.fog.density = 0;\n    return;\n  }\n  const height = positionCartographic.height;\n  let density = this.density * this.heightScalar * Math.pow(Math.max(height / this.maxHeight, CesiumMath.EPSILON4), -Math.max(this._heightFalloff, 0.0));\n\n  // Fade fog in as the camera tilts toward the horizon.\n  const positionNormal = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n  const dot = Math.abs(Cartesian3.dot(camera.directionWC, positionNormal));\n  density *= 1.0 - dot;\n  frameState.fog.density = density;\n  frameState.fog.visualDensityScalar = this.visualDensityScalar;\n  frameState.fog.sse = this.screenSpaceErrorFactor;\n  frameState.fog.minimumBrightness = this.minimumBrightness;\n};\nexport default Fog;","map":{"version":3,"names":["Cartesian3","defined","DeveloperError","CesiumMath","SceneMode","Fog","enabled","renderable","density","heightScalar","_heightFalloff","maxHeight","visualDensityScalar","screenSpaceErrorFactor","minimumBrightness","Object","defineProperties","prototype","heightFalloff","get","set","value","scratchPositionNormal","update","frameState","fog","camera","positionCartographic","height","mode","SCENE3D","Math","pow","max","EPSILON4","positionNormal","normalize","positionWC","dot","abs","directionWC","sse"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Fog.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport SceneMode from \"./SceneMode.js\";\n\n/**\n * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n * performance improvements by rendering less geometry and dispatching less terrain requests.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Fog.html|Cesium Sandcastle Fog Demo}\n *\n * @alias Fog\n * @constructor\n */\nfunction Fog() {\n  /**\n   * <code>true</code> if fog is enabled, <code>false</code> otherwise.\n   * @type {boolean}\n   * @default true\n   * @example\n   * // Disable fog in the scene\n   * viewer.scene.fog.enabled = false;\n   */\n  this.enabled = true;\n  /**\n   * <code>true</code> if fog is renderable in shaders, <code>false</code> otherwise.\n   * This allows to benefits from optimized tile loading strategy based on fog density without the actual visual rendering.\n   * @type {boolean}\n   * @default true\n   * @example\n   * // Use fog culling but don't render it\n   * viewer.scene.fog.enabled = true;\n   * viewer.scene.fog.renderable = false;\n   */\n  this.renderable = true;\n  /**\n   * A scalar that determines the density of the fog. Terrain that is in full fog are culled.\n   * The density of the fog increases as this number approaches 1.0 and becomes less dense as it approaches zero.\n   * The more dense the fog is, the more aggressively the terrain is culled. For example, if the camera is a height of\n   * 1000.0m above the ellipsoid, increasing the value to 3.0e-3 will cause many tiles close to the viewer be culled.\n   * Decreasing the value will push the fog further from the viewer, but decrease performance as more of the terrain is rendered.\n   * @type {number}\n   * @default 0.0006\n   * @example\n   * // Double the default fog density\n   * viewer.scene.fog.density = 0.0012;\n   */\n  this.density = 0.0006;\n  /**\n   * A scalar used in the function to adjust density based on the height of the camera above the terrain.\n   * @type {number}\n   * @default 0.001\n   */\n  this.heightScalar = 0.001;\n  this._heightFalloff = 0.59;\n  /**\n   * The maximum height fog is applied. If the camera is above this height fog will be disabled.\n   * @type {number}\n   * @default 800000.0\n   */\n  this.maxHeight = 800000.0;\n  /**\n   * A scalar that impacts the visual density of fog. This value does not impact the culling of terrain.\n   * Use in combination with the {@link Fog.density} to make fog appear more or less dense.\n   * @type {number}\n   * @default 0.15\n   * @experimental The value of this scalar may not be final and is subject to change.\n   * @example\n   * // Increase fog appearance effect\n   * viewer.scene.fog.visualDensityScalar = 0.6;\n   */\n  this.visualDensityScalar = 0.15;\n  /**\n   * A factor used to increase the screen space error of terrain tiles when they are partially in fog. The effect is to reduce\n   * the number of terrain tiles requested for rendering. If set to zero, the feature will be disabled. If the value is increased\n   * for mountainous regions, less tiles will need to be requested, but the terrain meshes near the horizon may be a noticeably\n   * lower resolution. If the value is increased in a relatively flat area, there will be little noticeable change on the horizon.\n   * @type {number}\n   * @default 2.0\n   */\n  this.screenSpaceErrorFactor = 2.0;\n  /**\n   * The minimum brightness of the fog color from lighting. A value of 0.0 can cause the fog to be completely black. A value of 1.0 will not affect\n   * the brightness at all.\n   * @type {number}\n   * @default 0.03\n   */\n  this.minimumBrightness = 0.03;\n}\n\nObject.defineProperties(Fog.prototype, {\n  /**\n   * Exponent factor used in the function to adjust how density changes based on the height of the camera above the ellipsoid. Smaller values produce a more gradual transition as camera height increases.\n   * Value must be greater than 0.\n   * @memberof Fog.prototype\n   * @type {number}\n   * @default 0.59\n   */\n  heightFalloff: {\n    get: function () {\n      return this._heightFalloff;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value < 0) {\n        throw new DeveloperError(\"value must be positive.\");\n      }\n      //>>includeEnd('debug');\n\n      this._heightFalloff = value;\n    },\n  },\n});\n\nconst scratchPositionNormal = new Cartesian3();\n\n/**\n * @param {FrameState} frameState\n * @private\n */\nFog.prototype.update = function (frameState) {\n  const enabled = (frameState.fog.enabled = this.enabled);\n  if (!enabled) {\n    return;\n  }\n\n  frameState.fog.renderable = this.renderable;\n\n  const camera = frameState.camera;\n  const positionCartographic = camera.positionCartographic;\n\n  // Turn off fog in space.\n  if (\n    !defined(positionCartographic) ||\n    positionCartographic.height > this.maxHeight ||\n    frameState.mode !== SceneMode.SCENE3D\n  ) {\n    frameState.fog.enabled = false;\n    frameState.fog.density = 0;\n    return;\n  }\n\n  const height = positionCartographic.height;\n  let density =\n    this.density *\n    this.heightScalar *\n    Math.pow(\n      Math.max(height / this.maxHeight, CesiumMath.EPSILON4),\n      -Math.max(this._heightFalloff, 0.0),\n    );\n\n  // Fade fog in as the camera tilts toward the horizon.\n  const positionNormal = Cartesian3.normalize(\n    camera.positionWC,\n    scratchPositionNormal,\n  );\n  const dot = Math.abs(Cartesian3.dot(camera.directionWC, positionNormal));\n  density *= 1.0 - dot;\n\n  frameState.fog.density = density;\n  frameState.fog.visualDensityScalar = this.visualDensityScalar;\n  frameState.fog.sse = this.screenSpaceErrorFactor;\n  frameState.fog.minimumBrightness = this.minimumBrightness;\n};\nexport default Fog;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,SAAS,MAAM,gBAAgB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAGA,CAAA,EAAG;EACb;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,OAAO,GAAG,IAAI;EACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAG,IAAI;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,OAAO,GAAG,MAAM;EACrB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,YAAY,GAAG,KAAK;EACzB,IAAI,CAACC,cAAc,GAAG,IAAI;EAC1B;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,SAAS,GAAG,QAAQ;EACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,mBAAmB,GAAG,IAAI;EAC/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,sBAAsB,GAAG,GAAG;EACjC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,iBAAiB,GAAG,IAAI;AAC/B;AAEAC,MAAM,CAACC,gBAAgB,CAACX,GAAG,CAACY,SAAS,EAAE;EACrC;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,aAAa,EAAE;IACbC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACT,cAAc;IAC5B,CAAC;IACDU,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAIpB,OAAO,CAACoB,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;QAC/B,MAAM,IAAInB,cAAc,CAAC,yBAAyB,CAAC;MACrD;MACA;;MAEA,IAAI,CAACQ,cAAc,GAAGW,KAAK;IAC7B;EACF;AACF,CAAC,CAAC;AAEF,MAAMC,qBAAqB,GAAG,IAAItB,UAAU,CAAC,CAAC;;AAE9C;AACA;AACA;AACA;AACAK,GAAG,CAACY,SAAS,CAACM,MAAM,GAAG,UAAUC,UAAU,EAAE;EAC3C,MAAMlB,OAAO,GAAIkB,UAAU,CAACC,GAAG,CAACnB,OAAO,GAAG,IAAI,CAACA,OAAQ;EACvD,IAAI,CAACA,OAAO,EAAE;IACZ;EACF;EAEAkB,UAAU,CAACC,GAAG,CAAClB,UAAU,GAAG,IAAI,CAACA,UAAU;EAE3C,MAAMmB,MAAM,GAAGF,UAAU,CAACE,MAAM;EAChC,MAAMC,oBAAoB,GAAGD,MAAM,CAACC,oBAAoB;;EAExD;EACA,IACE,CAAC1B,OAAO,CAAC0B,oBAAoB,CAAC,IAC9BA,oBAAoB,CAACC,MAAM,GAAG,IAAI,CAACjB,SAAS,IAC5Ca,UAAU,CAACK,IAAI,KAAKzB,SAAS,CAAC0B,OAAO,EACrC;IACAN,UAAU,CAACC,GAAG,CAACnB,OAAO,GAAG,KAAK;IAC9BkB,UAAU,CAACC,GAAG,CAACjB,OAAO,GAAG,CAAC;IAC1B;EACF;EAEA,MAAMoB,MAAM,GAAGD,oBAAoB,CAACC,MAAM;EAC1C,IAAIpB,OAAO,GACT,IAAI,CAACA,OAAO,GACZ,IAAI,CAACC,YAAY,GACjBsB,IAAI,CAACC,GAAG,CACND,IAAI,CAACE,GAAG,CAACL,MAAM,GAAG,IAAI,CAACjB,SAAS,EAAER,UAAU,CAAC+B,QAAQ,CAAC,EACtD,CAACH,IAAI,CAACE,GAAG,CAAC,IAAI,CAACvB,cAAc,EAAE,GAAG,CACpC,CAAC;;EAEH;EACA,MAAMyB,cAAc,GAAGnC,UAAU,CAACoC,SAAS,CACzCV,MAAM,CAACW,UAAU,EACjBf,qBACF,CAAC;EACD,MAAMgB,GAAG,GAAGP,IAAI,CAACQ,GAAG,CAACvC,UAAU,CAACsC,GAAG,CAACZ,MAAM,CAACc,WAAW,EAAEL,cAAc,CAAC,CAAC;EACxE3B,OAAO,IAAI,GAAG,GAAG8B,GAAG;EAEpBd,UAAU,CAACC,GAAG,CAACjB,OAAO,GAAGA,OAAO;EAChCgB,UAAU,CAACC,GAAG,CAACb,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;EAC7DY,UAAU,CAACC,GAAG,CAACgB,GAAG,GAAG,IAAI,CAAC5B,sBAAsB;EAChDW,UAAU,CAACC,GAAG,CAACX,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;AAC3D,CAAC;AACD,eAAeT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}