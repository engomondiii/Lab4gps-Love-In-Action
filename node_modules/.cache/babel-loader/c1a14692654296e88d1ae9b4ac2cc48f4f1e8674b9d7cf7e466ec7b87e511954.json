{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * <div class=\"notice\">\n * A cloud is created and its initial properties are set by calling {@link CloudCollection#add}.\n * and {@link CloudCollection#remove}. Do not call the constructor directly.\n * </div>\n * A cumulus cloud billboard positioned in the 3D scene, that is created and rendered using a {@link CloudCollection}.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/CumulusCloud.png' width='400' height='300' /><br />\n * Example cumulus clouds\n * </div>\n * @alias CumulusCloud\n *\n * @performance Similar to {@link Billboard}, reading a property, e.g., {@link CumulusCloud#show},\n * takes constant time. Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link CloudCollection#update} is called.  The per-cloud traffic is\n * the same regardless of how many properties were updated.  If most clouds in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link CloudCollection#removeAll}\n * and add new clouds instead of modifying each one.\n *\n * @see CloudCollection\n * @see CloudCollection#add\n *\n * @internalConstructor\n * @class\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Cloud%20Parameters.html|Cesium Sandcastle Cloud Parameters Demo}\n */\nfunction CumulusCloud(options, cloudCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._show = defaultValue(options.show, true);\n  this._position = Cartesian3.clone(defaultValue(options.position, Cartesian3.ZERO));\n  if (!defined(options.scale) && defined(options.maximumSize)) {\n    this._maximumSize = Cartesian3.clone(options.maximumSize);\n    this._scale = new Cartesian2(this._maximumSize.x, this._maximumSize.y);\n  } else {\n    this._scale = Cartesian2.clone(defaultValue(options.scale, new Cartesian2(20.0, 12.0)));\n    const defaultMaxSize = new Cartesian3(this._scale.x, this._scale.y, Math.min(this._scale.x, this._scale.y) / 1.5);\n    this._maximumSize = Cartesian3.clone(defaultValue(options.maximumSize, defaultMaxSize));\n  }\n  this._slice = defaultValue(options.slice, -1.0);\n  this._color = Color.clone(defaultValue(options.color, Color.WHITE));\n  this._brightness = defaultValue(options.brightness, 1.0);\n  this._cloudCollection = cloudCollection;\n  this._index = -1; // Used by CloudCollection\n}\nconst SHOW_INDEX = CumulusCloud.SHOW_INDEX = 0;\nconst POSITION_INDEX = CumulusCloud.POSITION_INDEX = 1;\nconst SCALE_INDEX = CumulusCloud.SCALE_INDEX = 2;\nconst MAXIMUM_SIZE_INDEX = CumulusCloud.MAXIMUM_SIZE_INDEX = 3;\nconst SLICE_INDEX = CumulusCloud.SLICE_INDEX = 4;\nconst BRIGHTNESS_INDEX = CumulusCloud.BRIGHTNESS_INDEX = 5;\nconst COLOR_INDEX = CumulusCloud.COLOR_INDEX = 6;\nCumulusCloud.NUMBER_OF_PROPERTIES = 7;\nfunction makeDirty(cloud, propertyChanged) {\n  const cloudCollection = cloud._cloudCollection;\n  if (defined(cloudCollection)) {\n    cloudCollection._updateCloud(cloud, propertyChanged);\n    cloud._dirty = true;\n  }\n}\nObject.defineProperties(CumulusCloud.prototype, {\n  /**\n   * Determines if this cumulus cloud will be shown.  Use this to hide or show a cloud, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof CumulusCloud.prototype\n   * @type {boolean}\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the Cartesian position of this cumulus cloud.\n   * @memberof CumulusCloud.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const position = this._position;\n      if (!Cartesian3.equals(position, value)) {\n        Cartesian3.clone(value, position);\n        makeDirty(this, POSITION_INDEX);\n      }\n    }\n  },\n  /**\n   * <p>Gets or sets the scale of the cumulus cloud billboard in meters.\n   * The <code>scale</code> property will affect the size of the billboard,\n   * but not the cloud's actual appearance.</p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'>\n   *   <code>cloud.scale = new Cesium.Cartesian2(12, 8);</code><br/>\n   *   <img src='Images/CumulusCloud.scalex12y8.png' width='250' height='158' />\n   * </td>\n   * <td align='center'>\n   *   <code>cloud.scale = new Cesium.Cartesian2(24, 10);</code><br/>\n   *   <img src='Images/CumulusCloud.scalex24y10.png' width='250' height='158' />\n   * </td>\n   * </tr></table>\n   * </div>\n   *\n   * <p>To modify the cloud's appearance, modify its <code>maximumSize</code>\n   * and <code>slice</code> properties.</p>\n   * @memberof CumulusCloud.prototype\n   * @type {Cartesian2}\n   *\n   * @see CumulusCloud#maximumSize\n   * @see CumulusCloud#slice\n   */\n  scale: {\n    get: function () {\n      return this._scale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const scale = this._scale;\n      if (!Cartesian2.equals(scale, value)) {\n        Cartesian2.clone(value, scale);\n        makeDirty(this, SCALE_INDEX);\n      }\n    }\n  },\n  /**\n   * <p>Gets or sets the maximum size of the cumulus cloud rendered on the billboard.\n   * This defines a maximum ellipsoid volume that the cloud can appear in.\n   * Rather than guaranteeing a specific size, this specifies a boundary for the\n   * cloud to appear in, and changing it can affect the shape of the cloud.</p>\n   * <p>Changing the z-value of <code>maximumSize</code> has the most dramatic effect\n   * on the cloud's appearance because it changes the depth of the cloud, and thus the\n   * positions at which the cloud-shaping texture is sampled.</p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'>\n   * <tr>\n   *   <td align='center'>\n   *     <code>cloud.maximumSize = new Cesium.Cartesian3(14, 9, 10);</code><br/>\n   *     <img src='Images/CumulusCloud.maximumSizex14y9z10.png' width='250' height='158' />\n   *   </td>\n   *   <td align='center'>\n   *     <code>cloud.maximumSize.x = 25;</code><br/>\n   *     <img src='Images/CumulusCloud.maximumSizex25.png' width='250' height='158' />\n   *   </td>\n   * </tr>\n   * <tr>\n   *   <td align='center'>\n   *     <code>cloud.maximumSize.y = 5;</code><br/>\n   *     <img src='Images/CumulusCloud.maximumSizey5.png' width='250' height='158' />\n   *   </td>\n   *   <td align='center'>\n   *     <code>cloud.maximumSize.z = 17;</code><br/>\n   *     <img src='Images/CumulusCloud.maximumSizez17.png' width='250' height='158' />\n   *   </td>\n   * </tr>\n   * </table>\n   * </div>\n   *\n   * <p>To modify the billboard's actual size, modify the cloud's <code>scale</code> property.</p>\n   * @memberof CumulusCloud.prototype\n   * @type {Cartesian3}\n   *\n   * @see CumulusCloud#scale\n   */\n  maximumSize: {\n    get: function () {\n      return this._maximumSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const maximumSize = this._maximumSize;\n      if (!Cartesian3.equals(maximumSize, value)) {\n        Cartesian3.clone(value, maximumSize);\n        makeDirty(this, MAXIMUM_SIZE_INDEX);\n      }\n    }\n  },\n  /**\n   * Sets the color of the cloud\n   * @memberof CumulusCloud.prototype\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const color = this._color;\n      if (!Color.equals(color, value)) {\n        Color.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    }\n  },\n  /**\n   * <p>Gets or sets the \"slice\" of the cloud that is rendered on the billboard, i.e.\n   * the specific cross-section of the cloud chosen for the billboard's appearance.\n   * Given a value between 0 and 1, the slice specifies how deeply into the cloud\n   * to intersect based on its maximum size in the z-direction.</p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>cloud.slice = 0.32;</code><br/><img src='Images/CumulusCloud.slice0.32.png' width='250' height='158' /></td>\n   * <td align='center'><code>cloud.slice = 0.5;</code><br/><img src='Images/CumulusCloud.slice0.5.png' width='250' height='158' /></td>\n   * <td align='center'><code>cloud.slice = 0.6;</code><br/><img src='Images/CumulusCloud.slice0.6.png' width='250' height='158' /></td>\n   * </tr></table>\n   * </div>\n   *\n   * <br />\n   * <p>Due to the nature in which this slice is calculated,\n   * values below <code>0.2</code> may result in cross-sections that are too small,\n   * and the edge of the ellipsoid will be visible. Similarly, values above <code>0.7</code>\n   * will cause the cloud to appear smaller. Values outside the range <code>[0.1, 0.9]</code>\n   * should be avoided entirely because they do not produce desirable results.</p>\n   *\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>cloud.slice = 0.08;</code><br/><img src='Images/CumulusCloud.slice0.08.png' width='250' height='158' /></td>\n   * <td align='center'><code>cloud.slice = 0.8;</code><br/><img src='Images/CumulusCloud.slice0.8.png' width='250' height='158' /></td>\n   * </tr></table>\n   * </div>\n   *\n   * <p>If <code>slice</code> is set to a negative number, the cloud will not render a cross-section.\n   * Instead, it will render the outside of the ellipsoid that is visible. For clouds with\n   * small values of `maximumSize.z`, this can produce good-looking results, but for larger\n   * clouds, this can result in a cloud that is undesirably warped to the ellipsoid volume.</p>\n   *\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'>\n   *  <code>cloud.slice = -1.0;<br/>cloud.maximumSize.z = 18;</code><br/>\n   *  <img src='Images/CumulusCloud.slice-1z18.png' width='250' height='158' />\n   * </td>\n   * <td align='center'>\n   *   <code>cloud.slice = -1.0;<br/>cloud.maximumSize.z = 30;</code><br/>\n   *   <img src='Images/CumulusCloud.slice-1z30.png' width='250' height='158' /></td>\n   * </tr></table>\n   * </div>\n   *\n   * @memberof CumulusCloud.prototype\n   * @type {number}\n   * @default -1.0\n   */\n  slice: {\n    get: function () {\n      return this._slice;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      const slice = this._slice;\n      if (slice !== value) {\n        this._slice = value;\n        makeDirty(this, SLICE_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the brightness of the cloud. This can be used to give clouds\n   * a darker, grayer appearance.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>cloud.brightness = 1.0;</code><br/><img src='Images/CumulusCloud.brightness1.png' width='250' height='158' /></td>\n   * <td align='center'><code>cloud.brightness = 0.6;</code><br/><img src='Images/CumulusCloud.brightness0.6.png' width='250' height='158' /></td>\n   * <td align='center'><code>cloud.brightness = 0.0;</code><br/><img src='Images/CumulusCloud.brightness0.png' width='250' height='158' /></td>\n   * </tr></table>\n   * </div>\n   * @memberof CumulusCloud.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  brightness: {\n    get: function () {\n      return this._brightness;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      const brightness = this._brightness;\n      if (brightness !== value) {\n        this._brightness = value;\n        makeDirty(this, BRIGHTNESS_INDEX);\n      }\n    }\n  }\n});\nCumulusCloud.prototype._destroy = function () {\n  this._cloudCollection = undefined;\n};\nexport default CumulusCloud;","map":{"version":3,"names":["Cartesian2","Cartesian3","Check","Color","defaultValue","defined","CumulusCloud","options","cloudCollection","EMPTY_OBJECT","_show","show","_position","clone","position","ZERO","scale","maximumSize","_maximumSize","_scale","x","y","defaultMaxSize","Math","min","_slice","slice","_color","color","WHITE","_brightness","brightness","_cloudCollection","_index","SHOW_INDEX","POSITION_INDEX","SCALE_INDEX","MAXIMUM_SIZE_INDEX","SLICE_INDEX","BRIGHTNESS_INDEX","COLOR_INDEX","NUMBER_OF_PROPERTIES","makeDirty","cloud","propertyChanged","_updateCloud","_dirty","Object","defineProperties","prototype","get","set","value","typeOf","bool","object","equals","number","_destroy","undefined"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/CumulusCloud.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * <div class=\"notice\">\n * A cloud is created and its initial properties are set by calling {@link CloudCollection#add}.\n * and {@link CloudCollection#remove}. Do not call the constructor directly.\n * </div>\n * A cumulus cloud billboard positioned in the 3D scene, that is created and rendered using a {@link CloudCollection}.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/CumulusCloud.png' width='400' height='300' /><br />\n * Example cumulus clouds\n * </div>\n * @alias CumulusCloud\n *\n * @performance Similar to {@link Billboard}, reading a property, e.g., {@link CumulusCloud#show},\n * takes constant time. Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link CloudCollection#update} is called.  The per-cloud traffic is\n * the same regardless of how many properties were updated.  If most clouds in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link CloudCollection#removeAll}\n * and add new clouds instead of modifying each one.\n *\n * @see CloudCollection\n * @see CloudCollection#add\n *\n * @internalConstructor\n * @class\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Cloud%20Parameters.html|Cesium Sandcastle Cloud Parameters Demo}\n */\nfunction CumulusCloud(options, cloudCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._show = defaultValue(options.show, true);\n\n  this._position = Cartesian3.clone(\n    defaultValue(options.position, Cartesian3.ZERO),\n  );\n\n  if (!defined(options.scale) && defined(options.maximumSize)) {\n    this._maximumSize = Cartesian3.clone(options.maximumSize);\n    this._scale = new Cartesian2(this._maximumSize.x, this._maximumSize.y);\n  } else {\n    this._scale = Cartesian2.clone(\n      defaultValue(options.scale, new Cartesian2(20.0, 12.0)),\n    );\n\n    const defaultMaxSize = new Cartesian3(\n      this._scale.x,\n      this._scale.y,\n      Math.min(this._scale.x, this._scale.y) / 1.5,\n    );\n    this._maximumSize = Cartesian3.clone(\n      defaultValue(options.maximumSize, defaultMaxSize),\n    );\n  }\n\n  this._slice = defaultValue(options.slice, -1.0);\n  this._color = Color.clone(defaultValue(options.color, Color.WHITE));\n  this._brightness = defaultValue(options.brightness, 1.0);\n  this._cloudCollection = cloudCollection;\n  this._index = -1; // Used by CloudCollection\n}\n\nconst SHOW_INDEX = (CumulusCloud.SHOW_INDEX = 0);\nconst POSITION_INDEX = (CumulusCloud.POSITION_INDEX = 1);\nconst SCALE_INDEX = (CumulusCloud.SCALE_INDEX = 2);\nconst MAXIMUM_SIZE_INDEX = (CumulusCloud.MAXIMUM_SIZE_INDEX = 3);\nconst SLICE_INDEX = (CumulusCloud.SLICE_INDEX = 4);\nconst BRIGHTNESS_INDEX = (CumulusCloud.BRIGHTNESS_INDEX = 5);\nconst COLOR_INDEX = (CumulusCloud.COLOR_INDEX = 6);\nCumulusCloud.NUMBER_OF_PROPERTIES = 7;\n\nfunction makeDirty(cloud, propertyChanged) {\n  const cloudCollection = cloud._cloudCollection;\n  if (defined(cloudCollection)) {\n    cloudCollection._updateCloud(cloud, propertyChanged);\n    cloud._dirty = true;\n  }\n}\n\nObject.defineProperties(CumulusCloud.prototype, {\n  /**\n   * Determines if this cumulus cloud will be shown.  Use this to hide or show a cloud, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof CumulusCloud.prototype\n   * @type {boolean}\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the Cartesian position of this cumulus cloud.\n   * @memberof CumulusCloud.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const position = this._position;\n      if (!Cartesian3.equals(position, value)) {\n        Cartesian3.clone(value, position);\n        makeDirty(this, POSITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * <p>Gets or sets the scale of the cumulus cloud billboard in meters.\n   * The <code>scale</code> property will affect the size of the billboard,\n   * but not the cloud's actual appearance.</p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'>\n   *   <code>cloud.scale = new Cesium.Cartesian2(12, 8);</code><br/>\n   *   <img src='Images/CumulusCloud.scalex12y8.png' width='250' height='158' />\n   * </td>\n   * <td align='center'>\n   *   <code>cloud.scale = new Cesium.Cartesian2(24, 10);</code><br/>\n   *   <img src='Images/CumulusCloud.scalex24y10.png' width='250' height='158' />\n   * </td>\n   * </tr></table>\n   * </div>\n   *\n   * <p>To modify the cloud's appearance, modify its <code>maximumSize</code>\n   * and <code>slice</code> properties.</p>\n   * @memberof CumulusCloud.prototype\n   * @type {Cartesian2}\n   *\n   * @see CumulusCloud#maximumSize\n   * @see CumulusCloud#slice\n   */\n  scale: {\n    get: function () {\n      return this._scale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const scale = this._scale;\n      if (!Cartesian2.equals(scale, value)) {\n        Cartesian2.clone(value, scale);\n        makeDirty(this, SCALE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * <p>Gets or sets the maximum size of the cumulus cloud rendered on the billboard.\n   * This defines a maximum ellipsoid volume that the cloud can appear in.\n   * Rather than guaranteeing a specific size, this specifies a boundary for the\n   * cloud to appear in, and changing it can affect the shape of the cloud.</p>\n   * <p>Changing the z-value of <code>maximumSize</code> has the most dramatic effect\n   * on the cloud's appearance because it changes the depth of the cloud, and thus the\n   * positions at which the cloud-shaping texture is sampled.</p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'>\n   * <tr>\n   *   <td align='center'>\n   *     <code>cloud.maximumSize = new Cesium.Cartesian3(14, 9, 10);</code><br/>\n   *     <img src='Images/CumulusCloud.maximumSizex14y9z10.png' width='250' height='158' />\n   *   </td>\n   *   <td align='center'>\n   *     <code>cloud.maximumSize.x = 25;</code><br/>\n   *     <img src='Images/CumulusCloud.maximumSizex25.png' width='250' height='158' />\n   *   </td>\n   * </tr>\n   * <tr>\n   *   <td align='center'>\n   *     <code>cloud.maximumSize.y = 5;</code><br/>\n   *     <img src='Images/CumulusCloud.maximumSizey5.png' width='250' height='158' />\n   *   </td>\n   *   <td align='center'>\n   *     <code>cloud.maximumSize.z = 17;</code><br/>\n   *     <img src='Images/CumulusCloud.maximumSizez17.png' width='250' height='158' />\n   *   </td>\n   * </tr>\n   * </table>\n   * </div>\n   *\n   * <p>To modify the billboard's actual size, modify the cloud's <code>scale</code> property.</p>\n   * @memberof CumulusCloud.prototype\n   * @type {Cartesian3}\n   *\n   * @see CumulusCloud#scale\n   */\n  maximumSize: {\n    get: function () {\n      return this._maximumSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const maximumSize = this._maximumSize;\n      if (!Cartesian3.equals(maximumSize, value)) {\n        Cartesian3.clone(value, maximumSize);\n        makeDirty(this, MAXIMUM_SIZE_INDEX);\n      }\n    },\n  },\n  /**\n   * Sets the color of the cloud\n   * @memberof CumulusCloud.prototype\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.object(\"value\", value);\n      //>>includeEnd('debug');\n\n      const color = this._color;\n      if (!Color.equals(color, value)) {\n        Color.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    },\n  },\n  /**\n   * <p>Gets or sets the \"slice\" of the cloud that is rendered on the billboard, i.e.\n   * the specific cross-section of the cloud chosen for the billboard's appearance.\n   * Given a value between 0 and 1, the slice specifies how deeply into the cloud\n   * to intersect based on its maximum size in the z-direction.</p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>cloud.slice = 0.32;</code><br/><img src='Images/CumulusCloud.slice0.32.png' width='250' height='158' /></td>\n   * <td align='center'><code>cloud.slice = 0.5;</code><br/><img src='Images/CumulusCloud.slice0.5.png' width='250' height='158' /></td>\n   * <td align='center'><code>cloud.slice = 0.6;</code><br/><img src='Images/CumulusCloud.slice0.6.png' width='250' height='158' /></td>\n   * </tr></table>\n   * </div>\n   *\n   * <br />\n   * <p>Due to the nature in which this slice is calculated,\n   * values below <code>0.2</code> may result in cross-sections that are too small,\n   * and the edge of the ellipsoid will be visible. Similarly, values above <code>0.7</code>\n   * will cause the cloud to appear smaller. Values outside the range <code>[0.1, 0.9]</code>\n   * should be avoided entirely because they do not produce desirable results.</p>\n   *\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>cloud.slice = 0.08;</code><br/><img src='Images/CumulusCloud.slice0.08.png' width='250' height='158' /></td>\n   * <td align='center'><code>cloud.slice = 0.8;</code><br/><img src='Images/CumulusCloud.slice0.8.png' width='250' height='158' /></td>\n   * </tr></table>\n   * </div>\n   *\n   * <p>If <code>slice</code> is set to a negative number, the cloud will not render a cross-section.\n   * Instead, it will render the outside of the ellipsoid that is visible. For clouds with\n   * small values of `maximumSize.z`, this can produce good-looking results, but for larger\n   * clouds, this can result in a cloud that is undesirably warped to the ellipsoid volume.</p>\n   *\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'>\n   *  <code>cloud.slice = -1.0;<br/>cloud.maximumSize.z = 18;</code><br/>\n   *  <img src='Images/CumulusCloud.slice-1z18.png' width='250' height='158' />\n   * </td>\n   * <td align='center'>\n   *   <code>cloud.slice = -1.0;<br/>cloud.maximumSize.z = 30;</code><br/>\n   *   <img src='Images/CumulusCloud.slice-1z30.png' width='250' height='158' /></td>\n   * </tr></table>\n   * </div>\n   *\n   * @memberof CumulusCloud.prototype\n   * @type {number}\n   * @default -1.0\n   */\n  slice: {\n    get: function () {\n      return this._slice;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      const slice = this._slice;\n      if (slice !== value) {\n        this._slice = value;\n        makeDirty(this, SLICE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the brightness of the cloud. This can be used to give clouds\n   * a darker, grayer appearance.\n   * <br /><br />\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>cloud.brightness = 1.0;</code><br/><img src='Images/CumulusCloud.brightness1.png' width='250' height='158' /></td>\n   * <td align='center'><code>cloud.brightness = 0.6;</code><br/><img src='Images/CumulusCloud.brightness0.6.png' width='250' height='158' /></td>\n   * <td align='center'><code>cloud.brightness = 0.0;</code><br/><img src='Images/CumulusCloud.brightness0.png' width='250' height='158' /></td>\n   * </tr></table>\n   * </div>\n   * @memberof CumulusCloud.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  brightness: {\n    get: function () {\n      return this._brightness;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n\n      const brightness = this._brightness;\n      if (brightness !== value) {\n        this._brightness = value;\n        makeDirty(this, BRIGHTNESS_INDEX);\n      }\n    },\n  },\n});\n\nCumulusCloud.prototype._destroy = function () {\n  this._cloudCollection = undefined;\n};\n\nexport default CumulusCloud;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}