{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Framebuffer from \"./Framebuffer.js\";\n\n/**\n * Creates a multisampling wrapper around two framebuffers with optional initial\n * color and depth-stencil attachments. The first framebuffer has multisampled\n * renderbuffer attachments and is bound to READ_FRAMEBUFFER during the blit. The\n * second is bound to DRAW_FRAMEBUFFER during the blit, and has texture attachments\n * to store the copied pixels.\n *\n * @param {object} options Object with the following properties:\n * @param {Context} options.context\n * @param {number} options.width\n * @param {number} options.height\n * @param {Texture[]} [options.colorTextures]\n * @param {Renderbuffer[]} [options.colorRenderbuffers]\n * @param {Texture} [options.depthStencilTexture]\n * @param {Renderbuffer} [options.depthStencilRenderbuffer]\n * @param {boolean} [options.destroyAttachments]\n *\n * @exception {DeveloperError} Both color renderbuffer and texture attachments must be provided.\n * @exception {DeveloperError} Both depth-stencil renderbuffer and texture attachments must be provided.\n *\n * @private\n * @constructor\n */\nfunction MultisampleFramebuffer(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const {\n    context,\n    width,\n    height,\n    colorRenderbuffers,\n    colorTextures,\n    depthStencilRenderbuffer,\n    depthStencilTexture,\n    destroyAttachments\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.context\", context);\n  Check.defined(\"options.width\", width);\n  Check.defined(\"options.height\", height);\n  //>>includeEnd('debug');\n\n  this._width = width;\n  this._height = height;\n  if (defined(colorRenderbuffers) !== defined(colorTextures)) {\n    throw new DeveloperError(\"Both color renderbuffer and texture attachments must be provided.\");\n  }\n  if (defined(depthStencilRenderbuffer) !== defined(depthStencilTexture)) {\n    throw new DeveloperError(\"Both depth-stencil renderbuffer and texture attachments must be provided.\");\n  }\n  this._renderFramebuffer = new Framebuffer({\n    context: context,\n    colorRenderbuffers: colorRenderbuffers,\n    depthStencilRenderbuffer: depthStencilRenderbuffer,\n    destroyAttachments: destroyAttachments\n  });\n  this._colorFramebuffer = new Framebuffer({\n    context: context,\n    colorTextures: colorTextures,\n    depthStencilTexture: depthStencilTexture,\n    destroyAttachments: destroyAttachments\n  });\n}\nMultisampleFramebuffer.prototype.getRenderFramebuffer = function () {\n  return this._renderFramebuffer;\n};\nMultisampleFramebuffer.prototype.getColorFramebuffer = function () {\n  return this._colorFramebuffer;\n};\n\n/**\n * Copy from the render framebuffer to the color framebuffer, resolving the stencil.\n *\n * @param {Context} context\n * @param {boolean} blitStencil <code>true</code> if the stencil mask should be applied.\n *\n * @private\n */\nMultisampleFramebuffer.prototype.blitFramebuffers = function (context, blitStencil) {\n  this._renderFramebuffer.bindRead();\n  this._colorFramebuffer.bindDraw();\n  const gl = context._gl;\n  let mask = 0;\n  if (this._colorFramebuffer._colorTextures.length > 0) {\n    mask |= gl.COLOR_BUFFER_BIT;\n  }\n  if (defined(this._colorFramebuffer.depthStencilTexture)) {\n    mask |= gl.DEPTH_BUFFER_BIT | (blitStencil ? gl.STENCIL_BUFFER_BIT : 0);\n  }\n  gl.blitFramebuffer(0, 0, this._width, this._height, 0, 0, this._width, this._height, mask, gl.NEAREST);\n  gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n};\nMultisampleFramebuffer.prototype.isDestroyed = function () {\n  return false;\n};\nMultisampleFramebuffer.prototype.destroy = function () {\n  this._renderFramebuffer.destroy();\n  this._colorFramebuffer.destroy();\n  return destroyObject(this);\n};\nexport default MultisampleFramebuffer;","map":{"version":3,"names":["Check","defaultValue","defined","destroyObject","DeveloperError","Framebuffer","MultisampleFramebuffer","options","EMPTY_OBJECT","context","width","height","colorRenderbuffers","colorTextures","depthStencilRenderbuffer","depthStencilTexture","destroyAttachments","_width","_height","_renderFramebuffer","_colorFramebuffer","prototype","getRenderFramebuffer","getColorFramebuffer","blitFramebuffers","blitStencil","bindRead","bindDraw","gl","_gl","mask","_colorTextures","length","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","NEAREST","bindFramebuffer","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","isDestroyed","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/MultisampleFramebuffer.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Framebuffer from \"./Framebuffer.js\";\n\n/**\n * Creates a multisampling wrapper around two framebuffers with optional initial\n * color and depth-stencil attachments. The first framebuffer has multisampled\n * renderbuffer attachments and is bound to READ_FRAMEBUFFER during the blit. The\n * second is bound to DRAW_FRAMEBUFFER during the blit, and has texture attachments\n * to store the copied pixels.\n *\n * @param {object} options Object with the following properties:\n * @param {Context} options.context\n * @param {number} options.width\n * @param {number} options.height\n * @param {Texture[]} [options.colorTextures]\n * @param {Renderbuffer[]} [options.colorRenderbuffers]\n * @param {Texture} [options.depthStencilTexture]\n * @param {Renderbuffer} [options.depthStencilRenderbuffer]\n * @param {boolean} [options.destroyAttachments]\n *\n * @exception {DeveloperError} Both color renderbuffer and texture attachments must be provided.\n * @exception {DeveloperError} Both depth-stencil renderbuffer and texture attachments must be provided.\n *\n * @private\n * @constructor\n */\nfunction MultisampleFramebuffer(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const {\n    context,\n    width,\n    height,\n    colorRenderbuffers,\n    colorTextures,\n    depthStencilRenderbuffer,\n    depthStencilTexture,\n    destroyAttachments,\n  } = options;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.context\", context);\n  Check.defined(\"options.width\", width);\n  Check.defined(\"options.height\", height);\n  //>>includeEnd('debug');\n\n  this._width = width;\n  this._height = height;\n\n  if (defined(colorRenderbuffers) !== defined(colorTextures)) {\n    throw new DeveloperError(\n      \"Both color renderbuffer and texture attachments must be provided.\",\n    );\n  }\n\n  if (defined(depthStencilRenderbuffer) !== defined(depthStencilTexture)) {\n    throw new DeveloperError(\n      \"Both depth-stencil renderbuffer and texture attachments must be provided.\",\n    );\n  }\n\n  this._renderFramebuffer = new Framebuffer({\n    context: context,\n    colorRenderbuffers: colorRenderbuffers,\n    depthStencilRenderbuffer: depthStencilRenderbuffer,\n    destroyAttachments: destroyAttachments,\n  });\n  this._colorFramebuffer = new Framebuffer({\n    context: context,\n    colorTextures: colorTextures,\n    depthStencilTexture: depthStencilTexture,\n    destroyAttachments: destroyAttachments,\n  });\n}\n\nMultisampleFramebuffer.prototype.getRenderFramebuffer = function () {\n  return this._renderFramebuffer;\n};\n\nMultisampleFramebuffer.prototype.getColorFramebuffer = function () {\n  return this._colorFramebuffer;\n};\n\n/**\n * Copy from the render framebuffer to the color framebuffer, resolving the stencil.\n *\n * @param {Context} context\n * @param {boolean} blitStencil <code>true</code> if the stencil mask should be applied.\n *\n * @private\n */\nMultisampleFramebuffer.prototype.blitFramebuffers = function (\n  context,\n  blitStencil,\n) {\n  this._renderFramebuffer.bindRead();\n  this._colorFramebuffer.bindDraw();\n  const gl = context._gl;\n  let mask = 0;\n  if (this._colorFramebuffer._colorTextures.length > 0) {\n    mask |= gl.COLOR_BUFFER_BIT;\n  }\n  if (defined(this._colorFramebuffer.depthStencilTexture)) {\n    mask |= gl.DEPTH_BUFFER_BIT | (blitStencil ? gl.STENCIL_BUFFER_BIT : 0);\n  }\n  gl.blitFramebuffer(\n    0,\n    0,\n    this._width,\n    this._height,\n    0,\n    0,\n    this._width,\n    this._height,\n    mask,\n    gl.NEAREST,\n  );\n  gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n};\n\nMultisampleFramebuffer.prototype.isDestroyed = function () {\n  return false;\n};\n\nMultisampleFramebuffer.prototype.destroy = function () {\n  this._renderFramebuffer.destroy();\n  this._colorFramebuffer.destroy();\n  return destroyObject(this);\n};\n\nexport default MultisampleFramebuffer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}