{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport getTimestamp from \"../Core/getTimestamp.js\";\nimport getElement from \"../DataSources/getElement.js\";\n\n/**\n * @private\n */\nfunction PerformanceDisplay(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const container = getElement(options.container);\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required\");\n  }\n  //>>includeEnd('debug');\n\n  this._container = container;\n  const display = document.createElement(\"div\");\n  display.className = \"cesium-performanceDisplay\";\n  const fpsElement = document.createElement(\"div\");\n  fpsElement.className = \"cesium-performanceDisplay-fps\";\n  this._fpsText = document.createTextNode(\"\");\n  fpsElement.appendChild(this._fpsText);\n  const msElement = document.createElement(\"div\");\n  msElement.className = \"cesium-performanceDisplay-ms\";\n  this._msText = document.createTextNode(\"\");\n  msElement.appendChild(this._msText);\n  display.appendChild(msElement);\n  display.appendChild(fpsElement);\n  this._container.appendChild(display);\n  this._lastFpsSampleTime = getTimestamp();\n  this._lastMsSampleTime = getTimestamp();\n  this._fpsFrameCount = 0;\n  this._msFrameCount = 0;\n  this._throttled = false;\n  const throttledElement = document.createElement(\"div\");\n  throttledElement.className = \"cesium-performanceDisplay-throttled\";\n  this._throttledText = document.createTextNode(\"\");\n  throttledElement.appendChild(this._throttledText);\n  display.appendChild(throttledElement);\n}\nObject.defineProperties(PerformanceDisplay.prototype, {\n  /**\n   * The display should indicate the FPS is being throttled.\n   * @memberof PerformanceDisplay.prototype\n   *\n   * @type {boolean}\n   */\n  throttled: {\n    get: function () {\n      return this._throttled;\n    },\n    set: function (value) {\n      if (this._throttled === value) {\n        return;\n      }\n      if (value) {\n        this._throttledText.nodeValue = \"(throttled)\";\n      } else {\n        this._throttledText.nodeValue = \"\";\n      }\n      this._throttled = value;\n    }\n  }\n});\n\n/**\n * Update the display.  This function should only be called once per frame, because\n * each call records a frame in the internal buffer and redraws the display.\n *\n * @param {boolean} [renderedThisFrame=true] If provided, the FPS count will only update and display if true.\n */\nPerformanceDisplay.prototype.update = function (renderedThisFrame) {\n  const time = getTimestamp();\n  const updateDisplay = defaultValue(renderedThisFrame, true);\n  this._fpsFrameCount++;\n  const fpsElapsedTime = time - this._lastFpsSampleTime;\n  if (fpsElapsedTime > 1000) {\n    let fps = \"N/A\";\n    if (updateDisplay) {\n      fps = this._fpsFrameCount * 1000 / fpsElapsedTime | 0;\n    }\n    this._fpsText.nodeValue = `${fps} FPS`;\n    this._lastFpsSampleTime = time;\n    this._fpsFrameCount = 0;\n  }\n  this._msFrameCount++;\n  const msElapsedTime = time - this._lastMsSampleTime;\n  if (msElapsedTime > 200) {\n    let ms = \"N/A\";\n    if (updateDisplay) {\n      ms = (msElapsedTime / this._msFrameCount).toFixed(2);\n    }\n    this._msText.nodeValue = `${ms} MS`;\n    this._lastMsSampleTime = time;\n    this._msFrameCount = 0;\n  }\n};\n\n/**\n * Destroys the WebGL resources held by this object.\n */\nPerformanceDisplay.prototype.destroy = function () {\n  return destroyObject(this);\n};\nexport default PerformanceDisplay;","map":{"version":3,"names":["defaultValue","defined","destroyObject","DeveloperError","getTimestamp","getElement","PerformanceDisplay","options","EMPTY_OBJECT","container","_container","display","document","createElement","className","fpsElement","_fpsText","createTextNode","appendChild","msElement","_msText","_lastFpsSampleTime","_lastMsSampleTime","_fpsFrameCount","_msFrameCount","_throttled","throttledElement","_throttledText","Object","defineProperties","prototype","throttled","get","set","value","nodeValue","update","renderedThisFrame","time","updateDisplay","fpsElapsedTime","fps","msElapsedTime","ms","toFixed","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/PerformanceDisplay.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport getTimestamp from \"../Core/getTimestamp.js\";\nimport getElement from \"../DataSources/getElement.js\";\n\n/**\n * @private\n */\nfunction PerformanceDisplay(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const container = getElement(options.container);\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required\");\n  }\n  //>>includeEnd('debug');\n\n  this._container = container;\n\n  const display = document.createElement(\"div\");\n  display.className = \"cesium-performanceDisplay\";\n  const fpsElement = document.createElement(\"div\");\n  fpsElement.className = \"cesium-performanceDisplay-fps\";\n  this._fpsText = document.createTextNode(\"\");\n  fpsElement.appendChild(this._fpsText);\n  const msElement = document.createElement(\"div\");\n  msElement.className = \"cesium-performanceDisplay-ms\";\n  this._msText = document.createTextNode(\"\");\n  msElement.appendChild(this._msText);\n  display.appendChild(msElement);\n  display.appendChild(fpsElement);\n  this._container.appendChild(display);\n\n  this._lastFpsSampleTime = getTimestamp();\n  this._lastMsSampleTime = getTimestamp();\n  this._fpsFrameCount = 0;\n  this._msFrameCount = 0;\n\n  this._throttled = false;\n  const throttledElement = document.createElement(\"div\");\n  throttledElement.className = \"cesium-performanceDisplay-throttled\";\n  this._throttledText = document.createTextNode(\"\");\n  throttledElement.appendChild(this._throttledText);\n  display.appendChild(throttledElement);\n}\n\nObject.defineProperties(PerformanceDisplay.prototype, {\n  /**\n   * The display should indicate the FPS is being throttled.\n   * @memberof PerformanceDisplay.prototype\n   *\n   * @type {boolean}\n   */\n  throttled: {\n    get: function () {\n      return this._throttled;\n    },\n    set: function (value) {\n      if (this._throttled === value) {\n        return;\n      }\n\n      if (value) {\n        this._throttledText.nodeValue = \"(throttled)\";\n      } else {\n        this._throttledText.nodeValue = \"\";\n      }\n\n      this._throttled = value;\n    },\n  },\n});\n\n/**\n * Update the display.  This function should only be called once per frame, because\n * each call records a frame in the internal buffer and redraws the display.\n *\n * @param {boolean} [renderedThisFrame=true] If provided, the FPS count will only update and display if true.\n */\nPerformanceDisplay.prototype.update = function (renderedThisFrame) {\n  const time = getTimestamp();\n  const updateDisplay = defaultValue(renderedThisFrame, true);\n\n  this._fpsFrameCount++;\n  const fpsElapsedTime = time - this._lastFpsSampleTime;\n  if (fpsElapsedTime > 1000) {\n    let fps = \"N/A\";\n    if (updateDisplay) {\n      fps = ((this._fpsFrameCount * 1000) / fpsElapsedTime) | 0;\n    }\n\n    this._fpsText.nodeValue = `${fps} FPS`;\n    this._lastFpsSampleTime = time;\n    this._fpsFrameCount = 0;\n  }\n\n  this._msFrameCount++;\n  const msElapsedTime = time - this._lastMsSampleTime;\n  if (msElapsedTime > 200) {\n    let ms = \"N/A\";\n    if (updateDisplay) {\n      ms = (msElapsedTime / this._msFrameCount).toFixed(2);\n    }\n\n    this._msText.nodeValue = `${ms} MS`;\n    this._lastMsSampleTime = time;\n    this._msFrameCount = 0;\n  }\n};\n\n/**\n * Destroys the WebGL resources held by this object.\n */\nPerformanceDisplay.prototype.destroy = function () {\n  return destroyObject(this);\n};\nexport default PerformanceDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}