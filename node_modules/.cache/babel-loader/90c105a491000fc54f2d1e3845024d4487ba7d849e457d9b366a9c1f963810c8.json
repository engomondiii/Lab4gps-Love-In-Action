{"ast":null,"code":"import destroyObject from \"../Core/destroyObject.js\";\n\n/**\n * Represents content for a tile in a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification|3D Tiles} tileset whose\n * content points to another 3D Tiles tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Tileset3DTileContent\n * @constructor\n *\n * @private\n */\nfunction Tileset3DTileContent(tileset, tile, resource) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this.featurePropertiesDirty = false;\n  this._metadata = undefined;\n  this._group = undefined;\n  this._ready = false;\n}\nObject.defineProperties(Tileset3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  pointsLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  trianglesLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  geometryByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  batchTableByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  innerContents: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Returns true when the tile's content is ready to render; otherwise false\n   *\n   * @memberof Tileset3DTileContent.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   * @private\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    }\n  },\n  tileset: {\n    get: function () {\n      return this._tileset;\n    }\n  },\n  tile: {\n    get: function () {\n      return this._tile;\n    }\n  },\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    }\n  },\n  batchTable: {\n    get: function () {\n      return undefined;\n    }\n  },\n  metadata: {\n    get: function () {\n      return this._metadata;\n    },\n    set: function (value) {\n      this._metadata = value;\n    }\n  },\n  group: {\n    get: function () {\n      return this._group;\n    },\n    set: function (value) {\n      this._group = value;\n    }\n  }\n});\n\n/**\n * Creates an instance of Tileset3DTileContent from a parsed JSON object\n * @param {Cesium3DTileset} tileset\n * @param {Cesium3DTile} tile\n * @param {Resource} resource\n * @param {object} json\n * @returns {Tileset3DTileContent}\n */\nTileset3DTileContent.fromJson = function (tileset, tile, resource, json) {\n  const content = new Tileset3DTileContent(tileset, tile, resource);\n  content._tileset.loadTileset(content._resource, json, content._tile);\n  content._ready = true;\n  return content;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Tileset3DTileContent</code>\n * always returns <code>false</code> since a tile of this type does not have any features.\n */\nTileset3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Tileset3DTileContent</code>\n * always returns <code>undefined</code> since a tile of this type does not have any features.\n */\nTileset3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\nTileset3DTileContent.prototype.applyDebugSettings = function (enabled, color) {};\nTileset3DTileContent.prototype.applyStyle = function (style) {};\nTileset3DTileContent.prototype.update = function (tileset, frameState) {};\nTileset3DTileContent.prototype.pick = function (ray, frameState, result) {\n  return undefined;\n};\nTileset3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\nTileset3DTileContent.prototype.destroy = function () {\n  return destroyObject(this);\n};\nexport default Tileset3DTileContent;","map":{"version":3,"names":["destroyObject","Tileset3DTileContent","tileset","tile","resource","_tileset","_tile","_resource","featurePropertiesDirty","_metadata","undefined","_group","_ready","Object","defineProperties","prototype","featuresLength","get","pointsLength","trianglesLength","geometryByteLength","texturesByteLength","batchTableByteLength","innerContents","ready","url","getUrlComponent","batchTable","metadata","set","value","group","fromJson","json","content","loadTileset","hasProperty","batchId","name","getFeature","applyDebugSettings","enabled","color","applyStyle","style","update","frameState","pick","ray","result","isDestroyed","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Tileset3DTileContent.js"],"sourcesContent":["import destroyObject from \"../Core/destroyObject.js\";\n\n/**\n * Represents content for a tile in a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification|3D Tiles} tileset whose\n * content points to another 3D Tiles tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Tileset3DTileContent\n * @constructor\n *\n * @private\n */\nfunction Tileset3DTileContent(tileset, tile, resource) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n\n  this.featurePropertiesDirty = false;\n\n  this._metadata = undefined;\n  this._group = undefined;\n\n  this._ready = false;\n}\n\nObject.defineProperties(Tileset3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  pointsLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  trianglesLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  geometryByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  batchTableByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Returns true when the tile's content is ready to render; otherwise false\n   *\n   * @memberof Tileset3DTileContent.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   * @private\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    },\n  },\n\n  batchTable: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  metadata: {\n    get: function () {\n      return this._metadata;\n    },\n    set: function (value) {\n      this._metadata = value;\n    },\n  },\n\n  group: {\n    get: function () {\n      return this._group;\n    },\n    set: function (value) {\n      this._group = value;\n    },\n  },\n});\n\n/**\n * Creates an instance of Tileset3DTileContent from a parsed JSON object\n * @param {Cesium3DTileset} tileset\n * @param {Cesium3DTile} tile\n * @param {Resource} resource\n * @param {object} json\n * @returns {Tileset3DTileContent}\n */\nTileset3DTileContent.fromJson = function (tileset, tile, resource, json) {\n  const content = new Tileset3DTileContent(tileset, tile, resource);\n  content._tileset.loadTileset(content._resource, json, content._tile);\n  content._ready = true;\n\n  return content;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Tileset3DTileContent</code>\n * always returns <code>false</code> since a tile of this type does not have any features.\n */\nTileset3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Tileset3DTileContent</code>\n * always returns <code>undefined</code> since a tile of this type does not have any features.\n */\nTileset3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\n\nTileset3DTileContent.prototype.applyDebugSettings = function (\n  enabled,\n  color,\n) {};\n\nTileset3DTileContent.prototype.applyStyle = function (style) {};\n\nTileset3DTileContent.prototype.update = function (tileset, frameState) {};\n\nTileset3DTileContent.prototype.pick = function (ray, frameState, result) {\n  return undefined;\n};\n\nTileset3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nTileset3DTileContent.prototype.destroy = function () {\n  return destroyObject(this);\n};\nexport default Tileset3DTileContent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}