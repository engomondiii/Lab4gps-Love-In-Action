{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport Cesium3DTileStyle from \"./Cesium3DTileStyle.js\";\n\n/**\n * Creates a {@link Cesium3DTileset} instance for the\n * {@link https://cesium.com/content/cesium-osm-buildings/|Cesium OSM Buildings}\n * tileset.\n *\n * @function\n *\n * @param {object} [options] Construction options. Any options allowed by the {@link Cesium3DTileset} constructor\n *        may be specified here. In addition to those, the following properties are supported:\n * @param {Color} [options.defaultColor=Color.WHITE] The default color to use for buildings\n *        that do not have a color. This parameter is ignored if <code>options.style</code> is specified.\n * @param {Cesium3DTileStyle} [options.style] The style to use with the tileset. If not\n *        specified, a default style is used which gives each building or building part a\n *        color inferred from its OpenStreetMap <code>tags</code>. If no color can be inferred,\n *        <code>options.defaultColor</code> is used.\n * @param {boolean} [options.enableShowOutline=true] If true, enable rendering outlines. This can be set to false to avoid the additional processing of geometry at load time.\n * @param {boolean} [options.showOutline=true] Whether to show outlines around buildings. When true,\n *        outlines are displayed. When false, outlines are not displayed.\n * @returns {Promise<Cesium3DTileset>}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium OSM Buildings with default styling\n * const viewer = new Cesium.Viewer(\"cesiumContainer\");\n * try {\n *   const tileset = await Cesium.createOsmBuildingsAsync();\n *   viewer.scene.primitives.add(tileset));\n * } catch (error) {\n *   console.log(`Error creating tileset: ${error}`);\n * }\n *\n * @example\n * // Create Cesium OSM Buildings with a custom style highlighting\n * // schools and hospitals.\n * const viewer = new Cesium.Viewer(\"cesiumContainer\");\n * try {\n *   const tileset = await Cesium.createOsmBuildingsAsync({\n *     style: new Cesium.Cesium3DTileStyle({\n *       color: {\n *         conditions: [\n *           [\"${feature['building']} === 'hospital'\", \"color('#0000FF')\"],\n *           [\"${feature['building']} === 'school'\", \"color('#00FF00')\"],\n *           [true, \"color('#ffffff')\"]\n *         ]\n *       }\n *     })\n *   });\n *   viewer.scene.primitives.add(tileset));\n * } catch (error) {\n *   console.log(`Error creating tileset: ${error}`);\n * }\n */\nasync function createOsmBuildingsAsync(options) {\n  const tileset = await Cesium3DTileset.fromIonAssetId(96188, options);\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let style = options.style;\n  if (!defined(style)) {\n    const color = defaultValue(options.defaultColor, Color.WHITE).toCssColorString();\n    style = new Cesium3DTileStyle({\n      color: `Boolean(\\${feature['cesium#color']}) ? color(\\${feature['cesium#color']}) : ${color}`\n    });\n  }\n  tileset.style = style;\n  return tileset;\n}\nexport default createOsmBuildingsAsync;","map":{"version":3,"names":["Color","defaultValue","defined","Cesium3DTileset","Cesium3DTileStyle","createOsmBuildingsAsync","options","tileset","fromIonAssetId","EMPTY_OBJECT","style","color","defaultColor","WHITE","toCssColorString"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/createOsmBuildingsAsync.js"],"sourcesContent":["import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport Cesium3DTileStyle from \"./Cesium3DTileStyle.js\";\n\n/**\n * Creates a {@link Cesium3DTileset} instance for the\n * {@link https://cesium.com/content/cesium-osm-buildings/|Cesium OSM Buildings}\n * tileset.\n *\n * @function\n *\n * @param {object} [options] Construction options. Any options allowed by the {@link Cesium3DTileset} constructor\n *        may be specified here. In addition to those, the following properties are supported:\n * @param {Color} [options.defaultColor=Color.WHITE] The default color to use for buildings\n *        that do not have a color. This parameter is ignored if <code>options.style</code> is specified.\n * @param {Cesium3DTileStyle} [options.style] The style to use with the tileset. If not\n *        specified, a default style is used which gives each building or building part a\n *        color inferred from its OpenStreetMap <code>tags</code>. If no color can be inferred,\n *        <code>options.defaultColor</code> is used.\n * @param {boolean} [options.enableShowOutline=true] If true, enable rendering outlines. This can be set to false to avoid the additional processing of geometry at load time.\n * @param {boolean} [options.showOutline=true] Whether to show outlines around buildings. When true,\n *        outlines are displayed. When false, outlines are not displayed.\n * @returns {Promise<Cesium3DTileset>}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium OSM Buildings with default styling\n * const viewer = new Cesium.Viewer(\"cesiumContainer\");\n * try {\n *   const tileset = await Cesium.createOsmBuildingsAsync();\n *   viewer.scene.primitives.add(tileset));\n * } catch (error) {\n *   console.log(`Error creating tileset: ${error}`);\n * }\n *\n * @example\n * // Create Cesium OSM Buildings with a custom style highlighting\n * // schools and hospitals.\n * const viewer = new Cesium.Viewer(\"cesiumContainer\");\n * try {\n *   const tileset = await Cesium.createOsmBuildingsAsync({\n *     style: new Cesium.Cesium3DTileStyle({\n *       color: {\n *         conditions: [\n *           [\"${feature['building']} === 'hospital'\", \"color('#0000FF')\"],\n *           [\"${feature['building']} === 'school'\", \"color('#00FF00')\"],\n *           [true, \"color('#ffffff')\"]\n *         ]\n *       }\n *     })\n *   });\n *   viewer.scene.primitives.add(tileset));\n * } catch (error) {\n *   console.log(`Error creating tileset: ${error}`);\n * }\n */\nasync function createOsmBuildingsAsync(options) {\n  const tileset = await Cesium3DTileset.fromIonAssetId(96188, options);\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  let style = options.style;\n\n  if (!defined(style)) {\n    const color = defaultValue(\n      options.defaultColor,\n      Color.WHITE,\n    ).toCssColorString();\n    style = new Cesium3DTileStyle({\n      color: `Boolean(\\${feature['cesium#color']}) ? color(\\${feature['cesium#color']}) : ${color}`,\n    });\n  }\n\n  tileset.style = style;\n\n  return tileset;\n}\n\nexport default createOsmBuildingsAsync;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,iBAAiB,MAAM,wBAAwB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,uBAAuBA,CAACC,OAAO,EAAE;EAC9C,MAAMC,OAAO,GAAG,MAAMJ,eAAe,CAACK,cAAc,CAAC,KAAK,EAAEF,OAAO,CAAC;EAEpEA,OAAO,GAAGL,YAAY,CAACK,OAAO,EAAEL,YAAY,CAACQ,YAAY,CAAC;EAE1D,IAAIC,KAAK,GAAGJ,OAAO,CAACI,KAAK;EAEzB,IAAI,CAACR,OAAO,CAACQ,KAAK,CAAC,EAAE;IACnB,MAAMC,KAAK,GAAGV,YAAY,CACxBK,OAAO,CAACM,YAAY,EACpBZ,KAAK,CAACa,KACR,CAAC,CAACC,gBAAgB,CAAC,CAAC;IACpBJ,KAAK,GAAG,IAAIN,iBAAiB,CAAC;MAC5BO,KAAK,EAAE,+EAA+EA,KAAK;IAC7F,CAAC,CAAC;EACJ;EAEAJ,OAAO,CAACG,KAAK,GAAGA,KAAK;EAErB,OAAOH,OAAO;AAChB;AAEA,eAAeF,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}