{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"// KhronosGroup https://github.com/KhronosGroup/ToneMapping/tree/main/PBR_Neutral\\n\\\n\\n\\\n// Input color is non-negative and resides in the Linear Rec. 709 color space.\\n\\\n// Output color is also Linear Rec. 709, but in the [0, 1] range.\\n\\\n\\n\\\nvec3 czm_pbrNeutralTonemapping(vec3 color) {\\n\\\n    const float startCompression = 0.8 - 0.04;\\n\\\n    const float desaturation = 0.15;\\n\\\n\\n\\\n    float x = min(color.r, min(color.g, color.b));\\n\\\n    float offset = czm_branchFreeTernary(x < 0.08, x - 6.25 * x * x, 0.04);\\n\\\n    color -= offset;\\n\\\n\\n\\\n    float peak = max(color.r, max(color.g, color.b));\\n\\\n    if (peak < startCompression) return color;\\n\\\n\\n\\\n    const float d = 1.0 - startCompression;\\n\\\n    float newPeak = 1.0 - d * d / (peak + d - startCompression);\\n\\\n    color *= newPeak / peak;\\n\\\n\\n\\\n    float g = 1.0 - 1.0 / (desaturation * (peak - newPeak) + 1.0);\\n\\\n    return mix(color, newPeak * vec3(1.0, 1.0, 1.0), g);\\n\\\n}\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Builtin/Functions/pbrNeutralTonemapping.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"// KhronosGroup https://github.com/KhronosGroup/ToneMapping/tree/main/PBR_Neutral\\n\\\n\\n\\\n// Input color is non-negative and resides in the Linear Rec. 709 color space.\\n\\\n// Output color is also Linear Rec. 709, but in the [0, 1] range.\\n\\\n\\n\\\nvec3 czm_pbrNeutralTonemapping(vec3 color) {\\n\\\n    const float startCompression = 0.8 - 0.04;\\n\\\n    const float desaturation = 0.15;\\n\\\n\\n\\\n    float x = min(color.r, min(color.g, color.b));\\n\\\n    float offset = czm_branchFreeTernary(x < 0.08, x - 6.25 * x * x, 0.04);\\n\\\n    color -= offset;\\n\\\n\\n\\\n    float peak = max(color.r, max(color.g, color.b));\\n\\\n    if (peak < startCompression) return color;\\n\\\n\\n\\\n    const float d = 1.0 - startCompression;\\n\\\n    float newPeak = 1.0 - d * d / (peak + d - startCompression);\\n\\\n    color *= newPeak / peak;\\n\\\n\\n\\\n    float g = 1.0 - 1.0 / (desaturation * (peak - newPeak) + 1.0);\\n\\\n    return mix(color, newPeak * vec3(1.0, 1.0, 1.0), g);\\n\\\n}\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}