{"ast":null,"code":"import Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nconst url = \"https://dev.virtualearth.net/REST/v1/Locations\";\n\n/**\n * Provides geocoding through Bing Maps.\n *\n * @see {@link https://www.microsoft.com/en-us/maps/bing-maps/product|Microsoft Bing Maps Platform APIs Terms Of Use}\n * @alias BingMapsGeocoderService\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.key A key to use with the Bing Maps geocoding service\n * @param {string} [options.culture] A Bing Maps {@link https://docs.microsoft.com/en-us/bingmaps/rest-services/common-parameters-and-types/supported-culture-codes|Culture Code} to return results in a specific culture and language.\n */\nfunction BingMapsGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const key = options.key;\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(key)) {\n    throw new DeveloperError(\"options.key is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._key = key;\n  const queryParameters = {\n    key: key\n  };\n  if (defined(options.culture)) {\n    queryParameters.culture = options.culture;\n  }\n  this._resource = new Resource({\n    url: url,\n    queryParameters: queryParameters\n  });\n  this._credit = new Credit(`<img src=\"http:\\/\\/dev.virtualearth.net\\/Branding\\/logo_powered_by.png\"\\/>`, false);\n}\nObject.defineProperties(BingMapsGeocoderService.prototype, {\n  /**\n   * The URL endpoint for the Bing geocoder service\n   * @type {string}\n   * @memberof BingMapsGeocoderService.prototype\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return url;\n    }\n  },\n  /**\n   * The key for the Bing geocoder service\n   * @type {string}\n   * @memberof BingMapsGeocoderService.prototype\n   * @readonly\n   */\n  key: {\n    get: function () {\n      return this._key;\n    }\n  },\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof BingMapsGeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  }\n});\n\n/**\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService.Result[]>}\n */\nBingMapsGeocoderService.prototype.geocode = async function (query) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  const resource = this._resource.getDerivedResource({\n    queryParameters: {\n      query: query\n    }\n  });\n  return resource.fetchJsonp(\"jsonp\").then(function (result) {\n    if (result.resourceSets.length === 0) {\n      return [];\n    }\n    const results = result.resourceSets[0].resources;\n    return results.map(function (resource) {\n      const bbox = resource.bbox;\n      const south = bbox[0];\n      const west = bbox[1];\n      const north = bbox[2];\n      const east = bbox[3];\n      return {\n        displayName: resource.name,\n        destination: Rectangle.fromDegrees(west, south, east, north)\n      };\n    });\n  });\n};\nexport default BingMapsGeocoderService;","map":{"version":3,"names":["Check","Credit","defaultValue","Rectangle","Resource","defined","DeveloperError","url","BingMapsGeocoderService","options","EMPTY_OBJECT","key","_key","queryParameters","culture","_resource","_credit","Object","defineProperties","prototype","get","credit","geocode","query","typeOf","string","resource","getDerivedResource","fetchJsonp","then","result","resourceSets","length","results","resources","map","bbox","south","west","north","east","displayName","name","destination","fromDegrees"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/BingMapsGeocoderService.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\nconst url = \"https://dev.virtualearth.net/REST/v1/Locations\";\n\n/**\n * Provides geocoding through Bing Maps.\n *\n * @see {@link https://www.microsoft.com/en-us/maps/bing-maps/product|Microsoft Bing Maps Platform APIs Terms Of Use}\n * @alias BingMapsGeocoderService\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.key A key to use with the Bing Maps geocoding service\n * @param {string} [options.culture] A Bing Maps {@link https://docs.microsoft.com/en-us/bingmaps/rest-services/common-parameters-and-types/supported-culture-codes|Culture Code} to return results in a specific culture and language.\n */\nfunction BingMapsGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const key = options.key;\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(key)) {\n    throw new DeveloperError(\"options.key is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._key = key;\n\n  const queryParameters = {\n    key: key,\n  };\n\n  if (defined(options.culture)) {\n    queryParameters.culture = options.culture;\n  }\n\n  this._resource = new Resource({\n    url: url,\n    queryParameters: queryParameters,\n  });\n\n  this._credit = new Credit(\n    `<img src=\"http:\\/\\/dev.virtualearth.net\\/Branding\\/logo_powered_by.png\"\\/>`,\n    false,\n  );\n}\n\nObject.defineProperties(BingMapsGeocoderService.prototype, {\n  /**\n   * The URL endpoint for the Bing geocoder service\n   * @type {string}\n   * @memberof BingMapsGeocoderService.prototype\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return url;\n    },\n  },\n\n  /**\n   * The key for the Bing geocoder service\n   * @type {string}\n   * @memberof BingMapsGeocoderService.prototype\n   * @readonly\n   */\n  key: {\n    get: function () {\n      return this._key;\n    },\n  },\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof BingMapsGeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n});\n\n/**\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService.Result[]>}\n */\nBingMapsGeocoderService.prototype.geocode = async function (query) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  const resource = this._resource.getDerivedResource({\n    queryParameters: {\n      query: query,\n    },\n  });\n\n  return resource.fetchJsonp(\"jsonp\").then(function (result) {\n    if (result.resourceSets.length === 0) {\n      return [];\n    }\n\n    const results = result.resourceSets[0].resources;\n\n    return results.map(function (resource) {\n      const bbox = resource.bbox;\n      const south = bbox[0];\n      const west = bbox[1];\n      const north = bbox[2];\n      const east = bbox[3];\n      return {\n        displayName: resource.name,\n        destination: Rectangle.fromDegrees(west, south, east, north),\n      };\n    });\n  });\n};\nexport default BingMapsGeocoderService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}