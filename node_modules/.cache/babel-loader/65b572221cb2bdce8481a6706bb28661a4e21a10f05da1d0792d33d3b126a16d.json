{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport Model3DTileContent from \"./Model/Model3DTileContent.js\";\n\n/**\n * @private\n */\nfunction Cesium3DTilesetStatistics() {\n  // Rendering statistics\n  this.selected = 0;\n  this.visited = 0;\n  // Loading statistics\n  this.numberOfCommands = 0;\n  this.numberOfAttemptedRequests = 0;\n  this.numberOfPendingRequests = 0;\n  this.numberOfTilesProcessing = 0;\n  this.numberOfTilesWithContentReady = 0; // Number of tiles with content loaded, does not include empty tiles\n  this.numberOfTilesTotal = 0; // Number of tiles in tileset JSON (and other tileset JSON files as they are loaded)\n  this.numberOfLoadedTilesTotal = 0; // Running total of loaded tiles for the lifetime of the session\n  // Features statistics\n  this.numberOfFeaturesSelected = 0; // Number of features rendered\n  this.numberOfFeaturesLoaded = 0; // Number of features in memory\n  this.numberOfPointsSelected = 0;\n  this.numberOfPointsLoaded = 0;\n  this.numberOfTrianglesSelected = 0;\n  // Styling statistics\n  this.numberOfTilesStyled = 0;\n  this.numberOfFeaturesStyled = 0;\n  // Optimization statistics\n  this.numberOfTilesCulledWithChildrenUnion = 0;\n  // Memory statistics\n  this.geometryByteLength = 0;\n  this.texturesByteLength = 0;\n  this.texturesReferenceCounterById = {};\n  this.batchTableByteLength = 0; // batch textures and any binary metadata properties not otherwise accounted for\n}\nCesium3DTilesetStatistics.prototype.clear = function () {\n  this.selected = 0;\n  this.visited = 0;\n  this.numberOfCommands = 0;\n  this.numberOfAttemptedRequests = 0;\n  this.numberOfFeaturesSelected = 0;\n  this.numberOfPointsSelected = 0;\n  this.numberOfTrianglesSelected = 0;\n  this.numberOfTilesStyled = 0;\n  this.numberOfFeaturesStyled = 0;\n  this.numberOfTilesCulledWithChildrenUnion = 0;\n};\n\n/**\n * Increment the counters for the points, triangles, and features\n * that are currently selected for rendering.\n *\n * This will be called recursively for the given content and\n * all its inner contents\n *\n * @param {Cesium3DTileContent} content\n */\nCesium3DTilesetStatistics.prototype.incrementSelectionCounts = function (content) {\n  this.numberOfFeaturesSelected += content.featuresLength;\n  this.numberOfPointsSelected += content.pointsLength;\n  this.numberOfTrianglesSelected += content.trianglesLength;\n\n  // Recursive calls on all inner contents\n  const contents = content.innerContents;\n  if (defined(contents)) {\n    const length = contents.length;\n    for (let i = 0; i < length; ++i) {\n      this.incrementSelectionCounts(contents[i]);\n    }\n  }\n};\n\n/**\n * Increment the counters for the number of features and points that\n * are currently loaded, and the lengths (size in bytes) of the\n * occupied memory.\n *\n * This will be called recursively for the given content and\n * all its inner contents\n *\n * @param {Cesium3DTileContent} content\n */\nCesium3DTilesetStatistics.prototype.incrementLoadCounts = function (content) {\n  this.numberOfFeaturesLoaded += content.featuresLength;\n  this.numberOfPointsLoaded += content.pointsLength;\n  this.geometryByteLength += content.geometryByteLength;\n  this.batchTableByteLength += content.batchTableByteLength;\n\n  // When the content is not a `Model3DTileContent`, then its\n  // textures byte length is added directly\n  if (!(content instanceof Model3DTileContent)) {\n    this.texturesByteLength += content.texturesByteLength;\n  } else {\n    // When the content is a `Model3DTileContent`, then increment the\n    // reference counter for all its textures. The byte length of any\n    // newly tracked texture to the total textures byte length\n    const textureIds = content.getTextureIds();\n    for (const textureId of textureIds) {\n      const referenceCounter = this.texturesReferenceCounterById[textureId] ?? 0;\n      if (referenceCounter === 0) {\n        const textureByteLength = content.getTextureByteLengthById(textureId);\n        this.texturesByteLength += textureByteLength;\n      }\n      this.texturesReferenceCounterById[textureId] = referenceCounter + 1;\n    }\n  }\n\n  // Recursive calls on all inner contents\n  const contents = content.innerContents;\n  if (defined(contents)) {\n    const length = contents.length;\n    for (let i = 0; i < length; ++i) {\n      this.incrementLoadCounts(contents[i]);\n    }\n  }\n};\n\n/**\n * Decrement the counters for the number of features and points that\n * are currently loaded, and the lengths (size in bytes) of the\n * occupied memory.\n *\n * This will be called recursively for the given content and\n * all its inner contents\n *\n * @param {Cesium3DTileContent} content\n */\nCesium3DTilesetStatistics.prototype.decrementLoadCounts = function (content) {\n  this.numberOfFeaturesLoaded -= content.featuresLength;\n  this.numberOfPointsLoaded -= content.pointsLength;\n  this.geometryByteLength -= content.geometryByteLength;\n  this.batchTableByteLength -= content.batchTableByteLength;\n\n  // When the content is not a `Model3DTileContent`, then its\n  // textures byte length is subtracted directly\n  if (!(content instanceof Model3DTileContent)) {\n    this.texturesByteLength -= content.texturesByteLength;\n  } else {\n    // When the content is a `Model3DTileContent`, then decrement the\n    // reference counter for all its textures. The byte length of any\n    // texture that is no longer references is subtracted from the\n    // total textures byte length\n    const textureIds = content.getTextureIds();\n    for (const textureId of textureIds) {\n      const referenceCounter = this.texturesReferenceCounterById[textureId];\n      if (referenceCounter === 1) {\n        delete this.texturesReferenceCounterById[textureId];\n        const textureByteLength = content.getTextureByteLengthById(textureId);\n        this.texturesByteLength -= textureByteLength;\n      } else {\n        this.texturesReferenceCounterById[textureId] = referenceCounter - 1;\n      }\n    }\n  }\n  // Recursive calls on all inner contents\n  const contents = content.innerContents;\n  if (defined(contents)) {\n    const length = contents.length;\n    for (let i = 0; i < length; ++i) {\n      this.decrementLoadCounts(contents[i]);\n    }\n  }\n};\nCesium3DTilesetStatistics.clone = function (statistics, result) {\n  result.selected = statistics.selected;\n  result.visited = statistics.visited;\n  result.numberOfCommands = statistics.numberOfCommands;\n  result.selected = statistics.selected;\n  result.numberOfAttemptedRequests = statistics.numberOfAttemptedRequests;\n  result.numberOfPendingRequests = statistics.numberOfPendingRequests;\n  result.numberOfTilesProcessing = statistics.numberOfTilesProcessing;\n  result.numberOfTilesWithContentReady = statistics.numberOfTilesWithContentReady;\n  result.numberOfTilesTotal = statistics.numberOfTilesTotal;\n  result.numberOfFeaturesSelected = statistics.numberOfFeaturesSelected;\n  result.numberOfFeaturesLoaded = statistics.numberOfFeaturesLoaded;\n  result.numberOfPointsSelected = statistics.numberOfPointsSelected;\n  result.numberOfPointsLoaded = statistics.numberOfPointsLoaded;\n  result.numberOfTrianglesSelected = statistics.numberOfTrianglesSelected;\n  result.numberOfTilesStyled = statistics.numberOfTilesStyled;\n  result.numberOfFeaturesStyled = statistics.numberOfFeaturesStyled;\n  result.numberOfTilesCulledWithChildrenUnion = statistics.numberOfTilesCulledWithChildrenUnion;\n  result.geometryByteLength = statistics.geometryByteLength;\n  result.texturesByteLength = statistics.texturesByteLength;\n  result.texturesReferenceCounterById = {\n    ...statistics.texturesReferenceCounterById\n  };\n  result.batchTableByteLength = statistics.batchTableByteLength;\n};\nexport default Cesium3DTilesetStatistics;","map":{"version":3,"names":["defined","Model3DTileContent","Cesium3DTilesetStatistics","selected","visited","numberOfCommands","numberOfAttemptedRequests","numberOfPendingRequests","numberOfTilesProcessing","numberOfTilesWithContentReady","numberOfTilesTotal","numberOfLoadedTilesTotal","numberOfFeaturesSelected","numberOfFeaturesLoaded","numberOfPointsSelected","numberOfPointsLoaded","numberOfTrianglesSelected","numberOfTilesStyled","numberOfFeaturesStyled","numberOfTilesCulledWithChildrenUnion","geometryByteLength","texturesByteLength","texturesReferenceCounterById","batchTableByteLength","prototype","clear","incrementSelectionCounts","content","featuresLength","pointsLength","trianglesLength","contents","innerContents","length","i","incrementLoadCounts","textureIds","getTextureIds","textureId","referenceCounter","textureByteLength","getTextureByteLengthById","decrementLoadCounts","clone","statistics","result"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Cesium3DTilesetStatistics.js"],"sourcesContent":["import defined from \"../Core/defined.js\";\nimport Model3DTileContent from \"./Model/Model3DTileContent.js\";\n\n/**\n * @private\n */\nfunction Cesium3DTilesetStatistics() {\n  // Rendering statistics\n  this.selected = 0;\n  this.visited = 0;\n  // Loading statistics\n  this.numberOfCommands = 0;\n  this.numberOfAttemptedRequests = 0;\n  this.numberOfPendingRequests = 0;\n  this.numberOfTilesProcessing = 0;\n  this.numberOfTilesWithContentReady = 0; // Number of tiles with content loaded, does not include empty tiles\n  this.numberOfTilesTotal = 0; // Number of tiles in tileset JSON (and other tileset JSON files as they are loaded)\n  this.numberOfLoadedTilesTotal = 0; // Running total of loaded tiles for the lifetime of the session\n  // Features statistics\n  this.numberOfFeaturesSelected = 0; // Number of features rendered\n  this.numberOfFeaturesLoaded = 0; // Number of features in memory\n  this.numberOfPointsSelected = 0;\n  this.numberOfPointsLoaded = 0;\n  this.numberOfTrianglesSelected = 0;\n  // Styling statistics\n  this.numberOfTilesStyled = 0;\n  this.numberOfFeaturesStyled = 0;\n  // Optimization statistics\n  this.numberOfTilesCulledWithChildrenUnion = 0;\n  // Memory statistics\n  this.geometryByteLength = 0;\n  this.texturesByteLength = 0;\n  this.texturesReferenceCounterById = {};\n  this.batchTableByteLength = 0; // batch textures and any binary metadata properties not otherwise accounted for\n}\n\nCesium3DTilesetStatistics.prototype.clear = function () {\n  this.selected = 0;\n  this.visited = 0;\n  this.numberOfCommands = 0;\n  this.numberOfAttemptedRequests = 0;\n  this.numberOfFeaturesSelected = 0;\n  this.numberOfPointsSelected = 0;\n  this.numberOfTrianglesSelected = 0;\n  this.numberOfTilesStyled = 0;\n  this.numberOfFeaturesStyled = 0;\n  this.numberOfTilesCulledWithChildrenUnion = 0;\n};\n\n/**\n * Increment the counters for the points, triangles, and features\n * that are currently selected for rendering.\n *\n * This will be called recursively for the given content and\n * all its inner contents\n *\n * @param {Cesium3DTileContent} content\n */\nCesium3DTilesetStatistics.prototype.incrementSelectionCounts = function (\n  content,\n) {\n  this.numberOfFeaturesSelected += content.featuresLength;\n  this.numberOfPointsSelected += content.pointsLength;\n  this.numberOfTrianglesSelected += content.trianglesLength;\n\n  // Recursive calls on all inner contents\n  const contents = content.innerContents;\n  if (defined(contents)) {\n    const length = contents.length;\n    for (let i = 0; i < length; ++i) {\n      this.incrementSelectionCounts(contents[i]);\n    }\n  }\n};\n\n/**\n * Increment the counters for the number of features and points that\n * are currently loaded, and the lengths (size in bytes) of the\n * occupied memory.\n *\n * This will be called recursively for the given content and\n * all its inner contents\n *\n * @param {Cesium3DTileContent} content\n */\nCesium3DTilesetStatistics.prototype.incrementLoadCounts = function (content) {\n  this.numberOfFeaturesLoaded += content.featuresLength;\n  this.numberOfPointsLoaded += content.pointsLength;\n  this.geometryByteLength += content.geometryByteLength;\n  this.batchTableByteLength += content.batchTableByteLength;\n\n  // When the content is not a `Model3DTileContent`, then its\n  // textures byte length is added directly\n  if (!(content instanceof Model3DTileContent)) {\n    this.texturesByteLength += content.texturesByteLength;\n  } else {\n    // When the content is a `Model3DTileContent`, then increment the\n    // reference counter for all its textures. The byte length of any\n    // newly tracked texture to the total textures byte length\n    const textureIds = content.getTextureIds();\n    for (const textureId of textureIds) {\n      const referenceCounter =\n        this.texturesReferenceCounterById[textureId] ?? 0;\n      if (referenceCounter === 0) {\n        const textureByteLength = content.getTextureByteLengthById(textureId);\n        this.texturesByteLength += textureByteLength;\n      }\n      this.texturesReferenceCounterById[textureId] = referenceCounter + 1;\n    }\n  }\n\n  // Recursive calls on all inner contents\n  const contents = content.innerContents;\n  if (defined(contents)) {\n    const length = contents.length;\n    for (let i = 0; i < length; ++i) {\n      this.incrementLoadCounts(contents[i]);\n    }\n  }\n};\n\n/**\n * Decrement the counters for the number of features and points that\n * are currently loaded, and the lengths (size in bytes) of the\n * occupied memory.\n *\n * This will be called recursively for the given content and\n * all its inner contents\n *\n * @param {Cesium3DTileContent} content\n */\nCesium3DTilesetStatistics.prototype.decrementLoadCounts = function (content) {\n  this.numberOfFeaturesLoaded -= content.featuresLength;\n  this.numberOfPointsLoaded -= content.pointsLength;\n  this.geometryByteLength -= content.geometryByteLength;\n  this.batchTableByteLength -= content.batchTableByteLength;\n\n  // When the content is not a `Model3DTileContent`, then its\n  // textures byte length is subtracted directly\n  if (!(content instanceof Model3DTileContent)) {\n    this.texturesByteLength -= content.texturesByteLength;\n  } else {\n    // When the content is a `Model3DTileContent`, then decrement the\n    // reference counter for all its textures. The byte length of any\n    // texture that is no longer references is subtracted from the\n    // total textures byte length\n    const textureIds = content.getTextureIds();\n    for (const textureId of textureIds) {\n      const referenceCounter = this.texturesReferenceCounterById[textureId];\n      if (referenceCounter === 1) {\n        delete this.texturesReferenceCounterById[textureId];\n        const textureByteLength = content.getTextureByteLengthById(textureId);\n        this.texturesByteLength -= textureByteLength;\n      } else {\n        this.texturesReferenceCounterById[textureId] = referenceCounter - 1;\n      }\n    }\n  }\n  // Recursive calls on all inner contents\n  const contents = content.innerContents;\n  if (defined(contents)) {\n    const length = contents.length;\n    for (let i = 0; i < length; ++i) {\n      this.decrementLoadCounts(contents[i]);\n    }\n  }\n};\n\nCesium3DTilesetStatistics.clone = function (statistics, result) {\n  result.selected = statistics.selected;\n  result.visited = statistics.visited;\n  result.numberOfCommands = statistics.numberOfCommands;\n  result.selected = statistics.selected;\n  result.numberOfAttemptedRequests = statistics.numberOfAttemptedRequests;\n  result.numberOfPendingRequests = statistics.numberOfPendingRequests;\n  result.numberOfTilesProcessing = statistics.numberOfTilesProcessing;\n  result.numberOfTilesWithContentReady =\n    statistics.numberOfTilesWithContentReady;\n  result.numberOfTilesTotal = statistics.numberOfTilesTotal;\n  result.numberOfFeaturesSelected = statistics.numberOfFeaturesSelected;\n  result.numberOfFeaturesLoaded = statistics.numberOfFeaturesLoaded;\n  result.numberOfPointsSelected = statistics.numberOfPointsSelected;\n  result.numberOfPointsLoaded = statistics.numberOfPointsLoaded;\n  result.numberOfTrianglesSelected = statistics.numberOfTrianglesSelected;\n  result.numberOfTilesStyled = statistics.numberOfTilesStyled;\n  result.numberOfFeaturesStyled = statistics.numberOfFeaturesStyled;\n  result.numberOfTilesCulledWithChildrenUnion =\n    statistics.numberOfTilesCulledWithChildrenUnion;\n  result.geometryByteLength = statistics.geometryByteLength;\n  result.texturesByteLength = statistics.texturesByteLength;\n  result.texturesReferenceCounterById = {\n    ...statistics.texturesReferenceCounterById,\n  };\n  result.batchTableByteLength = statistics.batchTableByteLength;\n};\nexport default Cesium3DTilesetStatistics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}