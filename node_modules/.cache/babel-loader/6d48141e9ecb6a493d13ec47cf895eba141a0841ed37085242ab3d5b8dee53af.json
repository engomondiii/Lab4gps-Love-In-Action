{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"float getPointSizeFromAttenuation(vec3 positionEC) {\\n\\\n  // Variables are packed into a single vector to minimize gl.uniformXXX() calls\\n\\\n  float pointSize = model_pointCloudParameters.x;\\n\\\n  float geometricError = model_pointCloudParameters.y;\\n\\\n  float depthMultiplier = model_pointCloudParameters.z;\\n\\\n\\n\\\n  float depth = -positionEC.z;\\n\\\n  return min((geometricError / depth) * depthMultiplier, pointSize);\\n\\\n}\\n\\\n\\n\\\n#ifdef HAS_POINT_CLOUD_SHOW_STYLE\\n\\\nfloat pointCloudShowStylingStage(in ProcessedAttributes attributes, in Metadata metadata) {\\n\\\n  float tiles3d_tileset_time = model_pointCloudParameters.w;\\n\\\n  return float(getShowFromStyle(attributes, metadata, tiles3d_tileset_time));\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HAS_POINT_CLOUD_COLOR_STYLE\\n\\\nvec4 pointCloudColorStylingStage(in ProcessedAttributes attributes, in Metadata metadata) {\\n\\\n  float tiles3d_tileset_time = model_pointCloudParameters.w;\\n\\\n  return getColorFromStyle(attributes, metadata, tiles3d_tileset_time);\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HAS_POINT_CLOUD_POINT_SIZE_STYLE\\n\\\nfloat pointCloudPointSizeStylingStage(in ProcessedAttributes attributes, in Metadata metadata) {\\n\\\n  float tiles3d_tileset_time = model_pointCloudParameters.w;\\n\\\n  return float(getPointSizeFromStyle(attributes, metadata, tiles3d_tileset_time));\\n\\\n}\\n\\\n#elif defined(HAS_POINT_CLOUD_ATTENUATION)\\n\\\nfloat pointCloudPointSizeStylingStage(in ProcessedAttributes attributes, in Metadata metadata) {\\n\\\n  return getPointSizeFromAttenuation(v_positionEC);\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HAS_POINT_CLOUD_BACK_FACE_CULLING\\n\\\nfloat pointCloudBackFaceCullingStage() {\\n\\\n  #if defined(HAS_NORMALS) && !defined(HAS_DOUBLE_SIDED_MATERIAL)\\n\\\n  // This needs to be computed in eye coordinates so we can't use attributes.normalMC\\n\\\n  return step(-v_normalEC.z, 0.0);\\n\\\n  #else\\n\\\n  return 1.0;\\n\\\n  #endif\\n\\\n}\\n\\\n#endif\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Model/PointCloudStylingStageVS.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"float getPointSizeFromAttenuation(vec3 positionEC) {\\n\\\n  // Variables are packed into a single vector to minimize gl.uniformXXX() calls\\n\\\n  float pointSize = model_pointCloudParameters.x;\\n\\\n  float geometricError = model_pointCloudParameters.y;\\n\\\n  float depthMultiplier = model_pointCloudParameters.z;\\n\\\n\\n\\\n  float depth = -positionEC.z;\\n\\\n  return min((geometricError / depth) * depthMultiplier, pointSize);\\n\\\n}\\n\\\n\\n\\\n#ifdef HAS_POINT_CLOUD_SHOW_STYLE\\n\\\nfloat pointCloudShowStylingStage(in ProcessedAttributes attributes, in Metadata metadata) {\\n\\\n  float tiles3d_tileset_time = model_pointCloudParameters.w;\\n\\\n  return float(getShowFromStyle(attributes, metadata, tiles3d_tileset_time));\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HAS_POINT_CLOUD_COLOR_STYLE\\n\\\nvec4 pointCloudColorStylingStage(in ProcessedAttributes attributes, in Metadata metadata) {\\n\\\n  float tiles3d_tileset_time = model_pointCloudParameters.w;\\n\\\n  return getColorFromStyle(attributes, metadata, tiles3d_tileset_time);\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HAS_POINT_CLOUD_POINT_SIZE_STYLE\\n\\\nfloat pointCloudPointSizeStylingStage(in ProcessedAttributes attributes, in Metadata metadata) {\\n\\\n  float tiles3d_tileset_time = model_pointCloudParameters.w;\\n\\\n  return float(getPointSizeFromStyle(attributes, metadata, tiles3d_tileset_time));\\n\\\n}\\n\\\n#elif defined(HAS_POINT_CLOUD_ATTENUATION)\\n\\\nfloat pointCloudPointSizeStylingStage(in ProcessedAttributes attributes, in Metadata metadata) {\\n\\\n  return getPointSizeFromAttenuation(v_positionEC);\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HAS_POINT_CLOUD_BACK_FACE_CULLING\\n\\\nfloat pointCloudBackFaceCullingStage() {\\n\\\n  #if defined(HAS_NORMALS) && !defined(HAS_DOUBLE_SIDED_MATERIAL)\\n\\\n  // This needs to be computed in eye coordinates so we can't use attributes.normalMC\\n\\\n  return step(-v_normalEC.z, 0.0);\\n\\\n  #else\\n\\\n  return 1.0;\\n\\\n  #endif\\n\\\n}\\n\\\n#endif\";\n"],"mappings":"AAAA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}