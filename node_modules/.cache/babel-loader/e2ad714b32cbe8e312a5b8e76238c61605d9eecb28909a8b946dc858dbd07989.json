{"ast":null,"code":"import AttributeCompression from \"./AttributeCompression.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport CesiumMath from \"./Math.js\";\nconst maxShort = 32767;\nconst scratchBVCartographic = new Cartographic();\nconst scratchEncodedPosition = new Cartesian3();\nfunction decodeVectorPolylinePositions(positions, rectangle, minimumHeight, maximumHeight, ellipsoid) {\n  const positionsLength = positions.length / 3;\n  const uBuffer = positions.subarray(0, positionsLength);\n  const vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\n  const heightBuffer = positions.subarray(2 * positionsLength, 3 * positionsLength);\n  AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\n  const decoded = new Float64Array(positions.length);\n  for (let i = 0; i < positionsLength; ++i) {\n    const u = uBuffer[i];\n    const v = vBuffer[i];\n    const h = heightBuffer[i];\n    const lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\n    const lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\n    const alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / maxShort);\n    const cartographic = Cartographic.fromRadians(lon, lat, alt, scratchBVCartographic);\n    const decodedPosition = ellipsoid.cartographicToCartesian(cartographic, scratchEncodedPosition);\n    Cartesian3.pack(decodedPosition, decoded, i * 3);\n  }\n  return decoded;\n}\nexport default decodeVectorPolylinePositions;","map":{"version":3,"names":["AttributeCompression","Cartesian3","Cartographic","CesiumMath","maxShort","scratchBVCartographic","scratchEncodedPosition","decodeVectorPolylinePositions","positions","rectangle","minimumHeight","maximumHeight","ellipsoid","positionsLength","length","uBuffer","subarray","vBuffer","heightBuffer","zigZagDeltaDecode","decoded","Float64Array","i","u","v","h","lon","lerp","west","east","lat","south","north","alt","cartographic","fromRadians","decodedPosition","cartographicToCartesian","pack"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/decodeVectorPolylinePositions.js"],"sourcesContent":["import AttributeCompression from \"./AttributeCompression.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport CesiumMath from \"./Math.js\";\n\nconst maxShort = 32767;\n\nconst scratchBVCartographic = new Cartographic();\nconst scratchEncodedPosition = new Cartesian3();\n\nfunction decodeVectorPolylinePositions(\n  positions,\n  rectangle,\n  minimumHeight,\n  maximumHeight,\n  ellipsoid,\n) {\n  const positionsLength = positions.length / 3;\n  const uBuffer = positions.subarray(0, positionsLength);\n  const vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\n  const heightBuffer = positions.subarray(\n    2 * positionsLength,\n    3 * positionsLength,\n  );\n  AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\n\n  const decoded = new Float64Array(positions.length);\n  for (let i = 0; i < positionsLength; ++i) {\n    const u = uBuffer[i];\n    const v = vBuffer[i];\n    const h = heightBuffer[i];\n\n    const lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\n    const lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\n    const alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / maxShort);\n\n    const cartographic = Cartographic.fromRadians(\n      lon,\n      lat,\n      alt,\n      scratchBVCartographic,\n    );\n    const decodedPosition = ellipsoid.cartographicToCartesian(\n      cartographic,\n      scratchEncodedPosition,\n    );\n    Cartesian3.pack(decodedPosition, decoded, i * 3);\n  }\n  return decoded;\n}\nexport default decodeVectorPolylinePositions;\n"],"mappings":"AAAA,OAAOA,oBAAoB,MAAM,2BAA2B;AAC5D,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,UAAU,MAAM,WAAW;AAElC,MAAMC,QAAQ,GAAG,KAAK;AAEtB,MAAMC,qBAAqB,GAAG,IAAIH,YAAY,CAAC,CAAC;AAChD,MAAMI,sBAAsB,GAAG,IAAIL,UAAU,CAAC,CAAC;AAE/C,SAASM,6BAA6BA,CACpCC,SAAS,EACTC,SAAS,EACTC,aAAa,EACbC,aAAa,EACbC,SAAS,EACT;EACA,MAAMC,eAAe,GAAGL,SAAS,CAACM,MAAM,GAAG,CAAC;EAC5C,MAAMC,OAAO,GAAGP,SAAS,CAACQ,QAAQ,CAAC,CAAC,EAAEH,eAAe,CAAC;EACtD,MAAMI,OAAO,GAAGT,SAAS,CAACQ,QAAQ,CAACH,eAAe,EAAE,CAAC,GAAGA,eAAe,CAAC;EACxE,MAAMK,YAAY,GAAGV,SAAS,CAACQ,QAAQ,CACrC,CAAC,GAAGH,eAAe,EACnB,CAAC,GAAGA,eACN,CAAC;EACDb,oBAAoB,CAACmB,iBAAiB,CAACJ,OAAO,EAAEE,OAAO,EAAEC,YAAY,CAAC;EAEtE,MAAME,OAAO,GAAG,IAAIC,YAAY,CAACb,SAAS,CAACM,MAAM,CAAC;EAClD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,eAAe,EAAE,EAAES,CAAC,EAAE;IACxC,MAAMC,CAAC,GAAGR,OAAO,CAACO,CAAC,CAAC;IACpB,MAAME,CAAC,GAAGP,OAAO,CAACK,CAAC,CAAC;IACpB,MAAMG,CAAC,GAAGP,YAAY,CAACI,CAAC,CAAC;IAEzB,MAAMI,GAAG,GAAGvB,UAAU,CAACwB,IAAI,CAAClB,SAAS,CAACmB,IAAI,EAAEnB,SAAS,CAACoB,IAAI,EAAEN,CAAC,GAAGnB,QAAQ,CAAC;IACzE,MAAM0B,GAAG,GAAG3B,UAAU,CAACwB,IAAI,CAAClB,SAAS,CAACsB,KAAK,EAAEtB,SAAS,CAACuB,KAAK,EAAER,CAAC,GAAGpB,QAAQ,CAAC;IAC3E,MAAM6B,GAAG,GAAG9B,UAAU,CAACwB,IAAI,CAACjB,aAAa,EAAEC,aAAa,EAAEc,CAAC,GAAGrB,QAAQ,CAAC;IAEvE,MAAM8B,YAAY,GAAGhC,YAAY,CAACiC,WAAW,CAC3CT,GAAG,EACHI,GAAG,EACHG,GAAG,EACH5B,qBACF,CAAC;IACD,MAAM+B,eAAe,GAAGxB,SAAS,CAACyB,uBAAuB,CACvDH,YAAY,EACZ5B,sBACF,CAAC;IACDL,UAAU,CAACqC,IAAI,CAACF,eAAe,EAAEhB,OAAO,EAAEE,CAAC,GAAG,CAAC,CAAC;EAClD;EACA,OAAOF,OAAO;AAChB;AACA,eAAeb,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}