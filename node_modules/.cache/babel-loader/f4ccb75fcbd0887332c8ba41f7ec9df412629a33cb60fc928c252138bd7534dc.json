{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport AdditiveBlend from \"../Shaders/PostProcessStages/AdditiveBlend.js\";\nimport BrightPass from \"../Shaders/PostProcessStages/BrightPass.js\";\nimport GaussianBlur1D from \"../Shaders/PostProcessStages/GaussianBlur1D.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport PostProcessStage from \"./PostProcessStage.js\";\nimport PostProcessStageComposite from \"./PostProcessStageComposite.js\";\nimport PostProcessStageSampleMode from \"./PostProcessStageSampleMode.js\";\nimport PostProcessStageTextureCache from \"./PostProcessStageTextureCache.js\";\nimport SceneFramebuffer from \"./SceneFramebuffer.js\";\nfunction SunPostProcess() {\n  this._sceneFramebuffer = new SceneFramebuffer();\n  const scale = 0.125;\n  const stages = new Array(6);\n  stages[0] = new PostProcessStage({\n    fragmentShader: PassThrough,\n    textureScale: scale,\n    forcePowerOfTwo: true,\n    sampleMode: PostProcessStageSampleMode.LINEAR\n  });\n  const brightPass = stages[1] = new PostProcessStage({\n    fragmentShader: BrightPass,\n    uniforms: {\n      avgLuminance: 0.5,\n      // A guess at the average luminance across the entire scene\n      threshold: 0.25,\n      offset: 0.1\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true\n  });\n  const that = this;\n  this._delta = 1.0;\n  this._sigma = 2.0;\n  this._blurStep = new Cartesian2();\n  stages[2] = new PostProcessStage({\n    fragmentShader: GaussianBlur1D,\n    uniforms: {\n      step: function () {\n        that._blurStep.x = that._blurStep.y = 1.0 / brightPass.outputTexture.width;\n        return that._blurStep;\n      },\n      delta: function () {\n        return that._delta;\n      },\n      sigma: function () {\n        return that._sigma;\n      },\n      direction: 0.0\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true\n  });\n  stages[3] = new PostProcessStage({\n    fragmentShader: GaussianBlur1D,\n    uniforms: {\n      step: function () {\n        that._blurStep.x = that._blurStep.y = 1.0 / brightPass.outputTexture.width;\n        return that._blurStep;\n      },\n      delta: function () {\n        return that._delta;\n      },\n      sigma: function () {\n        return that._sigma;\n      },\n      direction: 1.0\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true\n  });\n  stages[4] = new PostProcessStage({\n    fragmentShader: PassThrough,\n    sampleMode: PostProcessStageSampleMode.LINEAR\n  });\n  this._uCenter = new Cartesian2();\n  this._uRadius = undefined;\n  stages[5] = new PostProcessStage({\n    fragmentShader: AdditiveBlend,\n    uniforms: {\n      center: function () {\n        return that._uCenter;\n      },\n      radius: function () {\n        return that._uRadius;\n      },\n      colorTexture2: function () {\n        return that._sceneFramebuffer.framebuffer.getColorTexture(0);\n      }\n    }\n  });\n  this._stages = new PostProcessStageComposite({\n    stages: stages\n  });\n  const textureCache = new PostProcessStageTextureCache(this);\n  const length = stages.length;\n  for (let i = 0; i < length; ++i) {\n    stages[i]._textureCache = textureCache;\n  }\n  this._textureCache = textureCache;\n  this.length = stages.length;\n}\nSunPostProcess.prototype.get = function (index) {\n  return this._stages.get(index);\n};\nSunPostProcess.prototype.getStageByName = function (name) {\n  const length = this._stages.length;\n  for (let i = 0; i < length; ++i) {\n    const stage = this._stages.get(i);\n    if (stage.name === name) {\n      return stage;\n    }\n  }\n  return undefined;\n};\nconst sunPositionECScratch = new Cartesian4();\nconst sunPositionWCScratch = new Cartesian2();\nconst sizeScratch = new Cartesian2();\nconst postProcessMatrix4Scratch = new Matrix4();\nfunction updateSunPosition(postProcess, context, viewport) {\n  const us = context.uniformState;\n  const sunPosition = us.sunPositionWC;\n  const viewMatrix = us.view;\n  const viewProjectionMatrix = us.viewProjection;\n  const projectionMatrix = us.projection;\n\n  // create up sampled render state\n  let viewportTransformation = Matrix4.computeViewportTransformation(viewport, 0.0, 1.0, postProcessMatrix4Scratch);\n  const sunPositionEC = Matrix4.multiplyByPoint(viewMatrix, sunPosition, sunPositionECScratch);\n  let sunPositionWC = Transforms.pointToGLWindowCoordinates(viewProjectionMatrix, viewportTransformation, sunPosition, sunPositionWCScratch);\n  sunPositionEC.x += CesiumMath.SOLAR_RADIUS;\n  const limbWC = Transforms.pointToGLWindowCoordinates(projectionMatrix, viewportTransformation, sunPositionEC, sunPositionEC);\n  const sunSize = Cartesian2.magnitude(Cartesian2.subtract(limbWC, sunPositionWC, limbWC)) * 30.0 * 2.0;\n  const size = sizeScratch;\n  size.x = sunSize;\n  size.y = sunSize;\n  postProcess._uCenter = Cartesian2.clone(sunPositionWC, postProcess._uCenter);\n  postProcess._uRadius = Math.max(size.x, size.y) * 0.15;\n  const width = context.drawingBufferWidth;\n  const height = context.drawingBufferHeight;\n  const stages = postProcess._stages;\n  const firstStage = stages.get(0);\n  const downSampleWidth = firstStage.outputTexture.width;\n  const downSampleHeight = firstStage.outputTexture.height;\n  const downSampleViewport = new BoundingRectangle();\n  downSampleViewport.width = downSampleWidth;\n  downSampleViewport.height = downSampleHeight;\n\n  // create down sampled render state\n  viewportTransformation = Matrix4.computeViewportTransformation(downSampleViewport, 0.0, 1.0, postProcessMatrix4Scratch);\n  sunPositionWC = Transforms.pointToGLWindowCoordinates(viewProjectionMatrix, viewportTransformation, sunPosition, sunPositionWCScratch);\n  size.x *= downSampleWidth / width;\n  size.y *= downSampleHeight / height;\n  const scissorRectangle = firstStage.scissorRectangle;\n  scissorRectangle.x = Math.max(sunPositionWC.x - size.x * 0.5, 0.0);\n  scissorRectangle.y = Math.max(sunPositionWC.y - size.y * 0.5, 0.0);\n  scissorRectangle.width = Math.min(size.x, width);\n  scissorRectangle.height = Math.min(size.y, height);\n  for (let i = 1; i < 4; ++i) {\n    BoundingRectangle.clone(scissorRectangle, stages.get(i).scissorRectangle);\n  }\n}\nSunPostProcess.prototype.clear = function (context, passState, clearColor) {\n  this._sceneFramebuffer.clear(context, passState, clearColor);\n  this._textureCache.clear(context);\n};\nSunPostProcess.prototype.update = function (passState) {\n  const context = passState.context;\n  const viewport = passState.viewport;\n  const sceneFramebuffer = this._sceneFramebuffer;\n  sceneFramebuffer.update(context, viewport);\n  const framebuffer = sceneFramebuffer.framebuffer;\n  this._textureCache.update(context);\n  this._stages.update(context, false);\n  updateSunPosition(this, context, viewport);\n  return framebuffer;\n};\nSunPostProcess.prototype.execute = function (context) {\n  const colorTexture = this._sceneFramebuffer.framebuffer.getColorTexture(0);\n  const stages = this._stages;\n  const length = stages.length;\n  stages.get(0).execute(context, colorTexture);\n  for (let i = 1; i < length; ++i) {\n    stages.get(i).execute(context, stages.get(i - 1).outputTexture);\n  }\n};\nSunPostProcess.prototype.copy = function (context, framebuffer) {\n  if (!defined(this._copyColorCommand)) {\n    const that = this;\n    this._copyColorCommand = context.createViewportQuadCommand(PassThrough, {\n      uniformMap: {\n        colorTexture: function () {\n          return that._stages.get(that._stages.length - 1).outputTexture;\n        }\n      },\n      owner: this\n    });\n  }\n  this._copyColorCommand.framebuffer = framebuffer;\n  this._copyColorCommand.execute(context);\n};\nSunPostProcess.prototype.isDestroyed = function () {\n  return false;\n};\nSunPostProcess.prototype.destroy = function () {\n  this._textureCache.destroy();\n  this._stages.destroy();\n  return destroyObject(this);\n};\nexport default SunPostProcess;","map":{"version":3,"names":["BoundingRectangle","Cartesian2","Cartesian4","defined","destroyObject","CesiumMath","Matrix4","Transforms","AdditiveBlend","BrightPass","GaussianBlur1D","PassThrough","PostProcessStage","PostProcessStageComposite","PostProcessStageSampleMode","PostProcessStageTextureCache","SceneFramebuffer","SunPostProcess","_sceneFramebuffer","scale","stages","Array","fragmentShader","textureScale","forcePowerOfTwo","sampleMode","LINEAR","brightPass","uniforms","avgLuminance","threshold","offset","that","_delta","_sigma","_blurStep","step","x","y","outputTexture","width","delta","sigma","direction","_uCenter","_uRadius","undefined","center","radius","colorTexture2","framebuffer","getColorTexture","_stages","textureCache","length","i","_textureCache","prototype","get","index","getStageByName","name","stage","sunPositionECScratch","sunPositionWCScratch","sizeScratch","postProcessMatrix4Scratch","updateSunPosition","postProcess","context","viewport","us","uniformState","sunPosition","sunPositionWC","viewMatrix","view","viewProjectionMatrix","viewProjection","projectionMatrix","projection","viewportTransformation","computeViewportTransformation","sunPositionEC","multiplyByPoint","pointToGLWindowCoordinates","SOLAR_RADIUS","limbWC","sunSize","magnitude","subtract","size","clone","Math","max","drawingBufferWidth","height","drawingBufferHeight","firstStage","downSampleWidth","downSampleHeight","downSampleViewport","scissorRectangle","min","clear","passState","clearColor","update","sceneFramebuffer","execute","colorTexture","copy","_copyColorCommand","createViewportQuadCommand","uniformMap","owner","isDestroyed","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/SunPostProcess.js"],"sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport AdditiveBlend from \"../Shaders/PostProcessStages/AdditiveBlend.js\";\nimport BrightPass from \"../Shaders/PostProcessStages/BrightPass.js\";\nimport GaussianBlur1D from \"../Shaders/PostProcessStages/GaussianBlur1D.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport PostProcessStage from \"./PostProcessStage.js\";\nimport PostProcessStageComposite from \"./PostProcessStageComposite.js\";\nimport PostProcessStageSampleMode from \"./PostProcessStageSampleMode.js\";\nimport PostProcessStageTextureCache from \"./PostProcessStageTextureCache.js\";\nimport SceneFramebuffer from \"./SceneFramebuffer.js\";\n\nfunction SunPostProcess() {\n  this._sceneFramebuffer = new SceneFramebuffer();\n\n  const scale = 0.125;\n  const stages = new Array(6);\n\n  stages[0] = new PostProcessStage({\n    fragmentShader: PassThrough,\n    textureScale: scale,\n    forcePowerOfTwo: true,\n    sampleMode: PostProcessStageSampleMode.LINEAR,\n  });\n\n  const brightPass = (stages[1] = new PostProcessStage({\n    fragmentShader: BrightPass,\n    uniforms: {\n      avgLuminance: 0.5, // A guess at the average luminance across the entire scene\n      threshold: 0.25,\n      offset: 0.1,\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true,\n  }));\n\n  const that = this;\n  this._delta = 1.0;\n  this._sigma = 2.0;\n  this._blurStep = new Cartesian2();\n\n  stages[2] = new PostProcessStage({\n    fragmentShader: GaussianBlur1D,\n    uniforms: {\n      step: function () {\n        that._blurStep.x = that._blurStep.y =\n          1.0 / brightPass.outputTexture.width;\n        return that._blurStep;\n      },\n      delta: function () {\n        return that._delta;\n      },\n      sigma: function () {\n        return that._sigma;\n      },\n      direction: 0.0,\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true,\n  });\n\n  stages[3] = new PostProcessStage({\n    fragmentShader: GaussianBlur1D,\n    uniforms: {\n      step: function () {\n        that._blurStep.x = that._blurStep.y =\n          1.0 / brightPass.outputTexture.width;\n        return that._blurStep;\n      },\n      delta: function () {\n        return that._delta;\n      },\n      sigma: function () {\n        return that._sigma;\n      },\n      direction: 1.0,\n    },\n    textureScale: scale,\n    forcePowerOfTwo: true,\n  });\n\n  stages[4] = new PostProcessStage({\n    fragmentShader: PassThrough,\n    sampleMode: PostProcessStageSampleMode.LINEAR,\n  });\n\n  this._uCenter = new Cartesian2();\n  this._uRadius = undefined;\n\n  stages[5] = new PostProcessStage({\n    fragmentShader: AdditiveBlend,\n    uniforms: {\n      center: function () {\n        return that._uCenter;\n      },\n      radius: function () {\n        return that._uRadius;\n      },\n      colorTexture2: function () {\n        return that._sceneFramebuffer.framebuffer.getColorTexture(0);\n      },\n    },\n  });\n\n  this._stages = new PostProcessStageComposite({\n    stages: stages,\n  });\n\n  const textureCache = new PostProcessStageTextureCache(this);\n  const length = stages.length;\n  for (let i = 0; i < length; ++i) {\n    stages[i]._textureCache = textureCache;\n  }\n\n  this._textureCache = textureCache;\n  this.length = stages.length;\n}\n\nSunPostProcess.prototype.get = function (index) {\n  return this._stages.get(index);\n};\n\nSunPostProcess.prototype.getStageByName = function (name) {\n  const length = this._stages.length;\n  for (let i = 0; i < length; ++i) {\n    const stage = this._stages.get(i);\n    if (stage.name === name) {\n      return stage;\n    }\n  }\n  return undefined;\n};\n\nconst sunPositionECScratch = new Cartesian4();\nconst sunPositionWCScratch = new Cartesian2();\nconst sizeScratch = new Cartesian2();\nconst postProcessMatrix4Scratch = new Matrix4();\n\nfunction updateSunPosition(postProcess, context, viewport) {\n  const us = context.uniformState;\n  const sunPosition = us.sunPositionWC;\n  const viewMatrix = us.view;\n  const viewProjectionMatrix = us.viewProjection;\n  const projectionMatrix = us.projection;\n\n  // create up sampled render state\n  let viewportTransformation = Matrix4.computeViewportTransformation(\n    viewport,\n    0.0,\n    1.0,\n    postProcessMatrix4Scratch,\n  );\n  const sunPositionEC = Matrix4.multiplyByPoint(\n    viewMatrix,\n    sunPosition,\n    sunPositionECScratch,\n  );\n  let sunPositionWC = Transforms.pointToGLWindowCoordinates(\n    viewProjectionMatrix,\n    viewportTransformation,\n    sunPosition,\n    sunPositionWCScratch,\n  );\n\n  sunPositionEC.x += CesiumMath.SOLAR_RADIUS;\n  const limbWC = Transforms.pointToGLWindowCoordinates(\n    projectionMatrix,\n    viewportTransformation,\n    sunPositionEC,\n    sunPositionEC,\n  );\n  const sunSize =\n    Cartesian2.magnitude(Cartesian2.subtract(limbWC, sunPositionWC, limbWC)) *\n    30.0 *\n    2.0;\n\n  const size = sizeScratch;\n  size.x = sunSize;\n  size.y = sunSize;\n\n  postProcess._uCenter = Cartesian2.clone(sunPositionWC, postProcess._uCenter);\n  postProcess._uRadius = Math.max(size.x, size.y) * 0.15;\n\n  const width = context.drawingBufferWidth;\n  const height = context.drawingBufferHeight;\n\n  const stages = postProcess._stages;\n  const firstStage = stages.get(0);\n\n  const downSampleWidth = firstStage.outputTexture.width;\n  const downSampleHeight = firstStage.outputTexture.height;\n\n  const downSampleViewport = new BoundingRectangle();\n  downSampleViewport.width = downSampleWidth;\n  downSampleViewport.height = downSampleHeight;\n\n  // create down sampled render state\n  viewportTransformation = Matrix4.computeViewportTransformation(\n    downSampleViewport,\n    0.0,\n    1.0,\n    postProcessMatrix4Scratch,\n  );\n  sunPositionWC = Transforms.pointToGLWindowCoordinates(\n    viewProjectionMatrix,\n    viewportTransformation,\n    sunPosition,\n    sunPositionWCScratch,\n  );\n\n  size.x *= downSampleWidth / width;\n  size.y *= downSampleHeight / height;\n\n  const scissorRectangle = firstStage.scissorRectangle;\n  scissorRectangle.x = Math.max(sunPositionWC.x - size.x * 0.5, 0.0);\n  scissorRectangle.y = Math.max(sunPositionWC.y - size.y * 0.5, 0.0);\n  scissorRectangle.width = Math.min(size.x, width);\n  scissorRectangle.height = Math.min(size.y, height);\n\n  for (let i = 1; i < 4; ++i) {\n    BoundingRectangle.clone(scissorRectangle, stages.get(i).scissorRectangle);\n  }\n}\n\nSunPostProcess.prototype.clear = function (context, passState, clearColor) {\n  this._sceneFramebuffer.clear(context, passState, clearColor);\n  this._textureCache.clear(context);\n};\n\nSunPostProcess.prototype.update = function (passState) {\n  const context = passState.context;\n  const viewport = passState.viewport;\n\n  const sceneFramebuffer = this._sceneFramebuffer;\n  sceneFramebuffer.update(context, viewport);\n  const framebuffer = sceneFramebuffer.framebuffer;\n\n  this._textureCache.update(context);\n  this._stages.update(context, false);\n\n  updateSunPosition(this, context, viewport);\n\n  return framebuffer;\n};\n\nSunPostProcess.prototype.execute = function (context) {\n  const colorTexture = this._sceneFramebuffer.framebuffer.getColorTexture(0);\n  const stages = this._stages;\n  const length = stages.length;\n  stages.get(0).execute(context, colorTexture);\n  for (let i = 1; i < length; ++i) {\n    stages.get(i).execute(context, stages.get(i - 1).outputTexture);\n  }\n};\n\nSunPostProcess.prototype.copy = function (context, framebuffer) {\n  if (!defined(this._copyColorCommand)) {\n    const that = this;\n    this._copyColorCommand = context.createViewportQuadCommand(PassThrough, {\n      uniformMap: {\n        colorTexture: function () {\n          return that._stages.get(that._stages.length - 1).outputTexture;\n        },\n      },\n      owner: this,\n    });\n  }\n\n  this._copyColorCommand.framebuffer = framebuffer;\n  this._copyColorCommand.execute(context);\n};\n\nSunPostProcess.prototype.isDestroyed = function () {\n  return false;\n};\n\nSunPostProcess.prototype.destroy = function () {\n  this._textureCache.destroy();\n  this._stages.destroy();\n  return destroyObject(this);\n};\nexport default SunPostProcess;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}