{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Context/LangContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// LangContext.js\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LangContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport function LangProvider({\n  children\n}) {\n  _s();\n  // Manage the current language state (default to English)\n  const [language, setLanguage] = useState('en');\n\n  // Toggle or set language\n  function changeLanguage(lang) {\n    setLanguage(lang);\n  }\n\n  // Provide the current language and updater function to consumers\n  return /*#__PURE__*/_jsxDEV(LangContext.Provider, {\n    value: {\n      language,\n      changeLanguage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom hook for easy usage in components\n_s(LangProvider, \"fVUtOCD1O58HgvMjnE8lxRQa0QA=\");\n_c = LangProvider;\nexport function useLang() {\n  _s2();\n  return useContext(LangContext);\n}\n_s2(useLang, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"LangProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","LangContext","LangProvider","children","_s","language","setLanguage","changeLanguage","lang","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLang","_s2","$RefreshReg$"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Context/LangContext.js"],"sourcesContent":["// LangContext.js\nimport React, { createContext, useState, useContext } from 'react';\n\nconst LangContext = createContext();\n\n// Provider component\nexport function LangProvider({ children }) {\n  // Manage the current language state (default to English)\n  const [language, setLanguage] = useState('en');\n\n  // Toggle or set language\n  function changeLanguage(lang) {\n    setLanguage(lang);\n  }\n\n  // Provide the current language and updater function to consumers\n  return (\n    <LangContext.Provider value={{ language, changeLanguage }}>\n      {children}\n    </LangContext.Provider>\n  );\n}\n\n// Custom hook for easy usage in components\nexport function useLang() {\n  return useContext(LangContext);\n}\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,SAASM,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA,SAASU,cAAcA,CAACC,IAAI,EAAE;IAC5BF,WAAW,CAACE,IAAI,CAAC;EACnB;;EAEA;EACA,oBACER,OAAA,CAACC,WAAW,CAACQ,QAAQ;IAACC,KAAK,EAAE;MAAEL,QAAQ;MAAEE;IAAe,CAAE;IAAAJ,QAAA,EACvDA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;;AAEA;AAAAV,EAAA,CAjBgBF,YAAY;AAAAa,EAAA,GAAZb,YAAY;AAkB5B,OAAO,SAASc,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,OAAOnB,UAAU,CAACG,WAAW,CAAC;AAChC;AAACgB,GAAA,CAFeD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}