{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport defined from \"./defined.js\";\n\n/**\n * @private\n */\nconst VerticalExaggeration = {};\n\n/**\n * Scales a height relative to an offset.\n *\n * @param {number} height The height.\n * @param {number} scale A scalar used to exaggerate the terrain. If the value is 1.0 there will be no effect.\n * @param {number} relativeHeight The height relative to which terrain is exaggerated. If the value is 0.0 terrain will be exaggerated relative to the ellipsoid surface.\n */\nVerticalExaggeration.getHeight = function (height, scale, relativeHeight) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!Number.isFinite(scale)) {\n    throw new DeveloperError(\"scale must be a finite number.\");\n  }\n  if (!Number.isFinite(relativeHeight)) {\n    throw new DeveloperError(\"relativeHeight must be a finite number.\");\n  }\n  //>>includeEnd('debug')\n  return (height - relativeHeight) * scale + relativeHeight;\n};\nconst scratchCartographic = new Cartographic();\n\n/**\n * Scales a position by exaggeration.\n *\n * @param {Cartesian3} position The position.\n * @param {Ellipsoid} ellipsoid The ellipsoid.\n * @param {number} verticalExaggeration A scalar used to exaggerate the terrain. If the value is 1.0 there will be no effect.\n * @param {number} verticalExaggerationRelativeHeight The height relative to which terrain is exaggerated. If the value is 0.0 terrain will be exaggerated relative to the ellipsoid surface.\n * @param {Cartesian3} [result] The object onto which to store the result.\n */\nVerticalExaggeration.getPosition = function (position, ellipsoid, verticalExaggeration, verticalExaggerationRelativeHeight, result) {\n  const cartographic = ellipsoid.cartesianToCartographic(position, scratchCartographic);\n  // If the position is too near the center of the ellipsoid, exaggeration is undefined.\n  if (!defined(cartographic)) {\n    return Cartesian3.clone(position, result);\n  }\n  const newHeight = VerticalExaggeration.getHeight(cartographic.height, verticalExaggeration, verticalExaggerationRelativeHeight);\n  return Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, newHeight, ellipsoid, result);\n};\nexport default VerticalExaggeration;","map":{"version":3,"names":["Cartesian3","Cartographic","DeveloperError","defined","VerticalExaggeration","getHeight","height","scale","relativeHeight","Number","isFinite","scratchCartographic","getPosition","position","ellipsoid","verticalExaggeration","verticalExaggerationRelativeHeight","result","cartographic","cartesianToCartographic","clone","newHeight","fromRadians","longitude","latitude"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/VerticalExaggeration.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport defined from \"./defined.js\";\n\n/**\n * @private\n */\nconst VerticalExaggeration = {};\n\n/**\n * Scales a height relative to an offset.\n *\n * @param {number} height The height.\n * @param {number} scale A scalar used to exaggerate the terrain. If the value is 1.0 there will be no effect.\n * @param {number} relativeHeight The height relative to which terrain is exaggerated. If the value is 0.0 terrain will be exaggerated relative to the ellipsoid surface.\n */\nVerticalExaggeration.getHeight = function (height, scale, relativeHeight) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!Number.isFinite(scale)) {\n    throw new DeveloperError(\"scale must be a finite number.\");\n  }\n  if (!Number.isFinite(relativeHeight)) {\n    throw new DeveloperError(\"relativeHeight must be a finite number.\");\n  }\n  //>>includeEnd('debug')\n  return (height - relativeHeight) * scale + relativeHeight;\n};\n\nconst scratchCartographic = new Cartographic();\n\n/**\n * Scales a position by exaggeration.\n *\n * @param {Cartesian3} position The position.\n * @param {Ellipsoid} ellipsoid The ellipsoid.\n * @param {number} verticalExaggeration A scalar used to exaggerate the terrain. If the value is 1.0 there will be no effect.\n * @param {number} verticalExaggerationRelativeHeight The height relative to which terrain is exaggerated. If the value is 0.0 terrain will be exaggerated relative to the ellipsoid surface.\n * @param {Cartesian3} [result] The object onto which to store the result.\n */\nVerticalExaggeration.getPosition = function (\n  position,\n  ellipsoid,\n  verticalExaggeration,\n  verticalExaggerationRelativeHeight,\n  result,\n) {\n  const cartographic = ellipsoid.cartesianToCartographic(\n    position,\n    scratchCartographic,\n  );\n  // If the position is too near the center of the ellipsoid, exaggeration is undefined.\n  if (!defined(cartographic)) {\n    return Cartesian3.clone(position, result);\n  }\n  const newHeight = VerticalExaggeration.getHeight(\n    cartographic.height,\n    verticalExaggeration,\n    verticalExaggerationRelativeHeight,\n  );\n  return Cartesian3.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    newHeight,\n    ellipsoid,\n    result,\n  );\n};\n\nexport default VerticalExaggeration;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,iBAAiB;AACxC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,cAAc,MAAM,qBAAqB;AAChD,OAAOC,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,CAAC,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,oBAAoB,CAACC,SAAS,GAAG,UAAUC,MAAM,EAAEC,KAAK,EAAEC,cAAc,EAAE;EACxE;EACA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACH,KAAK,CAAC,EAAE;IAC3B,MAAM,IAAIL,cAAc,CAAC,gCAAgC,CAAC;EAC5D;EACA,IAAI,CAACO,MAAM,CAACC,QAAQ,CAACF,cAAc,CAAC,EAAE;IACpC,MAAM,IAAIN,cAAc,CAAC,yCAAyC,CAAC;EACrE;EACA;EACA,OAAO,CAACI,MAAM,GAAGE,cAAc,IAAID,KAAK,GAAGC,cAAc;AAC3D,CAAC;AAED,MAAMG,mBAAmB,GAAG,IAAIV,YAAY,CAAC,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,oBAAoB,CAACQ,WAAW,GAAG,UACjCC,QAAQ,EACRC,SAAS,EACTC,oBAAoB,EACpBC,kCAAkC,EAClCC,MAAM,EACN;EACA,MAAMC,YAAY,GAAGJ,SAAS,CAACK,uBAAuB,CACpDN,QAAQ,EACRF,mBACF,CAAC;EACD;EACA,IAAI,CAACR,OAAO,CAACe,YAAY,CAAC,EAAE;IAC1B,OAAOlB,UAAU,CAACoB,KAAK,CAACP,QAAQ,EAAEI,MAAM,CAAC;EAC3C;EACA,MAAMI,SAAS,GAAGjB,oBAAoB,CAACC,SAAS,CAC9Ca,YAAY,CAACZ,MAAM,EACnBS,oBAAoB,EACpBC,kCACF,CAAC;EACD,OAAOhB,UAAU,CAACsB,WAAW,CAC3BJ,YAAY,CAACK,SAAS,EACtBL,YAAY,CAACM,QAAQ,EACrBH,SAAS,EACTP,SAAS,EACTG,MACF,CAAC;AACH,CAAC;AAED,eAAeb,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}