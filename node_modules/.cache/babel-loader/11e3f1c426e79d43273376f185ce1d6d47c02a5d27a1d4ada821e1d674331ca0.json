{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport QuadtreeTileLoadState from \"./QuadtreeTileLoadState.js\";\nimport TileSelectionResult from \"./TileSelectionResult.js\";\n\n/**\n * A single tile in a {@link QuadtreePrimitive}.\n *\n * @alias QuadtreeTile\n * @constructor\n * @private\n *\n * @param {number} options.level The level of the tile in the quadtree.\n * @param {number} options.x The X coordinate of the tile in the quadtree.  0 is the westernmost tile.\n * @param {number} options.y The Y coordinate of the tile in the quadtree.  0 is the northernmost tile.\n * @param {TilingScheme} options.tilingScheme The tiling scheme in which this tile exists.\n * @param {QuadtreeTile} [options.parent] This tile's parent, or undefined if this is a root tile.\n */\nfunction QuadtreeTile(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options)) {\n    throw new DeveloperError(\"options is required.\");\n  }\n  if (!defined(options.x)) {\n    throw new DeveloperError(\"options.x is required.\");\n  } else if (!defined(options.y)) {\n    throw new DeveloperError(\"options.y is required.\");\n  } else if (options.x < 0 || options.y < 0) {\n    throw new DeveloperError(\"options.x and options.y must be greater than or equal to zero.\");\n  }\n  if (!defined(options.level)) {\n    throw new DeveloperError(\"options.level is required and must be greater than or equal to zero.\");\n  }\n  if (!defined(options.tilingScheme)) {\n    throw new DeveloperError(\"options.tilingScheme is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._tilingScheme = options.tilingScheme;\n  this._x = options.x;\n  this._y = options.y;\n  this._level = options.level;\n  this._parent = options.parent;\n  this._rectangle = this._tilingScheme.tileXYToRectangle(this._x, this._y, this._level);\n  this._southwestChild = undefined;\n  this._southeastChild = undefined;\n  this._northwestChild = undefined;\n  this._northeastChild = undefined;\n\n  // TileReplacementQueue gets/sets these private properties.\n  this.replacementPrevious = undefined;\n  this.replacementNext = undefined;\n\n  // The distance from the camera to this tile, updated when the tile is selected\n  // for rendering.  We can get rid of this if we have a better way to sort by\n  // distance - for example, by using the natural ordering of a quadtree.\n  // QuadtreePrimitive gets/sets this private property.\n  this._distance = 0.0;\n  this._loadPriority = 0.0;\n  this._customData = [];\n  this._frameUpdated = undefined;\n  this._lastSelectionResult = TileSelectionResult.NONE;\n  this._lastSelectionResultFrame = undefined;\n  this._loadedCallbacks = {};\n\n  /**\n   * Gets or sets the current state of the tile in the tile load pipeline.\n   * @type {QuadtreeTileLoadState}\n   * @default {@link QuadtreeTileLoadState.START}\n   */\n  this.state = QuadtreeTileLoadState.START;\n\n  /**\n   * Gets or sets a value indicating whether or not the tile is currently renderable.\n   * @type {boolean}\n   * @default false\n   */\n  this.renderable = false;\n\n  /**\n   * Gets or set a value indicating whether or not the tile was entirely upsampled from its\n   * parent tile.  If all four children of a parent tile were upsampled from the parent,\n   * we will render the parent instead of the children even if the LOD indicates that\n   * the children would be preferable.\n   * @type {boolean}\n   * @default false\n   */\n  this.upsampledFromParent = false;\n\n  /**\n   * Gets or sets the additional data associated with this tile.  The exact content is specific to the\n   * {@link QuadtreeTileProvider}.\n   * @type {object}\n   * @default undefined\n   */\n  this.data = undefined;\n}\n\n/**\n * Creates a rectangular set of tiles for level of detail zero, the coarsest, least detailed level.\n *\n * @memberof QuadtreeTile\n *\n * @param {TilingScheme} tilingScheme The tiling scheme for which the tiles are to be created.\n * @returns {QuadtreeTile[]} An array containing the tiles at level of detail zero, starting with the\n * tile in the northwest corner and followed by the tile (if any) to its east.\n */\nQuadtreeTile.createLevelZeroTiles = function (tilingScheme) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(tilingScheme)) {\n    throw new DeveloperError(\"tilingScheme is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const numberOfLevelZeroTilesX = tilingScheme.getNumberOfXTilesAtLevel(0);\n  const numberOfLevelZeroTilesY = tilingScheme.getNumberOfYTilesAtLevel(0);\n  const result = new Array(numberOfLevelZeroTilesX * numberOfLevelZeroTilesY);\n  let index = 0;\n  for (let y = 0; y < numberOfLevelZeroTilesY; ++y) {\n    for (let x = 0; x < numberOfLevelZeroTilesX; ++x) {\n      result[index++] = new QuadtreeTile({\n        tilingScheme: tilingScheme,\n        x: x,\n        y: y,\n        level: 0\n      });\n    }\n  }\n  return result;\n};\nQuadtreeTile.prototype._updateCustomData = function (frameNumber, added, removed) {\n  let customData = this.customData;\n  let i;\n  let data;\n  let rectangle;\n  if (defined(added) && defined(removed)) {\n    customData = customData.filter(function (value) {\n      return removed.indexOf(value) === -1;\n    });\n    this._customData = customData;\n    rectangle = this._rectangle;\n    for (i = 0; i < added.length; ++i) {\n      data = added[i];\n      if (Rectangle.contains(rectangle, data.positionCartographic)) {\n        customData.push(data);\n      }\n    }\n    this._frameUpdated = frameNumber;\n  } else {\n    // interior or leaf tile, update from parent\n    const parent = this._parent;\n    if (defined(parent) && this._frameUpdated !== parent._frameUpdated) {\n      customData.length = 0;\n      rectangle = this._rectangle;\n      const parentCustomData = parent.customData;\n      for (i = 0; i < parentCustomData.length; ++i) {\n        data = parentCustomData[i];\n        if (Rectangle.contains(rectangle, data.positionCartographic)) {\n          customData.push(data);\n        }\n      }\n      this._frameUpdated = parent._frameUpdated;\n    }\n  }\n};\nObject.defineProperties(QuadtreeTile.prototype, {\n  /**\n   * Gets the tiling scheme used to tile the surface.\n   * @memberof QuadtreeTile.prototype\n   * @type {TilingScheme}\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n  /**\n   * Gets the tile X coordinate.\n   * @memberof QuadtreeTile.prototype\n   * @type {number}\n   */\n  x: {\n    get: function () {\n      return this._x;\n    }\n  },\n  /**\n   * Gets the tile Y coordinate.\n   * @memberof QuadtreeTile.prototype\n   * @type {number}\n   */\n  y: {\n    get: function () {\n      return this._y;\n    }\n  },\n  /**\n   * Gets the level-of-detail, where zero is the coarsest, least-detailed.\n   * @memberof QuadtreeTile.prototype\n   * @type {number}\n   */\n  level: {\n    get: function () {\n      return this._level;\n    }\n  },\n  /**\n   * Gets the parent tile of this tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  parent: {\n    get: function () {\n      return this._parent;\n    }\n  },\n  /**\n   * Gets the cartographic rectangle of the tile, with north, south, east and\n   * west properties in radians.\n   * @memberof QuadtreeTile.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    }\n  },\n  /**\n   * An array of tiles that is at the next level of the tile tree.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile[]}\n   */\n  children: {\n    get: function () {\n      return [this.northwestChild, this.northeastChild, this.southwestChild, this.southeastChild];\n    }\n  },\n  /**\n   * Gets the southwest child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  southwestChild: {\n    get: function () {\n      if (!defined(this._southwestChild)) {\n        this._southwestChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2,\n          y: this.y * 2 + 1,\n          level: this.level + 1,\n          parent: this\n        });\n      }\n      return this._southwestChild;\n    }\n  },\n  /**\n   * Gets the southeast child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  southeastChild: {\n    get: function () {\n      if (!defined(this._southeastChild)) {\n        this._southeastChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2 + 1,\n          y: this.y * 2 + 1,\n          level: this.level + 1,\n          parent: this\n        });\n      }\n      return this._southeastChild;\n    }\n  },\n  /**\n   * Gets the northwest child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  northwestChild: {\n    get: function () {\n      if (!defined(this._northwestChild)) {\n        this._northwestChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2,\n          y: this.y * 2,\n          level: this.level + 1,\n          parent: this\n        });\n      }\n      return this._northwestChild;\n    }\n  },\n  /**\n   * Gets the northeast child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  northeastChild: {\n    get: function () {\n      if (!defined(this._northeastChild)) {\n        this._northeastChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2 + 1,\n          y: this.y * 2,\n          level: this.level + 1,\n          parent: this\n        });\n      }\n      return this._northeastChild;\n    }\n  },\n  /**\n   * An array of objects associated with this tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {Array}\n   */\n  customData: {\n    get: function () {\n      return this._customData;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not this tile needs further loading.\n   * This property will return true if the {@link QuadtreeTile#state} is\n   * <code>START</code> or <code>LOADING</code>.\n   * @memberof QuadtreeTile.prototype\n   * @type {boolean}\n   */\n  needsLoading: {\n    get: function () {\n      return this.state < QuadtreeTileLoadState.DONE;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not this tile is eligible to be unloaded.\n   * Typically, a tile is ineligible to be unloaded while an asynchronous operation,\n   * such as a request for data, is in progress on it.  A tile will never be\n   * unloaded while it is needed for rendering, regardless of the value of this\n   * property.  If {@link QuadtreeTile#data} is defined and has an\n   * <code>eligibleForUnloading</code> property, the value of that property is returned.\n   * Otherwise, this property returns true.\n   * @memberof QuadtreeTile.prototype\n   * @type {boolean}\n   */\n  eligibleForUnloading: {\n    get: function () {\n      let result = true;\n      if (defined(this.data)) {\n        result = this.data.eligibleForUnloading;\n        if (!defined(result)) {\n          result = true;\n        }\n      }\n      return result;\n    }\n  }\n});\nQuadtreeTile.prototype.findLevelZeroTile = function (levelZeroTiles, x, y) {\n  const xTiles = this.tilingScheme.getNumberOfXTilesAtLevel(0);\n  if (x < 0) {\n    x += xTiles;\n  } else if (x >= xTiles) {\n    x -= xTiles;\n  }\n  if (y < 0 || y >= this.tilingScheme.getNumberOfYTilesAtLevel(0)) {\n    return undefined;\n  }\n  return levelZeroTiles.filter(function (tile) {\n    return tile.x === x && tile.y === y;\n  })[0];\n};\nQuadtreeTile.prototype.findTileToWest = function (levelZeroTiles) {\n  const parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x - 1, this.y);\n  }\n  if (parent.southeastChild === this) {\n    return parent.southwestChild;\n  } else if (parent.northeastChild === this) {\n    return parent.northwestChild;\n  }\n  const westOfParent = parent.findTileToWest(levelZeroTiles);\n  if (westOfParent === undefined) {\n    return undefined;\n  } else if (parent.southwestChild === this) {\n    return westOfParent.southeastChild;\n  }\n  return westOfParent.northeastChild;\n};\nQuadtreeTile.prototype.findTileToEast = function (levelZeroTiles) {\n  const parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x + 1, this.y);\n  }\n  if (parent.southwestChild === this) {\n    return parent.southeastChild;\n  } else if (parent.northwestChild === this) {\n    return parent.northeastChild;\n  }\n  const eastOfParent = parent.findTileToEast(levelZeroTiles);\n  if (eastOfParent === undefined) {\n    return undefined;\n  } else if (parent.southeastChild === this) {\n    return eastOfParent.southwestChild;\n  }\n  return eastOfParent.northwestChild;\n};\nQuadtreeTile.prototype.findTileToSouth = function (levelZeroTiles) {\n  const parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x, this.y + 1);\n  }\n  if (parent.northwestChild === this) {\n    return parent.southwestChild;\n  } else if (parent.northeastChild === this) {\n    return parent.southeastChild;\n  }\n  const southOfParent = parent.findTileToSouth(levelZeroTiles);\n  if (southOfParent === undefined) {\n    return undefined;\n  } else if (parent.southwestChild === this) {\n    return southOfParent.northwestChild;\n  }\n  return southOfParent.northeastChild;\n};\nQuadtreeTile.prototype.findTileToNorth = function (levelZeroTiles) {\n  const parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x, this.y - 1);\n  }\n  if (parent.southwestChild === this) {\n    return parent.northwestChild;\n  } else if (parent.southeastChild === this) {\n    return parent.northeastChild;\n  }\n  const northOfParent = parent.findTileToNorth(levelZeroTiles);\n  if (northOfParent === undefined) {\n    return undefined;\n  } else if (parent.northwestChild === this) {\n    return northOfParent.southwestChild;\n  }\n  return northOfParent.southeastChild;\n};\n\n/**\n * Frees the resources associated with this tile and returns it to the <code>START</code>\n * {@link QuadtreeTileLoadState}.  If the {@link QuadtreeTile#data} property is defined and it\n * has a <code>freeResources</code> method, the method will be invoked.\n *\n * @memberof QuadtreeTile\n */\nQuadtreeTile.prototype.freeResources = function () {\n  this.state = QuadtreeTileLoadState.START;\n  this.renderable = false;\n  this.upsampledFromParent = false;\n  if (defined(this.data) && defined(this.data.freeResources)) {\n    this.data.freeResources();\n  }\n  freeTile(this._southwestChild);\n  this._southwestChild = undefined;\n  freeTile(this._southeastChild);\n  this._southeastChild = undefined;\n  freeTile(this._northwestChild);\n  this._northwestChild = undefined;\n  freeTile(this._northeastChild);\n  this._northeastChild = undefined;\n};\nfunction freeTile(tile) {\n  if (defined(tile)) {\n    tile.freeResources();\n  }\n}\nexport default QuadtreeTile;","map":{"version":3,"names":["defined","DeveloperError","Rectangle","QuadtreeTileLoadState","TileSelectionResult","QuadtreeTile","options","x","y","level","tilingScheme","_tilingScheme","_x","_y","_level","_parent","parent","_rectangle","tileXYToRectangle","_southwestChild","undefined","_southeastChild","_northwestChild","_northeastChild","replacementPrevious","replacementNext","_distance","_loadPriority","_customData","_frameUpdated","_lastSelectionResult","NONE","_lastSelectionResultFrame","_loadedCallbacks","state","START","renderable","upsampledFromParent","data","createLevelZeroTiles","numberOfLevelZeroTilesX","getNumberOfXTilesAtLevel","numberOfLevelZeroTilesY","getNumberOfYTilesAtLevel","result","Array","index","prototype","_updateCustomData","frameNumber","added","removed","customData","i","rectangle","filter","value","indexOf","length","contains","positionCartographic","push","parentCustomData","Object","defineProperties","get","children","northwestChild","northeastChild","southwestChild","southeastChild","needsLoading","DONE","eligibleForUnloading","findLevelZeroTile","levelZeroTiles","xTiles","tile","findTileToWest","westOfParent","findTileToEast","eastOfParent","findTileToSouth","southOfParent","findTileToNorth","northOfParent","freeResources","freeTile"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/QuadtreeTile.js"],"sourcesContent":["import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport QuadtreeTileLoadState from \"./QuadtreeTileLoadState.js\";\nimport TileSelectionResult from \"./TileSelectionResult.js\";\n\n/**\n * A single tile in a {@link QuadtreePrimitive}.\n *\n * @alias QuadtreeTile\n * @constructor\n * @private\n *\n * @param {number} options.level The level of the tile in the quadtree.\n * @param {number} options.x The X coordinate of the tile in the quadtree.  0 is the westernmost tile.\n * @param {number} options.y The Y coordinate of the tile in the quadtree.  0 is the northernmost tile.\n * @param {TilingScheme} options.tilingScheme The tiling scheme in which this tile exists.\n * @param {QuadtreeTile} [options.parent] This tile's parent, or undefined if this is a root tile.\n */\nfunction QuadtreeTile(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options)) {\n    throw new DeveloperError(\"options is required.\");\n  }\n  if (!defined(options.x)) {\n    throw new DeveloperError(\"options.x is required.\");\n  } else if (!defined(options.y)) {\n    throw new DeveloperError(\"options.y is required.\");\n  } else if (options.x < 0 || options.y < 0) {\n    throw new DeveloperError(\n      \"options.x and options.y must be greater than or equal to zero.\",\n    );\n  }\n  if (!defined(options.level)) {\n    throw new DeveloperError(\n      \"options.level is required and must be greater than or equal to zero.\",\n    );\n  }\n  if (!defined(options.tilingScheme)) {\n    throw new DeveloperError(\"options.tilingScheme is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._tilingScheme = options.tilingScheme;\n  this._x = options.x;\n  this._y = options.y;\n  this._level = options.level;\n  this._parent = options.parent;\n  this._rectangle = this._tilingScheme.tileXYToRectangle(\n    this._x,\n    this._y,\n    this._level,\n  );\n\n  this._southwestChild = undefined;\n  this._southeastChild = undefined;\n  this._northwestChild = undefined;\n  this._northeastChild = undefined;\n\n  // TileReplacementQueue gets/sets these private properties.\n  this.replacementPrevious = undefined;\n  this.replacementNext = undefined;\n\n  // The distance from the camera to this tile, updated when the tile is selected\n  // for rendering.  We can get rid of this if we have a better way to sort by\n  // distance - for example, by using the natural ordering of a quadtree.\n  // QuadtreePrimitive gets/sets this private property.\n  this._distance = 0.0;\n  this._loadPriority = 0.0;\n\n  this._customData = [];\n  this._frameUpdated = undefined;\n  this._lastSelectionResult = TileSelectionResult.NONE;\n  this._lastSelectionResultFrame = undefined;\n  this._loadedCallbacks = {};\n\n  /**\n   * Gets or sets the current state of the tile in the tile load pipeline.\n   * @type {QuadtreeTileLoadState}\n   * @default {@link QuadtreeTileLoadState.START}\n   */\n  this.state = QuadtreeTileLoadState.START;\n\n  /**\n   * Gets or sets a value indicating whether or not the tile is currently renderable.\n   * @type {boolean}\n   * @default false\n   */\n  this.renderable = false;\n\n  /**\n   * Gets or set a value indicating whether or not the tile was entirely upsampled from its\n   * parent tile.  If all four children of a parent tile were upsampled from the parent,\n   * we will render the parent instead of the children even if the LOD indicates that\n   * the children would be preferable.\n   * @type {boolean}\n   * @default false\n   */\n  this.upsampledFromParent = false;\n\n  /**\n   * Gets or sets the additional data associated with this tile.  The exact content is specific to the\n   * {@link QuadtreeTileProvider}.\n   * @type {object}\n   * @default undefined\n   */\n  this.data = undefined;\n}\n\n/**\n * Creates a rectangular set of tiles for level of detail zero, the coarsest, least detailed level.\n *\n * @memberof QuadtreeTile\n *\n * @param {TilingScheme} tilingScheme The tiling scheme for which the tiles are to be created.\n * @returns {QuadtreeTile[]} An array containing the tiles at level of detail zero, starting with the\n * tile in the northwest corner and followed by the tile (if any) to its east.\n */\nQuadtreeTile.createLevelZeroTiles = function (tilingScheme) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(tilingScheme)) {\n    throw new DeveloperError(\"tilingScheme is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const numberOfLevelZeroTilesX = tilingScheme.getNumberOfXTilesAtLevel(0);\n  const numberOfLevelZeroTilesY = tilingScheme.getNumberOfYTilesAtLevel(0);\n\n  const result = new Array(numberOfLevelZeroTilesX * numberOfLevelZeroTilesY);\n\n  let index = 0;\n  for (let y = 0; y < numberOfLevelZeroTilesY; ++y) {\n    for (let x = 0; x < numberOfLevelZeroTilesX; ++x) {\n      result[index++] = new QuadtreeTile({\n        tilingScheme: tilingScheme,\n        x: x,\n        y: y,\n        level: 0,\n      });\n    }\n  }\n\n  return result;\n};\n\nQuadtreeTile.prototype._updateCustomData = function (\n  frameNumber,\n  added,\n  removed,\n) {\n  let customData = this.customData;\n\n  let i;\n  let data;\n  let rectangle;\n\n  if (defined(added) && defined(removed)) {\n    customData = customData.filter(function (value) {\n      return removed.indexOf(value) === -1;\n    });\n    this._customData = customData;\n\n    rectangle = this._rectangle;\n    for (i = 0; i < added.length; ++i) {\n      data = added[i];\n      if (Rectangle.contains(rectangle, data.positionCartographic)) {\n        customData.push(data);\n      }\n    }\n\n    this._frameUpdated = frameNumber;\n  } else {\n    // interior or leaf tile, update from parent\n    const parent = this._parent;\n    if (defined(parent) && this._frameUpdated !== parent._frameUpdated) {\n      customData.length = 0;\n\n      rectangle = this._rectangle;\n      const parentCustomData = parent.customData;\n      for (i = 0; i < parentCustomData.length; ++i) {\n        data = parentCustomData[i];\n        if (Rectangle.contains(rectangle, data.positionCartographic)) {\n          customData.push(data);\n        }\n      }\n\n      this._frameUpdated = parent._frameUpdated;\n    }\n  }\n};\n\nObject.defineProperties(QuadtreeTile.prototype, {\n  /**\n   * Gets the tiling scheme used to tile the surface.\n   * @memberof QuadtreeTile.prototype\n   * @type {TilingScheme}\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the tile X coordinate.\n   * @memberof QuadtreeTile.prototype\n   * @type {number}\n   */\n  x: {\n    get: function () {\n      return this._x;\n    },\n  },\n\n  /**\n   * Gets the tile Y coordinate.\n   * @memberof QuadtreeTile.prototype\n   * @type {number}\n   */\n  y: {\n    get: function () {\n      return this._y;\n    },\n  },\n\n  /**\n   * Gets the level-of-detail, where zero is the coarsest, least-detailed.\n   * @memberof QuadtreeTile.prototype\n   * @type {number}\n   */\n  level: {\n    get: function () {\n      return this._level;\n    },\n  },\n\n  /**\n   * Gets the parent tile of this tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  parent: {\n    get: function () {\n      return this._parent;\n    },\n  },\n\n  /**\n   * Gets the cartographic rectangle of the tile, with north, south, east and\n   * west properties in radians.\n   * @memberof QuadtreeTile.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * An array of tiles that is at the next level of the tile tree.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile[]}\n   */\n  children: {\n    get: function () {\n      return [\n        this.northwestChild,\n        this.northeastChild,\n        this.southwestChild,\n        this.southeastChild,\n      ];\n    },\n  },\n\n  /**\n   * Gets the southwest child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  southwestChild: {\n    get: function () {\n      if (!defined(this._southwestChild)) {\n        this._southwestChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2,\n          y: this.y * 2 + 1,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._southwestChild;\n    },\n  },\n\n  /**\n   * Gets the southeast child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  southeastChild: {\n    get: function () {\n      if (!defined(this._southeastChild)) {\n        this._southeastChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2 + 1,\n          y: this.y * 2 + 1,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._southeastChild;\n    },\n  },\n\n  /**\n   * Gets the northwest child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  northwestChild: {\n    get: function () {\n      if (!defined(this._northwestChild)) {\n        this._northwestChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2,\n          y: this.y * 2,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._northwestChild;\n    },\n  },\n\n  /**\n   * Gets the northeast child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  northeastChild: {\n    get: function () {\n      if (!defined(this._northeastChild)) {\n        this._northeastChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2 + 1,\n          y: this.y * 2,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._northeastChild;\n    },\n  },\n\n  /**\n   * An array of objects associated with this tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {Array}\n   */\n  customData: {\n    get: function () {\n      return this._customData;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not this tile needs further loading.\n   * This property will return true if the {@link QuadtreeTile#state} is\n   * <code>START</code> or <code>LOADING</code>.\n   * @memberof QuadtreeTile.prototype\n   * @type {boolean}\n   */\n  needsLoading: {\n    get: function () {\n      return this.state < QuadtreeTileLoadState.DONE;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not this tile is eligible to be unloaded.\n   * Typically, a tile is ineligible to be unloaded while an asynchronous operation,\n   * such as a request for data, is in progress on it.  A tile will never be\n   * unloaded while it is needed for rendering, regardless of the value of this\n   * property.  If {@link QuadtreeTile#data} is defined and has an\n   * <code>eligibleForUnloading</code> property, the value of that property is returned.\n   * Otherwise, this property returns true.\n   * @memberof QuadtreeTile.prototype\n   * @type {boolean}\n   */\n  eligibleForUnloading: {\n    get: function () {\n      let result = true;\n\n      if (defined(this.data)) {\n        result = this.data.eligibleForUnloading;\n        if (!defined(result)) {\n          result = true;\n        }\n      }\n\n      return result;\n    },\n  },\n});\n\nQuadtreeTile.prototype.findLevelZeroTile = function (levelZeroTiles, x, y) {\n  const xTiles = this.tilingScheme.getNumberOfXTilesAtLevel(0);\n  if (x < 0) {\n    x += xTiles;\n  } else if (x >= xTiles) {\n    x -= xTiles;\n  }\n\n  if (y < 0 || y >= this.tilingScheme.getNumberOfYTilesAtLevel(0)) {\n    return undefined;\n  }\n\n  return levelZeroTiles.filter(function (tile) {\n    return tile.x === x && tile.y === y;\n  })[0];\n};\n\nQuadtreeTile.prototype.findTileToWest = function (levelZeroTiles) {\n  const parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x - 1, this.y);\n  }\n\n  if (parent.southeastChild === this) {\n    return parent.southwestChild;\n  } else if (parent.northeastChild === this) {\n    return parent.northwestChild;\n  }\n\n  const westOfParent = parent.findTileToWest(levelZeroTiles);\n  if (westOfParent === undefined) {\n    return undefined;\n  } else if (parent.southwestChild === this) {\n    return westOfParent.southeastChild;\n  }\n  return westOfParent.northeastChild;\n};\n\nQuadtreeTile.prototype.findTileToEast = function (levelZeroTiles) {\n  const parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x + 1, this.y);\n  }\n\n  if (parent.southwestChild === this) {\n    return parent.southeastChild;\n  } else if (parent.northwestChild === this) {\n    return parent.northeastChild;\n  }\n\n  const eastOfParent = parent.findTileToEast(levelZeroTiles);\n  if (eastOfParent === undefined) {\n    return undefined;\n  } else if (parent.southeastChild === this) {\n    return eastOfParent.southwestChild;\n  }\n  return eastOfParent.northwestChild;\n};\n\nQuadtreeTile.prototype.findTileToSouth = function (levelZeroTiles) {\n  const parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x, this.y + 1);\n  }\n\n  if (parent.northwestChild === this) {\n    return parent.southwestChild;\n  } else if (parent.northeastChild === this) {\n    return parent.southeastChild;\n  }\n\n  const southOfParent = parent.findTileToSouth(levelZeroTiles);\n  if (southOfParent === undefined) {\n    return undefined;\n  } else if (parent.southwestChild === this) {\n    return southOfParent.northwestChild;\n  }\n  return southOfParent.northeastChild;\n};\n\nQuadtreeTile.prototype.findTileToNorth = function (levelZeroTiles) {\n  const parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x, this.y - 1);\n  }\n\n  if (parent.southwestChild === this) {\n    return parent.northwestChild;\n  } else if (parent.southeastChild === this) {\n    return parent.northeastChild;\n  }\n\n  const northOfParent = parent.findTileToNorth(levelZeroTiles);\n  if (northOfParent === undefined) {\n    return undefined;\n  } else if (parent.northwestChild === this) {\n    return northOfParent.southwestChild;\n  }\n  return northOfParent.southeastChild;\n};\n\n/**\n * Frees the resources associated with this tile and returns it to the <code>START</code>\n * {@link QuadtreeTileLoadState}.  If the {@link QuadtreeTile#data} property is defined and it\n * has a <code>freeResources</code> method, the method will be invoked.\n *\n * @memberof QuadtreeTile\n */\nQuadtreeTile.prototype.freeResources = function () {\n  this.state = QuadtreeTileLoadState.START;\n  this.renderable = false;\n  this.upsampledFromParent = false;\n\n  if (defined(this.data) && defined(this.data.freeResources)) {\n    this.data.freeResources();\n  }\n\n  freeTile(this._southwestChild);\n  this._southwestChild = undefined;\n  freeTile(this._southeastChild);\n  this._southeastChild = undefined;\n  freeTile(this._northwestChild);\n  this._northwestChild = undefined;\n  freeTile(this._northeastChild);\n  this._northeastChild = undefined;\n};\n\nfunction freeTile(tile) {\n  if (defined(tile)) {\n    tile.freeResources();\n  }\n}\nexport default QuadtreeTile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}