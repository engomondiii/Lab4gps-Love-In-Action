{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport MetadataEntity from \"./MetadataEntity.js\";\n\n/**\n * Metadata about an implicit subtree.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.subtreeMetadata The subtree metadata JSON object.\n * @param {MetadataClass} options.class The class that subtree metadata conforms to.\n *\n * @alias ImplicitSubtreeMetadata\n * @constructor\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction ImplicitSubtreeMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const subtreeMetadata = options.subtreeMetadata;\n  const metadataClass = options.class;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.subtreeMetadata\", subtreeMetadata);\n  Check.typeOf.object(\"options.class\", metadataClass);\n  //>>includeEnd('debug');\n\n  const properties = defined(subtreeMetadata.properties) ? subtreeMetadata.properties : {};\n  this._class = metadataClass;\n  this._properties = properties;\n  this._extras = subtreeMetadata.extras;\n  this._extensions = subtreeMetadata.extensions;\n}\nObject.defineProperties(ImplicitSubtreeMetadata.prototype, {\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof ImplicitSubtreeMetadata.prototype\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof ImplicitSubtreeMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof ImplicitSubtreeMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\n\n/**\n * Returns whether the subtree has this property.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {boolean} Whether the subtree has this property.\n * @private\n */\nImplicitSubtreeMetadata.prototype.hasProperty = function (propertyId) {\n  return MetadataEntity.hasProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Returns whether the subtree has a property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {boolean} Whether the subtree has a property with the given semantic.\n * @private\n */\nImplicitSubtreeMetadata.prototype.hasPropertyBySemantic = function (semantic) {\n  return MetadataEntity.hasPropertyBySemantic(semantic, this._properties, this._class);\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The property IDs.\n * @private\n */\nImplicitSubtreeMetadata.prototype.getPropertyIds = function (results) {\n  return MetadataEntity.getPropertyIds(this._properties, this._class, results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n * <p>\n * If the property is normalized the normalized value is returned.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the subtree does not have this property.\n * @private\n */\nImplicitSubtreeMetadata.prototype.getProperty = function (propertyId) {\n  return MetadataEntity.getProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Sets the value of the property with the given ID.\n * <p>\n * If the property is normalized a normalized value must be provided to this function.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nImplicitSubtreeMetadata.prototype.setProperty = function (propertyId, value) {\n  return MetadataEntity.setProperty(propertyId, value, this._properties, this._class);\n};\n\n/**\n * Returns a copy of the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the subtree does not have this semantic.\n * @private\n */\nImplicitSubtreeMetadata.prototype.getPropertyBySemantic = function (semantic) {\n  return MetadataEntity.getPropertyBySemantic(semantic, this._properties, this._class);\n};\n\n/**\n * Sets the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nImplicitSubtreeMetadata.prototype.setPropertyBySemantic = function (semantic, value) {\n  return MetadataEntity.setPropertyBySemantic(semantic, value, this._properties, this._class);\n};\nexport default ImplicitSubtreeMetadata;","map":{"version":3,"names":["Check","defaultValue","defined","MetadataEntity","ImplicitSubtreeMetadata","options","EMPTY_OBJECT","subtreeMetadata","metadataClass","class","typeOf","object","properties","_class","_properties","_extras","extras","_extensions","extensions","Object","defineProperties","prototype","get","hasProperty","propertyId","hasPropertyBySemantic","semantic","getPropertyIds","results","getProperty","setProperty","value","getPropertyBySemantic","setPropertyBySemantic"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ImplicitSubtreeMetadata.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport MetadataEntity from \"./MetadataEntity.js\";\n\n/**\n * Metadata about an implicit subtree.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.subtreeMetadata The subtree metadata JSON object.\n * @param {MetadataClass} options.class The class that subtree metadata conforms to.\n *\n * @alias ImplicitSubtreeMetadata\n * @constructor\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction ImplicitSubtreeMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const subtreeMetadata = options.subtreeMetadata;\n  const metadataClass = options.class;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.subtreeMetadata\", subtreeMetadata);\n  Check.typeOf.object(\"options.class\", metadataClass);\n  //>>includeEnd('debug');\n\n  const properties = defined(subtreeMetadata.properties)\n    ? subtreeMetadata.properties\n    : {};\n\n  this._class = metadataClass;\n  this._properties = properties;\n  this._extras = subtreeMetadata.extras;\n  this._extensions = subtreeMetadata.extensions;\n}\n\nObject.defineProperties(ImplicitSubtreeMetadata.prototype, {\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof ImplicitSubtreeMetadata.prototype\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof ImplicitSubtreeMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof ImplicitSubtreeMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\n/**\n * Returns whether the subtree has this property.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {boolean} Whether the subtree has this property.\n * @private\n */\nImplicitSubtreeMetadata.prototype.hasProperty = function (propertyId) {\n  return MetadataEntity.hasProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Returns whether the subtree has a property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {boolean} Whether the subtree has a property with the given semantic.\n * @private\n */\nImplicitSubtreeMetadata.prototype.hasPropertyBySemantic = function (semantic) {\n  return MetadataEntity.hasPropertyBySemantic(\n    semantic,\n    this._properties,\n    this._class,\n  );\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The property IDs.\n * @private\n */\nImplicitSubtreeMetadata.prototype.getPropertyIds = function (results) {\n  return MetadataEntity.getPropertyIds(this._properties, this._class, results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n * <p>\n * If the property is normalized the normalized value is returned.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the subtree does not have this property.\n * @private\n */\nImplicitSubtreeMetadata.prototype.getProperty = function (propertyId) {\n  return MetadataEntity.getProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Sets the value of the property with the given ID.\n * <p>\n * If the property is normalized a normalized value must be provided to this function.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nImplicitSubtreeMetadata.prototype.setProperty = function (propertyId, value) {\n  return MetadataEntity.setProperty(\n    propertyId,\n    value,\n    this._properties,\n    this._class,\n  );\n};\n\n/**\n * Returns a copy of the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the subtree does not have this semantic.\n * @private\n */\nImplicitSubtreeMetadata.prototype.getPropertyBySemantic = function (semantic) {\n  return MetadataEntity.getPropertyBySemantic(\n    semantic,\n    this._properties,\n    this._class,\n  );\n};\n\n/**\n * Sets the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nImplicitSubtreeMetadata.prototype.setPropertyBySemantic = function (\n  semantic,\n  value,\n) {\n  return MetadataEntity.setPropertyBySemantic(\n    semantic,\n    value,\n    this._properties,\n    this._class,\n  );\n};\n\nexport default ImplicitSubtreeMetadata;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}