{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Check from \"../Core/Check.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix2 from \"../Core/Matrix2.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\n\n/**\n * An enum describing the attribute type for glTF and 3D Tiles.\n *\n * @enum {string}\n *\n * @private\n */\nconst AttributeType = {\n  /**\n   * The attribute is a single component.\n   *\n   * @type {string}\n   * @constant\n   */\n  SCALAR: \"SCALAR\",\n  /**\n   * The attribute is a two-component vector.\n   *\n   * @type {string}\n   * @constant\n   */\n  VEC2: \"VEC2\",\n  /**\n   * The attribute is a three-component vector.\n   *\n   * @type {string}\n   * @constant\n   */\n  VEC3: \"VEC3\",\n  /**\n   * The attribute is a four-component vector.\n   *\n   * @type {string}\n   * @constant\n   */\n  VEC4: \"VEC4\",\n  /**\n   * The attribute is a 2x2 matrix.\n   *\n   * @type {string}\n   * @constant\n   */\n  MAT2: \"MAT2\",\n  /**\n   * The attribute is a 3x3 matrix.\n   *\n   * @type {string}\n   * @constant\n   */\n  MAT3: \"MAT3\",\n  /**\n   * The attribute is a 4x4 matrix.\n   *\n   * @type {string}\n   * @constant\n   */\n  MAT4: \"MAT4\"\n};\n\n/**\n * Gets the scalar, vector, or matrix type for the attribute type.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {*} The math type.\n *\n * @private\n */\nAttributeType.getMathType = function (attributeType) {\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n      return Number;\n    case AttributeType.VEC2:\n      return Cartesian2;\n    case AttributeType.VEC3:\n      return Cartesian3;\n    case AttributeType.VEC4:\n      return Cartesian4;\n    case AttributeType.MAT2:\n      return Matrix2;\n    case AttributeType.MAT3:\n      return Matrix3;\n    case AttributeType.MAT4:\n      return Matrix4;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"attributeType is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the number of components per attribute.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {number} The number of components.\n *\n * @private\n */\nAttributeType.getNumberOfComponents = function (attributeType) {\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n      return 1;\n    case AttributeType.VEC2:\n      return 2;\n    case AttributeType.VEC3:\n      return 3;\n    case AttributeType.VEC4:\n    case AttributeType.MAT2:\n      return 4;\n    case AttributeType.MAT3:\n      return 9;\n    case AttributeType.MAT4:\n      return 16;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"attributeType is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Get the number of attribute locations needed to fit this attribute. Most\n * types require one, but matrices require multiple attribute locations.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {number} The number of attribute locations needed in the shader\n *\n * @private\n */\nAttributeType.getAttributeLocationCount = function (attributeType) {\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n    case AttributeType.VEC2:\n    case AttributeType.VEC3:\n    case AttributeType.VEC4:\n      return 1;\n    case AttributeType.MAT2:\n      return 2;\n    case AttributeType.MAT3:\n      return 3;\n    case AttributeType.MAT4:\n      return 4;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"attributeType is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the GLSL type for the attribute type.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {string} The GLSL type for the attribute type.\n *\n * @private\n */\nAttributeType.getGlslType = function (attributeType) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"attributeType\", attributeType);\n  //>>includeEnd('debug');\n\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n      return \"float\";\n    case AttributeType.VEC2:\n      return \"vec2\";\n    case AttributeType.VEC3:\n      return \"vec3\";\n    case AttributeType.VEC4:\n      return \"vec4\";\n    case AttributeType.MAT2:\n      return \"mat2\";\n    case AttributeType.MAT3:\n      return \"mat3\";\n    case AttributeType.MAT4:\n      return \"mat4\";\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"attributeType is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\nexport default Object.freeze(AttributeType);","map":{"version":3,"names":["Cartesian2","Cartesian3","Cartesian4","Check","DeveloperError","Matrix2","Matrix3","Matrix4","AttributeType","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","getMathType","attributeType","Number","getNumberOfComponents","getAttributeLocationCount","getGlslType","typeOf","string","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/AttributeType.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Check from \"../Core/Check.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix2 from \"../Core/Matrix2.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\n\n/**\n * An enum describing the attribute type for glTF and 3D Tiles.\n *\n * @enum {string}\n *\n * @private\n */\nconst AttributeType = {\n  /**\n   * The attribute is a single component.\n   *\n   * @type {string}\n   * @constant\n   */\n  SCALAR: \"SCALAR\",\n\n  /**\n   * The attribute is a two-component vector.\n   *\n   * @type {string}\n   * @constant\n   */\n  VEC2: \"VEC2\",\n\n  /**\n   * The attribute is a three-component vector.\n   *\n   * @type {string}\n   * @constant\n   */\n  VEC3: \"VEC3\",\n\n  /**\n   * The attribute is a four-component vector.\n   *\n   * @type {string}\n   * @constant\n   */\n  VEC4: \"VEC4\",\n\n  /**\n   * The attribute is a 2x2 matrix.\n   *\n   * @type {string}\n   * @constant\n   */\n  MAT2: \"MAT2\",\n\n  /**\n   * The attribute is a 3x3 matrix.\n   *\n   * @type {string}\n   * @constant\n   */\n  MAT3: \"MAT3\",\n\n  /**\n   * The attribute is a 4x4 matrix.\n   *\n   * @type {string}\n   * @constant\n   */\n  MAT4: \"MAT4\",\n};\n\n/**\n * Gets the scalar, vector, or matrix type for the attribute type.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {*} The math type.\n *\n * @private\n */\nAttributeType.getMathType = function (attributeType) {\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n      return Number;\n    case AttributeType.VEC2:\n      return Cartesian2;\n    case AttributeType.VEC3:\n      return Cartesian3;\n    case AttributeType.VEC4:\n      return Cartesian4;\n    case AttributeType.MAT2:\n      return Matrix2;\n    case AttributeType.MAT3:\n      return Matrix3;\n    case AttributeType.MAT4:\n      return Matrix4;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"attributeType is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the number of components per attribute.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {number} The number of components.\n *\n * @private\n */\nAttributeType.getNumberOfComponents = function (attributeType) {\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n      return 1;\n    case AttributeType.VEC2:\n      return 2;\n    case AttributeType.VEC3:\n      return 3;\n    case AttributeType.VEC4:\n    case AttributeType.MAT2:\n      return 4;\n    case AttributeType.MAT3:\n      return 9;\n    case AttributeType.MAT4:\n      return 16;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"attributeType is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Get the number of attribute locations needed to fit this attribute. Most\n * types require one, but matrices require multiple attribute locations.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {number} The number of attribute locations needed in the shader\n *\n * @private\n */\nAttributeType.getAttributeLocationCount = function (attributeType) {\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n    case AttributeType.VEC2:\n    case AttributeType.VEC3:\n    case AttributeType.VEC4:\n      return 1;\n    case AttributeType.MAT2:\n      return 2;\n    case AttributeType.MAT3:\n      return 3;\n    case AttributeType.MAT4:\n      return 4;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"attributeType is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the GLSL type for the attribute type.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {string} The GLSL type for the attribute type.\n *\n * @private\n */\nAttributeType.getGlslType = function (attributeType) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"attributeType\", attributeType);\n  //>>includeEnd('debug');\n\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n      return \"float\";\n    case AttributeType.VEC2:\n      return \"vec2\";\n    case AttributeType.VEC3:\n      return \"vec3\";\n    case AttributeType.VEC4:\n      return \"vec4\";\n    case AttributeType.MAT2:\n      return \"mat2\";\n    case AttributeType.MAT3:\n      return \"mat3\";\n    case AttributeType.MAT4:\n      return \"mat4\";\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"attributeType is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\nexport default Object.freeze(AttributeType);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}