{"ast":null,"code":"import Check from \"./Check.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\n/**\n * Default settings for accessing the iTwin platform.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @see ITwinData\n * @namespace ITwinPlatform\n */\nconst ITwinPlatform = {};\n\n/**\n * Status states for a mesh-export export.\n * Valid values are: <code>NotStarted</code>, <code>InProgress</code>, <code>Complete</code>, <code>Invalid</code>\n * @enum {string}\n */\nITwinPlatform.ExportStatus = Object.freeze({\n  NotStarted: \"NotStarted\",\n  InProgress: \"InProgress\",\n  Complete: \"Complete\",\n  Invalid: \"Invalid\"\n});\n\n/**\n * Types of mesh-export exports. CesiumJS only supports loading <code>3DTILES</code> type exports.\n * Valid values are: <code>IMODEL</code>, <code>CESIUM</code>, <code>3DTILES</code>\n * @enum {string}\n */\nITwinPlatform.ExportType = Object.freeze({\n  IMODEL: \"IMODEL\",\n  CESIUM: \"CESIUM\",\n  \"3DTILES\": \"3DTILES\"\n});\n\n/**\n * Types of Reality data\n * @see https://developer.bentley.com/apis/reality-management/rm-rd-details/#types\n * @enum {string}\n */\nITwinPlatform.RealityDataType = Object.freeze({\n  Cesium3DTiles: \"Cesium3DTiles\",\n  PNTS: \"PNTS\",\n  OPC: \"OPC\",\n  RealityMesh3DTiles: \"RealityMesh3DTiles\",\n  Terrain3DTiles: \"Terrain3DTiles\",\n  \"3MX\": \"3MX\",\n  \"3SM\": \"3SM\",\n  CCCloudProject: \"CCCloudProject\",\n  CCImageCollection: \"CCImageCollection\",\n  CCOrientations: \"CCOrientations\",\n  ContextCaptureInputs: \"ContextCaptureInputs\",\n  ContextDetector: \"ContextDetector\",\n  ContextScene: \"ContextScene\",\n  DAE: \"DAE\",\n  DGN: \"DGN\",\n  DSM: \"DSM\",\n  FBX: \"FBX\",\n  GLB: \"GLB\",\n  GLTF: \"GLTF\",\n  KML: \"KML\",\n  LAS: \"LAS\",\n  LAZ: \"LAZ\",\n  LOD: \"LOD\",\n  LodTree: \"LodTree\",\n  OBJ: \"OBJ\",\n  OMI: \"OMI\",\n  OMR: \"OMR\",\n  Orthophoto: \"Orthophoto\",\n  OrthophotoDSM: \"OrthophotoDSM\",\n  OSGB: \"OSGB\",\n  OVF: \"OVF\",\n  OBT: \"OBT\",\n  PLY: \"PLY\",\n  PointCloud: \"PointCloud\",\n  S3C: \"S3C\",\n  ScanCollection: \"ScanCollection\",\n  SHP: \"SHP\",\n  SLPK: \"SLPK\",\n  SpaceEyes3D: \"SpaceEyes3D\",\n  STL: \"STL\",\n  TSM: \"TSM\",\n  Unstructured: \"Unstructured\",\n  Other: \"Other\"\n});\n\n/**\n * Gets or sets the default iTwin access token. This token should have the <code>itwin-platform</code> scope.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @type {string|undefined}\n */\nITwinPlatform.defaultAccessToken = undefined;\n\n/**\n * Gets or sets the default iTwin API endpoint.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @type {string|Resource}\n * @default \"https://api.bentley.com\"\n */\nITwinPlatform.apiEndpoint = new Resource({\n  url: \"https://api.bentley.com\"\n});\n\n/**\n * @typedef {Object} ExportRequest\n * @private\n * @property {string} iModelId\n * @property {string} changesetId\n * @property {ITwinPlatform.ExportType} exportType Type of the export. CesiumJS only supports the 3DTILES type\n */\n\n/**\n * @typedef {Object} Link\n * @private\n * @property {string} href\n */\n\n/**\n * @typedef {Object} ExportRepresentation\n * The export objects from get-exports when using return=representation\n * @private\n * @property {string} id Export id\n * @property {string} displayName Name of the iModel\n * @property {ITwinPlatform.ExportStatus} status Status of this export\n * @property {string} lastModified\n * @property {ExportRequest} request Object containing info about the export itself\n * @property {{mesh: Link}} _links Object containing relevant links. For Exports this includes the access url for the mesh itself\n */\n\n/**\n * @typedef {Object} GetExportsResponse\n * @private\n * @property {ExportRepresentation[]} exports The list of exports for the current page\n * @property {{self: Link, next: Link | undefined, prev: Link | undefined}} _links Pagination links\n */\n\n/**\n * Get the list of exports for the specified iModel at it's most current version.\n * This will only return the top 5 exports with {@link ITwinPlatform.ExportType} of <code>3DTILES</code>.\n *\n * @private\n *\n * @param {string} iModelId iModel id\n * @returns {Promise<GetExportsResponse>}\n *\n * @throws {RuntimeError} If the iTwin API request is not successful\n */\nITwinPlatform.getExports = async function (iModelId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"iModelId\", iModelId);\n  if (!defined(ITwinPlatform.defaultAccessToken)) {\n    throw new DeveloperError(\"Must set ITwinPlatform.defaultAccessToken first\");\n  }\n  //>>includeEnd('debug')\n\n  const resource = new Resource({\n    url: `${ITwinPlatform.apiEndpoint}mesh-export`,\n    headers: {\n      Authorization: `Bearer ${ITwinPlatform.defaultAccessToken}`,\n      Accept: \"application/vnd.bentley.itwin-platform.v1+json\",\n      Prefer: \"return=representation\"\n    },\n    queryParameters: {\n      iModelId: iModelId,\n      exportType: ITwinPlatform.ExportType[\"3DTILES\"],\n      // With the export auto-generation it will auto-delete the 6th export so\n      // there should never be more than 5 results. Just request them all and parse\n      // for ones that are COMPLETE\n      $top: \"5\",\n      client: \"CesiumJS\"\n    }\n  });\n  /* global CESIUM_VERSION */\n  if (typeof CESIUM_VERSION !== \"undefined\") {\n    resource.appendQueryParameters({\n      clientVersion: CESIUM_VERSION\n    });\n  }\n  try {\n    const response = await resource.fetchJson();\n    return response;\n  } catch (error) {\n    const result = JSON.parse(error.response);\n    if (error.statusCode === 401) {\n      throw new RuntimeError(`Unauthorized, bad token, wrong scopes or headers bad. ${result.error.details[0].code}`);\n    } else if (error.statusCode === 403) {\n      console.error(result.error.code, result.error.message);\n      throw new RuntimeError(\"Not allowed, forbidden\");\n    } else if (error.statusCode === 422) {\n      throw new RuntimeError(`Unprocessable Entity:${result.error.code} ${result.error.message}`);\n    } else if (error.statusCode === 429) {\n      throw new RuntimeError(\"Too many requests\");\n    }\n    throw new RuntimeError(`Unknown request failure ${error.statusCode}`);\n  }\n};\n\n/**\n * @typedef {Object} RealityDataExtent\n * @private\n * @property {{latitude: number, longitude: number}} southWest\n * @property {{latitude: number, longitude: number}} northEast\n */\n\n/**\n * @typedef {Object} RealityDataRepresentation\n * @private\n * @property {string} id \"95d8dccd-d89e-4287-bb5f-3219acbc71ae\",\n * @property {string} displayName \"Name of reality data\",\n * @property {string} dataset \"Dataset\",\n * @property {string} group \"73d09423-28c3-4fdb-ab4a-03a47a5b04f8\",\n * @property {string} description \"Description of reality data\",\n * @property {string} rootDocument \"Directory/SubDirectory/realityData.3mx\",\n * @property {number} size 6521212,\n * @property {string} classification \"Model\",\n * @property {ITwinPlatform.RealityDataType} type \"3MX\",\n * @property {{startDateTime: string, endDateTime: string, acquirer: string}} acquisition\n * @property {RealityDataExtent} extent\n * @property {boolean} authoring false,\n * @property {string} dataCenterLocation \"North Europe\",\n * @property {string} modifiedDateTime \"2021-04-09T19:03:12Z\",\n * @property {string} lastAccessedDateTime \"2021-04-09T00:00:00Z\",\n * @property {string} createdDateTime \"2021-02-22T20:03:40Z\",\n * @property {string} ownerId \"f1d49cc7-f9b3-494f-9c67-563ea5597063\",\n */\n\n/**\n * Load the full metadata for the given iTwin id and reality data id.\n *\n * @private\n *\n * @param {string} iTwinId The id of the iTwin to load data from\n * @param {string} realityDataId The id of the reality data to load\n * @returns {Promise<RealityDataRepresentation>}\n */\nITwinPlatform.getRealityDataMetadata = async function (iTwinId, realityDataId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"iTwinId\", iTwinId);\n  Check.typeOf.string(\"realityDataId\", realityDataId);\n  if (!defined(ITwinPlatform.defaultAccessToken)) {\n    throw new DeveloperError(\"Must set ITwinPlatform.defaultAccessToken first\");\n  }\n  //>>includeEnd('debug')\n\n  const resource = new Resource({\n    url: `${ITwinPlatform.apiEndpoint}reality-management/reality-data/${realityDataId}`,\n    headers: {\n      Authorization: `Bearer ${ITwinPlatform.defaultAccessToken}`,\n      Accept: \"application/vnd.bentley.itwin-platform.v1+json\"\n    },\n    queryParameters: {\n      iTwinId: iTwinId\n    }\n  });\n  try {\n    const response = await resource.fetchJson();\n    return response.realityData;\n  } catch (error) {\n    const result = JSON.parse(error.response);\n    if (error.statusCode === 401) {\n      throw new RuntimeError(`Unauthorized, bad token, wrong scopes or headers bad. ${result.error.details[0].code}`);\n    } else if (error.statusCode === 403) {\n      console.error(result.error.code, result.error.message);\n      throw new RuntimeError(\"Not allowed, forbidden\");\n    } else if (error.statusCode === 404) {\n      throw new RuntimeError(`Reality data not found: ${iTwinId}, ${realityDataId}`);\n    } else if (error.statusCode === 422) {\n      throw new RuntimeError(`Unprocessable Entity:${result.error.code} ${result.error.message}`);\n    } else if (error.statusCode === 429) {\n      throw new RuntimeError(\"Too many requests\");\n    }\n    throw new RuntimeError(`Unknown request failure ${error.statusCode}`);\n  }\n};\n\n/**\n * Request the access url for the given iTwin id, reality data id and root document.\n * The root document can be requested from the list using <code>return=representation</code>\n * or the metadata route from {@link ITwinPlatform.getRealityDataMetadata}\n *\n * @private\n *\n * @param {string} iTwinId The id of the iTwin to load data from\n * @param {string} realityDataId The id of the reality data to load\n * @param {string} rootDocument The path of the root document for this reality data\n * @returns {Promise<string>}\n */\nITwinPlatform.getRealityDataURL = async function (iTwinId, realityDataId, rootDocument) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"iTwinId\", iTwinId);\n  Check.typeOf.string(\"realityDataId\", realityDataId);\n  Check.typeOf.string(\"rootDocument\", rootDocument);\n  if (!defined(ITwinPlatform.defaultAccessToken)) {\n    throw new DeveloperError(\"Must set ITwinPlatform.defaultAccessToken first\");\n  }\n  //>>includeEnd('debug')\n\n  const resource = new Resource({\n    url: `${ITwinPlatform.apiEndpoint}reality-management/reality-data/${realityDataId}/readaccess`,\n    headers: {\n      Authorization: `Bearer ${ITwinPlatform.defaultAccessToken}`,\n      Accept: \"application/vnd.bentley.itwin-platform.v1+json\"\n    },\n    queryParameters: {\n      iTwinId: iTwinId\n    }\n  });\n  try {\n    const result = await resource.fetchJson();\n    const containerUrl = result._links.containerUrl.href;\n    const tilesetUrl = new URL(containerUrl);\n    tilesetUrl.pathname = `${tilesetUrl.pathname}/${rootDocument}`;\n    return tilesetUrl.toString();\n  } catch (error) {\n    const result = JSON.parse(error.response);\n    if (error.statusCode === 401) {\n      throw new RuntimeError(`Unauthorized, bad token, wrong scopes or headers bad. ${result.error.details[0].code}`);\n    } else if (error.statusCode === 403) {\n      console.error(result.error.code, result.error.message);\n      throw new RuntimeError(\"Not allowed, forbidden\");\n    } else if (error.statusCode === 404) {\n      throw new RuntimeError(`Reality data not found: ${iTwinId}, ${realityDataId}`);\n    } else if (error.statusCode === 422) {\n      throw new RuntimeError(`Unprocessable Entity:${result.error.code} ${result.error.message}`);\n    } else if (error.statusCode === 429) {\n      throw new RuntimeError(\"Too many requests\");\n    }\n    throw new RuntimeError(`Unknown request failure ${error.statusCode}`);\n  }\n};\nexport default ITwinPlatform;","map":{"version":3,"names":["Check","defined","DeveloperError","Resource","RuntimeError","ITwinPlatform","ExportStatus","Object","freeze","NotStarted","InProgress","Complete","Invalid","ExportType","IMODEL","CESIUM","RealityDataType","Cesium3DTiles","PNTS","OPC","RealityMesh3DTiles","Terrain3DTiles","CCCloudProject","CCImageCollection","CCOrientations","ContextCaptureInputs","ContextDetector","ContextScene","DAE","DGN","DSM","FBX","GLB","GLTF","KML","LAS","LAZ","LOD","LodTree","OBJ","OMI","OMR","Orthophoto","OrthophotoDSM","OSGB","OVF","OBT","PLY","PointCloud","S3C","ScanCollection","SHP","SLPK","SpaceEyes3D","STL","TSM","Unstructured","Other","defaultAccessToken","undefined","apiEndpoint","url","getExports","iModelId","typeOf","string","resource","headers","Authorization","Accept","Prefer","queryParameters","exportType","$top","client","CESIUM_VERSION","appendQueryParameters","clientVersion","response","fetchJson","error","result","JSON","parse","statusCode","details","code","console","message","getRealityDataMetadata","iTwinId","realityDataId","realityData","getRealityDataURL","rootDocument","containerUrl","_links","href","tilesetUrl","URL","pathname","toString"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/ITwinPlatform.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\n/**\n * Default settings for accessing the iTwin platform.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @see ITwinData\n * @namespace ITwinPlatform\n */\nconst ITwinPlatform = {};\n\n/**\n * Status states for a mesh-export export.\n * Valid values are: <code>NotStarted</code>, <code>InProgress</code>, <code>Complete</code>, <code>Invalid</code>\n * @enum {string}\n */\nITwinPlatform.ExportStatus = Object.freeze({\n  NotStarted: \"NotStarted\",\n  InProgress: \"InProgress\",\n  Complete: \"Complete\",\n  Invalid: \"Invalid\",\n});\n\n/**\n * Types of mesh-export exports. CesiumJS only supports loading <code>3DTILES</code> type exports.\n * Valid values are: <code>IMODEL</code>, <code>CESIUM</code>, <code>3DTILES</code>\n * @enum {string}\n */\nITwinPlatform.ExportType = Object.freeze({\n  IMODEL: \"IMODEL\",\n  CESIUM: \"CESIUM\",\n  \"3DTILES\": \"3DTILES\",\n});\n\n/**\n * Types of Reality data\n * @see https://developer.bentley.com/apis/reality-management/rm-rd-details/#types\n * @enum {string}\n */\nITwinPlatform.RealityDataType = Object.freeze({\n  Cesium3DTiles: \"Cesium3DTiles\",\n  PNTS: \"PNTS\",\n  OPC: \"OPC\",\n  RealityMesh3DTiles: \"RealityMesh3DTiles\",\n  Terrain3DTiles: \"Terrain3DTiles\",\n  \"3MX\": \"3MX\",\n  \"3SM\": \"3SM\",\n  CCCloudProject: \"CCCloudProject\",\n  CCImageCollection: \"CCImageCollection\",\n  CCOrientations: \"CCOrientations\",\n  ContextCaptureInputs: \"ContextCaptureInputs\",\n  ContextDetector: \"ContextDetector\",\n  ContextScene: \"ContextScene\",\n  DAE: \"DAE\",\n  DGN: \"DGN\",\n  DSM: \"DSM\",\n  FBX: \"FBX\",\n  GLB: \"GLB\",\n  GLTF: \"GLTF\",\n  KML: \"KML\",\n  LAS: \"LAS\",\n  LAZ: \"LAZ\",\n  LOD: \"LOD\",\n  LodTree: \"LodTree\",\n  OBJ: \"OBJ\",\n  OMI: \"OMI\",\n  OMR: \"OMR\",\n  Orthophoto: \"Orthophoto\",\n  OrthophotoDSM: \"OrthophotoDSM\",\n  OSGB: \"OSGB\",\n  OVF: \"OVF\",\n  OBT: \"OBT\",\n  PLY: \"PLY\",\n  PointCloud: \"PointCloud\",\n  S3C: \"S3C\",\n  ScanCollection: \"ScanCollection\",\n  SHP: \"SHP\",\n  SLPK: \"SLPK\",\n  SpaceEyes3D: \"SpaceEyes3D\",\n  STL: \"STL\",\n  TSM: \"TSM\",\n  Unstructured: \"Unstructured\",\n  Other: \"Other\",\n});\n\n/**\n * Gets or sets the default iTwin access token. This token should have the <code>itwin-platform</code> scope.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @type {string|undefined}\n */\nITwinPlatform.defaultAccessToken = undefined;\n\n/**\n * Gets or sets the default iTwin API endpoint.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @type {string|Resource}\n * @default \"https://api.bentley.com\"\n */\nITwinPlatform.apiEndpoint = new Resource({\n  url: \"https://api.bentley.com\",\n});\n\n/**\n * @typedef {Object} ExportRequest\n * @private\n * @property {string} iModelId\n * @property {string} changesetId\n * @property {ITwinPlatform.ExportType} exportType Type of the export. CesiumJS only supports the 3DTILES type\n */\n\n/**\n * @typedef {Object} Link\n * @private\n * @property {string} href\n */\n\n/**\n * @typedef {Object} ExportRepresentation\n * The export objects from get-exports when using return=representation\n * @private\n * @property {string} id Export id\n * @property {string} displayName Name of the iModel\n * @property {ITwinPlatform.ExportStatus} status Status of this export\n * @property {string} lastModified\n * @property {ExportRequest} request Object containing info about the export itself\n * @property {{mesh: Link}} _links Object containing relevant links. For Exports this includes the access url for the mesh itself\n */\n\n/**\n * @typedef {Object} GetExportsResponse\n * @private\n * @property {ExportRepresentation[]} exports The list of exports for the current page\n * @property {{self: Link, next: Link | undefined, prev: Link | undefined}} _links Pagination links\n */\n\n/**\n * Get the list of exports for the specified iModel at it's most current version.\n * This will only return the top 5 exports with {@link ITwinPlatform.ExportType} of <code>3DTILES</code>.\n *\n * @private\n *\n * @param {string} iModelId iModel id\n * @returns {Promise<GetExportsResponse>}\n *\n * @throws {RuntimeError} If the iTwin API request is not successful\n */\nITwinPlatform.getExports = async function (iModelId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"iModelId\", iModelId);\n  if (!defined(ITwinPlatform.defaultAccessToken)) {\n    throw new DeveloperError(\"Must set ITwinPlatform.defaultAccessToken first\");\n  }\n  //>>includeEnd('debug')\n\n  const resource = new Resource({\n    url: `${ITwinPlatform.apiEndpoint}mesh-export`,\n    headers: {\n      Authorization: `Bearer ${ITwinPlatform.defaultAccessToken}`,\n      Accept: \"application/vnd.bentley.itwin-platform.v1+json\",\n      Prefer: \"return=representation\",\n    },\n    queryParameters: {\n      iModelId: iModelId,\n      exportType: ITwinPlatform.ExportType[\"3DTILES\"],\n      // With the export auto-generation it will auto-delete the 6th export so\n      // there should never be more than 5 results. Just request them all and parse\n      // for ones that are COMPLETE\n      $top: \"5\",\n      client: \"CesiumJS\",\n    },\n  });\n  /* global CESIUM_VERSION */\n  if (typeof CESIUM_VERSION !== \"undefined\") {\n    resource.appendQueryParameters({ clientVersion: CESIUM_VERSION });\n  }\n\n  try {\n    const response = await resource.fetchJson();\n    return response;\n  } catch (error) {\n    const result = JSON.parse(error.response);\n    if (error.statusCode === 401) {\n      throw new RuntimeError(\n        `Unauthorized, bad token, wrong scopes or headers bad. ${result.error.details[0].code}`,\n      );\n    } else if (error.statusCode === 403) {\n      console.error(result.error.code, result.error.message);\n      throw new RuntimeError(\"Not allowed, forbidden\");\n    } else if (error.statusCode === 422) {\n      throw new RuntimeError(\n        `Unprocessable Entity:${result.error.code} ${result.error.message}`,\n      );\n    } else if (error.statusCode === 429) {\n      throw new RuntimeError(\"Too many requests\");\n    }\n    throw new RuntimeError(`Unknown request failure ${error.statusCode}`);\n  }\n};\n\n/**\n * @typedef {Object} RealityDataExtent\n * @private\n * @property {{latitude: number, longitude: number}} southWest\n * @property {{latitude: number, longitude: number}} northEast\n */\n\n/**\n * @typedef {Object} RealityDataRepresentation\n * @private\n * @property {string} id \"95d8dccd-d89e-4287-bb5f-3219acbc71ae\",\n * @property {string} displayName \"Name of reality data\",\n * @property {string} dataset \"Dataset\",\n * @property {string} group \"73d09423-28c3-4fdb-ab4a-03a47a5b04f8\",\n * @property {string} description \"Description of reality data\",\n * @property {string} rootDocument \"Directory/SubDirectory/realityData.3mx\",\n * @property {number} size 6521212,\n * @property {string} classification \"Model\",\n * @property {ITwinPlatform.RealityDataType} type \"3MX\",\n * @property {{startDateTime: string, endDateTime: string, acquirer: string}} acquisition\n * @property {RealityDataExtent} extent\n * @property {boolean} authoring false,\n * @property {string} dataCenterLocation \"North Europe\",\n * @property {string} modifiedDateTime \"2021-04-09T19:03:12Z\",\n * @property {string} lastAccessedDateTime \"2021-04-09T00:00:00Z\",\n * @property {string} createdDateTime \"2021-02-22T20:03:40Z\",\n * @property {string} ownerId \"f1d49cc7-f9b3-494f-9c67-563ea5597063\",\n */\n\n/**\n * Load the full metadata for the given iTwin id and reality data id.\n *\n * @private\n *\n * @param {string} iTwinId The id of the iTwin to load data from\n * @param {string} realityDataId The id of the reality data to load\n * @returns {Promise<RealityDataRepresentation>}\n */\nITwinPlatform.getRealityDataMetadata = async function (iTwinId, realityDataId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"iTwinId\", iTwinId);\n  Check.typeOf.string(\"realityDataId\", realityDataId);\n  if (!defined(ITwinPlatform.defaultAccessToken)) {\n    throw new DeveloperError(\"Must set ITwinPlatform.defaultAccessToken first\");\n  }\n  //>>includeEnd('debug')\n\n  const resource = new Resource({\n    url: `${ITwinPlatform.apiEndpoint}reality-management/reality-data/${realityDataId}`,\n    headers: {\n      Authorization: `Bearer ${ITwinPlatform.defaultAccessToken}`,\n      Accept: \"application/vnd.bentley.itwin-platform.v1+json\",\n    },\n    queryParameters: { iTwinId: iTwinId },\n  });\n\n  try {\n    const response = await resource.fetchJson();\n    return response.realityData;\n  } catch (error) {\n    const result = JSON.parse(error.response);\n    if (error.statusCode === 401) {\n      throw new RuntimeError(\n        `Unauthorized, bad token, wrong scopes or headers bad. ${result.error.details[0].code}`,\n      );\n    } else if (error.statusCode === 403) {\n      console.error(result.error.code, result.error.message);\n      throw new RuntimeError(\"Not allowed, forbidden\");\n    } else if (error.statusCode === 404) {\n      throw new RuntimeError(\n        `Reality data not found: ${iTwinId}, ${realityDataId}`,\n      );\n    } else if (error.statusCode === 422) {\n      throw new RuntimeError(\n        `Unprocessable Entity:${result.error.code} ${result.error.message}`,\n      );\n    } else if (error.statusCode === 429) {\n      throw new RuntimeError(\"Too many requests\");\n    }\n    throw new RuntimeError(`Unknown request failure ${error.statusCode}`);\n  }\n};\n\n/**\n * Request the access url for the given iTwin id, reality data id and root document.\n * The root document can be requested from the list using <code>return=representation</code>\n * or the metadata route from {@link ITwinPlatform.getRealityDataMetadata}\n *\n * @private\n *\n * @param {string} iTwinId The id of the iTwin to load data from\n * @param {string} realityDataId The id of the reality data to load\n * @param {string} rootDocument The path of the root document for this reality data\n * @returns {Promise<string>}\n */\nITwinPlatform.getRealityDataURL = async function (\n  iTwinId,\n  realityDataId,\n  rootDocument,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"iTwinId\", iTwinId);\n  Check.typeOf.string(\"realityDataId\", realityDataId);\n  Check.typeOf.string(\"rootDocument\", rootDocument);\n  if (!defined(ITwinPlatform.defaultAccessToken)) {\n    throw new DeveloperError(\"Must set ITwinPlatform.defaultAccessToken first\");\n  }\n  //>>includeEnd('debug')\n\n  const resource = new Resource({\n    url: `${ITwinPlatform.apiEndpoint}reality-management/reality-data/${realityDataId}/readaccess`,\n    headers: {\n      Authorization: `Bearer ${ITwinPlatform.defaultAccessToken}`,\n      Accept: \"application/vnd.bentley.itwin-platform.v1+json\",\n    },\n    queryParameters: { iTwinId: iTwinId },\n  });\n\n  try {\n    const result = await resource.fetchJson();\n\n    const containerUrl = result._links.containerUrl.href;\n    const tilesetUrl = new URL(containerUrl);\n    tilesetUrl.pathname = `${tilesetUrl.pathname}/${rootDocument}`;\n\n    return tilesetUrl.toString();\n  } catch (error) {\n    const result = JSON.parse(error.response);\n    if (error.statusCode === 401) {\n      throw new RuntimeError(\n        `Unauthorized, bad token, wrong scopes or headers bad. ${result.error.details[0].code}`,\n      );\n    } else if (error.statusCode === 403) {\n      console.error(result.error.code, result.error.message);\n      throw new RuntimeError(\"Not allowed, forbidden\");\n    } else if (error.statusCode === 404) {\n      throw new RuntimeError(\n        `Reality data not found: ${iTwinId}, ${realityDataId}`,\n      );\n    } else if (error.statusCode === 422) {\n      throw new RuntimeError(\n        `Unprocessable Entity:${result.error.code} ${result.error.message}`,\n      );\n    } else if (error.statusCode === 429) {\n      throw new RuntimeError(\"Too many requests\");\n    }\n    throw new RuntimeError(`Unknown request failure ${error.statusCode}`);\n  }\n};\n\nexport default ITwinPlatform;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}