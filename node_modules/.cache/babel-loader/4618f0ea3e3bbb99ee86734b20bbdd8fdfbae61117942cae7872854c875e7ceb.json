{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Controls per-shape behavior for culling and rendering voxel grids.\n * This type describes an interface and is not intended to be instantiated directly.\n *\n * @alias VoxelShape\n * @constructor\n *\n * @see VoxelBoxShape\n * @see VoxelEllipsoidShape\n * @see VoxelCylinderShape\n * @see VoxelShapeType\n *\n * @private\n */\nfunction VoxelShape() {\n  DeveloperError.throwInstantiationError();\n}\nObject.defineProperties(VoxelShape.prototype, {\n  /**\n   * An oriented bounding box containing the bounded shape.\n   * The update function must be called before accessing this value.\n   *\n   * @memberof VoxelShape.prototype\n   * @type {OrientedBoundingBox}\n   * @readonly\n   */\n  orientedBoundingBox: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * A bounding sphere containing the bounded shape.\n   * The update function must be called before accessing this value.\n   *\n   * @memberof VoxelShape.prototype\n   * @type {BoundingSphere}\n   * @readonly\n   */\n  boundingSphere: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * A transformation matrix containing the bounded shape.\n   * The update function must be called before accessing this value.\n   *\n   * @memberof VoxelShape.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  boundTransform: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * A transformation matrix containing the shape, ignoring the bounds.\n   * The update function must be called before accessing this value.\n   *\n   * @memberof VoxelShape.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  shapeTransform: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * @type {Object<string, any>}\n   * @readonly\n   */\n  shaderUniforms: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * @type {Object<string, any>}\n   * @readonly\n   */\n  shaderDefines: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * The maximum number of intersections against the shape for any ray direction.\n   * @type {number}\n   * @readonly\n   */\n  shaderMaximumIntersectionsLength: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n\n/**\n * Update the shape's state.\n *\n * @param {Matrix4} modelMatrix The model matrix.\n * @param {Cartesian3} minBounds The minimum bounds.\n * @param {Cartesian3} maxBounds The maximum bounds.\n * @returns {boolean} Whether the shape is visible.\n */\nVoxelShape.prototype.update = DeveloperError.throwInstantiationError;\n\n/**\n * Computes an oriented bounding box for a specified tile.\n * The update function must be called before calling this function.\n *\n * @param {number} tileLevel The tile's level.\n * @param {number} tileX The tile's x coordinate.\n * @param {number} tileY The tile's y coordinate.\n * @param {number} tileZ The tile's z coordinate.\n * @param {OrientedBoundingBox} result The oriented bounding box that will be set to enclose the specified tile.\n * @returns {OrientedBoundingBox} The oriented bounding box.\n */\nVoxelShape.prototype.computeOrientedBoundingBoxForTile = DeveloperError.throwInstantiationError;\n\n/**\n * Computes an oriented bounding box for a specified sample within a specified tile.\n * The update function must be called before calling this function.\n *\n * @param {SpatialNode} spatialNode The spatial node containing the sample\n * @param {Cartesian3} tileDimensions The size of the tile in number of samples, before padding\n * @param {Cartesian3} tileUv The sample coordinate within the tile\n * @param {OrientedBoundingBox} result The oriented bounding box that will be set to enclose the specified sample\n * @returns {OrientedBoundingBox} The oriented bounding box.\n */\nVoxelShape.prototype.computeOrientedBoundingBoxForSample = DeveloperError.throwInstantiationError;\n\n/**\n * Defines the minimum bounds of the shape. The meaning can vary per-shape.\n *\n * @type {Cartesian3}\n * @constant\n * @readonly\n *\n * @private\n */\nVoxelShape.DefaultMinBounds = DeveloperError.throwInstantiationError;\n\n/**\n * Defines the maximum bounds of the shape. The meaning can vary per-shape.\n *\n * @type {Cartesian3}\n * @constant\n * @readonly\n *\n * @private\n */\nVoxelShape.DefaultMaxBounds = DeveloperError.throwInstantiationError;\nexport default VoxelShape;","map":{"version":3,"names":["DeveloperError","VoxelShape","throwInstantiationError","Object","defineProperties","prototype","orientedBoundingBox","get","boundingSphere","boundTransform","shapeTransform","shaderUniforms","shaderDefines","shaderMaximumIntersectionsLength","update","computeOrientedBoundingBoxForTile","computeOrientedBoundingBoxForSample","DefaultMinBounds","DefaultMaxBounds"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/VoxelShape.js"],"sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Controls per-shape behavior for culling and rendering voxel grids.\n * This type describes an interface and is not intended to be instantiated directly.\n *\n * @alias VoxelShape\n * @constructor\n *\n * @see VoxelBoxShape\n * @see VoxelEllipsoidShape\n * @see VoxelCylinderShape\n * @see VoxelShapeType\n *\n * @private\n */\nfunction VoxelShape() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(VoxelShape.prototype, {\n  /**\n   * An oriented bounding box containing the bounded shape.\n   * The update function must be called before accessing this value.\n   *\n   * @memberof VoxelShape.prototype\n   * @type {OrientedBoundingBox}\n   * @readonly\n   */\n  orientedBoundingBox: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * A bounding sphere containing the bounded shape.\n   * The update function must be called before accessing this value.\n   *\n   * @memberof VoxelShape.prototype\n   * @type {BoundingSphere}\n   * @readonly\n   */\n  boundingSphere: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * A transformation matrix containing the bounded shape.\n   * The update function must be called before accessing this value.\n   *\n   * @memberof VoxelShape.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  boundTransform: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * A transformation matrix containing the shape, ignoring the bounds.\n   * The update function must be called before accessing this value.\n   *\n   * @memberof VoxelShape.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  shapeTransform: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * @type {Object<string, any>}\n   * @readonly\n   */\n  shaderUniforms: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * @type {Object<string, any>}\n   * @readonly\n   */\n  shaderDefines: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * The maximum number of intersections against the shape for any ray direction.\n   * @type {number}\n   * @readonly\n   */\n  shaderMaximumIntersectionsLength: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Update the shape's state.\n *\n * @param {Matrix4} modelMatrix The model matrix.\n * @param {Cartesian3} minBounds The minimum bounds.\n * @param {Cartesian3} maxBounds The maximum bounds.\n * @returns {boolean} Whether the shape is visible.\n */\nVoxelShape.prototype.update = DeveloperError.throwInstantiationError;\n\n/**\n * Computes an oriented bounding box for a specified tile.\n * The update function must be called before calling this function.\n *\n * @param {number} tileLevel The tile's level.\n * @param {number} tileX The tile's x coordinate.\n * @param {number} tileY The tile's y coordinate.\n * @param {number} tileZ The tile's z coordinate.\n * @param {OrientedBoundingBox} result The oriented bounding box that will be set to enclose the specified tile.\n * @returns {OrientedBoundingBox} The oriented bounding box.\n */\nVoxelShape.prototype.computeOrientedBoundingBoxForTile =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Computes an oriented bounding box for a specified sample within a specified tile.\n * The update function must be called before calling this function.\n *\n * @param {SpatialNode} spatialNode The spatial node containing the sample\n * @param {Cartesian3} tileDimensions The size of the tile in number of samples, before padding\n * @param {Cartesian3} tileUv The sample coordinate within the tile\n * @param {OrientedBoundingBox} result The oriented bounding box that will be set to enclose the specified sample\n * @returns {OrientedBoundingBox} The oriented bounding box.\n */\nVoxelShape.prototype.computeOrientedBoundingBoxForSample =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Defines the minimum bounds of the shape. The meaning can vary per-shape.\n *\n * @type {Cartesian3}\n * @constant\n * @readonly\n *\n * @private\n */\nVoxelShape.DefaultMinBounds = DeveloperError.throwInstantiationError;\n\n/**\n * Defines the maximum bounds of the shape. The meaning can vary per-shape.\n *\n * @type {Cartesian3}\n * @constant\n * @readonly\n *\n * @private\n */\nVoxelShape.DefaultMaxBounds = DeveloperError.throwInstantiationError;\n\nexport default VoxelShape;\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,2BAA2B;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAA,EAAG;EACpBD,cAAc,CAACE,uBAAuB,CAAC,CAAC;AAC1C;AAEAC,MAAM,CAACC,gBAAgB,CAACH,UAAU,CAACI,SAAS,EAAE;EAC5C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,mBAAmB,EAAE;IACnBC,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,cAAc,EAAE;IACdD,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,cAAc,EAAE;IACdF,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,cAAc,EAAE;IACdH,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;EACES,cAAc,EAAE;IACdJ,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;EACEU,aAAa,EAAE;IACbL,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;EACEW,gCAAgC,EAAE;IAChCN,GAAG,EAAEP,cAAc,CAACE;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,UAAU,CAACI,SAAS,CAACS,MAAM,GAAGd,cAAc,CAACE,uBAAuB;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,UAAU,CAACI,SAAS,CAACU,iCAAiC,GACpDf,cAAc,CAACE,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,UAAU,CAACI,SAAS,CAACW,mCAAmC,GACtDhB,cAAc,CAACE,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,UAAU,CAACgB,gBAAgB,GAAGjB,cAAc,CAACE,uBAAuB;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,UAAU,CAACiB,gBAAgB,GAAGlB,cAAc,CAACE,uBAAuB;AAEpE,eAAeD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}