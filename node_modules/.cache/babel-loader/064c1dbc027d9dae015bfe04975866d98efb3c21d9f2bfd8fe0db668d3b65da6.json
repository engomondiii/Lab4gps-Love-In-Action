{"ast":null,"code":"import Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport defined from \"../Core/defined.js\";\nimport Resource from \"../Core/Resource.js\";\nimport ITwinPlatform from \"../Core/ITwinPlatform.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport Check from \"../Core/Check.js\";\n\n/**\n * Methods for loading iTwin platform data into CesiumJS\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @see ITwinPlatform\n * @namespace ITwinData\n */\nconst ITwinData = {};\n\n/**\n * Create a {@link Cesium3DTileset} for the given iModel id using iTwin's Mesh Export API.\n *\n * If there is not a completed export available for the given iModel id, the returned promise will resolve to <code>undefined</code>.\n * We recommend waiting 10-20 seconds and trying to load the tileset again.\n * If all exports are Invalid this will throw an error.\n *\n * @example\n * const tileset = await Cesium.ITwinData.createTilesetFromIModelId(iModelId);\n * if (Cesium.defined(tileset)) {\n *   viewer.scene.primitives.add(tileset);\n * }\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @param {string} iModelId The id of the iModel to load\n * @param {Cesium3DTileset.ConstructorOptions} [options] Object containing options to pass to the internally created {@link Cesium3DTileset}.\n * @returns {Promise<Cesium3DTileset | undefined>} A promise that will resolve to the created 3D tileset or <code>undefined</code> if there is no completed export for the given iModel id\n *\n * @throws {RuntimeError} If all exports for the given iModel are Invalid\n * @throws {RuntimeError} If the iTwin API request is not successful\n */\nITwinData.createTilesetFromIModelId = async function (iModelId, options) {\n  const {\n    exports\n  } = await ITwinPlatform.getExports(iModelId);\n  if (exports.length > 0 && exports.every(exportObj => {\n    return exportObj.status === ITwinPlatform.ExportStatus.Invalid;\n  })) {\n    throw new RuntimeError(`All exports for this iModel are Invalid: ${iModelId}`);\n  }\n  const completeExport = exports.find(exportObj => {\n    return exportObj.status === ITwinPlatform.ExportStatus.Complete;\n  });\n  if (!defined(completeExport)) {\n    return;\n  }\n\n  // Convert the link to the tileset url while preserving the search paramaters\n  // This link is only valid 1 hour\n  const baseUrl = new URL(completeExport._links.mesh.href);\n  baseUrl.pathname = `${baseUrl.pathname}/tileset.json`;\n  const tilesetUrl = baseUrl.toString();\n  const resource = new Resource({\n    url: tilesetUrl\n  });\n  return Cesium3DTileset.fromUrl(resource, options);\n};\n\n/**\n * Create a tileset for the specified reality data id. This function only works\n * with 3D Tiles meshes and point clouds.\n *\n * If the <code>type</code> or <code>rootDocument</code> are not provided this function\n * will first request the full metadata for the specified reality data to fill these values.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @param {string} iTwinId The id of the iTwin to load data from\n * @param {string} realityDataId The id of the reality data to load\n * @param {ITwinPlatform.RealityDataType} [type] The type of this reality data\n * @param {string} [rootDocument] The path of the root document for this reality data\n * @returns {Promise<Cesium3DTileset>}\n */\nITwinData.createTilesetForRealityDataId = async function (iTwinId, realityDataId, type, rootDocument) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"iTwinId\", iTwinId);\n  Check.typeOf.string(\"realityDataId\", realityDataId);\n  if (defined(type)) {\n    Check.typeOf.string(\"type\", type);\n  }\n  if (defined(rootDocument)) {\n    Check.typeOf.string(\"rootDocument\", rootDocument);\n  }\n  //>>includeEnd('debug')\n\n  if (!defined(type) || !defined(rootDocument)) {\n    const metadata = await ITwinPlatform.getRealityDataMetadata(iTwinId, realityDataId);\n    rootDocument = metadata.rootDocument;\n    type = metadata.type;\n  }\n  const supportedRealityDataTypes = [ITwinPlatform.RealityDataType.Cesium3DTiles, ITwinPlatform.RealityDataType.PNTS, ITwinPlatform.RealityDataType.RealityMesh3DTiles, ITwinPlatform.RealityDataType.Terrain3DTiles];\n  if (!supportedRealityDataTypes.includes(type)) {\n    throw new RuntimeError(`Reality data type is not a mesh type: ${type}`);\n  }\n  const tilesetAccessUrl = await ITwinPlatform.getRealityDataURL(iTwinId, realityDataId, rootDocument);\n  return Cesium3DTileset.fromUrl(tilesetAccessUrl, {\n    maximumScreenSpaceError: 4\n  });\n};\nexport default ITwinData;","map":{"version":3,"names":["Cesium3DTileset","defined","Resource","ITwinPlatform","RuntimeError","Check","ITwinData","createTilesetFromIModelId","iModelId","options","exports","getExports","length","every","exportObj","status","ExportStatus","Invalid","completeExport","find","Complete","baseUrl","URL","_links","mesh","href","pathname","tilesetUrl","toString","resource","url","fromUrl","createTilesetForRealityDataId","iTwinId","realityDataId","type","rootDocument","typeOf","string","metadata","getRealityDataMetadata","supportedRealityDataTypes","RealityDataType","Cesium3DTiles","PNTS","RealityMesh3DTiles","Terrain3DTiles","includes","tilesetAccessUrl","getRealityDataURL","maximumScreenSpaceError"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ITwinData.js"],"sourcesContent":["import Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport defined from \"../Core/defined.js\";\nimport Resource from \"../Core/Resource.js\";\nimport ITwinPlatform from \"../Core/ITwinPlatform.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport Check from \"../Core/Check.js\";\n\n/**\n * Methods for loading iTwin platform data into CesiumJS\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @see ITwinPlatform\n * @namespace ITwinData\n */\nconst ITwinData = {};\n\n/**\n * Create a {@link Cesium3DTileset} for the given iModel id using iTwin's Mesh Export API.\n *\n * If there is not a completed export available for the given iModel id, the returned promise will resolve to <code>undefined</code>.\n * We recommend waiting 10-20 seconds and trying to load the tileset again.\n * If all exports are Invalid this will throw an error.\n *\n * @example\n * const tileset = await Cesium.ITwinData.createTilesetFromIModelId(iModelId);\n * if (Cesium.defined(tileset)) {\n *   viewer.scene.primitives.add(tileset);\n * }\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @param {string} iModelId The id of the iModel to load\n * @param {Cesium3DTileset.ConstructorOptions} [options] Object containing options to pass to the internally created {@link Cesium3DTileset}.\n * @returns {Promise<Cesium3DTileset | undefined>} A promise that will resolve to the created 3D tileset or <code>undefined</code> if there is no completed export for the given iModel id\n *\n * @throws {RuntimeError} If all exports for the given iModel are Invalid\n * @throws {RuntimeError} If the iTwin API request is not successful\n */\nITwinData.createTilesetFromIModelId = async function (iModelId, options) {\n  const { exports } = await ITwinPlatform.getExports(iModelId);\n\n  if (\n    exports.length > 0 &&\n    exports.every((exportObj) => {\n      return exportObj.status === ITwinPlatform.ExportStatus.Invalid;\n    })\n  ) {\n    throw new RuntimeError(\n      `All exports for this iModel are Invalid: ${iModelId}`,\n    );\n  }\n\n  const completeExport = exports.find((exportObj) => {\n    return exportObj.status === ITwinPlatform.ExportStatus.Complete;\n  });\n\n  if (!defined(completeExport)) {\n    return;\n  }\n\n  // Convert the link to the tileset url while preserving the search paramaters\n  // This link is only valid 1 hour\n  const baseUrl = new URL(completeExport._links.mesh.href);\n  baseUrl.pathname = `${baseUrl.pathname}/tileset.json`;\n  const tilesetUrl = baseUrl.toString();\n\n  const resource = new Resource({\n    url: tilesetUrl,\n  });\n\n  return Cesium3DTileset.fromUrl(resource, options);\n};\n\n/**\n * Create a tileset for the specified reality data id. This function only works\n * with 3D Tiles meshes and point clouds.\n *\n * If the <code>type</code> or <code>rootDocument</code> are not provided this function\n * will first request the full metadata for the specified reality data to fill these values.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n *\n * @param {string} iTwinId The id of the iTwin to load data from\n * @param {string} realityDataId The id of the reality data to load\n * @param {ITwinPlatform.RealityDataType} [type] The type of this reality data\n * @param {string} [rootDocument] The path of the root document for this reality data\n * @returns {Promise<Cesium3DTileset>}\n */\nITwinData.createTilesetForRealityDataId = async function (\n  iTwinId,\n  realityDataId,\n  type,\n  rootDocument,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"iTwinId\", iTwinId);\n  Check.typeOf.string(\"realityDataId\", realityDataId);\n  if (defined(type)) {\n    Check.typeOf.string(\"type\", type);\n  }\n  if (defined(rootDocument)) {\n    Check.typeOf.string(\"rootDocument\", rootDocument);\n  }\n  //>>includeEnd('debug')\n\n  if (!defined(type) || !defined(rootDocument)) {\n    const metadata = await ITwinPlatform.getRealityDataMetadata(\n      iTwinId,\n      realityDataId,\n    );\n    rootDocument = metadata.rootDocument;\n    type = metadata.type;\n  }\n\n  const supportedRealityDataTypes = [\n    ITwinPlatform.RealityDataType.Cesium3DTiles,\n    ITwinPlatform.RealityDataType.PNTS,\n    ITwinPlatform.RealityDataType.RealityMesh3DTiles,\n    ITwinPlatform.RealityDataType.Terrain3DTiles,\n  ];\n\n  if (!supportedRealityDataTypes.includes(type)) {\n    throw new RuntimeError(`Reality data type is not a mesh type: ${type}`);\n  }\n\n  const tilesetAccessUrl = await ITwinPlatform.getRealityDataURL(\n    iTwinId,\n    realityDataId,\n    rootDocument,\n  );\n\n  return Cesium3DTileset.fromUrl(tilesetAccessUrl, {\n    maximumScreenSpaceError: 4,\n  });\n};\n\nexport default ITwinData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}