{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {object} EllipsoidGraphics.ConstructorOptions\n *\n * Initialization options for the EllipsoidGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the ellipsoid.\n * @property {Property | Cartesian3} [radii] A {@link Cartesian3} Property specifying the radii of the ellipsoid.\n * @property {Property | Cartesian3} [innerRadii] A {@link Cartesian3} Property specifying the inner radii of the ellipsoid.\n * @property {Property | number} [minimumClock=0.0] A Property specifying the minimum clock angle of the ellipsoid.\n * @property {Property | number} [maximumClock=2*PI] A Property specifying the maximum clock angle of the ellipsoid.\n * @property {Property | number} [minimumCone=0.0] A Property specifying the minimum cone angle of the ellipsoid.\n * @property {Property | number} [maximumCone=PI] A Property specifying the maximum cone angle of the ellipsoid.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height from the entity position is relative to.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the ellipsoid is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the ellipsoid.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the ellipsoid is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | number} [stackPartitions=64] A Property specifying the number of stacks.\n * @property {Property | number} [slicePartitions=64] A Property specifying the number of radial slices.\n * @property {Property | number} [subdivisions=128] A Property specifying the number of samples per outline ring, determining the granularity of the curvature.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the ellipsoid casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this ellipsoid will be displayed.\n */\n\n/**\n * Describe an ellipsoid or sphere.  The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias EllipsoidGraphics\n * @constructor\n *\n * @param {EllipsoidGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Spheres%20and%20Ellipsoids.html|Cesium Sandcastle Spheres and Ellipsoids Demo}\n */\nfunction EllipsoidGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._radii = undefined;\n  this._radiiSubscription = undefined;\n  this._innerRadii = undefined;\n  this._innerRadiiSubscription = undefined;\n  this._minimumClock = undefined;\n  this._minimumClockSubscription = undefined;\n  this._maximumClock = undefined;\n  this._maximumClockSubscription = undefined;\n  this._minimumCone = undefined;\n  this._minimumConeSubscription = undefined;\n  this._maximumCone = undefined;\n  this._maximumConeSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._stackPartitions = undefined;\n  this._stackPartitionsSubscription = undefined;\n  this._slicePartitions = undefined;\n  this._slicePartitionsSubscription = undefined;\n  this._subdivisions = undefined;\n  this._subdivisionsSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\nObject.defineProperties(EllipsoidGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof EllipsoidGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n  /**\n   * Gets or sets the {@link Cartesian3} {@link Property} specifying the radii of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   */\n  radii: createPropertyDescriptor(\"radii\"),\n  /**\n   * Gets or sets the {@link Cartesian3} {@link Property} specifying the inner radii of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default radii\n   */\n  innerRadii: createPropertyDescriptor(\"innerRadii\"),\n  /**\n   * Gets or sets the Property specifying the minimum clock angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumClock: createPropertyDescriptor(\"minimumClock\"),\n  /**\n   * Gets or sets the Property specifying the maximum clock angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 2*PI\n   */\n  maximumClock: createPropertyDescriptor(\"maximumClock\"),\n  /**\n   * Gets or sets the Property specifying the minimum cone angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumCone: createPropertyDescriptor(\"minimumCone\"),\n  /**\n   * Gets or sets the Property specifying the maximum cone angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default PI\n   */\n  maximumCone: createPropertyDescriptor(\"maximumCone\"),\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n  /**\n   * Gets or sets the boolean Property specifying whether the ellipsoid is filled with the provided material.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n  /**\n   * Gets or sets the Property specifying the material used to fill the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n  /**\n   * Gets or sets the Property specifying whether the ellipsoid is outlined.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n  /**\n   * Gets or sets the Property specifying the number of stacks.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 64\n   */\n  stackPartitions: createPropertyDescriptor(\"stackPartitions\"),\n  /**\n   * Gets or sets the Property specifying the number of radial slices per 360 degrees.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 64\n   */\n  slicePartitions: createPropertyDescriptor(\"slicePartitions\"),\n  /**\n   * Gets or sets the Property specifying the number of samples per outline ring, determining the granularity of the curvature.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 128\n   */\n  subdivisions: createPropertyDescriptor(\"subdivisions\"),\n  /**\n   * Get or sets the enum Property specifying whether the ellipsoid\n   * casts or receives shadows from light sources.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this ellipsoid will be displayed.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\")\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {EllipsoidGraphics} [result] The object onto which to store the result.\n * @returns {EllipsoidGraphics} The modified result parameter or a new instance if one was not provided.\n */\nEllipsoidGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new EllipsoidGraphics(this);\n  }\n  result.show = this.show;\n  result.radii = this.radii;\n  result.innerRadii = this.innerRadii;\n  result.minimumClock = this.minimumClock;\n  result.maximumClock = this.maximumClock;\n  result.minimumCone = this.minimumCone;\n  result.maximumCone = this.maximumCone;\n  result.heightReference = this.heightReference;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.stackPartitions = this.stackPartitions;\n  result.slicePartitions = this.slicePartitions;\n  result.subdivisions = this.subdivisions;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {EllipsoidGraphics} source The object to be merged into this object.\n */\nEllipsoidGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.radii = defaultValue(this.radii, source.radii);\n  this.innerRadii = defaultValue(this.innerRadii, source.innerRadii);\n  this.minimumClock = defaultValue(this.minimumClock, source.minimumClock);\n  this.maximumClock = defaultValue(this.maximumClock, source.maximumClock);\n  this.minimumCone = defaultValue(this.minimumCone, source.minimumCone);\n  this.maximumCone = defaultValue(this.maximumCone, source.maximumCone);\n  this.heightReference = defaultValue(this.heightReference, source.heightReference);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.stackPartitions = defaultValue(this.stackPartitions, source.stackPartitions);\n  this.slicePartitions = defaultValue(this.slicePartitions, source.slicePartitions);\n  this.subdivisions = defaultValue(this.subdivisions, source.subdivisions);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n};\nexport default EllipsoidGraphics;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","EllipsoidGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_radii","_radiiSubscription","_innerRadii","_innerRadiiSubscription","_minimumClock","_minimumClockSubscription","_maximumClock","_maximumClockSubscription","_minimumCone","_minimumConeSubscription","_maximumCone","_maximumConeSubscription","_heightReference","_heightReferenceSubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_stackPartitions","_stackPartitionsSubscription","_slicePartitions","_slicePartitionsSubscription","_subdivisions","_subdivisionsSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","radii","innerRadii","minimumClock","maximumClock","minimumCone","maximumCone","heightReference","fill","material","outline","outlineColor","outlineWidth","stackPartitions","slicePartitions","subdivisions","shadows","distanceDisplayCondition","clone","result","source"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/EllipsoidGraphics.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {object} EllipsoidGraphics.ConstructorOptions\n *\n * Initialization options for the EllipsoidGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the ellipsoid.\n * @property {Property | Cartesian3} [radii] A {@link Cartesian3} Property specifying the radii of the ellipsoid.\n * @property {Property | Cartesian3} [innerRadii] A {@link Cartesian3} Property specifying the inner radii of the ellipsoid.\n * @property {Property | number} [minimumClock=0.0] A Property specifying the minimum clock angle of the ellipsoid.\n * @property {Property | number} [maximumClock=2*PI] A Property specifying the maximum clock angle of the ellipsoid.\n * @property {Property | number} [minimumCone=0.0] A Property specifying the minimum cone angle of the ellipsoid.\n * @property {Property | number} [maximumCone=PI] A Property specifying the maximum cone angle of the ellipsoid.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height from the entity position is relative to.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the ellipsoid is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the ellipsoid.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the ellipsoid is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | number} [stackPartitions=64] A Property specifying the number of stacks.\n * @property {Property | number} [slicePartitions=64] A Property specifying the number of radial slices.\n * @property {Property | number} [subdivisions=128] A Property specifying the number of samples per outline ring, determining the granularity of the curvature.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the ellipsoid casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this ellipsoid will be displayed.\n */\n\n/**\n * Describe an ellipsoid or sphere.  The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias EllipsoidGraphics\n * @constructor\n *\n * @param {EllipsoidGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Spheres%20and%20Ellipsoids.html|Cesium Sandcastle Spheres and Ellipsoids Demo}\n */\nfunction EllipsoidGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._radii = undefined;\n  this._radiiSubscription = undefined;\n  this._innerRadii = undefined;\n  this._innerRadiiSubscription = undefined;\n  this._minimumClock = undefined;\n  this._minimumClockSubscription = undefined;\n  this._maximumClock = undefined;\n  this._maximumClockSubscription = undefined;\n  this._minimumCone = undefined;\n  this._minimumConeSubscription = undefined;\n  this._maximumCone = undefined;\n  this._maximumConeSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._stackPartitions = undefined;\n  this._stackPartitionsSubscription = undefined;\n  this._slicePartitions = undefined;\n  this._slicePartitionsSubscription = undefined;\n  this._subdivisions = undefined;\n  this._subdivisionsSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(EllipsoidGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof EllipsoidGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} {@link Property} specifying the radii of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   */\n  radii: createPropertyDescriptor(\"radii\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} {@link Property} specifying the inner radii of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default radii\n   */\n  innerRadii: createPropertyDescriptor(\"innerRadii\"),\n\n  /**\n   * Gets or sets the Property specifying the minimum clock angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumClock: createPropertyDescriptor(\"minimumClock\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum clock angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 2*PI\n   */\n  maximumClock: createPropertyDescriptor(\"maximumClock\"),\n\n  /**\n   * Gets or sets the Property specifying the minimum cone angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumCone: createPropertyDescriptor(\"minimumCone\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum cone angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default PI\n   */\n  maximumCone: createPropertyDescriptor(\"maximumCone\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the ellipsoid is filled with the provided material.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the ellipsoid is outlined.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the Property specifying the number of stacks.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 64\n   */\n  stackPartitions: createPropertyDescriptor(\"stackPartitions\"),\n\n  /**\n   * Gets or sets the Property specifying the number of radial slices per 360 degrees.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 64\n   */\n  slicePartitions: createPropertyDescriptor(\"slicePartitions\"),\n\n  /**\n   * Gets or sets the Property specifying the number of samples per outline ring, determining the granularity of the curvature.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 128\n   */\n  subdivisions: createPropertyDescriptor(\"subdivisions\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the ellipsoid\n   * casts or receives shadows from light sources.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this ellipsoid will be displayed.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\",\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {EllipsoidGraphics} [result] The object onto which to store the result.\n * @returns {EllipsoidGraphics} The modified result parameter or a new instance if one was not provided.\n */\nEllipsoidGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new EllipsoidGraphics(this);\n  }\n  result.show = this.show;\n  result.radii = this.radii;\n  result.innerRadii = this.innerRadii;\n  result.minimumClock = this.minimumClock;\n  result.maximumClock = this.maximumClock;\n  result.minimumCone = this.minimumCone;\n  result.maximumCone = this.maximumCone;\n  result.heightReference = this.heightReference;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.stackPartitions = this.stackPartitions;\n  result.slicePartitions = this.slicePartitions;\n  result.subdivisions = this.subdivisions;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {EllipsoidGraphics} source The object to be merged into this object.\n */\nEllipsoidGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.radii = defaultValue(this.radii, source.radii);\n  this.innerRadii = defaultValue(this.innerRadii, source.innerRadii);\n  this.minimumClock = defaultValue(this.minimumClock, source.minimumClock);\n  this.maximumClock = defaultValue(this.maximumClock, source.maximumClock);\n  this.minimumCone = defaultValue(this.minimumCone, source.minimumCone);\n  this.maximumCone = defaultValue(this.maximumCone, source.maximumCone);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference,\n  );\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.stackPartitions = defaultValue(\n    this.stackPartitions,\n    source.stackPartitions,\n  );\n  this.slicePartitions = defaultValue(\n    this.slicePartitions,\n    source.slicePartitions,\n  );\n  this.subdivisions = defaultValue(this.subdivisions, source.subdivisions);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition,\n  );\n};\nexport default EllipsoidGraphics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}