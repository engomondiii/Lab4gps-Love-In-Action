{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Defines a heading angle, pitch angle, and range in a local frame.\n * Heading is the rotation from the local east direction where a positive angle is increasing southward.\n * Pitch is the rotation from the local xy-plane. Positive pitch angles are above the plane. Negative pitch\n * angles are below the plane. Range is the distance from the center of the frame.\n * @alias HeadingPitchRange\n * @constructor\n *\n * @param {number} [heading=0.0] The heading angle in radians.\n * @param {number} [pitch=0.0] The pitch angle in radians.\n * @param {number} [range=0.0] The distance from the center in meters.\n */\nfunction HeadingPitchRange(heading, pitch, range) {\n  /**\n   * Heading is the rotation from the local east direction where a positive angle is increasing southward.\n   * @type {number}\n   * @default 0.0\n   */\n  this.heading = defaultValue(heading, 0.0);\n\n  /**\n   * Pitch is the rotation from the local xy-plane. Positive pitch angles\n   * are above the plane. Negative pitch angles are below the plane.\n   * @type {number}\n   * @default 0.0\n   */\n  this.pitch = defaultValue(pitch, 0.0);\n\n  /**\n   * Range is the distance from the center of the local frame.\n   * @type {number}\n   * @default 0.0\n   */\n  this.range = defaultValue(range, 0.0);\n}\n\n/**\n * Duplicates a HeadingPitchRange instance.\n *\n * @param {HeadingPitchRange} hpr The HeadingPitchRange to duplicate.\n * @param {HeadingPitchRange} [result] The object onto which to store the result.\n * @returns {HeadingPitchRange} The modified result parameter or a new HeadingPitchRange instance if one was not provided. (Returns undefined if hpr is undefined)\n */\nHeadingPitchRange.clone = function (hpr, result) {\n  if (!defined(hpr)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    result = new HeadingPitchRange();\n  }\n  result.heading = hpr.heading;\n  result.pitch = hpr.pitch;\n  result.range = hpr.range;\n  return result;\n};\nexport default HeadingPitchRange;","map":{"version":3,"names":["defaultValue","defined","HeadingPitchRange","heading","pitch","range","clone","hpr","result","undefined"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/HeadingPitchRange.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Defines a heading angle, pitch angle, and range in a local frame.\n * Heading is the rotation from the local east direction where a positive angle is increasing southward.\n * Pitch is the rotation from the local xy-plane. Positive pitch angles are above the plane. Negative pitch\n * angles are below the plane. Range is the distance from the center of the frame.\n * @alias HeadingPitchRange\n * @constructor\n *\n * @param {number} [heading=0.0] The heading angle in radians.\n * @param {number} [pitch=0.0] The pitch angle in radians.\n * @param {number} [range=0.0] The distance from the center in meters.\n */\nfunction HeadingPitchRange(heading, pitch, range) {\n  /**\n   * Heading is the rotation from the local east direction where a positive angle is increasing southward.\n   * @type {number}\n   * @default 0.0\n   */\n  this.heading = defaultValue(heading, 0.0);\n\n  /**\n   * Pitch is the rotation from the local xy-plane. Positive pitch angles\n   * are above the plane. Negative pitch angles are below the plane.\n   * @type {number}\n   * @default 0.0\n   */\n  this.pitch = defaultValue(pitch, 0.0);\n\n  /**\n   * Range is the distance from the center of the local frame.\n   * @type {number}\n   * @default 0.0\n   */\n  this.range = defaultValue(range, 0.0);\n}\n\n/**\n * Duplicates a HeadingPitchRange instance.\n *\n * @param {HeadingPitchRange} hpr The HeadingPitchRange to duplicate.\n * @param {HeadingPitchRange} [result] The object onto which to store the result.\n * @returns {HeadingPitchRange} The modified result parameter or a new HeadingPitchRange instance if one was not provided. (Returns undefined if hpr is undefined)\n */\nHeadingPitchRange.clone = function (hpr, result) {\n  if (!defined(hpr)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    result = new HeadingPitchRange();\n  }\n\n  result.heading = hpr.heading;\n  result.pitch = hpr.pitch;\n  result.range = hpr.range;\n  return result;\n};\nexport default HeadingPitchRange;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAChD;AACF;AACA;AACA;AACA;EACE,IAAI,CAACF,OAAO,GAAGH,YAAY,CAACG,OAAO,EAAE,GAAG,CAAC;;EAEzC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAGJ,YAAY,CAACI,KAAK,EAAE,GAAG,CAAC;;EAErC;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAGL,YAAY,CAACK,KAAK,EAAE,GAAG,CAAC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,iBAAiB,CAACI,KAAK,GAAG,UAAUC,GAAG,EAAEC,MAAM,EAAE;EAC/C,IAAI,CAACP,OAAO,CAACM,GAAG,CAAC,EAAE;IACjB,OAAOE,SAAS;EAClB;EACA,IAAI,CAACR,OAAO,CAACO,MAAM,CAAC,EAAE;IACpBA,MAAM,GAAG,IAAIN,iBAAiB,CAAC,CAAC;EAClC;EAEAM,MAAM,CAACL,OAAO,GAAGI,GAAG,CAACJ,OAAO;EAC5BK,MAAM,CAACJ,KAAK,GAAGG,GAAG,CAACH,KAAK;EACxBI,MAAM,CAACH,KAAK,GAAGE,GAAG,CAACF,KAAK;EACxB,OAAOG,MAAM;AACf,CAAC;AACD,eAAeN,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}