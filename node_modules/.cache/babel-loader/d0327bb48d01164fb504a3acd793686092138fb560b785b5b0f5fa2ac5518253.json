{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport Material from \"../Scene/Material.js\";\n\n/**\n * The interface for all {@link Property} objects that represent {@link Material} uniforms.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias MaterialProperty\n * @constructor\n * @abstract\n *\n * @see ColorMaterialProperty\n * @see CompositeMaterialProperty\n * @see GridMaterialProperty\n * @see ImageMaterialProperty\n * @see PolylineGlowMaterialProperty\n * @see PolylineOutlineMaterialProperty\n * @see StripeMaterialProperty\n */\nfunction MaterialProperty() {\n  DeveloperError.throwInstantiationError();\n}\nObject.defineProperties(MaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof MaterialProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof MaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nMaterialProperty.prototype.getType = DeveloperError.throwInstantiationError;\n\n/**\n * Gets the value of the property at the provided time.\n * @function\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nMaterialProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nMaterialProperty.prototype.equals = DeveloperError.throwInstantiationError;\nconst timeScratch = new JulianDate();\n\n/**\n * @private\n */\nMaterialProperty.getValue = function (time, materialProperty, material) {\n  let type;\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  if (defined(materialProperty)) {\n    type = materialProperty.getType(time);\n    if (defined(type)) {\n      if (!defined(material) || material.type !== type) {\n        material = Material.fromType(type);\n      }\n      materialProperty.getValue(time, material.uniforms);\n      return material;\n    }\n  }\n  if (!defined(material) || material.type !== Material.ColorType) {\n    material = Material.fromType(Material.ColorType);\n  }\n  Color.clone(Color.WHITE, material.uniforms.color);\n  return material;\n};\nexport default MaterialProperty;","map":{"version":3,"names":["Color","defined","DeveloperError","JulianDate","Material","MaterialProperty","throwInstantiationError","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","getValue","equals","timeScratch","time","materialProperty","material","type","now","fromType","uniforms","ColorType","clone","WHITE","color"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/MaterialProperty.js"],"sourcesContent":["import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport Material from \"../Scene/Material.js\";\n\n/**\n * The interface for all {@link Property} objects that represent {@link Material} uniforms.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias MaterialProperty\n * @constructor\n * @abstract\n *\n * @see ColorMaterialProperty\n * @see CompositeMaterialProperty\n * @see GridMaterialProperty\n * @see ImageMaterialProperty\n * @see PolylineGlowMaterialProperty\n * @see PolylineOutlineMaterialProperty\n * @see StripeMaterialProperty\n */\nfunction MaterialProperty() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(MaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof MaterialProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof MaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nMaterialProperty.prototype.getType = DeveloperError.throwInstantiationError;\n\n/**\n * Gets the value of the property at the provided time.\n * @function\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nMaterialProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nMaterialProperty.prototype.equals = DeveloperError.throwInstantiationError;\n\nconst timeScratch = new JulianDate();\n\n/**\n * @private\n */\nMaterialProperty.getValue = function (time, materialProperty, material) {\n  let type;\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n\n  if (defined(materialProperty)) {\n    type = materialProperty.getType(time);\n    if (defined(type)) {\n      if (!defined(material) || material.type !== type) {\n        material = Material.fromType(type);\n      }\n      materialProperty.getValue(time, material.uniforms);\n      return material;\n    }\n  }\n\n  if (!defined(material) || material.type !== Material.ColorType) {\n    material = Material.fromType(Material.ColorType);\n  }\n  Color.clone(Color.WHITE, material.uniforms.color);\n\n  return material;\n};\nexport default MaterialProperty;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,sBAAsB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAAA,EAAG;EAC1BH,cAAc,CAACI,uBAAuB,CAAC,CAAC;AAC1C;AAEAC,MAAM,CAACC,gBAAgB,CAACH,gBAAgB,CAACI,SAAS,EAAE;EAClD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE;IACVC,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,iBAAiB,EAAE;IACjBD,GAAG,EAAET,cAAc,CAACI;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,gBAAgB,CAACI,SAAS,CAACI,OAAO,GAAGX,cAAc,CAACI,uBAAuB;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,gBAAgB,CAACI,SAAS,CAACK,QAAQ,GAAGZ,cAAc,CAACI,uBAAuB;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,gBAAgB,CAACI,SAAS,CAACM,MAAM,GAAGb,cAAc,CAACI,uBAAuB;AAE1E,MAAMU,WAAW,GAAG,IAAIb,UAAU,CAAC,CAAC;;AAEpC;AACA;AACA;AACAE,gBAAgB,CAACS,QAAQ,GAAG,UAAUG,IAAI,EAAEC,gBAAgB,EAAEC,QAAQ,EAAE;EACtE,IAAIC,IAAI;EACR,IAAI,CAACnB,OAAO,CAACgB,IAAI,CAAC,EAAE;IAClBA,IAAI,GAAGd,UAAU,CAACkB,GAAG,CAACL,WAAW,CAAC;EACpC;EAEA,IAAIf,OAAO,CAACiB,gBAAgB,CAAC,EAAE;IAC7BE,IAAI,GAAGF,gBAAgB,CAACL,OAAO,CAACI,IAAI,CAAC;IACrC,IAAIhB,OAAO,CAACmB,IAAI,CAAC,EAAE;MACjB,IAAI,CAACnB,OAAO,CAACkB,QAAQ,CAAC,IAAIA,QAAQ,CAACC,IAAI,KAAKA,IAAI,EAAE;QAChDD,QAAQ,GAAGf,QAAQ,CAACkB,QAAQ,CAACF,IAAI,CAAC;MACpC;MACAF,gBAAgB,CAACJ,QAAQ,CAACG,IAAI,EAAEE,QAAQ,CAACI,QAAQ,CAAC;MAClD,OAAOJ,QAAQ;IACjB;EACF;EAEA,IAAI,CAAClB,OAAO,CAACkB,QAAQ,CAAC,IAAIA,QAAQ,CAACC,IAAI,KAAKhB,QAAQ,CAACoB,SAAS,EAAE;IAC9DL,QAAQ,GAAGf,QAAQ,CAACkB,QAAQ,CAAClB,QAAQ,CAACoB,SAAS,CAAC;EAClD;EACAxB,KAAK,CAACyB,KAAK,CAACzB,KAAK,CAAC0B,KAAK,EAAEP,QAAQ,CAACI,QAAQ,CAACI,KAAK,CAAC;EAEjD,OAAOR,QAAQ;AACjB,CAAC;AACD,eAAed,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}