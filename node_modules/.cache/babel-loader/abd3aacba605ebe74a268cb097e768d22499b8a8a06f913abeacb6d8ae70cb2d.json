{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport PositionProperty from \"./PositionProperty.js\";\n\n/**\n * A {@link PositionProperty} whose value does not change in respect to the\n * {@link ReferenceFrame} in which is it defined.\n *\n * @alias ConstantPositionProperty\n * @constructor\n *\n * @param {Cartesian3} [value] The property value.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction ConstantPositionProperty(value, referenceFrame) {\n  this._definitionChanged = new Event();\n  this._value = Cartesian3.clone(value);\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n}\nObject.defineProperties(ConstantPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ConstantPositionProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return !defined(this._value) || this._referenceFrame === ReferenceFrame.FIXED;\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ConstantPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof ConstantPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    }\n  }\n});\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantPositionProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Cartesian3} value The property value.\n * @param {ReferenceFrame} [referenceFrame=this.referenceFrame] The reference frame in which the position is defined.\n */\nConstantPositionProperty.prototype.setValue = function (value, referenceFrame) {\n  let definitionChanged = false;\n  if (!Cartesian3.equals(this._value, value)) {\n    definitionChanged = true;\n    this._value = Cartesian3.clone(value);\n  }\n  if (defined(referenceFrame) && this._referenceFrame !== referenceFrame) {\n    definitionChanged = true;\n    this._referenceFrame = referenceFrame;\n  }\n  if (definitionChanged) {\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantPositionProperty.prototype.getValueInReferenceFrame = function (time, referenceFrame, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return PositionProperty.convertToReferenceFrame(time, this._value, this._referenceFrame, referenceFrame, result);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nConstantPositionProperty.prototype.equals = function (other) {\n  return this === other || other instanceof ConstantPositionProperty && Cartesian3.equals(this._value, other._value) && this._referenceFrame === other._referenceFrame;\n};\nexport default ConstantPositionProperty;","map":{"version":3,"names":["Cartesian3","defaultValue","defined","DeveloperError","Event","JulianDate","ReferenceFrame","PositionProperty","ConstantPositionProperty","value","referenceFrame","_definitionChanged","_value","clone","_referenceFrame","FIXED","Object","defineProperties","prototype","isConstant","get","definitionChanged","timeScratch","getValue","time","result","now","getValueInReferenceFrame","setValue","equals","raiseEvent","convertToReferenceFrame","other"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/ConstantPositionProperty.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport PositionProperty from \"./PositionProperty.js\";\n\n/**\n * A {@link PositionProperty} whose value does not change in respect to the\n * {@link ReferenceFrame} in which is it defined.\n *\n * @alias ConstantPositionProperty\n * @constructor\n *\n * @param {Cartesian3} [value] The property value.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction ConstantPositionProperty(value, referenceFrame) {\n  this._definitionChanged = new Event();\n  this._value = Cartesian3.clone(value);\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n}\n\nObject.defineProperties(ConstantPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ConstantPositionProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        !defined(this._value) || this._referenceFrame === ReferenceFrame.FIXED\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ConstantPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof ConstantPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n  },\n});\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantPositionProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Cartesian3} value The property value.\n * @param {ReferenceFrame} [referenceFrame=this.referenceFrame] The reference frame in which the position is defined.\n */\nConstantPositionProperty.prototype.setValue = function (value, referenceFrame) {\n  let definitionChanged = false;\n  if (!Cartesian3.equals(this._value, value)) {\n    definitionChanged = true;\n    this._value = Cartesian3.clone(value);\n  }\n  if (defined(referenceFrame) && this._referenceFrame !== referenceFrame) {\n    definitionChanged = true;\n    this._referenceFrame = referenceFrame;\n  }\n  if (definitionChanged) {\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantPositionProperty.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return PositionProperty.convertToReferenceFrame(\n    time,\n    this._value,\n    this._referenceFrame,\n    referenceFrame,\n    result,\n  );\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nConstantPositionProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof ConstantPositionProperty &&\n      Cartesian3.equals(this._value, other._value) &&\n      this._referenceFrame === other._referenceFrame)\n  );\n};\nexport default ConstantPositionProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}