{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport loadImageFromTypedArray from \"../Core/loadImageFromTypedArray.js\";\nimport loadKTX2 from \"../Core/loadKTX2.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport ResourceLoader from \"./ResourceLoader.js\";\nimport ResourceLoaderState from \"./ResourceLoaderState.js\";\n\n/**\n * Loads a glTF image.\n * <p>\n * Implements the {@link ResourceLoader} interface.\n * </p>\n *\n * @alias GltfImageLoader\n * @constructor\n * @augments ResourceLoader\n *\n * @param {object} options Object with the following properties:\n * @param {ResourceCache} options.resourceCache The {@link ResourceCache} (to avoid circular dependencies).\n * @param {object} options.gltf The glTF JSON.\n * @param {number} options.imageId The image ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {string} [options.cacheKey] The cache key of the resource.\n *\n * @private\n */\nfunction GltfImageLoader(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const resourceCache = options.resourceCache;\n  const gltf = options.gltf;\n  const imageId = options.imageId;\n  const gltfResource = options.gltfResource;\n  const baseResource = options.baseResource;\n  const cacheKey = options.cacheKey;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"options.resourceCache\", resourceCache);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.number(\"options.imageId\", imageId);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  const image = gltf.images[imageId];\n  const bufferViewId = image.bufferView;\n  const uri = image.uri;\n  this._resourceCache = resourceCache;\n  this._gltfResource = gltfResource;\n  this._baseResource = baseResource;\n  this._gltf = gltf;\n  this._bufferViewId = bufferViewId;\n  this._uri = uri;\n  this._cacheKey = cacheKey;\n  this._bufferViewLoader = undefined;\n  this._image = undefined;\n  this._mipLevels = undefined;\n  this._state = ResourceLoaderState.UNLOADED;\n  this._promise = undefined;\n}\nif (defined(Object.create)) {\n  GltfImageLoader.prototype = Object.create(ResourceLoader.prototype);\n  GltfImageLoader.prototype.constructor = GltfImageLoader;\n}\nObject.defineProperties(GltfImageLoader.prototype, {\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof GltfImageLoader.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    }\n  },\n  /**\n   * The image.\n   *\n   * @memberof GltfImageLoader.prototype\n   *\n   * @type {Image|ImageBitmap|CompressedTextureBuffer}\n   * @readonly\n   * @private\n   */\n  image: {\n    get: function () {\n      return this._image;\n    }\n  },\n  /**\n   * The mip levels. Only defined for KTX2 files containing mip levels.\n   *\n   * @memberof GltfImageLoader.prototype\n   *\n   * @type {Uint8Array[]}\n   * @readonly\n   * @private\n   */\n  mipLevels: {\n    get: function () {\n      return this._mipLevels;\n    }\n  }\n});\n\n/**\n * Loads the resource.\n * @returns {Promise<GltfImageLoader>} A promise which resolves to the loader when the resource loading is completed.\n * @private\n */\nGltfImageLoader.prototype.load = function () {\n  if (defined(this._promise)) {\n    return this._promise;\n  }\n  if (defined(this._bufferViewId)) {\n    this._promise = loadFromBufferView(this);\n    return this._promise;\n  }\n  this._promise = loadFromUri(this);\n  return this._promise;\n};\nfunction getImageAndMipLevels(image) {\n  // Images transcoded from KTX2 can contain multiple mip levels:\n  // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu\n  let mipLevels;\n  if (Array.isArray(image)) {\n    // highest detail mip should be level 0\n    mipLevels = image.slice(1, image.length).map(function (mipLevel) {\n      return mipLevel.bufferView;\n    });\n    image = image[0];\n  }\n  return {\n    image: image,\n    mipLevels: mipLevels\n  };\n}\nasync function loadFromBufferView(imageLoader) {\n  imageLoader._state = ResourceLoaderState.LOADING;\n  const resourceCache = imageLoader._resourceCache;\n  try {\n    const bufferViewLoader = resourceCache.getBufferViewLoader({\n      gltf: imageLoader._gltf,\n      bufferViewId: imageLoader._bufferViewId,\n      gltfResource: imageLoader._gltfResource,\n      baseResource: imageLoader._baseResource\n    });\n    imageLoader._bufferViewLoader = bufferViewLoader;\n    await bufferViewLoader.load();\n    if (imageLoader.isDestroyed()) {\n      return;\n    }\n    const typedArray = bufferViewLoader.typedArray;\n    const image = await loadImageFromBufferTypedArray(typedArray);\n    if (imageLoader.isDestroyed()) {\n      return;\n    }\n    const imageAndMipLevels = getImageAndMipLevels(image);\n\n    // Unload everything except the image\n    imageLoader.unload();\n    imageLoader._image = imageAndMipLevels.image;\n    imageLoader._mipLevels = imageAndMipLevels.mipLevels;\n    imageLoader._state = ResourceLoaderState.READY;\n    return imageLoader;\n  } catch (error) {\n    if (imageLoader.isDestroyed()) {\n      return;\n    }\n    return handleError(imageLoader, error, \"Failed to load embedded image\");\n  }\n}\nasync function loadFromUri(imageLoader) {\n  imageLoader._state = ResourceLoaderState.LOADING;\n  const baseResource = imageLoader._baseResource;\n  const uri = imageLoader._uri;\n  const resource = baseResource.getDerivedResource({\n    url: uri\n  });\n  try {\n    const image = await loadImageFromUri(resource);\n    if (imageLoader.isDestroyed()) {\n      return;\n    }\n    const imageAndMipLevels = getImageAndMipLevels(image);\n\n    // Unload everything except the image\n    imageLoader.unload();\n    imageLoader._image = imageAndMipLevels.image;\n    imageLoader._mipLevels = imageAndMipLevels.mipLevels;\n    imageLoader._state = ResourceLoaderState.READY;\n    return imageLoader;\n  } catch (error) {\n    if (imageLoader.isDestroyed()) {\n      return;\n    }\n    return handleError(imageLoader, error, `Failed to load image: ${uri}`);\n  }\n}\nfunction handleError(imageLoader, error, errorMessage) {\n  imageLoader.unload();\n  imageLoader._state = ResourceLoaderState.FAILED;\n  return Promise.reject(imageLoader.getError(errorMessage, error));\n}\nfunction getMimeTypeFromTypedArray(typedArray) {\n  const header = typedArray.subarray(0, 2);\n  const webpHeaderRIFFChars = typedArray.subarray(0, 4);\n  const webpHeaderWEBPChars = typedArray.subarray(8, 12);\n  if (header[0] === 0xff && header[1] === 0xd8) {\n    // See https://en.wikipedia.org/wiki/JPEG_File_Interchange_Format\n    return \"image/jpeg\";\n  } else if (header[0] === 0x89 && header[1] === 0x50) {\n    // See http://www.libpng.org/pub/png/spec/1.2/PNG-Structure.html\n    return \"image/png\";\n  } else if (header[0] === 0xab && header[1] === 0x4b) {\n    // See http://github.khronos.org/KTX-Specification/#_identifier\n    return \"image/ktx2\";\n  } else if (\n  // See https://developers.google.com/speed/webp/docs/riff_container#webp_file_header\n  webpHeaderRIFFChars[0] === 0x52 && webpHeaderRIFFChars[1] === 0x49 && webpHeaderRIFFChars[2] === 0x46 && webpHeaderRIFFChars[3] === 0x46 && webpHeaderWEBPChars[0] === 0x57 && webpHeaderWEBPChars[1] === 0x45 && webpHeaderWEBPChars[2] === 0x42 && webpHeaderWEBPChars[3] === 0x50) {\n    return \"image/webp\";\n  }\n  throw new RuntimeError(\"Image format is not recognized\");\n}\nasync function loadImageFromBufferTypedArray(typedArray) {\n  const mimeType = getMimeTypeFromTypedArray(typedArray);\n  if (mimeType === \"image/ktx2\") {\n    // Need to make a copy of the embedded KTX2 buffer otherwise the underlying\n    // ArrayBuffer may be accessed on both the worker and the main thread and\n    // throw an error like \"Cannot perform Construct on a detached ArrayBuffer\".\n    // Look into SharedArrayBuffer at some point to get around this.\n    const ktxBuffer = new Uint8Array(typedArray);\n\n    // Resolves to a CompressedTextureBuffer\n    return loadKTX2(ktxBuffer);\n  }\n  // Resolves to an Image or ImageBitmap\n  return GltfImageLoader._loadImageFromTypedArray({\n    uint8Array: typedArray,\n    format: mimeType,\n    flipY: false,\n    skipColorSpaceConversion: true\n  });\n}\nconst ktx2Regex = /(^data:image\\/ktx2)|(\\.ktx2$)/i;\nfunction loadImageFromUri(resource) {\n  const uri = resource.getUrlComponent(false, true);\n  if (ktx2Regex.test(uri)) {\n    // Resolves to a CompressedTextureBuffer\n    return loadKTX2(resource);\n  }\n  // Resolves to an ImageBitmap or Image\n  return resource.fetchImage({\n    skipColorSpaceConversion: true,\n    preferImageBitmap: true\n  });\n}\n\n/**\n * Unloads the resource.\n * @private\n */\nGltfImageLoader.prototype.unload = function () {\n  if (defined(this._bufferViewLoader) && !this._bufferViewLoader.isDestroyed()) {\n    this._resourceCache.unload(this._bufferViewLoader);\n  }\n  this._bufferViewLoader = undefined;\n  this._uri = undefined; // Free in case the uri is a data uri\n  this._image = undefined;\n  this._mipLevels = undefined;\n  this._gltf = undefined;\n};\n\n// Exposed for testing\nGltfImageLoader._loadImageFromTypedArray = loadImageFromTypedArray;\nexport default GltfImageLoader;","map":{"version":3,"names":["Check","defaultValue","defined","loadImageFromTypedArray","loadKTX2","RuntimeError","ResourceLoader","ResourceLoaderState","GltfImageLoader","options","EMPTY_OBJECT","resourceCache","gltf","imageId","gltfResource","baseResource","cacheKey","typeOf","func","object","number","image","images","bufferViewId","bufferView","uri","_resourceCache","_gltfResource","_baseResource","_gltf","_bufferViewId","_uri","_cacheKey","_bufferViewLoader","undefined","_image","_mipLevels","_state","UNLOADED","_promise","Object","create","prototype","constructor","defineProperties","get","mipLevels","load","loadFromBufferView","loadFromUri","getImageAndMipLevels","Array","isArray","slice","length","map","mipLevel","imageLoader","LOADING","bufferViewLoader","getBufferViewLoader","isDestroyed","typedArray","loadImageFromBufferTypedArray","imageAndMipLevels","unload","READY","error","handleError","resource","getDerivedResource","url","loadImageFromUri","errorMessage","FAILED","Promise","reject","getError","getMimeTypeFromTypedArray","header","subarray","webpHeaderRIFFChars","webpHeaderWEBPChars","mimeType","ktxBuffer","Uint8Array","_loadImageFromTypedArray","uint8Array","format","flipY","skipColorSpaceConversion","ktx2Regex","getUrlComponent","test","fetchImage","preferImageBitmap"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GltfImageLoader.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport loadImageFromTypedArray from \"../Core/loadImageFromTypedArray.js\";\nimport loadKTX2 from \"../Core/loadKTX2.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport ResourceLoader from \"./ResourceLoader.js\";\nimport ResourceLoaderState from \"./ResourceLoaderState.js\";\n\n/**\n * Loads a glTF image.\n * <p>\n * Implements the {@link ResourceLoader} interface.\n * </p>\n *\n * @alias GltfImageLoader\n * @constructor\n * @augments ResourceLoader\n *\n * @param {object} options Object with the following properties:\n * @param {ResourceCache} options.resourceCache The {@link ResourceCache} (to avoid circular dependencies).\n * @param {object} options.gltf The glTF JSON.\n * @param {number} options.imageId The image ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {string} [options.cacheKey] The cache key of the resource.\n *\n * @private\n */\nfunction GltfImageLoader(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const resourceCache = options.resourceCache;\n  const gltf = options.gltf;\n  const imageId = options.imageId;\n  const gltfResource = options.gltfResource;\n  const baseResource = options.baseResource;\n  const cacheKey = options.cacheKey;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"options.resourceCache\", resourceCache);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.number(\"options.imageId\", imageId);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  const image = gltf.images[imageId];\n  const bufferViewId = image.bufferView;\n  const uri = image.uri;\n\n  this._resourceCache = resourceCache;\n  this._gltfResource = gltfResource;\n  this._baseResource = baseResource;\n  this._gltf = gltf;\n  this._bufferViewId = bufferViewId;\n  this._uri = uri;\n  this._cacheKey = cacheKey;\n  this._bufferViewLoader = undefined;\n  this._image = undefined;\n  this._mipLevels = undefined;\n  this._state = ResourceLoaderState.UNLOADED;\n  this._promise = undefined;\n}\n\nif (defined(Object.create)) {\n  GltfImageLoader.prototype = Object.create(ResourceLoader.prototype);\n  GltfImageLoader.prototype.constructor = GltfImageLoader;\n}\n\nObject.defineProperties(GltfImageLoader.prototype, {\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof GltfImageLoader.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    },\n  },\n  /**\n   * The image.\n   *\n   * @memberof GltfImageLoader.prototype\n   *\n   * @type {Image|ImageBitmap|CompressedTextureBuffer}\n   * @readonly\n   * @private\n   */\n  image: {\n    get: function () {\n      return this._image;\n    },\n  },\n  /**\n   * The mip levels. Only defined for KTX2 files containing mip levels.\n   *\n   * @memberof GltfImageLoader.prototype\n   *\n   * @type {Uint8Array[]}\n   * @readonly\n   * @private\n   */\n  mipLevels: {\n    get: function () {\n      return this._mipLevels;\n    },\n  },\n});\n\n/**\n * Loads the resource.\n * @returns {Promise<GltfImageLoader>} A promise which resolves to the loader when the resource loading is completed.\n * @private\n */\nGltfImageLoader.prototype.load = function () {\n  if (defined(this._promise)) {\n    return this._promise;\n  }\n\n  if (defined(this._bufferViewId)) {\n    this._promise = loadFromBufferView(this);\n    return this._promise;\n  }\n\n  this._promise = loadFromUri(this);\n  return this._promise;\n};\n\nfunction getImageAndMipLevels(image) {\n  // Images transcoded from KTX2 can contain multiple mip levels:\n  // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu\n  let mipLevels;\n  if (Array.isArray(image)) {\n    // highest detail mip should be level 0\n    mipLevels = image.slice(1, image.length).map(function (mipLevel) {\n      return mipLevel.bufferView;\n    });\n    image = image[0];\n  }\n  return {\n    image: image,\n    mipLevels: mipLevels,\n  };\n}\n\nasync function loadFromBufferView(imageLoader) {\n  imageLoader._state = ResourceLoaderState.LOADING;\n  const resourceCache = imageLoader._resourceCache;\n  try {\n    const bufferViewLoader = resourceCache.getBufferViewLoader({\n      gltf: imageLoader._gltf,\n      bufferViewId: imageLoader._bufferViewId,\n      gltfResource: imageLoader._gltfResource,\n      baseResource: imageLoader._baseResource,\n    });\n    imageLoader._bufferViewLoader = bufferViewLoader;\n    await bufferViewLoader.load();\n\n    if (imageLoader.isDestroyed()) {\n      return;\n    }\n\n    const typedArray = bufferViewLoader.typedArray;\n    const image = await loadImageFromBufferTypedArray(typedArray);\n    if (imageLoader.isDestroyed()) {\n      return;\n    }\n\n    const imageAndMipLevels = getImageAndMipLevels(image);\n\n    // Unload everything except the image\n    imageLoader.unload();\n\n    imageLoader._image = imageAndMipLevels.image;\n    imageLoader._mipLevels = imageAndMipLevels.mipLevels;\n    imageLoader._state = ResourceLoaderState.READY;\n\n    return imageLoader;\n  } catch (error) {\n    if (imageLoader.isDestroyed()) {\n      return;\n    }\n\n    return handleError(imageLoader, error, \"Failed to load embedded image\");\n  }\n}\n\nasync function loadFromUri(imageLoader) {\n  imageLoader._state = ResourceLoaderState.LOADING;\n  const baseResource = imageLoader._baseResource;\n  const uri = imageLoader._uri;\n  const resource = baseResource.getDerivedResource({\n    url: uri,\n  });\n\n  try {\n    const image = await loadImageFromUri(resource);\n    if (imageLoader.isDestroyed()) {\n      return;\n    }\n\n    const imageAndMipLevels = getImageAndMipLevels(image);\n\n    // Unload everything except the image\n    imageLoader.unload();\n\n    imageLoader._image = imageAndMipLevels.image;\n    imageLoader._mipLevels = imageAndMipLevels.mipLevels;\n    imageLoader._state = ResourceLoaderState.READY;\n\n    return imageLoader;\n  } catch (error) {\n    if (imageLoader.isDestroyed()) {\n      return;\n    }\n    return handleError(imageLoader, error, `Failed to load image: ${uri}`);\n  }\n}\n\nfunction handleError(imageLoader, error, errorMessage) {\n  imageLoader.unload();\n  imageLoader._state = ResourceLoaderState.FAILED;\n  return Promise.reject(imageLoader.getError(errorMessage, error));\n}\n\nfunction getMimeTypeFromTypedArray(typedArray) {\n  const header = typedArray.subarray(0, 2);\n  const webpHeaderRIFFChars = typedArray.subarray(0, 4);\n  const webpHeaderWEBPChars = typedArray.subarray(8, 12);\n\n  if (header[0] === 0xff && header[1] === 0xd8) {\n    // See https://en.wikipedia.org/wiki/JPEG_File_Interchange_Format\n    return \"image/jpeg\";\n  } else if (header[0] === 0x89 && header[1] === 0x50) {\n    // See http://www.libpng.org/pub/png/spec/1.2/PNG-Structure.html\n    return \"image/png\";\n  } else if (header[0] === 0xab && header[1] === 0x4b) {\n    // See http://github.khronos.org/KTX-Specification/#_identifier\n    return \"image/ktx2\";\n  } else if (\n    // See https://developers.google.com/speed/webp/docs/riff_container#webp_file_header\n    webpHeaderRIFFChars[0] === 0x52 &&\n    webpHeaderRIFFChars[1] === 0x49 &&\n    webpHeaderRIFFChars[2] === 0x46 &&\n    webpHeaderRIFFChars[3] === 0x46 &&\n    webpHeaderWEBPChars[0] === 0x57 &&\n    webpHeaderWEBPChars[1] === 0x45 &&\n    webpHeaderWEBPChars[2] === 0x42 &&\n    webpHeaderWEBPChars[3] === 0x50\n  ) {\n    return \"image/webp\";\n  }\n\n  throw new RuntimeError(\"Image format is not recognized\");\n}\n\nasync function loadImageFromBufferTypedArray(typedArray) {\n  const mimeType = getMimeTypeFromTypedArray(typedArray);\n  if (mimeType === \"image/ktx2\") {\n    // Need to make a copy of the embedded KTX2 buffer otherwise the underlying\n    // ArrayBuffer may be accessed on both the worker and the main thread and\n    // throw an error like \"Cannot perform Construct on a detached ArrayBuffer\".\n    // Look into SharedArrayBuffer at some point to get around this.\n    const ktxBuffer = new Uint8Array(typedArray);\n\n    // Resolves to a CompressedTextureBuffer\n    return loadKTX2(ktxBuffer);\n  }\n  // Resolves to an Image or ImageBitmap\n  return GltfImageLoader._loadImageFromTypedArray({\n    uint8Array: typedArray,\n    format: mimeType,\n    flipY: false,\n    skipColorSpaceConversion: true,\n  });\n}\n\nconst ktx2Regex = /(^data:image\\/ktx2)|(\\.ktx2$)/i;\n\nfunction loadImageFromUri(resource) {\n  const uri = resource.getUrlComponent(false, true);\n  if (ktx2Regex.test(uri)) {\n    // Resolves to a CompressedTextureBuffer\n    return loadKTX2(resource);\n  }\n  // Resolves to an ImageBitmap or Image\n  return resource.fetchImage({\n    skipColorSpaceConversion: true,\n    preferImageBitmap: true,\n  });\n}\n\n/**\n * Unloads the resource.\n * @private\n */\nGltfImageLoader.prototype.unload = function () {\n  if (\n    defined(this._bufferViewLoader) &&\n    !this._bufferViewLoader.isDestroyed()\n  ) {\n    this._resourceCache.unload(this._bufferViewLoader);\n  }\n\n  this._bufferViewLoader = undefined;\n  this._uri = undefined; // Free in case the uri is a data uri\n  this._image = undefined;\n  this._mipLevels = undefined;\n  this._gltf = undefined;\n};\n\n// Exposed for testing\nGltfImageLoader._loadImageFromTypedArray = loadImageFromTypedArray;\n\nexport default GltfImageLoader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}