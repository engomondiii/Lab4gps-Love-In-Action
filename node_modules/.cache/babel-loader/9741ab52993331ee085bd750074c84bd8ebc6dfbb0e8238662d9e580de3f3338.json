{"ast":null,"code":"import Uri from \"urijs\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * A singleton that contains all of the servers that are trusted. Credentials will be sent with\n * any requests to these servers.\n *\n * @namespace TrustedServers\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nconst TrustedServers = {};\nlet _servers = {};\n\n/**\n * Adds a trusted server to the registry\n *\n * @param {string} host The host to be added.\n * @param {number} port The port used to access the host.\n *\n * @example\n * // Add a trusted server\n * TrustedServers.add('my.server.com', 80);\n */\nTrustedServers.add = function (host, port) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(host)) {\n    throw new DeveloperError(\"host is required.\");\n  }\n  if (!defined(port) || port <= 0) {\n    throw new DeveloperError(\"port is required to be greater than 0.\");\n  }\n  //>>includeEnd('debug');\n\n  const authority = `${host.toLowerCase()}:${port}`;\n  if (!defined(_servers[authority])) {\n    _servers[authority] = true;\n  }\n};\n\n/**\n * Removes a trusted server from the registry\n *\n * @param {string} host The host to be removed.\n * @param {number} port The port used to access the host.\n *\n * @example\n * // Remove a trusted server\n * TrustedServers.remove('my.server.com', 80);\n */\nTrustedServers.remove = function (host, port) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(host)) {\n    throw new DeveloperError(\"host is required.\");\n  }\n  if (!defined(port) || port <= 0) {\n    throw new DeveloperError(\"port is required to be greater than 0.\");\n  }\n  //>>includeEnd('debug');\n\n  const authority = `${host.toLowerCase()}:${port}`;\n  if (defined(_servers[authority])) {\n    delete _servers[authority];\n  }\n};\nfunction getAuthority(url) {\n  const uri = new Uri(url);\n  uri.normalize();\n\n  // Removes username:password@ so we just have host[:port]\n  let authority = uri.authority();\n  if (authority.length === 0) {\n    return undefined; // Relative URL\n  }\n  uri.authority(authority);\n  if (authority.indexOf(\"@\") !== -1) {\n    const parts = authority.split(\"@\");\n    authority = parts[1];\n  }\n\n  // If the port is missing add one based on the scheme\n  if (authority.indexOf(\":\") === -1) {\n    let scheme = uri.scheme();\n    if (scheme.length === 0) {\n      scheme = window.location.protocol;\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n    if (scheme === \"http\") {\n      authority += \":80\";\n    } else if (scheme === \"https\") {\n      authority += \":443\";\n    } else {\n      return undefined;\n    }\n  }\n  return authority;\n}\n\n/**\n * Tests whether a server is trusted or not. The server must have been added with the port if it is included in the url.\n *\n * @param {string} url The url to be tested against the trusted list\n *\n * @returns {boolean} Returns true if url is trusted, false otherwise.\n *\n * @example\n * // Add server\n * TrustedServers.add('my.server.com', 81);\n *\n * // Check if server is trusted\n * if (TrustedServers.contains('https://my.server.com:81/path/to/file.png')) {\n *     // my.server.com:81 is trusted\n * }\n * if (TrustedServers.contains('https://my.server.com/path/to/file.png')) {\n *     // my.server.com isn't trusted\n * }\n */\nTrustedServers.contains = function (url) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required.\");\n  }\n  //>>includeEnd('debug');\n  const authority = getAuthority(url);\n  if (defined(authority) && defined(_servers[authority])) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Clears the registry\n *\n * @example\n * // Remove a trusted server\n * TrustedServers.clear();\n */\nTrustedServers.clear = function () {\n  _servers = {};\n};\nexport default TrustedServers;","map":{"version":3,"names":["Uri","defined","DeveloperError","TrustedServers","_servers","add","host","port","authority","toLowerCase","remove","getAuthority","url","uri","normalize","length","undefined","indexOf","parts","split","scheme","window","location","protocol","substring","contains","clear"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/TrustedServers.js"],"sourcesContent":["import Uri from \"urijs\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * A singleton that contains all of the servers that are trusted. Credentials will be sent with\n * any requests to these servers.\n *\n * @namespace TrustedServers\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nconst TrustedServers = {};\nlet _servers = {};\n\n/**\n * Adds a trusted server to the registry\n *\n * @param {string} host The host to be added.\n * @param {number} port The port used to access the host.\n *\n * @example\n * // Add a trusted server\n * TrustedServers.add('my.server.com', 80);\n */\nTrustedServers.add = function (host, port) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(host)) {\n    throw new DeveloperError(\"host is required.\");\n  }\n  if (!defined(port) || port <= 0) {\n    throw new DeveloperError(\"port is required to be greater than 0.\");\n  }\n  //>>includeEnd('debug');\n\n  const authority = `${host.toLowerCase()}:${port}`;\n  if (!defined(_servers[authority])) {\n    _servers[authority] = true;\n  }\n};\n\n/**\n * Removes a trusted server from the registry\n *\n * @param {string} host The host to be removed.\n * @param {number} port The port used to access the host.\n *\n * @example\n * // Remove a trusted server\n * TrustedServers.remove('my.server.com', 80);\n */\nTrustedServers.remove = function (host, port) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(host)) {\n    throw new DeveloperError(\"host is required.\");\n  }\n  if (!defined(port) || port <= 0) {\n    throw new DeveloperError(\"port is required to be greater than 0.\");\n  }\n  //>>includeEnd('debug');\n\n  const authority = `${host.toLowerCase()}:${port}`;\n  if (defined(_servers[authority])) {\n    delete _servers[authority];\n  }\n};\n\nfunction getAuthority(url) {\n  const uri = new Uri(url);\n  uri.normalize();\n\n  // Removes username:password@ so we just have host[:port]\n  let authority = uri.authority();\n  if (authority.length === 0) {\n    return undefined; // Relative URL\n  }\n  uri.authority(authority);\n\n  if (authority.indexOf(\"@\") !== -1) {\n    const parts = authority.split(\"@\");\n    authority = parts[1];\n  }\n\n  // If the port is missing add one based on the scheme\n  if (authority.indexOf(\":\") === -1) {\n    let scheme = uri.scheme();\n    if (scheme.length === 0) {\n      scheme = window.location.protocol;\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n    if (scheme === \"http\") {\n      authority += \":80\";\n    } else if (scheme === \"https\") {\n      authority += \":443\";\n    } else {\n      return undefined;\n    }\n  }\n\n  return authority;\n}\n\n/**\n * Tests whether a server is trusted or not. The server must have been added with the port if it is included in the url.\n *\n * @param {string} url The url to be tested against the trusted list\n *\n * @returns {boolean} Returns true if url is trusted, false otherwise.\n *\n * @example\n * // Add server\n * TrustedServers.add('my.server.com', 81);\n *\n * // Check if server is trusted\n * if (TrustedServers.contains('https://my.server.com:81/path/to/file.png')) {\n *     // my.server.com:81 is trusted\n * }\n * if (TrustedServers.contains('https://my.server.com/path/to/file.png')) {\n *     // my.server.com isn't trusted\n * }\n */\nTrustedServers.contains = function (url) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required.\");\n  }\n  //>>includeEnd('debug');\n  const authority = getAuthority(url);\n  if (defined(authority) && defined(_servers[authority])) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Clears the registry\n *\n * @example\n * // Remove a trusted server\n * TrustedServers.clear();\n */\nTrustedServers.clear = function () {\n  _servers = {};\n};\nexport default TrustedServers;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}