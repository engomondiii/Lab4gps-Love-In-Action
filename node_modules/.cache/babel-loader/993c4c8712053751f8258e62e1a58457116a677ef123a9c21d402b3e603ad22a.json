{"ast":null,"code":"import Credit from \"./Credit.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * @typedef {object} GeocoderService.Result\n * @property {string} displayName The display name for a location\n * @property {Rectangle|Cartesian3} destination The bounding box for a location\n * @property {object[]} [attributions]\n */\n\n/**\n * Provides geocoding through an external service. This type describes an interface and\n * is not intended to be used.\n * @alias GeocoderService\n * @constructor\n *\n * @see BingMapsGeocoderService\n * @see PeliasGeocoderService\n * @see OpenCageGeocoderService\n */\nfunction GeocoderService() {\n  DeveloperError.throwInstantiationError();\n}\nObject.defineProperties(GeocoderService.prototype, {\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof GeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n\n/**\n * Parses credits from the geocoder result attributions, if present.\n * @param {GeocoderService.Result} geocoderResult The geocoder result\n * @returns {Credit[]|undefined} A list of credits if present in the result, otherwise undefined\n */\nGeocoderService.getCreditsFromResult = function (geocoderResult) {\n  if (defined(geocoderResult.attributions)) {\n    return geocoderResult.attributions.map(Credit.getIonCredit);\n  }\n  return undefined;\n};\n\n/**\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @param {GeocodeType} [type=GeocodeType.SEARCH] The type of geocode to perform.\n * @returns {Promise<GeocoderService.Result[]>}\n */\nGeocoderService.prototype.geocode = DeveloperError.throwInstantiationError;\nexport default GeocoderService;","map":{"version":3,"names":["Credit","defined","DeveloperError","GeocoderService","throwInstantiationError","Object","defineProperties","prototype","credit","get","getCreditsFromResult","geocoderResult","attributions","map","getIonCredit","undefined","geocode"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/GeocoderService.js"],"sourcesContent":["import Credit from \"./Credit.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * @typedef {object} GeocoderService.Result\n * @property {string} displayName The display name for a location\n * @property {Rectangle|Cartesian3} destination The bounding box for a location\n * @property {object[]} [attributions]\n */\n\n/**\n * Provides geocoding through an external service. This type describes an interface and\n * is not intended to be used.\n * @alias GeocoderService\n * @constructor\n *\n * @see BingMapsGeocoderService\n * @see PeliasGeocoderService\n * @see OpenCageGeocoderService\n */\nfunction GeocoderService() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(GeocoderService.prototype, {\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof GeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Parses credits from the geocoder result attributions, if present.\n * @param {GeocoderService.Result} geocoderResult The geocoder result\n * @returns {Credit[]|undefined} A list of credits if present in the result, otherwise undefined\n */\nGeocoderService.getCreditsFromResult = function (geocoderResult) {\n  if (defined(geocoderResult.attributions)) {\n    return geocoderResult.attributions.map(Credit.getIonCredit);\n  }\n\n  return undefined;\n};\n\n/**\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @param {GeocodeType} [type=GeocodeType.SEARCH] The type of geocode to perform.\n * @returns {Promise<GeocoderService.Result[]>}\n */\nGeocoderService.prototype.geocode = DeveloperError.throwInstantiationError;\nexport default GeocoderService;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,aAAa;AAChC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAAA,EAAG;EACzBD,cAAc,CAACE,uBAAuB,CAAC,CAAC;AAC1C;AAEAC,MAAM,CAACC,gBAAgB,CAACH,eAAe,CAACI,SAAS,EAAE;EACjD;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,MAAM,EAAE;IACNC,GAAG,EAAEP,cAAc,CAACE;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACAD,eAAe,CAACO,oBAAoB,GAAG,UAAUC,cAAc,EAAE;EAC/D,IAAIV,OAAO,CAACU,cAAc,CAACC,YAAY,CAAC,EAAE;IACxC,OAAOD,cAAc,CAACC,YAAY,CAACC,GAAG,CAACb,MAAM,CAACc,YAAY,CAAC;EAC7D;EAEA,OAAOC,SAAS;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,eAAe,CAACI,SAAS,CAACS,OAAO,GAAGd,cAAc,CAACE,uBAAuB;AAC1E,eAAeD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}