{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Resource from \"../Core/Resource.js\";\nimport Cesium3DTileset from \"../Scene/Cesium3DTileset.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\nconst modelMatrixScratch = new Matrix4();\n\n/**\n * A {@link Visualizer} which maps {@link Entity#tileset} to a {@link Cesium3DTileset}.\n * @alias Cesium3DTilesetVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction Cesium3DTilesetVisualizer(scene, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(Cesium3DTilesetVisualizer.prototype._onCollectionChanged, this);\n  this._scene = scene;\n  this._primitives = scene.primitives;\n  this._entityCollection = entityCollection;\n  this._tilesetHash = {};\n  this._entitiesToVisualize = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates models created this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {boolean} This function always returns true.\n */\nCesium3DTilesetVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const entities = this._entitiesToVisualize.values;\n  const tilesetHash = this._tilesetHash;\n  const primitives = this._primitives;\n  for (let i = 0, len = entities.length; i < len; i++) {\n    const entity = entities[i];\n    const tilesetGraphics = entity._tileset;\n    let resource;\n    const tilesetData = tilesetHash[entity.id];\n    const show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(tilesetGraphics._show, time, true);\n    let modelMatrix;\n    if (show) {\n      modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n      resource = Resource.createIfNeeded(Property.getValueOrUndefined(tilesetGraphics._uri, time));\n    }\n    const tileset = defined(tilesetData) ? tilesetData.tilesetPrimitive : undefined;\n    if (!show) {\n      if (defined(tileset)) {\n        tileset.show = false;\n      }\n      continue;\n    }\n    if (!defined(tilesetData) || resource.url !== tilesetData.url) {\n      if (defined(tileset)) {\n        primitives.removeAndDestroy(tileset);\n      }\n      delete tilesetHash[entity.id];\n      createTileset(resource, tilesetHash, entity, primitives);\n    }\n    if (!defined(tileset)) {\n      continue;\n    }\n    tileset.show = true;\n    if (defined(modelMatrix)) {\n      tileset.modelMatrix = modelMatrix;\n    }\n    tileset.maximumScreenSpaceError = Property.getValueOrDefault(tilesetGraphics.maximumScreenSpaceError, time, tileset.maximumScreenSpaceError);\n  }\n  return true;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n */\nCesium3DTilesetVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nCesium3DTilesetVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(Cesium3DTilesetVisualizer.prototype._onCollectionChanged, this);\n  const entities = this._entitiesToVisualize.values;\n  const tilesetHash = this._tilesetHash;\n  const primitives = this._primitives;\n  for (let i = entities.length - 1; i > -1; i--) {\n    removeTileset(this, entities[i], tilesetHash, primitives);\n  }\n  return destroyObject(this);\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nCesium3DTilesetVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const tilesetData = this._tilesetHash[entity.id];\n  if (!defined(tilesetData) || tilesetData.loadFail) {\n    return BoundingSphereState.FAILED;\n  }\n  const primitive = tilesetData.tilesetPrimitive;\n  if (!defined(primitive)) {\n    return BoundingSphereState.PENDING;\n  }\n  if (!primitive.show) {\n    return BoundingSphereState.FAILED;\n  }\n  BoundingSphere.clone(primitive.boundingSphere, result);\n  return BoundingSphereState.DONE;\n};\n\n/**\n * @private\n */\nCesium3DTilesetVisualizer.prototype._onCollectionChanged = function (entityCollection, added, removed, changed) {\n  let i;\n  let entity;\n  const entities = this._entitiesToVisualize;\n  const tilesetHash = this._tilesetHash;\n  const primitives = this._primitives;\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._tileset)) {\n      entities.set(entity.id, entity);\n    }\n  }\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._tileset)) {\n      entities.set(entity.id, entity);\n    } else {\n      removeTileset(this, entity, tilesetHash, primitives);\n      entities.remove(entity.id);\n    }\n  }\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    removeTileset(this, entity, tilesetHash, primitives);\n    entities.remove(entity.id);\n  }\n};\nfunction removeTileset(visualizer, entity, tilesetHash, primitives) {\n  const tilesetData = tilesetHash[entity.id];\n  if (defined(tilesetData)) {\n    if (defined(tilesetData.tilesetPrimitive)) {\n      primitives.removeAndDestroy(tilesetData.tilesetPrimitive);\n    }\n    delete tilesetHash[entity.id];\n  }\n}\nasync function createTileset(resource, tilesetHash, entity, primitives) {\n  tilesetHash[entity.id] = {\n    url: resource.url,\n    loadFail: false\n  };\n  try {\n    const tileset = await Cesium3DTileset.fromUrl(resource);\n    tileset.id = entity;\n    primitives.add(tileset);\n    if (!defined(tilesetHash[entity.id])) {\n      return;\n    }\n    tilesetHash[entity.id].tilesetPrimitive = tileset;\n  } catch (error) {\n    console.error(error);\n    tilesetHash[entity.id].loadFail = true;\n  }\n}\nexport default Cesium3DTilesetVisualizer;","map":{"version":3,"names":["AssociativeArray","BoundingSphere","defined","destroyObject","DeveloperError","Matrix4","Resource","Cesium3DTileset","BoundingSphereState","Property","modelMatrixScratch","Cesium3DTilesetVisualizer","scene","entityCollection","collectionChanged","addEventListener","prototype","_onCollectionChanged","_scene","_primitives","primitives","_entityCollection","_tilesetHash","_entitiesToVisualize","values","update","time","entities","tilesetHash","i","len","length","entity","tilesetGraphics","_tileset","resource","tilesetData","id","show","isShowing","isAvailable","getValueOrDefault","_show","modelMatrix","computeModelMatrix","createIfNeeded","getValueOrUndefined","_uri","tileset","tilesetPrimitive","undefined","url","removeAndDestroy","createTileset","maximumScreenSpaceError","isDestroyed","destroy","removeEventListener","removeTileset","getBoundingSphere","result","loadFail","FAILED","primitive","PENDING","clone","boundingSphere","DONE","added","removed","changed","set","remove","visualizer","fromUrl","add","error","console"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/Cesium3DTilesetVisualizer.js"],"sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Resource from \"../Core/Resource.js\";\nimport Cesium3DTileset from \"../Scene/Cesium3DTileset.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nconst modelMatrixScratch = new Matrix4();\n\n/**\n * A {@link Visualizer} which maps {@link Entity#tileset} to a {@link Cesium3DTileset}.\n * @alias Cesium3DTilesetVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction Cesium3DTilesetVisualizer(scene, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    Cesium3DTilesetVisualizer.prototype._onCollectionChanged,\n    this,\n  );\n\n  this._scene = scene;\n  this._primitives = scene.primitives;\n  this._entityCollection = entityCollection;\n  this._tilesetHash = {};\n  this._entitiesToVisualize = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates models created this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {boolean} This function always returns true.\n */\nCesium3DTilesetVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const entities = this._entitiesToVisualize.values;\n  const tilesetHash = this._tilesetHash;\n  const primitives = this._primitives;\n\n  for (let i = 0, len = entities.length; i < len; i++) {\n    const entity = entities[i];\n    const tilesetGraphics = entity._tileset;\n\n    let resource;\n    const tilesetData = tilesetHash[entity.id];\n    const show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(tilesetGraphics._show, time, true);\n\n    let modelMatrix;\n    if (show) {\n      modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n      resource = Resource.createIfNeeded(\n        Property.getValueOrUndefined(tilesetGraphics._uri, time),\n      );\n    }\n\n    const tileset = defined(tilesetData)\n      ? tilesetData.tilesetPrimitive\n      : undefined;\n\n    if (!show) {\n      if (defined(tileset)) {\n        tileset.show = false;\n      }\n      continue;\n    }\n\n    if (!defined(tilesetData) || resource.url !== tilesetData.url) {\n      if (defined(tileset)) {\n        primitives.removeAndDestroy(tileset);\n      }\n\n      delete tilesetHash[entity.id];\n\n      createTileset(resource, tilesetHash, entity, primitives);\n    }\n\n    if (!defined(tileset)) {\n      continue;\n    }\n\n    tileset.show = true;\n    if (defined(modelMatrix)) {\n      tileset.modelMatrix = modelMatrix;\n    }\n    tileset.maximumScreenSpaceError = Property.getValueOrDefault(\n      tilesetGraphics.maximumScreenSpaceError,\n      time,\n      tileset.maximumScreenSpaceError,\n    );\n  }\n\n  return true;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n */\nCesium3DTilesetVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nCesium3DTilesetVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    Cesium3DTilesetVisualizer.prototype._onCollectionChanged,\n    this,\n  );\n  const entities = this._entitiesToVisualize.values;\n  const tilesetHash = this._tilesetHash;\n  const primitives = this._primitives;\n  for (let i = entities.length - 1; i > -1; i--) {\n    removeTileset(this, entities[i], tilesetHash, primitives);\n  }\n  return destroyObject(this);\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nCesium3DTilesetVisualizer.prototype.getBoundingSphere = function (\n  entity,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const tilesetData = this._tilesetHash[entity.id];\n  if (!defined(tilesetData) || tilesetData.loadFail) {\n    return BoundingSphereState.FAILED;\n  }\n\n  const primitive = tilesetData.tilesetPrimitive;\n  if (!defined(primitive)) {\n    return BoundingSphereState.PENDING;\n  }\n\n  if (!primitive.show) {\n    return BoundingSphereState.FAILED;\n  }\n\n  BoundingSphere.clone(primitive.boundingSphere, result);\n\n  return BoundingSphereState.DONE;\n};\n\n/**\n * @private\n */\nCesium3DTilesetVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed,\n) {\n  let i;\n  let entity;\n  const entities = this._entitiesToVisualize;\n  const tilesetHash = this._tilesetHash;\n  const primitives = this._primitives;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._tileset)) {\n      entities.set(entity.id, entity);\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._tileset)) {\n      entities.set(entity.id, entity);\n    } else {\n      removeTileset(this, entity, tilesetHash, primitives);\n      entities.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    removeTileset(this, entity, tilesetHash, primitives);\n    entities.remove(entity.id);\n  }\n};\n\nfunction removeTileset(visualizer, entity, tilesetHash, primitives) {\n  const tilesetData = tilesetHash[entity.id];\n  if (defined(tilesetData)) {\n    if (defined(tilesetData.tilesetPrimitive)) {\n      primitives.removeAndDestroy(tilesetData.tilesetPrimitive);\n    }\n    delete tilesetHash[entity.id];\n  }\n}\n\nasync function createTileset(resource, tilesetHash, entity, primitives) {\n  tilesetHash[entity.id] = {\n    url: resource.url,\n    loadFail: false,\n  };\n\n  try {\n    const tileset = await Cesium3DTileset.fromUrl(resource);\n    tileset.id = entity;\n    primitives.add(tileset);\n\n    if (!defined(tilesetHash[entity.id])) {\n      return;\n    }\n\n    tilesetHash[entity.id].tilesetPrimitive = tileset;\n  } catch (error) {\n    console.error(error);\n    tilesetHash[entity.id].loadFail = true;\n  }\n}\n\nexport default Cesium3DTilesetVisualizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}