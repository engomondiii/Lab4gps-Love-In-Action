{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport CesiumMath from \"./Math.js\";\nfunction hue2rgb(m1, m2, h) {\n  if (h < 0) {\n    h += 1;\n  }\n  if (h > 1) {\n    h -= 1;\n  }\n  if (h * 6 < 1) {\n    return m1 + (m2 - m1) * 6 * h;\n  }\n  if (h * 2 < 1) {\n    return m2;\n  }\n  if (h * 3 < 2) {\n    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n  }\n  return m1;\n}\n\n/**\n * A color, specified using red, green, blue, and alpha values,\n * which range from <code>0</code> (no intensity) to <code>1.0</code> (full intensity).\n * @param {number} [red=1.0] The red component.\n * @param {number} [green=1.0] The green component.\n * @param {number} [blue=1.0] The blue component.\n * @param {number} [alpha=1.0] The alpha component.\n *\n * @constructor\n * @alias Color\n *\n * @see Packable\n */\nfunction Color(red, green, blue, alpha) {\n  /**\n   * The red component.\n   * @type {number}\n   * @default 1.0\n   */\n  this.red = defaultValue(red, 1.0);\n  /**\n   * The green component.\n   * @type {number}\n   * @default 1.0\n   */\n  this.green = defaultValue(green, 1.0);\n  /**\n   * The blue component.\n   * @type {number}\n   * @default 1.0\n   */\n  this.blue = defaultValue(blue, 1.0);\n  /**\n   * The alpha component.\n   * @type {number}\n   * @default 1.0\n   */\n  this.alpha = defaultValue(alpha, 1.0);\n}\n\n/**\n * Creates a Color instance from a {@link Cartesian4}. <code>x</code>, <code>y</code>, <code>z</code>,\n * and <code>w</code> map to <code>red</code>, <code>green</code>, <code>blue</code>, and <code>alpha</code>, respectively.\n *\n * @param {Cartesian4} cartesian The source cartesian.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.fromCartesian4 = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Color(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n  }\n  result.red = cartesian.x;\n  result.green = cartesian.y;\n  result.blue = cartesian.z;\n  result.alpha = cartesian.w;\n  return result;\n};\n\n/**\n * Creates a new Color specified using red, green, blue, and alpha values\n * that are in the range of 0 to 255, converting them internally to a range of 0.0 to 1.0.\n *\n * @param {number} [red=255] The red component.\n * @param {number} [green=255] The green component.\n * @param {number} [blue=255] The blue component.\n * @param {number} [alpha=255] The alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.fromBytes = function (red, green, blue, alpha, result) {\n  red = Color.byteToFloat(defaultValue(red, 255.0));\n  green = Color.byteToFloat(defaultValue(green, 255.0));\n  blue = Color.byteToFloat(defaultValue(blue, 255.0));\n  alpha = Color.byteToFloat(defaultValue(alpha, 255.0));\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n/**\n * Creates a new Color that has the same red, green, and blue components\n * of the specified color, but with the specified alpha value.\n *\n * @param {Color} color The base color\n * @param {number} alpha The new alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n *\n * @example const translucentRed = Cesium.Color.fromAlpha(Cesium.Color.RED, 0.9);\n */\nColor.fromAlpha = function (color, alpha, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"alpha\", alpha);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Color(color.red, color.green, color.blue, alpha);\n  }\n  result.red = color.red;\n  result.green = color.green;\n  result.blue = color.blue;\n  result.alpha = alpha;\n  return result;\n};\nlet scratchArrayBuffer;\nlet scratchUint32Array;\nlet scratchUint8Array;\nif (FeatureDetection.supportsTypedArrays()) {\n  scratchArrayBuffer = new ArrayBuffer(4);\n  scratchUint32Array = new Uint32Array(scratchArrayBuffer);\n  scratchUint8Array = new Uint8Array(scratchArrayBuffer);\n}\n\n/**\n * Creates a new Color from a single numeric unsigned 32-bit RGBA value, using the endianness\n * of the system.\n *\n * @param {number} rgba A single numeric unsigned 32-bit RGBA value.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object.\n *\n * @example\n * const color = Cesium.Color.fromRgba(0x67ADDFFF);\n *\n * @see Color#toRgba\n */\nColor.fromRgba = function (rgba, result) {\n  // scratchUint32Array and scratchUint8Array share an underlying array buffer\n  scratchUint32Array[0] = rgba;\n  return Color.fromBytes(scratchUint8Array[0], scratchUint8Array[1], scratchUint8Array[2], scratchUint8Array[3], result);\n};\n\n/**\n * Creates a Color instance from hue, saturation, and lightness.\n *\n * @param {number} [hue=0] The hue angle 0...1\n * @param {number} [saturation=0] The saturation value 0...1\n * @param {number} [lightness=0] The lightness value 0...1\n * @param {number} [alpha=1.0] The alpha component 0...1\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object.\n *\n * @see {@link http://www.w3.org/TR/css3-color/#hsl-color|CSS color values}\n */\nColor.fromHsl = function (hue, saturation, lightness, alpha, result) {\n  hue = defaultValue(hue, 0.0) % 1.0;\n  saturation = defaultValue(saturation, 0.0);\n  lightness = defaultValue(lightness, 0.0);\n  alpha = defaultValue(alpha, 1.0);\n  let red = lightness;\n  let green = lightness;\n  let blue = lightness;\n  if (saturation !== 0) {\n    let m2;\n    if (lightness < 0.5) {\n      m2 = lightness * (1 + saturation);\n    } else {\n      m2 = lightness + saturation - lightness * saturation;\n    }\n    const m1 = 2.0 * lightness - m2;\n    red = hue2rgb(m1, m2, hue + 1 / 3);\n    green = hue2rgb(m1, m2, hue);\n    blue = hue2rgb(m1, m2, hue - 1 / 3);\n  }\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n/**\n * Creates a random color using the provided options. For reproducible random colors, you should\n * call {@link CesiumMath#setRandomNumberSeed} once at the beginning of your application.\n *\n * @param {object} [options] Object with the following properties:\n * @param {number} [options.red] If specified, the red component to use instead of a randomized value.\n * @param {number} [options.minimumRed=0.0] The maximum red value to generate if none was specified.\n * @param {number} [options.maximumRed=1.0] The minimum red value to generate if none was specified.\n * @param {number} [options.green] If specified, the green component to use instead of a randomized value.\n * @param {number} [options.minimumGreen=0.0] The maximum green value to generate if none was specified.\n * @param {number} [options.maximumGreen=1.0] The minimum green value to generate if none was specified.\n * @param {number} [options.blue] If specified, the blue component to use instead of a randomized value.\n * @param {number} [options.minimumBlue=0.0] The maximum blue value to generate if none was specified.\n * @param {number} [options.maximumBlue=1.0] The minimum blue value to generate if none was specified.\n * @param {number} [options.alpha] If specified, the alpha component to use instead of a randomized value.\n * @param {number} [options.minimumAlpha=0.0] The maximum alpha value to generate if none was specified.\n * @param {number} [options.maximumAlpha=1.0] The minimum alpha value to generate if none was specified.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined.\n *\n * @exception {DeveloperError} minimumRed must be less than or equal to maximumRed.\n * @exception {DeveloperError} minimumGreen must be less than or equal to maximumGreen.\n * @exception {DeveloperError} minimumBlue must be less than or equal to maximumBlue.\n * @exception {DeveloperError} minimumAlpha must be less than or equal to maximumAlpha.\n *\n * @example\n * //Create a completely random color\n * const color = Cesium.Color.fromRandom();\n *\n * //Create a random shade of yellow.\n * const color1 = Cesium.Color.fromRandom({\n *     red : 1.0,\n *     green : 1.0,\n *     alpha : 1.0\n * });\n *\n * //Create a random bright color.\n * const color2 = Cesium.Color.fromRandom({\n *     minimumRed : 0.75,\n *     minimumGreen : 0.75,\n *     minimumBlue : 0.75,\n *     alpha : 1.0\n * });\n */\nColor.fromRandom = function (options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let red = options.red;\n  if (!defined(red)) {\n    const minimumRed = defaultValue(options.minimumRed, 0);\n    const maximumRed = defaultValue(options.maximumRed, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\"minimumRed\", minimumRed, maximumRed);\n    //>>includeEnd('debug');\n\n    red = minimumRed + CesiumMath.nextRandomNumber() * (maximumRed - minimumRed);\n  }\n  let green = options.green;\n  if (!defined(green)) {\n    const minimumGreen = defaultValue(options.minimumGreen, 0);\n    const maximumGreen = defaultValue(options.maximumGreen, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\"minimumGreen\", minimumGreen, maximumGreen);\n    //>>includeEnd('debug');\n    green = minimumGreen + CesiumMath.nextRandomNumber() * (maximumGreen - minimumGreen);\n  }\n  let blue = options.blue;\n  if (!defined(blue)) {\n    const minimumBlue = defaultValue(options.minimumBlue, 0);\n    const maximumBlue = defaultValue(options.maximumBlue, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\"minimumBlue\", minimumBlue, maximumBlue);\n    //>>includeEnd('debug');\n\n    blue = minimumBlue + CesiumMath.nextRandomNumber() * (maximumBlue - minimumBlue);\n  }\n  let alpha = options.alpha;\n  if (!defined(alpha)) {\n    const minimumAlpha = defaultValue(options.minimumAlpha, 0);\n    const maximumAlpha = defaultValue(options.maximumAlpha, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\"minimumAlpha\", minimumAlpha, maximumAlpha);\n    //>>includeEnd('debug');\n\n    alpha = minimumAlpha + CesiumMath.nextRandomNumber() * (maximumAlpha - minimumAlpha);\n  }\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n//#rgba\nconst rgbaMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;\n//#rrggbbaa\nconst rrggbbaaMatcher = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;\n//rgb(), rgba(), or rgb%()\nconst rgbParenthesesMatcher = /^rgba?\\s*\\(\\s*([0-9.]+%?)\\s*[,\\s]+\\s*([0-9.]+%?)\\s*[,\\s]+\\s*([0-9.]+%?)(?:\\s*[,\\s/]+\\s*([0-9.]+))?\\s*\\)$/i;\n//hsl() or hsla()\nconst hslParenthesesMatcher = /^hsla?\\s*\\(\\s*([0-9.]+)\\s*[,\\s]+\\s*([0-9.]+%)\\s*[,\\s]+\\s*([0-9.]+%)(?:\\s*[,\\s/]+\\s*([0-9.]+))?\\s*\\)$/i;\n\n/**\n * Creates a Color instance from a CSS color value.\n *\n * @param {string} color The CSS color value in #rgb, #rgba, #rrggbb, #rrggbbaa, rgb(), rgba(), hsl(), or hsla() format.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object, or undefined if the string was not a valid CSS color.\n *\n *\n * @example\n * const cesiumBlue = Cesium.Color.fromCssColorString('#67ADDF');\n * const green = Cesium.Color.fromCssColorString('green');\n *\n * @see {@link http://www.w3.org/TR/css3-color|CSS color values}\n */\nColor.fromCssColorString = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"color\", color);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Color();\n  }\n\n  // Remove all surrounding whitespaces from the color string\n  color = color.trim();\n  const namedColor = Color[color.toUpperCase()];\n  if (defined(namedColor)) {\n    Color.clone(namedColor, result);\n    return result;\n  }\n  let matches = rgbaMatcher.exec(color);\n  if (matches !== null) {\n    result.red = parseInt(matches[1], 16) / 15;\n    result.green = parseInt(matches[2], 16) / 15.0;\n    result.blue = parseInt(matches[3], 16) / 15.0;\n    result.alpha = parseInt(defaultValue(matches[4], \"f\"), 16) / 15.0;\n    return result;\n  }\n  matches = rrggbbaaMatcher.exec(color);\n  if (matches !== null) {\n    result.red = parseInt(matches[1], 16) / 255.0;\n    result.green = parseInt(matches[2], 16) / 255.0;\n    result.blue = parseInt(matches[3], 16) / 255.0;\n    result.alpha = parseInt(defaultValue(matches[4], \"ff\"), 16) / 255.0;\n    return result;\n  }\n  matches = rgbParenthesesMatcher.exec(color);\n  if (matches !== null) {\n    result.red = parseFloat(matches[1]) / (\"%\" === matches[1].substr(-1) ? 100.0 : 255.0);\n    result.green = parseFloat(matches[2]) / (\"%\" === matches[2].substr(-1) ? 100.0 : 255.0);\n    result.blue = parseFloat(matches[3]) / (\"%\" === matches[3].substr(-1) ? 100.0 : 255.0);\n    result.alpha = parseFloat(defaultValue(matches[4], \"1.0\"));\n    return result;\n  }\n  matches = hslParenthesesMatcher.exec(color);\n  if (matches !== null) {\n    return Color.fromHsl(parseFloat(matches[1]) / 360.0, parseFloat(matches[2]) / 100.0, parseFloat(matches[3]) / 100.0, parseFloat(defaultValue(matches[4], \"1.0\")), result);\n  }\n  result = undefined;\n  return result;\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nColor.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Color} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nColor.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.red;\n  array[startingIndex++] = value.green;\n  array[startingIndex++] = value.blue;\n  array[startingIndex] = value.alpha;\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Color} [result] The object into which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  if (!defined(result)) {\n    result = new Color();\n  }\n  result.red = array[startingIndex++];\n  result.green = array[startingIndex++];\n  result.blue = array[startingIndex++];\n  result.alpha = array[startingIndex];\n  return result;\n};\n\n/**\n * Converts a 'byte' color component in the range of 0 to 255 into\n * a 'float' color component in the range of 0 to 1.0.\n *\n * @param {number} number The number to be converted.\n * @returns {number} The converted number.\n */\nColor.byteToFloat = function (number) {\n  return number / 255.0;\n};\n\n/**\n * Converts a 'float' color component in the range of 0 to 1.0 into\n * a 'byte' color component in the range of 0 to 255.\n *\n * @param {number} number The number to be converted.\n * @returns {number} The converted number.\n */\nColor.floatToByte = function (number) {\n  return number === 1.0 ? 255.0 : number * 256.0 | 0;\n};\n\n/**\n * Duplicates a Color.\n *\n * @param {Color} color The Color to duplicate.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined. (Returns undefined if color is undefined)\n */\nColor.clone = function (color, result) {\n  if (!defined(color)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Color(color.red, color.green, color.blue, color.alpha);\n  }\n  result.red = color.red;\n  result.green = color.green;\n  result.blue = color.blue;\n  result.alpha = color.alpha;\n  return result;\n};\n\n/**\n * Returns true if the first Color equals the second color.\n *\n * @param {Color} left The first Color to compare for equality.\n * @param {Color} right The second Color to compare for equality.\n * @returns {boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\n */\nColor.equals = function (left, right) {\n  return left === right ||\n  //\n  defined(left) &&\n  //\n  defined(right) &&\n  //\n  left.red === right.red &&\n  //\n  left.green === right.green &&\n  //\n  left.blue === right.blue &&\n  //\n  left.alpha === right.alpha;\n};\n\n/**\n * @private\n */\nColor.equalsArray = function (color, array, offset) {\n  return color.red === array[offset] && color.green === array[offset + 1] && color.blue === array[offset + 2] && color.alpha === array[offset + 3];\n};\n\n/**\n * Returns a duplicate of a Color instance.\n *\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined.\n */\nColor.prototype.clone = function (result) {\n  return Color.clone(this, result);\n};\n\n/**\n * Returns true if this Color equals other.\n *\n * @param {Color} other The Color to compare for equality.\n * @returns {boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\n */\nColor.prototype.equals = function (other) {\n  return Color.equals(this, other);\n};\n\n/**\n * Returns <code>true</code> if this Color equals other componentwise within the specified epsilon.\n *\n * @param {Color} other The Color to compare for equality.\n * @param {number} [epsilon=0.0] The epsilon to use for equality testing.\n * @returns {boolean} <code>true</code> if the Colors are equal within the specified epsilon; otherwise, <code>false</code>.\n */\nColor.prototype.equalsEpsilon = function (other, epsilon) {\n  return this === other ||\n  //\n  defined(other) &&\n  //\n  Math.abs(this.red - other.red) <= epsilon &&\n  //\n  Math.abs(this.green - other.green) <= epsilon &&\n  //\n  Math.abs(this.blue - other.blue) <= epsilon &&\n  //\n  Math.abs(this.alpha - other.alpha) <= epsilon;\n};\n\n/**\n * Creates a string representing this Color in the format '(red, green, blue, alpha)'.\n *\n * @returns {string} A string representing this Color in the format '(red, green, blue, alpha)'.\n */\nColor.prototype.toString = function () {\n  return `(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\n};\n\n/**\n * Creates a string containing the CSS color value for this color.\n *\n * @returns {string} The CSS equivalent of this color.\n *\n * @see {@link http://www.w3.org/TR/css3-color/#rgba-color|CSS RGB or RGBA color values}\n */\nColor.prototype.toCssColorString = function () {\n  const red = Color.floatToByte(this.red);\n  const green = Color.floatToByte(this.green);\n  const blue = Color.floatToByte(this.blue);\n  if (this.alpha === 1) {\n    return `rgb(${red},${green},${blue})`;\n  }\n  return `rgba(${red},${green},${blue},${this.alpha})`;\n};\n\n/**\n * Creates a string containing CSS hex string color value for this color.\n *\n * @returns {string} The CSS hex string equivalent of this color.\n */\nColor.prototype.toCssHexString = function () {\n  let r = Color.floatToByte(this.red).toString(16);\n  if (r.length < 2) {\n    r = `0${r}`;\n  }\n  let g = Color.floatToByte(this.green).toString(16);\n  if (g.length < 2) {\n    g = `0${g}`;\n  }\n  let b = Color.floatToByte(this.blue).toString(16);\n  if (b.length < 2) {\n    b = `0${b}`;\n  }\n  if (this.alpha < 1) {\n    let hexAlpha = Color.floatToByte(this.alpha).toString(16);\n    if (hexAlpha.length < 2) {\n      hexAlpha = `0${hexAlpha}`;\n    }\n    return `#${r}${g}${b}${hexAlpha}`;\n  }\n  return `#${r}${g}${b}`;\n};\n\n/**\n * Converts this color to an array of red, green, blue, and alpha values\n * that are in the range of 0 to 255.\n *\n * @param {number[]} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {number[]} The modified result parameter or a new instance if result was undefined.\n */\nColor.prototype.toBytes = function (result) {\n  const red = Color.floatToByte(this.red);\n  const green = Color.floatToByte(this.green);\n  const blue = Color.floatToByte(this.blue);\n  const alpha = Color.floatToByte(this.alpha);\n  if (!defined(result)) {\n    return [red, green, blue, alpha];\n  }\n  result[0] = red;\n  result[1] = green;\n  result[2] = blue;\n  result[3] = alpha;\n  return result;\n};\n\n/**\n * Converts this color to a single numeric unsigned 32-bit RGBA value, using the endianness\n * of the system.\n *\n * @returns {number} A single numeric unsigned 32-bit RGBA value.\n *\n *\n * @example\n * const rgba = Cesium.Color.BLUE.toRgba();\n *\n * @see Color.fromRgba\n */\nColor.prototype.toRgba = function () {\n  // scratchUint32Array and scratchUint8Array share an underlying array buffer\n  scratchUint8Array[0] = Color.floatToByte(this.red);\n  scratchUint8Array[1] = Color.floatToByte(this.green);\n  scratchUint8Array[2] = Color.floatToByte(this.blue);\n  scratchUint8Array[3] = Color.floatToByte(this.alpha);\n  return scratchUint32Array[0];\n};\n\n/**\n * Brightens this color by the provided magnitude.\n *\n * @param {number} magnitude A positive number indicating the amount to brighten.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n *\n * @example\n * const brightBlue = Cesium.Color.BLUE.brighten(0.5, new Cesium.Color());\n */\nColor.prototype.brighten = function (magnitude, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"magnitude\", magnitude);\n  Check.typeOf.number.greaterThanOrEquals(\"magnitude\", magnitude, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  magnitude = 1.0 - magnitude;\n  result.red = 1.0 - (1.0 - this.red) * magnitude;\n  result.green = 1.0 - (1.0 - this.green) * magnitude;\n  result.blue = 1.0 - (1.0 - this.blue) * magnitude;\n  result.alpha = this.alpha;\n  return result;\n};\n\n/**\n * Darkens this color by the provided magnitude.\n *\n * @param {number} magnitude A positive number indicating the amount to darken.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n *\n * @example\n * const darkBlue = Cesium.Color.BLUE.darken(0.5, new Cesium.Color());\n */\nColor.prototype.darken = function (magnitude, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"magnitude\", magnitude);\n  Check.typeOf.number.greaterThanOrEquals(\"magnitude\", magnitude, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  magnitude = 1.0 - magnitude;\n  result.red = this.red * magnitude;\n  result.green = this.green * magnitude;\n  result.blue = this.blue * magnitude;\n  result.alpha = this.alpha;\n  return result;\n};\n\n/**\n * Creates a new Color that has the same red, green, and blue components\n * as this Color, but with the specified alpha value.\n *\n * @param {number} alpha The new alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n *\n * @example const translucentRed = Cesium.Color.RED.withAlpha(0.9);\n */\nColor.prototype.withAlpha = function (alpha, result) {\n  return Color.fromAlpha(this, alpha, result);\n};\n\n/**\n * Computes the componentwise sum of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red + right.red;\n  result.green = left.green + right.green;\n  result.blue = left.blue + right.blue;\n  result.alpha = left.alpha + right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise difference of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red - right.red;\n  result.green = left.green - right.green;\n  result.blue = left.blue - right.blue;\n  result.alpha = left.alpha - right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise product of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.multiply = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red * right.red;\n  result.green = left.green * right.green;\n  result.blue = left.blue * right.blue;\n  result.alpha = left.alpha * right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise quotient of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.divide = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red / right.red;\n  result.green = left.green / right.green;\n  result.blue = left.blue / right.blue;\n  result.alpha = left.alpha / right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise modulus of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.mod = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red % right.red;\n  result.green = left.green % right.green;\n  result.blue = left.blue % right.blue;\n  result.alpha = left.alpha % right.alpha;\n  return result;\n};\n\n/**\n * Computes the linear interpolation or extrapolation at t between the provided colors.\n *\n * @param {Color} start The color corresponding to t at 0.0.\n * @param {Color} end The color corresponding to t at 1.0.\n * @param {number} t The point along t at which to interpolate.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.lerp = function (start, end, t, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"start\", start);\n  Check.typeOf.object(\"end\", end);\n  Check.typeOf.number(\"t\", t);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = CesiumMath.lerp(start.red, end.red, t);\n  result.green = CesiumMath.lerp(start.green, end.green, t);\n  result.blue = CesiumMath.lerp(start.blue, end.blue, t);\n  result.alpha = CesiumMath.lerp(start.alpha, end.alpha, t);\n  return result;\n};\n\n/**\n * Multiplies the provided Color componentwise by the provided scalar.\n *\n * @param {Color} color The Color to be scaled.\n * @param {number} scalar The scalar to multiply with.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.multiplyByScalar = function (color, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = color.red * scalar;\n  result.green = color.green * scalar;\n  result.blue = color.blue * scalar;\n  result.alpha = color.alpha * scalar;\n  return result;\n};\n\n/**\n * Divides the provided Color componentwise by the provided scalar.\n *\n * @param {Color} color The Color to be divided.\n * @param {number} scalar The scalar to divide with.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.divideByScalar = function (color, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = color.red / scalar;\n  result.green = color.green / scalar;\n  result.blue = color.blue / scalar;\n  result.alpha = color.alpha / scalar;\n  return result;\n};\n\n/**\n * An immutable Color instance initialized to CSS color #F0F8FF\n * <span class=\"colorSwath\" style=\"background: #F0F8FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ALICEBLUE = Object.freeze(Color.fromCssColorString(\"#F0F8FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAEBD7\n * <span class=\"colorSwath\" style=\"background: #FAEBD7;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ANTIQUEWHITE = Object.freeze(Color.fromCssColorString(\"#FAEBD7\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FFFF\n * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AQUA = Object.freeze(Color.fromCssColorString(\"#00FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7FFFD4\n * <span class=\"colorSwath\" style=\"background: #7FFFD4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AQUAMARINE = Object.freeze(Color.fromCssColorString(\"#7FFFD4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F0FFFF\n * <span class=\"colorSwath\" style=\"background: #F0FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AZURE = Object.freeze(Color.fromCssColorString(\"#F0FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5F5DC\n * <span class=\"colorSwath\" style=\"background: #F5F5DC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BEIGE = Object.freeze(Color.fromCssColorString(\"#F5F5DC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4C4\n * <span class=\"colorSwath\" style=\"background: #FFE4C4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BISQUE = Object.freeze(Color.fromCssColorString(\"#FFE4C4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #000000\n * <span class=\"colorSwath\" style=\"background: #000000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLACK = Object.freeze(Color.fromCssColorString(\"#000000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFEBCD\n * <span class=\"colorSwath\" style=\"background: #FFEBCD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLANCHEDALMOND = Object.freeze(Color.fromCssColorString(\"#FFEBCD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #0000FF\n * <span class=\"colorSwath\" style=\"background: #0000FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLUE = Object.freeze(Color.fromCssColorString(\"#0000FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8A2BE2\n * <span class=\"colorSwath\" style=\"background: #8A2BE2;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLUEVIOLET = Object.freeze(Color.fromCssColorString(\"#8A2BE2\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A52A2A\n * <span class=\"colorSwath\" style=\"background: #A52A2A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BROWN = Object.freeze(Color.fromCssColorString(\"#A52A2A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DEB887\n * <span class=\"colorSwath\" style=\"background: #DEB887;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BURLYWOOD = Object.freeze(Color.fromCssColorString(\"#DEB887\"));\n\n/**\n * An immutable Color instance initialized to CSS color #5F9EA0\n * <span class=\"colorSwath\" style=\"background: #5F9EA0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CADETBLUE = Object.freeze(Color.fromCssColorString(\"#5F9EA0\"));\n/**\n * An immutable Color instance initialized to CSS color #7FFF00\n * <span class=\"colorSwath\" style=\"background: #7FFF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CHARTREUSE = Object.freeze(Color.fromCssColorString(\"#7FFF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D2691E\n * <span class=\"colorSwath\" style=\"background: #D2691E;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CHOCOLATE = Object.freeze(Color.fromCssColorString(\"#D2691E\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF7F50\n * <span class=\"colorSwath\" style=\"background: #FF7F50;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORAL = Object.freeze(Color.fromCssColorString(\"#FF7F50\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6495ED\n * <span class=\"colorSwath\" style=\"background: #6495ED;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORNFLOWERBLUE = Object.freeze(Color.fromCssColorString(\"#6495ED\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF8DC\n * <span class=\"colorSwath\" style=\"background: #FFF8DC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORNSILK = Object.freeze(Color.fromCssColorString(\"#FFF8DC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DC143C\n * <span class=\"colorSwath\" style=\"background: #DC143C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CRIMSON = Object.freeze(Color.fromCssColorString(\"#DC143C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FFFF\n * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CYAN = Object.freeze(Color.fromCssColorString(\"#00FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00008B\n * <span class=\"colorSwath\" style=\"background: #00008B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKBLUE = Object.freeze(Color.fromCssColorString(\"#00008B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008B8B\n * <span class=\"colorSwath\" style=\"background: #008B8B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKCYAN = Object.freeze(Color.fromCssColorString(\"#008B8B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B8860B\n * <span class=\"colorSwath\" style=\"background: #B8860B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGOLDENROD = Object.freeze(Color.fromCssColorString(\"#B8860B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A9A9A9\n * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGRAY = Object.freeze(Color.fromCssColorString(\"#A9A9A9\"));\n\n/**\n * An immutable Color instance initialized to CSS color #006400\n * <span class=\"colorSwath\" style=\"background: #006400;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGREEN = Object.freeze(Color.fromCssColorString(\"#006400\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A9A9A9\n * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGREY = Color.DARKGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #BDB76B\n * <span class=\"colorSwath\" style=\"background: #BDB76B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKKHAKI = Object.freeze(Color.fromCssColorString(\"#BDB76B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B008B\n * <span class=\"colorSwath\" style=\"background: #8B008B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKMAGENTA = Object.freeze(Color.fromCssColorString(\"#8B008B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #556B2F\n * <span class=\"colorSwath\" style=\"background: #556B2F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKOLIVEGREEN = Object.freeze(Color.fromCssColorString(\"#556B2F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF8C00\n * <span class=\"colorSwath\" style=\"background: #FF8C00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKORANGE = Object.freeze(Color.fromCssColorString(\"#FF8C00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9932CC\n * <span class=\"colorSwath\" style=\"background: #9932CC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKORCHID = Object.freeze(Color.fromCssColorString(\"#9932CC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B0000\n * <span class=\"colorSwath\" style=\"background: #8B0000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKRED = Object.freeze(Color.fromCssColorString(\"#8B0000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E9967A\n * <span class=\"colorSwath\" style=\"background: #E9967A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSALMON = Object.freeze(Color.fromCssColorString(\"#E9967A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8FBC8F\n * <span class=\"colorSwath\" style=\"background: #8FBC8F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSEAGREEN = Object.freeze(Color.fromCssColorString(\"#8FBC8F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #483D8B\n * <span class=\"colorSwath\" style=\"background: #483D8B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEBLUE = Object.freeze(Color.fromCssColorString(\"#483D8B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2F4F4F\n * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEGRAY = Object.freeze(Color.fromCssColorString(\"#2F4F4F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2F4F4F\n * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEGREY = Color.DARKSLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #00CED1\n * <span class=\"colorSwath\" style=\"background: #00CED1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKTURQUOISE = Object.freeze(Color.fromCssColorString(\"#00CED1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9400D3\n * <span class=\"colorSwath\" style=\"background: #9400D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKVIOLET = Object.freeze(Color.fromCssColorString(\"#9400D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF1493\n * <span class=\"colorSwath\" style=\"background: #FF1493;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DEEPPINK = Object.freeze(Color.fromCssColorString(\"#FF1493\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00BFFF\n * <span class=\"colorSwath\" style=\"background: #00BFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DEEPSKYBLUE = Object.freeze(Color.fromCssColorString(\"#00BFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #696969\n * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DIMGRAY = Object.freeze(Color.fromCssColorString(\"#696969\"));\n\n/**\n * An immutable Color instance initialized to CSS color #696969\n * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DIMGREY = Color.DIMGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #1E90FF\n * <span class=\"colorSwath\" style=\"background: #1E90FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DODGERBLUE = Object.freeze(Color.fromCssColorString(\"#1E90FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B22222\n * <span class=\"colorSwath\" style=\"background: #B22222;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FIREBRICK = Object.freeze(Color.fromCssColorString(\"#B22222\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFAF0\n * <span class=\"colorSwath\" style=\"background: #FFFAF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FLORALWHITE = Object.freeze(Color.fromCssColorString(\"#FFFAF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #228B22\n * <span class=\"colorSwath\" style=\"background: #228B22;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FORESTGREEN = Object.freeze(Color.fromCssColorString(\"#228B22\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF00FF\n * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FUCHSIA = Object.freeze(Color.fromCssColorString(\"#FF00FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DCDCDC\n * <span class=\"colorSwath\" style=\"background: #DCDCDC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GAINSBORO = Object.freeze(Color.fromCssColorString(\"#DCDCDC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F8F8FF\n * <span class=\"colorSwath\" style=\"background: #F8F8FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GHOSTWHITE = Object.freeze(Color.fromCssColorString(\"#F8F8FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFD700\n * <span class=\"colorSwath\" style=\"background: #FFD700;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GOLD = Object.freeze(Color.fromCssColorString(\"#FFD700\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DAA520\n * <span class=\"colorSwath\" style=\"background: #DAA520;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GOLDENROD = Object.freeze(Color.fromCssColorString(\"#DAA520\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808080\n * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GRAY = Object.freeze(Color.fromCssColorString(\"#808080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008000\n * <span class=\"colorSwath\" style=\"background: #008000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREEN = Object.freeze(Color.fromCssColorString(\"#008000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #ADFF2F\n * <span class=\"colorSwath\" style=\"background: #ADFF2F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREENYELLOW = Object.freeze(Color.fromCssColorString(\"#ADFF2F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808080\n * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREY = Color.GRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #F0FFF0\n * <span class=\"colorSwath\" style=\"background: #F0FFF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.HONEYDEW = Object.freeze(Color.fromCssColorString(\"#F0FFF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF69B4\n * <span class=\"colorSwath\" style=\"background: #FF69B4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.HOTPINK = Object.freeze(Color.fromCssColorString(\"#FF69B4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #CD5C5C\n * <span class=\"colorSwath\" style=\"background: #CD5C5C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.INDIANRED = Object.freeze(Color.fromCssColorString(\"#CD5C5C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4B0082\n * <span class=\"colorSwath\" style=\"background: #4B0082;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.INDIGO = Object.freeze(Color.fromCssColorString(\"#4B0082\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFF0\n * <span class=\"colorSwath\" style=\"background: #FFFFF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.IVORY = Object.freeze(Color.fromCssColorString(\"#FFFFF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F0E68C\n * <span class=\"colorSwath\" style=\"background: #F0E68C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.KHAKI = Object.freeze(Color.fromCssColorString(\"#F0E68C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E6E6FA\n * <span class=\"colorSwath\" style=\"background: #E6E6FA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAVENDER = Object.freeze(Color.fromCssColorString(\"#E6E6FA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF0F5\n * <span class=\"colorSwath\" style=\"background: #FFF0F5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAVENDAR_BLUSH = Object.freeze(Color.fromCssColorString(\"#FFF0F5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7CFC00\n * <span class=\"colorSwath\" style=\"background: #7CFC00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAWNGREEN = Object.freeze(Color.fromCssColorString(\"#7CFC00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFACD\n * <span class=\"colorSwath\" style=\"background: #FFFACD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LEMONCHIFFON = Object.freeze(Color.fromCssColorString(\"#FFFACD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #ADD8E6\n * <span class=\"colorSwath\" style=\"background: #ADD8E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTBLUE = Object.freeze(Color.fromCssColorString(\"#ADD8E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F08080\n * <span class=\"colorSwath\" style=\"background: #F08080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTCORAL = Object.freeze(Color.fromCssColorString(\"#F08080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E0FFFF\n * <span class=\"colorSwath\" style=\"background: #E0FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTCYAN = Object.freeze(Color.fromCssColorString(\"#E0FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAFAD2\n * <span class=\"colorSwath\" style=\"background: #FAFAD2;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGOLDENRODYELLOW = Object.freeze(Color.fromCssColorString(\"#FAFAD2\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D3D3D3\n * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGRAY = Object.freeze(Color.fromCssColorString(\"#D3D3D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #90EE90\n * <span class=\"colorSwath\" style=\"background: #90EE90;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGREEN = Object.freeze(Color.fromCssColorString(\"#90EE90\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D3D3D3\n * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGREY = Color.LIGHTGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #FFB6C1\n * <span class=\"colorSwath\" style=\"background: #FFB6C1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTPINK = Object.freeze(Color.fromCssColorString(\"#FFB6C1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #20B2AA\n * <span class=\"colorSwath\" style=\"background: #20B2AA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSEAGREEN = Object.freeze(Color.fromCssColorString(\"#20B2AA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #87CEFA\n * <span class=\"colorSwath\" style=\"background: #87CEFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSKYBLUE = Object.freeze(Color.fromCssColorString(\"#87CEFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #778899\n * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSLATEGRAY = Object.freeze(Color.fromCssColorString(\"#778899\"));\n\n/**\n * An immutable Color instance initialized to CSS color #778899\n * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSLATEGREY = Color.LIGHTSLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #B0C4DE\n * <span class=\"colorSwath\" style=\"background: #B0C4DE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSTEELBLUE = Object.freeze(Color.fromCssColorString(\"#B0C4DE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFE0\n * <span class=\"colorSwath\" style=\"background: #FFFFE0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTYELLOW = Object.freeze(Color.fromCssColorString(\"#FFFFE0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FF00\n * <span class=\"colorSwath\" style=\"background: #00FF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIME = Object.freeze(Color.fromCssColorString(\"#00FF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #32CD32\n * <span class=\"colorSwath\" style=\"background: #32CD32;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIMEGREEN = Object.freeze(Color.fromCssColorString(\"#32CD32\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAF0E6\n * <span class=\"colorSwath\" style=\"background: #FAF0E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LINEN = Object.freeze(Color.fromCssColorString(\"#FAF0E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF00FF\n * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MAGENTA = Object.freeze(Color.fromCssColorString(\"#FF00FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #800000\n * <span class=\"colorSwath\" style=\"background: #800000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MAROON = Object.freeze(Color.fromCssColorString(\"#800000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #66CDAA\n * <span class=\"colorSwath\" style=\"background: #66CDAA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMAQUAMARINE = Object.freeze(Color.fromCssColorString(\"#66CDAA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #0000CD\n * <span class=\"colorSwath\" style=\"background: #0000CD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMBLUE = Object.freeze(Color.fromCssColorString(\"#0000CD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #BA55D3\n * <span class=\"colorSwath\" style=\"background: #BA55D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMORCHID = Object.freeze(Color.fromCssColorString(\"#BA55D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9370DB\n * <span class=\"colorSwath\" style=\"background: #9370DB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMPURPLE = Object.freeze(Color.fromCssColorString(\"#9370DB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #3CB371\n * <span class=\"colorSwath\" style=\"background: #3CB371;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSEAGREEN = Object.freeze(Color.fromCssColorString(\"#3CB371\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7B68EE\n * <span class=\"colorSwath\" style=\"background: #7B68EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSLATEBLUE = Object.freeze(Color.fromCssColorString(\"#7B68EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FA9A\n * <span class=\"colorSwath\" style=\"background: #00FA9A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSPRINGGREEN = Object.freeze(Color.fromCssColorString(\"#00FA9A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #48D1CC\n * <span class=\"colorSwath\" style=\"background: #48D1CC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMTURQUOISE = Object.freeze(Color.fromCssColorString(\"#48D1CC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #C71585\n * <span class=\"colorSwath\" style=\"background: #C71585;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMVIOLETRED = Object.freeze(Color.fromCssColorString(\"#C71585\"));\n\n/**\n * An immutable Color instance initialized to CSS color #191970\n * <span class=\"colorSwath\" style=\"background: #191970;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MIDNIGHTBLUE = Object.freeze(Color.fromCssColorString(\"#191970\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5FFFA\n * <span class=\"colorSwath\" style=\"background: #F5FFFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MINTCREAM = Object.freeze(Color.fromCssColorString(\"#F5FFFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4E1\n * <span class=\"colorSwath\" style=\"background: #FFE4E1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MISTYROSE = Object.freeze(Color.fromCssColorString(\"#FFE4E1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4B5\n * <span class=\"colorSwath\" style=\"background: #FFE4B5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MOCCASIN = Object.freeze(Color.fromCssColorString(\"#FFE4B5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFDEAD\n * <span class=\"colorSwath\" style=\"background: #FFDEAD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.NAVAJOWHITE = Object.freeze(Color.fromCssColorString(\"#FFDEAD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #000080\n * <span class=\"colorSwath\" style=\"background: #000080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.NAVY = Object.freeze(Color.fromCssColorString(\"#000080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FDF5E6\n * <span class=\"colorSwath\" style=\"background: #FDF5E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLDLACE = Object.freeze(Color.fromCssColorString(\"#FDF5E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808000\n * <span class=\"colorSwath\" style=\"background: #808000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLIVE = Object.freeze(Color.fromCssColorString(\"#808000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6B8E23\n * <span class=\"colorSwath\" style=\"background: #6B8E23;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLIVEDRAB = Object.freeze(Color.fromCssColorString(\"#6B8E23\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFA500\n * <span class=\"colorSwath\" style=\"background: #FFA500;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORANGE = Object.freeze(Color.fromCssColorString(\"#FFA500\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF4500\n * <span class=\"colorSwath\" style=\"background: #FF4500;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORANGERED = Object.freeze(Color.fromCssColorString(\"#FF4500\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DA70D6\n * <span class=\"colorSwath\" style=\"background: #DA70D6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORCHID = Object.freeze(Color.fromCssColorString(\"#DA70D6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #EEE8AA\n * <span class=\"colorSwath\" style=\"background: #EEE8AA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEGOLDENROD = Object.freeze(Color.fromCssColorString(\"#EEE8AA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #98FB98\n * <span class=\"colorSwath\" style=\"background: #98FB98;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEGREEN = Object.freeze(Color.fromCssColorString(\"#98FB98\"));\n\n/**\n * An immutable Color instance initialized to CSS color #AFEEEE\n * <span class=\"colorSwath\" style=\"background: #AFEEEE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALETURQUOISE = Object.freeze(Color.fromCssColorString(\"#AFEEEE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DB7093\n * <span class=\"colorSwath\" style=\"background: #DB7093;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEVIOLETRED = Object.freeze(Color.fromCssColorString(\"#DB7093\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFEFD5\n * <span class=\"colorSwath\" style=\"background: #FFEFD5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PAPAYAWHIP = Object.freeze(Color.fromCssColorString(\"#FFEFD5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFDAB9\n * <span class=\"colorSwath\" style=\"background: #FFDAB9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PEACHPUFF = Object.freeze(Color.fromCssColorString(\"#FFDAB9\"));\n\n/**\n * An immutable Color instance initialized to CSS color #CD853F\n * <span class=\"colorSwath\" style=\"background: #CD853F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PERU = Object.freeze(Color.fromCssColorString(\"#CD853F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFC0CB\n * <span class=\"colorSwath\" style=\"background: #FFC0CB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PINK = Object.freeze(Color.fromCssColorString(\"#FFC0CB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DDA0DD\n * <span class=\"colorSwath\" style=\"background: #DDA0DD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PLUM = Object.freeze(Color.fromCssColorString(\"#DDA0DD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B0E0E6\n * <span class=\"colorSwath\" style=\"background: #B0E0E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.POWDERBLUE = Object.freeze(Color.fromCssColorString(\"#B0E0E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #800080\n * <span class=\"colorSwath\" style=\"background: #800080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PURPLE = Object.freeze(Color.fromCssColorString(\"#800080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF0000\n * <span class=\"colorSwath\" style=\"background: #FF0000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.RED = Object.freeze(Color.fromCssColorString(\"#FF0000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #BC8F8F\n * <span class=\"colorSwath\" style=\"background: #BC8F8F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ROSYBROWN = Object.freeze(Color.fromCssColorString(\"#BC8F8F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4169E1\n * <span class=\"colorSwath\" style=\"background: #4169E1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ROYALBLUE = Object.freeze(Color.fromCssColorString(\"#4169E1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B4513\n * <span class=\"colorSwath\" style=\"background: #8B4513;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SADDLEBROWN = Object.freeze(Color.fromCssColorString(\"#8B4513\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FA8072\n * <span class=\"colorSwath\" style=\"background: #FA8072;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SALMON = Object.freeze(Color.fromCssColorString(\"#FA8072\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F4A460\n * <span class=\"colorSwath\" style=\"background: #F4A460;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SANDYBROWN = Object.freeze(Color.fromCssColorString(\"#F4A460\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2E8B57\n * <span class=\"colorSwath\" style=\"background: #2E8B57;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SEAGREEN = Object.freeze(Color.fromCssColorString(\"#2E8B57\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF5EE\n * <span class=\"colorSwath\" style=\"background: #FFF5EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SEASHELL = Object.freeze(Color.fromCssColorString(\"#FFF5EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A0522D\n * <span class=\"colorSwath\" style=\"background: #A0522D;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SIENNA = Object.freeze(Color.fromCssColorString(\"#A0522D\"));\n\n/**\n * An immutable Color instance initialized to CSS color #C0C0C0\n * <span class=\"colorSwath\" style=\"background: #C0C0C0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SILVER = Object.freeze(Color.fromCssColorString(\"#C0C0C0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #87CEEB\n * <span class=\"colorSwath\" style=\"background: #87CEEB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SKYBLUE = Object.freeze(Color.fromCssColorString(\"#87CEEB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6A5ACD\n * <span class=\"colorSwath\" style=\"background: #6A5ACD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEBLUE = Object.freeze(Color.fromCssColorString(\"#6A5ACD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #708090\n * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEGRAY = Object.freeze(Color.fromCssColorString(\"#708090\"));\n\n/**\n * An immutable Color instance initialized to CSS color #708090\n * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEGREY = Color.SLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #FFFAFA\n * <span class=\"colorSwath\" style=\"background: #FFFAFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SNOW = Object.freeze(Color.fromCssColorString(\"#FFFAFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FF7F\n * <span class=\"colorSwath\" style=\"background: #00FF7F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SPRINGGREEN = Object.freeze(Color.fromCssColorString(\"#00FF7F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4682B4\n * <span class=\"colorSwath\" style=\"background: #4682B4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.STEELBLUE = Object.freeze(Color.fromCssColorString(\"#4682B4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D2B48C\n * <span class=\"colorSwath\" style=\"background: #D2B48C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TAN = Object.freeze(Color.fromCssColorString(\"#D2B48C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008080\n * <span class=\"colorSwath\" style=\"background: #008080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TEAL = Object.freeze(Color.fromCssColorString(\"#008080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D8BFD8\n * <span class=\"colorSwath\" style=\"background: #D8BFD8;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.THISTLE = Object.freeze(Color.fromCssColorString(\"#D8BFD8\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF6347\n * <span class=\"colorSwath\" style=\"background: #FF6347;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TOMATO = Object.freeze(Color.fromCssColorString(\"#FF6347\"));\n\n/**\n * An immutable Color instance initialized to CSS color #40E0D0\n * <span class=\"colorSwath\" style=\"background: #40E0D0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TURQUOISE = Object.freeze(Color.fromCssColorString(\"#40E0D0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #EE82EE\n * <span class=\"colorSwath\" style=\"background: #EE82EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.VIOLET = Object.freeze(Color.fromCssColorString(\"#EE82EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5DEB3\n * <span class=\"colorSwath\" style=\"background: #F5DEB3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHEAT = Object.freeze(Color.fromCssColorString(\"#F5DEB3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFFF\n * <span class=\"colorSwath\" style=\"background: #FFFFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHITE = Object.freeze(Color.fromCssColorString(\"#FFFFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5F5F5\n * <span class=\"colorSwath\" style=\"background: #F5F5F5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHITESMOKE = Object.freeze(Color.fromCssColorString(\"#F5F5F5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFF00\n * <span class=\"colorSwath\" style=\"background: #FFFF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.YELLOW = Object.freeze(Color.fromCssColorString(\"#FFFF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9ACD32\n * <span class=\"colorSwath\" style=\"background: #9ACD32;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.YELLOWGREEN = Object.freeze(Color.fromCssColorString(\"#9ACD32\"));\n\n/**\n * An immutable Color instance initialized to CSS transparent.\n * <span class=\"colorSwath\" style=\"background: transparent;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));\nexport default Color;","map":{"version":3,"names":["Check","defaultValue","defined","FeatureDetection","CesiumMath","hue2rgb","m1","m2","h","Color","red","green","blue","alpha","fromCartesian4","cartesian","result","typeOf","object","x","y","z","w","fromBytes","byteToFloat","fromAlpha","color","number","scratchArrayBuffer","scratchUint32Array","scratchUint8Array","supportsTypedArrays","ArrayBuffer","Uint32Array","Uint8Array","fromRgba","rgba","fromHsl","hue","saturation","lightness","fromRandom","options","EMPTY_OBJECT","minimumRed","maximumRed","lessThanOrEquals","nextRandomNumber","minimumGreen","maximumGreen","minimumBlue","maximumBlue","minimumAlpha","maximumAlpha","rgbaMatcher","rrggbbaaMatcher","rgbParenthesesMatcher","hslParenthesesMatcher","fromCssColorString","string","trim","namedColor","toUpperCase","clone","matches","exec","parseInt","parseFloat","substr","undefined","packedLength","pack","value","array","startingIndex","unpack","floatToByte","equals","left","right","equalsArray","offset","prototype","other","equalsEpsilon","epsilon","Math","abs","toString","toCssColorString","toCssHexString","r","length","g","b","hexAlpha","toBytes","toRgba","brighten","magnitude","greaterThanOrEquals","darken","withAlpha","add","subtract","multiply","divide","mod","lerp","start","end","t","multiplyByScalar","scalar","divideByScalar","ALICEBLUE","Object","freeze","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDAR_BLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","TRANSPARENT"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/Color.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport CesiumMath from \"./Math.js\";\n\nfunction hue2rgb(m1, m2, h) {\n  if (h < 0) {\n    h += 1;\n  }\n  if (h > 1) {\n    h -= 1;\n  }\n  if (h * 6 < 1) {\n    return m1 + (m2 - m1) * 6 * h;\n  }\n  if (h * 2 < 1) {\n    return m2;\n  }\n  if (h * 3 < 2) {\n    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n  }\n  return m1;\n}\n\n/**\n * A color, specified using red, green, blue, and alpha values,\n * which range from <code>0</code> (no intensity) to <code>1.0</code> (full intensity).\n * @param {number} [red=1.0] The red component.\n * @param {number} [green=1.0] The green component.\n * @param {number} [blue=1.0] The blue component.\n * @param {number} [alpha=1.0] The alpha component.\n *\n * @constructor\n * @alias Color\n *\n * @see Packable\n */\nfunction Color(red, green, blue, alpha) {\n  /**\n   * The red component.\n   * @type {number}\n   * @default 1.0\n   */\n  this.red = defaultValue(red, 1.0);\n  /**\n   * The green component.\n   * @type {number}\n   * @default 1.0\n   */\n  this.green = defaultValue(green, 1.0);\n  /**\n   * The blue component.\n   * @type {number}\n   * @default 1.0\n   */\n  this.blue = defaultValue(blue, 1.0);\n  /**\n   * The alpha component.\n   * @type {number}\n   * @default 1.0\n   */\n  this.alpha = defaultValue(alpha, 1.0);\n}\n\n/**\n * Creates a Color instance from a {@link Cartesian4}. <code>x</code>, <code>y</code>, <code>z</code>,\n * and <code>w</code> map to <code>red</code>, <code>green</code>, <code>blue</code>, and <code>alpha</code>, respectively.\n *\n * @param {Cartesian4} cartesian The source cartesian.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.fromCartesian4 = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Color(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n  }\n\n  result.red = cartesian.x;\n  result.green = cartesian.y;\n  result.blue = cartesian.z;\n  result.alpha = cartesian.w;\n  return result;\n};\n\n/**\n * Creates a new Color specified using red, green, blue, and alpha values\n * that are in the range of 0 to 255, converting them internally to a range of 0.0 to 1.0.\n *\n * @param {number} [red=255] The red component.\n * @param {number} [green=255] The green component.\n * @param {number} [blue=255] The blue component.\n * @param {number} [alpha=255] The alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.fromBytes = function (red, green, blue, alpha, result) {\n  red = Color.byteToFloat(defaultValue(red, 255.0));\n  green = Color.byteToFloat(defaultValue(green, 255.0));\n  blue = Color.byteToFloat(defaultValue(blue, 255.0));\n  alpha = Color.byteToFloat(defaultValue(alpha, 255.0));\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n/**\n * Creates a new Color that has the same red, green, and blue components\n * of the specified color, but with the specified alpha value.\n *\n * @param {Color} color The base color\n * @param {number} alpha The new alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n *\n * @example const translucentRed = Cesium.Color.fromAlpha(Cesium.Color.RED, 0.9);\n */\nColor.fromAlpha = function (color, alpha, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"alpha\", alpha);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Color(color.red, color.green, color.blue, alpha);\n  }\n\n  result.red = color.red;\n  result.green = color.green;\n  result.blue = color.blue;\n  result.alpha = alpha;\n  return result;\n};\n\nlet scratchArrayBuffer;\nlet scratchUint32Array;\nlet scratchUint8Array;\nif (FeatureDetection.supportsTypedArrays()) {\n  scratchArrayBuffer = new ArrayBuffer(4);\n  scratchUint32Array = new Uint32Array(scratchArrayBuffer);\n  scratchUint8Array = new Uint8Array(scratchArrayBuffer);\n}\n\n/**\n * Creates a new Color from a single numeric unsigned 32-bit RGBA value, using the endianness\n * of the system.\n *\n * @param {number} rgba A single numeric unsigned 32-bit RGBA value.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object.\n *\n * @example\n * const color = Cesium.Color.fromRgba(0x67ADDFFF);\n *\n * @see Color#toRgba\n */\nColor.fromRgba = function (rgba, result) {\n  // scratchUint32Array and scratchUint8Array share an underlying array buffer\n  scratchUint32Array[0] = rgba;\n  return Color.fromBytes(\n    scratchUint8Array[0],\n    scratchUint8Array[1],\n    scratchUint8Array[2],\n    scratchUint8Array[3],\n    result,\n  );\n};\n\n/**\n * Creates a Color instance from hue, saturation, and lightness.\n *\n * @param {number} [hue=0] The hue angle 0...1\n * @param {number} [saturation=0] The saturation value 0...1\n * @param {number} [lightness=0] The lightness value 0...1\n * @param {number} [alpha=1.0] The alpha component 0...1\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object.\n *\n * @see {@link http://www.w3.org/TR/css3-color/#hsl-color|CSS color values}\n */\nColor.fromHsl = function (hue, saturation, lightness, alpha, result) {\n  hue = defaultValue(hue, 0.0) % 1.0;\n  saturation = defaultValue(saturation, 0.0);\n  lightness = defaultValue(lightness, 0.0);\n  alpha = defaultValue(alpha, 1.0);\n\n  let red = lightness;\n  let green = lightness;\n  let blue = lightness;\n\n  if (saturation !== 0) {\n    let m2;\n    if (lightness < 0.5) {\n      m2 = lightness * (1 + saturation);\n    } else {\n      m2 = lightness + saturation - lightness * saturation;\n    }\n\n    const m1 = 2.0 * lightness - m2;\n    red = hue2rgb(m1, m2, hue + 1 / 3);\n    green = hue2rgb(m1, m2, hue);\n    blue = hue2rgb(m1, m2, hue - 1 / 3);\n  }\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n/**\n * Creates a random color using the provided options. For reproducible random colors, you should\n * call {@link CesiumMath#setRandomNumberSeed} once at the beginning of your application.\n *\n * @param {object} [options] Object with the following properties:\n * @param {number} [options.red] If specified, the red component to use instead of a randomized value.\n * @param {number} [options.minimumRed=0.0] The maximum red value to generate if none was specified.\n * @param {number} [options.maximumRed=1.0] The minimum red value to generate if none was specified.\n * @param {number} [options.green] If specified, the green component to use instead of a randomized value.\n * @param {number} [options.minimumGreen=0.0] The maximum green value to generate if none was specified.\n * @param {number} [options.maximumGreen=1.0] The minimum green value to generate if none was specified.\n * @param {number} [options.blue] If specified, the blue component to use instead of a randomized value.\n * @param {number} [options.minimumBlue=0.0] The maximum blue value to generate if none was specified.\n * @param {number} [options.maximumBlue=1.0] The minimum blue value to generate if none was specified.\n * @param {number} [options.alpha] If specified, the alpha component to use instead of a randomized value.\n * @param {number} [options.minimumAlpha=0.0] The maximum alpha value to generate if none was specified.\n * @param {number} [options.maximumAlpha=1.0] The minimum alpha value to generate if none was specified.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined.\n *\n * @exception {DeveloperError} minimumRed must be less than or equal to maximumRed.\n * @exception {DeveloperError} minimumGreen must be less than or equal to maximumGreen.\n * @exception {DeveloperError} minimumBlue must be less than or equal to maximumBlue.\n * @exception {DeveloperError} minimumAlpha must be less than or equal to maximumAlpha.\n *\n * @example\n * //Create a completely random color\n * const color = Cesium.Color.fromRandom();\n *\n * //Create a random shade of yellow.\n * const color1 = Cesium.Color.fromRandom({\n *     red : 1.0,\n *     green : 1.0,\n *     alpha : 1.0\n * });\n *\n * //Create a random bright color.\n * const color2 = Cesium.Color.fromRandom({\n *     minimumRed : 0.75,\n *     minimumGreen : 0.75,\n *     minimumBlue : 0.75,\n *     alpha : 1.0\n * });\n */\nColor.fromRandom = function (options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  let red = options.red;\n  if (!defined(red)) {\n    const minimumRed = defaultValue(options.minimumRed, 0);\n    const maximumRed = defaultValue(options.maximumRed, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\"minimumRed\", minimumRed, maximumRed);\n    //>>includeEnd('debug');\n\n    red =\n      minimumRed + CesiumMath.nextRandomNumber() * (maximumRed - minimumRed);\n  }\n\n  let green = options.green;\n  if (!defined(green)) {\n    const minimumGreen = defaultValue(options.minimumGreen, 0);\n    const maximumGreen = defaultValue(options.maximumGreen, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\n      \"minimumGreen\",\n      minimumGreen,\n      maximumGreen,\n    );\n    //>>includeEnd('debug');\n    green =\n      minimumGreen +\n      CesiumMath.nextRandomNumber() * (maximumGreen - minimumGreen);\n  }\n\n  let blue = options.blue;\n  if (!defined(blue)) {\n    const minimumBlue = defaultValue(options.minimumBlue, 0);\n    const maximumBlue = defaultValue(options.maximumBlue, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\n      \"minimumBlue\",\n      minimumBlue,\n      maximumBlue,\n    );\n    //>>includeEnd('debug');\n\n    blue =\n      minimumBlue + CesiumMath.nextRandomNumber() * (maximumBlue - minimumBlue);\n  }\n\n  let alpha = options.alpha;\n  if (!defined(alpha)) {\n    const minimumAlpha = defaultValue(options.minimumAlpha, 0);\n    const maximumAlpha = defaultValue(options.maximumAlpha, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\n      \"minimumAlpha\",\n      minimumAlpha,\n      maximumAlpha,\n    );\n    //>>includeEnd('debug');\n\n    alpha =\n      minimumAlpha +\n      CesiumMath.nextRandomNumber() * (maximumAlpha - minimumAlpha);\n  }\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n//#rgba\nconst rgbaMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;\n//#rrggbbaa\nconst rrggbbaaMatcher =\n  /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;\n//rgb(), rgba(), or rgb%()\nconst rgbParenthesesMatcher =\n  /^rgba?\\s*\\(\\s*([0-9.]+%?)\\s*[,\\s]+\\s*([0-9.]+%?)\\s*[,\\s]+\\s*([0-9.]+%?)(?:\\s*[,\\s/]+\\s*([0-9.]+))?\\s*\\)$/i;\n//hsl() or hsla()\nconst hslParenthesesMatcher =\n  /^hsla?\\s*\\(\\s*([0-9.]+)\\s*[,\\s]+\\s*([0-9.]+%)\\s*[,\\s]+\\s*([0-9.]+%)(?:\\s*[,\\s/]+\\s*([0-9.]+))?\\s*\\)$/i;\n\n/**\n * Creates a Color instance from a CSS color value.\n *\n * @param {string} color The CSS color value in #rgb, #rgba, #rrggbb, #rrggbbaa, rgb(), rgba(), hsl(), or hsla() format.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object, or undefined if the string was not a valid CSS color.\n *\n *\n * @example\n * const cesiumBlue = Cesium.Color.fromCssColorString('#67ADDF');\n * const green = Cesium.Color.fromCssColorString('green');\n *\n * @see {@link http://www.w3.org/TR/css3-color|CSS color values}\n */\nColor.fromCssColorString = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"color\", color);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Color();\n  }\n\n  // Remove all surrounding whitespaces from the color string\n  color = color.trim();\n\n  const namedColor = Color[color.toUpperCase()];\n  if (defined(namedColor)) {\n    Color.clone(namedColor, result);\n    return result;\n  }\n\n  let matches = rgbaMatcher.exec(color);\n  if (matches !== null) {\n    result.red = parseInt(matches[1], 16) / 15;\n    result.green = parseInt(matches[2], 16) / 15.0;\n    result.blue = parseInt(matches[3], 16) / 15.0;\n    result.alpha = parseInt(defaultValue(matches[4], \"f\"), 16) / 15.0;\n    return result;\n  }\n\n  matches = rrggbbaaMatcher.exec(color);\n  if (matches !== null) {\n    result.red = parseInt(matches[1], 16) / 255.0;\n    result.green = parseInt(matches[2], 16) / 255.0;\n    result.blue = parseInt(matches[3], 16) / 255.0;\n    result.alpha = parseInt(defaultValue(matches[4], \"ff\"), 16) / 255.0;\n    return result;\n  }\n\n  matches = rgbParenthesesMatcher.exec(color);\n  if (matches !== null) {\n    result.red =\n      parseFloat(matches[1]) / (\"%\" === matches[1].substr(-1) ? 100.0 : 255.0);\n    result.green =\n      parseFloat(matches[2]) / (\"%\" === matches[2].substr(-1) ? 100.0 : 255.0);\n    result.blue =\n      parseFloat(matches[3]) / (\"%\" === matches[3].substr(-1) ? 100.0 : 255.0);\n    result.alpha = parseFloat(defaultValue(matches[4], \"1.0\"));\n    return result;\n  }\n\n  matches = hslParenthesesMatcher.exec(color);\n  if (matches !== null) {\n    return Color.fromHsl(\n      parseFloat(matches[1]) / 360.0,\n      parseFloat(matches[2]) / 100.0,\n      parseFloat(matches[3]) / 100.0,\n      parseFloat(defaultValue(matches[4], \"1.0\")),\n      result,\n    );\n  }\n\n  result = undefined;\n  return result;\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nColor.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Color} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nColor.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.red;\n  array[startingIndex++] = value.green;\n  array[startingIndex++] = value.blue;\n  array[startingIndex] = value.alpha;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Color} [result] The object into which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  if (!defined(result)) {\n    result = new Color();\n  }\n  result.red = array[startingIndex++];\n  result.green = array[startingIndex++];\n  result.blue = array[startingIndex++];\n  result.alpha = array[startingIndex];\n  return result;\n};\n\n/**\n * Converts a 'byte' color component in the range of 0 to 255 into\n * a 'float' color component in the range of 0 to 1.0.\n *\n * @param {number} number The number to be converted.\n * @returns {number} The converted number.\n */\nColor.byteToFloat = function (number) {\n  return number / 255.0;\n};\n\n/**\n * Converts a 'float' color component in the range of 0 to 1.0 into\n * a 'byte' color component in the range of 0 to 255.\n *\n * @param {number} number The number to be converted.\n * @returns {number} The converted number.\n */\nColor.floatToByte = function (number) {\n  return number === 1.0 ? 255.0 : (number * 256.0) | 0;\n};\n\n/**\n * Duplicates a Color.\n *\n * @param {Color} color The Color to duplicate.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined. (Returns undefined if color is undefined)\n */\nColor.clone = function (color, result) {\n  if (!defined(color)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Color(color.red, color.green, color.blue, color.alpha);\n  }\n  result.red = color.red;\n  result.green = color.green;\n  result.blue = color.blue;\n  result.alpha = color.alpha;\n  return result;\n};\n\n/**\n * Returns true if the first Color equals the second color.\n *\n * @param {Color} left The first Color to compare for equality.\n * @param {Color} right The second Color to compare for equality.\n * @returns {boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\n */\nColor.equals = function (left, right) {\n  return (\n    left === right || //\n    (defined(left) && //\n      defined(right) && //\n      left.red === right.red && //\n      left.green === right.green && //\n      left.blue === right.blue && //\n      left.alpha === right.alpha)\n  );\n};\n\n/**\n * @private\n */\nColor.equalsArray = function (color, array, offset) {\n  return (\n    color.red === array[offset] &&\n    color.green === array[offset + 1] &&\n    color.blue === array[offset + 2] &&\n    color.alpha === array[offset + 3]\n  );\n};\n\n/**\n * Returns a duplicate of a Color instance.\n *\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined.\n */\nColor.prototype.clone = function (result) {\n  return Color.clone(this, result);\n};\n\n/**\n * Returns true if this Color equals other.\n *\n * @param {Color} other The Color to compare for equality.\n * @returns {boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\n */\nColor.prototype.equals = function (other) {\n  return Color.equals(this, other);\n};\n\n/**\n * Returns <code>true</code> if this Color equals other componentwise within the specified epsilon.\n *\n * @param {Color} other The Color to compare for equality.\n * @param {number} [epsilon=0.0] The epsilon to use for equality testing.\n * @returns {boolean} <code>true</code> if the Colors are equal within the specified epsilon; otherwise, <code>false</code>.\n */\nColor.prototype.equalsEpsilon = function (other, epsilon) {\n  return (\n    this === other || //\n    (defined(other) && //\n      Math.abs(this.red - other.red) <= epsilon && //\n      Math.abs(this.green - other.green) <= epsilon && //\n      Math.abs(this.blue - other.blue) <= epsilon && //\n      Math.abs(this.alpha - other.alpha) <= epsilon)\n  );\n};\n\n/**\n * Creates a string representing this Color in the format '(red, green, blue, alpha)'.\n *\n * @returns {string} A string representing this Color in the format '(red, green, blue, alpha)'.\n */\nColor.prototype.toString = function () {\n  return `(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\n};\n\n/**\n * Creates a string containing the CSS color value for this color.\n *\n * @returns {string} The CSS equivalent of this color.\n *\n * @see {@link http://www.w3.org/TR/css3-color/#rgba-color|CSS RGB or RGBA color values}\n */\nColor.prototype.toCssColorString = function () {\n  const red = Color.floatToByte(this.red);\n  const green = Color.floatToByte(this.green);\n  const blue = Color.floatToByte(this.blue);\n  if (this.alpha === 1) {\n    return `rgb(${red},${green},${blue})`;\n  }\n  return `rgba(${red},${green},${blue},${this.alpha})`;\n};\n\n/**\n * Creates a string containing CSS hex string color value for this color.\n *\n * @returns {string} The CSS hex string equivalent of this color.\n */\nColor.prototype.toCssHexString = function () {\n  let r = Color.floatToByte(this.red).toString(16);\n  if (r.length < 2) {\n    r = `0${r}`;\n  }\n  let g = Color.floatToByte(this.green).toString(16);\n  if (g.length < 2) {\n    g = `0${g}`;\n  }\n  let b = Color.floatToByte(this.blue).toString(16);\n  if (b.length < 2) {\n    b = `0${b}`;\n  }\n  if (this.alpha < 1) {\n    let hexAlpha = Color.floatToByte(this.alpha).toString(16);\n    if (hexAlpha.length < 2) {\n      hexAlpha = `0${hexAlpha}`;\n    }\n    return `#${r}${g}${b}${hexAlpha}`;\n  }\n  return `#${r}${g}${b}`;\n};\n\n/**\n * Converts this color to an array of red, green, blue, and alpha values\n * that are in the range of 0 to 255.\n *\n * @param {number[]} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {number[]} The modified result parameter or a new instance if result was undefined.\n */\nColor.prototype.toBytes = function (result) {\n  const red = Color.floatToByte(this.red);\n  const green = Color.floatToByte(this.green);\n  const blue = Color.floatToByte(this.blue);\n  const alpha = Color.floatToByte(this.alpha);\n\n  if (!defined(result)) {\n    return [red, green, blue, alpha];\n  }\n  result[0] = red;\n  result[1] = green;\n  result[2] = blue;\n  result[3] = alpha;\n  return result;\n};\n\n/**\n * Converts this color to a single numeric unsigned 32-bit RGBA value, using the endianness\n * of the system.\n *\n * @returns {number} A single numeric unsigned 32-bit RGBA value.\n *\n *\n * @example\n * const rgba = Cesium.Color.BLUE.toRgba();\n *\n * @see Color.fromRgba\n */\nColor.prototype.toRgba = function () {\n  // scratchUint32Array and scratchUint8Array share an underlying array buffer\n  scratchUint8Array[0] = Color.floatToByte(this.red);\n  scratchUint8Array[1] = Color.floatToByte(this.green);\n  scratchUint8Array[2] = Color.floatToByte(this.blue);\n  scratchUint8Array[3] = Color.floatToByte(this.alpha);\n  return scratchUint32Array[0];\n};\n\n/**\n * Brightens this color by the provided magnitude.\n *\n * @param {number} magnitude A positive number indicating the amount to brighten.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n *\n * @example\n * const brightBlue = Cesium.Color.BLUE.brighten(0.5, new Cesium.Color());\n */\nColor.prototype.brighten = function (magnitude, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"magnitude\", magnitude);\n  Check.typeOf.number.greaterThanOrEquals(\"magnitude\", magnitude, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  magnitude = 1.0 - magnitude;\n  result.red = 1.0 - (1.0 - this.red) * magnitude;\n  result.green = 1.0 - (1.0 - this.green) * magnitude;\n  result.blue = 1.0 - (1.0 - this.blue) * magnitude;\n  result.alpha = this.alpha;\n  return result;\n};\n\n/**\n * Darkens this color by the provided magnitude.\n *\n * @param {number} magnitude A positive number indicating the amount to darken.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n *\n * @example\n * const darkBlue = Cesium.Color.BLUE.darken(0.5, new Cesium.Color());\n */\nColor.prototype.darken = function (magnitude, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"magnitude\", magnitude);\n  Check.typeOf.number.greaterThanOrEquals(\"magnitude\", magnitude, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  magnitude = 1.0 - magnitude;\n  result.red = this.red * magnitude;\n  result.green = this.green * magnitude;\n  result.blue = this.blue * magnitude;\n  result.alpha = this.alpha;\n  return result;\n};\n\n/**\n * Creates a new Color that has the same red, green, and blue components\n * as this Color, but with the specified alpha value.\n *\n * @param {number} alpha The new alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n *\n * @example const translucentRed = Cesium.Color.RED.withAlpha(0.9);\n */\nColor.prototype.withAlpha = function (alpha, result) {\n  return Color.fromAlpha(this, alpha, result);\n};\n\n/**\n * Computes the componentwise sum of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red + right.red;\n  result.green = left.green + right.green;\n  result.blue = left.blue + right.blue;\n  result.alpha = left.alpha + right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise difference of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red - right.red;\n  result.green = left.green - right.green;\n  result.blue = left.blue - right.blue;\n  result.alpha = left.alpha - right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise product of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.multiply = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red * right.red;\n  result.green = left.green * right.green;\n  result.blue = left.blue * right.blue;\n  result.alpha = left.alpha * right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise quotient of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.divide = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red / right.red;\n  result.green = left.green / right.green;\n  result.blue = left.blue / right.blue;\n  result.alpha = left.alpha / right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise modulus of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.mod = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red % right.red;\n  result.green = left.green % right.green;\n  result.blue = left.blue % right.blue;\n  result.alpha = left.alpha % right.alpha;\n  return result;\n};\n\n/**\n * Computes the linear interpolation or extrapolation at t between the provided colors.\n *\n * @param {Color} start The color corresponding to t at 0.0.\n * @param {Color} end The color corresponding to t at 1.0.\n * @param {number} t The point along t at which to interpolate.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.lerp = function (start, end, t, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"start\", start);\n  Check.typeOf.object(\"end\", end);\n  Check.typeOf.number(\"t\", t);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = CesiumMath.lerp(start.red, end.red, t);\n  result.green = CesiumMath.lerp(start.green, end.green, t);\n  result.blue = CesiumMath.lerp(start.blue, end.blue, t);\n  result.alpha = CesiumMath.lerp(start.alpha, end.alpha, t);\n  return result;\n};\n\n/**\n * Multiplies the provided Color componentwise by the provided scalar.\n *\n * @param {Color} color The Color to be scaled.\n * @param {number} scalar The scalar to multiply with.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.multiplyByScalar = function (color, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = color.red * scalar;\n  result.green = color.green * scalar;\n  result.blue = color.blue * scalar;\n  result.alpha = color.alpha * scalar;\n  return result;\n};\n\n/**\n * Divides the provided Color componentwise by the provided scalar.\n *\n * @param {Color} color The Color to be divided.\n * @param {number} scalar The scalar to divide with.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.divideByScalar = function (color, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = color.red / scalar;\n  result.green = color.green / scalar;\n  result.blue = color.blue / scalar;\n  result.alpha = color.alpha / scalar;\n  return result;\n};\n\n/**\n * An immutable Color instance initialized to CSS color #F0F8FF\n * <span class=\"colorSwath\" style=\"background: #F0F8FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ALICEBLUE = Object.freeze(Color.fromCssColorString(\"#F0F8FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAEBD7\n * <span class=\"colorSwath\" style=\"background: #FAEBD7;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ANTIQUEWHITE = Object.freeze(Color.fromCssColorString(\"#FAEBD7\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FFFF\n * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AQUA = Object.freeze(Color.fromCssColorString(\"#00FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7FFFD4\n * <span class=\"colorSwath\" style=\"background: #7FFFD4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AQUAMARINE = Object.freeze(Color.fromCssColorString(\"#7FFFD4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F0FFFF\n * <span class=\"colorSwath\" style=\"background: #F0FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AZURE = Object.freeze(Color.fromCssColorString(\"#F0FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5F5DC\n * <span class=\"colorSwath\" style=\"background: #F5F5DC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BEIGE = Object.freeze(Color.fromCssColorString(\"#F5F5DC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4C4\n * <span class=\"colorSwath\" style=\"background: #FFE4C4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BISQUE = Object.freeze(Color.fromCssColorString(\"#FFE4C4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #000000\n * <span class=\"colorSwath\" style=\"background: #000000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLACK = Object.freeze(Color.fromCssColorString(\"#000000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFEBCD\n * <span class=\"colorSwath\" style=\"background: #FFEBCD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLANCHEDALMOND = Object.freeze(Color.fromCssColorString(\"#FFEBCD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #0000FF\n * <span class=\"colorSwath\" style=\"background: #0000FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLUE = Object.freeze(Color.fromCssColorString(\"#0000FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8A2BE2\n * <span class=\"colorSwath\" style=\"background: #8A2BE2;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLUEVIOLET = Object.freeze(Color.fromCssColorString(\"#8A2BE2\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A52A2A\n * <span class=\"colorSwath\" style=\"background: #A52A2A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BROWN = Object.freeze(Color.fromCssColorString(\"#A52A2A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DEB887\n * <span class=\"colorSwath\" style=\"background: #DEB887;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BURLYWOOD = Object.freeze(Color.fromCssColorString(\"#DEB887\"));\n\n/**\n * An immutable Color instance initialized to CSS color #5F9EA0\n * <span class=\"colorSwath\" style=\"background: #5F9EA0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CADETBLUE = Object.freeze(Color.fromCssColorString(\"#5F9EA0\"));\n/**\n * An immutable Color instance initialized to CSS color #7FFF00\n * <span class=\"colorSwath\" style=\"background: #7FFF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CHARTREUSE = Object.freeze(Color.fromCssColorString(\"#7FFF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D2691E\n * <span class=\"colorSwath\" style=\"background: #D2691E;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CHOCOLATE = Object.freeze(Color.fromCssColorString(\"#D2691E\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF7F50\n * <span class=\"colorSwath\" style=\"background: #FF7F50;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORAL = Object.freeze(Color.fromCssColorString(\"#FF7F50\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6495ED\n * <span class=\"colorSwath\" style=\"background: #6495ED;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORNFLOWERBLUE = Object.freeze(Color.fromCssColorString(\"#6495ED\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF8DC\n * <span class=\"colorSwath\" style=\"background: #FFF8DC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORNSILK = Object.freeze(Color.fromCssColorString(\"#FFF8DC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DC143C\n * <span class=\"colorSwath\" style=\"background: #DC143C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CRIMSON = Object.freeze(Color.fromCssColorString(\"#DC143C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FFFF\n * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CYAN = Object.freeze(Color.fromCssColorString(\"#00FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00008B\n * <span class=\"colorSwath\" style=\"background: #00008B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKBLUE = Object.freeze(Color.fromCssColorString(\"#00008B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008B8B\n * <span class=\"colorSwath\" style=\"background: #008B8B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKCYAN = Object.freeze(Color.fromCssColorString(\"#008B8B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B8860B\n * <span class=\"colorSwath\" style=\"background: #B8860B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGOLDENROD = Object.freeze(Color.fromCssColorString(\"#B8860B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A9A9A9\n * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGRAY = Object.freeze(Color.fromCssColorString(\"#A9A9A9\"));\n\n/**\n * An immutable Color instance initialized to CSS color #006400\n * <span class=\"colorSwath\" style=\"background: #006400;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGREEN = Object.freeze(Color.fromCssColorString(\"#006400\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A9A9A9\n * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGREY = Color.DARKGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #BDB76B\n * <span class=\"colorSwath\" style=\"background: #BDB76B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKKHAKI = Object.freeze(Color.fromCssColorString(\"#BDB76B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B008B\n * <span class=\"colorSwath\" style=\"background: #8B008B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKMAGENTA = Object.freeze(Color.fromCssColorString(\"#8B008B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #556B2F\n * <span class=\"colorSwath\" style=\"background: #556B2F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKOLIVEGREEN = Object.freeze(Color.fromCssColorString(\"#556B2F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF8C00\n * <span class=\"colorSwath\" style=\"background: #FF8C00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKORANGE = Object.freeze(Color.fromCssColorString(\"#FF8C00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9932CC\n * <span class=\"colorSwath\" style=\"background: #9932CC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKORCHID = Object.freeze(Color.fromCssColorString(\"#9932CC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B0000\n * <span class=\"colorSwath\" style=\"background: #8B0000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKRED = Object.freeze(Color.fromCssColorString(\"#8B0000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E9967A\n * <span class=\"colorSwath\" style=\"background: #E9967A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSALMON = Object.freeze(Color.fromCssColorString(\"#E9967A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8FBC8F\n * <span class=\"colorSwath\" style=\"background: #8FBC8F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSEAGREEN = Object.freeze(Color.fromCssColorString(\"#8FBC8F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #483D8B\n * <span class=\"colorSwath\" style=\"background: #483D8B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEBLUE = Object.freeze(Color.fromCssColorString(\"#483D8B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2F4F4F\n * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEGRAY = Object.freeze(Color.fromCssColorString(\"#2F4F4F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2F4F4F\n * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEGREY = Color.DARKSLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #00CED1\n * <span class=\"colorSwath\" style=\"background: #00CED1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKTURQUOISE = Object.freeze(Color.fromCssColorString(\"#00CED1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9400D3\n * <span class=\"colorSwath\" style=\"background: #9400D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKVIOLET = Object.freeze(Color.fromCssColorString(\"#9400D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF1493\n * <span class=\"colorSwath\" style=\"background: #FF1493;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DEEPPINK = Object.freeze(Color.fromCssColorString(\"#FF1493\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00BFFF\n * <span class=\"colorSwath\" style=\"background: #00BFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DEEPSKYBLUE = Object.freeze(Color.fromCssColorString(\"#00BFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #696969\n * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DIMGRAY = Object.freeze(Color.fromCssColorString(\"#696969\"));\n\n/**\n * An immutable Color instance initialized to CSS color #696969\n * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DIMGREY = Color.DIMGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #1E90FF\n * <span class=\"colorSwath\" style=\"background: #1E90FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DODGERBLUE = Object.freeze(Color.fromCssColorString(\"#1E90FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B22222\n * <span class=\"colorSwath\" style=\"background: #B22222;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FIREBRICK = Object.freeze(Color.fromCssColorString(\"#B22222\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFAF0\n * <span class=\"colorSwath\" style=\"background: #FFFAF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FLORALWHITE = Object.freeze(Color.fromCssColorString(\"#FFFAF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #228B22\n * <span class=\"colorSwath\" style=\"background: #228B22;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FORESTGREEN = Object.freeze(Color.fromCssColorString(\"#228B22\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF00FF\n * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FUCHSIA = Object.freeze(Color.fromCssColorString(\"#FF00FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DCDCDC\n * <span class=\"colorSwath\" style=\"background: #DCDCDC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GAINSBORO = Object.freeze(Color.fromCssColorString(\"#DCDCDC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F8F8FF\n * <span class=\"colorSwath\" style=\"background: #F8F8FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GHOSTWHITE = Object.freeze(Color.fromCssColorString(\"#F8F8FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFD700\n * <span class=\"colorSwath\" style=\"background: #FFD700;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GOLD = Object.freeze(Color.fromCssColorString(\"#FFD700\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DAA520\n * <span class=\"colorSwath\" style=\"background: #DAA520;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GOLDENROD = Object.freeze(Color.fromCssColorString(\"#DAA520\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808080\n * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GRAY = Object.freeze(Color.fromCssColorString(\"#808080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008000\n * <span class=\"colorSwath\" style=\"background: #008000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREEN = Object.freeze(Color.fromCssColorString(\"#008000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #ADFF2F\n * <span class=\"colorSwath\" style=\"background: #ADFF2F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREENYELLOW = Object.freeze(Color.fromCssColorString(\"#ADFF2F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808080\n * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREY = Color.GRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #F0FFF0\n * <span class=\"colorSwath\" style=\"background: #F0FFF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.HONEYDEW = Object.freeze(Color.fromCssColorString(\"#F0FFF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF69B4\n * <span class=\"colorSwath\" style=\"background: #FF69B4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.HOTPINK = Object.freeze(Color.fromCssColorString(\"#FF69B4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #CD5C5C\n * <span class=\"colorSwath\" style=\"background: #CD5C5C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.INDIANRED = Object.freeze(Color.fromCssColorString(\"#CD5C5C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4B0082\n * <span class=\"colorSwath\" style=\"background: #4B0082;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.INDIGO = Object.freeze(Color.fromCssColorString(\"#4B0082\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFF0\n * <span class=\"colorSwath\" style=\"background: #FFFFF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.IVORY = Object.freeze(Color.fromCssColorString(\"#FFFFF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F0E68C\n * <span class=\"colorSwath\" style=\"background: #F0E68C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.KHAKI = Object.freeze(Color.fromCssColorString(\"#F0E68C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E6E6FA\n * <span class=\"colorSwath\" style=\"background: #E6E6FA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAVENDER = Object.freeze(Color.fromCssColorString(\"#E6E6FA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF0F5\n * <span class=\"colorSwath\" style=\"background: #FFF0F5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAVENDAR_BLUSH = Object.freeze(Color.fromCssColorString(\"#FFF0F5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7CFC00\n * <span class=\"colorSwath\" style=\"background: #7CFC00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAWNGREEN = Object.freeze(Color.fromCssColorString(\"#7CFC00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFACD\n * <span class=\"colorSwath\" style=\"background: #FFFACD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LEMONCHIFFON = Object.freeze(Color.fromCssColorString(\"#FFFACD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #ADD8E6\n * <span class=\"colorSwath\" style=\"background: #ADD8E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTBLUE = Object.freeze(Color.fromCssColorString(\"#ADD8E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F08080\n * <span class=\"colorSwath\" style=\"background: #F08080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTCORAL = Object.freeze(Color.fromCssColorString(\"#F08080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E0FFFF\n * <span class=\"colorSwath\" style=\"background: #E0FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTCYAN = Object.freeze(Color.fromCssColorString(\"#E0FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAFAD2\n * <span class=\"colorSwath\" style=\"background: #FAFAD2;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGOLDENRODYELLOW = Object.freeze(Color.fromCssColorString(\"#FAFAD2\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D3D3D3\n * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGRAY = Object.freeze(Color.fromCssColorString(\"#D3D3D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #90EE90\n * <span class=\"colorSwath\" style=\"background: #90EE90;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGREEN = Object.freeze(Color.fromCssColorString(\"#90EE90\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D3D3D3\n * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGREY = Color.LIGHTGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #FFB6C1\n * <span class=\"colorSwath\" style=\"background: #FFB6C1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTPINK = Object.freeze(Color.fromCssColorString(\"#FFB6C1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #20B2AA\n * <span class=\"colorSwath\" style=\"background: #20B2AA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSEAGREEN = Object.freeze(Color.fromCssColorString(\"#20B2AA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #87CEFA\n * <span class=\"colorSwath\" style=\"background: #87CEFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSKYBLUE = Object.freeze(Color.fromCssColorString(\"#87CEFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #778899\n * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSLATEGRAY = Object.freeze(Color.fromCssColorString(\"#778899\"));\n\n/**\n * An immutable Color instance initialized to CSS color #778899\n * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSLATEGREY = Color.LIGHTSLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #B0C4DE\n * <span class=\"colorSwath\" style=\"background: #B0C4DE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSTEELBLUE = Object.freeze(Color.fromCssColorString(\"#B0C4DE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFE0\n * <span class=\"colorSwath\" style=\"background: #FFFFE0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTYELLOW = Object.freeze(Color.fromCssColorString(\"#FFFFE0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FF00\n * <span class=\"colorSwath\" style=\"background: #00FF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIME = Object.freeze(Color.fromCssColorString(\"#00FF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #32CD32\n * <span class=\"colorSwath\" style=\"background: #32CD32;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIMEGREEN = Object.freeze(Color.fromCssColorString(\"#32CD32\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAF0E6\n * <span class=\"colorSwath\" style=\"background: #FAF0E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LINEN = Object.freeze(Color.fromCssColorString(\"#FAF0E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF00FF\n * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MAGENTA = Object.freeze(Color.fromCssColorString(\"#FF00FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #800000\n * <span class=\"colorSwath\" style=\"background: #800000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MAROON = Object.freeze(Color.fromCssColorString(\"#800000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #66CDAA\n * <span class=\"colorSwath\" style=\"background: #66CDAA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMAQUAMARINE = Object.freeze(Color.fromCssColorString(\"#66CDAA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #0000CD\n * <span class=\"colorSwath\" style=\"background: #0000CD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMBLUE = Object.freeze(Color.fromCssColorString(\"#0000CD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #BA55D3\n * <span class=\"colorSwath\" style=\"background: #BA55D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMORCHID = Object.freeze(Color.fromCssColorString(\"#BA55D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9370DB\n * <span class=\"colorSwath\" style=\"background: #9370DB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMPURPLE = Object.freeze(Color.fromCssColorString(\"#9370DB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #3CB371\n * <span class=\"colorSwath\" style=\"background: #3CB371;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSEAGREEN = Object.freeze(Color.fromCssColorString(\"#3CB371\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7B68EE\n * <span class=\"colorSwath\" style=\"background: #7B68EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSLATEBLUE = Object.freeze(Color.fromCssColorString(\"#7B68EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FA9A\n * <span class=\"colorSwath\" style=\"background: #00FA9A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSPRINGGREEN = Object.freeze(Color.fromCssColorString(\"#00FA9A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #48D1CC\n * <span class=\"colorSwath\" style=\"background: #48D1CC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMTURQUOISE = Object.freeze(Color.fromCssColorString(\"#48D1CC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #C71585\n * <span class=\"colorSwath\" style=\"background: #C71585;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMVIOLETRED = Object.freeze(Color.fromCssColorString(\"#C71585\"));\n\n/**\n * An immutable Color instance initialized to CSS color #191970\n * <span class=\"colorSwath\" style=\"background: #191970;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MIDNIGHTBLUE = Object.freeze(Color.fromCssColorString(\"#191970\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5FFFA\n * <span class=\"colorSwath\" style=\"background: #F5FFFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MINTCREAM = Object.freeze(Color.fromCssColorString(\"#F5FFFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4E1\n * <span class=\"colorSwath\" style=\"background: #FFE4E1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MISTYROSE = Object.freeze(Color.fromCssColorString(\"#FFE4E1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4B5\n * <span class=\"colorSwath\" style=\"background: #FFE4B5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MOCCASIN = Object.freeze(Color.fromCssColorString(\"#FFE4B5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFDEAD\n * <span class=\"colorSwath\" style=\"background: #FFDEAD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.NAVAJOWHITE = Object.freeze(Color.fromCssColorString(\"#FFDEAD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #000080\n * <span class=\"colorSwath\" style=\"background: #000080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.NAVY = Object.freeze(Color.fromCssColorString(\"#000080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FDF5E6\n * <span class=\"colorSwath\" style=\"background: #FDF5E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLDLACE = Object.freeze(Color.fromCssColorString(\"#FDF5E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808000\n * <span class=\"colorSwath\" style=\"background: #808000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLIVE = Object.freeze(Color.fromCssColorString(\"#808000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6B8E23\n * <span class=\"colorSwath\" style=\"background: #6B8E23;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLIVEDRAB = Object.freeze(Color.fromCssColorString(\"#6B8E23\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFA500\n * <span class=\"colorSwath\" style=\"background: #FFA500;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORANGE = Object.freeze(Color.fromCssColorString(\"#FFA500\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF4500\n * <span class=\"colorSwath\" style=\"background: #FF4500;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORANGERED = Object.freeze(Color.fromCssColorString(\"#FF4500\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DA70D6\n * <span class=\"colorSwath\" style=\"background: #DA70D6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORCHID = Object.freeze(Color.fromCssColorString(\"#DA70D6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #EEE8AA\n * <span class=\"colorSwath\" style=\"background: #EEE8AA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEGOLDENROD = Object.freeze(Color.fromCssColorString(\"#EEE8AA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #98FB98\n * <span class=\"colorSwath\" style=\"background: #98FB98;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEGREEN = Object.freeze(Color.fromCssColorString(\"#98FB98\"));\n\n/**\n * An immutable Color instance initialized to CSS color #AFEEEE\n * <span class=\"colorSwath\" style=\"background: #AFEEEE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALETURQUOISE = Object.freeze(Color.fromCssColorString(\"#AFEEEE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DB7093\n * <span class=\"colorSwath\" style=\"background: #DB7093;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEVIOLETRED = Object.freeze(Color.fromCssColorString(\"#DB7093\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFEFD5\n * <span class=\"colorSwath\" style=\"background: #FFEFD5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PAPAYAWHIP = Object.freeze(Color.fromCssColorString(\"#FFEFD5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFDAB9\n * <span class=\"colorSwath\" style=\"background: #FFDAB9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PEACHPUFF = Object.freeze(Color.fromCssColorString(\"#FFDAB9\"));\n\n/**\n * An immutable Color instance initialized to CSS color #CD853F\n * <span class=\"colorSwath\" style=\"background: #CD853F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PERU = Object.freeze(Color.fromCssColorString(\"#CD853F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFC0CB\n * <span class=\"colorSwath\" style=\"background: #FFC0CB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PINK = Object.freeze(Color.fromCssColorString(\"#FFC0CB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DDA0DD\n * <span class=\"colorSwath\" style=\"background: #DDA0DD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PLUM = Object.freeze(Color.fromCssColorString(\"#DDA0DD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B0E0E6\n * <span class=\"colorSwath\" style=\"background: #B0E0E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.POWDERBLUE = Object.freeze(Color.fromCssColorString(\"#B0E0E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #800080\n * <span class=\"colorSwath\" style=\"background: #800080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PURPLE = Object.freeze(Color.fromCssColorString(\"#800080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF0000\n * <span class=\"colorSwath\" style=\"background: #FF0000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.RED = Object.freeze(Color.fromCssColorString(\"#FF0000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #BC8F8F\n * <span class=\"colorSwath\" style=\"background: #BC8F8F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ROSYBROWN = Object.freeze(Color.fromCssColorString(\"#BC8F8F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4169E1\n * <span class=\"colorSwath\" style=\"background: #4169E1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ROYALBLUE = Object.freeze(Color.fromCssColorString(\"#4169E1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B4513\n * <span class=\"colorSwath\" style=\"background: #8B4513;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SADDLEBROWN = Object.freeze(Color.fromCssColorString(\"#8B4513\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FA8072\n * <span class=\"colorSwath\" style=\"background: #FA8072;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SALMON = Object.freeze(Color.fromCssColorString(\"#FA8072\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F4A460\n * <span class=\"colorSwath\" style=\"background: #F4A460;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SANDYBROWN = Object.freeze(Color.fromCssColorString(\"#F4A460\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2E8B57\n * <span class=\"colorSwath\" style=\"background: #2E8B57;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SEAGREEN = Object.freeze(Color.fromCssColorString(\"#2E8B57\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF5EE\n * <span class=\"colorSwath\" style=\"background: #FFF5EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SEASHELL = Object.freeze(Color.fromCssColorString(\"#FFF5EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A0522D\n * <span class=\"colorSwath\" style=\"background: #A0522D;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SIENNA = Object.freeze(Color.fromCssColorString(\"#A0522D\"));\n\n/**\n * An immutable Color instance initialized to CSS color #C0C0C0\n * <span class=\"colorSwath\" style=\"background: #C0C0C0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SILVER = Object.freeze(Color.fromCssColorString(\"#C0C0C0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #87CEEB\n * <span class=\"colorSwath\" style=\"background: #87CEEB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SKYBLUE = Object.freeze(Color.fromCssColorString(\"#87CEEB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6A5ACD\n * <span class=\"colorSwath\" style=\"background: #6A5ACD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEBLUE = Object.freeze(Color.fromCssColorString(\"#6A5ACD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #708090\n * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEGRAY = Object.freeze(Color.fromCssColorString(\"#708090\"));\n\n/**\n * An immutable Color instance initialized to CSS color #708090\n * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEGREY = Color.SLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #FFFAFA\n * <span class=\"colorSwath\" style=\"background: #FFFAFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SNOW = Object.freeze(Color.fromCssColorString(\"#FFFAFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FF7F\n * <span class=\"colorSwath\" style=\"background: #00FF7F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SPRINGGREEN = Object.freeze(Color.fromCssColorString(\"#00FF7F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4682B4\n * <span class=\"colorSwath\" style=\"background: #4682B4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.STEELBLUE = Object.freeze(Color.fromCssColorString(\"#4682B4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D2B48C\n * <span class=\"colorSwath\" style=\"background: #D2B48C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TAN = Object.freeze(Color.fromCssColorString(\"#D2B48C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008080\n * <span class=\"colorSwath\" style=\"background: #008080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TEAL = Object.freeze(Color.fromCssColorString(\"#008080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D8BFD8\n * <span class=\"colorSwath\" style=\"background: #D8BFD8;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.THISTLE = Object.freeze(Color.fromCssColorString(\"#D8BFD8\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF6347\n * <span class=\"colorSwath\" style=\"background: #FF6347;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TOMATO = Object.freeze(Color.fromCssColorString(\"#FF6347\"));\n\n/**\n * An immutable Color instance initialized to CSS color #40E0D0\n * <span class=\"colorSwath\" style=\"background: #40E0D0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TURQUOISE = Object.freeze(Color.fromCssColorString(\"#40E0D0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #EE82EE\n * <span class=\"colorSwath\" style=\"background: #EE82EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.VIOLET = Object.freeze(Color.fromCssColorString(\"#EE82EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5DEB3\n * <span class=\"colorSwath\" style=\"background: #F5DEB3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHEAT = Object.freeze(Color.fromCssColorString(\"#F5DEB3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFFF\n * <span class=\"colorSwath\" style=\"background: #FFFFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHITE = Object.freeze(Color.fromCssColorString(\"#FFFFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5F5F5\n * <span class=\"colorSwath\" style=\"background: #F5F5F5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHITESMOKE = Object.freeze(Color.fromCssColorString(\"#F5F5F5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFF00\n * <span class=\"colorSwath\" style=\"background: #FFFF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.YELLOW = Object.freeze(Color.fromCssColorString(\"#FFFF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9ACD32\n * <span class=\"colorSwath\" style=\"background: #9ACD32;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.YELLOWGREEN = Object.freeze(Color.fromCssColorString(\"#9ACD32\"));\n\n/**\n * An immutable Color instance initialized to CSS transparent.\n * <span class=\"colorSwath\" style=\"background: transparent;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));\nexport default Color;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}