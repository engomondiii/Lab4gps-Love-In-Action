{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DoubleEndedPriorityQueue from \"../Core/DoubleEndedPriorityQueue.js\";\n\n/**\n * @alias ImplicitSubtreeCache\n * @constructor\n *\n * @param {object} [options] Object with the following properties\n * @param {number} [options.maximumSubtreeCount=0] The total number of subtrees this cache can store. If adding a new subtree would exceed this limit, the lowest priority subtrees will be removed until there is room, unless the subtree that is going to be removed is the parent of the new subtree, in which case it will not be removed and the new subtree will still be added, exceeding the memory limit.\n *\n * @private\n */\nfunction ImplicitSubtreeCache(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this._maximumSubtreeCount = defaultValue(options.maximumSubtreeCount, 0);\n\n  /**\n   * A counter that goes up whenever a subtree is added. Used to sort subtrees by recency.\n   * @type {number}\n   * @private\n   */\n  this._subtreeRequestCounter = 0;\n\n  /**\n   * @type {DoubleEndedPriorityQueue}\n   * @private\n   */\n  this._queue = new DoubleEndedPriorityQueue({\n    comparator: ImplicitSubtreeCache.comparator\n  });\n}\n\n/**\n * @param {ImplicitSubtree} subtree\n */\nImplicitSubtreeCache.prototype.addSubtree = function (subtree) {\n  const cacheNode = new ImplicitSubtreeCacheNode(subtree, this._subtreeRequestCounter);\n  this._subtreeRequestCounter++;\n  this._queue.insert(cacheNode);\n\n  // Make sure the parent subtree exists in the cache\n  const subtreeCoord = subtree.implicitCoordinates;\n  if (subtreeCoord.level > 0) {\n    const parentCoord = subtreeCoord.getParentSubtreeCoordinates();\n    const parentNode = this.find(parentCoord);\n\n    //>>includeStart('debug', pragmas.debug)\n    if (parentNode === undefined) {\n      throw new DeveloperError(\"parent node needs to exist\");\n    }\n    //>>includeEnd('debug');\n  }\n  if (this._maximumSubtreeCount > 0) {\n    while (this._queue.length > this._maximumSubtreeCount) {\n      const lowestPriorityNode = this._queue.getMinimum();\n      if (lowestPriorityNode === cacheNode) {\n        // Don't remove itself\n        break;\n      }\n      this._queue.removeMinimum();\n    }\n  }\n};\n\n/**\n * @param {ImplicitTileCoordinates} subtreeCoord\n * @returns {ImplicitSubtree|undefined}\n */\nImplicitSubtreeCache.prototype.find = function (subtreeCoord) {\n  const queue = this._queue;\n  const array = queue.internalArray;\n  const arrayLength = queue.length;\n  for (let i = 0; i < arrayLength; i++) {\n    const other = array[i];\n    const otherSubtree = other.subtree;\n    const otherCoord = otherSubtree.implicitCoordinates;\n    if (subtreeCoord.isEqual(otherCoord)) {\n      return other.subtree;\n    }\n  }\n  return undefined;\n};\n\n/**\n * @param {ImplicitSubtreeCacheNode} a\n * @param {ImplicitSubtreeCacheNode} b\n * @returns {number}\n */\nImplicitSubtreeCache.comparator = function (a, b) {\n  const aCoord = a.subtree.implicitCoordinates;\n  const bCoord = b.subtree.implicitCoordinates;\n  if (aCoord.isAncestor(bCoord)) {\n    // Technically this shouldn't happen because the ancestor subtree was supposed to be added to the cache first.\n    return +1.0;\n  } else if (bCoord.isAncestor(aCoord)) {\n    return -1.0;\n  }\n  return a.stamp - b.stamp;\n};\n\n/**\n * @alias ImplicitSubtreeCacheNode\n * @constructor\n *\n * @param {ImplicitSubtree} subtree\n * @param {number} stamp\n *\n * @private\n */\nfunction ImplicitSubtreeCacheNode(subtree, stamp) {\n  this.subtree = subtree;\n  this.stamp = stamp;\n}\nexport default ImplicitSubtreeCache;","map":{"version":3,"names":["defaultValue","DeveloperError","DoubleEndedPriorityQueue","ImplicitSubtreeCache","options","EMPTY_OBJECT","_maximumSubtreeCount","maximumSubtreeCount","_subtreeRequestCounter","_queue","comparator","prototype","addSubtree","subtree","cacheNode","ImplicitSubtreeCacheNode","insert","subtreeCoord","implicitCoordinates","level","parentCoord","getParentSubtreeCoordinates","parentNode","find","undefined","length","lowestPriorityNode","getMinimum","removeMinimum","queue","array","internalArray","arrayLength","i","other","otherSubtree","otherCoord","isEqual","a","b","aCoord","bCoord","isAncestor","stamp"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ImplicitSubtreeCache.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DoubleEndedPriorityQueue from \"../Core/DoubleEndedPriorityQueue.js\";\n\n/**\n * @alias ImplicitSubtreeCache\n * @constructor\n *\n * @param {object} [options] Object with the following properties\n * @param {number} [options.maximumSubtreeCount=0] The total number of subtrees this cache can store. If adding a new subtree would exceed this limit, the lowest priority subtrees will be removed until there is room, unless the subtree that is going to be removed is the parent of the new subtree, in which case it will not be removed and the new subtree will still be added, exceeding the memory limit.\n *\n * @private\n */\nfunction ImplicitSubtreeCache(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this._maximumSubtreeCount = defaultValue(options.maximumSubtreeCount, 0);\n\n  /**\n   * A counter that goes up whenever a subtree is added. Used to sort subtrees by recency.\n   * @type {number}\n   * @private\n   */\n  this._subtreeRequestCounter = 0;\n\n  /**\n   * @type {DoubleEndedPriorityQueue}\n   * @private\n   */\n  this._queue = new DoubleEndedPriorityQueue({\n    comparator: ImplicitSubtreeCache.comparator,\n  });\n}\n\n/**\n * @param {ImplicitSubtree} subtree\n */\nImplicitSubtreeCache.prototype.addSubtree = function (subtree) {\n  const cacheNode = new ImplicitSubtreeCacheNode(\n    subtree,\n    this._subtreeRequestCounter,\n  );\n  this._subtreeRequestCounter++;\n  this._queue.insert(cacheNode);\n\n  // Make sure the parent subtree exists in the cache\n  const subtreeCoord = subtree.implicitCoordinates;\n  if (subtreeCoord.level > 0) {\n    const parentCoord = subtreeCoord.getParentSubtreeCoordinates();\n    const parentNode = this.find(parentCoord);\n\n    //>>includeStart('debug', pragmas.debug)\n    if (parentNode === undefined) {\n      throw new DeveloperError(\"parent node needs to exist\");\n    }\n    //>>includeEnd('debug');\n  }\n\n  if (this._maximumSubtreeCount > 0) {\n    while (this._queue.length > this._maximumSubtreeCount) {\n      const lowestPriorityNode = this._queue.getMinimum();\n      if (lowestPriorityNode === cacheNode) {\n        // Don't remove itself\n        break;\n      }\n\n      this._queue.removeMinimum();\n    }\n  }\n};\n\n/**\n * @param {ImplicitTileCoordinates} subtreeCoord\n * @returns {ImplicitSubtree|undefined}\n */\nImplicitSubtreeCache.prototype.find = function (subtreeCoord) {\n  const queue = this._queue;\n  const array = queue.internalArray;\n  const arrayLength = queue.length;\n\n  for (let i = 0; i < arrayLength; i++) {\n    const other = array[i];\n    const otherSubtree = other.subtree;\n    const otherCoord = otherSubtree.implicitCoordinates;\n    if (subtreeCoord.isEqual(otherCoord)) {\n      return other.subtree;\n    }\n  }\n  return undefined;\n};\n\n/**\n * @param {ImplicitSubtreeCacheNode} a\n * @param {ImplicitSubtreeCacheNode} b\n * @returns {number}\n */\nImplicitSubtreeCache.comparator = function (a, b) {\n  const aCoord = a.subtree.implicitCoordinates;\n  const bCoord = b.subtree.implicitCoordinates;\n  if (aCoord.isAncestor(bCoord)) {\n    // Technically this shouldn't happen because the ancestor subtree was supposed to be added to the cache first.\n    return +1.0;\n  } else if (bCoord.isAncestor(aCoord)) {\n    return -1.0;\n  }\n  return a.stamp - b.stamp;\n};\n\n/**\n * @alias ImplicitSubtreeCacheNode\n * @constructor\n *\n * @param {ImplicitSubtree} subtree\n * @param {number} stamp\n *\n * @private\n */\nfunction ImplicitSubtreeCacheNode(subtree, stamp) {\n  this.subtree = subtree;\n  this.stamp = stamp;\n}\n\nexport default ImplicitSubtreeCache;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}