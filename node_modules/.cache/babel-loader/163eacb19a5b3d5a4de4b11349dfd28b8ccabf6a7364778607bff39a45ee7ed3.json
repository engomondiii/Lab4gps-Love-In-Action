{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseOutlineGeometry from \"./EllipseOutlineGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\n\n/**\n * A description of the outline of a circle on the ellipsoid.\n *\n * @alias CircleOutlineGeometry\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid the circle will be on.\n * @param {number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom of an extruded circle.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleOutlineGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * const circle = new Cesium.CircleOutlineGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * const geometry = Cesium.CircleOutlineGeometry.createGeometry(circle);\n */\nfunction CircleOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const radius = options.radius;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"radius\", radius);\n  //>>includeEnd('debug');\n\n  const ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    numberOfVerticalLines: options.numberOfVerticalLines\n  };\n  this._ellipseGeometry = new EllipseOutlineGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleOutlineGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nCircleOutlineGeometry.packedLength = EllipseOutlineGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleOutlineGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nCircleOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n  return EllipseOutlineGeometry.pack(value._ellipseGeometry, array, startingIndex);\n};\nconst scratchEllipseGeometry = new EllipseOutlineGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0\n});\nconst scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  numberOfVerticalLines: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleOutlineGeometry} [result] The object into which to store the result.\n * @returns {CircleOutlineGeometry} The modified result parameter or a new CircleOutlineGeometry instance if one was not provided.\n */\nCircleOutlineGeometry.unpack = function (array, startingIndex, result) {\n  const ellipseGeometry = EllipseOutlineGeometry.unpack(array, startingIndex, scratchEllipseGeometry);\n  scratchOptions.center = Cartesian3.clone(ellipseGeometry._center, scratchOptions.center);\n  scratchOptions.ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid, scratchOptions.ellipsoid);\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.numberOfVerticalLines = ellipseGeometry._numberOfVerticalLines;\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleOutlineGeometry(scratchOptions);\n  }\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseOutlineGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of an outline of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleOutlineGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCircleOutlineGeometry.createGeometry = function (circleGeometry) {\n  return EllipseOutlineGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\nexport default CircleOutlineGeometry;","map":{"version":3,"names":["Cartesian3","Check","defaultValue","defined","EllipseOutlineGeometry","Ellipsoid","CircleOutlineGeometry","options","EMPTY_OBJECT","radius","typeOf","number","ellipseGeometryOptions","center","semiMajorAxis","semiMinorAxis","ellipsoid","height","extrudedHeight","granularity","numberOfVerticalLines","_ellipseGeometry","_workerName","packedLength","pack","value","array","startingIndex","object","scratchEllipseGeometry","scratchOptions","undefined","clone","UNIT_SPHERE","unpack","result","ellipseGeometry","_center","_ellipsoid","_height","_extrudedHeight","_granularity","_numberOfVerticalLines","_semiMajorAxis","_semiMinorAxis","createGeometry","circleGeometry"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/CircleOutlineGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseOutlineGeometry from \"./EllipseOutlineGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\n\n/**\n * A description of the outline of a circle on the ellipsoid.\n *\n * @alias CircleOutlineGeometry\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid the circle will be on.\n * @param {number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom of an extruded circle.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleOutlineGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * const circle = new Cesium.CircleOutlineGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * const geometry = Cesium.CircleOutlineGeometry.createGeometry(circle);\n */\nfunction CircleOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const radius = options.radius;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"radius\", radius);\n  //>>includeEnd('debug');\n\n  const ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    numberOfVerticalLines: options.numberOfVerticalLines,\n  };\n  this._ellipseGeometry = new EllipseOutlineGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleOutlineGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nCircleOutlineGeometry.packedLength = EllipseOutlineGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleOutlineGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nCircleOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n  return EllipseOutlineGeometry.pack(\n    value._ellipseGeometry,\n    array,\n    startingIndex,\n  );\n};\n\nconst scratchEllipseGeometry = new EllipseOutlineGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0,\n});\nconst scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  numberOfVerticalLines: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleOutlineGeometry} [result] The object into which to store the result.\n * @returns {CircleOutlineGeometry} The modified result parameter or a new CircleOutlineGeometry instance if one was not provided.\n */\nCircleOutlineGeometry.unpack = function (array, startingIndex, result) {\n  const ellipseGeometry = EllipseOutlineGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipseGeometry,\n  );\n  scratchOptions.center = Cartesian3.clone(\n    ellipseGeometry._center,\n    scratchOptions.center,\n  );\n  scratchOptions.ellipsoid = Ellipsoid.clone(\n    ellipseGeometry._ellipsoid,\n    scratchOptions.ellipsoid,\n  );\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.numberOfVerticalLines = ellipseGeometry._numberOfVerticalLines;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleOutlineGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseOutlineGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of an outline of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleOutlineGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCircleOutlineGeometry.createGeometry = function (circleGeometry) {\n  return EllipseOutlineGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\nexport default CircleOutlineGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}