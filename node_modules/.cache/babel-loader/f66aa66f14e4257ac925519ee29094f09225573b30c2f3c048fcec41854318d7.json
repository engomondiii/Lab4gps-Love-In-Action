{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport SpecularEnvironmentCubeMap from \"./SpecularEnvironmentCubeMap.js\";\n\n/**\n * Properties for managing image-based lighting on tilesets and models.\n * Also manages the necessary resources and textures.\n * <p>\n * If specular environment maps are used, {@link ImageBasedLighting#destroy} must be called\n * when the image-based lighting is no longer needed to clean up GPU resources properly.\n * If a model or tileset creates an instance of ImageBasedLighting, it will handle this.\n * Otherwise, the application is responsible for calling destroy().\n *</p>\n *\n * @alias ImageBasedLighting\n * @constructor\n *\n * @param {Cartesian2} [options.imageBasedLightingFactor=Cartesian2(1.0, 1.0)] Scales diffuse and specular image-based lighting from the earth, sky, atmosphere and star skybox.\n * @param {Cartesian3[]} [options.sphericalHarmonicCoefficients] The third order spherical harmonic coefficients used for the diffuse color of image-based lighting.\n * @param {string} [options.specularEnvironmentMaps] A URL to a KTX2 file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n */\nfunction ImageBasedLighting(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const imageBasedLightingFactor = defined(options.imageBasedLightingFactor) ? Cartesian2.clone(options.imageBasedLightingFactor) : new Cartesian2(1.0, 1.0);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.imageBasedLightingFactor\", imageBasedLightingFactor);\n  Check.typeOf.number.greaterThanOrEquals(\"options.imageBasedLightingFactor.x\", imageBasedLightingFactor.x, 0.0);\n  Check.typeOf.number.lessThanOrEquals(\"options.imageBasedLightingFactor.x\", imageBasedLightingFactor.x, 1.0);\n  Check.typeOf.number.greaterThanOrEquals(\"options.imageBasedLightingFactor.y\", imageBasedLightingFactor.y, 0.0);\n  Check.typeOf.number.lessThanOrEquals(\"options.imageBasedLightingFactor.y\", imageBasedLightingFactor.y, 1.0);\n  //>>includeEnd('debug');\n\n  this._imageBasedLightingFactor = imageBasedLightingFactor;\n  const sphericalHarmonicCoefficients = options.sphericalHarmonicCoefficients;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(sphericalHarmonicCoefficients) && (!Array.isArray(sphericalHarmonicCoefficients) || sphericalHarmonicCoefficients.length !== 9)) {\n    throw new DeveloperError(\"options.sphericalHarmonicCoefficients must be an array of 9 Cartesian3 values.\");\n  }\n  //>>includeEnd('debug');\n  this._sphericalHarmonicCoefficients = sphericalHarmonicCoefficients;\n\n  // The specular environment map texture is created in update();\n  this._specularEnvironmentMaps = options.specularEnvironmentMaps;\n  this._specularEnvironmentCubeMap = undefined;\n  this._specularEnvironmentCubeMapDirty = true;\n  this._specularEnvironmentMapLoaded = false;\n  this._previousSpecularEnvironmentMapLoaded = false;\n  this._useDefaultSpecularMaps = false;\n  this._useDefaultSphericalHarmonics = false;\n  this._shouldRegenerateShaders = false;\n\n  // Store the previous frame number to prevent redundant update calls\n  this._previousFrameNumber = undefined;\n\n  // Keeps track of the last values for use during update logic\n  this._previousImageBasedLightingFactor = Cartesian2.clone(imageBasedLightingFactor);\n  this._previousSphericalHarmonicCoefficients = sphericalHarmonicCoefficients;\n  this._removeErrorListener = undefined;\n}\nObject.defineProperties(ImageBasedLighting.prototype, {\n  /**\n   * Cesium adds lighting from the earth, sky, atmosphere, and star skybox.\n   * This cartesian is used to scale the final diffuse and specular lighting\n   * contribution from those sources to the final color. A value of 0.0 will\n   * disable those light sources.\n   *\n   * @memberof ImageBasedLighting.prototype\n   *\n   * @type {Cartesian2}\n   * @default Cartesian2(1.0, 1.0)\n   */\n  imageBasedLightingFactor: {\n    get: function () {\n      return this._imageBasedLightingFactor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"imageBasedLightingFactor\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"imageBasedLightingFactor.x\", value.x, 0.0);\n      Check.typeOf.number.lessThanOrEquals(\"imageBasedLightingFactor.x\", value.x, 1.0);\n      Check.typeOf.number.greaterThanOrEquals(\"imageBasedLightingFactor.y\", value.y, 0.0);\n      Check.typeOf.number.lessThanOrEquals(\"imageBasedLightingFactor.y\", value.y, 1.0);\n      //>>includeEnd('debug');\n      this._previousImageBasedLightingFactor = Cartesian2.clone(this._imageBasedLightingFactor, this._previousImageBasedLightingFactor);\n      this._imageBasedLightingFactor = Cartesian2.clone(value, this._imageBasedLightingFactor);\n    }\n  },\n  /**\n   * The third order spherical harmonic coefficients used for the diffuse color of image-based lighting. When <code>undefined</code>, a diffuse irradiance\n   * computed from the atmosphere color is used.\n   * <p>\n   * There are nine <code>Cartesian3</code> coefficients.\n   * The order of the coefficients is: L<sub>0,0</sub>, L<sub>1,-1</sub>, L<sub>1,0</sub>, L<sub>1,1</sub>, L<sub>2,-2</sub>, L<sub>2,-1</sub>, L<sub>2,0</sub>, L<sub>2,1</sub>, L<sub>2,2</sub>\n   * </p>\n   *\n   * These values can be obtained by preprocessing the environment map using the <code>cmgen</code> tool of\n   * {@link https://github.com/google/filament/releases|Google's Filament project}.\n   * Be sure to use the <code>--no-mirror</code> option in <code>cmgen</code>.\n   *\n   * @memberof ImageBasedLighting.prototype\n   *\n   * @type {Cartesian3[]}\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n   * @see {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf|An Efficient Representation for Irradiance Environment Maps}\n   */\n  sphericalHarmonicCoefficients: {\n    get: function () {\n      return this._sphericalHarmonicCoefficients;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && (!Array.isArray(value) || value.length !== 9)) {\n        throw new DeveloperError(\"sphericalHarmonicCoefficients must be an array of 9 Cartesian3 values.\");\n      }\n      //>>includeEnd('debug');\n      this._previousSphericalHarmonicCoefficients = this._sphericalHarmonicCoefficients;\n      this._sphericalHarmonicCoefficients = value;\n    }\n  },\n  /**\n   * A URL to a KTX2 file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n   * @type {string}\n   * @see ImageBasedLighting#sphericalHarmonicCoefficients\n   */\n  specularEnvironmentMaps: {\n    get: function () {\n      return this._specularEnvironmentMaps;\n    },\n    set: function (value) {\n      if (value !== this._specularEnvironmentMaps) {\n        this._specularEnvironmentCubeMapDirty = this._specularEnvironmentCubeMapDirty || value !== this._specularEnvironmentMaps;\n        this._specularEnvironmentMapLoaded = false;\n      }\n      this._specularEnvironmentMaps = value;\n    }\n  },\n  /**\n   * Whether or not image-based lighting is enabled.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {boolean}\n   *\n   * @private\n   */\n  enabled: {\n    get: function () {\n      return this._imageBasedLightingFactor.x > 0.0 || this._imageBasedLightingFactor.y > 0.0;\n    }\n  },\n  /**\n   * Whether or not the models that use this lighting should regenerate their shaders,\n   * based on the properties and resources have changed.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {boolean}\n   *\n   * @private\n   */\n  shouldRegenerateShaders: {\n    get: function () {\n      return this._shouldRegenerateShaders;\n    }\n  },\n  /**\n   * The texture atlas for the specular environment maps.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {SpecularEnvironmentCubeMap}\n   *\n   * @private\n   */\n  specularEnvironmentCubeMap: {\n    get: function () {\n      return this._specularEnvironmentCubeMap;\n    }\n  },\n  /**\n   * Whether or not to use the default spherical harmonics coefficients.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {boolean}\n   *\n   * @private\n   */\n  useDefaultSphericalHarmonics: {\n    get: function () {\n      return this._useDefaultSphericalHarmonics;\n    }\n  },\n  /**\n   * Whether or not to use the default specular environment maps.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {boolean}\n   *\n   * @private\n   */\n  useDefaultSpecularMaps: {\n    get: function () {\n      return this._useDefaultSpecularMaps;\n    }\n  },\n  /**\n   * Whether or not the image-based lighting settings use specular environment maps.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {boolean}\n   *\n   * @private\n   */\n  useSpecularEnvironmentMaps: {\n    get: function () {\n      return defined(this._specularEnvironmentCubeMap) && this._specularEnvironmentCubeMap.ready || this._useDefaultSpecularMaps;\n    }\n  }\n});\nfunction createSpecularEnvironmentCubeMap(imageBasedLighting, context) {\n  if (!SpecularEnvironmentCubeMap.isSupported(context)) {\n    return;\n  }\n  imageBasedLighting._specularEnvironmentCubeMap = imageBasedLighting._specularEnvironmentCubeMap && imageBasedLighting._specularEnvironmentCubeMap.destroy();\n  if (defined(imageBasedLighting._specularEnvironmentMaps)) {\n    const cubeMap = new SpecularEnvironmentCubeMap(imageBasedLighting._specularEnvironmentMaps);\n    imageBasedLighting._specularEnvironmentCubeMap = cubeMap;\n    imageBasedLighting._removeErrorListener = cubeMap.errorEvent.addEventListener(error => {\n      console.error(`Error loading specularEnvironmentMaps: ${error}`);\n    });\n  }\n\n  // Regenerate shaders so they do not use an environment map.\n  // Will be set to true again if there was a new environment map and it is ready.\n  imageBasedLighting._shouldRegenerateShaders = true;\n}\nImageBasedLighting.prototype.update = function (frameState) {\n  if (frameState.frameNumber === this._previousFrameNumber) {\n    return;\n  }\n  this._previousFrameNumber = frameState.frameNumber;\n  const context = frameState.context;\n  frameState.brdfLutGenerator.update(frameState);\n  this._shouldRegenerateShaders = false;\n  const iblFactor = this._imageBasedLightingFactor;\n  const previousIBLFactor = this._previousImageBasedLightingFactor;\n  if (!Cartesian2.equals(iblFactor, previousIBLFactor)) {\n    this._shouldRegenerateShaders = iblFactor.x > 0.0 && previousIBLFactor.x === 0.0 || iblFactor.x === 0.0 && previousIBLFactor.x > 0.0;\n    this._shouldRegenerateShaders = this._shouldRegenerateShaders || iblFactor.y > 0.0 && previousIBLFactor.y === 0.0 || iblFactor.y === 0.0 && previousIBLFactor.y > 0.0;\n    this._previousImageBasedLightingFactor = Cartesian2.clone(this._imageBasedLightingFactor, this._previousImageBasedLightingFactor);\n  }\n  if (this._previousSphericalHarmonicCoefficients !== this._sphericalHarmonicCoefficients) {\n    this._shouldRegenerateShaders = this._shouldRegenerateShaders || defined(this._previousSphericalHarmonicCoefficients) !== defined(this._sphericalHarmonicCoefficients);\n    this._previousSphericalHarmonicCoefficients = this._sphericalHarmonicCoefficients;\n  }\n  this._shouldRegenerateShaders = this._shouldRegenerateShaders || this._previousSpecularEnvironmentMapLoaded !== this._specularEnvironmentMapLoaded;\n  this._previousSpecularEnvironmentMapLoaded = this._specularEnvironmentMapLoaded;\n  if (this._specularEnvironmentCubeMapDirty) {\n    createSpecularEnvironmentCubeMap(this, context);\n    this._specularEnvironmentCubeMapDirty = false;\n  }\n  if (defined(this._specularEnvironmentCubeMap)) {\n    this._specularEnvironmentCubeMap.update(frameState);\n    if (this._specularEnvironmentCubeMap.ready) {\n      this._specularEnvironmentMapLoaded = true;\n    }\n  }\n  const recompileWithDefaultCubeMap = !defined(this._specularEnvironmentCubeMap) && defined(frameState.specularEnvironmentMaps) && !this._useDefaultSpecularMaps;\n  const recompileWithoutDefaultCubeMap = !defined(frameState.specularEnvironmentMaps) && this._useDefaultSpecularMaps;\n  const recompileWithDefaultSHCoeffs = !defined(this._sphericalHarmonicCoefficients) && defined(frameState.sphericalHarmonicCoefficients) && !this._useDefaultSphericalHarmonics;\n  const recompileWithoutDefaultSHCoeffs = !defined(frameState.sphericalHarmonicCoefficients) && this._useDefaultSphericalHarmonics;\n  this._shouldRegenerateShaders = this._shouldRegenerateShaders || recompileWithDefaultCubeMap || recompileWithoutDefaultCubeMap || recompileWithDefaultSHCoeffs || recompileWithoutDefaultSHCoeffs;\n  this._useDefaultSpecularMaps = !defined(this._specularEnvironmentCubeMap) && defined(frameState.specularEnvironmentMaps);\n  this._useDefaultSphericalHarmonics = !defined(this._sphericalHarmonicCoefficients) && defined(frameState.sphericalHarmonicCoefficients);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see ImageBasedLighting#destroy\n * @private\n */\nImageBasedLighting.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * imageBasedLighting = imageBasedLighting && imageBasedLighting.destroy();\n *\n * @see ImageBasedLighting#isDestroyed\n * @private\n */\nImageBasedLighting.prototype.destroy = function () {\n  this._specularEnvironmentCubeMap = this._specularEnvironmentCubeMap && this._specularEnvironmentCubeMap.destroy();\n  this._removeErrorListener = this._removeErrorListener && this._removeErrorListener();\n  return destroyObject(this);\n};\nexport default ImageBasedLighting;","map":{"version":3,"names":["Cartesian2","Check","defined","defaultValue","destroyObject","DeveloperError","SpecularEnvironmentCubeMap","ImageBasedLighting","options","EMPTY_OBJECT","imageBasedLightingFactor","clone","typeOf","object","number","greaterThanOrEquals","x","lessThanOrEquals","y","_imageBasedLightingFactor","sphericalHarmonicCoefficients","Array","isArray","length","_sphericalHarmonicCoefficients","_specularEnvironmentMaps","specularEnvironmentMaps","_specularEnvironmentCubeMap","undefined","_specularEnvironmentCubeMapDirty","_specularEnvironmentMapLoaded","_previousSpecularEnvironmentMapLoaded","_useDefaultSpecularMaps","_useDefaultSphericalHarmonics","_shouldRegenerateShaders","_previousFrameNumber","_previousImageBasedLightingFactor","_previousSphericalHarmonicCoefficients","_removeErrorListener","Object","defineProperties","prototype","get","set","value","enabled","shouldRegenerateShaders","specularEnvironmentCubeMap","useDefaultSphericalHarmonics","useDefaultSpecularMaps","useSpecularEnvironmentMaps","ready","createSpecularEnvironmentCubeMap","imageBasedLighting","context","isSupported","destroy","cubeMap","errorEvent","addEventListener","error","console","update","frameState","frameNumber","brdfLutGenerator","iblFactor","previousIBLFactor","equals","recompileWithDefaultCubeMap","recompileWithoutDefaultCubeMap","recompileWithDefaultSHCoeffs","recompileWithoutDefaultSHCoeffs","isDestroyed"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ImageBasedLighting.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport SpecularEnvironmentCubeMap from \"./SpecularEnvironmentCubeMap.js\";\n\n/**\n * Properties for managing image-based lighting on tilesets and models.\n * Also manages the necessary resources and textures.\n * <p>\n * If specular environment maps are used, {@link ImageBasedLighting#destroy} must be called\n * when the image-based lighting is no longer needed to clean up GPU resources properly.\n * If a model or tileset creates an instance of ImageBasedLighting, it will handle this.\n * Otherwise, the application is responsible for calling destroy().\n *</p>\n *\n * @alias ImageBasedLighting\n * @constructor\n *\n * @param {Cartesian2} [options.imageBasedLightingFactor=Cartesian2(1.0, 1.0)] Scales diffuse and specular image-based lighting from the earth, sky, atmosphere and star skybox.\n * @param {Cartesian3[]} [options.sphericalHarmonicCoefficients] The third order spherical harmonic coefficients used for the diffuse color of image-based lighting.\n * @param {string} [options.specularEnvironmentMaps] A URL to a KTX2 file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n */\nfunction ImageBasedLighting(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const imageBasedLightingFactor = defined(options.imageBasedLightingFactor)\n    ? Cartesian2.clone(options.imageBasedLightingFactor)\n    : new Cartesian2(1.0, 1.0);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\n    \"options.imageBasedLightingFactor\",\n    imageBasedLightingFactor,\n  );\n  Check.typeOf.number.greaterThanOrEquals(\n    \"options.imageBasedLightingFactor.x\",\n    imageBasedLightingFactor.x,\n    0.0,\n  );\n  Check.typeOf.number.lessThanOrEquals(\n    \"options.imageBasedLightingFactor.x\",\n    imageBasedLightingFactor.x,\n    1.0,\n  );\n  Check.typeOf.number.greaterThanOrEquals(\n    \"options.imageBasedLightingFactor.y\",\n    imageBasedLightingFactor.y,\n    0.0,\n  );\n  Check.typeOf.number.lessThanOrEquals(\n    \"options.imageBasedLightingFactor.y\",\n    imageBasedLightingFactor.y,\n    1.0,\n  );\n  //>>includeEnd('debug');\n\n  this._imageBasedLightingFactor = imageBasedLightingFactor;\n\n  const sphericalHarmonicCoefficients = options.sphericalHarmonicCoefficients;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    defined(sphericalHarmonicCoefficients) &&\n    (!Array.isArray(sphericalHarmonicCoefficients) ||\n      sphericalHarmonicCoefficients.length !== 9)\n  ) {\n    throw new DeveloperError(\n      \"options.sphericalHarmonicCoefficients must be an array of 9 Cartesian3 values.\",\n    );\n  }\n  //>>includeEnd('debug');\n  this._sphericalHarmonicCoefficients = sphericalHarmonicCoefficients;\n\n  // The specular environment map texture is created in update();\n  this._specularEnvironmentMaps = options.specularEnvironmentMaps;\n  this._specularEnvironmentCubeMap = undefined;\n  this._specularEnvironmentCubeMapDirty = true;\n  this._specularEnvironmentMapLoaded = false;\n  this._previousSpecularEnvironmentMapLoaded = false;\n\n  this._useDefaultSpecularMaps = false;\n  this._useDefaultSphericalHarmonics = false;\n  this._shouldRegenerateShaders = false;\n\n  // Store the previous frame number to prevent redundant update calls\n  this._previousFrameNumber = undefined;\n\n  // Keeps track of the last values for use during update logic\n  this._previousImageBasedLightingFactor = Cartesian2.clone(\n    imageBasedLightingFactor,\n  );\n  this._previousSphericalHarmonicCoefficients = sphericalHarmonicCoefficients;\n  this._removeErrorListener = undefined;\n}\n\nObject.defineProperties(ImageBasedLighting.prototype, {\n  /**\n   * Cesium adds lighting from the earth, sky, atmosphere, and star skybox.\n   * This cartesian is used to scale the final diffuse and specular lighting\n   * contribution from those sources to the final color. A value of 0.0 will\n   * disable those light sources.\n   *\n   * @memberof ImageBasedLighting.prototype\n   *\n   * @type {Cartesian2}\n   * @default Cartesian2(1.0, 1.0)\n   */\n  imageBasedLightingFactor: {\n    get: function () {\n      return this._imageBasedLightingFactor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"imageBasedLightingFactor\", value);\n      Check.typeOf.number.greaterThanOrEquals(\n        \"imageBasedLightingFactor.x\",\n        value.x,\n        0.0,\n      );\n      Check.typeOf.number.lessThanOrEquals(\n        \"imageBasedLightingFactor.x\",\n        value.x,\n        1.0,\n      );\n      Check.typeOf.number.greaterThanOrEquals(\n        \"imageBasedLightingFactor.y\",\n        value.y,\n        0.0,\n      );\n      Check.typeOf.number.lessThanOrEquals(\n        \"imageBasedLightingFactor.y\",\n        value.y,\n        1.0,\n      );\n      //>>includeEnd('debug');\n      this._previousImageBasedLightingFactor = Cartesian2.clone(\n        this._imageBasedLightingFactor,\n        this._previousImageBasedLightingFactor,\n      );\n      this._imageBasedLightingFactor = Cartesian2.clone(\n        value,\n        this._imageBasedLightingFactor,\n      );\n    },\n  },\n\n  /**\n   * The third order spherical harmonic coefficients used for the diffuse color of image-based lighting. When <code>undefined</code>, a diffuse irradiance\n   * computed from the atmosphere color is used.\n   * <p>\n   * There are nine <code>Cartesian3</code> coefficients.\n   * The order of the coefficients is: L<sub>0,0</sub>, L<sub>1,-1</sub>, L<sub>1,0</sub>, L<sub>1,1</sub>, L<sub>2,-2</sub>, L<sub>2,-1</sub>, L<sub>2,0</sub>, L<sub>2,1</sub>, L<sub>2,2</sub>\n   * </p>\n   *\n   * These values can be obtained by preprocessing the environment map using the <code>cmgen</code> tool of\n   * {@link https://github.com/google/filament/releases|Google's Filament project}.\n   * Be sure to use the <code>--no-mirror</code> option in <code>cmgen</code>.\n   *\n   * @memberof ImageBasedLighting.prototype\n   *\n   * @type {Cartesian3[]}\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n   * @see {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf|An Efficient Representation for Irradiance Environment Maps}\n   */\n  sphericalHarmonicCoefficients: {\n    get: function () {\n      return this._sphericalHarmonicCoefficients;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && (!Array.isArray(value) || value.length !== 9)) {\n        throw new DeveloperError(\n          \"sphericalHarmonicCoefficients must be an array of 9 Cartesian3 values.\",\n        );\n      }\n      //>>includeEnd('debug');\n      this._previousSphericalHarmonicCoefficients =\n        this._sphericalHarmonicCoefficients;\n      this._sphericalHarmonicCoefficients = value;\n    },\n  },\n\n  /**\n   * A URL to a KTX2 file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n   * @type {string}\n   * @see ImageBasedLighting#sphericalHarmonicCoefficients\n   */\n  specularEnvironmentMaps: {\n    get: function () {\n      return this._specularEnvironmentMaps;\n    },\n    set: function (value) {\n      if (value !== this._specularEnvironmentMaps) {\n        this._specularEnvironmentCubeMapDirty =\n          this._specularEnvironmentCubeMapDirty ||\n          value !== this._specularEnvironmentMaps;\n        this._specularEnvironmentMapLoaded = false;\n      }\n      this._specularEnvironmentMaps = value;\n    },\n  },\n\n  /**\n   * Whether or not image-based lighting is enabled.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {boolean}\n   *\n   * @private\n   */\n  enabled: {\n    get: function () {\n      return (\n        this._imageBasedLightingFactor.x > 0.0 ||\n        this._imageBasedLightingFactor.y > 0.0\n      );\n    },\n  },\n\n  /**\n   * Whether or not the models that use this lighting should regenerate their shaders,\n   * based on the properties and resources have changed.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {boolean}\n   *\n   * @private\n   */\n  shouldRegenerateShaders: {\n    get: function () {\n      return this._shouldRegenerateShaders;\n    },\n  },\n\n  /**\n   * The texture atlas for the specular environment maps.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {SpecularEnvironmentCubeMap}\n   *\n   * @private\n   */\n  specularEnvironmentCubeMap: {\n    get: function () {\n      return this._specularEnvironmentCubeMap;\n    },\n  },\n\n  /**\n   * Whether or not to use the default spherical harmonics coefficients.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {boolean}\n   *\n   * @private\n   */\n  useDefaultSphericalHarmonics: {\n    get: function () {\n      return this._useDefaultSphericalHarmonics;\n    },\n  },\n\n  /**\n   * Whether or not to use the default specular environment maps.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {boolean}\n   *\n   * @private\n   */\n  useDefaultSpecularMaps: {\n    get: function () {\n      return this._useDefaultSpecularMaps;\n    },\n  },\n\n  /**\n   * Whether or not the image-based lighting settings use specular environment maps.\n   *\n   * @memberof ImageBasedLighting.prototype\n   * @type {boolean}\n   *\n   * @private\n   */\n  useSpecularEnvironmentMaps: {\n    get: function () {\n      return (\n        (defined(this._specularEnvironmentCubeMap) &&\n          this._specularEnvironmentCubeMap.ready) ||\n        this._useDefaultSpecularMaps\n      );\n    },\n  },\n});\n\nfunction createSpecularEnvironmentCubeMap(imageBasedLighting, context) {\n  if (!SpecularEnvironmentCubeMap.isSupported(context)) {\n    return;\n  }\n\n  imageBasedLighting._specularEnvironmentCubeMap =\n    imageBasedLighting._specularEnvironmentCubeMap &&\n    imageBasedLighting._specularEnvironmentCubeMap.destroy();\n\n  if (defined(imageBasedLighting._specularEnvironmentMaps)) {\n    const cubeMap = new SpecularEnvironmentCubeMap(\n      imageBasedLighting._specularEnvironmentMaps,\n    );\n    imageBasedLighting._specularEnvironmentCubeMap = cubeMap;\n\n    imageBasedLighting._removeErrorListener =\n      cubeMap.errorEvent.addEventListener((error) => {\n        console.error(`Error loading specularEnvironmentMaps: ${error}`);\n      });\n  }\n\n  // Regenerate shaders so they do not use an environment map.\n  // Will be set to true again if there was a new environment map and it is ready.\n  imageBasedLighting._shouldRegenerateShaders = true;\n}\n\nImageBasedLighting.prototype.update = function (frameState) {\n  if (frameState.frameNumber === this._previousFrameNumber) {\n    return;\n  }\n\n  this._previousFrameNumber = frameState.frameNumber;\n  const context = frameState.context;\n\n  frameState.brdfLutGenerator.update(frameState);\n  this._shouldRegenerateShaders = false;\n\n  const iblFactor = this._imageBasedLightingFactor;\n  const previousIBLFactor = this._previousImageBasedLightingFactor;\n  if (!Cartesian2.equals(iblFactor, previousIBLFactor)) {\n    this._shouldRegenerateShaders =\n      (iblFactor.x > 0.0 && previousIBLFactor.x === 0.0) ||\n      (iblFactor.x === 0.0 && previousIBLFactor.x > 0.0);\n    this._shouldRegenerateShaders =\n      this._shouldRegenerateShaders ||\n      (iblFactor.y > 0.0 && previousIBLFactor.y === 0.0) ||\n      (iblFactor.y === 0.0 && previousIBLFactor.y > 0.0);\n\n    this._previousImageBasedLightingFactor = Cartesian2.clone(\n      this._imageBasedLightingFactor,\n      this._previousImageBasedLightingFactor,\n    );\n  }\n\n  if (\n    this._previousSphericalHarmonicCoefficients !==\n    this._sphericalHarmonicCoefficients\n  ) {\n    this._shouldRegenerateShaders =\n      this._shouldRegenerateShaders ||\n      defined(this._previousSphericalHarmonicCoefficients) !==\n        defined(this._sphericalHarmonicCoefficients);\n\n    this._previousSphericalHarmonicCoefficients =\n      this._sphericalHarmonicCoefficients;\n  }\n\n  this._shouldRegenerateShaders =\n    this._shouldRegenerateShaders ||\n    this._previousSpecularEnvironmentMapLoaded !==\n      this._specularEnvironmentMapLoaded;\n\n  this._previousSpecularEnvironmentMapLoaded =\n    this._specularEnvironmentMapLoaded;\n\n  if (this._specularEnvironmentCubeMapDirty) {\n    createSpecularEnvironmentCubeMap(this, context);\n    this._specularEnvironmentCubeMapDirty = false;\n  }\n\n  if (defined(this._specularEnvironmentCubeMap)) {\n    this._specularEnvironmentCubeMap.update(frameState);\n    if (this._specularEnvironmentCubeMap.ready) {\n      this._specularEnvironmentMapLoaded = true;\n    }\n  }\n\n  const recompileWithDefaultCubeMap =\n    !defined(this._specularEnvironmentCubeMap) &&\n    defined(frameState.specularEnvironmentMaps) &&\n    !this._useDefaultSpecularMaps;\n  const recompileWithoutDefaultCubeMap =\n    !defined(frameState.specularEnvironmentMaps) &&\n    this._useDefaultSpecularMaps;\n\n  const recompileWithDefaultSHCoeffs =\n    !defined(this._sphericalHarmonicCoefficients) &&\n    defined(frameState.sphericalHarmonicCoefficients) &&\n    !this._useDefaultSphericalHarmonics;\n  const recompileWithoutDefaultSHCoeffs =\n    !defined(frameState.sphericalHarmonicCoefficients) &&\n    this._useDefaultSphericalHarmonics;\n\n  this._shouldRegenerateShaders =\n    this._shouldRegenerateShaders ||\n    recompileWithDefaultCubeMap ||\n    recompileWithoutDefaultCubeMap ||\n    recompileWithDefaultSHCoeffs ||\n    recompileWithoutDefaultSHCoeffs;\n\n  this._useDefaultSpecularMaps =\n    !defined(this._specularEnvironmentCubeMap) &&\n    defined(frameState.specularEnvironmentMaps);\n  this._useDefaultSphericalHarmonics =\n    !defined(this._sphericalHarmonicCoefficients) &&\n    defined(frameState.sphericalHarmonicCoefficients);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see ImageBasedLighting#destroy\n * @private\n */\nImageBasedLighting.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * imageBasedLighting = imageBasedLighting && imageBasedLighting.destroy();\n *\n * @see ImageBasedLighting#isDestroyed\n * @private\n */\nImageBasedLighting.prototype.destroy = function () {\n  this._specularEnvironmentCubeMap =\n    this._specularEnvironmentCubeMap &&\n    this._specularEnvironmentCubeMap.destroy();\n  this._removeErrorListener =\n    this._removeErrorListener && this._removeErrorListener();\n  return destroyObject(this);\n};\n\nexport default ImageBasedLighting;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}