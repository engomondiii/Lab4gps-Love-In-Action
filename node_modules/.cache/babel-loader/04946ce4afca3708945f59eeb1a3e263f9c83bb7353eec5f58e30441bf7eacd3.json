{"ast":null,"code":"import ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Value and type information for per-instance geometry attribute that determines if the geometry instance has a distance display condition.\n *\n * @alias DistanceDisplayConditionGeometryInstanceAttribute\n * @constructor\n *\n * @param {number} [near=0.0] The near distance.\n * @param {number} [far=Number.MAX_VALUE] The far distance.\n *\n * @exception {DeveloperError} far must be greater than near.\n *\n * @example\n * const instance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.BoxGeometry({\n *     vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n *     minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0),\n *     maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     distanceDisplayCondition : new Cesium.DistanceDisplayConditionGeometryInstanceAttribute(100.0, 10000.0)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\nfunction DistanceDisplayConditionGeometryInstanceAttribute(near, far) {\n  near = defaultValue(near, 0.0);\n  far = defaultValue(far, Number.MAX_VALUE);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (far <= near) {\n    throw new DeveloperError(\"far distance must be greater than near distance.\");\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type {Float32Array}\n   *\n   * @default [0.0, 0.0, Number.MAX_VALUE]\n   */\n  this.value = new Float32Array([near, far]);\n}\nObject.defineProperties(DistanceDisplayConditionGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n   *\n   * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.FLOAT}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.FLOAT;\n    }\n  },\n  /**\n   * The number of components in the attributes, i.e., {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n   *\n   * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @default 3\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 2;\n    }\n  },\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  normalize: {\n    get: function () {\n      return false;\n    }\n  }\n});\n\n/**\n * Creates a new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance given the provided an enabled flag and {@link DistanceDisplayCondition}.\n *\n * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition.\n * @returns {DistanceDisplayConditionGeometryInstanceAttribute} The new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance.\n *\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @example\n * const distanceDisplayCondition = new Cesium.DistanceDisplayCondition(100.0, 10000.0);\n * const instance = new Cesium.GeometryInstance({\n *   geometry : geometry,\n *   attributes : {\n *     distanceDisplayCondition : Cesium.DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n *   }\n * });\n */\nDistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition = function (distanceDisplayCondition) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(distanceDisplayCondition)) {\n    throw new DeveloperError(\"distanceDisplayCondition is required.\");\n  }\n  if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n    throw new DeveloperError(\"distanceDisplayCondition.far distance must be greater than distanceDisplayCondition.near distance.\");\n  }\n  //>>includeEnd('debug');\n\n  return new DistanceDisplayConditionGeometryInstanceAttribute(distanceDisplayCondition.near, distanceDisplayCondition.far);\n};\n\n/**\n * Converts a distance display condition to a typed array that can be used to assign a distance display condition attribute.\n *\n * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition value.\n * @param {Float32Array} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Float32Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * const attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.distanceDisplayCondition = Cesium.DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n */\nDistanceDisplayConditionGeometryInstanceAttribute.toValue = function (distanceDisplayCondition, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(distanceDisplayCondition)) {\n    throw new DeveloperError(\"distanceDisplayCondition is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Float32Array([distanceDisplayCondition.near, distanceDisplayCondition.far]);\n  }\n  result[0] = distanceDisplayCondition.near;\n  result[1] = distanceDisplayCondition.far;\n  return result;\n};\nexport default DistanceDisplayConditionGeometryInstanceAttribute;","map":{"version":3,"names":["ComponentDatatype","defaultValue","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","near","far","Number","MAX_VALUE","value","Float32Array","Object","defineProperties","prototype","componentDatatype","get","FLOAT","componentsPerAttribute","normalize","fromDistanceDisplayCondition","distanceDisplayCondition","toValue","result"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/DistanceDisplayConditionGeometryInstanceAttribute.js"],"sourcesContent":["import ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Value and type information for per-instance geometry attribute that determines if the geometry instance has a distance display condition.\n *\n * @alias DistanceDisplayConditionGeometryInstanceAttribute\n * @constructor\n *\n * @param {number} [near=0.0] The near distance.\n * @param {number} [far=Number.MAX_VALUE] The far distance.\n *\n * @exception {DeveloperError} far must be greater than near.\n *\n * @example\n * const instance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.BoxGeometry({\n *     vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n *     minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0),\n *     maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     distanceDisplayCondition : new Cesium.DistanceDisplayConditionGeometryInstanceAttribute(100.0, 10000.0)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\nfunction DistanceDisplayConditionGeometryInstanceAttribute(near, far) {\n  near = defaultValue(near, 0.0);\n  far = defaultValue(far, Number.MAX_VALUE);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (far <= near) {\n    throw new DeveloperError(\n      \"far distance must be greater than near distance.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type {Float32Array}\n   *\n   * @default [0.0, 0.0, Number.MAX_VALUE]\n   */\n  this.value = new Float32Array([near, far]);\n}\n\nObject.defineProperties(\n  DistanceDisplayConditionGeometryInstanceAttribute.prototype,\n  {\n    /**\n     * The datatype of each component in the attribute, e.g., individual elements in\n     * {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n     *\n     * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n     *\n     * @type {ComponentDatatype}\n     * @readonly\n     *\n     * @default {@link ComponentDatatype.FLOAT}\n     */\n    componentDatatype: {\n      get: function () {\n        return ComponentDatatype.FLOAT;\n      },\n    },\n\n    /**\n     * The number of components in the attributes, i.e., {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n     *\n     * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n     *\n     * @type {number}\n     * @readonly\n     *\n     * @default 3\n     */\n    componentsPerAttribute: {\n      get: function () {\n        return 2;\n      },\n    },\n\n    /**\n     * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n     * indicate that the components should be mapped to the range [0, 1] (unsigned)\n     * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n     *\n     * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n     *\n     * @type {boolean}\n     * @readonly\n     *\n     * @default false\n     */\n    normalize: {\n      get: function () {\n        return false;\n      },\n    },\n  },\n);\n\n/**\n * Creates a new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance given the provided an enabled flag and {@link DistanceDisplayCondition}.\n *\n * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition.\n * @returns {DistanceDisplayConditionGeometryInstanceAttribute} The new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance.\n *\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @example\n * const distanceDisplayCondition = new Cesium.DistanceDisplayCondition(100.0, 10000.0);\n * const instance = new Cesium.GeometryInstance({\n *   geometry : geometry,\n *   attributes : {\n *     distanceDisplayCondition : Cesium.DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n *   }\n * });\n */\nDistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition =\n  function (distanceDisplayCondition) {\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(distanceDisplayCondition)) {\n      throw new DeveloperError(\"distanceDisplayCondition is required.\");\n    }\n    if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n      throw new DeveloperError(\n        \"distanceDisplayCondition.far distance must be greater than distanceDisplayCondition.near distance.\",\n      );\n    }\n    //>>includeEnd('debug');\n\n    return new DistanceDisplayConditionGeometryInstanceAttribute(\n      distanceDisplayCondition.near,\n      distanceDisplayCondition.far,\n    );\n  };\n\n/**\n * Converts a distance display condition to a typed array that can be used to assign a distance display condition attribute.\n *\n * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition value.\n * @param {Float32Array} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Float32Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * const attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.distanceDisplayCondition = Cesium.DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n */\nDistanceDisplayConditionGeometryInstanceAttribute.toValue = function (\n  distanceDisplayCondition,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(distanceDisplayCondition)) {\n    throw new DeveloperError(\"distanceDisplayCondition is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Float32Array([\n      distanceDisplayCondition.near,\n      distanceDisplayCondition.far,\n    ]);\n  }\n  result[0] = distanceDisplayCondition.near;\n  result[1] = distanceDisplayCondition.far;\n  return result;\n};\nexport default DistanceDisplayConditionGeometryInstanceAttribute;\n"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,wBAAwB;AACtD,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iDAAiDA,CAACC,IAAI,EAAEC,GAAG,EAAE;EACpED,IAAI,GAAGJ,YAAY,CAACI,IAAI,EAAE,GAAG,CAAC;EAC9BC,GAAG,GAAGL,YAAY,CAACK,GAAG,EAAEC,MAAM,CAACC,SAAS,CAAC;;EAEzC;EACA,IAAIF,GAAG,IAAID,IAAI,EAAE;IACf,MAAM,IAAIF,cAAc,CACtB,kDACF,CAAC;EACH;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACM,KAAK,GAAG,IAAIC,YAAY,CAAC,CAACL,IAAI,EAAEC,GAAG,CAAC,CAAC;AAC5C;AAEAK,MAAM,CAACC,gBAAgB,CACrBR,iDAAiD,CAACS,SAAS,EAC3D;EACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,iBAAiB,EAAE;IACjBC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAOf,iBAAiB,CAACgB,KAAK;IAChC;EACF,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,sBAAsB,EAAE;IACtBF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,CAAC;IACV;EACF,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,SAAS,EAAE;IACTH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,KAAK;IACd;EACF;AACF,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,iDAAiD,CAACe,4BAA4B,GAC5E,UAAUC,wBAAwB,EAAE;EAClC;EACA,IAAI,CAAClB,OAAO,CAACkB,wBAAwB,CAAC,EAAE;IACtC,MAAM,IAAIjB,cAAc,CAAC,uCAAuC,CAAC;EACnE;EACA,IAAIiB,wBAAwB,CAACd,GAAG,IAAIc,wBAAwB,CAACf,IAAI,EAAE;IACjE,MAAM,IAAIF,cAAc,CACtB,oGACF,CAAC;EACH;EACA;;EAEA,OAAO,IAAIC,iDAAiD,CAC1DgB,wBAAwB,CAACf,IAAI,EAC7Be,wBAAwB,CAACd,GAC3B,CAAC;AACH,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,iDAAiD,CAACiB,OAAO,GAAG,UAC1DD,wBAAwB,EACxBE,MAAM,EACN;EACA;EACA,IAAI,CAACpB,OAAO,CAACkB,wBAAwB,CAAC,EAAE;IACtC,MAAM,IAAIjB,cAAc,CAAC,uCAAuC,CAAC;EACnE;EACA;;EAEA,IAAI,CAACD,OAAO,CAACoB,MAAM,CAAC,EAAE;IACpB,OAAO,IAAIZ,YAAY,CAAC,CACtBU,wBAAwB,CAACf,IAAI,EAC7Be,wBAAwB,CAACd,GAAG,CAC7B,CAAC;EACJ;EACAgB,MAAM,CAAC,CAAC,CAAC,GAAGF,wBAAwB,CAACf,IAAI;EACzCiB,MAAM,CAAC,CAAC,CAAC,GAAGF,wBAAwB,CAACd,GAAG;EACxC,OAAOgB,MAAM;AACf,CAAC;AACD,eAAelB,iDAAiD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}