{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport BillboardCollection from \"./BillboardCollection.js\";\nimport CircleEmitter from \"./CircleEmitter.js\";\nimport Particle from \"./Particle.js\";\nconst defaultImageSize = new Cartesian2(1.0, 1.0);\n\n/**\n * A ParticleSystem manages the updating and display of a collection of particles.\n *\n * @alias ParticleSystem\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.show=true] Whether to display the particle system.\n * @param {ParticleSystem.updateCallback} [options.updateCallback] The callback function to be called each frame to update a particle.\n * @param {ParticleEmitter} [options.emitter=new CircleEmitter(0.5)] The particle emitter for this system.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the particle system from model to world coordinates.\n * @param {Matrix4} [options.emitterModelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the particle system emitter within the particle systems local coordinate system.\n * @param {number} [options.emissionRate=5] The number of particles to emit per second.\n * @param {ParticleBurst[]} [options.bursts] An array of {@link ParticleBurst}, emitting bursts of particles at periodic times.\n * @param {boolean} [options.loop=true] Whether the particle system should loop its bursts when it is complete.\n * @param {number} [options.scale=1.0] Sets the scale to apply to the image of the particle for the duration of its particleLife.\n * @param {number} [options.startScale] The initial scale to apply to the image of the particle at the beginning of its life.\n * @param {number} [options.endScale] The final scale to apply to the image of the particle at the end of its life.\n * @param {Color} [options.color=Color.WHITE] Sets the color of a particle for the duration of its particleLife.\n * @param {Color} [options.startColor] The color of the particle at the beginning of its life.\n * @param {Color} [options.endColor] The color of the particle at the end of its life.\n * @param {object} [options.image] The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n * @param {Cartesian2} [options.imageSize=new Cartesian2(1.0, 1.0)] If set, overrides the minimumImageSize and maximumImageSize inputs that scale the particle image's dimensions in pixels.\n * @param {Cartesian2} [options.minimumImageSize] Sets the minimum bound, width by height, above which to randomly scale the particle image's dimensions in pixels.\n * @param {Cartesian2} [options.maximumImageSize] Sets the maximum bound, width by height, below which to randomly scale the particle image's dimensions in pixels.\n * @param {boolean} [options.sizeInMeters] Sets if the size of particles is in meters or pixels. <code>true</code> to size the particles in meters; otherwise, the size is in pixels.\n * @param {number} [options.speed=1.0] If set, overrides the minimumSpeed and maximumSpeed inputs with this value.\n * @param {number} [options.minimumSpeed] Sets the minimum bound in meters per second above which a particle's actual speed will be randomly chosen.\n * @param {number} [options.maximumSpeed] Sets the maximum bound in meters per second below which a particle's actual speed will be randomly chosen.\n * @param {number} [options.lifetime=Number.MAX_VALUE] How long the particle system will emit particles, in seconds.\n * @param {number} [options.particleLife=5.0] If set, overrides the minimumParticleLife and maximumParticleLife inputs with this value.\n * @param {number} [options.minimumParticleLife] Sets the minimum bound in seconds for the possible duration of a particle's life above which a particle's actual life will be randomly chosen.\n * @param {number} [options.maximumParticleLife] Sets the maximum bound in seconds for the possible duration of a particle's life below which a particle's actual life will be randomly chosen.\n * @param {number} [options.mass=1.0] Sets the minimum and maximum mass of particles in kilograms.\n * @param {number} [options.minimumMass] Sets the minimum bound for the mass of a particle in kilograms. A particle's actual mass will be chosen as a random amount above this value.\n * @param {number} [options.maximumMass] Sets the maximum mass of particles in kilograms. A particle's actual mass will be chosen as a random amount below this value.\n * @demo {@link https://cesium.com/learn/cesiumjs-learn/cesiumjs-particle-systems/|Particle Systems Tutorial}\n * @demo {@link https://sandcastle.cesium.com/?src=Particle%20System.html&label=Showcases|Particle Systems Tutorial Demo}\n * @demo {@link https://sandcastle.cesium.com/?src=Particle%20System%20Fireworks.html&label=Showcases|Particle Systems Fireworks Demo}\n */\nfunction ParticleSystem(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * Whether to display the particle system.\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * An array of force callbacks. The callback is passed a {@link Particle} and the difference from the last time\n   * @type {ParticleSystem.updateCallback}\n   * @default undefined\n   */\n  this.updateCallback = options.updateCallback;\n\n  /**\n   * Whether the particle system should loop it's bursts when it is complete.\n   * @type {boolean}\n   * @default true\n   */\n  this.loop = defaultValue(options.loop, true);\n\n  /**\n   * The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n   * @type {object}\n   * @default undefined\n   */\n  this.image = defaultValue(options.image, undefined);\n  let emitter = options.emitter;\n  if (!defined(emitter)) {\n    emitter = new CircleEmitter(0.5);\n  }\n  this._emitter = emitter;\n  this._bursts = options.bursts;\n  this._modelMatrix = Matrix4.clone(defaultValue(options.modelMatrix, Matrix4.IDENTITY));\n  this._emitterModelMatrix = Matrix4.clone(defaultValue(options.emitterModelMatrix, Matrix4.IDENTITY));\n  this._matrixDirty = true;\n  this._combinedMatrix = new Matrix4();\n  this._startColor = Color.clone(defaultValue(options.color, defaultValue(options.startColor, Color.WHITE)));\n  this._endColor = Color.clone(defaultValue(options.color, defaultValue(options.endColor, Color.WHITE)));\n  this._startScale = defaultValue(options.scale, defaultValue(options.startScale, 1.0));\n  this._endScale = defaultValue(options.scale, defaultValue(options.endScale, 1.0));\n  this._emissionRate = defaultValue(options.emissionRate, 5.0);\n  this._minimumSpeed = defaultValue(options.speed, defaultValue(options.minimumSpeed, 1.0));\n  this._maximumSpeed = defaultValue(options.speed, defaultValue(options.maximumSpeed, 1.0));\n  this._minimumParticleLife = defaultValue(options.particleLife, defaultValue(options.minimumParticleLife, 5.0));\n  this._maximumParticleLife = defaultValue(options.particleLife, defaultValue(options.maximumParticleLife, 5.0));\n  this._minimumMass = defaultValue(options.mass, defaultValue(options.minimumMass, 1.0));\n  this._maximumMass = defaultValue(options.mass, defaultValue(options.maximumMass, 1.0));\n  this._minimumImageSize = Cartesian2.clone(defaultValue(options.imageSize, defaultValue(options.minimumImageSize, defaultImageSize)));\n  this._maximumImageSize = Cartesian2.clone(defaultValue(options.imageSize, defaultValue(options.maximumImageSize, defaultImageSize)));\n  this._sizeInMeters = defaultValue(options.sizeInMeters, false);\n  this._lifetime = defaultValue(options.lifetime, Number.MAX_VALUE);\n  this._billboardCollection = undefined;\n  this._particles = [];\n\n  // An array of available particles that we can reuse instead of allocating new.\n  this._particlePool = [];\n  this._previousTime = undefined;\n  this._currentTime = 0.0;\n  this._carryOver = 0.0;\n  this._complete = new Event();\n  this._isComplete = false;\n  this._updateParticlePool = true;\n  this._particleEstimate = 0;\n}\nObject.defineProperties(ParticleSystem.prototype, {\n  /**\n   * The particle emitter for this\n   * @memberof ParticleSystem.prototype\n   * @type {ParticleEmitter}\n   * @default CircleEmitter\n   */\n  emitter: {\n    get: function () {\n      return this._emitter;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      this._emitter = value;\n    }\n  },\n  /**\n   * An array of {@link ParticleBurst}, emitting bursts of particles at periodic times.\n   * @memberof ParticleSystem.prototype\n   * @type {ParticleBurst[]}\n   * @default undefined\n   */\n  bursts: {\n    get: function () {\n      return this._bursts;\n    },\n    set: function (value) {\n      this._bursts = value;\n      this._updateParticlePool = true;\n    }\n  },\n  /**\n   * The 4x4 transformation matrix that transforms the particle system from model to world coordinates.\n   * @memberof ParticleSystem.prototype\n   * @type {Matrix4}\n   * @default Matrix4.IDENTITY\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      this._matrixDirty = this._matrixDirty || !Matrix4.equals(this._modelMatrix, value);\n      Matrix4.clone(value, this._modelMatrix);\n    }\n  },\n  /**\n   * The 4x4 transformation matrix that transforms the particle system emitter within the particle systems local coordinate system.\n   * @memberof ParticleSystem.prototype\n   * @type {Matrix4}\n   * @default Matrix4.IDENTITY\n   */\n  emitterModelMatrix: {\n    get: function () {\n      return this._emitterModelMatrix;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      this._matrixDirty = this._matrixDirty || !Matrix4.equals(this._emitterModelMatrix, value);\n      Matrix4.clone(value, this._emitterModelMatrix);\n    }\n  },\n  /**\n   * The color of the particle at the beginning of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  startColor: {\n    get: function () {\n      return this._startColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      Color.clone(value, this._startColor);\n    }\n  },\n  /**\n   * The color of the particle at the end of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  endColor: {\n    get: function () {\n      return this._endColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      Color.clone(value, this._endColor);\n    }\n  },\n  /**\n   * The initial scale to apply to the image of the particle at the beginning of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  startScale: {\n    get: function () {\n      return this._startScale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._startScale = value;\n    }\n  },\n  /**\n   * The final scale to apply to the image of the particle at the end of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  endScale: {\n    get: function () {\n      return this._endScale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._endScale = value;\n    }\n  },\n  /**\n   * The number of particles to emit per second.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 5\n   */\n  emissionRate: {\n    get: function () {\n      return this._emissionRate;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._emissionRate = value;\n      this._updateParticlePool = true;\n    }\n  },\n  /**\n   * Sets the minimum bound in meters per second above which a particle's actual speed will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  minimumSpeed: {\n    get: function () {\n      return this._minimumSpeed;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._minimumSpeed = value;\n    }\n  },\n  /**\n   * Sets the maximum bound in meters per second below which a particle's actual speed will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  maximumSpeed: {\n    get: function () {\n      return this._maximumSpeed;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._maximumSpeed = value;\n    }\n  },\n  /**\n   * Sets the minimum bound in seconds for the possible duration of a particle's life above which a particle's actual life will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 5.0\n   */\n  minimumParticleLife: {\n    get: function () {\n      return this._minimumParticleLife;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._minimumParticleLife = value;\n    }\n  },\n  /**\n   * Sets the maximum bound in seconds for the possible duration of a particle's life below which a particle's actual life will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 5.0\n   */\n  maximumParticleLife: {\n    get: function () {\n      return this._maximumParticleLife;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._maximumParticleLife = value;\n      this._updateParticlePool = true;\n    }\n  },\n  /**\n   * Sets the minimum mass of particles in kilograms.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  minimumMass: {\n    get: function () {\n      return this._minimumMass;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._minimumMass = value;\n    }\n  },\n  /**\n   * Sets the maximum mass of particles in kilograms.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  maximumMass: {\n    get: function () {\n      return this._maximumMass;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._maximumMass = value;\n    }\n  },\n  /**\n   * Sets the minimum bound, width by height, above which to randomly scale the particle image's dimensions in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {Cartesian2}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  minimumImageSize: {\n    get: function () {\n      return this._minimumImageSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0);\n      //>>includeEnd('debug');\n      this._minimumImageSize = value;\n    }\n  },\n  /**\n   * Sets the maximum bound, width by height, below which to randomly scale the particle image's dimensions in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {Cartesian2}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  maximumImageSize: {\n    get: function () {\n      return this._maximumImageSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0);\n      //>>includeEnd('debug');\n      this._maximumImageSize = value;\n    }\n  },\n  /**\n   * Gets or sets if the particle size is in meters or pixels. <code>true</code> to size particles in meters; otherwise, the size is in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {boolean}\n   * @default false\n   */\n  sizeInMeters: {\n    get: function () {\n      return this._sizeInMeters;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"value\", value);\n      //>>includeEnd('debug');\n      this._sizeInMeters = value;\n    }\n  },\n  /**\n   * How long the particle system will emit particles, in seconds.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default Number.MAX_VALUE\n   */\n  lifetime: {\n    get: function () {\n      return this._lifetime;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._lifetime = value;\n    }\n  },\n  /**\n   * Fires an event when the particle system has reached the end of its lifetime.\n   * @memberof ParticleSystem.prototype\n   * @type {Event}\n   */\n  complete: {\n    get: function () {\n      return this._complete;\n    }\n  },\n  /**\n   * When <code>true</code>, the particle system has reached the end of its lifetime; <code>false</code> otherwise.\n   * @memberof ParticleSystem.prototype\n   * @type {boolean}\n   */\n  isComplete: {\n    get: function () {\n      return this._isComplete;\n    }\n  }\n});\nfunction updateParticlePool(system) {\n  const emissionRate = system._emissionRate;\n  const life = system._maximumParticleLife;\n  let burstAmount = 0;\n  const bursts = system._bursts;\n  if (defined(bursts)) {\n    const length = bursts.length;\n    for (let i = 0; i < length; ++i) {\n      burstAmount += bursts[i].maximum;\n    }\n  }\n  const billboardCollection = system._billboardCollection;\n  const image = system.image;\n  const particleEstimate = Math.ceil(emissionRate * life + burstAmount);\n  const particles = system._particles;\n  const particlePool = system._particlePool;\n  const numToAdd = Math.max(particleEstimate - particles.length - particlePool.length, 0);\n  for (let j = 0; j < numToAdd; ++j) {\n    const particle = new Particle();\n    particle._billboard = billboardCollection.add({\n      image: image,\n      // Make the newly added billboards invisible when updating the particle pool\n      // to prevent the billboards from being displayed when the particles\n      // are not created. The billboard will always be set visible in\n      // updateBillboard function when its corresponding particle update.\n      show: false\n    });\n    particlePool.push(particle);\n  }\n  system._particleEstimate = particleEstimate;\n}\nfunction getOrCreateParticle(system) {\n  // Try to reuse an existing particle from the pool.\n  let particle = system._particlePool.pop();\n  if (!defined(particle)) {\n    // Create a new one\n    particle = new Particle();\n  }\n  return particle;\n}\nfunction addParticleToPool(system, particle) {\n  system._particlePool.push(particle);\n}\nfunction freeParticlePool(system) {\n  const particles = system._particles;\n  const particlePool = system._particlePool;\n  const billboardCollection = system._billboardCollection;\n  const numParticles = particles.length;\n  const numInPool = particlePool.length;\n  const estimate = system._particleEstimate;\n  const start = numInPool - Math.max(estimate - numParticles - numInPool, 0);\n  for (let i = start; i < numInPool; ++i) {\n    const p = particlePool[i];\n    billboardCollection.remove(p._billboard);\n  }\n  particlePool.length = start;\n}\nfunction removeBillboard(particle) {\n  if (defined(particle._billboard)) {\n    particle._billboard.show = false;\n  }\n}\nfunction updateBillboard(system, particle) {\n  let billboard = particle._billboard;\n  if (!defined(billboard)) {\n    billboard = particle._billboard = system._billboardCollection.add({\n      image: particle.image\n    });\n  }\n  billboard.width = particle.imageSize.x;\n  billboard.height = particle.imageSize.y;\n  billboard.position = particle.position;\n  billboard.sizeInMeters = system.sizeInMeters;\n  billboard.show = true;\n\n  // Update the color\n  const r = CesiumMath.lerp(particle.startColor.red, particle.endColor.red, particle.normalizedAge);\n  const g = CesiumMath.lerp(particle.startColor.green, particle.endColor.green, particle.normalizedAge);\n  const b = CesiumMath.lerp(particle.startColor.blue, particle.endColor.blue, particle.normalizedAge);\n  const a = CesiumMath.lerp(particle.startColor.alpha, particle.endColor.alpha, particle.normalizedAge);\n  billboard.color = new Color(r, g, b, a);\n\n  // Update the scale\n  billboard.scale = CesiumMath.lerp(particle.startScale, particle.endScale, particle.normalizedAge);\n}\nfunction addParticle(system, particle) {\n  particle.startColor = Color.clone(system._startColor, particle.startColor);\n  particle.endColor = Color.clone(system._endColor, particle.endColor);\n  particle.startScale = system._startScale;\n  particle.endScale = system._endScale;\n  particle.image = system.image;\n  particle.life = CesiumMath.randomBetween(system._minimumParticleLife, system._maximumParticleLife);\n  particle.mass = CesiumMath.randomBetween(system._minimumMass, system._maximumMass);\n  particle.imageSize.x = CesiumMath.randomBetween(system._minimumImageSize.x, system._maximumImageSize.x);\n  particle.imageSize.y = CesiumMath.randomBetween(system._minimumImageSize.y, system._maximumImageSize.y);\n\n  // Reset the normalizedAge and age in case the particle was reused.\n  particle._normalizedAge = 0.0;\n  particle._age = 0.0;\n  const speed = CesiumMath.randomBetween(system._minimumSpeed, system._maximumSpeed);\n  Cartesian3.multiplyByScalar(particle.velocity, speed, particle.velocity);\n  system._particles.push(particle);\n}\nfunction calculateNumberToEmit(system, dt) {\n  // This emitter is finished if it exceeds it's lifetime.\n  if (system._isComplete) {\n    return 0;\n  }\n  dt = CesiumMath.mod(dt, system._lifetime);\n\n  // Compute the number of particles to emit based on the emissionRate.\n  const v = dt * system._emissionRate;\n  let numToEmit = Math.floor(v);\n  system._carryOver += v - numToEmit;\n  if (system._carryOver > 1.0) {\n    numToEmit++;\n    system._carryOver -= 1.0;\n  }\n\n  // Apply any bursts\n  if (defined(system.bursts)) {\n    const length = system.bursts.length;\n    for (let i = 0; i < length; i++) {\n      const burst = system.bursts[i];\n      const currentTime = system._currentTime;\n      if (defined(burst) && !burst._complete && currentTime > burst.time) {\n        numToEmit += CesiumMath.randomBetween(burst.minimum, burst.maximum);\n        burst._complete = true;\n      }\n    }\n  }\n  return numToEmit;\n}\nconst rotatedVelocityScratch = new Cartesian3();\n\n/**\n * @private\n */\nParticleSystem.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n  if (!defined(this._billboardCollection)) {\n    this._billboardCollection = new BillboardCollection();\n  }\n  if (this._updateParticlePool) {\n    updateParticlePool(this);\n    this._updateParticlePool = false;\n  }\n\n  // Compute the frame time\n  let dt = 0.0;\n  if (this._previousTime) {\n    dt = JulianDate.secondsDifference(frameState.time, this._previousTime);\n  }\n  if (dt < 0.0) {\n    dt = 0.0;\n  }\n  const particles = this._particles;\n  const emitter = this._emitter;\n  const updateCallback = this.updateCallback;\n  let i;\n  let particle;\n\n  // update particles and remove dead particles\n  let length = particles.length;\n  for (i = 0; i < length; ++i) {\n    particle = particles[i];\n    if (!particle.update(dt, updateCallback)) {\n      removeBillboard(particle);\n      // Add the particle back to the pool so it can be reused.\n      addParticleToPool(this, particle);\n      particles[i] = particles[length - 1];\n      --i;\n      --length;\n    } else {\n      updateBillboard(this, particle);\n    }\n  }\n  particles.length = length;\n  const numToEmit = calculateNumberToEmit(this, dt);\n  if (numToEmit > 0 && defined(emitter)) {\n    // Compute the final model matrix by combining the particle systems model matrix and the emitter matrix.\n    if (this._matrixDirty) {\n      this._combinedMatrix = Matrix4.multiply(this.modelMatrix, this.emitterModelMatrix, this._combinedMatrix);\n      this._matrixDirty = false;\n    }\n    const combinedMatrix = this._combinedMatrix;\n    for (i = 0; i < numToEmit; i++) {\n      // Create a new particle.\n      particle = getOrCreateParticle(this);\n\n      // Let the emitter initialize the particle.\n      this._emitter.emit(particle);\n\n      //For the velocity we need to add it to the original position and then multiply by point.\n      Cartesian3.add(particle.position, particle.velocity, rotatedVelocityScratch);\n      Matrix4.multiplyByPoint(combinedMatrix, rotatedVelocityScratch, rotatedVelocityScratch);\n\n      // Change the position to be in world coordinates\n      particle.position = Matrix4.multiplyByPoint(combinedMatrix, particle.position, particle.position);\n\n      // Orient the velocity in world space as well.\n      Cartesian3.subtract(rotatedVelocityScratch, particle.position, particle.velocity);\n      Cartesian3.normalize(particle.velocity, particle.velocity);\n\n      // Add the particle to the system.\n      addParticle(this, particle);\n      updateBillboard(this, particle);\n    }\n  }\n  this._billboardCollection.update(frameState);\n  this._previousTime = JulianDate.clone(frameState.time, this._previousTime);\n  this._currentTime += dt;\n  if (this._lifetime !== Number.MAX_VALUE && this._currentTime > this._lifetime) {\n    if (this.loop) {\n      this._currentTime = CesiumMath.mod(this._currentTime, this._lifetime);\n      if (this.bursts) {\n        const burstLength = this.bursts.length;\n        // Reset any bursts\n        for (i = 0; i < burstLength; i++) {\n          this.bursts[i]._complete = false;\n        }\n      }\n    } else {\n      this._isComplete = true;\n      this._complete.raiseEvent(this);\n    }\n  }\n\n  // free particles in the pool and release billboard GPU memory\n  if (frameState.frameNumber % 120 === 0) {\n    freeParticlePool(this);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ParticleSystem#destroy\n */\nParticleSystem.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see ParticleSystem#isDestroyed\n */\nParticleSystem.prototype.destroy = function () {\n  this._billboardCollection = this._billboardCollection && this._billboardCollection.destroy();\n  return destroyObject(this);\n};\n\n/**\n * A function used to modify attributes of the particle at each time step. This can include force modifications,\n * color, sizing, etc.\n *\n * @callback ParticleSystem.updateCallback\n *\n * @param {Particle} particle The particle being updated.\n * @param {number} dt The time in seconds since the last update.\n *\n * @example\n * function applyGravity(particle, dt) {\n *    const position = particle.position;\n *    const gravityVector = Cesium.Cartesian3.normalize(position, new Cesium.Cartesian3());\n *    Cesium.Cartesian3.multiplyByScalar(gravityVector, GRAVITATIONAL_CONSTANT * dt, gravityVector);\n *    particle.velocity = Cesium.Cartesian3.add(particle.velocity, gravityVector, particle.velocity);\n * }\n */\nexport default ParticleSystem;","map":{"version":3,"names":["Cartesian2","Cartesian3","Check","Color","defaultValue","defined","destroyObject","Event","JulianDate","CesiumMath","Matrix4","BillboardCollection","CircleEmitter","Particle","defaultImageSize","ParticleSystem","options","EMPTY_OBJECT","show","updateCallback","loop","image","undefined","emitter","_emitter","_bursts","bursts","_modelMatrix","clone","modelMatrix","IDENTITY","_emitterModelMatrix","emitterModelMatrix","_matrixDirty","_combinedMatrix","_startColor","color","startColor","WHITE","_endColor","endColor","_startScale","scale","startScale","_endScale","endScale","_emissionRate","emissionRate","_minimumSpeed","speed","minimumSpeed","_maximumSpeed","maximumSpeed","_minimumParticleLife","particleLife","minimumParticleLife","_maximumParticleLife","maximumParticleLife","_minimumMass","mass","minimumMass","_maximumMass","maximumMass","_minimumImageSize","imageSize","minimumImageSize","_maximumImageSize","maximumImageSize","_sizeInMeters","sizeInMeters","_lifetime","lifetime","Number","MAX_VALUE","_billboardCollection","_particles","_particlePool","_previousTime","_currentTime","_carryOver","_complete","_isComplete","_updateParticlePool","_particleEstimate","Object","defineProperties","prototype","get","set","value","equals","typeOf","number","greaterThanOrEquals","object","x","y","bool","complete","isComplete","updateParticlePool","system","life","burstAmount","length","i","maximum","billboardCollection","particleEstimate","Math","ceil","particles","particlePool","numToAdd","max","j","particle","_billboard","add","push","getOrCreateParticle","pop","addParticleToPool","freeParticlePool","numParticles","numInPool","estimate","start","p","remove","removeBillboard","updateBillboard","billboard","width","height","position","r","lerp","red","normalizedAge","g","green","b","blue","a","alpha","addParticle","randomBetween","_normalizedAge","_age","multiplyByScalar","velocity","calculateNumberToEmit","dt","mod","v","numToEmit","floor","burst","currentTime","time","minimum","rotatedVelocityScratch","update","frameState","secondsDifference","multiply","combinedMatrix","emit","multiplyByPoint","subtract","normalize","burstLength","raiseEvent","frameNumber","isDestroyed","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ParticleSystem.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport BillboardCollection from \"./BillboardCollection.js\";\nimport CircleEmitter from \"./CircleEmitter.js\";\nimport Particle from \"./Particle.js\";\n\nconst defaultImageSize = new Cartesian2(1.0, 1.0);\n\n/**\n * A ParticleSystem manages the updating and display of a collection of particles.\n *\n * @alias ParticleSystem\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.show=true] Whether to display the particle system.\n * @param {ParticleSystem.updateCallback} [options.updateCallback] The callback function to be called each frame to update a particle.\n * @param {ParticleEmitter} [options.emitter=new CircleEmitter(0.5)] The particle emitter for this system.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the particle system from model to world coordinates.\n * @param {Matrix4} [options.emitterModelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the particle system emitter within the particle systems local coordinate system.\n * @param {number} [options.emissionRate=5] The number of particles to emit per second.\n * @param {ParticleBurst[]} [options.bursts] An array of {@link ParticleBurst}, emitting bursts of particles at periodic times.\n * @param {boolean} [options.loop=true] Whether the particle system should loop its bursts when it is complete.\n * @param {number} [options.scale=1.0] Sets the scale to apply to the image of the particle for the duration of its particleLife.\n * @param {number} [options.startScale] The initial scale to apply to the image of the particle at the beginning of its life.\n * @param {number} [options.endScale] The final scale to apply to the image of the particle at the end of its life.\n * @param {Color} [options.color=Color.WHITE] Sets the color of a particle for the duration of its particleLife.\n * @param {Color} [options.startColor] The color of the particle at the beginning of its life.\n * @param {Color} [options.endColor] The color of the particle at the end of its life.\n * @param {object} [options.image] The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n * @param {Cartesian2} [options.imageSize=new Cartesian2(1.0, 1.0)] If set, overrides the minimumImageSize and maximumImageSize inputs that scale the particle image's dimensions in pixels.\n * @param {Cartesian2} [options.minimumImageSize] Sets the minimum bound, width by height, above which to randomly scale the particle image's dimensions in pixels.\n * @param {Cartesian2} [options.maximumImageSize] Sets the maximum bound, width by height, below which to randomly scale the particle image's dimensions in pixels.\n * @param {boolean} [options.sizeInMeters] Sets if the size of particles is in meters or pixels. <code>true</code> to size the particles in meters; otherwise, the size is in pixels.\n * @param {number} [options.speed=1.0] If set, overrides the minimumSpeed and maximumSpeed inputs with this value.\n * @param {number} [options.minimumSpeed] Sets the minimum bound in meters per second above which a particle's actual speed will be randomly chosen.\n * @param {number} [options.maximumSpeed] Sets the maximum bound in meters per second below which a particle's actual speed will be randomly chosen.\n * @param {number} [options.lifetime=Number.MAX_VALUE] How long the particle system will emit particles, in seconds.\n * @param {number} [options.particleLife=5.0] If set, overrides the minimumParticleLife and maximumParticleLife inputs with this value.\n * @param {number} [options.minimumParticleLife] Sets the minimum bound in seconds for the possible duration of a particle's life above which a particle's actual life will be randomly chosen.\n * @param {number} [options.maximumParticleLife] Sets the maximum bound in seconds for the possible duration of a particle's life below which a particle's actual life will be randomly chosen.\n * @param {number} [options.mass=1.0] Sets the minimum and maximum mass of particles in kilograms.\n * @param {number} [options.minimumMass] Sets the minimum bound for the mass of a particle in kilograms. A particle's actual mass will be chosen as a random amount above this value.\n * @param {number} [options.maximumMass] Sets the maximum mass of particles in kilograms. A particle's actual mass will be chosen as a random amount below this value.\n * @demo {@link https://cesium.com/learn/cesiumjs-learn/cesiumjs-particle-systems/|Particle Systems Tutorial}\n * @demo {@link https://sandcastle.cesium.com/?src=Particle%20System.html&label=Showcases|Particle Systems Tutorial Demo}\n * @demo {@link https://sandcastle.cesium.com/?src=Particle%20System%20Fireworks.html&label=Showcases|Particle Systems Fireworks Demo}\n */\nfunction ParticleSystem(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * Whether to display the particle system.\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * An array of force callbacks. The callback is passed a {@link Particle} and the difference from the last time\n   * @type {ParticleSystem.updateCallback}\n   * @default undefined\n   */\n  this.updateCallback = options.updateCallback;\n\n  /**\n   * Whether the particle system should loop it's bursts when it is complete.\n   * @type {boolean}\n   * @default true\n   */\n  this.loop = defaultValue(options.loop, true);\n\n  /**\n   * The URI, HTMLImageElement, or HTMLCanvasElement to use for the billboard.\n   * @type {object}\n   * @default undefined\n   */\n  this.image = defaultValue(options.image, undefined);\n\n  let emitter = options.emitter;\n  if (!defined(emitter)) {\n    emitter = new CircleEmitter(0.5);\n  }\n  this._emitter = emitter;\n\n  this._bursts = options.bursts;\n\n  this._modelMatrix = Matrix4.clone(\n    defaultValue(options.modelMatrix, Matrix4.IDENTITY),\n  );\n  this._emitterModelMatrix = Matrix4.clone(\n    defaultValue(options.emitterModelMatrix, Matrix4.IDENTITY),\n  );\n  this._matrixDirty = true;\n  this._combinedMatrix = new Matrix4();\n\n  this._startColor = Color.clone(\n    defaultValue(options.color, defaultValue(options.startColor, Color.WHITE)),\n  );\n  this._endColor = Color.clone(\n    defaultValue(options.color, defaultValue(options.endColor, Color.WHITE)),\n  );\n\n  this._startScale = defaultValue(\n    options.scale,\n    defaultValue(options.startScale, 1.0),\n  );\n  this._endScale = defaultValue(\n    options.scale,\n    defaultValue(options.endScale, 1.0),\n  );\n\n  this._emissionRate = defaultValue(options.emissionRate, 5.0);\n\n  this._minimumSpeed = defaultValue(\n    options.speed,\n    defaultValue(options.minimumSpeed, 1.0),\n  );\n  this._maximumSpeed = defaultValue(\n    options.speed,\n    defaultValue(options.maximumSpeed, 1.0),\n  );\n\n  this._minimumParticleLife = defaultValue(\n    options.particleLife,\n    defaultValue(options.minimumParticleLife, 5.0),\n  );\n  this._maximumParticleLife = defaultValue(\n    options.particleLife,\n    defaultValue(options.maximumParticleLife, 5.0),\n  );\n\n  this._minimumMass = defaultValue(\n    options.mass,\n    defaultValue(options.minimumMass, 1.0),\n  );\n  this._maximumMass = defaultValue(\n    options.mass,\n    defaultValue(options.maximumMass, 1.0),\n  );\n\n  this._minimumImageSize = Cartesian2.clone(\n    defaultValue(\n      options.imageSize,\n      defaultValue(options.minimumImageSize, defaultImageSize),\n    ),\n  );\n  this._maximumImageSize = Cartesian2.clone(\n    defaultValue(\n      options.imageSize,\n      defaultValue(options.maximumImageSize, defaultImageSize),\n    ),\n  );\n\n  this._sizeInMeters = defaultValue(options.sizeInMeters, false);\n\n  this._lifetime = defaultValue(options.lifetime, Number.MAX_VALUE);\n\n  this._billboardCollection = undefined;\n  this._particles = [];\n\n  // An array of available particles that we can reuse instead of allocating new.\n  this._particlePool = [];\n\n  this._previousTime = undefined;\n  this._currentTime = 0.0;\n  this._carryOver = 0.0;\n\n  this._complete = new Event();\n  this._isComplete = false;\n\n  this._updateParticlePool = true;\n  this._particleEstimate = 0;\n}\n\nObject.defineProperties(ParticleSystem.prototype, {\n  /**\n   * The particle emitter for this\n   * @memberof ParticleSystem.prototype\n   * @type {ParticleEmitter}\n   * @default CircleEmitter\n   */\n  emitter: {\n    get: function () {\n      return this._emitter;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      this._emitter = value;\n    },\n  },\n  /**\n   * An array of {@link ParticleBurst}, emitting bursts of particles at periodic times.\n   * @memberof ParticleSystem.prototype\n   * @type {ParticleBurst[]}\n   * @default undefined\n   */\n  bursts: {\n    get: function () {\n      return this._bursts;\n    },\n    set: function (value) {\n      this._bursts = value;\n      this._updateParticlePool = true;\n    },\n  },\n  /**\n   * The 4x4 transformation matrix that transforms the particle system from model to world coordinates.\n   * @memberof ParticleSystem.prototype\n   * @type {Matrix4}\n   * @default Matrix4.IDENTITY\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      this._matrixDirty =\n        this._matrixDirty || !Matrix4.equals(this._modelMatrix, value);\n      Matrix4.clone(value, this._modelMatrix);\n    },\n  },\n  /**\n   * The 4x4 transformation matrix that transforms the particle system emitter within the particle systems local coordinate system.\n   * @memberof ParticleSystem.prototype\n   * @type {Matrix4}\n   * @default Matrix4.IDENTITY\n   */\n  emitterModelMatrix: {\n    get: function () {\n      return this._emitterModelMatrix;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      this._matrixDirty =\n        this._matrixDirty || !Matrix4.equals(this._emitterModelMatrix, value);\n      Matrix4.clone(value, this._emitterModelMatrix);\n    },\n  },\n  /**\n   * The color of the particle at the beginning of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  startColor: {\n    get: function () {\n      return this._startColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      Color.clone(value, this._startColor);\n    },\n  },\n  /**\n   * The color of the particle at the end of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  endColor: {\n    get: function () {\n      return this._endColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n      Color.clone(value, this._endColor);\n    },\n  },\n  /**\n   * The initial scale to apply to the image of the particle at the beginning of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  startScale: {\n    get: function () {\n      return this._startScale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._startScale = value;\n    },\n  },\n  /**\n   * The final scale to apply to the image of the particle at the end of its life.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  endScale: {\n    get: function () {\n      return this._endScale;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._endScale = value;\n    },\n  },\n  /**\n   * The number of particles to emit per second.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 5\n   */\n  emissionRate: {\n    get: function () {\n      return this._emissionRate;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._emissionRate = value;\n      this._updateParticlePool = true;\n    },\n  },\n  /**\n   * Sets the minimum bound in meters per second above which a particle's actual speed will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  minimumSpeed: {\n    get: function () {\n      return this._minimumSpeed;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._minimumSpeed = value;\n    },\n  },\n  /**\n   * Sets the maximum bound in meters per second below which a particle's actual speed will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  maximumSpeed: {\n    get: function () {\n      return this._maximumSpeed;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._maximumSpeed = value;\n    },\n  },\n  /**\n   * Sets the minimum bound in seconds for the possible duration of a particle's life above which a particle's actual life will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 5.0\n   */\n  minimumParticleLife: {\n    get: function () {\n      return this._minimumParticleLife;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._minimumParticleLife = value;\n    },\n  },\n  /**\n   * Sets the maximum bound in seconds for the possible duration of a particle's life below which a particle's actual life will be randomly chosen.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 5.0\n   */\n  maximumParticleLife: {\n    get: function () {\n      return this._maximumParticleLife;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._maximumParticleLife = value;\n      this._updateParticlePool = true;\n    },\n  },\n  /**\n   * Sets the minimum mass of particles in kilograms.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  minimumMass: {\n    get: function () {\n      return this._minimumMass;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._minimumMass = value;\n    },\n  },\n  /**\n   * Sets the maximum mass of particles in kilograms.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  maximumMass: {\n    get: function () {\n      return this._maximumMass;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._maximumMass = value;\n    },\n  },\n  /**\n   * Sets the minimum bound, width by height, above which to randomly scale the particle image's dimensions in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {Cartesian2}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  minimumImageSize: {\n    get: function () {\n      return this._minimumImageSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0);\n      //>>includeEnd('debug');\n      this._minimumImageSize = value;\n    },\n  },\n  /**\n   * Sets the maximum bound, width by height, below which to randomly scale the particle image's dimensions in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {Cartesian2}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  maximumImageSize: {\n    get: function () {\n      return this._maximumImageSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.object(\"value\", value);\n      Check.typeOf.number.greaterThanOrEquals(\"value.x\", value.x, 0.0);\n      Check.typeOf.number.greaterThanOrEquals(\"value.y\", value.y, 0.0);\n      //>>includeEnd('debug');\n      this._maximumImageSize = value;\n    },\n  },\n  /**\n   * Gets or sets if the particle size is in meters or pixels. <code>true</code> to size particles in meters; otherwise, the size is in pixels.\n   * @memberof ParticleSystem.prototype\n   * @type {boolean}\n   * @default false\n   */\n  sizeInMeters: {\n    get: function () {\n      return this._sizeInMeters;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"value\", value);\n      //>>includeEnd('debug');\n      this._sizeInMeters = value;\n    },\n  },\n  /**\n   * How long the particle system will emit particles, in seconds.\n   * @memberof ParticleSystem.prototype\n   * @type {number}\n   * @default Number.MAX_VALUE\n   */\n  lifetime: {\n    get: function () {\n      return this._lifetime;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._lifetime = value;\n    },\n  },\n  /**\n   * Fires an event when the particle system has reached the end of its lifetime.\n   * @memberof ParticleSystem.prototype\n   * @type {Event}\n   */\n  complete: {\n    get: function () {\n      return this._complete;\n    },\n  },\n  /**\n   * When <code>true</code>, the particle system has reached the end of its lifetime; <code>false</code> otherwise.\n   * @memberof ParticleSystem.prototype\n   * @type {boolean}\n   */\n  isComplete: {\n    get: function () {\n      return this._isComplete;\n    },\n  },\n});\n\nfunction updateParticlePool(system) {\n  const emissionRate = system._emissionRate;\n  const life = system._maximumParticleLife;\n\n  let burstAmount = 0;\n  const bursts = system._bursts;\n  if (defined(bursts)) {\n    const length = bursts.length;\n    for (let i = 0; i < length; ++i) {\n      burstAmount += bursts[i].maximum;\n    }\n  }\n\n  const billboardCollection = system._billboardCollection;\n  const image = system.image;\n\n  const particleEstimate = Math.ceil(emissionRate * life + burstAmount);\n  const particles = system._particles;\n  const particlePool = system._particlePool;\n  const numToAdd = Math.max(\n    particleEstimate - particles.length - particlePool.length,\n    0,\n  );\n\n  for (let j = 0; j < numToAdd; ++j) {\n    const particle = new Particle();\n    particle._billboard = billboardCollection.add({\n      image: image,\n      // Make the newly added billboards invisible when updating the particle pool\n      // to prevent the billboards from being displayed when the particles\n      // are not created. The billboard will always be set visible in\n      // updateBillboard function when its corresponding particle update.\n      show: false,\n    });\n    particlePool.push(particle);\n  }\n\n  system._particleEstimate = particleEstimate;\n}\n\nfunction getOrCreateParticle(system) {\n  // Try to reuse an existing particle from the pool.\n  let particle = system._particlePool.pop();\n  if (!defined(particle)) {\n    // Create a new one\n    particle = new Particle();\n  }\n  return particle;\n}\n\nfunction addParticleToPool(system, particle) {\n  system._particlePool.push(particle);\n}\n\nfunction freeParticlePool(system) {\n  const particles = system._particles;\n  const particlePool = system._particlePool;\n  const billboardCollection = system._billboardCollection;\n\n  const numParticles = particles.length;\n  const numInPool = particlePool.length;\n  const estimate = system._particleEstimate;\n\n  const start = numInPool - Math.max(estimate - numParticles - numInPool, 0);\n  for (let i = start; i < numInPool; ++i) {\n    const p = particlePool[i];\n    billboardCollection.remove(p._billboard);\n  }\n  particlePool.length = start;\n}\n\nfunction removeBillboard(particle) {\n  if (defined(particle._billboard)) {\n    particle._billboard.show = false;\n  }\n}\n\nfunction updateBillboard(system, particle) {\n  let billboard = particle._billboard;\n  if (!defined(billboard)) {\n    billboard = particle._billboard = system._billboardCollection.add({\n      image: particle.image,\n    });\n  }\n  billboard.width = particle.imageSize.x;\n  billboard.height = particle.imageSize.y;\n  billboard.position = particle.position;\n  billboard.sizeInMeters = system.sizeInMeters;\n  billboard.show = true;\n\n  // Update the color\n  const r = CesiumMath.lerp(\n    particle.startColor.red,\n    particle.endColor.red,\n    particle.normalizedAge,\n  );\n  const g = CesiumMath.lerp(\n    particle.startColor.green,\n    particle.endColor.green,\n    particle.normalizedAge,\n  );\n  const b = CesiumMath.lerp(\n    particle.startColor.blue,\n    particle.endColor.blue,\n    particle.normalizedAge,\n  );\n  const a = CesiumMath.lerp(\n    particle.startColor.alpha,\n    particle.endColor.alpha,\n    particle.normalizedAge,\n  );\n  billboard.color = new Color(r, g, b, a);\n\n  // Update the scale\n  billboard.scale = CesiumMath.lerp(\n    particle.startScale,\n    particle.endScale,\n    particle.normalizedAge,\n  );\n}\n\nfunction addParticle(system, particle) {\n  particle.startColor = Color.clone(system._startColor, particle.startColor);\n  particle.endColor = Color.clone(system._endColor, particle.endColor);\n  particle.startScale = system._startScale;\n  particle.endScale = system._endScale;\n  particle.image = system.image;\n  particle.life = CesiumMath.randomBetween(\n    system._minimumParticleLife,\n    system._maximumParticleLife,\n  );\n  particle.mass = CesiumMath.randomBetween(\n    system._minimumMass,\n    system._maximumMass,\n  );\n  particle.imageSize.x = CesiumMath.randomBetween(\n    system._minimumImageSize.x,\n    system._maximumImageSize.x,\n  );\n  particle.imageSize.y = CesiumMath.randomBetween(\n    system._minimumImageSize.y,\n    system._maximumImageSize.y,\n  );\n\n  // Reset the normalizedAge and age in case the particle was reused.\n  particle._normalizedAge = 0.0;\n  particle._age = 0.0;\n\n  const speed = CesiumMath.randomBetween(\n    system._minimumSpeed,\n    system._maximumSpeed,\n  );\n  Cartesian3.multiplyByScalar(particle.velocity, speed, particle.velocity);\n\n  system._particles.push(particle);\n}\n\nfunction calculateNumberToEmit(system, dt) {\n  // This emitter is finished if it exceeds it's lifetime.\n  if (system._isComplete) {\n    return 0;\n  }\n\n  dt = CesiumMath.mod(dt, system._lifetime);\n\n  // Compute the number of particles to emit based on the emissionRate.\n  const v = dt * system._emissionRate;\n  let numToEmit = Math.floor(v);\n  system._carryOver += v - numToEmit;\n  if (system._carryOver > 1.0) {\n    numToEmit++;\n    system._carryOver -= 1.0;\n  }\n\n  // Apply any bursts\n  if (defined(system.bursts)) {\n    const length = system.bursts.length;\n    for (let i = 0; i < length; i++) {\n      const burst = system.bursts[i];\n      const currentTime = system._currentTime;\n      if (defined(burst) && !burst._complete && currentTime > burst.time) {\n        numToEmit += CesiumMath.randomBetween(burst.minimum, burst.maximum);\n        burst._complete = true;\n      }\n    }\n  }\n\n  return numToEmit;\n}\n\nconst rotatedVelocityScratch = new Cartesian3();\n\n/**\n * @private\n */\nParticleSystem.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  if (!defined(this._billboardCollection)) {\n    this._billboardCollection = new BillboardCollection();\n  }\n\n  if (this._updateParticlePool) {\n    updateParticlePool(this);\n    this._updateParticlePool = false;\n  }\n\n  // Compute the frame time\n  let dt = 0.0;\n  if (this._previousTime) {\n    dt = JulianDate.secondsDifference(frameState.time, this._previousTime);\n  }\n\n  if (dt < 0.0) {\n    dt = 0.0;\n  }\n\n  const particles = this._particles;\n  const emitter = this._emitter;\n  const updateCallback = this.updateCallback;\n\n  let i;\n  let particle;\n\n  // update particles and remove dead particles\n  let length = particles.length;\n  for (i = 0; i < length; ++i) {\n    particle = particles[i];\n    if (!particle.update(dt, updateCallback)) {\n      removeBillboard(particle);\n      // Add the particle back to the pool so it can be reused.\n      addParticleToPool(this, particle);\n      particles[i] = particles[length - 1];\n      --i;\n      --length;\n    } else {\n      updateBillboard(this, particle);\n    }\n  }\n  particles.length = length;\n\n  const numToEmit = calculateNumberToEmit(this, dt);\n\n  if (numToEmit > 0 && defined(emitter)) {\n    // Compute the final model matrix by combining the particle systems model matrix and the emitter matrix.\n    if (this._matrixDirty) {\n      this._combinedMatrix = Matrix4.multiply(\n        this.modelMatrix,\n        this.emitterModelMatrix,\n        this._combinedMatrix,\n      );\n      this._matrixDirty = false;\n    }\n\n    const combinedMatrix = this._combinedMatrix;\n\n    for (i = 0; i < numToEmit; i++) {\n      // Create a new particle.\n      particle = getOrCreateParticle(this);\n\n      // Let the emitter initialize the particle.\n      this._emitter.emit(particle);\n\n      //For the velocity we need to add it to the original position and then multiply by point.\n      Cartesian3.add(\n        particle.position,\n        particle.velocity,\n        rotatedVelocityScratch,\n      );\n      Matrix4.multiplyByPoint(\n        combinedMatrix,\n        rotatedVelocityScratch,\n        rotatedVelocityScratch,\n      );\n\n      // Change the position to be in world coordinates\n      particle.position = Matrix4.multiplyByPoint(\n        combinedMatrix,\n        particle.position,\n        particle.position,\n      );\n\n      // Orient the velocity in world space as well.\n      Cartesian3.subtract(\n        rotatedVelocityScratch,\n        particle.position,\n        particle.velocity,\n      );\n      Cartesian3.normalize(particle.velocity, particle.velocity);\n\n      // Add the particle to the system.\n      addParticle(this, particle);\n      updateBillboard(this, particle);\n    }\n  }\n\n  this._billboardCollection.update(frameState);\n  this._previousTime = JulianDate.clone(frameState.time, this._previousTime);\n  this._currentTime += dt;\n\n  if (\n    this._lifetime !== Number.MAX_VALUE &&\n    this._currentTime > this._lifetime\n  ) {\n    if (this.loop) {\n      this._currentTime = CesiumMath.mod(this._currentTime, this._lifetime);\n      if (this.bursts) {\n        const burstLength = this.bursts.length;\n        // Reset any bursts\n        for (i = 0; i < burstLength; i++) {\n          this.bursts[i]._complete = false;\n        }\n      }\n    } else {\n      this._isComplete = true;\n      this._complete.raiseEvent(this);\n    }\n  }\n\n  // free particles in the pool and release billboard GPU memory\n  if (frameState.frameNumber % 120 === 0) {\n    freeParticlePool(this);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ParticleSystem#destroy\n */\nParticleSystem.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see ParticleSystem#isDestroyed\n */\nParticleSystem.prototype.destroy = function () {\n  this._billboardCollection =\n    this._billboardCollection && this._billboardCollection.destroy();\n  return destroyObject(this);\n};\n\n/**\n * A function used to modify attributes of the particle at each time step. This can include force modifications,\n * color, sizing, etc.\n *\n * @callback ParticleSystem.updateCallback\n *\n * @param {Particle} particle The particle being updated.\n * @param {number} dt The time in seconds since the last update.\n *\n * @example\n * function applyGravity(particle, dt) {\n *    const position = particle.position;\n *    const gravityVector = Cesium.Cartesian3.normalize(position, new Cesium.Cartesian3());\n *    Cesium.Cartesian3.multiplyByScalar(gravityVector, GRAVITATIONAL_CONSTANT * dt, gravityVector);\n *    particle.velocity = Cesium.Cartesian3.add(particle.velocity, gravityVector, particle.velocity);\n * }\n */\nexport default ParticleSystem;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}