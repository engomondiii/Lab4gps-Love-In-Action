{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Merges two objects, copying their properties onto a new combined object. When two objects have the same\n * property, the value of the property on the first object is used.  If either object is undefined,\n * it will be treated as an empty object.\n *\n * @example\n * const object1 = {\n *     propOne : 1,\n *     propTwo : {\n *         value1 : 10\n *     }\n * }\n * const object2 = {\n *     propTwo : 2\n * }\n * const final = Cesium.combine(object1, object2);\n *\n * // final === {\n * //     propOne : 1,\n * //     propTwo : {\n * //         value1 : 10\n * //     }\n * // }\n *\n * @param {object} [object1] The first object to merge.\n * @param {object} [object2] The second object to merge.\n * @param {boolean} [deep=false] Perform a recursive merge.\n * @returns {object} The combined object containing all properties from both objects.\n *\n * @function\n */\nfunction combine(object1, object2, deep) {\n  deep = defaultValue(deep, false);\n  const result = {};\n  const object1Defined = defined(object1);\n  const object2Defined = defined(object2);\n  let property;\n  let object1Value;\n  let object2Value;\n  if (object1Defined) {\n    for (property in object1) {\n      if (object1.hasOwnProperty(property)) {\n        object1Value = object1[property];\n        if (object2Defined && deep && typeof object1Value === \"object\" && object2.hasOwnProperty(property)) {\n          object2Value = object2[property];\n          if (typeof object2Value === \"object\") {\n            result[property] = combine(object1Value, object2Value, deep);\n          } else {\n            result[property] = object1Value;\n          }\n        } else {\n          result[property] = object1Value;\n        }\n      }\n    }\n  }\n  if (object2Defined) {\n    for (property in object2) {\n      if (object2.hasOwnProperty(property) && !result.hasOwnProperty(property)) {\n        object2Value = object2[property];\n        result[property] = object2Value;\n      }\n    }\n  }\n  return result;\n}\nexport default combine;","map":{"version":3,"names":["defaultValue","defined","combine","object1","object2","deep","result","object1Defined","object2Defined","property","object1Value","object2Value","hasOwnProperty"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/combine.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Merges two objects, copying their properties onto a new combined object. When two objects have the same\n * property, the value of the property on the first object is used.  If either object is undefined,\n * it will be treated as an empty object.\n *\n * @example\n * const object1 = {\n *     propOne : 1,\n *     propTwo : {\n *         value1 : 10\n *     }\n * }\n * const object2 = {\n *     propTwo : 2\n * }\n * const final = Cesium.combine(object1, object2);\n *\n * // final === {\n * //     propOne : 1,\n * //     propTwo : {\n * //         value1 : 10\n * //     }\n * // }\n *\n * @param {object} [object1] The first object to merge.\n * @param {object} [object2] The second object to merge.\n * @param {boolean} [deep=false] Perform a recursive merge.\n * @returns {object} The combined object containing all properties from both objects.\n *\n * @function\n */\nfunction combine(object1, object2, deep) {\n  deep = defaultValue(deep, false);\n\n  const result = {};\n\n  const object1Defined = defined(object1);\n  const object2Defined = defined(object2);\n  let property;\n  let object1Value;\n  let object2Value;\n  if (object1Defined) {\n    for (property in object1) {\n      if (object1.hasOwnProperty(property)) {\n        object1Value = object1[property];\n        if (\n          object2Defined &&\n          deep &&\n          typeof object1Value === \"object\" &&\n          object2.hasOwnProperty(property)\n        ) {\n          object2Value = object2[property];\n          if (typeof object2Value === \"object\") {\n            result[property] = combine(object1Value, object2Value, deep);\n          } else {\n            result[property] = object1Value;\n          }\n        } else {\n          result[property] = object1Value;\n        }\n      }\n    }\n  }\n  if (object2Defined) {\n    for (property in object2) {\n      if (\n        object2.hasOwnProperty(property) &&\n        !result.hasOwnProperty(property)\n      ) {\n        object2Value = object2[property];\n        result[property] = object2Value;\n      }\n    }\n  }\n  return result;\n}\nexport default combine;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAE;EACvCA,IAAI,GAAGL,YAAY,CAACK,IAAI,EAAE,KAAK,CAAC;EAEhC,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,MAAMC,cAAc,GAAGN,OAAO,CAACE,OAAO,CAAC;EACvC,MAAMK,cAAc,GAAGP,OAAO,CAACG,OAAO,CAAC;EACvC,IAAIK,QAAQ;EACZ,IAAIC,YAAY;EAChB,IAAIC,YAAY;EAChB,IAAIJ,cAAc,EAAE;IAClB,KAAKE,QAAQ,IAAIN,OAAO,EAAE;MACxB,IAAIA,OAAO,CAACS,cAAc,CAACH,QAAQ,CAAC,EAAE;QACpCC,YAAY,GAAGP,OAAO,CAACM,QAAQ,CAAC;QAChC,IACED,cAAc,IACdH,IAAI,IACJ,OAAOK,YAAY,KAAK,QAAQ,IAChCN,OAAO,CAACQ,cAAc,CAACH,QAAQ,CAAC,EAChC;UACAE,YAAY,GAAGP,OAAO,CAACK,QAAQ,CAAC;UAChC,IAAI,OAAOE,YAAY,KAAK,QAAQ,EAAE;YACpCL,MAAM,CAACG,QAAQ,CAAC,GAAGP,OAAO,CAACQ,YAAY,EAAEC,YAAY,EAAEN,IAAI,CAAC;UAC9D,CAAC,MAAM;YACLC,MAAM,CAACG,QAAQ,CAAC,GAAGC,YAAY;UACjC;QACF,CAAC,MAAM;UACLJ,MAAM,CAACG,QAAQ,CAAC,GAAGC,YAAY;QACjC;MACF;IACF;EACF;EACA,IAAIF,cAAc,EAAE;IAClB,KAAKC,QAAQ,IAAIL,OAAO,EAAE;MACxB,IACEA,OAAO,CAACQ,cAAc,CAACH,QAAQ,CAAC,IAChC,CAACH,MAAM,CAACM,cAAc,CAACH,QAAQ,CAAC,EAChC;QACAE,YAAY,GAAGP,OAAO,CAACK,QAAQ,CAAC;QAChCH,MAAM,CAACG,QAAQ,CAAC,GAAGE,YAAY;MACjC;IACF;EACF;EACA,OAAOL,MAAM;AACf;AACA,eAAeJ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}