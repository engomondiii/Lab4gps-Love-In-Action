{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport MetadataClassProperty from \"./MetadataClassProperty.js\";\n\n/**\n * A metadata class.\n *\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Metadata|3D Metadata Specification} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.id The ID of the class.\n * @param {string} [options.name] The name of the class.\n * @param {string} [options.description] The description of the class.\n * @param {Object<string, MetadataClassProperty>} [options.properties] The class properties, where each key is the property ID.\n * @param {*} [options.extras] Extra user-defined properties.\n * @param {object} [options.extensions] An object containing extensions.\n *\n * @alias MetadataClass\n * @constructor\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction MetadataClass(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const id = options.id;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"options.id\", id);\n  //>>includeEnd('debug');\n\n  const properties = defaultValue(options.properties, {});\n  const propertiesBySemantic = {};\n  for (const propertyId in properties) {\n    if (properties.hasOwnProperty(propertyId)) {\n      const property = properties[propertyId];\n      if (defined(property.semantic)) {\n        propertiesBySemantic[property.semantic] = property;\n      }\n    }\n  }\n  this._id = id;\n  this._name = options.name;\n  this._description = options.description;\n  this._properties = properties;\n  this._propertiesBySemantic = propertiesBySemantic;\n  this._extras = clone(options.extras, true);\n  this._extensions = clone(options.extensions, true);\n}\n\n/**\n * Creates a {@link MetadataClass} from either 3D Tiles 1.1, 3DTILES_metadata, EXT_structural_metadata, or EXT_feature_metadata.\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.id The ID of the class.\n * @param {object} options.class The class JSON object.\n * @param {Object<string, MetadataEnum>} [options.enums] A dictionary of enums.\n *\n * @returns {MetadataClass} The newly created metadata class.\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nMetadataClass.fromJson = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const id = options.id;\n  const classDefinition = options.class;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"options.id\", id);\n  Check.typeOf.object(\"options.class\", classDefinition);\n  //>>includeEnd('debug');\n\n  const properties = {};\n  for (const propertyId in classDefinition.properties) {\n    if (classDefinition.properties.hasOwnProperty(propertyId)) {\n      const property = MetadataClassProperty.fromJson({\n        id: propertyId,\n        property: classDefinition.properties[propertyId],\n        enums: options.enums\n      });\n      properties[propertyId] = property;\n    }\n  }\n  return new MetadataClass({\n    id: id,\n    name: classDefinition.name,\n    description: classDefinition.description,\n    properties: properties,\n    extras: classDefinition.extras,\n    extensions: classDefinition.extensions\n  });\n};\nObject.defineProperties(MetadataClass.prototype, {\n  /**\n   * The class properties.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {Object<string, MetadataClassProperty>}\n   * @readonly\n   */\n  properties: {\n    get: function () {\n      return this._properties;\n    }\n  },\n  /**\n   * A dictionary mapping semantics to class properties.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {Object<string, MetadataClassProperty>}\n   * @readonly\n   *\n   * @private\n   */\n  propertiesBySemantic: {\n    get: function () {\n      return this._propertiesBySemantic;\n    }\n  },\n  /**\n   * The ID of the class.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {string}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n  /**\n   * The name of the class.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {string}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    }\n  },\n  /**\n   * The description of the class.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {string}\n   * @readonly\n   */\n  description: {\n    get: function () {\n      return this._description;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {*}\n   * @readonly\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {object}\n   * @readonly\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\n\n/**\n * The class name given to the metadata class when a batch\n * table is loaded from 3D Tiles 1.0 formats.\n *\n * @private\n */\nMetadataClass.BATCH_TABLE_CLASS_NAME = \"_batchTable\";\nexport default MetadataClass;","map":{"version":3,"names":["Check","clone","defaultValue","defined","MetadataClassProperty","MetadataClass","options","EMPTY_OBJECT","id","typeOf","string","properties","propertiesBySemantic","propertyId","hasOwnProperty","property","semantic","_id","_name","name","_description","description","_properties","_propertiesBySemantic","_extras","extras","_extensions","extensions","fromJson","classDefinition","class","object","enums","Object","defineProperties","prototype","get","BATCH_TABLE_CLASS_NAME"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/MetadataClass.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport MetadataClassProperty from \"./MetadataClassProperty.js\";\n\n/**\n * A metadata class.\n *\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Metadata|3D Metadata Specification} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.id The ID of the class.\n * @param {string} [options.name] The name of the class.\n * @param {string} [options.description] The description of the class.\n * @param {Object<string, MetadataClassProperty>} [options.properties] The class properties, where each key is the property ID.\n * @param {*} [options.extras] Extra user-defined properties.\n * @param {object} [options.extensions] An object containing extensions.\n *\n * @alias MetadataClass\n * @constructor\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction MetadataClass(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const id = options.id;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"options.id\", id);\n  //>>includeEnd('debug');\n\n  const properties = defaultValue(options.properties, {});\n  const propertiesBySemantic = {};\n  for (const propertyId in properties) {\n    if (properties.hasOwnProperty(propertyId)) {\n      const property = properties[propertyId];\n      if (defined(property.semantic)) {\n        propertiesBySemantic[property.semantic] = property;\n      }\n    }\n  }\n\n  this._id = id;\n  this._name = options.name;\n  this._description = options.description;\n  this._properties = properties;\n  this._propertiesBySemantic = propertiesBySemantic;\n  this._extras = clone(options.extras, true);\n  this._extensions = clone(options.extensions, true);\n}\n\n/**\n * Creates a {@link MetadataClass} from either 3D Tiles 1.1, 3DTILES_metadata, EXT_structural_metadata, or EXT_feature_metadata.\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.id The ID of the class.\n * @param {object} options.class The class JSON object.\n * @param {Object<string, MetadataEnum>} [options.enums] A dictionary of enums.\n *\n * @returns {MetadataClass} The newly created metadata class.\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nMetadataClass.fromJson = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const id = options.id;\n  const classDefinition = options.class;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"options.id\", id);\n  Check.typeOf.object(\"options.class\", classDefinition);\n  //>>includeEnd('debug');\n\n  const properties = {};\n  for (const propertyId in classDefinition.properties) {\n    if (classDefinition.properties.hasOwnProperty(propertyId)) {\n      const property = MetadataClassProperty.fromJson({\n        id: propertyId,\n        property: classDefinition.properties[propertyId],\n        enums: options.enums,\n      });\n      properties[propertyId] = property;\n    }\n  }\n\n  return new MetadataClass({\n    id: id,\n    name: classDefinition.name,\n    description: classDefinition.description,\n    properties: properties,\n    extras: classDefinition.extras,\n    extensions: classDefinition.extensions,\n  });\n};\n\nObject.defineProperties(MetadataClass.prototype, {\n  /**\n   * The class properties.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {Object<string, MetadataClassProperty>}\n   * @readonly\n   */\n  properties: {\n    get: function () {\n      return this._properties;\n    },\n  },\n\n  /**\n   * A dictionary mapping semantics to class properties.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {Object<string, MetadataClassProperty>}\n   * @readonly\n   *\n   * @private\n   */\n  propertiesBySemantic: {\n    get: function () {\n      return this._propertiesBySemantic;\n    },\n  },\n\n  /**\n   * The ID of the class.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {string}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * The name of the class.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {string}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * The description of the class.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {string}\n   * @readonly\n   */\n  description: {\n    get: function () {\n      return this._description;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {*}\n   * @readonly\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof MetadataClass.prototype\n   * @type {object}\n   * @readonly\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\n/**\n * The class name given to the metadata class when a batch\n * table is loaded from 3D Tiles 1.0 formats.\n *\n * @private\n */\nMetadataClass.BATCH_TABLE_CLASS_NAME = \"_batchTable\";\n\nexport default MetadataClass;\n"],"mappings":"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Cf,OAAO,IAAI,CAACb,qBAAqB;IACnC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEf,EAAE,EAAE;IACF4B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnB,GAAG;IACjB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,IAAI,EAAE;IACJiB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAClB,KAAK;IACnB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,WAAW,EAAE;IACXe,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAChB,YAAY;IAC1B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,MAAM,EAAE;IACNW,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACZ,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,UAAU,EAAE;IACVS,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACV,WAAW;IACzB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACArB,aAAa,CAACgC,sBAAsB,GAAG,aAAa;AAEpD,eAAehC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}