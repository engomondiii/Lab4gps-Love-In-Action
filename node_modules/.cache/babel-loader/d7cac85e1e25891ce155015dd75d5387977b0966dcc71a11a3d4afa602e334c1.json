{"ast":null,"code":"/**\n * A queue that can enqueue items at the end, and dequeue items from the front.\n *\n * @alias Queue\n * @constructor\n */\nfunction Queue() {\n  this._array = [];\n  this._offset = 0;\n  this._length = 0;\n}\nObject.defineProperties(Queue.prototype, {\n  /**\n   * The length of the queue.\n   *\n   * @memberof Queue.prototype\n   *\n   * @type {number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    }\n  }\n});\n\n/**\n * Enqueues the specified item.\n *\n * @param {*} item The item to enqueue.\n */\nQueue.prototype.enqueue = function (item) {\n  this._array.push(item);\n  this._length++;\n};\n\n/**\n * Dequeues an item.  Returns undefined if the queue is empty.\n *\n * @returns {*} The the dequeued item.\n */\nQueue.prototype.dequeue = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n  const array = this._array;\n  let offset = this._offset;\n  const item = array[offset];\n  array[offset] = undefined;\n  offset++;\n  if (offset > 10 && offset * 2 > array.length) {\n    //compact array\n    this._array = array.slice(offset);\n    offset = 0;\n  }\n  this._offset = offset;\n  this._length--;\n  return item;\n};\n\n/**\n * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\n *\n * @returns {*} The item at the front of the queue.\n */\nQueue.prototype.peek = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n  return this._array[this._offset];\n};\n\n/**\n * Check whether this queue contains the specified item.\n *\n * @param {*} item The item to search for.\n */\nQueue.prototype.contains = function (item) {\n  return this._array.indexOf(item) !== -1;\n};\n\n/**\n * Remove all items from the queue.\n */\nQueue.prototype.clear = function () {\n  this._array.length = this._offset = this._length = 0;\n};\n\n/**\n * Sort the items in the queue in-place.\n *\n * @param {Queue.Comparator} compareFunction A function that defines the sort order.\n */\nQueue.prototype.sort = function (compareFunction) {\n  if (this._offset > 0) {\n    //compact array\n    this._array = this._array.slice(this._offset);\n    this._offset = 0;\n  }\n  this._array.sort(compareFunction);\n};\n\n/**\n * A function used to compare two items while sorting a queue.\n * @callback Queue.Comparator\n *\n * @param {*} a An item in the array.\n * @param {*} b An item in the array.\n * @returns {number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b) {\n *     return a - b;\n * }\n */\nexport default Queue;","map":{"version":3,"names":["Queue","_array","_offset","_length","Object","defineProperties","prototype","length","get","enqueue","item","push","dequeue","undefined","array","offset","slice","peek","contains","indexOf","clear","sort","compareFunction"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/Queue.js"],"sourcesContent":["/**\n * A queue that can enqueue items at the end, and dequeue items from the front.\n *\n * @alias Queue\n * @constructor\n */\nfunction Queue() {\n  this._array = [];\n  this._offset = 0;\n  this._length = 0;\n}\n\nObject.defineProperties(Queue.prototype, {\n  /**\n   * The length of the queue.\n   *\n   * @memberof Queue.prototype\n   *\n   * @type {number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n  },\n});\n\n/**\n * Enqueues the specified item.\n *\n * @param {*} item The item to enqueue.\n */\nQueue.prototype.enqueue = function (item) {\n  this._array.push(item);\n  this._length++;\n};\n\n/**\n * Dequeues an item.  Returns undefined if the queue is empty.\n *\n * @returns {*} The the dequeued item.\n */\nQueue.prototype.dequeue = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  const array = this._array;\n  let offset = this._offset;\n  const item = array[offset];\n  array[offset] = undefined;\n\n  offset++;\n  if (offset > 10 && offset * 2 > array.length) {\n    //compact array\n    this._array = array.slice(offset);\n    offset = 0;\n  }\n\n  this._offset = offset;\n  this._length--;\n\n  return item;\n};\n\n/**\n * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\n *\n * @returns {*} The item at the front of the queue.\n */\nQueue.prototype.peek = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  return this._array[this._offset];\n};\n\n/**\n * Check whether this queue contains the specified item.\n *\n * @param {*} item The item to search for.\n */\nQueue.prototype.contains = function (item) {\n  return this._array.indexOf(item) !== -1;\n};\n\n/**\n * Remove all items from the queue.\n */\nQueue.prototype.clear = function () {\n  this._array.length = this._offset = this._length = 0;\n};\n\n/**\n * Sort the items in the queue in-place.\n *\n * @param {Queue.Comparator} compareFunction A function that defines the sort order.\n */\nQueue.prototype.sort = function (compareFunction) {\n  if (this._offset > 0) {\n    //compact array\n    this._array = this._array.slice(this._offset);\n    this._offset = 0;\n  }\n\n  this._array.sort(compareFunction);\n};\n\n/**\n * A function used to compare two items while sorting a queue.\n * @callback Queue.Comparator\n *\n * @param {*} a An item in the array.\n * @param {*} b An item in the array.\n * @returns {number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b) {\n *     return a - b;\n * }\n */\nexport default Queue;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAKA,CAAA,EAAG;EACf,IAAI,CAACC,MAAM,GAAG,EAAE;EAChB,IAAI,CAACC,OAAO,GAAG,CAAC;EAChB,IAAI,CAACC,OAAO,GAAG,CAAC;AAClB;AAEAC,MAAM,CAACC,gBAAgB,CAACL,KAAK,CAACM,SAAS,EAAE;EACvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAM,EAAE;IACNC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACL,OAAO;IACrB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACAH,KAAK,CAACM,SAAS,CAACG,OAAO,GAAG,UAAUC,IAAI,EAAE;EACxC,IAAI,CAACT,MAAM,CAACU,IAAI,CAACD,IAAI,CAAC;EACtB,IAAI,CAACP,OAAO,EAAE;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAH,KAAK,CAACM,SAAS,CAACM,OAAO,GAAG,YAAY;EACpC,IAAI,IAAI,CAACT,OAAO,KAAK,CAAC,EAAE;IACtB,OAAOU,SAAS;EAClB;EAEA,MAAMC,KAAK,GAAG,IAAI,CAACb,MAAM;EACzB,IAAIc,MAAM,GAAG,IAAI,CAACb,OAAO;EACzB,MAAMQ,IAAI,GAAGI,KAAK,CAACC,MAAM,CAAC;EAC1BD,KAAK,CAACC,MAAM,CAAC,GAAGF,SAAS;EAEzBE,MAAM,EAAE;EACR,IAAIA,MAAM,GAAG,EAAE,IAAIA,MAAM,GAAG,CAAC,GAAGD,KAAK,CAACP,MAAM,EAAE;IAC5C;IACA,IAAI,CAACN,MAAM,GAAGa,KAAK,CAACE,KAAK,CAACD,MAAM,CAAC;IACjCA,MAAM,GAAG,CAAC;EACZ;EAEA,IAAI,CAACb,OAAO,GAAGa,MAAM;EACrB,IAAI,CAACZ,OAAO,EAAE;EAEd,OAAOO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAV,KAAK,CAACM,SAAS,CAACW,IAAI,GAAG,YAAY;EACjC,IAAI,IAAI,CAACd,OAAO,KAAK,CAAC,EAAE;IACtB,OAAOU,SAAS;EAClB;EAEA,OAAO,IAAI,CAACZ,MAAM,CAAC,IAAI,CAACC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAF,KAAK,CAACM,SAAS,CAACY,QAAQ,GAAG,UAAUR,IAAI,EAAE;EACzC,OAAO,IAAI,CAACT,MAAM,CAACkB,OAAO,CAACT,IAAI,CAAC,KAAK,CAAC,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACAV,KAAK,CAACM,SAAS,CAACc,KAAK,GAAG,YAAY;EAClC,IAAI,CAACnB,MAAM,CAACM,MAAM,GAAG,IAAI,CAACL,OAAO,GAAG,IAAI,CAACC,OAAO,GAAG,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAH,KAAK,CAACM,SAAS,CAACe,IAAI,GAAG,UAAUC,eAAe,EAAE;EAChD,IAAI,IAAI,CAACpB,OAAO,GAAG,CAAC,EAAE;IACpB;IACA,IAAI,CAACD,MAAM,GAAG,IAAI,CAACA,MAAM,CAACe,KAAK,CAAC,IAAI,CAACd,OAAO,CAAC;IAC7C,IAAI,CAACA,OAAO,GAAG,CAAC;EAClB;EAEA,IAAI,CAACD,MAAM,CAACoB,IAAI,CAACC,eAAe,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAetB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}