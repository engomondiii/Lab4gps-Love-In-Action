{"ast":null,"code":"import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\n/**\n * @typedef {object} GoogleEarthEnterpriseMapsProvider.ConstructorOptions\n *\n * Initialization options for the GoogleEarthEnterpriseMapsProvider constructor\n *\n * @property {number} channel The channel (id) to be used when requesting data from the server.\n *        The channel number can be found by looking at the json file located at:\n *        earth.localdomain/default_map/query?request=Json&vars=geeServerDefs The /default_map path may\n *        differ depending on your Google Earth Enterprise server configuration. Look for the \"id\" that\n *        is associated with a \"ImageryMaps\" requestType. There may be more than one id available.\n *        Example:\n *        {\n *          layers: [\n *            {\n *              id: 1002,\n *              requestType: \"ImageryMaps\"\n *            },\n *            {\n *              id: 1007,\n *              requestType: \"VectorMapsRaster\"\n *            }\n *          ]\n *        }\n * @property {string} [path=\"/default_map\"] The path of the Google Earth server hosting the imagery.\n * @property {number} [maximumLevel] The maximum level-of-detail supported by the Google Earth\n *        Enterprise server, or undefined if there is no limit.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded. To ensure that no tiles are discarded, construct and pass\n *        a {@link NeverTileDiscardPolicy} for this parameter.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid.  If not specified, the default ellipsoid is used.\n */\n\n/**\n * Used to track creation details while fetching initial metadata\n *\n * @constructor\n * @private\n *\n * @param {GoogleEarthEnterpriseMapsProvider.ConstructorOptions} options An object describing initialization options\n */\nfunction ImageryProviderBuilder(options) {\n  this.channel = options.channel;\n  this.ellipsoid = options.ellipsoid;\n  this.tilingScheme = undefined;\n  this.version = undefined;\n}\n\n/**\n * Complete GoogleEarthEnterpriseMapsProvider creation based on builder values.\n *\n * @private\n *\n * @param {GoogleEarthEnterpriseMapsProvider} provider\n */\nImageryProviderBuilder.prototype.build = function (provider) {\n  provider._channel = this.channel;\n  provider._version = this.version;\n  provider._tilingScheme = this.tilingScheme;\n};\nfunction metadataSuccess(text, imageryProviderBuilder) {\n  let data;\n\n  // The Google Earth server sends malformed JSON data currently...\n  try {\n    // First, try parsing it like normal in case a future version sends correctly formatted JSON\n    data = JSON.parse(text);\n  } catch (e) {\n    // Quote object strings manually, then try parsing again\n    data = JSON.parse(text.replace(/([\\[\\{,])[\\n\\r ]*([A-Za-z0-9]+)[\\n\\r ]*:/g, '$1\"$2\":'));\n  }\n  let layer;\n  for (let i = 0; i < data.layers.length; i++) {\n    if (data.layers[i].id === imageryProviderBuilder.channel) {\n      layer = data.layers[i];\n      break;\n    }\n  }\n  if (!defined(layer)) {\n    const message = `Could not find layer with channel (id) of ${imageryProviderBuilder.channel}.`;\n    throw new RuntimeError(message);\n  }\n  if (!defined(layer.version)) {\n    const message = `Could not find a version in channel (id) ${imageryProviderBuilder.channel}.`;\n    throw new RuntimeError(message);\n  }\n  imageryProviderBuilder.version = layer.version;\n  if (defined(data.projection) && data.projection === \"flat\") {\n    imageryProviderBuilder.tilingScheme = new GeographicTilingScheme({\n      numberOfLevelZeroTilesX: 2,\n      numberOfLevelZeroTilesY: 2,\n      rectangle: new Rectangle(-Math.PI, -Math.PI, Math.PI, Math.PI),\n      ellipsoid: imageryProviderBuilder.ellipsoid\n    });\n    // Default to mercator projection when projection is undefined\n  } else if (!defined(data.projection) || data.projection === \"mercator\") {\n    imageryProviderBuilder.tilingScheme = new WebMercatorTilingScheme({\n      numberOfLevelZeroTilesX: 2,\n      numberOfLevelZeroTilesY: 2,\n      ellipsoid: imageryProviderBuilder.ellipsoid\n    });\n  } else {\n    const message = `Unsupported projection ${data.projection}.`;\n    throw new RuntimeError(message);\n  }\n  return true;\n}\nfunction metadataFailure(error, metadataResource, provider) {\n  let message = `An error occurred while accessing ${metadataResource.url}.`;\n  if (defined(error) && defined(error.message)) {\n    message += `: ${error.message}`;\n  }\n  TileProviderError.reportError(undefined, provider, defined(provider) ? provider._errorEvent : undefined, message);\n  throw new RuntimeError(message);\n}\nasync function requestMetadata(metadataResource, imageryProviderBuilder, provider) {\n  try {\n    const text = await metadataResource.fetchText();\n    metadataSuccess(text, imageryProviderBuilder);\n  } catch (error) {\n    metadataFailure(error, metadataResource, provider);\n  }\n}\n\n/**\n * <div class=\"notice\">\n * To construct a GoogleEarthEnterpriseMapsProvider, call {@link GoogleEarthEnterpriseImageryProvider.fromUrl}. Do not call the constructor directly.\n * </div>\n *\n * Provides tiled imagery using the Google Earth Imagery API.\n *\n * Notes: This imagery provider does not work with the public Google Earth servers. It works with the\n *        Google Earth Enterprise Server.\n *\n *        By default the Google Earth Enterprise server does not set the\n *        {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing} headers. You can either\n *        use a proxy server which adds these headers, or in the /opt/google/gehttpd/conf/gehttpd.conf\n *        and add the 'Header set Access-Control-Allow-Origin \"*\"' option to the '&lt;Directory /&gt;' and\n *        '&lt;Directory \"/opt/google/gehttpd/htdocs\"&gt;' directives.\n *\n *        This provider is for use with 2D Maps API as part of Google Earth Enterprise. For 3D Earth API uses, it\n *        is necessary to use {@link GoogleEarthEnterpriseImageryProvider}\n *\n * @alias GoogleEarthEnterpriseMapsProvider\n * @constructor\n *\n * @param {GoogleEarthEnterpriseMapsProvider.ConstructorOptions} options Object describing initialization options\n *\n * @exception {RuntimeError} Could not find layer with channel (id) of <code>options.channel</code>.\n * @exception {RuntimeError} Could not find a version in channel (id) <code>options.channel</code>.\n * @exception {RuntimeError} Unsupported projection <code>data.projection</code>.\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * const google = await Cesium.GoogleEarthEnterpriseMapsProvider.fromUrl(\"https://earth.localdomain\", 1008);\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction GoogleEarthEnterpriseMapsProvider(options) {\n  options = defaultValue(options, {});\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = 1.9;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._channel = options.channel;\n  this._requestType = \"ImageryMaps\";\n  this._credit = new Credit(`<a href=\"http://www.google.com/enterprise/mapsearth/products/earthenterprise.html\"><img src=\"${GoogleEarthEnterpriseMapsProvider.logoUrl}\" title=\"Google Imagery\"/></a>`);\n  this._tilingScheme = undefined;\n  this._version = undefined;\n  this._tileWidth = 256;\n  this._tileHeight = 256;\n  this._maximumLevel = options.maximumLevel;\n  this._errorEvent = new Event();\n}\nObject.defineProperties(GoogleEarthEnterpriseMapsProvider.prototype, {\n  /**\n   * Gets the URL of the Google Earth MapServer.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._url;\n    }\n  },\n  /**\n   * Gets the url path of the data on the Google Earth server.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  path: {\n    get: function () {\n      return this._path;\n    }\n  },\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n  /**\n   * Gets the imagery channel (id) currently being used.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  channel: {\n    get: function () {\n      return this._channel;\n    }\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    }\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    }\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    }\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n  /**\n   * Gets the version of the data used by this provider.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  version: {\n    get: function () {\n      return this._version;\n    }\n  },\n  /**\n   * Gets the type of data that is being requested from the provider.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  requestType: {\n    get: function () {\n      return this._requestType;\n    }\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    }\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    }\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    }\n  }\n});\n\n/**\n * Creates a tiled imagery provider using the Google Earth Imagery API.\n *\n * @param {Resource|String} url The url of the Google Earth server hosting the imagery.\n * @param {GoogleEarthEnterpriseMapsProvider.ConstructorOptions} [options] Object describing initialization options\n * @returns {Promise<GoogleEarthEnterpriseMapsProvider>} The created GoogleEarthEnterpriseMapsProvider.\n *\n * @exception {RuntimeError} Could not find layer with channel (id) of <code>options.channel</code>.\n * @exception {RuntimeError} Could not find a version in channel (id) <code>options.channel</code>.\n * @exception {RuntimeError} Unsupported projection <code>data.projection</code>.\n *\n * @example\n * const google = await Cesium.GoogleEarthEnterpriseMapsProvider.fromUrl(\"https://earth.localdomain\", 1008);\n */\nGoogleEarthEnterpriseMapsProvider.fromUrl = async function (url, channel, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  Check.defined(\"channel\", channel);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, {});\n  const path = defaultValue(options.path, \"/default_map\");\n  const resource = Resource.createIfNeeded(url).getDerivedResource({\n    // We used to just append path to url, so now that we do proper URI resolution, removed the /\n    url: path[0] === \"/\" ? path.substring(1) : path\n  });\n  resource.appendForwardSlash();\n  const metadataResource = resource.getDerivedResource({\n    url: \"query\",\n    queryParameters: {\n      request: \"Json\",\n      vars: \"geeServerDefs\",\n      is2d: \"t\"\n    }\n  });\n  const imageryProviderBuilder = new ImageryProviderBuilder(options);\n  imageryProviderBuilder.channel = channel;\n  await requestMetadata(metadataResource, imageryProviderBuilder);\n  const provider = new GoogleEarthEnterpriseMapsProvider(options);\n  imageryProviderBuilder.build(provider);\n  provider._resource = resource;\n  provider._url = url;\n  provider._path = path;\n  return provider;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nGoogleEarthEnterpriseMapsProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nGoogleEarthEnterpriseMapsProvider.prototype.requestImage = function (x, y, level, request) {\n  const resource = this._resource.getDerivedResource({\n    url: \"query\",\n    request: request,\n    queryParameters: {\n      request: this._requestType,\n      channel: this._channel,\n      version: this._version,\n      x: x,\n      y: y,\n      z: level + 1 // Google Earth starts with a zoom level of 1, not 0\n    }\n  });\n  return ImageryProvider.loadImage(this, resource);\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nGoogleEarthEnterpriseMapsProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n};\nGoogleEarthEnterpriseMapsProvider._logoUrl = undefined;\nObject.defineProperties(GoogleEarthEnterpriseMapsProvider, {\n  /**\n   * Gets or sets the URL to the Google Earth logo for display in the credit.\n   * @memberof GoogleEarthEnterpriseMapsProvider\n   * @type {string}\n   */\n  logoUrl: {\n    get: function () {\n      if (!defined(GoogleEarthEnterpriseMapsProvider._logoUrl)) {\n        GoogleEarthEnterpriseMapsProvider._logoUrl = buildModuleUrl(\"Assets/Images/google_earth_credit.png\");\n      }\n      return GoogleEarthEnterpriseMapsProvider._logoUrl;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n\n      GoogleEarthEnterpriseMapsProvider._logoUrl = value;\n    }\n  }\n});\nexport default GoogleEarthEnterpriseMapsProvider;","map":{"version":3,"names":["buildModuleUrl","Check","Credit","defaultValue","defined","Event","GeographicTilingScheme","Rectangle","Resource","RuntimeError","TileProviderError","WebMercatorTilingScheme","ImageryProvider","ImageryProviderBuilder","options","channel","ellipsoid","tilingScheme","undefined","version","prototype","build","provider","_channel","_version","_tilingScheme","metadataSuccess","text","imageryProviderBuilder","data","JSON","parse","e","replace","layer","i","layers","length","id","message","projection","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","rectangle","Math","PI","metadataFailure","error","metadataResource","url","reportError","_errorEvent","requestMetadata","fetchText","GoogleEarthEnterpriseMapsProvider","_defaultAlpha","_defaultNightAlpha","_defaultDayAlpha","_defaultBrightness","_defaultContrast","_defaultHue","_defaultSaturation","_defaultGamma","_defaultMinificationFilter","_defaultMagnificationFilter","_tileDiscardPolicy","tileDiscardPolicy","_requestType","_credit","logoUrl","_tileWidth","_tileHeight","_maximumLevel","maximumLevel","Object","defineProperties","get","_url","path","_path","proxy","_resource","tileWidth","tileHeight","minimumLevel","requestType","errorEvent","credit","hasAlphaChannel","fromUrl","resource","createIfNeeded","getDerivedResource","substring","appendForwardSlash","queryParameters","request","vars","is2d","getTileCredits","x","y","level","requestImage","z","loadImage","pickFeatures","longitude","latitude","_logoUrl","set","value"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GoogleEarthEnterpriseMapsProvider.js"],"sourcesContent":["import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\n/**\n * @typedef {object} GoogleEarthEnterpriseMapsProvider.ConstructorOptions\n *\n * Initialization options for the GoogleEarthEnterpriseMapsProvider constructor\n *\n * @property {number} channel The channel (id) to be used when requesting data from the server.\n *        The channel number can be found by looking at the json file located at:\n *        earth.localdomain/default_map/query?request=Json&vars=geeServerDefs The /default_map path may\n *        differ depending on your Google Earth Enterprise server configuration. Look for the \"id\" that\n *        is associated with a \"ImageryMaps\" requestType. There may be more than one id available.\n *        Example:\n *        {\n *          layers: [\n *            {\n *              id: 1002,\n *              requestType: \"ImageryMaps\"\n *            },\n *            {\n *              id: 1007,\n *              requestType: \"VectorMapsRaster\"\n *            }\n *          ]\n *        }\n * @property {string} [path=\"/default_map\"] The path of the Google Earth server hosting the imagery.\n * @property {number} [maximumLevel] The maximum level-of-detail supported by the Google Earth\n *        Enterprise server, or undefined if there is no limit.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded. To ensure that no tiles are discarded, construct and pass\n *        a {@link NeverTileDiscardPolicy} for this parameter.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid.  If not specified, the default ellipsoid is used.\n */\n\n/**\n * Used to track creation details while fetching initial metadata\n *\n * @constructor\n * @private\n *\n * @param {GoogleEarthEnterpriseMapsProvider.ConstructorOptions} options An object describing initialization options\n */\nfunction ImageryProviderBuilder(options) {\n  this.channel = options.channel;\n  this.ellipsoid = options.ellipsoid;\n  this.tilingScheme = undefined;\n  this.version = undefined;\n}\n\n/**\n * Complete GoogleEarthEnterpriseMapsProvider creation based on builder values.\n *\n * @private\n *\n * @param {GoogleEarthEnterpriseMapsProvider} provider\n */\nImageryProviderBuilder.prototype.build = function (provider) {\n  provider._channel = this.channel;\n  provider._version = this.version;\n  provider._tilingScheme = this.tilingScheme;\n};\n\nfunction metadataSuccess(text, imageryProviderBuilder) {\n  let data;\n\n  // The Google Earth server sends malformed JSON data currently...\n  try {\n    // First, try parsing it like normal in case a future version sends correctly formatted JSON\n    data = JSON.parse(text);\n  } catch (e) {\n    // Quote object strings manually, then try parsing again\n    data = JSON.parse(\n      text.replace(/([\\[\\{,])[\\n\\r ]*([A-Za-z0-9]+)[\\n\\r ]*:/g, '$1\"$2\":'),\n    );\n  }\n\n  let layer;\n  for (let i = 0; i < data.layers.length; i++) {\n    if (data.layers[i].id === imageryProviderBuilder.channel) {\n      layer = data.layers[i];\n      break;\n    }\n  }\n\n  if (!defined(layer)) {\n    const message = `Could not find layer with channel (id) of ${imageryProviderBuilder.channel}.`;\n    throw new RuntimeError(message);\n  }\n\n  if (!defined(layer.version)) {\n    const message = `Could not find a version in channel (id) ${imageryProviderBuilder.channel}.`;\n    throw new RuntimeError(message);\n  }\n\n  imageryProviderBuilder.version = layer.version;\n\n  if (defined(data.projection) && data.projection === \"flat\") {\n    imageryProviderBuilder.tilingScheme = new GeographicTilingScheme({\n      numberOfLevelZeroTilesX: 2,\n      numberOfLevelZeroTilesY: 2,\n      rectangle: new Rectangle(-Math.PI, -Math.PI, Math.PI, Math.PI),\n      ellipsoid: imageryProviderBuilder.ellipsoid,\n    });\n    // Default to mercator projection when projection is undefined\n  } else if (!defined(data.projection) || data.projection === \"mercator\") {\n    imageryProviderBuilder.tilingScheme = new WebMercatorTilingScheme({\n      numberOfLevelZeroTilesX: 2,\n      numberOfLevelZeroTilesY: 2,\n      ellipsoid: imageryProviderBuilder.ellipsoid,\n    });\n  } else {\n    const message = `Unsupported projection ${data.projection}.`;\n    throw new RuntimeError(message);\n  }\n\n  return true;\n}\n\nfunction metadataFailure(error, metadataResource, provider) {\n  let message = `An error occurred while accessing ${metadataResource.url}.`;\n  if (defined(error) && defined(error.message)) {\n    message += `: ${error.message}`;\n  }\n\n  TileProviderError.reportError(\n    undefined,\n    provider,\n    defined(provider) ? provider._errorEvent : undefined,\n    message,\n  );\n\n  throw new RuntimeError(message);\n}\n\nasync function requestMetadata(\n  metadataResource,\n  imageryProviderBuilder,\n  provider,\n) {\n  try {\n    const text = await metadataResource.fetchText();\n    metadataSuccess(text, imageryProviderBuilder);\n  } catch (error) {\n    metadataFailure(error, metadataResource, provider);\n  }\n}\n\n/**\n * <div class=\"notice\">\n * To construct a GoogleEarthEnterpriseMapsProvider, call {@link GoogleEarthEnterpriseImageryProvider.fromUrl}. Do not call the constructor directly.\n * </div>\n *\n * Provides tiled imagery using the Google Earth Imagery API.\n *\n * Notes: This imagery provider does not work with the public Google Earth servers. It works with the\n *        Google Earth Enterprise Server.\n *\n *        By default the Google Earth Enterprise server does not set the\n *        {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing} headers. You can either\n *        use a proxy server which adds these headers, or in the /opt/google/gehttpd/conf/gehttpd.conf\n *        and add the 'Header set Access-Control-Allow-Origin \"*\"' option to the '&lt;Directory /&gt;' and\n *        '&lt;Directory \"/opt/google/gehttpd/htdocs\"&gt;' directives.\n *\n *        This provider is for use with 2D Maps API as part of Google Earth Enterprise. For 3D Earth API uses, it\n *        is necessary to use {@link GoogleEarthEnterpriseImageryProvider}\n *\n * @alias GoogleEarthEnterpriseMapsProvider\n * @constructor\n *\n * @param {GoogleEarthEnterpriseMapsProvider.ConstructorOptions} options Object describing initialization options\n *\n * @exception {RuntimeError} Could not find layer with channel (id) of <code>options.channel</code>.\n * @exception {RuntimeError} Could not find a version in channel (id) <code>options.channel</code>.\n * @exception {RuntimeError} Unsupported projection <code>data.projection</code>.\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * const google = await Cesium.GoogleEarthEnterpriseMapsProvider.fromUrl(\"https://earth.localdomain\", 1008);\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction GoogleEarthEnterpriseMapsProvider(options) {\n  options = defaultValue(options, {});\n\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = 1.9;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._channel = options.channel;\n  this._requestType = \"ImageryMaps\";\n  this._credit = new Credit(\n    `<a href=\"http://www.google.com/enterprise/mapsearth/products/earthenterprise.html\"><img src=\"${GoogleEarthEnterpriseMapsProvider.logoUrl}\" title=\"Google Imagery\"/></a>`,\n  );\n\n  this._tilingScheme = undefined;\n\n  this._version = undefined;\n\n  this._tileWidth = 256;\n  this._tileHeight = 256;\n  this._maximumLevel = options.maximumLevel;\n\n  this._errorEvent = new Event();\n}\n\nObject.defineProperties(GoogleEarthEnterpriseMapsProvider.prototype, {\n  /**\n   * Gets the URL of the Google Earth MapServer.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._url;\n    },\n  },\n\n  /**\n   * Gets the url path of the data on the Google Earth server.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  path: {\n    get: function () {\n      return this._path;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the imagery channel (id) currently being used.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  channel: {\n    get: function () {\n      return this._channel;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the version of the data used by this provider.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  version: {\n    get: function () {\n      return this._version;\n    },\n  },\n\n  /**\n   * Gets the type of data that is being requested from the provider.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  requestType: {\n    get: function () {\n      return this._requestType;\n    },\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n});\n\n/**\n * Creates a tiled imagery provider using the Google Earth Imagery API.\n *\n * @param {Resource|String} url The url of the Google Earth server hosting the imagery.\n * @param {GoogleEarthEnterpriseMapsProvider.ConstructorOptions} [options] Object describing initialization options\n * @returns {Promise<GoogleEarthEnterpriseMapsProvider>} The created GoogleEarthEnterpriseMapsProvider.\n *\n * @exception {RuntimeError} Could not find layer with channel (id) of <code>options.channel</code>.\n * @exception {RuntimeError} Could not find a version in channel (id) <code>options.channel</code>.\n * @exception {RuntimeError} Unsupported projection <code>data.projection</code>.\n *\n * @example\n * const google = await Cesium.GoogleEarthEnterpriseMapsProvider.fromUrl(\"https://earth.localdomain\", 1008);\n */\nGoogleEarthEnterpriseMapsProvider.fromUrl = async function (\n  url,\n  channel,\n  options,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  Check.defined(\"channel\", channel);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, {});\n\n  const path = defaultValue(options.path, \"/default_map\");\n\n  const resource = Resource.createIfNeeded(url).getDerivedResource({\n    // We used to just append path to url, so now that we do proper URI resolution, removed the /\n    url: path[0] === \"/\" ? path.substring(1) : path,\n  });\n\n  resource.appendForwardSlash();\n\n  const metadataResource = resource.getDerivedResource({\n    url: \"query\",\n    queryParameters: {\n      request: \"Json\",\n      vars: \"geeServerDefs\",\n      is2d: \"t\",\n    },\n  });\n\n  const imageryProviderBuilder = new ImageryProviderBuilder(options);\n  imageryProviderBuilder.channel = channel;\n  await requestMetadata(metadataResource, imageryProviderBuilder);\n\n  const provider = new GoogleEarthEnterpriseMapsProvider(options);\n  imageryProviderBuilder.build(provider);\n\n  provider._resource = resource;\n  provider._url = url;\n  provider._path = path;\n\n  return provider;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nGoogleEarthEnterpriseMapsProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level,\n) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nGoogleEarthEnterpriseMapsProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request,\n) {\n  const resource = this._resource.getDerivedResource({\n    url: \"query\",\n    request: request,\n    queryParameters: {\n      request: this._requestType,\n      channel: this._channel,\n      version: this._version,\n      x: x,\n      y: y,\n      z: level + 1, // Google Earth starts with a zoom level of 1, not 0\n    },\n  });\n\n  return ImageryProvider.loadImage(this, resource);\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nGoogleEarthEnterpriseMapsProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  return undefined;\n};\n\nGoogleEarthEnterpriseMapsProvider._logoUrl = undefined;\n\nObject.defineProperties(GoogleEarthEnterpriseMapsProvider, {\n  /**\n   * Gets or sets the URL to the Google Earth logo for display in the credit.\n   * @memberof GoogleEarthEnterpriseMapsProvider\n   * @type {string}\n   */\n  logoUrl: {\n    get: function () {\n      if (!defined(GoogleEarthEnterpriseMapsProvider._logoUrl)) {\n        GoogleEarthEnterpriseMapsProvider._logoUrl = buildModuleUrl(\n          \"Assets/Images/google_earth_credit.png\",\n        );\n      }\n      return GoogleEarthEnterpriseMapsProvider._logoUrl;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n\n      GoogleEarthEnterpriseMapsProvider._logoUrl = value;\n    },\n  },\n});\nexport default GoogleEarthEnterpriseMapsProvider;\n"],"mappings":"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AO,IAAI,CAACK,SAAS,CAACD,KAAK;IAC7B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEjE,OAAO,EAAE;IACP6D,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACrD,QAAQ;IACtB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACE2D,SAAS,EAAE;IACTN,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACN,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEa,UAAU,EAAE;IACVP,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACL,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEE,YAAY,EAAE;IACZG,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACJ,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEY,YAAY,EAAE;IACZR,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,CAAC;IACV;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACE3D,YAAY,EAAE;IACZ2D,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnD,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEN,OAAO,EAAE;IACPyD,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACpD,QAAQ;IACtB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACE6D,WAAW,EAAE;IACXT,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACT,YAAY;IAC1B;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACExB,SAAS,EAAE;IACTiC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnD,aAAa,CAACkB,SAAS;IACrC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEuB,iBAAiB,EAAE;IA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}