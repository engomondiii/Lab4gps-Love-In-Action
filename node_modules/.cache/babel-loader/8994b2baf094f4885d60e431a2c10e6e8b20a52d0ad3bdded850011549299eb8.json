{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Compute the atmosphere color, applying Rayleigh and Mie scattering. This\\n\\\n * builtin uses automatic uniforms so the atmophere settings are synced with the\\n\\\n * state of the Scene, even in other contexts like Model.\\n\\\n *\\n\\\n * @name czm_computeAtmosphereColor\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionWC Position of the fragment in world coords (low precision)\\n\\\n * @param {vec3} lightDirection Light direction from the sun or other light source.\\n\\\n * @param {vec3} rayleighColor The Rayleigh scattering color computed by a scattering function\\n\\\n * @param {vec3} mieColor The Mie scattering color computed by a scattering function\\n\\\n * @param {float} opacity The opacity computed by a scattering function.\\n\\\n */\\n\\\nvec4 czm_computeAtmosphereColor(\\n\\\n    vec3 positionWC,\\n\\\n    vec3 lightDirection,\\n\\\n    vec3 rayleighColor,\\n\\\n    vec3 mieColor,\\n\\\n    float opacity\\n\\\n) {\\n\\\n    // Setup the primary ray: from the camera position to the vertex position.\\n\\\n    vec3 cameraToPositionWC = positionWC - czm_viewerPositionWC;\\n\\\n    vec3 cameraToPositionWCDirection = normalize(cameraToPositionWC);\\n\\\n\\n\\\n    float cosAngle = dot(cameraToPositionWCDirection, lightDirection);\\n\\\n    float cosAngleSq = cosAngle * cosAngle;\\n\\\n\\n\\\n    float G = czm_atmosphereMieAnisotropy;\\n\\\n    float GSq = G * G;\\n\\\n\\n\\\n    // The Rayleigh phase function.\\n\\\n    float rayleighPhase = 3.0 / (50.2654824574) * (1.0 + cosAngleSq);\\n\\\n    // The Mie phase function.\\n\\\n    float miePhase = 3.0 / (25.1327412287) * ((1.0 - GSq) * (cosAngleSq + 1.0)) / (pow(1.0 + GSq - 2.0 * cosAngle * G, 1.5) * (2.0 + GSq));\\n\\\n\\n\\\n    // The final color is generated by combining the effects of the Rayleigh and Mie scattering.\\n\\\n    vec3 rayleigh = rayleighPhase * rayleighColor;\\n\\\n    vec3 mie = miePhase * mieColor;\\n\\\n\\n\\\n    vec3 color = (rayleigh + mie) * czm_atmosphereLightIntensity;\\n\\\n\\n\\\n    return vec4(color, opacity);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Compute the atmosphere color, applying Rayleigh and Mie scattering. This\\n\\\n * builtin uses automatic uniforms so the atmophere settings are synced with the\\n\\\n * state of the Scene, even in other contexts like Model.\\n\\\n *\\n\\\n * @name czm_computeAtmosphereColor\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {czm_ray} primaryRay Ray from the origin to sky fragment to in world coords (low precision)\\n\\\n * @param {vec3} lightDirection Light direction from the sun or other light source.\\n\\\n * @param {vec3} rayleighColor The Rayleigh scattering color computed by a scattering function\\n\\\n * @param {vec3} mieColor The Mie scattering color computed by a scattering function\\n\\\n * @param {float} opacity The opacity computed by a scattering function.\\n\\\n */\\n\\\nvec4 czm_computeAtmosphereColor(\\n\\\n    czm_ray primaryRay,\\n\\\n    vec3 lightDirection,\\n\\\n    vec3 rayleighColor,\\n\\\n    vec3 mieColor,\\n\\\n    float opacity\\n\\\n) {\\n\\\n    vec3 direction = normalize(primaryRay.direction);\\n\\\n\\n\\\n    float cosAngle = dot(direction, lightDirection);\\n\\\n    float cosAngleSq = cosAngle * cosAngle;\\n\\\n\\n\\\n    float G = czm_atmosphereMieAnisotropy;\\n\\\n    float GSq = G * G;\\n\\\n\\n\\\n    // The Rayleigh phase function.\\n\\\n    float rayleighPhase = 3.0 / (50.2654824574) * (1.0 + cosAngleSq);\\n\\\n    // The Mie phase function.\\n\\\n    float miePhase = 3.0 / (25.1327412287) * ((1.0 - GSq) * (cosAngleSq + 1.0)) / (pow(1.0 + GSq - 2.0 * cosAngle * G, 1.5) * (2.0 + GSq));\\n\\\n\\n\\\n    // The final color is generated by combining the effects of the Rayleigh and Mie scattering.\\n\\\n    vec3 rayleigh = rayleighPhase * rayleighColor;\\n\\\n    vec3 mie = miePhase * mieColor;\\n\\\n\\n\\\n    vec3 color = (rayleigh + mie) * czm_atmosphereLightIntensity;\\n\\\n\\n\\\n    return vec4(color, opacity);\\n\\\n}\\n\\\n\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Builtin/Functions/computeAtmosphereColor.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Compute the atmosphere color, applying Rayleigh and Mie scattering. This\\n\\\n * builtin uses automatic uniforms so the atmophere settings are synced with the\\n\\\n * state of the Scene, even in other contexts like Model.\\n\\\n *\\n\\\n * @name czm_computeAtmosphereColor\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionWC Position of the fragment in world coords (low precision)\\n\\\n * @param {vec3} lightDirection Light direction from the sun or other light source.\\n\\\n * @param {vec3} rayleighColor The Rayleigh scattering color computed by a scattering function\\n\\\n * @param {vec3} mieColor The Mie scattering color computed by a scattering function\\n\\\n * @param {float} opacity The opacity computed by a scattering function.\\n\\\n */\\n\\\nvec4 czm_computeAtmosphereColor(\\n\\\n    vec3 positionWC,\\n\\\n    vec3 lightDirection,\\n\\\n    vec3 rayleighColor,\\n\\\n    vec3 mieColor,\\n\\\n    float opacity\\n\\\n) {\\n\\\n    // Setup the primary ray: from the camera position to the vertex position.\\n\\\n    vec3 cameraToPositionWC = positionWC - czm_viewerPositionWC;\\n\\\n    vec3 cameraToPositionWCDirection = normalize(cameraToPositionWC);\\n\\\n\\n\\\n    float cosAngle = dot(cameraToPositionWCDirection, lightDirection);\\n\\\n    float cosAngleSq = cosAngle * cosAngle;\\n\\\n\\n\\\n    float G = czm_atmosphereMieAnisotropy;\\n\\\n    float GSq = G * G;\\n\\\n\\n\\\n    // The Rayleigh phase function.\\n\\\n    float rayleighPhase = 3.0 / (50.2654824574) * (1.0 + cosAngleSq);\\n\\\n    // The Mie phase function.\\n\\\n    float miePhase = 3.0 / (25.1327412287) * ((1.0 - GSq) * (cosAngleSq + 1.0)) / (pow(1.0 + GSq - 2.0 * cosAngle * G, 1.5) * (2.0 + GSq));\\n\\\n\\n\\\n    // The final color is generated by combining the effects of the Rayleigh and Mie scattering.\\n\\\n    vec3 rayleigh = rayleighPhase * rayleighColor;\\n\\\n    vec3 mie = miePhase * mieColor;\\n\\\n\\n\\\n    vec3 color = (rayleigh + mie) * czm_atmosphereLightIntensity;\\n\\\n\\n\\\n    return vec4(color, opacity);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Compute the atmosphere color, applying Rayleigh and Mie scattering. This\\n\\\n * builtin uses automatic uniforms so the atmophere settings are synced with the\\n\\\n * state of the Scene, even in other contexts like Model.\\n\\\n *\\n\\\n * @name czm_computeAtmosphereColor\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {czm_ray} primaryRay Ray from the origin to sky fragment to in world coords (low precision)\\n\\\n * @param {vec3} lightDirection Light direction from the sun or other light source.\\n\\\n * @param {vec3} rayleighColor The Rayleigh scattering color computed by a scattering function\\n\\\n * @param {vec3} mieColor The Mie scattering color computed by a scattering function\\n\\\n * @param {float} opacity The opacity computed by a scattering function.\\n\\\n */\\n\\\nvec4 czm_computeAtmosphereColor(\\n\\\n    czm_ray primaryRay,\\n\\\n    vec3 lightDirection,\\n\\\n    vec3 rayleighColor,\\n\\\n    vec3 mieColor,\\n\\\n    float opacity\\n\\\n) {\\n\\\n    vec3 direction = normalize(primaryRay.direction);\\n\\\n\\n\\\n    float cosAngle = dot(direction, lightDirection);\\n\\\n    float cosAngleSq = cosAngle * cosAngle;\\n\\\n\\n\\\n    float G = czm_atmosphereMieAnisotropy;\\n\\\n    float GSq = G * G;\\n\\\n\\n\\\n    // The Rayleigh phase function.\\n\\\n    float rayleighPhase = 3.0 / (50.2654824574) * (1.0 + cosAngleSq);\\n\\\n    // The Mie phase function.\\n\\\n    float miePhase = 3.0 / (25.1327412287) * ((1.0 - GSq) * (cosAngleSq + 1.0)) / (pow(1.0 + GSq - 2.0 * cosAngle * G, 1.5) * (2.0 + GSq));\\n\\\n\\n\\\n    // The final color is generated by combining the effects of the Rayleigh and Mie scattering.\\n\\\n    vec3 rayleigh = rayleighPhase * rayleighColor;\\n\\\n    vec3 mie = miePhase * mieColor;\\n\\\n\\n\\\n    vec3 color = (rayleigh + mie) * czm_atmosphereLightIntensity;\\n\\\n\\n\\\n    return vec4(color, opacity);\\n\\\n}\\n\\\n\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}