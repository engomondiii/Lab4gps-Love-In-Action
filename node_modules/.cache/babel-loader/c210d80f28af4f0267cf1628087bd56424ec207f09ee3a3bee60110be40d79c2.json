{"ast":null,"code":"import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport IauOrientationAxes from \"../Core/IauOrientationAxes.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Simon1994PlanetaryPositions from \"../Core/Simon1994PlanetaryPositions.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport EllipsoidPrimitive from \"./EllipsoidPrimitive.js\";\nimport Material from \"./Material.js\";\n\n/**\n * Draws the Moon in 3D.\n * @alias Moon\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.show=true] Determines whether the moon will be rendered.\n * @param {string} [options.textureUrl=buildModuleUrl('Assets/Textures/moonSmall.jpg')] The moon texture.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.MOON] The moon ellipsoid.\n * @param {boolean} [options.onlySunLighting=true] Use the sun as the only light source.\n *\n *\n * @example\n * scene.moon = new Cesium.Moon();\n *\n * @see Scene#moon\n */\nfunction Moon(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let url = options.textureUrl;\n  if (!defined(url)) {\n    url = buildModuleUrl(\"Assets/Textures/moonSmall.jpg\");\n  }\n\n  /**\n   * Determines if the moon will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * The moon texture.\n   * @type {string}\n   * @default buildModuleUrl('Assets/Textures/moonSmall.jpg')\n   */\n  this.textureUrl = url;\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.MOON);\n\n  /**\n   * Use the sun as the only light source.\n   * @type {boolean}\n   * @default true\n   */\n  this.onlySunLighting = defaultValue(options.onlySunLighting, true);\n  this._ellipsoidPrimitive = new EllipsoidPrimitive({\n    radii: this.ellipsoid.radii,\n    material: Material.fromType(Material.ImageType),\n    depthTestEnabled: false,\n    _owner: this\n  });\n  this._ellipsoidPrimitive.material.translucent = false;\n  this._axes = new IauOrientationAxes();\n}\nObject.defineProperties(Moon.prototype, {\n  /**\n   * Get the ellipsoid that defines the shape of the moon.\n   *\n   * @memberof Moon.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   *\n   * @default {@link Ellipsoid.MOON}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    }\n  }\n});\nconst icrfToFixed = new Matrix3();\nconst rotationScratch = new Matrix3();\nconst translationScratch = new Cartesian3();\nconst scratchCommandList = [];\n\n/**\n * @private\n */\nMoon.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n  const ellipsoidPrimitive = this._ellipsoidPrimitive;\n  ellipsoidPrimitive.material.uniforms.image = this.textureUrl;\n  ellipsoidPrimitive.onlySunLighting = this.onlySunLighting;\n  const date = frameState.time;\n  if (!defined(Transforms.computeIcrfToFixedMatrix(date, icrfToFixed))) {\n    Transforms.computeTemeToPseudoFixedMatrix(date, icrfToFixed);\n  }\n  const rotation = this._axes.evaluate(date, rotationScratch);\n  Matrix3.transpose(rotation, rotation);\n  Matrix3.multiply(icrfToFixed, rotation, rotation);\n  const translation = Simon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame(date, translationScratch);\n  Matrix3.multiplyByVector(icrfToFixed, translation, translation);\n  Matrix4.fromRotationTranslation(rotation, translation, ellipsoidPrimitive.modelMatrix);\n  const savedCommandList = frameState.commandList;\n  frameState.commandList = scratchCommandList;\n  scratchCommandList.length = 0;\n  ellipsoidPrimitive.update(frameState);\n  frameState.commandList = savedCommandList;\n  return scratchCommandList.length === 1 ? scratchCommandList[0] : undefined;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Moon#destroy\n */\nMoon.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * moon = moon && moon.destroy();\n *\n * @see Moon#isDestroyed\n */\nMoon.prototype.destroy = function () {\n  this._ellipsoidPrimitive = this._ellipsoidPrimitive && this._ellipsoidPrimitive.destroy();\n  return destroyObject(this);\n};\nexport default Moon;","map":{"version":3,"names":["buildModuleUrl","Cartesian3","defaultValue","defined","destroyObject","Ellipsoid","IauOrientationAxes","Matrix3","Matrix4","Simon1994PlanetaryPositions","Transforms","EllipsoidPrimitive","Material","Moon","options","EMPTY_OBJECT","url","textureUrl","show","_ellipsoid","ellipsoid","MOON","onlySunLighting","_ellipsoidPrimitive","radii","material","fromType","ImageType","depthTestEnabled","_owner","translucent","_axes","Object","defineProperties","prototype","get","icrfToFixed","rotationScratch","translationScratch","scratchCommandList","update","frameState","ellipsoidPrimitive","uniforms","image","date","time","computeIcrfToFixedMatrix","computeTemeToPseudoFixedMatrix","rotation","evaluate","transpose","multiply","translation","computeMoonPositionInEarthInertialFrame","multiplyByVector","fromRotationTranslation","modelMatrix","savedCommandList","commandList","length","undefined","isDestroyed","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Moon.js"],"sourcesContent":["import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport IauOrientationAxes from \"../Core/IauOrientationAxes.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Simon1994PlanetaryPositions from \"../Core/Simon1994PlanetaryPositions.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport EllipsoidPrimitive from \"./EllipsoidPrimitive.js\";\nimport Material from \"./Material.js\";\n\n/**\n * Draws the Moon in 3D.\n * @alias Moon\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.show=true] Determines whether the moon will be rendered.\n * @param {string} [options.textureUrl=buildModuleUrl('Assets/Textures/moonSmall.jpg')] The moon texture.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.MOON] The moon ellipsoid.\n * @param {boolean} [options.onlySunLighting=true] Use the sun as the only light source.\n *\n *\n * @example\n * scene.moon = new Cesium.Moon();\n *\n * @see Scene#moon\n */\nfunction Moon(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  let url = options.textureUrl;\n  if (!defined(url)) {\n    url = buildModuleUrl(\"Assets/Textures/moonSmall.jpg\");\n  }\n\n  /**\n   * Determines if the moon will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * The moon texture.\n   * @type {string}\n   * @default buildModuleUrl('Assets/Textures/moonSmall.jpg')\n   */\n  this.textureUrl = url;\n\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.MOON);\n\n  /**\n   * Use the sun as the only light source.\n   * @type {boolean}\n   * @default true\n   */\n  this.onlySunLighting = defaultValue(options.onlySunLighting, true);\n\n  this._ellipsoidPrimitive = new EllipsoidPrimitive({\n    radii: this.ellipsoid.radii,\n    material: Material.fromType(Material.ImageType),\n    depthTestEnabled: false,\n    _owner: this,\n  });\n  this._ellipsoidPrimitive.material.translucent = false;\n\n  this._axes = new IauOrientationAxes();\n}\n\nObject.defineProperties(Moon.prototype, {\n  /**\n   * Get the ellipsoid that defines the shape of the moon.\n   *\n   * @memberof Moon.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   *\n   * @default {@link Ellipsoid.MOON}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n});\n\nconst icrfToFixed = new Matrix3();\nconst rotationScratch = new Matrix3();\nconst translationScratch = new Cartesian3();\nconst scratchCommandList = [];\n\n/**\n * @private\n */\nMoon.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  const ellipsoidPrimitive = this._ellipsoidPrimitive;\n  ellipsoidPrimitive.material.uniforms.image = this.textureUrl;\n  ellipsoidPrimitive.onlySunLighting = this.onlySunLighting;\n\n  const date = frameState.time;\n  if (!defined(Transforms.computeIcrfToFixedMatrix(date, icrfToFixed))) {\n    Transforms.computeTemeToPseudoFixedMatrix(date, icrfToFixed);\n  }\n\n  const rotation = this._axes.evaluate(date, rotationScratch);\n  Matrix3.transpose(rotation, rotation);\n  Matrix3.multiply(icrfToFixed, rotation, rotation);\n\n  const translation =\n    Simon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame(\n      date,\n      translationScratch,\n    );\n  Matrix3.multiplyByVector(icrfToFixed, translation, translation);\n\n  Matrix4.fromRotationTranslation(\n    rotation,\n    translation,\n    ellipsoidPrimitive.modelMatrix,\n  );\n\n  const savedCommandList = frameState.commandList;\n  frameState.commandList = scratchCommandList;\n  scratchCommandList.length = 0;\n  ellipsoidPrimitive.update(frameState);\n  frameState.commandList = savedCommandList;\n  return scratchCommandList.length === 1 ? scratchCommandList[0] : undefined;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Moon#destroy\n */\nMoon.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * moon = moon && moon.destroy();\n *\n * @see Moon#isDestroyed\n */\nMoon.prototype.destroy = function () {\n  this._ellipsoidPrimitive =\n    this._ellipsoidPrimitive && this._ellipsoidPrimitive.destroy();\n  return destroyObject(this);\n};\nexport default Moon;\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,2BAA2B;AACtD,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,kBAAkB,MAAM,+BAA+B;AAC9D,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,2BAA2B,MAAM,wCAAwC;AAChF,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,kBAAkB,MAAM,yBAAyB;AACxD,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACC,OAAO,EAAE;EACrBA,OAAO,GAAGZ,YAAY,CAACY,OAAO,EAAEZ,YAAY,CAACa,YAAY,CAAC;EAE1D,IAAIC,GAAG,GAAGF,OAAO,CAACG,UAAU;EAC5B,IAAI,CAACd,OAAO,CAACa,GAAG,CAAC,EAAE;IACjBA,GAAG,GAAGhB,cAAc,CAAC,+BAA+B,CAAC;EACvD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACkB,IAAI,GAAGhB,YAAY,CAACY,OAAO,CAACI,IAAI,EAAE,IAAI,CAAC;;EAE5C;AACF;AACA;AACA;AACA;EACE,IAAI,CAACD,UAAU,GAAGD,GAAG;EAErB,IAAI,CAACG,UAAU,GAAGjB,YAAY,CAACY,OAAO,CAACM,SAAS,EAAEf,SAAS,CAACgB,IAAI,CAAC;;EAEjE;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,eAAe,GAAGpB,YAAY,CAACY,OAAO,CAACQ,eAAe,EAAE,IAAI,CAAC;EAElE,IAAI,CAACC,mBAAmB,GAAG,IAAIZ,kBAAkB,CAAC;IAChDa,KAAK,EAAE,IAAI,CAACJ,SAAS,CAACI,KAAK;IAC3BC,QAAQ,EAAEb,QAAQ,CAACc,QAAQ,CAACd,QAAQ,CAACe,SAAS,CAAC;IAC/CC,gBAAgB,EAAE,KAAK;IACvBC,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACN,mBAAmB,CAACE,QAAQ,CAACK,WAAW,GAAG,KAAK;EAErD,IAAI,CAACC,KAAK,GAAG,IAAIzB,kBAAkB,CAAC,CAAC;AACvC;AAEA0B,MAAM,CAACC,gBAAgB,CAACpB,IAAI,CAACqB,SAAS,EAAE;EACtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEd,SAAS,EAAE;IACTe,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAChB,UAAU;IACxB;EACF;AACF,CAAC,CAAC;AAEF,MAAMiB,WAAW,GAAG,IAAI7B,OAAO,CAAC,CAAC;AACjC,MAAM8B,eAAe,GAAG,IAAI9B,OAAO,CAAC,CAAC;AACrC,MAAM+B,kBAAkB,GAAG,IAAIrC,UAAU,CAAC,CAAC;AAC3C,MAAMsC,kBAAkB,GAAG,EAAE;;AAE7B;AACA;AACA;AACA1B,IAAI,CAACqB,SAAS,CAACM,MAAM,GAAG,UAAUC,UAAU,EAAE;EAC5C,IAAI,CAAC,IAAI,CAACvB,IAAI,EAAE;IACd;EACF;EAEA,MAAMwB,kBAAkB,GAAG,IAAI,CAACnB,mBAAmB;EACnDmB,kBAAkB,CAACjB,QAAQ,CAACkB,QAAQ,CAACC,KAAK,GAAG,IAAI,CAAC3B,UAAU;EAC5DyB,kBAAkB,CAACpB,eAAe,GAAG,IAAI,CAACA,eAAe;EAEzD,MAAMuB,IAAI,GAAGJ,UAAU,CAACK,IAAI;EAC5B,IAAI,CAAC3C,OAAO,CAACO,UAAU,CAACqC,wBAAwB,CAACF,IAAI,EAAET,WAAW,CAAC,CAAC,EAAE;IACpE1B,UAAU,CAACsC,8BAA8B,CAACH,IAAI,EAAET,WAAW,CAAC;EAC9D;EAEA,MAAMa,QAAQ,GAAG,IAAI,CAAClB,KAAK,CAACmB,QAAQ,CAACL,IAAI,EAAER,eAAe,CAAC;EAC3D9B,OAAO,CAAC4C,SAAS,CAACF,QAAQ,EAAEA,QAAQ,CAAC;EACrC1C,OAAO,CAAC6C,QAAQ,CAAChB,WAAW,EAAEa,QAAQ,EAAEA,QAAQ,CAAC;EAEjD,MAAMI,WAAW,GACf5C,2BAA2B,CAAC6C,uCAAuC,CACjET,IAAI,EACJP,kBACF,CAAC;EACH/B,OAAO,CAACgD,gBAAgB,CAACnB,WAAW,EAAEiB,WAAW,EAAEA,WAAW,CAAC;EAE/D7C,OAAO,CAACgD,uBAAuB,CAC7BP,QAAQ,EACRI,WAAW,EACXX,kBAAkB,CAACe,WACrB,CAAC;EAED,MAAMC,gBAAgB,GAAGjB,UAAU,CAACkB,WAAW;EAC/ClB,UAAU,CAACkB,WAAW,GAAGpB,kBAAkB;EAC3CA,kBAAkB,CAACqB,MAAM,GAAG,CAAC;EAC7BlB,kBAAkB,CAACF,MAAM,CAACC,UAAU,CAAC;EACrCA,UAAU,CAACkB,WAAW,GAAGD,gBAAgB;EACzC,OAAOnB,kBAAkB,CAACqB,MAAM,KAAK,CAAC,GAAGrB,kBAAkB,CAAC,CAAC,CAAC,GAAGsB,SAAS;AAC5E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhD,IAAI,CAACqB,SAAS,CAAC4B,WAAW,GAAG,YAAY;EACvC,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjD,IAAI,CAACqB,SAAS,CAAC6B,OAAO,GAAG,YAAY;EACnC,IAAI,CAACxC,mBAAmB,GACtB,IAAI,CAACA,mBAAmB,IAAI,IAAI,CAACA,mBAAmB,CAACwC,OAAO,CAAC,CAAC;EAChE,OAAO3D,aAAa,CAAC,IAAI,CAAC;AAC5B,CAAC;AACD,eAAeS,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}