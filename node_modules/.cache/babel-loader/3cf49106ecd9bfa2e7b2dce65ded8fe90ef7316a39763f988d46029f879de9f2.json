{"ast":null,"code":"import { alphaNumericAndMarksCharsStr, alphaNumericAndMarksRe } from '../regex-lib';\nimport { isKnownTld } from './uri-utils';\n/**\n * A regular expression to match a 'mailto:' prefix on an email address.\n */\nexport var mailtoSchemePrefixRe = /^mailto:/i;\n/**\n * Regular expression for all of the valid characters of the local part of an\n * email address.\n */\nvar emailLocalPartCharRegex = new RegExp(\"[\".concat(alphaNumericAndMarksCharsStr, \"!#$%&'*+/=?^_`{|}~-]\"));\n/**\n * Determines if the given character may start the \"local part\" of an email\n * address. The local part is the part to the left of the '@' sign.\n *\n * Technically according to the email spec, any of the characters in the\n * {@link emailLocalPartCharRegex} can start an email address (including any of\n * the special characters), but this is so rare in the wild and the\n * implementation is much simpler by only starting an email address with a word\n * character. This is especially important when matching the '{' character which\n * generally starts a brace that isn't part of the email address.\n */\nexport function isEmailLocalPartStartChar(char) {\n  return alphaNumericAndMarksRe.test(char);\n}\n/**\n * Determines if the given character can be part of the \"local part\" of an email\n * address. The local part is the part to the left of the '@' sign.\n */\nexport function isEmailLocalPartChar(char) {\n  return emailLocalPartCharRegex.test(char);\n}\n/**\n * Determines if the given email address is valid. We consider it valid if it\n * has a valid TLD in its host.\n *\n * @param emailAddress email address\n * @return true is email have valid TLD, false otherwise\n */\nexport function isValidEmail(emailAddress) {\n  var emailAddressTld = emailAddress.split('.').pop() || '';\n  return isKnownTld(emailAddressTld);\n}","map":{"version":3,"names":["alphaNumericAndMarksCharsStr","alphaNumericAndMarksRe","isKnownTld","mailtoSchemePrefixRe","emailLocalPartCharRegex","RegExp","concat","isEmailLocalPartStartChar","char","test","isEmailLocalPartChar","isValidEmail","emailAddress","emailAddressTld","split","pop"],"sources":["../../../src/parser/email-utils.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,4BAA4B,EAAEC,sBAAsB,QAAQ,cAAc;AACnF,SAASC,UAAU,QAAQ,aAAa;AAExC;;;AAGA,OAAO,IAAMC,oBAAoB,GAAG,WAAW;AAE/C;;;;AAIA,IAAMC,uBAAuB,GAAG,IAAIC,MAAM,CAAC,IAAAC,MAAA,CAAIN,4BAA4B,yBAAuB,CAAC;AAEnG;;;;;;;;;;;AAWA,OAAM,SAAUO,yBAAyBA,CAACC,IAAY;EAClD,OAAOP,sBAAsB,CAACQ,IAAI,CAACD,IAAI,CAAC;AAC5C;AAEA;;;;AAIA,OAAM,SAAUE,oBAAoBA,CAACF,IAAY;EAC7C,OAAOJ,uBAAuB,CAACK,IAAI,CAACD,IAAI,CAAC;AAC7C;AAEA;;;;;;;AAOA,OAAM,SAAUG,YAAYA,CAACC,YAAoB;EAC7C,IAAMC,eAAe,GAAWD,YAAY,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE,IAAI,EAAE;EAEnE,OAAOb,UAAU,CAACW,eAAe,CAAC;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}