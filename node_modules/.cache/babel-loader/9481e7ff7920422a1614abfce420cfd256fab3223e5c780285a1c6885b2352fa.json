{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport BoxGeometry from \"../Core/BoxGeometry.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport CullingVolume from \"../Core/CullingVolume.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport EllipsoidGeometry from \"../Core/EllipsoidGeometry.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryPipeline from \"../Core/GeometryPipeline.js\";\nimport HeightReference from \"./HeightReference.js\";\nimport Intersect from \"../Core/Intersect.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport mergeSort from \"../Core/mergeSort.js\";\nimport Occluder from \"../Core/Occluder.js\";\nimport OrthographicFrustum from \"../Core/OrthographicFrustum.js\";\nimport OrthographicOffCenterFrustum from \"../Core/OrthographicOffCenterFrustum.js\";\nimport PerspectiveFrustum from \"../Core/PerspectiveFrustum.js\";\nimport PerspectiveOffCenterFrustum from \"../Core/PerspectiveOffCenterFrustum.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport RequestScheduler from \"../Core/RequestScheduler.js\";\nimport TaskProcessor from \"../Core/TaskProcessor.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport ComputeEngine from \"../Renderer/ComputeEngine.js\";\nimport Context from \"../Renderer/Context.js\";\nimport ContextLimits from \"../Renderer/ContextLimits.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport Atmosphere from \"./Atmosphere.js\";\nimport BrdfLutGenerator from \"./BrdfLutGenerator.js\";\nimport Camera from \"./Camera.js\";\nimport Cesium3DTilePass from \"./Cesium3DTilePass.js\";\nimport Cesium3DTilePassState from \"./Cesium3DTilePassState.js\";\nimport CreditDisplay from \"./CreditDisplay.js\";\nimport DebugCameraPrimitive from \"./DebugCameraPrimitive.js\";\nimport DepthPlane from \"./DepthPlane.js\";\nimport DerivedCommand from \"./DerivedCommand.js\";\nimport DeviceOrientationCameraController from \"./DeviceOrientationCameraController.js\";\nimport DynamicAtmosphereLightingType from \"./DynamicAtmosphereLightingType.js\";\nimport Fog from \"./Fog.js\";\nimport FrameState from \"./FrameState.js\";\nimport GlobeTranslucencyState from \"./GlobeTranslucencyState.js\";\nimport InvertClassification from \"./InvertClassification.js\";\nimport JobScheduler from \"./JobScheduler.js\";\nimport MapMode2D from \"./MapMode2D.js\";\nimport PerformanceDisplay from \"./PerformanceDisplay.js\";\nimport PerInstanceColorAppearance from \"./PerInstanceColorAppearance.js\";\nimport Picking from \"./Picking.js\";\nimport PostProcessStageCollection from \"./PostProcessStageCollection.js\";\nimport Primitive from \"./Primitive.js\";\nimport PrimitiveCollection from \"./PrimitiveCollection.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\nimport SceneTransitioner from \"./SceneTransitioner.js\";\nimport ScreenSpaceCameraController from \"./ScreenSpaceCameraController.js\";\nimport ShadowMap from \"./ShadowMap.js\";\nimport SpecularEnvironmentCubeMap from \"./SpecularEnvironmentCubeMap.js\";\nimport StencilConstants from \"./StencilConstants.js\";\nimport SunLight from \"./SunLight.js\";\nimport SunPostProcess from \"./SunPostProcess.js\";\nimport TweenCollection from \"./TweenCollection.js\";\nimport View from \"./View.js\";\nimport DebugInspector from \"./DebugInspector.js\";\nimport VoxelCell from \"./VoxelCell.js\";\nimport VoxelPrimitive from \"./VoxelPrimitive.js\";\nimport getMetadataClassProperty from \"./getMetadataClassProperty.js\";\nimport PickedMetadataInfo from \"./PickedMetadataInfo.js\";\nimport getMetadataProperty from \"./getMetadataProperty.js\";\nconst requestRenderAfterFrame = function (scene) {\n  return function () {\n    scene.frameState.afterRender.push(function () {\n      scene.requestRender();\n    });\n  };\n};\n\n/**\n * The container for all 3D graphical objects and state in a Cesium virtual scene.  Generally,\n * a scene is not created directly; instead, it is implicitly created by {@link CesiumWidget}.\n *\n * @alias Scene\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {HTMLCanvasElement} options.canvas The HTML canvas element to create the scene for.\n * @param {ContextOptions} [options.contextOptions] Context and WebGL creation properties.\n * @param {Element} [options.creditContainer] The HTML element in which the credits will be displayed.\n * @param {Element} [options.creditViewport] The HTML element in which to display the credit popup.  If not specified, the viewport will be a added as a sibling of the canvas.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The default ellipsoid. If not specified, the default ellipsoid is used.\n * @param {MapProjection} [options.mapProjection=new GeographicProjection(options.ellipsoid)] The map projection to use in 2D and Columbus View modes.\n * @param {boolean} [options.orderIndependentTranslucency=true] If true and the configuration supports it, use order independent translucency.\n * @param {boolean} [options.scene3DOnly=false] If true, optimizes memory use and performance for 3D mode but disables the ability to use 2D or Columbus View.\n * @param {boolean} [options.shadows=false] Determines if shadows are cast by light sources.\n * @param {MapMode2D} [options.mapMode2D=MapMode2D.INFINITE_SCROLL] Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n * @param {boolean} [options.requestRenderMode=false] If true, rendering a frame will only occur when needed as determined by changes within the scene. Enabling improves performance of the application, but requires using {@link Scene#requestRender} to render a new frame explicitly in this mode. This will be necessary in many cases after making changes to the scene in other parts of the API. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @param {number} [options.maximumRenderTimeChange=0.0] If requestRenderMode is true, this value defines the maximum change in simulation time allowed before a render is requested. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @param {number} [options.depthPlaneEllipsoidOffset=0.0] Adjust the DepthPlane to address rendering artefacts below ellipsoid zero elevation.\n * @param {number} [options.msaaSamples=4] If provided, this value controls the rate of multisample antialiasing. Typical multisampling rates are 2, 4, and sometimes 8 samples per pixel. Higher sampling rates of MSAA may impact performance in exchange for improved visual quality. This value only applies to WebGL2 contexts that support multisample render targets. Set to 1 to disable MSAA.\n *\n * @see CesiumWidget\n * @see {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}\n *\n * @exception {DeveloperError} options and options.canvas are required.\n *\n * @example\n * // Create scene without anisotropic texture filtering\n * const scene = new Cesium.Scene({\n *   canvas : canvas,\n *   contextOptions : {\n *     allowTextureFilterAnisotropic : false\n *   }\n * });\n */\nfunction Scene(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const canvas = options.canvas;\n  let creditContainer = options.creditContainer;\n  let creditViewport = options.creditViewport;\n  const contextOptions = clone(options.contextOptions);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(canvas)) {\n    throw new DeveloperError(\"options and options.canvas are required.\");\n  }\n  //>>includeEnd('debug');\n  const hasCreditContainer = defined(creditContainer);\n  const context = new Context(canvas, contextOptions);\n  if (!hasCreditContainer) {\n    creditContainer = document.createElement(\"div\");\n    creditContainer.style.position = \"absolute\";\n    creditContainer.style.bottom = \"0\";\n    creditContainer.style[\"text-shadow\"] = \"0 0 2px #000000\";\n    creditContainer.style.color = \"#ffffff\";\n    creditContainer.style[\"font-size\"] = \"10px\";\n    creditContainer.style[\"padding-right\"] = \"5px\";\n    canvas.parentNode.appendChild(creditContainer);\n  }\n  if (!defined(creditViewport)) {\n    creditViewport = canvas.parentNode;\n  }\n  this._id = createGuid();\n  this._jobScheduler = new JobScheduler();\n  this._frameState = new FrameState(context, new CreditDisplay(creditContainer, \"â€¢\", creditViewport), this._jobScheduler);\n  this._frameState.scene3DOnly = defaultValue(options.scene3DOnly, false);\n  this._removeCreditContainer = !hasCreditContainer;\n  this._creditContainer = creditContainer;\n  this._canvas = canvas;\n  this._context = context;\n  this._computeEngine = new ComputeEngine(context);\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.default);\n  this._globe = undefined;\n  this._globeTranslucencyState = new GlobeTranslucencyState();\n  this._primitives = new PrimitiveCollection();\n  this._groundPrimitives = new PrimitiveCollection();\n  this._globeHeight = undefined;\n  this._globeHeightDirty = true;\n  this._cameraUnderground = false;\n  this._removeUpdateHeightCallback = undefined;\n  this._logDepthBuffer = Scene.defaultLogDepthBuffer && context.fragmentDepth;\n  this._logDepthBufferDirty = true;\n  this._tweens = new TweenCollection();\n  this._shaderFrameCount = 0;\n  this._sunPostProcess = undefined;\n  this._computeCommandList = [];\n  this._overlayCommandList = [];\n  this._useOIT = defaultValue(options.orderIndependentTranslucency, true);\n  /**\n   * The function that will be used for executing translucent commands when\n   * useOIT is true. This is created once in\n   * obtainTranslucentCommandExecutionFunction, then cached here.\n   * @private\n   */\n  this._executeOITFunction = undefined;\n  this._depthPlane = new DepthPlane(options.depthPlaneEllipsoidOffset);\n  this._clearColorCommand = new ClearCommand({\n    color: new Color(),\n    stencil: 0,\n    owner: this\n  });\n  this._depthClearCommand = new ClearCommand({\n    depth: 1.0,\n    owner: this\n  });\n  this._stencilClearCommand = new ClearCommand({\n    stencil: 0\n  });\n  this._classificationStencilClearCommand = new ClearCommand({\n    stencil: 0,\n    renderState: RenderState.fromCache({\n      stencilMask: StencilConstants.CLASSIFICATION_MASK\n    })\n  });\n  this._depthOnlyRenderStateCache = {};\n  this._transitioner = new SceneTransitioner(this);\n  this._preUpdate = new Event();\n  this._postUpdate = new Event();\n  this._renderError = new Event();\n  this._preRender = new Event();\n  this._postRender = new Event();\n  this._minimumDisableDepthTestDistance = 0.0;\n  this._debugInspector = new DebugInspector();\n  this._msaaSamples = defaultValue(options.msaaSamples, 4);\n\n  /**\n   * Exceptions occurring in <code>render</code> are always caught in order to raise the\n   * <code>renderError</code> event.  If this property is true, the error is rethrown\n   * after the event is raised.  If this property is false, the <code>render</code> function\n   * returns normally after raising the event.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.rethrowRenderErrors = false;\n\n  /**\n   * Determines whether or not to instantly complete the\n   * scene transition animation on user input.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.completeMorphOnUserInput = true;\n\n  /**\n   * The event fired at the beginning of a scene transition.\n   * @type {Event}\n   * @default Event()\n   */\n  this.morphStart = new Event();\n\n  /**\n   * The event fired at the completion of a scene transition.\n   * @type {Event}\n   * @default Event()\n   */\n  this.morphComplete = new Event();\n\n  /**\n   * The {@link SkyBox} used to draw the stars.\n   *\n   * @type {SkyBox}\n   * @default undefined\n   *\n   * @see Scene#backgroundColor\n   */\n  this.skyBox = undefined;\n\n  /**\n   * The sky atmosphere drawn around the globe.\n   *\n   * @type {SkyAtmosphere}\n   * @default undefined\n   */\n  this.skyAtmosphere = undefined;\n\n  /**\n   * The {@link Sun}.\n   *\n   * @type {Sun}\n   * @default undefined\n   */\n  this.sun = undefined;\n\n  /**\n   * Uses a bloom filter on the sun when enabled.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.sunBloom = true;\n  this._sunBloom = undefined;\n\n  /**\n   * The {@link Moon}\n   *\n   * @type Moon\n   * @default undefined\n   */\n  this.moon = undefined;\n\n  /**\n   * The background color, which is only visible if there is no sky box, i.e., {@link Scene#skyBox} is undefined.\n   *\n   * @type {Color}\n   * @default {@link Color.BLACK}\n   *\n   * @see Scene#skyBox\n   */\n  this.backgroundColor = Color.clone(Color.BLACK);\n  this._mode = SceneMode.SCENE3D;\n  this._mapProjection = defined(options.mapProjection) ? options.mapProjection : new GeographicProjection(this._ellipsoid);\n\n  /**\n   * The current morph transition time between 2D/Columbus View and 3D,\n   * with 0.0 being 2D or Columbus View and 1.0 being 3D.\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  this.morphTime = 1.0;\n\n  /**\n   * The far-to-near ratio of the multi-frustum when using a normal depth buffer.\n   * <p>\n   * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n   * when {@link Scene#logarithmicDepthBuffer} is <code>false</code>. When <code>logarithmicDepthBuffer</code> is\n   * <code>true</code>, use {@link Scene#logarithmicDepthFarToNearRatio}.\n   * </p>\n   *\n   * @type {number}\n   * @default 1000.0\n   */\n  this.farToNearRatio = 1000.0;\n\n  /**\n   * The far-to-near ratio of the multi-frustum when using a logarithmic depth buffer.\n   * <p>\n   * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n   * when {@link Scene#logarithmicDepthBuffer} is <code>true</code>. When <code>logarithmicDepthBuffer</code> is\n   * <code>false</code>, use {@link Scene#farToNearRatio}.\n   * </p>\n   *\n   * @type {number}\n   * @default 1e9\n   */\n  this.logarithmicDepthFarToNearRatio = 1e9;\n\n  /**\n   * Determines the uniform depth size in meters of each frustum of the multifrustum in 2D. If a primitive or model close\n   * to the surface shows z-fighting, decreasing this will eliminate the artifact, but decrease performance. On the\n   * other hand, increasing this will increase performance but may cause z-fighting among primitives close to the surface.\n   *\n   * @type {number}\n   * @default 1.75e6\n   */\n  this.nearToFarDistance2D = 1.75e6;\n\n  /**\n   * The vertical exaggeration of the scene.\n   * When set to 1.0, no exaggeration is applied.\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  this.verticalExaggeration = 1.0;\n\n  /**\n   * The reference height for vertical exaggeration of the scene.\n   * When set to 0.0, the exaggeration is applied relative to the ellipsoid surface.\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.verticalExaggerationRelativeHeight = 0.0;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * A function that determines what commands are executed.  As shown in the examples below,\n   * the function receives the command's <code>owner</code> as an argument, and returns a boolean indicating if the\n   * command should be executed.\n   * </p>\n   * <p>\n   * The default is <code>undefined</code>, indicating that all commands are executed.\n   * </p>\n   *\n   * @type Function\n   *\n   * @default undefined\n   *\n   * @example\n   * // Do not execute any commands.\n   * scene.debugCommandFilter = function(command) {\n   *     return false;\n   * };\n   *\n   * // Execute only the billboard's commands.  That is, only draw the billboard.\n   * const billboards = new Cesium.BillboardCollection();\n   * scene.debugCommandFilter = function(command) {\n   *     return command.owner === billboards;\n   * };\n   */\n  this.debugCommandFilter = undefined;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, commands are randomly shaded.  This is useful\n   * for performance analysis to see what parts of a scene or model are\n   * command-dense and could benefit from batching.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugShowCommands = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, commands are shaded based on the frustums they\n   * overlap.  Commands in the closest frustum are tinted red, commands in\n   * the next closest are green, and commands in the farthest frustum are\n   * blue.  If a command overlaps more than one frustum, the color components\n   * are combined, e.g., a command overlapping the first two frustums is tinted\n   * yellow.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugShowFrustums = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Displays frames per second and time between frames.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugShowFramesPerSecond = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Indicates which frustum will have depth information displayed.\n   * </p>\n   *\n   * @type {number}\n   *\n   * @default 1\n   */\n  this.debugShowDepthFrustum = 1;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, draws outlines to show the boundaries of the camera frustums\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugShowFrustumPlanes = false;\n  this._debugShowFrustumPlanes = false;\n  this._debugFrustumPlanes = undefined;\n\n  /**\n   * When <code>true</code>, enables picking using the depth buffer.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.useDepthPicking = true;\n\n  /**\n   * When <code>true</code>, enables picking translucent geometry using the depth buffer. Note that {@link Scene#useDepthPicking} must also be true for enabling this to work.\n   *\n   * <p>\n   * There is a decrease in performance when enabled. There are extra draw calls to write depth for\n   * translucent geometry.\n   * </p>\n   *\n   * @example\n   * // picking the position of a translucent primitive\n   * viewer.screenSpaceEventHandler.setInputAction(function onLeftClick(movement) {\n   *      const pickedFeature = viewer.scene.pick(movement.position);\n   *      if (!Cesium.defined(pickedFeature)) {\n   *          // nothing picked\n   *          return;\n   *      }\n   *      const worldPosition = viewer.scene.pickPosition(movement.position);\n   * }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.pickTranslucentDepth = false;\n\n  /**\n   * The time in milliseconds to wait before checking if the camera has not moved and fire the cameraMoveEnd event.\n   * @type {number}\n   * @default 500.0\n   * @private\n   */\n  this.cameraEventWaitTime = 500.0;\n\n  /**\n   * Settings for atmosphere lighting effects affecting 3D Tiles and model rendering. This is not to be confused with\n   * {@link Scene#skyAtmosphere} which is responsible for rendering the sky.\n   *\n   * @type {Atmosphere}\n   */\n  this.atmosphere = new Atmosphere();\n\n  /**\n   * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n   * performance improvements by rendering less geometry and dispatching less terrain requests.\n   *\n   * Disbaled by default if an ellipsoid other than WGS84 is used.\n   * @type {Fog}\n   */\n  this.fog = new Fog();\n  this.fog.enabled = Ellipsoid.WGS84.equals(this._ellipsoid);\n  if (!Ellipsoid.WGS84.equals(this._ellipsoid)) {\n    Camera.DEFAULT_VIEW_RECTANGLE = Rectangle.fromDegrees(-45.0, -45.0, 45.0, 45.0);\n  }\n  this._shadowMapCamera = new Camera(this);\n\n  /**\n   * The shadow map for the scene's light source. When enabled, models, primitives, and the globe may cast and receive shadows.\n   * @type {ShadowMap}\n   */\n  this.shadowMap = new ShadowMap({\n    context: context,\n    lightCamera: this._shadowMapCamera,\n    enabled: defaultValue(options.shadows, false)\n  });\n\n  /**\n   * When <code>false</code>, 3D Tiles will render normally. When <code>true</code>, classified 3D Tile geometry will render normally and\n   * unclassified 3D Tile geometry will render with the color multiplied by {@link Scene#invertClassificationColor}.\n   * @type {boolean}\n   * @default false\n   */\n  this.invertClassification = false;\n\n  /**\n   * The highlight color of unclassified 3D Tile geometry when {@link Scene#invertClassification} is <code>true</code>.\n   * <p>When the color's alpha is less than 1.0, the unclassified portions of the 3D Tiles will not blend correctly with the classified positions of the 3D Tiles.</p>\n   * <p>Also, when the color's alpha is less than 1.0, the WEBGL_depth_texture and EXT_frag_depth WebGL extensions must be supported.</p>\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.invertClassificationColor = Color.clone(Color.WHITE);\n  this._actualInvertClassificationColor = Color.clone(this._invertClassificationColor);\n  this._invertClassification = new InvertClassification();\n\n  /**\n   * The focal length for use when with cardboard or WebVR.\n   * @type {number}\n   */\n  this.focalLength = undefined;\n\n  /**\n   * The eye separation distance in meters for use with cardboard or WebVR.\n   * @type {number}\n   */\n  this.eyeSeparation = undefined;\n\n  /**\n   * Post processing effects applied to the final render.\n   * @type {PostProcessStageCollection}\n   */\n  this.postProcessStages = new PostProcessStageCollection();\n  this._brdfLutGenerator = new BrdfLutGenerator();\n  this._performanceDisplay = undefined;\n  this._debugVolume = undefined;\n  this._screenSpaceCameraController = new ScreenSpaceCameraController(this);\n  this._cameraUnderground = false;\n  this._mapMode2D = defaultValue(options.mapMode2D, MapMode2D.INFINITE_SCROLL);\n\n  // Keeps track of the state of a frame. FrameState is the state across\n  // the primitives of the scene. This state is for internally keeping track\n  // of celestial and environment effects that need to be updated/rendered in\n  // a certain order as well as updating/tracking framebuffer usage.\n  this._environmentState = {\n    skyBoxCommand: undefined,\n    skyAtmosphereCommand: undefined,\n    sunDrawCommand: undefined,\n    sunComputeCommand: undefined,\n    moonCommand: undefined,\n    isSunVisible: false,\n    isMoonVisible: false,\n    isReadyForAtmosphere: false,\n    isSkyAtmosphereVisible: false,\n    clearGlobeDepth: false,\n    useDepthPlane: false,\n    renderTranslucentDepthForPick: false,\n    originalFramebuffer: undefined,\n    useGlobeDepthFramebuffer: false,\n    useOIT: false,\n    useInvertClassification: false,\n    usePostProcess: false,\n    usePostProcessSelected: false,\n    useWebVR: false\n  };\n  this._useWebVR = false;\n  this._cameraVR = undefined;\n  this._aspectRatioVR = undefined;\n\n  /**\n   * When <code>true</code>, rendering a frame will only occur when needed as determined by changes within the scene.\n   * Enabling improves performance of the application, but requires using {@link Scene#requestRender}\n   * to render a new frame explicitly in this mode. This will be necessary in many cases after making changes\n   * to the scene in other parts of the API.\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#maximumRenderTimeChange\n   * @see Scene#requestRender\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.requestRenderMode = defaultValue(options.requestRenderMode, false);\n  this._renderRequested = true;\n\n  /**\n   * If {@link Scene#requestRenderMode} is <code>true</code>, this value defines the maximum change in\n   * simulation time allowed before a render is requested. Lower values increase the number of frames rendered\n   * and higher values decrease the number of frames rendered. If <code>undefined</code>, changes to\n   * the simulation time will never request a render.\n   * This value impacts the rate of rendering for changes in the scene like lighting, entity property updates,\n   * and animations.\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#requestRenderMode\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.maximumRenderTimeChange = defaultValue(options.maximumRenderTimeChange, 0.0);\n  this._lastRenderTime = undefined;\n  this._frameRateMonitor = undefined;\n  this._removeRequestListenerCallback = RequestScheduler.requestCompletedEvent.addEventListener(requestRenderAfterFrame(this));\n  this._removeTaskProcessorListenerCallback = TaskProcessor.taskCompletedEvent.addEventListener(requestRenderAfterFrame(this));\n  this._removeGlobeCallbacks = [];\n  this._removeTerrainProviderReadyListener = undefined;\n  const viewport = new BoundingRectangle(0, 0, context.drawingBufferWidth, context.drawingBufferHeight);\n  const camera = new Camera(this);\n  if (this._logDepthBuffer) {\n    camera.frustum.near = 0.1;\n    camera.frustum.far = 10000000000.0;\n  }\n\n  /**\n   * The camera view for the scene camera flight destination. Used for preloading flight destination tiles.\n   * @type {Camera}\n   * @private\n   */\n  this.preloadFlightCamera = new Camera(this);\n\n  /**\n   * The culling volume for the scene camera flight destination. Used for preloading flight destination tiles.\n   * @type {CullingVolume}\n   * @private\n   */\n  this.preloadFlightCullingVolume = undefined;\n  this._picking = new Picking(this);\n  this._defaultView = new View(this, camera, viewport);\n  this._view = this._defaultView;\n  this._hdr = undefined;\n  this._hdrDirty = undefined;\n  this.highDynamicRange = false;\n  this.gamma = 2.2;\n\n  /**\n   * The spherical harmonic coefficients for image-based lighting of PBR models.\n   * @type {Cartesian3[]}\n   */\n  this.sphericalHarmonicCoefficients = undefined;\n\n  /**\n   * The url to the KTX2 file containing the specular environment map and convoluted mipmaps for image-based lighting of PBR models.\n   * @type {string}\n   */\n  this.specularEnvironmentMaps = undefined;\n  this._specularEnvironmentCubeMap = undefined;\n\n  /**\n   * The light source for shading. Defaults to a directional light from the Sun.\n   * @type {Light}\n   */\n  this.light = new SunLight();\n\n  // Give frameState, camera, and screen space camera controller initial state before rendering\n  updateFrameNumber(this, 0.0, JulianDate.now());\n  this.updateFrameState();\n  this.initializeFrame();\n}\n\n/**\n * Use this to set the default value for {@link Scene#logarithmicDepthBuffer} in newly constructed Scenes\n * This property relies on fragmentDepth being supported.\n */\nScene.defaultLogDepthBuffer = true;\nfunction updateGlobeListeners(scene, globe) {\n  for (let i = 0; i < scene._removeGlobeCallbacks.length; ++i) {\n    scene._removeGlobeCallbacks[i]();\n  }\n  scene._removeGlobeCallbacks.length = 0;\n  const removeGlobeCallbacks = [];\n  if (defined(globe)) {\n    removeGlobeCallbacks.push(globe.imageryLayersUpdatedEvent.addEventListener(requestRenderAfterFrame(scene)));\n    removeGlobeCallbacks.push(globe.terrainProviderChanged.addEventListener(requestRenderAfterFrame(scene)));\n  }\n  scene._removeGlobeCallbacks = removeGlobeCallbacks;\n}\nObject.defineProperties(Scene.prototype, {\n  /**\n   * Gets the canvas element to which this scene is bound.\n   * @memberof Scene.prototype\n   *\n   * @type {HTMLCanvasElement}\n   * @readonly\n   */\n  canvas: {\n    get: function () {\n      return this._canvas;\n    }\n  },\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Scene.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferHeight: {\n    get: function () {\n      return this._context.drawingBufferHeight;\n    }\n  },\n  /**\n   * The drawingBufferWidth of the underlying GL context.\n   * @memberof Scene.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferWidth|drawingBufferWidth}\n   */\n  drawingBufferWidth: {\n    get: function () {\n      return this._context.drawingBufferWidth;\n    }\n  },\n  /**\n   * The maximum aliased line width, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof Scene.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  maximumAliasedLineWidth: {\n    get: function () {\n      return ContextLimits.maximumAliasedLineWidth;\n    }\n  },\n  /**\n   * The maximum length in pixels of one edge of a cube map, supported by this WebGL implementation.  It will be at least 16.\n   * @memberof Scene.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>GL_MAX_CUBE_MAP_TEXTURE_SIZE</code>.\n   */\n  maximumCubeMapSize: {\n    get: function () {\n      return ContextLimits.maximumCubeMapSize;\n    }\n  },\n  /**\n   * Returns <code>true</code> if the {@link Scene#pickPosition} function is supported.\n   * @memberof Scene.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @see Scene#pickPosition\n   */\n  pickPositionSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    }\n  },\n  /**\n   * Returns <code>true</code> if the {@link Scene#sampleHeight} and {@link Scene#sampleHeightMostDetailed} functions are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @see Scene#sampleHeight\n   * @see Scene#sampleHeightMostDetailed\n   */\n  sampleHeightSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    }\n  },\n  /**\n   * Returns <code>true</code> if the {@link Scene#clampToHeight} and {@link Scene#clampToHeightMostDetailed} functions are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @see Scene#clampToHeight\n   * @see Scene#clampToHeightMostDetailed\n   */\n  clampToHeightSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    }\n  },\n  /**\n   * Returns <code>true</code> if the {@link Scene#invertClassification} is supported.\n   * @memberof Scene.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @see Scene#invertClassification\n   */\n  invertClassificationSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    }\n  },\n  /**\n   * Returns <code>true</code> if specular environment maps are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @see Scene#specularEnvironmentMaps\n   */\n  specularEnvironmentMapsSupported: {\n    get: function () {\n      return SpecularEnvironmentCubeMap.isSupported(this._context);\n    }\n  },\n  /**\n   * The ellipsoid.  If not specified, the default ellipsoid is used.\n   * @memberof Scene.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    }\n  },\n  /**\n   * Gets or sets the depth-test ellipsoid.\n   * @memberof Scene.prototype\n   *\n   * @type {Globe}\n   */\n  globe: {\n    get: function () {\n      return this._globe;\n    },\n    set: function (globe) {\n      this._globe = this._globe && this._globe.destroy();\n      this._globe = globe;\n      updateGlobeListeners(this, globe);\n    }\n  },\n  /**\n   * Gets the collection of primitives.\n   * @memberof Scene.prototype\n   *\n   * @type {PrimitiveCollection}\n   * @readonly\n   */\n  primitives: {\n    get: function () {\n      return this._primitives;\n    }\n  },\n  /**\n   * Gets the collection of ground primitives.\n   * @memberof Scene.prototype\n   *\n   * @type {PrimitiveCollection}\n   * @readonly\n   */\n  groundPrimitives: {\n    get: function () {\n      return this._groundPrimitives;\n    }\n  },\n  /**\n   * Gets or sets the camera.\n   * @memberof Scene.prototype\n   *\n   * @type {Camera}\n   * @readonly\n   */\n  camera: {\n    get: function () {\n      return this._view.camera;\n    },\n    set: function (camera) {\n      // For internal use only. Documentation is still @readonly.\n      this._view.camera = camera;\n    }\n  },\n  /**\n   * Gets or sets the view.\n   * @memberof Scene.prototype\n   *\n   * @type {View}\n   * @readonly\n   *\n   * @private\n   */\n  view: {\n    get: function () {\n      return this._view;\n    },\n    set: function (view) {\n      // For internal use only. Documentation is still @readonly.\n      this._view = view;\n    }\n  },\n  /**\n   * Gets the default view.\n   * @memberof Scene.prototype\n   *\n   * @type {View}\n   * @readonly\n   *\n   * @private\n   */\n  defaultView: {\n    get: function () {\n      return this._defaultView;\n    }\n  },\n  /**\n   * Gets picking functions and state\n   * @memberof Scene.prototype\n   *\n   * @type {Picking}\n   * @readonly\n   *\n   * @private\n   */\n  picking: {\n    get: function () {\n      return this._picking;\n    }\n  },\n  /**\n   * Gets the controller for camera input handling.\n   * @memberof Scene.prototype\n   *\n   * @type {ScreenSpaceCameraController}\n   * @readonly\n   */\n  screenSpaceCameraController: {\n    get: function () {\n      return this._screenSpaceCameraController;\n    }\n  },\n  /**\n   * Get the map projection to use in 2D and Columbus View modes.\n   * @memberof Scene.prototype\n   *\n   * @type {MapProjection}\n   * @readonly\n   *\n   * @default new GeographicProjection()\n   */\n  mapProjection: {\n    get: function () {\n      return this._mapProjection;\n    }\n  },\n  /**\n   * Gets the job scheduler\n   * @memberof Scene.prototype\n   * @type {JobScheduler}\n   * @readonly\n   *\n   * @private\n   */\n  jobScheduler: {\n    get: function () {\n      return this._jobScheduler;\n    }\n  },\n  /**\n   * Gets state information about the current scene. If called outside of a primitive's <code>update</code>\n   * function, the previous frame's state is returned.\n   * @memberof Scene.prototype\n   *\n   * @type {FrameState}\n   * @readonly\n   *\n   * @private\n   */\n  frameState: {\n    get: function () {\n      return this._frameState;\n    }\n  },\n  /**\n   * Gets the environment state.\n   * @memberof Scene.prototype\n   *\n   * @type {EnvironmentState}\n   * @readonly\n   *\n   * @private\n   */\n  environmentState: {\n    get: function () {\n      return this._environmentState;\n    }\n  },\n  /**\n   * Gets the collection of tweens taking place in the scene.\n   * @memberof Scene.prototype\n   *\n   * @type {TweenCollection}\n   * @readonly\n   *\n   * @private\n   */\n  tweens: {\n    get: function () {\n      return this._tweens;\n    }\n  },\n  /**\n   * Gets the collection of image layers that will be rendered on the globe.\n   * @memberof Scene.prototype\n   *\n   * @type {ImageryLayerCollection}\n   * @readonly\n   */\n  imageryLayers: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n      return this.globe.imageryLayers;\n    }\n  },\n  /**\n   * The terrain provider providing surface geometry for the globe.\n   * @memberof Scene.prototype\n   *\n   * @type {TerrainProvider}\n   */\n  terrainProvider: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n      return this.globe.terrainProvider;\n    },\n    set: function (terrainProvider) {\n      // Cancel any in-progress terrain update\n      this._removeTerrainProviderReadyListener = this._removeTerrainProviderReadyListener && this._removeTerrainProviderReadyListener();\n      if (defined(this.globe)) {\n        this.globe.terrainProvider = terrainProvider;\n      }\n    }\n  },\n  /**\n   * Gets an event that's raised when the terrain provider is changed\n   * @memberof Scene.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  terrainProviderChanged: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n      return this.globe.terrainProviderChanged;\n    }\n  },\n  /**\n   * Gets the event that will be raised before the scene is updated or rendered.  Subscribers to the event\n   * receive the Scene instance as the first parameter and the current time as the second parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#postUpdate\n   * @see Scene#preRender\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  preUpdate: {\n    get: function () {\n      return this._preUpdate;\n    }\n  },\n  /**\n   * Gets the event that will be raised immediately after the scene is updated and before the scene is rendered.\n   * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n   * parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#preRender\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  postUpdate: {\n    get: function () {\n      return this._postUpdate;\n    }\n  },\n  /**\n   * Gets the event that will be raised when an error is thrown inside the <code>render</code> function.\n   * The Scene instance and the thrown error are the only two parameters passed to the event handler.\n   * By default, errors are not rethrown after this event is raised, but that can be changed by setting\n   * the <code>rethrowRenderErrors</code> property.\n   * @memberof Scene.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  renderError: {\n    get: function () {\n      return this._renderError;\n    }\n  },\n  /**\n   * Gets the event that will be raised after the scene is updated and immediately before the scene is rendered.\n   * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n   * parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#postUpdate\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  preRender: {\n    get: function () {\n      return this._preRender;\n    }\n  },\n  /**\n   * Gets the event that will be raised immediately after the scene is rendered.  Subscribers to the event\n   * receive the Scene instance as the first parameter and the current time as the second parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#postUpdate\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  postRender: {\n    get: function () {\n      return this._postRender;\n    }\n  },\n  /**\n   * Gets the simulation time when the scene was last rendered. Returns undefined if the scene has not yet been\n   * rendered.\n   * @memberof Scene.prototype\n   *\n   * @type {JulianDate}\n   * @readonly\n   */\n  lastRenderTime: {\n    get: function () {\n      return this._lastRenderTime;\n    }\n  },\n  /**\n   * @memberof Scene.prototype\n   * @private\n   * @readonly\n   */\n  context: {\n    get: function () {\n      return this._context;\n    }\n  },\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When {@link Scene.debugShowFrustums} is <code>true</code>, this contains\n   * properties with statistics about the number of command execute per frustum.\n   * <code>totalCommands</code> is the total number of commands executed, ignoring\n   * overlap. <code>commandsInFrustums</code> is an array with the number of times\n   * commands are executed redundantly, e.g., how many commands overlap two or\n   * three frustums.\n   * </p>\n   *\n   * @memberof Scene.prototype\n   *\n   * @type {object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  debugFrustumStatistics: {\n    get: function () {\n      return this._view.debugFrustumStatistics;\n    }\n  },\n  /**\n   * Gets whether or not the scene is optimized for 3D only viewing.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  scene3DOnly: {\n    get: function () {\n      return this._frameState.scene3DOnly;\n    }\n  },\n  /**\n   * Gets whether or not the scene has order independent translucency enabled.\n   * Note that this only reflects the original construction option, and there are\n   * other factors that could prevent OIT from functioning on a given system configuration.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  orderIndependentTranslucency: {\n    get: function () {\n      return this._useOIT;\n    }\n  },\n  /**\n   * Gets the unique identifier for this scene.\n   * @memberof Scene.prototype\n   * @type {string}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n  /**\n   * Gets or sets the current mode of the scene.\n   * @memberof Scene.prototype\n   * @type {SceneMode}\n   * @default {@link SceneMode.SCENE3D}\n   */\n  mode: {\n    get: function () {\n      return this._mode;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (this.scene3DOnly && value !== SceneMode.SCENE3D) {\n        throw new DeveloperError(\"Only SceneMode.SCENE3D is valid when scene3DOnly is true.\");\n      }\n      //>>includeEnd('debug');\n      if (value === SceneMode.SCENE2D) {\n        this.morphTo2D(0);\n      } else if (value === SceneMode.SCENE3D) {\n        this.morphTo3D(0);\n      } else if (value === SceneMode.COLUMBUS_VIEW) {\n        this.morphToColumbusView(0);\n        //>>includeStart('debug', pragmas.debug);\n      } else {\n        throw new DeveloperError(\"value must be a valid SceneMode enumeration.\");\n        //>>includeEnd('debug');\n      }\n      this._mode = value;\n    }\n  },\n  /**\n   * Gets the number of frustums used in the last frame.\n   * @memberof Scene.prototype\n   * @type {FrustumCommands[]}\n   *\n   * @private\n   */\n  frustumCommandsList: {\n    get: function () {\n      return this._view.frustumCommandsList;\n    }\n  },\n  /**\n   * Gets the number of frustums used in the last frame.\n   * @memberof Scene.prototype\n   * @type {number}\n   *\n   * @private\n   */\n  numberOfFrustums: {\n    get: function () {\n      return this._view.frustumCommandsList.length;\n    }\n  },\n  /**\n   * When <code>true</code>, splits the scene into two viewports with steroscopic views for the left and right eyes.\n   * Used for cardboard and WebVR.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @default false\n   */\n  useWebVR: {\n    get: function () {\n      return this._useWebVR;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (this.camera.frustum instanceof OrthographicFrustum) {\n        throw new DeveloperError(\"VR is unsupported with an orthographic projection.\");\n      }\n      //>>includeEnd('debug');\n      this._useWebVR = value;\n      if (this._useWebVR) {\n        this._frameState.creditDisplay.container.style.visibility = \"hidden\";\n        this._cameraVR = new Camera(this);\n        if (!defined(this._deviceOrientationCameraController)) {\n          this._deviceOrientationCameraController = new DeviceOrientationCameraController(this);\n        }\n        this._aspectRatioVR = this.camera.frustum.aspectRatio;\n      } else {\n        this._frameState.creditDisplay.container.style.visibility = \"visible\";\n        this._cameraVR = undefined;\n        this._deviceOrientationCameraController = this._deviceOrientationCameraController && !this._deviceOrientationCameraController.isDestroyed() && this._deviceOrientationCameraController.destroy();\n        this.camera.frustum.aspectRatio = this._aspectRatioVR;\n        this.camera.frustum.xOffset = 0.0;\n      }\n    }\n  },\n  /**\n   * Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n   * @memberof Scene.prototype\n   * @type {MapMode2D}\n   * @readonly\n   */\n  mapMode2D: {\n    get: function () {\n      return this._mapMode2D;\n    }\n  },\n  /**\n   * Gets or sets the position of the splitter within the viewport.  Valid values are between 0.0 and 1.0.\n   * @memberof Scene.prototype\n   *\n   * @type {number}\n   */\n  splitPosition: {\n    get: function () {\n      return this._frameState.splitPosition;\n    },\n    set: function (value) {\n      this._frameState.splitPosition = value;\n    }\n  },\n  /**\n   * The distance from the camera at which to disable the depth test of billboards, labels and points\n   * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n   * be applied. When less than zero, the depth test should never be applied. Setting the disableDepthTestDistance\n   * property of a billboard, label or point will override this value.\n   * @memberof Scene.prototype\n   * @type {number}\n   * @default 0.0\n   */\n  minimumDisableDepthTestDistance: {\n    get: function () {\n      return this._minimumDisableDepthTestDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value) || value < 0.0) {\n        throw new DeveloperError(\"minimumDisableDepthTestDistance must be greater than or equal to 0.0.\");\n      }\n      //>>includeEnd('debug');\n      this._minimumDisableDepthTestDistance = value;\n    }\n  },\n  /**\n   * Whether or not to use a logarithmic depth buffer. Enabling this option will allow for less frustums in the multi-frustum,\n   * increasing performance. This property relies on fragmentDepth being supported.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   */\n  logarithmicDepthBuffer: {\n    get: function () {\n      return this._logDepthBuffer;\n    },\n    set: function (value) {\n      value = this._context.fragmentDepth && value;\n      if (this._logDepthBuffer !== value) {\n        this._logDepthBuffer = value;\n        this._logDepthBufferDirty = true;\n      }\n    }\n  },\n  /**\n   * The value used for gamma correction. This is only used when rendering with high dynamic range.\n   * @memberof Scene.prototype\n   * @type {number}\n   * @default 2.2\n   */\n  gamma: {\n    get: function () {\n      return this._context.uniformState.gamma;\n    },\n    set: function (value) {\n      this._context.uniformState.gamma = value;\n    }\n  },\n  /**\n   * Whether or not to use high dynamic range rendering.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @default false\n   */\n  highDynamicRange: {\n    get: function () {\n      return this._hdr;\n    },\n    set: function (value) {\n      const context = this._context;\n      const hdr = value && context.depthTexture && (context.colorBufferFloat || context.colorBufferHalfFloat);\n      this._hdrDirty = hdr !== this._hdr;\n      this._hdr = hdr;\n    }\n  },\n  /**\n   * Whether or not high dynamic range rendering is supported.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @readonly\n   * @default true\n   */\n  highDynamicRangeSupported: {\n    get: function () {\n      const context = this._context;\n      return context.depthTexture && (context.colorBufferFloat || context.colorBufferHalfFloat);\n    }\n  },\n  /**\n   * Whether or not the camera is underneath the globe.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @readonly\n   * @default false\n   */\n  cameraUnderground: {\n    get: function () {\n      return this._cameraUnderground;\n    }\n  },\n  /**\n   * The sample rate of multisample antialiasing (values greater than 1 enable MSAA).\n   * @memberof Scene.prototype\n   * @type {number}\n   * @default 4\n   */\n  msaaSamples: {\n    get: function () {\n      return this._msaaSamples;\n    },\n    set: function (value) {\n      value = Math.min(value, ContextLimits.maximumSamples);\n      this._msaaSamples = value;\n    }\n  },\n  /**\n   * Returns <code>true</code> if the Scene's context supports MSAA.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  msaaSupported: {\n    get: function () {\n      return this._context.msaa;\n    }\n  },\n  /**\n   * Ratio between a pixel and a density-independent pixel. Provides a standard unit of\n   * measure for real pixel measurements appropriate to a particular device.\n   *\n   * @memberof Scene.prototype\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  pixelRatio: {\n    get: function () {\n      return this._frameState.pixelRatio;\n    },\n    set: function (value) {\n      this._frameState.pixelRatio = value;\n    }\n  },\n  /**\n   * @private\n   */\n  opaqueFrustumNearOffset: {\n    get: function () {\n      return 0.9999;\n    }\n  },\n  /**\n   * @private\n   */\n  globeHeight: {\n    get: function () {\n      return this._globeHeight;\n    }\n  }\n});\n\n/**\n * Determines if a compressed texture format is supported.\n * @param {string} format The texture format. May be the name of the format or the WebGL extension name, e.g. s3tc or WEBGL_compressed_texture_s3tc.\n * @return {boolean} Whether or not the format is supported.\n */\nScene.prototype.getCompressedTextureFormatSupported = function (format) {\n  const context = this.context;\n  return (format === \"WEBGL_compressed_texture_s3tc\" || format === \"s3tc\") && context.s3tc || (format === \"WEBGL_compressed_texture_pvrtc\" || format === \"pvrtc\") && context.pvrtc || (format === \"WEBGL_compressed_texture_etc\" || format === \"etc\") && context.etc || (format === \"WEBGL_compressed_texture_etc1\" || format === \"etc1\") && context.etc1 || (format === \"WEBGL_compressed_texture_astc\" || format === \"astc\") && context.astc || (format === \"EXT_texture_compression_bptc\" || format === \"bc7\") && context.bc7;\n};\nfunction pickedMetadataInfoChanged(command, frameState) {\n  const oldPickedMetadataInfo = command.pickedMetadataInfo;\n  const newPickedMetadataInfo = frameState.pickedMetadataInfo;\n  if (oldPickedMetadataInfo?.schemaId !== newPickedMetadataInfo?.schemaId) {\n    return true;\n  }\n  if (oldPickedMetadataInfo?.className !== newPickedMetadataInfo?.className) {\n    return true;\n  }\n  if (oldPickedMetadataInfo?.propertyName !== newPickedMetadataInfo?.propertyName) {\n    return true;\n  }\n  return false;\n}\nfunction updateDerivedCommands(scene, command, shadowsDirty) {\n  const frameState = scene._frameState;\n  const context = scene._context;\n  const oit = scene._view.oit;\n  const {\n    lightShadowMaps,\n    lightShadowsEnabled\n  } = frameState.shadowState;\n  let derivedCommands = command.derivedCommands;\n  if (defined(command.pickId)) {\n    derivedCommands.picking = DerivedCommand.createPickDerivedCommand(scene, command, context, derivedCommands.picking);\n  }\n  if (frameState.pickingMetadata && command.pickMetadataAllowed) {\n    command.pickedMetadataInfo = frameState.pickedMetadataInfo;\n    if (defined(command.pickedMetadataInfo)) {\n      derivedCommands.pickingMetadata = DerivedCommand.createPickMetadataDerivedCommand(scene, command, context, derivedCommands.pickingMetadata);\n    }\n  }\n  if (!command.pickOnly) {\n    derivedCommands.depth = DerivedCommand.createDepthOnlyDerivedCommand(scene, command, context, derivedCommands.depth);\n  }\n  derivedCommands.originalCommand = command;\n  if (scene._hdr) {\n    derivedCommands.hdr = DerivedCommand.createHdrCommand(command, context, derivedCommands.hdr);\n    command = derivedCommands.hdr.command;\n    derivedCommands = command.derivedCommands;\n  }\n  if (lightShadowsEnabled && command.receiveShadows) {\n    derivedCommands.shadows = ShadowMap.createReceiveDerivedCommand(lightShadowMaps, command, shadowsDirty, context, derivedCommands.shadows);\n  }\n  if (command.pass === Pass.TRANSLUCENT && defined(oit) && oit.isSupported()) {\n    if (lightShadowsEnabled && command.receiveShadows) {\n      derivedCommands.oit = defined(derivedCommands.oit) ? derivedCommands.oit : {};\n      derivedCommands.oit.shadows = oit.createDerivedCommands(derivedCommands.shadows.receiveCommand, context, derivedCommands.oit.shadows);\n    } else {\n      derivedCommands.oit = oit.createDerivedCommands(command, context, derivedCommands.oit);\n    }\n  }\n}\n\n/**\n * @private\n */\nScene.prototype.updateDerivedCommands = function (command) {\n  const {\n    derivedCommands\n  } = command;\n  if (!defined(derivedCommands)) {\n    // Is not a DrawCommand\n    return;\n  }\n  const frameState = this._frameState;\n  const {\n    shadowState,\n    useLogDepth\n  } = this._frameState;\n  const context = this._context;\n\n  // Update derived commands when any shadow maps become dirty\n  let shadowsDirty = false;\n  const lastDirtyTime = shadowState.lastDirtyTime;\n  if (command.lastDirtyTime !== lastDirtyTime) {\n    command.lastDirtyTime = lastDirtyTime;\n    command.dirty = true;\n    shadowsDirty = true;\n  }\n  const useHdr = this._hdr;\n  const hasLogDepthDerivedCommands = defined(derivedCommands.logDepth);\n  const hasHdrCommands = defined(derivedCommands.hdr);\n  const hasDerivedCommands = defined(derivedCommands.originalCommand);\n  const needsLogDepthDerivedCommands = useLogDepth && !hasLogDepthDerivedCommands;\n  const needsHdrCommands = useHdr && !hasHdrCommands;\n  const needsDerivedCommands = (!useLogDepth || !useHdr) && !hasDerivedCommands;\n  const needsUpdateForMetadataPicking = frameState.pickingMetadata && pickedMetadataInfoChanged(command, frameState);\n  command.dirty = command.dirty || needsLogDepthDerivedCommands || needsHdrCommands || needsDerivedCommands || needsUpdateForMetadataPicking;\n  if (!command.dirty) {\n    return;\n  }\n  command.dirty = false;\n  const {\n    shadowsEnabled,\n    shadowMaps\n  } = shadowState;\n  if (shadowsEnabled && command.castShadows) {\n    derivedCommands.shadows = ShadowMap.createCastDerivedCommand(shadowMaps, command, shadowsDirty, context, derivedCommands.shadows);\n  }\n  if (hasLogDepthDerivedCommands || needsLogDepthDerivedCommands) {\n    derivedCommands.logDepth = DerivedCommand.createLogDepthCommand(command, context, derivedCommands.logDepth);\n    updateDerivedCommands(this, derivedCommands.logDepth.command, shadowsDirty);\n  }\n  if (hasDerivedCommands || needsDerivedCommands) {\n    updateDerivedCommands(this, command, shadowsDirty);\n  }\n};\nconst renderTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.RENDER\n});\nconst preloadTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.PRELOAD\n});\nconst preloadFlightTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.PRELOAD_FLIGHT\n});\nconst requestRenderModeDeferCheckPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.REQUEST_RENDER_MODE_DEFER_CHECK\n});\nconst scratchOccluderBoundingSphere = new BoundingSphere();\nlet scratchOccluder;\n/**\n * Get the central body occluder for the scene.\n * Assumes only one central body occluder, the top-level globe.\n *\n * @param {Scene} scene\n * @returns {Occluder|undefined}\n *\n * @private\n */\nfunction getOccluder(scene) {\n  if (scene._mode !== SceneMode.SCENE3D || !scene.globe?.show || scene._cameraUnderground || scene._globeTranslucencyState.translucent) {\n    return undefined;\n  }\n  scratchOccluderBoundingSphere.radius = scene.ellipsoid.minimumRadius + scene.frameState.minimumTerrainHeight;\n  scratchOccluder = Occluder.fromBoundingSphere(scratchOccluderBoundingSphere, scene.camera.positionWC, scratchOccluder);\n  return scratchOccluder;\n}\n\n/**\n * @private\n * @param {FrameState.Passes} passes\n */\nScene.prototype.clearPasses = function (passes) {\n  passes.render = false;\n  passes.pick = false;\n  passes.pickVoxel = false;\n  passes.depth = false;\n  passes.postProcess = false;\n  passes.offscreen = false;\n};\nfunction updateFrameNumber(scene, frameNumber, time) {\n  const frameState = scene._frameState;\n  frameState.frameNumber = frameNumber;\n  frameState.time = JulianDate.clone(time, frameState.time);\n}\n\n/**\n * @private\n */\nScene.prototype.updateFrameState = function () {\n  const camera = this.camera;\n  const frameState = this._frameState;\n  frameState.commandList.length = 0;\n  frameState.shadowMaps.length = 0;\n  frameState.brdfLutGenerator = this._brdfLutGenerator;\n  frameState.environmentMap = this.skyBox && this.skyBox._cubeMap;\n  frameState.mode = this._mode;\n  frameState.morphTime = this.morphTime;\n  frameState.mapProjection = this.mapProjection;\n  frameState.camera = camera;\n  frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n  frameState.occluder = getOccluder(this);\n  frameState.minimumTerrainHeight = 0.0;\n  frameState.minimumDisableDepthTestDistance = this._minimumDisableDepthTestDistance;\n  frameState.invertClassification = this.invertClassification;\n  frameState.useLogDepth = this._logDepthBuffer && !(this.camera.frustum instanceof OrthographicFrustum || this.camera.frustum instanceof OrthographicOffCenterFrustum);\n  frameState.light = this.light;\n  frameState.cameraUnderground = this._cameraUnderground;\n  frameState.globeTranslucencyState = this._globeTranslucencyState;\n  const {\n    globe\n  } = this;\n  if (defined(globe) && globe._terrainExaggerationChanged) {\n    // Honor a user-set value for the old deprecated globe.terrainExaggeration.\n    // This can be removed when Globe.terrainExaggeration is removed.\n    this.verticalExaggeration = globe._terrainExaggeration;\n    this.verticalExaggerationRelativeHeight = globe._terrainExaggerationRelativeHeight;\n    globe._terrainExaggerationChanged = false;\n  }\n  frameState.verticalExaggeration = this.verticalExaggeration;\n  frameState.verticalExaggerationRelativeHeight = this.verticalExaggerationRelativeHeight;\n  if (defined(this._specularEnvironmentCubeMap) && this._specularEnvironmentCubeMap.ready) {\n    frameState.specularEnvironmentMaps = this._specularEnvironmentCubeMap.texture;\n    frameState.specularEnvironmentMapsMaximumLOD = this._specularEnvironmentCubeMap.maximumMipmapLevel;\n  } else {\n    frameState.specularEnvironmentMaps = undefined;\n    frameState.specularEnvironmentMapsMaximumLOD = undefined;\n  }\n  frameState.sphericalHarmonicCoefficients = this.sphericalHarmonicCoefficients;\n  this._actualInvertClassificationColor = Color.clone(this.invertClassificationColor, this._actualInvertClassificationColor);\n  if (!InvertClassification.isTranslucencySupported(this._context)) {\n    this._actualInvertClassificationColor.alpha = 1.0;\n  }\n  frameState.invertClassificationColor = this._actualInvertClassificationColor;\n  if (defined(this.globe)) {\n    frameState.maximumScreenSpaceError = this.globe.maximumScreenSpaceError;\n  } else {\n    frameState.maximumScreenSpaceError = 2;\n  }\n  this.clearPasses(frameState.passes);\n  frameState.tilesetPassState = undefined;\n};\n\n/**\n * Check whether a draw command will render anything visible in the current Scene,\n * based on its bounding volume.\n *\n * @param {CullingVolume} cullingVolume The culling volume of the current Scene.\n * @param {DrawCommand} [command] The draw command\n * @param {Occluder} [occluder] An occluder that may be in front of the command's bounding volume.\n * @returns {boolean} <code>true</code> if the command's bounding volume is visible in the scene.\n *\n * @private\n */\nScene.prototype.isVisible = function (cullingVolume, command, occluder) {\n  if (!defined(command)) {\n    return false;\n  }\n  const {\n    boundingVolume\n  } = command;\n  if (!defined(boundingVolume) || !command.cull) {\n    return true;\n  }\n  if (cullingVolume.computeVisibility(boundingVolume) === Intersect.OUTSIDE) {\n    return false;\n  }\n  return !defined(occluder) || !command.occlude || !boundingVolume.isOccluded(occluder);\n};\nlet transformFrom2D = new Matrix4(0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);\ntransformFrom2D = Matrix4.inverseTransformation(transformFrom2D, transformFrom2D);\n\n/**\n * Debug code to draw bounding volume for command.  Not optimized!\n * Assumes bounding volume is a bounding sphere or box.\n *\n * @param {DrawCommand} command The draw command for which to render the bounding volume.\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n * @param {Framebuffer} debugFramebuffer The framebuffer where the bounding volume will be rendered.\n *\n * @private\n */\nfunction debugShowBoundingVolume(command, scene, passState, debugFramebuffer) {\n  const frameState = scene._frameState;\n  const context = frameState.context;\n  const boundingVolume = command.boundingVolume;\n  if (defined(scene._debugVolume)) {\n    scene._debugVolume.destroy();\n  }\n  let center = Cartesian3.clone(boundingVolume.center);\n  if (frameState.mode !== SceneMode.SCENE3D) {\n    center = Matrix4.multiplyByPoint(transformFrom2D, center, center);\n    const projection = frameState.mapProjection;\n    const centerCartographic = projection.unproject(center);\n    center = projection.ellipsoid.cartographicToCartesian(centerCartographic);\n  }\n  let geometry;\n  let modelMatrix;\n  const {\n    radius\n  } = boundingVolume;\n  if (defined(radius)) {\n    geometry = EllipsoidGeometry.createGeometry(new EllipsoidGeometry({\n      radii: new Cartesian3(radius, radius, radius),\n      vertexFormat: PerInstanceColorAppearance.FLAT_VERTEX_FORMAT\n    }));\n    modelMatrix = Matrix4.fromTranslation(center);\n  } else {\n    geometry = BoxGeometry.createGeometry(BoxGeometry.fromDimensions({\n      dimensions: new Cartesian3(2.0, 2.0, 2.0),\n      vertexFormat: PerInstanceColorAppearance.FLAT_VERTEX_FORMAT\n    }));\n    modelMatrix = Matrix4.fromRotationTranslation(boundingVolume.halfAxes, center, new Matrix4());\n  }\n  scene._debugVolume = new Primitive({\n    geometryInstances: new GeometryInstance({\n      geometry: GeometryPipeline.toWireframe(geometry),\n      modelMatrix: modelMatrix,\n      attributes: {\n        color: new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0)\n      }\n    }),\n    appearance: new PerInstanceColorAppearance({\n      flat: true,\n      translucent: false\n    }),\n    asynchronous: false\n  });\n  const savedCommandList = frameState.commandList;\n  const commandList = frameState.commandList = [];\n  scene._debugVolume.update(frameState);\n  command = commandList[0];\n  if (frameState.useLogDepth) {\n    const logDepth = DerivedCommand.createLogDepthCommand(command, context);\n    command = logDepth.command;\n  }\n  let framebuffer;\n  if (defined(debugFramebuffer)) {\n    framebuffer = passState.framebuffer;\n    passState.framebuffer = debugFramebuffer;\n  }\n  command.execute(context, passState);\n  if (defined(framebuffer)) {\n    passState.framebuffer = framebuffer;\n  }\n  frameState.commandList = savedCommandList;\n}\n\n/**\n * Execute a single draw command, or one of its derived commands if appropriate for the current render state.\n *\n * @param {DrawCommand} command The command to execute.\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n * @param {Framebuffer} debugFramebuffer The framebuffer where debug QCs will be rendered.\n *\n * @private\n */\nfunction executeCommand(command, scene, passState, debugFramebuffer) {\n  const frameState = scene._frameState;\n  const context = scene._context;\n  if (defined(scene.debugCommandFilter) && !scene.debugCommandFilter(command)) {\n    return;\n  }\n  if (command instanceof ClearCommand) {\n    command.execute(context, passState);\n    return;\n  }\n  if (command.debugShowBoundingVolume && defined(command.boundingVolume)) {\n    debugShowBoundingVolume(command, scene, passState, debugFramebuffer);\n  }\n  if (frameState.useLogDepth && defined(command.derivedCommands.logDepth)) {\n    command = command.derivedCommands.logDepth.command;\n  }\n  const passes = frameState.passes;\n  if (!passes.pick && !passes.pickVoxel && !passes.depth && scene._hdr && defined(command.derivedCommands) && defined(command.derivedCommands.hdr)) {\n    command = command.derivedCommands.hdr.command;\n  }\n  if (passes.pick || passes.depth) {\n    if (passes.pick && !passes.depth) {\n      if (frameState.pickingMetadata && defined(command.derivedCommands.pickingMetadata)) {\n        command = command.derivedCommands.pickingMetadata.pickMetadataCommand;\n        command.execute(context, passState);\n        return;\n      }\n      if (!frameState.pickingMetadata && defined(command.derivedCommands.picking)) {\n        command = command.derivedCommands.picking.pickCommand;\n        command.execute(context, passState);\n        return;\n      }\n    } else if (defined(command.derivedCommands.depth)) {\n      command = command.derivedCommands.depth.depthOnlyCommand;\n      command.execute(context, passState);\n      return;\n    }\n  }\n  if (scene.debugShowCommands || scene.debugShowFrustums) {\n    scene._debugInspector.executeDebugShowFrustumsCommand(scene, command, passState);\n    return;\n  }\n  if (frameState.shadowState.lightShadowsEnabled && command.receiveShadows && defined(command.derivedCommands.shadows)) {\n    // If the command receives shadows, execute the derived shadows command.\n    // Some commands, such as OIT derived commands, do not have derived shadow commands themselves\n    // and instead shadowing is built-in. In this case execute the command regularly below.\n    command.derivedCommands.shadows.receiveCommand.execute(context, passState);\n  } else {\n    command.execute(context, passState);\n  }\n}\n\n/**\n * Execute a single ID draw command, used to render information for picking.\n *\n * @param {DrawCommand} command The command to execute.\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n *\n * @private\n */\nfunction executeIdCommand(command, scene, passState) {\n  const {\n    derivedCommands\n  } = command;\n  if (!defined(derivedCommands)) {\n    return;\n  }\n  const frameState = scene._frameState;\n  const context = scene._context;\n  if (frameState.useLogDepth && defined(derivedCommands.logDepth)) {\n    command = derivedCommands.logDepth.command;\n  }\n  const {\n    picking,\n    pickingMetadata,\n    depth\n  } = command.derivedCommands;\n  if (defined(pickingMetadata)) {\n    command = derivedCommands.pickingMetadata.pickMetadataCommand;\n    command.execute(context, passState);\n  }\n  if (defined(picking)) {\n    command = picking.pickCommand;\n    command.execute(context, passState);\n  } else if (defined(depth)) {\n    command = depth.depthOnlyCommand;\n    command.execute(context, passState);\n  }\n}\nfunction backToFront(a, b, position) {\n  return b.boundingVolume.distanceSquaredTo(position) - a.boundingVolume.distanceSquaredTo(position);\n}\nfunction frontToBack(a, b, position) {\n  // When distances are equal equal favor sorting b before a. This gives render priority to commands later in the list.\n  return a.boundingVolume.distanceSquaredTo(position) - b.boundingVolume.distanceSquaredTo(position) + CesiumMath.EPSILON12;\n}\nfunction executeTranslucentCommandsBackToFront(scene, executeFunction, passState, commands, invertClassification) {\n  mergeSort(commands, backToFront, scene.camera.positionWC);\n  if (defined(invertClassification)) {\n    executeFunction(invertClassification.unclassifiedCommand, scene, passState);\n  }\n  for (let i = 0; i < commands.length; ++i) {\n    executeFunction(commands[i], scene, passState);\n  }\n}\nfunction executeTranslucentCommandsFrontToBack(scene, executeFunction, passState, commands, invertClassification) {\n  mergeSort(commands, frontToBack, scene.camera.positionWC);\n  if (defined(invertClassification)) {\n    executeFunction(invertClassification.unclassifiedCommand, scene, passState);\n  }\n  for (let i = 0; i < commands.length; ++i) {\n    executeFunction(commands[i], scene, passState);\n  }\n}\n\n/**\n * Execute commands to render voxels in the scene.\n *\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n * @param {FrustumCommands} frustumCommands The draw commands for the current frustum.\n *\n * @private\n */\nfunction performVoxelsPass(scene, passState, frustumCommands) {\n  scene.context.uniformState.updatePass(Pass.VOXELS);\n  const commands = frustumCommands.commands[Pass.VOXELS];\n  commands.length = frustumCommands.indices[Pass.VOXELS];\n  mergeSort(commands, backToFront, scene.camera.positionWC);\n  for (let i = 0; i < commands.length; ++i) {\n    executeCommand(commands[i], scene, passState);\n  }\n}\nconst scratchPerspectiveFrustum = new PerspectiveFrustum();\nconst scratchPerspectiveOffCenterFrustum = new PerspectiveOffCenterFrustum();\nconst scratchOrthographicFrustum = new OrthographicFrustum();\nconst scratchOrthographicOffCenterFrustum = new OrthographicOffCenterFrustum();\n/**\n * Create a working frustum from the original camera frustum.\n *\n * @param {Camera} camera The camera\n * @returns {PerspectiveFrustum|PerspectiveOffCenterFrustum|OrthographicFrustum|OrthographicOffCenterFrustum} The working frustum\n *\n * @private\n */\nfunction createWorkingFrustum(camera) {\n  const {\n    frustum\n  } = camera;\n  if (defined(frustum.fov)) {\n    return frustum.clone(scratchPerspectiveFrustum);\n  }\n  if (defined(frustum.infiniteProjectionMatrix)) {\n    return frustum.clone(scratchPerspectiveOffCenterFrustum);\n  }\n  if (defined(frustum.width)) {\n    return frustum.clone(scratchOrthographicFrustum);\n  }\n  return frustum.clone(scratchOrthographicOffCenterFrustum);\n}\n\n/**\n * Determine how translucent surfaces will be handled.\n *\n * When OIT is enabled, then this will delegate to OIT.executeCommands.\n * Otherwise, it will just be executeTranslucentCommandsBackToFront\n * for render passes, or executeTranslucentCommandsFrontToBack for\n * other passes.\n *\n * @param {Scene} scene The scene.\n * @returns {Function} A function to execute translucent commands.\n */\nfunction obtainTranslucentCommandExecutionFunction(scene) {\n  if (scene._environmentState.useOIT) {\n    if (!defined(scene._executeOITFunction)) {\n      const {\n        view,\n        context\n      } = scene;\n      scene._executeOITFunction = function (scene, executeFunction, passState, commands, invertClassification) {\n        view.globeDepth.prepareColorTextures(context);\n        view.oit.executeCommands(scene, executeFunction, passState, commands, invertClassification);\n      };\n    }\n    return scene._executeOITFunction;\n  }\n  if (scene.frameState.passes.render) {\n    return executeTranslucentCommandsBackToFront;\n  }\n  return executeTranslucentCommandsFrontToBack;\n}\n\n/**\n * Execute draw commands to render translucent objects in the scene.\n *\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n * @param {FrustumCommands} frustumCommands The draw commands for the current frustum.\n *\n * @private\n */\nfunction performTranslucentPass(scene, passState, frustumCommands) {\n  const {\n    frameState,\n    context\n  } = scene;\n  const {\n    pick,\n    pickVoxel\n  } = frameState.passes;\n  const picking = pick || pickVoxel;\n  let invertClassification;\n  if (!picking && scene._environmentState.useInvertClassification && frameState.invertClassificationColor.alpha < 1.0) {\n    // Fullscreen pass to copy unclassified fragments when alpha < 1.0.\n    // Not executed when undefined.\n    invertClassification = scene._invertClassification;\n  }\n  const executeTranslucentCommands = obtainTranslucentCommandExecutionFunction(scene);\n  context.uniformState.updatePass(Pass.TRANSLUCENT);\n  const commands = frustumCommands.commands[Pass.TRANSLUCENT];\n  commands.length = frustumCommands.indices[Pass.TRANSLUCENT];\n  executeTranslucentCommands(scene, executeCommand, passState, commands, invertClassification);\n}\n\n/**\n * Execute commands for classification of translucent 3D Tiles.\n *\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n * @param {FrustumCommands} frustumCommands The draw commands for the current frustum.\n *\n * @private\n */\nfunction performTranslucent3DTilesClassification(scene, passState, frustumCommands) {\n  const {\n    translucentTileClassification,\n    globeDepth\n  } = scene._view;\n  const has3DTilesClassificationCommands = frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION] > 0;\n  if (!has3DTilesClassificationCommands || !translucentTileClassification.isSupported()) {\n    return;\n  }\n  const commands = frustumCommands.commands[Pass.TRANSLUCENT];\n  translucentTileClassification.executeTranslucentCommands(scene, executeCommand, passState, commands, globeDepth.depthStencilTexture);\n  translucentTileClassification.executeClassificationCommands(scene, executeCommand, passState, frustumCommands);\n}\n\n/**\n * Execute the draw commands for all the render passes.\n *\n * @param {Scene} scene\n * @param {PassState} passState\n *\n * @private\n */\nfunction executeCommands(scene, passState) {\n  const {\n    camera,\n    context,\n    frameState\n  } = scene;\n  const {\n    uniformState\n  } = context;\n  uniformState.updateCamera(camera);\n  const frustum = createWorkingFrustum(camera);\n  frustum.near = camera.frustum.near;\n  frustum.far = camera.frustum.far;\n  const passes = frameState.passes;\n  const picking = passes.pick || passes.pickVoxel;\n\n  // Ideally, we would render the sky box and atmosphere last for\n  // early-z, but we would have to draw it in each frustum.\n  // Do not render environment primitives during a pick pass since they do not generate picking commands.\n  if (!picking) {\n    renderEnvironment(scene, passState);\n  }\n  const {\n    clearGlobeDepth,\n    renderTranslucentDepthForPick,\n    useDepthPlane,\n    useGlobeDepthFramebuffer,\n    useInvertClassification,\n    usePostProcessSelected\n  } = scene._environmentState;\n  const {\n    globeDepth,\n    globeTranslucencyFramebuffer,\n    sceneFramebuffer,\n    frustumCommandsList\n  } = scene._view;\n  const numFrustums = frustumCommandsList.length;\n  const globeTranslucencyState = scene._globeTranslucencyState;\n  const clearDepth = scene._depthClearCommand;\n  const clearStencil = scene._stencilClearCommand;\n  const clearClassificationStencil = scene._classificationStencilClearCommand;\n  const depthPlane = scene._depthPlane;\n  const height2D = camera.position.z;\n  function performPass(frustumCommands, passId) {\n    uniformState.updatePass(passId);\n    const commands = frustumCommands.commands[passId];\n    const commandCount = frustumCommands.indices[passId];\n    for (let j = 0; j < commandCount; ++j) {\n      executeCommand(commands[j], scene, passState);\n    }\n    return commandCount;\n  }\n  function performIdPass(frustumCommands, passId) {\n    uniformState.updatePass(passId);\n    const commands = frustumCommands.commands[passId];\n    const commandCount = frustumCommands.indices[passId];\n    for (let j = 0; j < commandCount; ++j) {\n      executeIdCommand(commands[j], scene, passState);\n    }\n  }\n\n  // Execute commands in each frustum in back to front order\n  for (let i = 0; i < numFrustums; ++i) {\n    const index = numFrustums - i - 1;\n    const frustumCommands = frustumCommandsList[index];\n    if (scene.mode === SceneMode.SCENE2D) {\n      // To avoid z-fighting in 2D, move the camera to just before the frustum\n      // and scale the frustum depth to be in [1.0, nearToFarDistance2D].\n      camera.position.z = height2D - frustumCommands.near + 1.0;\n      frustum.far = Math.max(1.0, frustumCommands.far - frustumCommands.near);\n      frustum.near = 1.0;\n      uniformState.update(frameState);\n      uniformState.updateFrustum(frustum);\n    } else {\n      // Avoid tearing artifacts between adjacent frustums in the opaque passes\n      frustum.near = index !== 0 ? frustumCommands.near * scene.opaqueFrustumNearOffset : frustumCommands.near;\n      frustum.far = frustumCommands.far;\n      uniformState.updateFrustum(frustum);\n    }\n    clearDepth.execute(context, passState);\n    if (context.stencilBuffer) {\n      clearStencil.execute(context, passState);\n    }\n    if (globeTranslucencyState.translucent) {\n      uniformState.updatePass(Pass.GLOBE);\n      globeTranslucencyState.executeGlobeCommands(frustumCommands, executeCommand, globeTranslucencyFramebuffer, scene, passState);\n    } else {\n      performPass(frustumCommands, Pass.GLOBE);\n    }\n    if (useGlobeDepthFramebuffer) {\n      globeDepth.executeCopyDepth(context, passState);\n    }\n\n    // Draw terrain classification\n    if (!renderTranslucentDepthForPick) {\n      if (globeTranslucencyState.translucent) {\n        uniformState.updatePass(Pass.TERRAIN_CLASSIFICATION);\n        globeTranslucencyState.executeGlobeClassificationCommands(frustumCommands, executeCommand, globeTranslucencyFramebuffer, scene, passState);\n      } else {\n        performPass(frustumCommands, Pass.TERRAIN_CLASSIFICATION);\n      }\n    }\n    if (clearGlobeDepth) {\n      clearDepth.execute(context, passState);\n      if (useDepthPlane) {\n        depthPlane.execute(context, passState);\n      }\n    }\n    let commandCount;\n    if (!useInvertClassification || picking || renderTranslucentDepthForPick) {\n      // Common/fastest path. Draw 3D Tiles and classification normally.\n\n      // Draw 3D Tiles\n      commandCount = performPass(frustumCommands, Pass.CESIUM_3D_TILE);\n      if (commandCount > 0) {\n        if (useGlobeDepthFramebuffer) {\n          globeDepth.prepareColorTextures(context, clearGlobeDepth);\n          globeDepth.executeUpdateDepth(context, passState, globeDepth.depthStencilTexture);\n        }\n\n        // Draw classifications. Modifies 3D Tiles color.\n        if (!renderTranslucentDepthForPick) {\n          commandCount = performPass(frustumCommands, Pass.CESIUM_3D_TILE_CLASSIFICATION);\n        }\n      }\n    } else {\n      // When the invert classification color is opaque:\n      //    Main FBO (FBO1):                   Main_Color   + Main_DepthStencil\n      //    Invert classification FBO (FBO2) : Invert_Color + Main_DepthStencil\n      //\n      //    1. Clear FBO2 color to vec4(0.0) for each frustum\n      //    2. Draw 3D Tiles to FBO2\n      //    3. Draw classification to FBO2\n      //    4. Fullscreen pass to FBO1, draw Invert_Color when:\n      //           * Main_DepthStencil has the stencil bit set > 0 (classified)\n      //    5. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n      //           * Main_DepthStencil has stencil bit set to 0 (unclassified) and\n      //           * Invert_Color !== vec4(0.0)\n      //\n      // When the invert classification color is translucent:\n      //    Main FBO (FBO1):                  Main_Color         + Main_DepthStencil\n      //    Invert classification FBO (FBO2): Invert_Color       + Invert_DepthStencil\n      //    IsClassified FBO (FBO3):          IsClassified_Color + Invert_DepthStencil\n      //\n      //    1. Clear FBO2 and FBO3 color to vec4(0.0), stencil to 0, and depth to 1.0\n      //    2. Draw 3D Tiles to FBO2\n      //    3. Draw classification to FBO2\n      //    4. Fullscreen pass to FBO3, draw any color when\n      //           * Invert_DepthStencil has the stencil bit set > 0 (classified)\n      //    5. Fullscreen pass to FBO1, draw Invert_Color when:\n      //           * Invert_Color !== vec4(0.0) and\n      //           * IsClassified_Color !== vec4(0.0)\n      //    6. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n      //           * Invert_Color !== vec4(0.0) and\n      //           * IsClassified_Color === vec4(0.0)\n      //\n      // NOTE: Step six when translucent invert color occurs after the TRANSLUCENT pass\n      //\n      scene._invertClassification.clear(context, passState);\n      const opaqueClassificationFramebuffer = passState.framebuffer;\n      passState.framebuffer = scene._invertClassification._fbo.framebuffer;\n\n      // Draw normally\n      commandCount = performPass(frustumCommands, Pass.CESIUM_3D_TILE);\n      if (useGlobeDepthFramebuffer) {\n        scene._invertClassification.prepareTextures(context);\n        globeDepth.executeUpdateDepth(context, passState, scene._invertClassification._fbo.getDepthStencilTexture());\n      }\n\n      // Set stencil\n      commandCount = performPass(frustumCommands, Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW);\n      passState.framebuffer = opaqueClassificationFramebuffer;\n\n      // Fullscreen pass to copy classified fragments\n      scene._invertClassification.executeClassified(context, passState);\n      if (frameState.invertClassificationColor.alpha === 1.0) {\n        // Fullscreen pass to copy unclassified fragments when alpha == 1.0\n        scene._invertClassification.executeUnclassified(context, passState);\n      }\n\n      // Clear stencil set by the classification for the next classification pass\n      if (commandCount > 0 && context.stencilBuffer) {\n        clearClassificationStencil.execute(context, passState);\n      }\n\n      // Draw style over classification.\n      commandCount = performPass(frustumCommands, Pass.CESIUM_3D_TILE_CLASSIFICATION);\n    }\n    if (commandCount > 0 && context.stencilBuffer) {\n      clearStencil.execute(context, passState);\n    }\n    performVoxelsPass(scene, passState, frustumCommands);\n    performPass(frustumCommands, Pass.OPAQUE);\n    if (index !== 0 && scene.mode !== SceneMode.SCENE2D) {\n      // Do not overlap frustums in the translucent pass to avoid blending artifacts\n      frustum.near = frustumCommands.near;\n      uniformState.updateFrustum(frustum);\n    }\n    performTranslucentPass(scene, passState, frustumCommands);\n    performTranslucent3DTilesClassification(scene, passState, frustumCommands);\n    if (context.depthTexture && scene.useDepthPicking && (useGlobeDepthFramebuffer || renderTranslucentDepthForPick)) {\n      // PERFORMANCE_IDEA: Use MRT to avoid the extra copy.\n      const pickDepth = scene._picking.getPickDepth(scene, index);\n      pickDepth.update(context, globeDepth.depthStencilTexture);\n      pickDepth.executeCopyDepth(context, passState);\n    }\n    if (picking || !usePostProcessSelected) {\n      continue;\n    }\n    const originalFramebuffer = passState.framebuffer;\n    passState.framebuffer = sceneFramebuffer.getIdFramebuffer();\n\n    // reset frustum\n    frustum.near = index !== 0 ? frustumCommands.near * scene.opaqueFrustumNearOffset : frustumCommands.near;\n    frustum.far = frustumCommands.far;\n    uniformState.updateFrustum(frustum);\n    if (globeTranslucencyState.translucent) {\n      uniformState.updatePass(Pass.GLOBE);\n      globeTranslucencyState.executeGlobeCommands(frustumCommands, executeIdCommand, globeTranslucencyFramebuffer, scene, passState);\n    } else {\n      performIdPass(frustumCommands, Pass.GLOBE);\n    }\n    if (clearGlobeDepth) {\n      clearDepth.framebuffer = passState.framebuffer;\n      clearDepth.execute(context, passState);\n      clearDepth.framebuffer = undefined;\n    }\n    if (clearGlobeDepth && useDepthPlane) {\n      depthPlane.execute(context, passState);\n    }\n    performIdPass(frustumCommands, Pass.CESIUM_3D_TILE);\n    performIdPass(frustumCommands, Pass.OPAQUE);\n    performIdPass(frustumCommands, Pass.TRANSLUCENT);\n    passState.framebuffer = originalFramebuffer;\n  }\n}\n\n/**\n * Render the sky, atmosphere, sun, and moon\n *\n * @param {Scene} scene The scene.\n * @param {PassState} passState The render state for the pass.\n *\n * @private\n */\nfunction renderEnvironment(scene, passState) {\n  const {\n    context,\n    environmentState,\n    view\n  } = scene;\n  context.uniformState.updatePass(Pass.ENVIRONMENT);\n  if (defined(environmentState.skyBoxCommand)) {\n    executeCommand(environmentState.skyBoxCommand, scene, passState);\n  }\n  if (environmentState.isSkyAtmosphereVisible) {\n    executeCommand(environmentState.skyAtmosphereCommand, scene, passState);\n  }\n  if (environmentState.isSunVisible) {\n    environmentState.sunDrawCommand.execute(context, passState);\n    if (scene.sunBloom && !environmentState.useWebVR) {\n      let framebuffer;\n      if (environmentState.useGlobeDepthFramebuffer) {\n        framebuffer = view.globeDepth.framebuffer;\n      } else if (environmentState.usePostProcess) {\n        framebuffer = view.sceneFramebuffer.framebuffer;\n      } else {\n        framebuffer = environmentState.originalFramebuffer;\n      }\n      scene._sunPostProcess.execute(context);\n      scene._sunPostProcess.copy(context, framebuffer);\n      passState.framebuffer = framebuffer;\n    }\n  }\n\n  // Moon can be seen through the atmosphere, since the sun is rendered after the atmosphere.\n  if (environmentState.isMoonVisible) {\n    environmentState.moonCommand.execute(context, passState);\n  }\n}\n\n/**\n * Execute compute commands from the scene's environment state and computeCommandList\n *\n * @param {Scene} scene\n *\n * @private\n */\nfunction executeComputeCommands(scene) {\n  scene.context.uniformState.updatePass(Pass.COMPUTE);\n  const sunComputeCommand = scene._environmentState.sunComputeCommand;\n  if (defined(sunComputeCommand)) {\n    sunComputeCommand.execute(scene._computeEngine);\n  }\n  const commandList = scene._computeCommandList;\n  for (let i = 0; i < commandList.length; ++i) {\n    commandList[i].execute(scene._computeEngine);\n  }\n}\n\n/**\n * Execute the draw commands for overlays\n *\n * @param {Scene} scene\n * @param {PassState} passState\n *\n * @private\n */\nfunction executeOverlayCommands(scene, passState) {\n  scene.context.uniformState.updatePass(Pass.OVERLAY);\n  const context = scene.context;\n  const commandList = scene._overlayCommandList;\n  for (let i = 0; i < commandList.length; ++i) {\n    commandList[i].execute(context, passState);\n  }\n}\n\n/**\n * Add the scene's draw commands into the shadow map passes.\n *\n * @param {Scene} scene\n * @param {DrawCommand[]} commandList\n * @param {ShadowMap} shadowMap\n *\n * @private\n */\nfunction insertShadowCastCommands(scene, commandList, shadowMap) {\n  const {\n    shadowMapCullingVolume,\n    isPointLight,\n    passes\n  } = shadowMap;\n  const numberOfPasses = passes.length;\n  const shadowedPasses = [Pass.GLOBE, Pass.CESIUM_3D_TILE, Pass.OPAQUE, Pass.TRANSLUCENT];\n  for (let i = 0; i < commandList.length; ++i) {\n    const command = commandList[i];\n    scene.updateDerivedCommands(command);\n    if (!command.castShadows || shadowedPasses.indexOf(command.pass) < 0 || !scene.isVisible(shadowMapCullingVolume, command)) {\n      continue;\n    }\n    if (isPointLight) {\n      for (let k = 0; k < numberOfPasses; ++k) {\n        passes[k].commandList.push(command);\n      }\n    } else if (numberOfPasses === 1) {\n      passes[0].commandList.push(command);\n    } else {\n      let wasVisible = false;\n      // Loop over cascades from largest to smallest\n      for (let j = numberOfPasses - 1; j >= 0; --j) {\n        const cascadeVolume = passes[j].cullingVolume;\n        if (scene.isVisible(cascadeVolume, command)) {\n          passes[j].commandList.push(command);\n          wasVisible = true;\n        } else if (wasVisible) {\n          // If it was visible in the previous cascade but now isn't\n          // then there is no need to check any more cascades\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Execute the draw commands to cast shadows into the shadow maps.\n *\n * @param {Scene} scene\n *\n * @private\n */\nfunction executeShadowMapCastCommands(scene) {\n  const {\n    shadowState,\n    commandList\n  } = scene.frameState;\n  const {\n    shadowsEnabled,\n    shadowMaps\n  } = shadowState;\n  if (!shadowsEnabled) {\n    return;\n  }\n  const {\n    context\n  } = scene;\n  const {\n    uniformState\n  } = context;\n  for (let i = 0; i < shadowMaps.length; ++i) {\n    const shadowMap = shadowMaps[i];\n    if (shadowMap.outOfView) {\n      continue;\n    }\n\n    // Reset the command lists\n    const {\n      passes\n    } = shadowMap;\n    for (let j = 0; j < passes.length; ++j) {\n      passes[j].commandList.length = 0;\n    }\n\n    // Insert the primitive/model commands into the shadow map command lists\n    insertShadowCastCommands(scene, commandList, shadowMap);\n    for (let j = 0; j < passes.length; ++j) {\n      const pass = shadowMap.passes[j];\n      const {\n        camera,\n        commandList\n      } = pass;\n      uniformState.updateCamera(camera);\n      shadowMap.updatePass(context, j);\n      for (let k = 0; k < commandList.length; ++k) {\n        const command = commandList[k];\n        // Set the correct pass before rendering into the shadow map because some shaders\n        // conditionally render based on whether the pass is translucent or opaque.\n        uniformState.updatePass(command.pass);\n        const castCommand = command.derivedCommands.shadows.castCommands[i];\n        executeCommand(castCommand, scene, pass.passState);\n      }\n    }\n  }\n}\nconst scratchEyeTranslation = new Cartesian3();\n\n/**\n * Update and clear framebuffers, and execute draw commands.\n *\n * @param {PassState} passState State specific to each render pass.\n * @param {Color} backgroundColor\n *\n * @private\n */\nScene.prototype.updateAndExecuteCommands = function (passState, backgroundColor) {\n  updateAndClearFramebuffers(this, passState, backgroundColor);\n  if (this._environmentState.useWebVR) {\n    executeWebVRCommands(this, passState, backgroundColor);\n  } else if (this._frameState.mode !== SceneMode.SCENE2D || this._mapMode2D === MapMode2D.ROTATE) {\n    executeCommandsInViewport(true, this, passState);\n  } else {\n    execute2DViewportCommands(this, passState);\n  }\n};\n\n/**\n * Execute the draw commands to render the scene into the stereo viewports of a WebVR application.\n *\n * @param {Scene} scene\n * @param {PassState} passState\n *\n * @private\n */\nfunction executeWebVRCommands(scene, passState) {\n  const view = scene._view;\n  const camera = view.camera;\n  const environmentState = scene._environmentState;\n  const renderTranslucentDepthForPick = environmentState.renderTranslucentDepthForPick;\n  updateAndRenderPrimitives(scene);\n  view.createPotentiallyVisibleSet(scene);\n  executeComputeCommands(scene);\n  if (!renderTranslucentDepthForPick) {\n    executeShadowMapCastCommands(scene);\n  }\n\n  // Based on Calculating Stereo pairs by Paul Bourke\n  // http://paulbourke.net/stereographics/stereorender/\n  const viewport = passState.viewport;\n  viewport.x = 0;\n  viewport.y = 0;\n  viewport.width = viewport.width * 0.5;\n  const savedCamera = Camera.clone(camera, scene._cameraVR);\n  savedCamera.frustum = camera.frustum;\n  const near = camera.frustum.near;\n  const fo = near * defaultValue(scene.focalLength, 5.0);\n  const eyeSeparation = defaultValue(scene.eyeSeparation, fo / 30.0);\n  const eyeTranslation = Cartesian3.multiplyByScalar(savedCamera.right, eyeSeparation * 0.5, scratchEyeTranslation);\n  camera.frustum.aspectRatio = viewport.width / viewport.height;\n  const offset = 0.5 * eyeSeparation * near / fo;\n  Cartesian3.add(savedCamera.position, eyeTranslation, camera.position);\n  camera.frustum.xOffset = offset;\n  executeCommands(scene, passState);\n  viewport.x = viewport.width;\n  Cartesian3.subtract(savedCamera.position, eyeTranslation, camera.position);\n  camera.frustum.xOffset = -offset;\n  executeCommands(scene, passState);\n  Camera.clone(savedCamera, camera);\n}\nconst scratch2DViewportCartographic = new Cartographic(Math.PI, CesiumMath.PI_OVER_TWO);\nconst scratch2DViewportMaxCoord = new Cartesian3();\nconst scratch2DViewportSavedPosition = new Cartesian3();\nconst scratch2DViewportTransform = new Matrix4();\nconst scratch2DViewportCameraTransform = new Matrix4();\nconst scratch2DViewportEyePoint = new Cartesian3();\nconst scratch2DViewportWindowCoords = new Cartesian3();\nconst scratch2DViewport = new BoundingRectangle();\n\n/**\n * Execute the draw commands to render into a 2D viewport.\n *\n * @param {Scene} scene\n * @param {PassState} passState\n *\n * @private\n */\nfunction execute2DViewportCommands(scene, passState) {\n  const {\n    frameState,\n    camera\n  } = scene;\n  const {\n    uniformState\n  } = scene.context;\n  const originalViewport = passState.viewport;\n  const viewport = BoundingRectangle.clone(originalViewport, scratch2DViewport);\n  passState.viewport = viewport;\n  const maxCartographic = scratch2DViewportCartographic;\n  const maxCoord = scratch2DViewportMaxCoord;\n  const projection = scene.mapProjection;\n  projection.project(maxCartographic, maxCoord);\n  const position = Cartesian3.clone(camera.position, scratch2DViewportSavedPosition);\n  const transform = Matrix4.clone(camera.transform, scratch2DViewportCameraTransform);\n  const frustum = camera.frustum.clone();\n  camera._setTransform(Matrix4.IDENTITY);\n  const viewportTransformation = Matrix4.computeViewportTransformation(viewport, 0.0, 1.0, scratch2DViewportTransform);\n  const projectionMatrix = camera.frustum.projectionMatrix;\n  const x = camera.positionWC.y;\n  const eyePoint = Cartesian3.fromElements(CesiumMath.sign(x) * maxCoord.x - x, 0.0, -camera.positionWC.x, scratch2DViewportEyePoint);\n  const windowCoordinates = Transforms.pointToGLWindowCoordinates(projectionMatrix, viewportTransformation, eyePoint, scratch2DViewportWindowCoords);\n  windowCoordinates.x = Math.floor(windowCoordinates.x);\n  const viewportX = viewport.x;\n  const viewportWidth = viewport.width;\n  if (x === 0.0 || windowCoordinates.x <= viewportX || windowCoordinates.x >= viewportX + viewportWidth) {\n    executeCommandsInViewport(true, scene, passState);\n  } else if (Math.abs(viewportX + viewportWidth * 0.5 - windowCoordinates.x) < 1.0) {\n    viewport.width = windowCoordinates.x - viewport.x;\n    camera.position.x *= CesiumMath.sign(camera.position.x);\n    camera.frustum.right = 0.0;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    uniformState.update(frameState);\n    executeCommandsInViewport(true, scene, passState);\n    viewport.x = windowCoordinates.x;\n    camera.position.x = -camera.position.x;\n    camera.frustum.right = -camera.frustum.left;\n    camera.frustum.left = 0.0;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    uniformState.update(frameState);\n    executeCommandsInViewport(false, scene, passState);\n  } else if (windowCoordinates.x > viewportX + viewportWidth * 0.5) {\n    viewport.width = windowCoordinates.x - viewportX;\n    const right = camera.frustum.right;\n    camera.frustum.right = maxCoord.x - x;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    uniformState.update(frameState);\n    executeCommandsInViewport(true, scene, passState);\n    viewport.x = windowCoordinates.x;\n    viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n    camera.position.x = -camera.position.x;\n    camera.frustum.left = -camera.frustum.right;\n    camera.frustum.right = right - camera.frustum.right * 2.0;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    uniformState.update(frameState);\n    executeCommandsInViewport(false, scene, passState);\n  } else {\n    viewport.x = windowCoordinates.x;\n    viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n    const left = camera.frustum.left;\n    camera.frustum.left = -maxCoord.x - x;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    uniformState.update(frameState);\n    executeCommandsInViewport(true, scene, passState);\n    viewport.x = viewportX;\n    viewport.width = windowCoordinates.x - viewportX;\n    camera.position.x = -camera.position.x;\n    camera.frustum.right = -camera.frustum.left;\n    camera.frustum.left = left - camera.frustum.left * 2.0;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    uniformState.update(frameState);\n    executeCommandsInViewport(false, scene, passState);\n  }\n  camera._setTransform(transform);\n  Cartesian3.clone(position, camera.position);\n  camera.frustum = frustum.clone();\n  passState.viewport = originalViewport;\n}\n\n/**\n * Execute the draw commands to render the scene into the viewport.\n * If this is the first viewport rendered, the framebuffers will be cleared to the background color.\n *\n * @param {boolean} firstViewport <code>true</code> if this is the first viewport rendered.\n * @param {Scene} scene\n * @param {PassState} passState\n *\n * @private\n */\nfunction executeCommandsInViewport(firstViewport, scene, passState) {\n  const view = scene._view;\n  const {\n    renderTranslucentDepthForPick\n  } = scene._environmentState;\n  if (!firstViewport) {\n    scene.frameState.commandList.length = 0;\n  }\n  updateAndRenderPrimitives(scene);\n  view.createPotentiallyVisibleSet(scene);\n  if (firstViewport) {\n    executeComputeCommands(scene);\n    if (!renderTranslucentDepthForPick) {\n      executeShadowMapCastCommands(scene);\n    }\n  }\n  executeCommands(scene, passState);\n}\nconst scratchCullingVolume = new CullingVolume();\n\n/**\n * @private\n */\nScene.prototype.updateEnvironment = function () {\n  const frameState = this._frameState;\n  const view = this._view;\n\n  // Update celestial and terrestrial environment effects.\n  const environmentState = this._environmentState;\n  const renderPass = frameState.passes.render;\n  const offscreenPass = frameState.passes.offscreen;\n  const atmosphere = this.atmosphere;\n  const skyAtmosphere = this.skyAtmosphere;\n  const globe = this.globe;\n  const globeTranslucencyState = this._globeTranslucencyState;\n  if (!renderPass || this._mode !== SceneMode.SCENE2D && view.camera.frustum instanceof OrthographicFrustum || !globeTranslucencyState.environmentVisible) {\n    environmentState.skyAtmosphereCommand = undefined;\n    environmentState.skyBoxCommand = undefined;\n    environmentState.sunDrawCommand = undefined;\n    environmentState.sunComputeCommand = undefined;\n    environmentState.moonCommand = undefined;\n  } else {\n    if (defined(skyAtmosphere)) {\n      if (defined(globe)) {\n        skyAtmosphere.setDynamicLighting(DynamicAtmosphereLightingType.fromGlobeFlags(globe));\n        environmentState.isReadyForAtmosphere = environmentState.isReadyForAtmosphere || !globe.show || globe._surface._tilesToRender.length > 0;\n      } else {\n        const dynamicLighting = atmosphere.dynamicLighting;\n        skyAtmosphere.setDynamicLighting(dynamicLighting);\n        environmentState.isReadyForAtmosphere = true;\n      }\n      environmentState.skyAtmosphereCommand = skyAtmosphere.update(frameState, globe);\n      if (defined(environmentState.skyAtmosphereCommand)) {\n        this.updateDerivedCommands(environmentState.skyAtmosphereCommand);\n      }\n    } else {\n      environmentState.skyAtmosphereCommand = undefined;\n    }\n    environmentState.skyBoxCommand = defined(this.skyBox) ? this.skyBox.update(frameState, this._hdr) : undefined;\n    const sunCommands = defined(this.sun) ? this.sun.update(frameState, view.passState, this._hdr) : undefined;\n    environmentState.sunDrawCommand = defined(sunCommands) ? sunCommands.drawCommand : undefined;\n    environmentState.sunComputeCommand = defined(sunCommands) ? sunCommands.computeCommand : undefined;\n    environmentState.moonCommand = defined(this.moon) ? this.moon.update(frameState) : undefined;\n  }\n  const clearGlobeDepth = environmentState.clearGlobeDepth = defined(globe) && globe.show && (!globe.depthTestAgainstTerrain || this.mode === SceneMode.SCENE2D);\n  const useDepthPlane = environmentState.useDepthPlane = clearGlobeDepth && this.mode === SceneMode.SCENE3D && globeTranslucencyState.useDepthPlane;\n  if (useDepthPlane) {\n    // Update the depth plane that is rendered in 3D when the primitives are\n    // not depth tested against terrain so primitives on the backface\n    // of the globe are not picked.\n    this._depthPlane.update(frameState);\n  }\n  environmentState.renderTranslucentDepthForPick = false;\n  environmentState.useWebVR = this._useWebVR && this.mode !== SceneMode.SCENE2D && !offscreenPass;\n  const occluder = frameState.mode === SceneMode.SCENE3D && !globeTranslucencyState.sunVisibleThroughGlobe ? frameState.occluder : undefined;\n  let cullingVolume = frameState.cullingVolume;\n\n  // get user culling volume minus the far plane.\n  const planes = scratchCullingVolume.planes;\n  for (let k = 0; k < 5; ++k) {\n    planes[k] = cullingVolume.planes[k];\n  }\n  cullingVolume = scratchCullingVolume;\n\n  // Determine visibility of celestial and terrestrial environment effects.\n  environmentState.isSkyAtmosphereVisible = defined(environmentState.skyAtmosphereCommand) && environmentState.isReadyForAtmosphere;\n  environmentState.isSunVisible = this.isVisible(cullingVolume, environmentState.sunDrawCommand, occluder);\n  environmentState.isMoonVisible = this.isVisible(cullingVolume, environmentState.moonCommand, occluder);\n  const envMaps = this.specularEnvironmentMaps;\n  let specularEnvironmentCubeMap = this._specularEnvironmentCubeMap;\n  if (defined(envMaps) && specularEnvironmentCubeMap?.url !== envMaps) {\n    specularEnvironmentCubeMap = specularEnvironmentCubeMap && specularEnvironmentCubeMap.destroy();\n    this._specularEnvironmentCubeMap = new SpecularEnvironmentCubeMap(envMaps);\n  } else if (!defined(envMaps) && defined(specularEnvironmentCubeMap)) {\n    specularEnvironmentCubeMap.destroy();\n    this._specularEnvironmentCubeMap = undefined;\n  }\n  if (defined(this._specularEnvironmentCubeMap)) {\n    this._specularEnvironmentCubeMap.update(frameState);\n  }\n};\nfunction updateDebugFrustumPlanes(scene) {\n  const frameState = scene._frameState;\n  if (scene.debugShowFrustumPlanes !== scene._debugShowFrustumPlanes) {\n    if (scene.debugShowFrustumPlanes) {\n      scene._debugFrustumPlanes = new DebugCameraPrimitive({\n        camera: scene.camera,\n        updateOnChange: false,\n        frustumSplits: frameState.frustumSplits\n      });\n    } else {\n      scene._debugFrustumPlanes = scene._debugFrustumPlanes && scene._debugFrustumPlanes.destroy();\n    }\n    scene._debugShowFrustumPlanes = scene.debugShowFrustumPlanes;\n  }\n  if (defined(scene._debugFrustumPlanes)) {\n    scene._debugFrustumPlanes.update(frameState);\n  }\n}\nfunction updateShadowMaps(scene) {\n  const frameState = scene._frameState;\n  const {\n    passes,\n    shadowState,\n    shadowMaps\n  } = frameState;\n  const length = shadowMaps.length;\n  const shadowsEnabled = length > 0 && !passes.pick && !passes.pickVoxel && scene.mode === SceneMode.SCENE3D;\n  if (shadowsEnabled !== shadowState.shadowsEnabled) {\n    // Update derived commands when shadowsEnabled changes\n    ++shadowState.lastDirtyTime;\n    shadowState.shadowsEnabled = shadowsEnabled;\n  }\n  shadowState.lightShadowsEnabled = false;\n  if (!shadowsEnabled) {\n    return;\n  }\n\n  // Check if the shadow maps are different than the shadow maps last frame.\n  // If so, the derived commands need to be updated.\n  for (let j = 0; j < length; ++j) {\n    if (shadowMaps[j] !== shadowState.shadowMaps[j]) {\n      ++shadowState.lastDirtyTime;\n      break;\n    }\n  }\n  shadowState.shadowMaps.length = 0;\n  shadowState.lightShadowMaps.length = 0;\n  for (let i = 0; i < length; ++i) {\n    const shadowMap = shadowMaps[i];\n    shadowMap.update(frameState);\n    shadowState.shadowMaps.push(shadowMap);\n    if (shadowMap.fromLightSource) {\n      shadowState.lightShadowMaps.push(shadowMap);\n      shadowState.lightShadowsEnabled = true;\n    }\n    if (shadowMap.dirty) {\n      ++shadowState.lastDirtyTime;\n      shadowMap.dirty = false;\n    }\n  }\n}\nfunction updateAndRenderPrimitives(scene) {\n  const frameState = scene._frameState;\n  scene._groundPrimitives.update(frameState);\n  scene._primitives.update(frameState);\n  updateDebugFrustumPlanes(scene);\n  updateShadowMaps(scene);\n  if (scene._globe) {\n    scene._globe.render(frameState);\n  }\n}\nfunction updateAndClearFramebuffers(scene, passState, clearColor) {\n  const context = scene._context;\n  const frameState = scene._frameState;\n  const environmentState = scene._environmentState;\n  const view = scene._view;\n  const passes = frameState.passes;\n  const picking = passes.pick || passes.pickVoxel;\n  if (defined(view.globeDepth)) {\n    view.globeDepth.picking = picking;\n  }\n  const useWebVR = environmentState.useWebVR;\n\n  // Preserve the reference to the original framebuffer.\n  environmentState.originalFramebuffer = passState.framebuffer;\n\n  // Manage sun bloom post-processing effect.\n  if (defined(scene.sun) && scene.sunBloom !== scene._sunBloom) {\n    if (scene.sunBloom && !useWebVR) {\n      scene._sunPostProcess = new SunPostProcess();\n    } else if (defined(scene._sunPostProcess)) {\n      scene._sunPostProcess = scene._sunPostProcess.destroy();\n    }\n    scene._sunBloom = scene.sunBloom;\n  } else if (!defined(scene.sun) && defined(scene._sunPostProcess)) {\n    scene._sunPostProcess = scene._sunPostProcess.destroy();\n    scene._sunBloom = false;\n  }\n\n  // Clear the pass state framebuffer.\n  const clear = scene._clearColorCommand;\n  Color.clone(clearColor, clear.color);\n  clear.execute(context, passState);\n\n  // Update globe depth rendering based on the current context and clear the globe depth framebuffer.\n  // Globe depth is copied for the pick pass to support picking batched geometries in GroundPrimitives.\n  const useGlobeDepthFramebuffer = environmentState.useGlobeDepthFramebuffer = defined(view.globeDepth);\n  if (useGlobeDepthFramebuffer) {\n    view.globeDepth.update(context, passState, view.viewport, scene.msaaSamples, scene._hdr, environmentState.clearGlobeDepth);\n    view.globeDepth.clear(context, passState, clearColor);\n  }\n\n  // If supported, configure OIT to use the globe depth framebuffer and clear the OIT framebuffer.\n  const oit = view.oit;\n  const useOIT = environmentState.useOIT = !picking && defined(oit) && oit.isSupported();\n  if (useOIT) {\n    oit.update(context, passState, view.globeDepth.colorFramebufferManager, scene._hdr, scene.msaaSamples);\n    oit.clear(context, passState, clearColor);\n    environmentState.useOIT = oit.isSupported();\n  }\n  const postProcess = scene.postProcessStages;\n  let usePostProcess = environmentState.usePostProcess = !picking && (scene._hdr || postProcess.length > 0 || postProcess.ambientOcclusion.enabled || postProcess.fxaa.enabled || postProcess.bloom.enabled);\n  environmentState.usePostProcessSelected = false;\n  if (usePostProcess) {\n    view.sceneFramebuffer.update(context, view.viewport, scene._hdr, scene.msaaSamples);\n    view.sceneFramebuffer.clear(context, passState, clearColor);\n    postProcess.update(context, frameState.useLogDepth, scene._hdr);\n    postProcess.clear(context);\n    usePostProcess = environmentState.usePostProcess = postProcess.ready;\n    environmentState.usePostProcessSelected = usePostProcess && postProcess.hasSelected;\n  }\n  if (environmentState.isSunVisible && scene.sunBloom && !useWebVR) {\n    passState.framebuffer = scene._sunPostProcess.update(passState);\n    scene._sunPostProcess.clear(context, passState, clearColor);\n  } else if (useGlobeDepthFramebuffer) {\n    passState.framebuffer = view.globeDepth.framebuffer;\n  } else if (usePostProcess) {\n    passState.framebuffer = view.sceneFramebuffer.framebuffer;\n  }\n  if (defined(passState.framebuffer)) {\n    clear.execute(context, passState);\n  }\n  const useInvertClassification = environmentState.useInvertClassification = !picking && defined(passState.framebuffer) && scene.invertClassification;\n  if (useInvertClassification) {\n    let depthFramebuffer;\n    if (frameState.invertClassificationColor.alpha === 1.0) {\n      if (useGlobeDepthFramebuffer) {\n        depthFramebuffer = view.globeDepth.framebuffer;\n      }\n    }\n    if (defined(depthFramebuffer) || context.depthTexture) {\n      scene._invertClassification.previousFramebuffer = depthFramebuffer;\n      scene._invertClassification.update(context, scene.msaaSamples, view.globeDepth.colorFramebufferManager);\n      scene._invertClassification.clear(context, passState);\n      if (frameState.invertClassificationColor.alpha < 1.0 && useOIT) {\n        const command = scene._invertClassification.unclassifiedCommand;\n        const derivedCommands = command.derivedCommands;\n        derivedCommands.oit = oit.createDerivedCommands(command, context, derivedCommands.oit);\n      }\n    } else {\n      environmentState.useInvertClassification = false;\n    }\n  }\n  if (scene._globeTranslucencyState.translucent) {\n    view.globeTranslucencyFramebuffer.updateAndClear(scene._hdr, view.viewport, context, passState);\n  }\n}\n\n/**\n * @private\n */\nScene.prototype.resolveFramebuffers = function (passState) {\n  const context = this._context;\n  const environmentState = this._environmentState;\n  const view = this._view;\n  const {\n    globeDepth,\n    translucentTileClassification\n  } = view;\n  if (defined(globeDepth)) {\n    globeDepth.prepareColorTextures(context);\n  }\n  const {\n    useOIT,\n    useGlobeDepthFramebuffer,\n    usePostProcess,\n    originalFramebuffer\n  } = environmentState;\n  const globeFramebuffer = useGlobeDepthFramebuffer ? globeDepth.colorFramebufferManager : undefined;\n  const sceneFramebuffer = view.sceneFramebuffer._colorFramebuffer;\n  const idFramebuffer = view.sceneFramebuffer.idFramebuffer;\n  if (useOIT) {\n    passState.framebuffer = usePostProcess ? sceneFramebuffer.framebuffer : originalFramebuffer;\n    view.oit.execute(context, passState);\n  }\n  if (translucentTileClassification.hasTranslucentDepth && translucentTileClassification.isSupported()) {\n    translucentTileClassification.execute(this, passState);\n  }\n  if (usePostProcess) {\n    view.sceneFramebuffer.prepareColorTextures(context);\n    let inputFramebuffer = sceneFramebuffer;\n    if (useGlobeDepthFramebuffer && !useOIT) {\n      inputFramebuffer = globeFramebuffer;\n    }\n    const postProcess = this.postProcessStages;\n    const colorTexture = inputFramebuffer.getColorTexture(0);\n    const idTexture = idFramebuffer.getColorTexture(0);\n    const depthTexture = defaultValue(globeFramebuffer, sceneFramebuffer).getDepthStencilTexture();\n    postProcess.execute(context, colorTexture, depthTexture, idTexture);\n    postProcess.copy(context, originalFramebuffer);\n  }\n  if (!useOIT && !usePostProcess && useGlobeDepthFramebuffer) {\n    passState.framebuffer = originalFramebuffer;\n    globeDepth.executeCopyColor(context, passState);\n  }\n};\nfunction callAfterRenderFunctions(scene) {\n  // Functions are queued up during primitive update and executed here in case\n  // the function modifies scene state that should remain constant over the frame.\n  const functions = scene._frameState.afterRender;\n  for (let i = 0; i < functions.length; ++i) {\n    const shouldRequestRender = functions[i]();\n    if (shouldRequestRender) {\n      scene.requestRender();\n    }\n  }\n  functions.length = 0;\n}\nfunction getGlobeHeight(scene) {\n  if (scene.mode === SceneMode.MORPHING) {\n    return;\n  }\n  const cartographic = scene.camera.positionCartographic;\n  return scene.getHeight(cartographic);\n}\n\n/**\n * Gets the height of the loaded surface at the cartographic position.\n * @param {Cartographic} cartographic The cartographic position.\n * @param {HeightReference} [heightReference=CLAMP_TO_GROUND] Based on the height reference value, determines whether to ignore heights from 3D Tiles or terrain.\n * @private\n */\nScene.prototype.getHeight = function (cartographic, heightReference) {\n  if (!defined(cartographic)) {\n    return undefined;\n  }\n  const ignore3dTiles = heightReference === HeightReference.CLAMP_TO_TERRAIN || heightReference === HeightReference.RELATIVE_TO_TERRAIN;\n  const ignoreTerrain = heightReference === HeightReference.CLAMP_TO_3D_TILE || heightReference === HeightReference.RELATIVE_TO_3D_TILE;\n  if (!defined(cartographic)) {\n    return;\n  }\n  let maxHeight = Number.NEGATIVE_INFINITY;\n  if (!ignore3dTiles) {\n    const length = this.primitives.length;\n    for (let i = 0; i < length; ++i) {\n      const primitive = this.primitives.get(i);\n      if (!primitive.isCesium3DTileset || !primitive.show || !primitive.enableCollision) {\n        continue;\n      }\n      const result = primitive.getHeight(cartographic, this);\n      if (defined(result) && result > maxHeight) {\n        maxHeight = result;\n      }\n    }\n  }\n  const globe = this._globe;\n  if (!ignoreTerrain && defined(globe) && globe.show) {\n    const result = globe.getHeight(cartographic);\n    if (result > maxHeight) {\n      maxHeight = result;\n    }\n  }\n  if (maxHeight > Number.NEGATIVE_INFINITY) {\n    return maxHeight;\n  }\n  return undefined;\n};\nconst updateHeightScratchCartographic = new Cartographic();\n/**\n * Calls the callback when a new tile is rendered that contains the given cartographic. The only parameter\n * is the cartesian position on the tile.\n *\n * @private\n *\n * @param {Cartographic} cartographic The cartographic position.\n * @param {Function} callback The function to be called when a new tile is loaded containing the updated cartographic.\n * @param {HeightReference} [heightReference=CLAMP_TO_GROUND] Based on the height reference value, determines whether to ignore heights from 3D Tiles or terrain.\n * @returns {Function} The function to remove this callback from the quadtree.\n */\nScene.prototype.updateHeight = function (cartographic, callback, heightReference) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"callback\", callback);\n  //>>includeEnd('debug');\n\n  const callbackWrapper = () => {\n    Cartographic.clone(cartographic, updateHeightScratchCartographic);\n    const height = this.getHeight(cartographic, heightReference);\n    if (defined(height)) {\n      updateHeightScratchCartographic.height = height;\n      callback(updateHeightScratchCartographic);\n    }\n  };\n  const ignore3dTiles = heightReference === HeightReference.CLAMP_TO_TERRAIN || heightReference === HeightReference.RELATIVE_TO_TERRAIN;\n  const ignoreTerrain = heightReference === HeightReference.CLAMP_TO_3D_TILE || heightReference === HeightReference.RELATIVE_TO_3D_TILE;\n  let terrainRemoveCallback;\n  if (!ignoreTerrain && defined(this.globe)) {\n    terrainRemoveCallback = this.globe._surface.updateHeight(cartographic, callbackWrapper);\n  }\n  let tilesetRemoveCallbacks = {};\n  const ellipsoid = this._ellipsoid;\n  const createPrimitiveEventListener = primitive => {\n    if (ignore3dTiles || primitive.isDestroyed() || !primitive.isCesium3DTileset) {\n      return;\n    }\n    const tilesetRemoveCallback = primitive.updateHeight(cartographic, callbackWrapper, ellipsoid);\n    tilesetRemoveCallbacks[primitive.id] = tilesetRemoveCallback;\n  };\n  if (!ignore3dTiles) {\n    const length = this.primitives.length;\n    for (let i = 0; i < length; ++i) {\n      const primitive = this.primitives.get(i);\n      createPrimitiveEventListener(primitive);\n    }\n  }\n  const removeAddedListener = this.primitives.primitiveAdded.addEventListener(createPrimitiveEventListener);\n  const removeRemovedListener = this.primitives.primitiveRemoved.addEventListener(primitive => {\n    if (primitive.isDestroyed() || !primitive.isCesium3DTileset) {\n      return;\n    }\n    if (defined(tilesetRemoveCallbacks[primitive.id])) {\n      tilesetRemoveCallbacks[primitive.id]();\n    }\n    delete tilesetRemoveCallbacks[primitive.id];\n  });\n  const removeCallback = () => {\n    terrainRemoveCallback = terrainRemoveCallback && terrainRemoveCallback();\n    Object.values(tilesetRemoveCallbacks).forEach(tilesetRemoveCallback => tilesetRemoveCallback());\n    tilesetRemoveCallbacks = {};\n    removeAddedListener();\n    removeRemovedListener();\n  };\n  return removeCallback;\n};\nfunction isCameraUnderground(scene) {\n  const camera = scene.camera;\n  const mode = scene._mode;\n  const cameraController = scene._screenSpaceCameraController;\n  const cartographic = camera.positionCartographic;\n  if (!defined(cartographic)) {\n    return false;\n  }\n  if (!cameraController.onMap() && cartographic.height < 0.0) {\n    // The camera can go off the map while in Columbus View.\n    // Make a best guess as to whether it's underground by checking if its height is less than zero.\n    return true;\n  }\n  if (mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n    return false;\n  }\n  const globeHeight = scene._globeHeight;\n  return defined(globeHeight) && cartographic.height < globeHeight;\n}\n\n/**\n * @private\n */\nScene.prototype.initializeFrame = function () {\n  // Destroy released shaders and textures once every 120 frames to avoid thrashing the cache\n  if (this._shaderFrameCount++ === 120) {\n    this._shaderFrameCount = 0;\n    this._context.shaderCache.destroyReleasedShaderPrograms();\n    this._context.textureCache.destroyReleasedTextures();\n  }\n  this._tweens.update();\n  if (this._globeHeightDirty) {\n    if (defined(this._removeUpdateHeightCallback)) {\n      this._removeUpdateHeightCallback();\n      this._removeUpdateHeightCallback = undefined;\n    }\n    this._globeHeight = getGlobeHeight(this);\n    this._globeHeightDirty = false;\n    const cartographic = this.camera.positionCartographic;\n    this._removeUpdateHeightCallback = this.updateHeight(cartographic, updatedCartographic => {\n      if (this.isDestroyed()) {\n        return;\n      }\n      this._globeHeight = updatedCartographic.height;\n    });\n  }\n  this._cameraUnderground = isCameraUnderground(this);\n  this._globeTranslucencyState.update(this);\n  this._screenSpaceCameraController.update();\n  if (defined(this._deviceOrientationCameraController)) {\n    this._deviceOrientationCameraController.update();\n  }\n  this.camera.update(this._mode);\n  this.camera._updateCameraChanged();\n};\nfunction updateDebugShowFramesPerSecond(scene, renderedThisFrame) {\n  if (scene.debugShowFramesPerSecond) {\n    if (!defined(scene._performanceDisplay)) {\n      const performanceContainer = document.createElement(\"div\");\n      performanceContainer.className = \"cesium-performanceDisplay-defaultContainer\";\n      const container = scene._canvas.parentNode;\n      container.appendChild(performanceContainer);\n      const performanceDisplay = new PerformanceDisplay({\n        container: performanceContainer\n      });\n      scene._performanceDisplay = performanceDisplay;\n      scene._performanceContainer = performanceContainer;\n    }\n    scene._performanceDisplay.throttled = scene.requestRenderMode;\n    scene._performanceDisplay.update(renderedThisFrame);\n  } else if (defined(scene._performanceDisplay)) {\n    scene._performanceDisplay = scene._performanceDisplay && scene._performanceDisplay.destroy();\n    scene._performanceContainer.parentNode.removeChild(scene._performanceContainer);\n  }\n}\nfunction prePassesUpdate(scene) {\n  scene._jobScheduler.resetBudgets();\n  const frameState = scene._frameState;\n  scene.primitives.prePassesUpdate(frameState);\n  if (defined(scene.globe)) {\n    scene.globe.update(frameState);\n  }\n  scene._picking.update();\n  frameState.creditDisplay.update();\n}\nfunction postPassesUpdate(scene) {\n  scene.primitives.postPassesUpdate(scene._frameState);\n  RequestScheduler.update();\n}\nconst scratchBackgroundColor = new Color();\n\n/**\n * Render the scene\n *\n * @param {Scene} scene\n * @private\n */\nfunction render(scene) {\n  const frameState = scene._frameState;\n  const context = scene.context;\n  const {\n    uniformState\n  } = context;\n  const view = scene._defaultView;\n  scene._view = view;\n  scene.updateFrameState();\n  frameState.passes.render = true;\n  frameState.passes.postProcess = scene.postProcessStages.hasSelected;\n  frameState.tilesetPassState = renderTilesetPassState;\n  let backgroundColor = defaultValue(scene.backgroundColor, Color.BLACK);\n  if (scene._hdr) {\n    backgroundColor = Color.clone(backgroundColor, scratchBackgroundColor);\n    backgroundColor.red = Math.pow(backgroundColor.red, scene.gamma);\n    backgroundColor.green = Math.pow(backgroundColor.green, scene.gamma);\n    backgroundColor.blue = Math.pow(backgroundColor.blue, scene.gamma);\n  }\n  frameState.backgroundColor = backgroundColor;\n  frameState.atmosphere = scene.atmosphere;\n  scene.fog.update(frameState);\n  uniformState.update(frameState);\n  const shadowMap = scene.shadowMap;\n  if (defined(shadowMap) && shadowMap.enabled) {\n    if (!defined(scene.light) || scene.light instanceof SunLight) {\n      // Negate the sun direction so that it is from the Sun, not to the Sun\n      Cartesian3.negate(uniformState.sunDirectionWC, scene._shadowMapCamera.direction);\n    } else {\n      Cartesian3.clone(scene.light.direction, scene._shadowMapCamera.direction);\n    }\n    frameState.shadowMaps.push(shadowMap);\n  }\n  scene._computeCommandList.length = 0;\n  scene._overlayCommandList.length = 0;\n  const viewport = view.viewport;\n  viewport.x = 0;\n  viewport.y = 0;\n  viewport.width = context.drawingBufferWidth;\n  viewport.height = context.drawingBufferHeight;\n  const passState = view.passState;\n  passState.framebuffer = undefined;\n  passState.blendingEnabled = undefined;\n  passState.scissorTest = undefined;\n  passState.viewport = BoundingRectangle.clone(viewport, passState.viewport);\n  if (defined(scene.globe)) {\n    scene.globe.beginFrame(frameState);\n  }\n  scene.updateEnvironment();\n  scene.updateAndExecuteCommands(passState, backgroundColor);\n  scene.resolveFramebuffers(passState);\n  passState.framebuffer = undefined;\n  executeOverlayCommands(scene, passState);\n  if (defined(scene.globe)) {\n    scene.globe.endFrame(frameState);\n    if (!scene.globe.tilesLoaded) {\n      scene._renderRequested = true;\n    }\n  }\n  context.endFrame();\n}\nfunction tryAndCatchError(scene, functionToExecute) {\n  try {\n    functionToExecute(scene);\n  } catch (error) {\n    scene._renderError.raiseEvent(scene, error);\n    if (scene.rethrowRenderErrors) {\n      throw error;\n    }\n  }\n}\nfunction updateMostDetailedRayPicks(scene) {\n  return scene._picking.updateMostDetailedRayPicks(scene);\n}\n\n/**\n * Update and render the scene. It is usually not necessary to call this function\n * directly because {@link CesiumWidget} will do it automatically.\n * @param {JulianDate} [time] The simulation time at which to render.\n */\nScene.prototype.render = function (time) {\n  /**\n   *\n   * Pre passes update. Execute any pass invariant code that should run before the passes here.\n   *\n   */\n  this._preUpdate.raiseEvent(this, time);\n  const frameState = this._frameState;\n  frameState.newFrame = false;\n  if (!defined(time)) {\n    time = JulianDate.now();\n  }\n  const cameraChanged = this._view.checkForCameraUpdates(this);\n  if (cameraChanged) {\n    this._globeHeightDirty = true;\n  }\n\n  // Determine if should render a new frame in request render mode\n  let shouldRender = !this.requestRenderMode || this._renderRequested || cameraChanged || this._logDepthBufferDirty || this._hdrDirty || this.mode === SceneMode.MORPHING;\n  if (!shouldRender && defined(this.maximumRenderTimeChange) && defined(this._lastRenderTime)) {\n    const difference = Math.abs(JulianDate.secondsDifference(this._lastRenderTime, time));\n    shouldRender = shouldRender || difference > this.maximumRenderTimeChange;\n  }\n  if (shouldRender) {\n    this._lastRenderTime = JulianDate.clone(time, this._lastRenderTime);\n    this._renderRequested = false;\n    this._logDepthBufferDirty = false;\n    this._hdrDirty = false;\n    const frameNumber = CesiumMath.incrementWrap(frameState.frameNumber, 15000000.0, 1.0);\n    updateFrameNumber(this, frameNumber, time);\n    frameState.newFrame = true;\n  }\n  tryAndCatchError(this, prePassesUpdate);\n\n  /**\n   * Passes update. Add any passes here\n   */\n  if (this.primitives.show) {\n    tryAndCatchError(this, updateMostDetailedRayPicks);\n    tryAndCatchError(this, updatePreloadPass);\n    tryAndCatchError(this, updatePreloadFlightPass);\n    if (!shouldRender) {\n      tryAndCatchError(this, updateRequestRenderModeDeferCheckPass);\n    }\n  }\n  this._postUpdate.raiseEvent(this, time);\n  if (shouldRender) {\n    this._preRender.raiseEvent(this, time);\n    frameState.creditDisplay.beginFrame();\n    tryAndCatchError(this, render);\n  }\n\n  /**\n   * Post passes update. Execute any pass invariant code that should run after the passes here.\n   */\n  updateDebugShowFramesPerSecond(this, shouldRender);\n  tryAndCatchError(this, postPassesUpdate);\n\n  // Often used to trigger events (so don't want in trycatch) that the user\n  // might be subscribed to. Things like the tile load events, promises, etc.\n  // We don't want those events to resolve during the render loop because the events might add new primitives\n  callAfterRenderFunctions(this);\n  if (shouldRender) {\n    this._postRender.raiseEvent(this, time);\n    frameState.creditDisplay.endFrame();\n  }\n};\n\n/**\n * Update and render the scene. Always forces a new render frame regardless of whether a render was\n * previously requested.\n * @param {JulianDate} [time] The simulation time at which to render.\n *\n * @private\n */\nScene.prototype.forceRender = function (time) {\n  this._renderRequested = true;\n  this.render(time);\n};\n\n/**\n * Requests a new rendered frame when {@link Scene#requestRenderMode} is set to <code>true</code>.\n * The render rate will not exceed the {@link CesiumWidget#targetFrameRate}.\n *\n * @see Scene#requestRenderMode\n */\nScene.prototype.requestRender = function () {\n  this._renderRequested = true;\n};\n\n/**\n * @private\n */\nScene.prototype.clampLineWidth = function (width) {\n  return Math.max(ContextLimits.minimumAliasedLineWidth, Math.min(width, ContextLimits.maximumAliasedLineWidth));\n};\n\n/**\n * Returns an object with a `primitive` property that contains the first (top) primitive in the scene\n * at a particular window coordinate or undefined if nothing is at the location. Other properties may\n * potentially be set depending on the type of primitive and may be used to further identify the picked object.\n * <p>\n * When a feature of a 3D Tiles tileset is picked, <code>pick</code> returns a {@link Cesium3DTileFeature} object.\n * </p>\n *\n * @example\n * // On mouse over, color the feature yellow.\n * handler.setInputAction(function(movement) {\n *     const feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTileFeature) {\n *         feature.color = Cesium.Color.YELLOW;\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {number} [width=3] Width of the pick rectangle.\n * @param {number} [height=3] Height of the pick rectangle.\n * @returns {object} Object containing the picked primitive.\n */\nScene.prototype.pick = function (windowPosition, width, height) {\n  return this._picking.pick(this, windowPosition, width, height);\n};\n\n/**\n * Returns a {@link VoxelCell} for the voxel sample rendered at a particular window coordinate,\n * or undefined if no voxel is rendered at that position.\n *\n * @example\n * On left click, report the value of the \"color\" property at that voxel sample.\n * handler.setInputAction(function(movement) {\n *   const voxelCell = scene.pickVoxel(movement.position);\n *   if (defined(voxelCell)) {\n *     console.log(voxelCell.getProperty(\"color\"));\n *   }\n * }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {number} [width=3] Width of the pick rectangle.\n * @param {number} [height=3] Height of the pick rectangle.\n * @returns {VoxelCell|undefined} Information about the voxel cell rendered at the picked position.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n */\nScene.prototype.pickVoxel = function (windowPosition, width, height) {\n  const pickedObject = this.pick(windowPosition, width, height);\n  if (!defined(pickedObject)) {\n    return;\n  }\n  const voxelPrimitive = pickedObject.primitive;\n  if (!(voxelPrimitive instanceof VoxelPrimitive)) {\n    return;\n  }\n  const voxelCoordinate = this._picking.pickVoxelCoordinate(this, windowPosition, width, height);\n  // Look up the keyframeNode containing this picked cell\n  const tileIndex = 255 * voxelCoordinate[0] + voxelCoordinate[1];\n  const keyframeNode = voxelPrimitive._traversal.findKeyframeNode(tileIndex);\n  if (!defined(keyframeNode)) {\n    // The tile rendered at the pick position has since been discarded by\n    // a traversal update\n    return;\n  }\n  // Look up the metadata for the picked cell\n  const sampleIndex = 255 * voxelCoordinate[2] + voxelCoordinate[3];\n  return VoxelCell.fromKeyframeNode(voxelPrimitive, tileIndex, sampleIndex, keyframeNode);\n};\n\n/**\n * Pick a metadata value at the given window position.\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {string|undefined} schemaId The ID of the metadata schema to pick values\n * from. If this is `undefined`, then it will pick the values from the object\n * that match the given class- and property name, regardless of the schema ID.\n * @param {string} className The name of the metadata class to pick\n * values from\n * @param {string} propertyName The name of the metadata property to pick\n * values from\n * @returns {MetadataValue|undefined} The metadata value, or `undefined` when\n * no matching metadata was found at the given position\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n */\nScene.prototype.pickMetadata = function (windowPosition, schemaId, className, propertyName) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"windowPosition\", windowPosition);\n  Check.typeOf.string(\"className\", className);\n  Check.typeOf.string(\"propertyName\", propertyName);\n  //>>includeEnd('debug');\n\n  const pickedObject = this.pick(windowPosition);\n  if (!defined(pickedObject)) {\n    return undefined;\n  }\n\n  // Check if the picked object is a model that has structural\n  // metadata, with a schema that contains the specified\n  // property.\n  const structuralMetadata = pickedObject.detail?.model?.structuralMetadata;\n  if (!defined(structuralMetadata)) {\n    return undefined;\n  }\n  const schema = structuralMetadata.schema;\n  const classProperty = getMetadataClassProperty(schema, schemaId, className, propertyName);\n  if (!defined(classProperty)) {\n    return undefined;\n  }\n  const metadataProperty = getMetadataProperty(structuralMetadata, className, propertyName);\n  if (!defined(metadataProperty)) {\n    return undefined;\n  }\n  const pickedMetadataInfo = new PickedMetadataInfo(schemaId, className, propertyName, classProperty, metadataProperty);\n  const pickedMetadataValues = this._picking.pickMetadata(this, windowPosition, pickedMetadataInfo);\n  return pickedMetadataValues;\n};\n\n/**\n * Pick the schema of the metadata of the object at the given position\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @returns {MetadataSchema} The metadata schema, or `undefined` if there is no object with\n * associated metadata at the given position.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n */\nScene.prototype.pickMetadataSchema = function (windowPosition) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"windowPosition\", windowPosition);\n  //>>includeEnd('debug');\n\n  const pickedObject = this.pick(windowPosition);\n  if (!defined(pickedObject)) {\n    return undefined;\n  }\n  const schema = pickedObject.detail?.model?.structuralMetadata?.schema;\n  return schema;\n};\n\n/**\n * Returns the cartesian position reconstructed from the depth buffer and window position.\n * The returned position is in world coordinates. Used internally by camera functions to\n * prevent conversion to projected 2D coordinates and then back.\n * <p>\n * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n * translucent primitives; otherwise, this essentially picks through translucent primitives.\n * </p>\n *\n * @private\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Cartesian3} [result] The object on which to restore the result.\n * @returns {Cartesian3} The cartesian position in world coordinates.\n *\n * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n */\nScene.prototype.pickPositionWorldCoordinates = function (windowPosition, result) {\n  return this._picking.pickPositionWorldCoordinates(this, windowPosition, result);\n};\n\n/**\n * Returns the cartesian position reconstructed from the depth buffer and window position.\n * <p>\n * The position reconstructed from the depth buffer in 2D may be slightly different from those\n * reconstructed in 3D and Columbus view. This is caused by the difference in the distribution\n * of depth values of perspective and orthographic projection.\n * </p>\n * <p>\n * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n * translucent primitives; otherwise, this essentially picks through translucent primitives.\n * </p>\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Cartesian3} [result] The object on which to restore the result.\n * @returns {Cartesian3} The cartesian position.\n *\n * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n */\nScene.prototype.pickPosition = function (windowPosition, result) {\n  return this._picking.pickPosition(this, windowPosition, result);\n};\n\n/**\n * Returns a list of objects, each containing a `primitive` property, for all primitives at\n * a particular window coordinate position. Other properties may also be set depending on the\n * type of primitive and may be used to further identify the picked object. The primitives in\n * the list are ordered by their visual order in the scene (front to back).\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {number} [limit] If supplied, stop drilling after collecting this many picks.\n * @param {number} [width=3] Width of the pick rectangle.\n * @param {number} [height=3] Height of the pick rectangle.\n * @returns {any[]} Array of objects, each containing 1 picked primitives.\n *\n * @exception {DeveloperError} windowPosition is undefined.\n *\n * @example\n * const pickedObjects = scene.drillPick(new Cesium.Cartesian2(100.0, 200.0));\n *\n * @see Scene#pick\n */\nScene.prototype.drillPick = function (windowPosition, limit, width, height) {\n  return this._picking.drillPick(this, windowPosition, limit, width, height);\n};\nfunction updatePreloadPass(scene) {\n  const frameState = scene._frameState;\n  preloadTilesetPassState.camera = frameState.camera;\n  preloadTilesetPassState.cullingVolume = frameState.cullingVolume;\n  const primitives = scene.primitives;\n  primitives.updateForPass(frameState, preloadTilesetPassState);\n}\nfunction updatePreloadFlightPass(scene) {\n  const frameState = scene._frameState;\n  const camera = frameState.camera;\n  if (!camera.canPreloadFlight()) {\n    return;\n  }\n  preloadFlightTilesetPassState.camera = scene.preloadFlightCamera;\n  preloadFlightTilesetPassState.cullingVolume = scene.preloadFlightCullingVolume;\n  const primitives = scene.primitives;\n  primitives.updateForPass(frameState, preloadFlightTilesetPassState);\n}\nfunction updateRequestRenderModeDeferCheckPass(scene) {\n  // Check if any ignored requests are ready to go (to wake rendering up again)\n  scene.primitives.updateForPass(scene._frameState, requestRenderModeDeferCheckPassState);\n}\n\n/**\n * Returns an object containing the first object intersected by the ray and the position of intersection,\n * or <code>undefined</code> if there were no intersections. The intersected object has a <code>primitive</code>\n * property that contains the intersected primitive. Other properties may be set depending on the type of primitive\n * and may be used to further identify the picked object. The ray must be given in world coordinates.\n * <p>\n * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n * primitives regardless of their visibility.\n * </p>\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {object} An object containing the object and position of the first intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.pickFromRay = function (ray, objectsToExclude, width) {\n  return this._picking.pickFromRay(this, ray, objectsToExclude, width);\n};\n\n/**\n * Returns a list of objects, each containing the object intersected by the ray and the position of intersection.\n * The intersected object has a <code>primitive</code> property that contains the intersected primitive. Other\n * properties may also be set depending on the type of primitive and may be used to further identify the picked object.\n * The primitives in the list are ordered by first intersection to last intersection. The ray must be given in\n * world coordinates.\n * <p>\n * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n * primitives regardless of their visibility.\n * </p>\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Object[]} List of objects containing the object and position of each intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.drillPickFromRay = function (ray, limit, objectsToExclude, width) {\n  return this._picking.drillPickFromRay(this, ray, limit, objectsToExclude, width);\n};\n\n/**\n * Initiates an asynchronous {@link Scene#pickFromRay} request using the maximum level of detail for 3D Tilesets\n * regardless of visibility.\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise<object>} A promise that resolves to an object containing the object and position of the first intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.pickFromRayMostDetailed = function (ray, objectsToExclude, width) {\n  return this._picking.pickFromRayMostDetailed(this, ray, objectsToExclude, width);\n};\n\n/**\n * Initiates an asynchronous {@link Scene#drillPickFromRay} request using the maximum level of detail for 3D Tilesets\n * regardless of visibility.\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise<Object[]>} A promise that resolves to a list of objects containing the object and position of each intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.drillPickFromRayMostDetailed = function (ray, limit, objectsToExclude, width) {\n  return this._picking.drillPickFromRayMostDetailed(this, ray, limit, objectsToExclude, width);\n};\n\n/**\n * Returns the height of scene geometry at the given cartographic position or <code>undefined</code> if there was no\n * scene geometry to sample height from. The height of the input position is ignored. May be used to clamp objects to\n * the globe, 3D Tiles, or primitives in the scene.\n * <p>\n * This function only samples height from globe tiles and 3D Tiles that are rendered in the current view. Samples height\n * from all other primitives regardless of their visibility.\n * </p>\n *\n * @param {Cartographic} position The cartographic position to sample height from.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {number} The height. This may be <code>undefined</code> if there was no scene geometry to sample height from.\n *\n * @example\n * const position = new Cesium.Cartographic(-1.31968, 0.698874);\n * const height = viewer.scene.sampleHeight(position);\n * console.log(height);\n *\n * @see Scene#clampToHeight\n * @see Scene#clampToHeightMostDetailed\n * @see Scene#sampleHeightMostDetailed\n *\n * @exception {DeveloperError} sampleHeight is only supported in 3D mode.\n * @exception {DeveloperError} sampleHeight requires depth texture support. Check sampleHeightSupported.\n */\nScene.prototype.sampleHeight = function (position, objectsToExclude, width) {\n  return this._picking.sampleHeight(this, position, objectsToExclude, width);\n};\n\n/**\n * Clamps the given cartesian position to the scene geometry along the geodetic surface normal. Returns the\n * clamped position or <code>undefined</code> if there was no scene geometry to clamp to. May be used to clamp\n * objects to the globe, 3D Tiles, or primitives in the scene.\n * <p>\n * This function only clamps to globe tiles and 3D Tiles that are rendered in the current view. Clamps to\n * all other primitives regardless of their visibility.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian position.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @param {Cartesian3} [result] An optional object to return the clamped position.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. This may be <code>undefined</code> if there was no scene geometry to clamp to.\n *\n * @example\n * // Clamp an entity to the underlying scene geometry\n * const position = entity.position.getValue(Cesium.JulianDate.now());\n * entity.position = viewer.scene.clampToHeight(position);\n *\n * @see Scene#sampleHeight\n * @see Scene#sampleHeightMostDetailed\n * @see Scene#clampToHeightMostDetailed\n *\n * @exception {DeveloperError} clampToHeight is only supported in 3D mode.\n * @exception {DeveloperError} clampToHeight requires depth texture support. Check clampToHeightSupported.\n */\nScene.prototype.clampToHeight = function (cartesian, objectsToExclude, width, result) {\n  return this._picking.clampToHeight(this, cartesian, objectsToExclude, width, result);\n};\n\n/**\n * Initiates an asynchronous {@link Scene#sampleHeight} query for an array of {@link Cartographic} positions\n * using the maximum level of detail for 3D Tilesets in the scene. The height of the input positions is ignored.\n * Returns a promise that is resolved when the query completes. Each point height is modified in place.\n * If a height cannot be determined because no geometry can be sampled at that location, or another error occurs,\n * the height is set to undefined.\n *\n * @param {Cartographic[]} positions The cartographic positions to update with sampled heights.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise<Cartographic[]>} A promise that resolves to the provided list of positions when the query has completed.\n *\n * @example\n * const positions = [\n *     new Cesium.Cartographic(-1.31968, 0.69887),\n *     new Cesium.Cartographic(-1.10489, 0.83923)\n * ];\n * const promise = viewer.scene.sampleHeightMostDetailed(positions);\n * promise.then(function(updatedPosition) {\n *     // positions[0].height and positions[1].height have been updated.\n *     // updatedPositions is just a reference to positions.\n * }\n *\n * @see Scene#sampleHeight\n *\n * @exception {DeveloperError} sampleHeightMostDetailed is only supported in 3D mode.\n * @exception {DeveloperError} sampleHeightMostDetailed requires depth texture support. Check sampleHeightSupported.\n */\nScene.prototype.sampleHeightMostDetailed = function (positions, objectsToExclude, width) {\n  return this._picking.sampleHeightMostDetailed(this, positions, objectsToExclude, width);\n};\n\n/**\n * Initiates an asynchronous {@link Scene#clampToHeight} query for an array of {@link Cartesian3} positions\n * using the maximum level of detail for 3D Tilesets in the scene. Returns a promise that is resolved when\n * the query completes. Each position is modified in place. If a position cannot be clamped because no geometry\n * can be sampled at that location, or another error occurs, the element in the array is set to undefined.\n *\n * @param {Cartesian3[]} cartesians The cartesian positions to update with clamped positions.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise<Cartesian3[]>} A promise that resolves to the provided list of positions when the query has completed.\n *\n * @example\n * const cartesians = [\n *     entities[0].position.getValue(Cesium.JulianDate.now()),\n *     entities[1].position.getValue(Cesium.JulianDate.now())\n * ];\n * const promise = viewer.scene.clampToHeightMostDetailed(cartesians);\n * promise.then(function(updatedCartesians) {\n *     entities[0].position = updatedCartesians[0];\n *     entities[1].position = updatedCartesians[1];\n * }\n *\n * @see Scene#clampToHeight\n *\n * @exception {DeveloperError} clampToHeightMostDetailed is only supported in 3D mode.\n * @exception {DeveloperError} clampToHeightMostDetailed requires depth texture support. Check clampToHeightSupported.\n */\nScene.prototype.clampToHeightMostDetailed = function (cartesians, objectsToExclude, width) {\n  return this._picking.clampToHeightMostDetailed(this, cartesians, objectsToExclude, width);\n};\n\n/**\n * Transforms a position in cartesian coordinates to canvas coordinates.  This is commonly used to place an\n * HTML element at the same screen position as an object in the scene.\n *\n * @param {Cartesian3} position The position in cartesian coordinates.\n * @param {Cartesian2} [result] An optional object to return the input position transformed to canvas coordinates.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.  This may be <code>undefined</code> if the input position is near the center of the ellipsoid.\n *\n * @example\n * // Output the canvas position of longitude/latitude (0, 0) every time the mouse moves.\n * const scene = widget.scene;\n * const position = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * const handler = new Cesium.ScreenSpaceEventHandler(scene.canvas);\n * handler.setInputAction(function(movement) {\n *     console.log(scene.cartesianToCanvasCoordinates(position));\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nScene.prototype.cartesianToCanvasCoordinates = function (position, result) {\n  return SceneTransforms.worldToWindowCoordinates(this, position, result);\n};\n\n/**\n * Instantly completes an active transition.\n */\nScene.prototype.completeMorph = function () {\n  this._transitioner.completeMorph();\n};\n\n/**\n * Asynchronously transitions the scene to 2D.\n * @param {number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphTo2D = function (duration) {\n  duration = defaultValue(duration, 2.0);\n  this._transitioner.morphTo2D(duration, this._ellipsoid);\n};\n\n/**\n * Asynchronously transitions the scene to Columbus View.\n * @param {number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphToColumbusView = function (duration) {\n  duration = defaultValue(duration, 2.0);\n  this._transitioner.morphToColumbusView(duration, this._ellipsoid);\n};\n\n/**\n * Asynchronously transitions the scene to 3D.\n * @param {number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphTo3D = function (duration) {\n  duration = defaultValue(duration, 2.0);\n  this._transitioner.morphTo3D(duration, this._ellipsoid);\n};\nfunction setTerrain(scene, terrain) {\n  // Cancel any in-progress terrain update\n  scene._removeTerrainProviderReadyListener = scene._removeTerrainProviderReadyListener && scene._removeTerrainProviderReadyListener();\n\n  // If the terrain is already loaded, set it immediately\n  if (terrain.ready) {\n    if (defined(scene.globe)) {\n      scene.globe.terrainProvider = terrain.provider;\n    }\n    return;\n  }\n  // Otherwise, set a placeholder\n  scene.globe.terrainProvider = undefined;\n  scene._removeTerrainProviderReadyListener = terrain.readyEvent.addEventListener(provider => {\n    if (defined(scene) && defined(scene.globe)) {\n      scene.globe.terrainProvider = provider;\n    }\n    scene._removeTerrainProviderReadyListener();\n  });\n}\n\n/**\n * Update the terrain providing surface geometry for the globe.\n *\n * @param {Terrain} terrain The terrain provider async helper\n * @returns {Terrain} terrain The terrain provider async helper\n *\n * @example\n * // Use Cesium World Terrain\n * scene.setTerrain(Cesium.Terrain.fromWorldTerrain());\n *\n * @example\n * // Use a custom terrain provider\n * const terrain = new Cesium.Terrain(Cesium.CesiumTerrainProvider.fromUrl(\"https://myTestTerrain.com\"));\n * scene.setTerrain(terrain);\n *\n * terrain.errorEvent.addEventListener(error => {\n *   alert(`Encountered an error while creating terrain! ${error}`);\n * });\n */\nScene.prototype.setTerrain = function (terrain) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"terrain\", terrain);\n  //>>includeEnd('debug');\n\n  setTerrain(this, terrain);\n  return terrain;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Scene#destroy\n */\nScene.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * scene = scene && scene.destroy();\n *\n * @see Scene#isDestroyed\n */\nScene.prototype.destroy = function () {\n  this._tweens.removeAll();\n  this._computeEngine = this._computeEngine && this._computeEngine.destroy();\n  this._screenSpaceCameraController = this._screenSpaceCameraController && this._screenSpaceCameraController.destroy();\n  this._deviceOrientationCameraController = this._deviceOrientationCameraController && !this._deviceOrientationCameraController.isDestroyed() && this._deviceOrientationCameraController.destroy();\n  this._primitives = this._primitives && this._primitives.destroy();\n  this._groundPrimitives = this._groundPrimitives && this._groundPrimitives.destroy();\n  this._globe = this._globe && this._globe.destroy();\n  this._removeTerrainProviderReadyListener = this._removeTerrainProviderReadyListener && this._removeTerrainProviderReadyListener();\n  this.skyBox = this.skyBox && this.skyBox.destroy();\n  this.skyAtmosphere = this.skyAtmosphere && this.skyAtmosphere.destroy();\n  this._debugSphere = this._debugSphere && this._debugSphere.destroy();\n  this.sun = this.sun && this.sun.destroy();\n  this._sunPostProcess = this._sunPostProcess && this._sunPostProcess.destroy();\n  this._depthPlane = this._depthPlane && this._depthPlane.destroy();\n  this._transitioner = this._transitioner && this._transitioner.destroy();\n  this._debugFrustumPlanes = this._debugFrustumPlanes && this._debugFrustumPlanes.destroy();\n  this._brdfLutGenerator = this._brdfLutGenerator && this._brdfLutGenerator.destroy();\n  this._picking = this._picking && this._picking.destroy();\n  this._defaultView = this._defaultView && this._defaultView.destroy();\n  this._view = undefined;\n  if (this._removeCreditContainer) {\n    this._canvas.parentNode.removeChild(this._creditContainer);\n  }\n  this.postProcessStages = this.postProcessStages && this.postProcessStages.destroy();\n  this._context = this._context && this._context.destroy();\n  this._frameState.creditDisplay = this._frameState.creditDisplay && this._frameState.creditDisplay.destroy();\n  if (defined(this._performanceDisplay)) {\n    this._performanceDisplay = this._performanceDisplay && this._performanceDisplay.destroy();\n    this._performanceContainer.parentNode.removeChild(this._performanceContainer);\n  }\n  this._removeRequestListenerCallback();\n  this._removeTaskProcessorListenerCallback();\n  for (let i = 0; i < this._removeGlobeCallbacks.length; ++i) {\n    this._removeGlobeCallbacks[i]();\n  }\n  this._removeGlobeCallbacks.length = 0;\n  if (defined(this._removeUpdateHeightCallback)) {\n    this._removeUpdateHeightCallback();\n    this._removeUpdateHeightCallback = undefined;\n  }\n  return destroyObject(this);\n};\nexport default Scene;","map":{"version":3,"names":["BoundingRectangle","BoundingSphere","BoxGeometry","Cartesian3","Cartographic","Check","clone","Color","ColorGeometryInstanceAttribute","createGuid","CullingVolume","defaultValue","defined","destroyObject","DeveloperError","Ellipsoid","EllipsoidGeometry","Event","GeographicProjection","GeometryInstance","GeometryPipeline","HeightReference","Intersect","JulianDate","CesiumMath","Matrix4","mergeSort","Occluder","OrthographicFrustum","OrthographicOffCenterFrustum","PerspectiveFrustum","PerspectiveOffCenterFrustum","Rectangle","RequestScheduler","TaskProcessor","Transforms","ClearCommand","ComputeEngine","Context","ContextLimits","Pass","RenderState","Atmosphere","BrdfLutGenerator","Camera","Cesium3DTilePass","Cesium3DTilePassState","CreditDisplay","DebugCameraPrimitive","DepthPlane","DerivedCommand","DeviceOrientationCameraController","DynamicAtmosphereLightingType","Fog","FrameState","GlobeTranslucencyState","InvertClassification","JobScheduler","MapMode2D","PerformanceDisplay","PerInstanceColorAppearance","Picking","PostProcessStageCollection","Primitive","PrimitiveCollection","SceneMode","SceneTransforms","SceneTransitioner","ScreenSpaceCameraController","ShadowMap","SpecularEnvironmentCubeMap","StencilConstants","SunLight","SunPostProcess","TweenCollection","View","DebugInspector","VoxelCell","VoxelPrimitive","getMetadataClassProperty","PickedMetadataInfo","getMetadataProperty","requestRenderAfterFrame","scene","frameState","afterRender","push","requestRender","Scene","options","EMPTY_OBJECT","canvas","creditContainer","creditViewport","contextOptions","hasCreditContainer","context","document","createElement","style","position","bottom","color","parentNode","appendChild","_id","_jobScheduler","_frameState","scene3DOnly","_removeCreditContainer","_creditContainer","_canvas","_context","_computeEngine","_ellipsoid","ellipsoid","default","_globe","undefined","_globeTranslucencyState","_primitives","_groundPrimitives","_globeHeight","_globeHeightDirty","_cameraUnderground","_removeUpdateHeightCallback","_logDepthBuffer","defaultLogDepthBuffer","fragmentDepth","_logDepthBufferDirty","_tweens","_shaderFrameCount","_sunPostProcess","_computeCommandList","_overlayCommandList","_useOIT","orderIndependentTranslucency","_executeOITFunction","_depthPlane","depthPlaneEllipsoidOffset","_clearColorCommand","stencil","owner","_depthClearCommand","depth","_stencilClearCommand","_classificationStencilClearCommand","renderState","fromCache","stencilMask","CLASSIFICATION_MASK","_depthOnlyRenderStateCache","_transitioner","_preUpdate","_postUpdate","_renderError","_preRender","_postRender","_minimumDisableDepthTestDistance","_debugInspector","_msaaSamples","msaaSamples","rethrowRenderErrors","completeMorphOnUserInput","morphStart","morphComplete","skyBox","skyAtmosphere","sun","sunBloom","_sunBloom","moon","backgroundColor","BLACK","_mode","SCENE3D","_mapProjection","mapProjection","morphTime","farToNearRatio","logarithmicDepthFarToNearRatio","nearToFarDistance2D","verticalExaggeration","verticalExaggerationRelativeHeight","debugCommandFilter","debugShowCommands","debugShowFrustums","debugShowFramesPerSecond","debugShowDepthFrustum","debugShowFrustumPlanes","_debugShowFrustumPlanes","_debugFrustumPlanes","useDepthPicking","pickTranslucentDepth","cameraEventWaitTime","atmosphere","fog","enabled","WGS84","equals","DEFAULT_VIEW_RECTANGLE","fromDegrees","_shadowMapCamera","shadowMap","lightCamera","shadows","invertClassification","invertClassificationColor","WHITE","_actualInvertClassificationColor","_invertClassificationColor","_invertClassification","focalLength","eyeSeparation","postProcessStages","_brdfLutGenerator","_performanceDisplay","_debugVolume","_screenSpaceCameraController","_mapMode2D","mapMode2D","INFINITE_SCROLL","_environmentState","skyBoxCommand","skyAtmosphereCommand","sunDrawCommand","sunComputeCommand","moonCommand","isSunVisible","isMoonVisible","isReadyForAtmosphere","isSkyAtmosphereVisible","clearGlobeDepth","useDepthPlane","renderTranslucentDepthForPick","originalFramebuffer","useGlobeDepthFramebuffer","useOIT","useInvertClassification","usePostProcess","usePostProcessSelected","useWebVR","_useWebVR","_cameraVR","_aspectRatioVR","requestRenderMode","_renderRequested","maximumRenderTimeChange","_lastRenderTime","_frameRateMonitor","_removeRequestListenerCallback","requestCompletedEvent","addEventListener","_removeTaskProcessorListenerCallback","taskCompletedEvent","_removeGlobeCallbacks","_removeTerrainProviderReadyListener","viewport","drawingBufferWidth","drawingBufferHeight","camera","frustum","near","far","preloadFlightCamera","preloadFlightCullingVolume","_picking","_defaultView","_view","_hdr","_hdrDirty","highDynamicRange","gamma","sphericalHarmonicCoefficients","specularEnvironmentMaps","_specularEnvironmentCubeMap","light","updateFrameNumber","now","updateFrameState","initializeFrame","updateGlobeListeners","globe","i","length","removeGlobeCallbacks","imageryLayersUpdatedEvent","terrainProviderChanged","Object","defineProperties","prototype","get","maximumAliasedLineWidth","maximumCubeMapSize","pickPositionSupported","depthTexture","sampleHeightSupported","clampToHeightSupported","invertClassificationSupported","specularEnvironmentMapsSupported","isSupported","set","destroy","primitives","groundPrimitives","view","defaultView","picking","screenSpaceCameraController","jobScheduler","environmentState","tweens","imageryLayers","terrainProvider","preUpdate","postUpdate","renderError","preRender","postRender","lastRenderTime","debugFrustumStatistics","id","mode","value","SCENE2D","morphTo2D","morphTo3D","COLUMBUS_VIEW","morphToColumbusView","frustumCommandsList","numberOfFrustums","creditDisplay","container","visibility","_deviceOrientationCameraController","aspectRatio","isDestroyed","xOffset","splitPosition","minimumDisableDepthTestDistance","logarithmicDepthBuffer","uniformState","hdr","colorBufferFloat","colorBufferHalfFloat","highDynamicRangeSupported","cameraUnderground","Math","min","maximumSamples","msaaSupported","msaa","pixelRatio","opaqueFrustumNearOffset","globeHeight","getCompressedTextureFormatSupported","format","s3tc","pvrtc","etc","etc1","astc","bc7","pickedMetadataInfoChanged","command","oldPickedMetadataInfo","pickedMetadataInfo","newPickedMetadataInfo","schemaId","className","propertyName","updateDerivedCommands","shadowsDirty","oit","lightShadowMaps","lightShadowsEnabled","shadowState","derivedCommands","pickId","createPickDerivedCommand","pickingMetadata","pickMetadataAllowed","createPickMetadataDerivedCommand","pickOnly","createDepthOnlyDerivedCommand","originalCommand","createHdrCommand","receiveShadows","createReceiveDerivedCommand","pass","TRANSLUCENT","createDerivedCommands","receiveCommand","useLogDepth","lastDirtyTime","dirty","useHdr","hasLogDepthDerivedCommands","logDepth","hasHdrCommands","hasDerivedCommands","needsLogDepthDerivedCommands","needsHdrCommands","needsDerivedCommands","needsUpdateForMetadataPicking","shadowsEnabled","shadowMaps","castShadows","createCastDerivedCommand","createLogDepthCommand","renderTilesetPassState","RENDER","preloadTilesetPassState","PRELOAD","preloadFlightTilesetPassState","PRELOAD_FLIGHT","requestRenderModeDeferCheckPassState","REQUEST_RENDER_MODE_DEFER_CHECK","scratchOccluderBoundingSphere","scratchOccluder","getOccluder","show","translucent","radius","minimumRadius","minimumTerrainHeight","fromBoundingSphere","positionWC","clearPasses","passes","render","pick","pickVoxel","postProcess","offscreen","frameNumber","time","commandList","brdfLutGenerator","environmentMap","_cubeMap","cullingVolume","computeCullingVolume","directionWC","upWC","occluder","globeTranslucencyState","_terrainExaggerationChanged","_terrainExaggeration","_terrainExaggerationRelativeHeight","ready","texture","specularEnvironmentMapsMaximumLOD","maximumMipmapLevel","isTranslucencySupported","alpha","maximumScreenSpaceError","tilesetPassState","isVisible","boundingVolume","cull","computeVisibility","OUTSIDE","occlude","isOccluded","transformFrom2D","inverseTransformation","debugShowBoundingVolume","passState","debugFramebuffer","center","multiplyByPoint","projection","centerCartographic","unproject","cartographicToCartesian","geometry","modelMatrix","createGeometry","radii","vertexFormat","FLAT_VERTEX_FORMAT","fromTranslation","fromDimensions","dimensions","fromRotationTranslation","halfAxes","geometryInstances","toWireframe","attributes","appearance","flat","asynchronous","savedCommandList","update","framebuffer","execute","executeCommand","pickMetadataCommand","pickCommand","depthOnlyCommand","executeDebugShowFrustumsCommand","executeIdCommand","backToFront","a","b","distanceSquaredTo","frontToBack","EPSILON12","executeTranslucentCommandsBackToFront","executeFunction","commands","unclassifiedCommand","executeTranslucentCommandsFrontToBack","performVoxelsPass","frustumCommands","updatePass","VOXELS","indices","scratchPerspectiveFrustum","scratchPerspectiveOffCenterFrustum","scratchOrthographicFrustum","scratchOrthographicOffCenterFrustum","createWorkingFrustum","fov","infiniteProjectionMatrix","width","obtainTranslucentCommandExecutionFunction","globeDepth","prepareColorTextures","executeCommands","performTranslucentPass","executeTranslucentCommands","performTranslucent3DTilesClassification","translucentTileClassification","has3DTilesClassificationCommands","CESIUM_3D_TILE_CLASSIFICATION","depthStencilTexture","executeClassificationCommands","updateCamera","renderEnvironment","globeTranslucencyFramebuffer","sceneFramebuffer","numFrustums","clearDepth","clearStencil","clearClassificationStencil","depthPlane","height2D","z","performPass","passId","commandCount","j","performIdPass","index","max","updateFrustum","stencilBuffer","GLOBE","executeGlobeCommands","executeCopyDepth","TERRAIN_CLASSIFICATION","executeGlobeClassificationCommands","CESIUM_3D_TILE","executeUpdateDepth","clear","opaqueClassificationFramebuffer","_fbo","prepareTextures","getDepthStencilTexture","CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW","executeClassified","executeUnclassified","OPAQUE","pickDepth","getPickDepth","getIdFramebuffer","ENVIRONMENT","copy","executeComputeCommands","COMPUTE","executeOverlayCommands","OVERLAY","insertShadowCastCommands","shadowMapCullingVolume","isPointLight","numberOfPasses","shadowedPasses","indexOf","k","wasVisible","cascadeVolume","executeShadowMapCastCommands","outOfView","castCommand","castCommands","scratchEyeTranslation","updateAndExecuteCommands","updateAndClearFramebuffers","executeWebVRCommands","ROTATE","executeCommandsInViewport","execute2DViewportCommands","updateAndRenderPrimitives","createPotentiallyVisibleSet","x","y","savedCamera","fo","eyeTranslation","multiplyByScalar","right","height","offset","add","subtract","scratch2DViewportCartographic","PI","PI_OVER_TWO","scratch2DViewportMaxCoord","scratch2DViewportSavedPosition","scratch2DViewportTransform","scratch2DViewportCameraTransform","scratch2DViewportEyePoint","scratch2DViewportWindowCoords","scratch2DViewport","originalViewport","maxCartographic","maxCoord","project","transform","_setTransform","IDENTITY","viewportTransformation","computeViewportTransformation","projectionMatrix","eyePoint","fromElements","sign","windowCoordinates","pointToGLWindowCoordinates","floor","viewportX","viewportWidth","abs","left","firstViewport","scratchCullingVolume","updateEnvironment","renderPass","offscreenPass","environmentVisible","setDynamicLighting","fromGlobeFlags","_surface","_tilesToRender","dynamicLighting","sunCommands","drawCommand","computeCommand","depthTestAgainstTerrain","sunVisibleThroughGlobe","planes","envMaps","specularEnvironmentCubeMap","url","updateDebugFrustumPlanes","updateOnChange","frustumSplits","updateShadowMaps","fromLightSource","clearColor","colorFramebufferManager","ambientOcclusion","fxaa","bloom","hasSelected","depthFramebuffer","previousFramebuffer","updateAndClear","resolveFramebuffers","globeFramebuffer","_colorFramebuffer","idFramebuffer","hasTranslucentDepth","inputFramebuffer","colorTexture","getColorTexture","idTexture","executeCopyColor","callAfterRenderFunctions","functions","shouldRequestRender","getGlobeHeight","MORPHING","cartographic","positionCartographic","getHeight","heightReference","ignore3dTiles","CLAMP_TO_TERRAIN","RELATIVE_TO_TERRAIN","ignoreTerrain","CLAMP_TO_3D_TILE","RELATIVE_TO_3D_TILE","maxHeight","Number","NEGATIVE_INFINITY","primitive","isCesium3DTileset","enableCollision","result","updateHeightScratchCartographic","updateHeight","callback","typeOf","func","callbackWrapper","terrainRemoveCallback","tilesetRemoveCallbacks","createPrimitiveEventListener","tilesetRemoveCallback","removeAddedListener","primitiveAdded","removeRemovedListener","primitiveRemoved","removeCallback","values","forEach","isCameraUnderground","cameraController","onMap","shaderCache","destroyReleasedShaderPrograms","textureCache","destroyReleasedTextures","updatedCartographic","_updateCameraChanged","updateDebugShowFramesPerSecond","renderedThisFrame","performanceContainer","performanceDisplay","_performanceContainer","throttled","removeChild","prePassesUpdate","resetBudgets","postPassesUpdate","scratchBackgroundColor","red","pow","green","blue","negate","sunDirectionWC","direction","blendingEnabled","scissorTest","beginFrame","endFrame","tilesLoaded","tryAndCatchError","functionToExecute","error","raiseEvent","updateMostDetailedRayPicks","newFrame","cameraChanged","checkForCameraUpdates","shouldRender","difference","secondsDifference","incrementWrap","updatePreloadPass","updatePreloadFlightPass","updateRequestRenderModeDeferCheckPass","forceRender","clampLineWidth","minimumAliasedLineWidth","windowPosition","pickedObject","voxelPrimitive","voxelCoordinate","pickVoxelCoordinate","tileIndex","keyframeNode","_traversal","findKeyframeNode","sampleIndex","fromKeyframeNode","pickMetadata","object","string","structuralMetadata","detail","model","schema","classProperty","metadataProperty","pickedMetadataValues","pickMetadataSchema","pickPositionWorldCoordinates","pickPosition","drillPick","limit","updateForPass","canPreloadFlight","pickFromRay","ray","objectsToExclude","drillPickFromRay","pickFromRayMostDetailed","drillPickFromRayMostDetailed","sampleHeight","clampToHeight","cartesian","sampleHeightMostDetailed","positions","clampToHeightMostDetailed","cartesians","cartesianToCanvasCoordinates","worldToWindowCoordinates","completeMorph","duration","setTerrain","terrain","provider","readyEvent","removeAll","_debugSphere"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Scene.js"],"sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport BoxGeometry from \"../Core/BoxGeometry.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport CullingVolume from \"../Core/CullingVolume.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport EllipsoidGeometry from \"../Core/EllipsoidGeometry.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryPipeline from \"../Core/GeometryPipeline.js\";\nimport HeightReference from \"./HeightReference.js\";\nimport Intersect from \"../Core/Intersect.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport mergeSort from \"../Core/mergeSort.js\";\nimport Occluder from \"../Core/Occluder.js\";\nimport OrthographicFrustum from \"../Core/OrthographicFrustum.js\";\nimport OrthographicOffCenterFrustum from \"../Core/OrthographicOffCenterFrustum.js\";\nimport PerspectiveFrustum from \"../Core/PerspectiveFrustum.js\";\nimport PerspectiveOffCenterFrustum from \"../Core/PerspectiveOffCenterFrustum.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport RequestScheduler from \"../Core/RequestScheduler.js\";\nimport TaskProcessor from \"../Core/TaskProcessor.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport ComputeEngine from \"../Renderer/ComputeEngine.js\";\nimport Context from \"../Renderer/Context.js\";\nimport ContextLimits from \"../Renderer/ContextLimits.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport Atmosphere from \"./Atmosphere.js\";\nimport BrdfLutGenerator from \"./BrdfLutGenerator.js\";\nimport Camera from \"./Camera.js\";\nimport Cesium3DTilePass from \"./Cesium3DTilePass.js\";\nimport Cesium3DTilePassState from \"./Cesium3DTilePassState.js\";\nimport CreditDisplay from \"./CreditDisplay.js\";\nimport DebugCameraPrimitive from \"./DebugCameraPrimitive.js\";\nimport DepthPlane from \"./DepthPlane.js\";\nimport DerivedCommand from \"./DerivedCommand.js\";\nimport DeviceOrientationCameraController from \"./DeviceOrientationCameraController.js\";\nimport DynamicAtmosphereLightingType from \"./DynamicAtmosphereLightingType.js\";\nimport Fog from \"./Fog.js\";\nimport FrameState from \"./FrameState.js\";\nimport GlobeTranslucencyState from \"./GlobeTranslucencyState.js\";\nimport InvertClassification from \"./InvertClassification.js\";\nimport JobScheduler from \"./JobScheduler.js\";\nimport MapMode2D from \"./MapMode2D.js\";\nimport PerformanceDisplay from \"./PerformanceDisplay.js\";\nimport PerInstanceColorAppearance from \"./PerInstanceColorAppearance.js\";\nimport Picking from \"./Picking.js\";\nimport PostProcessStageCollection from \"./PostProcessStageCollection.js\";\nimport Primitive from \"./Primitive.js\";\nimport PrimitiveCollection from \"./PrimitiveCollection.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\nimport SceneTransitioner from \"./SceneTransitioner.js\";\nimport ScreenSpaceCameraController from \"./ScreenSpaceCameraController.js\";\nimport ShadowMap from \"./ShadowMap.js\";\nimport SpecularEnvironmentCubeMap from \"./SpecularEnvironmentCubeMap.js\";\nimport StencilConstants from \"./StencilConstants.js\";\nimport SunLight from \"./SunLight.js\";\nimport SunPostProcess from \"./SunPostProcess.js\";\nimport TweenCollection from \"./TweenCollection.js\";\nimport View from \"./View.js\";\nimport DebugInspector from \"./DebugInspector.js\";\nimport VoxelCell from \"./VoxelCell.js\";\nimport VoxelPrimitive from \"./VoxelPrimitive.js\";\nimport getMetadataClassProperty from \"./getMetadataClassProperty.js\";\nimport PickedMetadataInfo from \"./PickedMetadataInfo.js\";\nimport getMetadataProperty from \"./getMetadataProperty.js\";\n\nconst requestRenderAfterFrame = function (scene) {\n  return function () {\n    scene.frameState.afterRender.push(function () {\n      scene.requestRender();\n    });\n  };\n};\n\n/**\n * The container for all 3D graphical objects and state in a Cesium virtual scene.  Generally,\n * a scene is not created directly; instead, it is implicitly created by {@link CesiumWidget}.\n *\n * @alias Scene\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {HTMLCanvasElement} options.canvas The HTML canvas element to create the scene for.\n * @param {ContextOptions} [options.contextOptions] Context and WebGL creation properties.\n * @param {Element} [options.creditContainer] The HTML element in which the credits will be displayed.\n * @param {Element} [options.creditViewport] The HTML element in which to display the credit popup.  If not specified, the viewport will be a added as a sibling of the canvas.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The default ellipsoid. If not specified, the default ellipsoid is used.\n * @param {MapProjection} [options.mapProjection=new GeographicProjection(options.ellipsoid)] The map projection to use in 2D and Columbus View modes.\n * @param {boolean} [options.orderIndependentTranslucency=true] If true and the configuration supports it, use order independent translucency.\n * @param {boolean} [options.scene3DOnly=false] If true, optimizes memory use and performance for 3D mode but disables the ability to use 2D or Columbus View.\n * @param {boolean} [options.shadows=false] Determines if shadows are cast by light sources.\n * @param {MapMode2D} [options.mapMode2D=MapMode2D.INFINITE_SCROLL] Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n * @param {boolean} [options.requestRenderMode=false] If true, rendering a frame will only occur when needed as determined by changes within the scene. Enabling improves performance of the application, but requires using {@link Scene#requestRender} to render a new frame explicitly in this mode. This will be necessary in many cases after making changes to the scene in other parts of the API. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @param {number} [options.maximumRenderTimeChange=0.0] If requestRenderMode is true, this value defines the maximum change in simulation time allowed before a render is requested. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @param {number} [options.depthPlaneEllipsoidOffset=0.0] Adjust the DepthPlane to address rendering artefacts below ellipsoid zero elevation.\n * @param {number} [options.msaaSamples=4] If provided, this value controls the rate of multisample antialiasing. Typical multisampling rates are 2, 4, and sometimes 8 samples per pixel. Higher sampling rates of MSAA may impact performance in exchange for improved visual quality. This value only applies to WebGL2 contexts that support multisample render targets. Set to 1 to disable MSAA.\n *\n * @see CesiumWidget\n * @see {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}\n *\n * @exception {DeveloperError} options and options.canvas are required.\n *\n * @example\n * // Create scene without anisotropic texture filtering\n * const scene = new Cesium.Scene({\n *   canvas : canvas,\n *   contextOptions : {\n *     allowTextureFilterAnisotropic : false\n *   }\n * });\n */\nfunction Scene(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const canvas = options.canvas;\n  let creditContainer = options.creditContainer;\n  let creditViewport = options.creditViewport;\n\n  const contextOptions = clone(options.contextOptions);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(canvas)) {\n    throw new DeveloperError(\"options and options.canvas are required.\");\n  }\n  //>>includeEnd('debug');\n  const hasCreditContainer = defined(creditContainer);\n  const context = new Context(canvas, contextOptions);\n  if (!hasCreditContainer) {\n    creditContainer = document.createElement(\"div\");\n    creditContainer.style.position = \"absolute\";\n    creditContainer.style.bottom = \"0\";\n    creditContainer.style[\"text-shadow\"] = \"0 0 2px #000000\";\n    creditContainer.style.color = \"#ffffff\";\n    creditContainer.style[\"font-size\"] = \"10px\";\n    creditContainer.style[\"padding-right\"] = \"5px\";\n    canvas.parentNode.appendChild(creditContainer);\n  }\n  if (!defined(creditViewport)) {\n    creditViewport = canvas.parentNode;\n  }\n\n  this._id = createGuid();\n  this._jobScheduler = new JobScheduler();\n  this._frameState = new FrameState(\n    context,\n    new CreditDisplay(creditContainer, \"â€¢\", creditViewport),\n    this._jobScheduler,\n  );\n  this._frameState.scene3DOnly = defaultValue(options.scene3DOnly, false);\n  this._removeCreditContainer = !hasCreditContainer;\n  this._creditContainer = creditContainer;\n\n  this._canvas = canvas;\n  this._context = context;\n  this._computeEngine = new ComputeEngine(context);\n\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.default);\n  this._globe = undefined;\n  this._globeTranslucencyState = new GlobeTranslucencyState();\n  this._primitives = new PrimitiveCollection();\n  this._groundPrimitives = new PrimitiveCollection();\n\n  this._globeHeight = undefined;\n  this._globeHeightDirty = true;\n  this._cameraUnderground = false;\n  this._removeUpdateHeightCallback = undefined;\n\n  this._logDepthBuffer = Scene.defaultLogDepthBuffer && context.fragmentDepth;\n  this._logDepthBufferDirty = true;\n\n  this._tweens = new TweenCollection();\n\n  this._shaderFrameCount = 0;\n\n  this._sunPostProcess = undefined;\n\n  this._computeCommandList = [];\n  this._overlayCommandList = [];\n\n  this._useOIT = defaultValue(options.orderIndependentTranslucency, true);\n  /**\n   * The function that will be used for executing translucent commands when\n   * useOIT is true. This is created once in\n   * obtainTranslucentCommandExecutionFunction, then cached here.\n   * @private\n   */\n  this._executeOITFunction = undefined;\n\n  this._depthPlane = new DepthPlane(options.depthPlaneEllipsoidOffset);\n\n  this._clearColorCommand = new ClearCommand({\n    color: new Color(),\n    stencil: 0,\n    owner: this,\n  });\n  this._depthClearCommand = new ClearCommand({\n    depth: 1.0,\n    owner: this,\n  });\n  this._stencilClearCommand = new ClearCommand({\n    stencil: 0,\n  });\n  this._classificationStencilClearCommand = new ClearCommand({\n    stencil: 0,\n    renderState: RenderState.fromCache({\n      stencilMask: StencilConstants.CLASSIFICATION_MASK,\n    }),\n  });\n\n  this._depthOnlyRenderStateCache = {};\n\n  this._transitioner = new SceneTransitioner(this);\n\n  this._preUpdate = new Event();\n  this._postUpdate = new Event();\n\n  this._renderError = new Event();\n  this._preRender = new Event();\n  this._postRender = new Event();\n\n  this._minimumDisableDepthTestDistance = 0.0;\n  this._debugInspector = new DebugInspector();\n\n  this._msaaSamples = defaultValue(options.msaaSamples, 4);\n\n  /**\n   * Exceptions occurring in <code>render</code> are always caught in order to raise the\n   * <code>renderError</code> event.  If this property is true, the error is rethrown\n   * after the event is raised.  If this property is false, the <code>render</code> function\n   * returns normally after raising the event.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.rethrowRenderErrors = false;\n\n  /**\n   * Determines whether or not to instantly complete the\n   * scene transition animation on user input.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.completeMorphOnUserInput = true;\n\n  /**\n   * The event fired at the beginning of a scene transition.\n   * @type {Event}\n   * @default Event()\n   */\n  this.morphStart = new Event();\n\n  /**\n   * The event fired at the completion of a scene transition.\n   * @type {Event}\n   * @default Event()\n   */\n  this.morphComplete = new Event();\n\n  /**\n   * The {@link SkyBox} used to draw the stars.\n   *\n   * @type {SkyBox}\n   * @default undefined\n   *\n   * @see Scene#backgroundColor\n   */\n  this.skyBox = undefined;\n\n  /**\n   * The sky atmosphere drawn around the globe.\n   *\n   * @type {SkyAtmosphere}\n   * @default undefined\n   */\n  this.skyAtmosphere = undefined;\n\n  /**\n   * The {@link Sun}.\n   *\n   * @type {Sun}\n   * @default undefined\n   */\n  this.sun = undefined;\n\n  /**\n   * Uses a bloom filter on the sun when enabled.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.sunBloom = true;\n  this._sunBloom = undefined;\n\n  /**\n   * The {@link Moon}\n   *\n   * @type Moon\n   * @default undefined\n   */\n  this.moon = undefined;\n\n  /**\n   * The background color, which is only visible if there is no sky box, i.e., {@link Scene#skyBox} is undefined.\n   *\n   * @type {Color}\n   * @default {@link Color.BLACK}\n   *\n   * @see Scene#skyBox\n   */\n  this.backgroundColor = Color.clone(Color.BLACK);\n\n  this._mode = SceneMode.SCENE3D;\n\n  this._mapProjection = defined(options.mapProjection)\n    ? options.mapProjection\n    : new GeographicProjection(this._ellipsoid);\n\n  /**\n   * The current morph transition time between 2D/Columbus View and 3D,\n   * with 0.0 being 2D or Columbus View and 1.0 being 3D.\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  this.morphTime = 1.0;\n\n  /**\n   * The far-to-near ratio of the multi-frustum when using a normal depth buffer.\n   * <p>\n   * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n   * when {@link Scene#logarithmicDepthBuffer} is <code>false</code>. When <code>logarithmicDepthBuffer</code> is\n   * <code>true</code>, use {@link Scene#logarithmicDepthFarToNearRatio}.\n   * </p>\n   *\n   * @type {number}\n   * @default 1000.0\n   */\n  this.farToNearRatio = 1000.0;\n\n  /**\n   * The far-to-near ratio of the multi-frustum when using a logarithmic depth buffer.\n   * <p>\n   * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n   * when {@link Scene#logarithmicDepthBuffer} is <code>true</code>. When <code>logarithmicDepthBuffer</code> is\n   * <code>false</code>, use {@link Scene#farToNearRatio}.\n   * </p>\n   *\n   * @type {number}\n   * @default 1e9\n   */\n  this.logarithmicDepthFarToNearRatio = 1e9;\n\n  /**\n   * Determines the uniform depth size in meters of each frustum of the multifrustum in 2D. If a primitive or model close\n   * to the surface shows z-fighting, decreasing this will eliminate the artifact, but decrease performance. On the\n   * other hand, increasing this will increase performance but may cause z-fighting among primitives close to the surface.\n   *\n   * @type {number}\n   * @default 1.75e6\n   */\n  this.nearToFarDistance2D = 1.75e6;\n\n  /**\n   * The vertical exaggeration of the scene.\n   * When set to 1.0, no exaggeration is applied.\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  this.verticalExaggeration = 1.0;\n\n  /**\n   * The reference height for vertical exaggeration of the scene.\n   * When set to 0.0, the exaggeration is applied relative to the ellipsoid surface.\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.verticalExaggerationRelativeHeight = 0.0;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * A function that determines what commands are executed.  As shown in the examples below,\n   * the function receives the command's <code>owner</code> as an argument, and returns a boolean indicating if the\n   * command should be executed.\n   * </p>\n   * <p>\n   * The default is <code>undefined</code>, indicating that all commands are executed.\n   * </p>\n   *\n   * @type Function\n   *\n   * @default undefined\n   *\n   * @example\n   * // Do not execute any commands.\n   * scene.debugCommandFilter = function(command) {\n   *     return false;\n   * };\n   *\n   * // Execute only the billboard's commands.  That is, only draw the billboard.\n   * const billboards = new Cesium.BillboardCollection();\n   * scene.debugCommandFilter = function(command) {\n   *     return command.owner === billboards;\n   * };\n   */\n  this.debugCommandFilter = undefined;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, commands are randomly shaded.  This is useful\n   * for performance analysis to see what parts of a scene or model are\n   * command-dense and could benefit from batching.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugShowCommands = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, commands are shaded based on the frustums they\n   * overlap.  Commands in the closest frustum are tinted red, commands in\n   * the next closest are green, and commands in the farthest frustum are\n   * blue.  If a command overlaps more than one frustum, the color components\n   * are combined, e.g., a command overlapping the first two frustums is tinted\n   * yellow.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugShowFrustums = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Displays frames per second and time between frames.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugShowFramesPerSecond = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Indicates which frustum will have depth information displayed.\n   * </p>\n   *\n   * @type {number}\n   *\n   * @default 1\n   */\n  this.debugShowDepthFrustum = 1;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, draws outlines to show the boundaries of the camera frustums\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugShowFrustumPlanes = false;\n  this._debugShowFrustumPlanes = false;\n  this._debugFrustumPlanes = undefined;\n\n  /**\n   * When <code>true</code>, enables picking using the depth buffer.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.useDepthPicking = true;\n\n  /**\n   * When <code>true</code>, enables picking translucent geometry using the depth buffer. Note that {@link Scene#useDepthPicking} must also be true for enabling this to work.\n   *\n   * <p>\n   * There is a decrease in performance when enabled. There are extra draw calls to write depth for\n   * translucent geometry.\n   * </p>\n   *\n   * @example\n   * // picking the position of a translucent primitive\n   * viewer.screenSpaceEventHandler.setInputAction(function onLeftClick(movement) {\n   *      const pickedFeature = viewer.scene.pick(movement.position);\n   *      if (!Cesium.defined(pickedFeature)) {\n   *          // nothing picked\n   *          return;\n   *      }\n   *      const worldPosition = viewer.scene.pickPosition(movement.position);\n   * }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.pickTranslucentDepth = false;\n\n  /**\n   * The time in milliseconds to wait before checking if the camera has not moved and fire the cameraMoveEnd event.\n   * @type {number}\n   * @default 500.0\n   * @private\n   */\n  this.cameraEventWaitTime = 500.0;\n\n  /**\n   * Settings for atmosphere lighting effects affecting 3D Tiles and model rendering. This is not to be confused with\n   * {@link Scene#skyAtmosphere} which is responsible for rendering the sky.\n   *\n   * @type {Atmosphere}\n   */\n  this.atmosphere = new Atmosphere();\n\n  /**\n   * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n   * performance improvements by rendering less geometry and dispatching less terrain requests.\n   *\n   * Disbaled by default if an ellipsoid other than WGS84 is used.\n   * @type {Fog}\n   */\n  this.fog = new Fog();\n  this.fog.enabled = Ellipsoid.WGS84.equals(this._ellipsoid);\n\n  if (!Ellipsoid.WGS84.equals(this._ellipsoid)) {\n    Camera.DEFAULT_VIEW_RECTANGLE = Rectangle.fromDegrees(\n      -45.0,\n      -45.0,\n      45.0,\n      45.0,\n    );\n  }\n\n  this._shadowMapCamera = new Camera(this);\n\n  /**\n   * The shadow map for the scene's light source. When enabled, models, primitives, and the globe may cast and receive shadows.\n   * @type {ShadowMap}\n   */\n  this.shadowMap = new ShadowMap({\n    context: context,\n    lightCamera: this._shadowMapCamera,\n    enabled: defaultValue(options.shadows, false),\n  });\n\n  /**\n   * When <code>false</code>, 3D Tiles will render normally. When <code>true</code>, classified 3D Tile geometry will render normally and\n   * unclassified 3D Tile geometry will render with the color multiplied by {@link Scene#invertClassificationColor}.\n   * @type {boolean}\n   * @default false\n   */\n  this.invertClassification = false;\n\n  /**\n   * The highlight color of unclassified 3D Tile geometry when {@link Scene#invertClassification} is <code>true</code>.\n   * <p>When the color's alpha is less than 1.0, the unclassified portions of the 3D Tiles will not blend correctly with the classified positions of the 3D Tiles.</p>\n   * <p>Also, when the color's alpha is less than 1.0, the WEBGL_depth_texture and EXT_frag_depth WebGL extensions must be supported.</p>\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.invertClassificationColor = Color.clone(Color.WHITE);\n\n  this._actualInvertClassificationColor = Color.clone(\n    this._invertClassificationColor,\n  );\n  this._invertClassification = new InvertClassification();\n\n  /**\n   * The focal length for use when with cardboard or WebVR.\n   * @type {number}\n   */\n  this.focalLength = undefined;\n\n  /**\n   * The eye separation distance in meters for use with cardboard or WebVR.\n   * @type {number}\n   */\n  this.eyeSeparation = undefined;\n\n  /**\n   * Post processing effects applied to the final render.\n   * @type {PostProcessStageCollection}\n   */\n  this.postProcessStages = new PostProcessStageCollection();\n\n  this._brdfLutGenerator = new BrdfLutGenerator();\n\n  this._performanceDisplay = undefined;\n  this._debugVolume = undefined;\n\n  this._screenSpaceCameraController = new ScreenSpaceCameraController(this);\n  this._cameraUnderground = false;\n  this._mapMode2D = defaultValue(options.mapMode2D, MapMode2D.INFINITE_SCROLL);\n\n  // Keeps track of the state of a frame. FrameState is the state across\n  // the primitives of the scene. This state is for internally keeping track\n  // of celestial and environment effects that need to be updated/rendered in\n  // a certain order as well as updating/tracking framebuffer usage.\n  this._environmentState = {\n    skyBoxCommand: undefined,\n    skyAtmosphereCommand: undefined,\n    sunDrawCommand: undefined,\n    sunComputeCommand: undefined,\n    moonCommand: undefined,\n\n    isSunVisible: false,\n    isMoonVisible: false,\n    isReadyForAtmosphere: false,\n    isSkyAtmosphereVisible: false,\n\n    clearGlobeDepth: false,\n    useDepthPlane: false,\n    renderTranslucentDepthForPick: false,\n\n    originalFramebuffer: undefined,\n    useGlobeDepthFramebuffer: false,\n    useOIT: false,\n    useInvertClassification: false,\n    usePostProcess: false,\n    usePostProcessSelected: false,\n    useWebVR: false,\n  };\n\n  this._useWebVR = false;\n  this._cameraVR = undefined;\n  this._aspectRatioVR = undefined;\n\n  /**\n   * When <code>true</code>, rendering a frame will only occur when needed as determined by changes within the scene.\n   * Enabling improves performance of the application, but requires using {@link Scene#requestRender}\n   * to render a new frame explicitly in this mode. This will be necessary in many cases after making changes\n   * to the scene in other parts of the API.\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#maximumRenderTimeChange\n   * @see Scene#requestRender\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.requestRenderMode = defaultValue(options.requestRenderMode, false);\n  this._renderRequested = true;\n\n  /**\n   * If {@link Scene#requestRenderMode} is <code>true</code>, this value defines the maximum change in\n   * simulation time allowed before a render is requested. Lower values increase the number of frames rendered\n   * and higher values decrease the number of frames rendered. If <code>undefined</code>, changes to\n   * the simulation time will never request a render.\n   * This value impacts the rate of rendering for changes in the scene like lighting, entity property updates,\n   * and animations.\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#requestRenderMode\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.maximumRenderTimeChange = defaultValue(\n    options.maximumRenderTimeChange,\n    0.0,\n  );\n  this._lastRenderTime = undefined;\n  this._frameRateMonitor = undefined;\n\n  this._removeRequestListenerCallback =\n    RequestScheduler.requestCompletedEvent.addEventListener(\n      requestRenderAfterFrame(this),\n    );\n  this._removeTaskProcessorListenerCallback =\n    TaskProcessor.taskCompletedEvent.addEventListener(\n      requestRenderAfterFrame(this),\n    );\n  this._removeGlobeCallbacks = [];\n  this._removeTerrainProviderReadyListener = undefined;\n\n  const viewport = new BoundingRectangle(\n    0,\n    0,\n    context.drawingBufferWidth,\n    context.drawingBufferHeight,\n  );\n  const camera = new Camera(this);\n\n  if (this._logDepthBuffer) {\n    camera.frustum.near = 0.1;\n    camera.frustum.far = 10000000000.0;\n  }\n\n  /**\n   * The camera view for the scene camera flight destination. Used for preloading flight destination tiles.\n   * @type {Camera}\n   * @private\n   */\n  this.preloadFlightCamera = new Camera(this);\n\n  /**\n   * The culling volume for the scene camera flight destination. Used for preloading flight destination tiles.\n   * @type {CullingVolume}\n   * @private\n   */\n  this.preloadFlightCullingVolume = undefined;\n\n  this._picking = new Picking(this);\n  this._defaultView = new View(this, camera, viewport);\n  this._view = this._defaultView;\n\n  this._hdr = undefined;\n  this._hdrDirty = undefined;\n  this.highDynamicRange = false;\n  this.gamma = 2.2;\n\n  /**\n   * The spherical harmonic coefficients for image-based lighting of PBR models.\n   * @type {Cartesian3[]}\n   */\n  this.sphericalHarmonicCoefficients = undefined;\n\n  /**\n   * The url to the KTX2 file containing the specular environment map and convoluted mipmaps for image-based lighting of PBR models.\n   * @type {string}\n   */\n  this.specularEnvironmentMaps = undefined;\n  this._specularEnvironmentCubeMap = undefined;\n\n  /**\n   * The light source for shading. Defaults to a directional light from the Sun.\n   * @type {Light}\n   */\n  this.light = new SunLight();\n\n  // Give frameState, camera, and screen space camera controller initial state before rendering\n  updateFrameNumber(this, 0.0, JulianDate.now());\n  this.updateFrameState();\n  this.initializeFrame();\n}\n\n/**\n * Use this to set the default value for {@link Scene#logarithmicDepthBuffer} in newly constructed Scenes\n * This property relies on fragmentDepth being supported.\n */\nScene.defaultLogDepthBuffer = true;\n\nfunction updateGlobeListeners(scene, globe) {\n  for (let i = 0; i < scene._removeGlobeCallbacks.length; ++i) {\n    scene._removeGlobeCallbacks[i]();\n  }\n  scene._removeGlobeCallbacks.length = 0;\n\n  const removeGlobeCallbacks = [];\n  if (defined(globe)) {\n    removeGlobeCallbacks.push(\n      globe.imageryLayersUpdatedEvent.addEventListener(\n        requestRenderAfterFrame(scene),\n      ),\n    );\n    removeGlobeCallbacks.push(\n      globe.terrainProviderChanged.addEventListener(\n        requestRenderAfterFrame(scene),\n      ),\n    );\n  }\n  scene._removeGlobeCallbacks = removeGlobeCallbacks;\n}\n\nObject.defineProperties(Scene.prototype, {\n  /**\n   * Gets the canvas element to which this scene is bound.\n   * @memberof Scene.prototype\n   *\n   * @type {HTMLCanvasElement}\n   * @readonly\n   */\n  canvas: {\n    get: function () {\n      return this._canvas;\n    },\n  },\n\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Scene.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferHeight: {\n    get: function () {\n      return this._context.drawingBufferHeight;\n    },\n  },\n\n  /**\n   * The drawingBufferWidth of the underlying GL context.\n   * @memberof Scene.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferWidth|drawingBufferWidth}\n   */\n  drawingBufferWidth: {\n    get: function () {\n      return this._context.drawingBufferWidth;\n    },\n  },\n\n  /**\n   * The maximum aliased line width, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof Scene.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  maximumAliasedLineWidth: {\n    get: function () {\n      return ContextLimits.maximumAliasedLineWidth;\n    },\n  },\n\n  /**\n   * The maximum length in pixels of one edge of a cube map, supported by this WebGL implementation.  It will be at least 16.\n   * @memberof Scene.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>GL_MAX_CUBE_MAP_TEXTURE_SIZE</code>.\n   */\n  maximumCubeMapSize: {\n    get: function () {\n      return ContextLimits.maximumCubeMapSize;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#pickPosition} function is supported.\n   * @memberof Scene.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @see Scene#pickPosition\n   */\n  pickPositionSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#sampleHeight} and {@link Scene#sampleHeightMostDetailed} functions are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @see Scene#sampleHeight\n   * @see Scene#sampleHeightMostDetailed\n   */\n  sampleHeightSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#clampToHeight} and {@link Scene#clampToHeightMostDetailed} functions are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @see Scene#clampToHeight\n   * @see Scene#clampToHeightMostDetailed\n   */\n  clampToHeightSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#invertClassification} is supported.\n   * @memberof Scene.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @see Scene#invertClassification\n   */\n  invertClassificationSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if specular environment maps are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @see Scene#specularEnvironmentMaps\n   */\n  specularEnvironmentMapsSupported: {\n    get: function () {\n      return SpecularEnvironmentCubeMap.isSupported(this._context);\n    },\n  },\n\n  /**\n   * The ellipsoid.  If not specified, the default ellipsoid is used.\n   * @memberof Scene.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n\n  /**\n   * Gets or sets the depth-test ellipsoid.\n   * @memberof Scene.prototype\n   *\n   * @type {Globe}\n   */\n  globe: {\n    get: function () {\n      return this._globe;\n    },\n\n    set: function (globe) {\n      this._globe = this._globe && this._globe.destroy();\n      this._globe = globe;\n\n      updateGlobeListeners(this, globe);\n    },\n  },\n\n  /**\n   * Gets the collection of primitives.\n   * @memberof Scene.prototype\n   *\n   * @type {PrimitiveCollection}\n   * @readonly\n   */\n  primitives: {\n    get: function () {\n      return this._primitives;\n    },\n  },\n\n  /**\n   * Gets the collection of ground primitives.\n   * @memberof Scene.prototype\n   *\n   * @type {PrimitiveCollection}\n   * @readonly\n   */\n  groundPrimitives: {\n    get: function () {\n      return this._groundPrimitives;\n    },\n  },\n\n  /**\n   * Gets or sets the camera.\n   * @memberof Scene.prototype\n   *\n   * @type {Camera}\n   * @readonly\n   */\n  camera: {\n    get: function () {\n      return this._view.camera;\n    },\n    set: function (camera) {\n      // For internal use only. Documentation is still @readonly.\n      this._view.camera = camera;\n    },\n  },\n\n  /**\n   * Gets or sets the view.\n   * @memberof Scene.prototype\n   *\n   * @type {View}\n   * @readonly\n   *\n   * @private\n   */\n  view: {\n    get: function () {\n      return this._view;\n    },\n    set: function (view) {\n      // For internal use only. Documentation is still @readonly.\n      this._view = view;\n    },\n  },\n\n  /**\n   * Gets the default view.\n   * @memberof Scene.prototype\n   *\n   * @type {View}\n   * @readonly\n   *\n   * @private\n   */\n  defaultView: {\n    get: function () {\n      return this._defaultView;\n    },\n  },\n\n  /**\n   * Gets picking functions and state\n   * @memberof Scene.prototype\n   *\n   * @type {Picking}\n   * @readonly\n   *\n   * @private\n   */\n  picking: {\n    get: function () {\n      return this._picking;\n    },\n  },\n\n  /**\n   * Gets the controller for camera input handling.\n   * @memberof Scene.prototype\n   *\n   * @type {ScreenSpaceCameraController}\n   * @readonly\n   */\n  screenSpaceCameraController: {\n    get: function () {\n      return this._screenSpaceCameraController;\n    },\n  },\n\n  /**\n   * Get the map projection to use in 2D and Columbus View modes.\n   * @memberof Scene.prototype\n   *\n   * @type {MapProjection}\n   * @readonly\n   *\n   * @default new GeographicProjection()\n   */\n  mapProjection: {\n    get: function () {\n      return this._mapProjection;\n    },\n  },\n\n  /**\n   * Gets the job scheduler\n   * @memberof Scene.prototype\n   * @type {JobScheduler}\n   * @readonly\n   *\n   * @private\n   */\n  jobScheduler: {\n    get: function () {\n      return this._jobScheduler;\n    },\n  },\n\n  /**\n   * Gets state information about the current scene. If called outside of a primitive's <code>update</code>\n   * function, the previous frame's state is returned.\n   * @memberof Scene.prototype\n   *\n   * @type {FrameState}\n   * @readonly\n   *\n   * @private\n   */\n  frameState: {\n    get: function () {\n      return this._frameState;\n    },\n  },\n\n  /**\n   * Gets the environment state.\n   * @memberof Scene.prototype\n   *\n   * @type {EnvironmentState}\n   * @readonly\n   *\n   * @private\n   */\n  environmentState: {\n    get: function () {\n      return this._environmentState;\n    },\n  },\n\n  /**\n   * Gets the collection of tweens taking place in the scene.\n   * @memberof Scene.prototype\n   *\n   * @type {TweenCollection}\n   * @readonly\n   *\n   * @private\n   */\n  tweens: {\n    get: function () {\n      return this._tweens;\n    },\n  },\n\n  /**\n   * Gets the collection of image layers that will be rendered on the globe.\n   * @memberof Scene.prototype\n   *\n   * @type {ImageryLayerCollection}\n   * @readonly\n   */\n  imageryLayers: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.imageryLayers;\n    },\n  },\n\n  /**\n   * The terrain provider providing surface geometry for the globe.\n   * @memberof Scene.prototype\n   *\n   * @type {TerrainProvider}\n   */\n  terrainProvider: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.terrainProvider;\n    },\n    set: function (terrainProvider) {\n      // Cancel any in-progress terrain update\n      this._removeTerrainProviderReadyListener =\n        this._removeTerrainProviderReadyListener &&\n        this._removeTerrainProviderReadyListener();\n\n      if (defined(this.globe)) {\n        this.globe.terrainProvider = terrainProvider;\n      }\n    },\n  },\n\n  /**\n   * Gets an event that's raised when the terrain provider is changed\n   * @memberof Scene.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  terrainProviderChanged: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.terrainProviderChanged;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised before the scene is updated or rendered.  Subscribers to the event\n   * receive the Scene instance as the first parameter and the current time as the second parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#postUpdate\n   * @see Scene#preRender\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  preUpdate: {\n    get: function () {\n      return this._preUpdate;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised immediately after the scene is updated and before the scene is rendered.\n   * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n   * parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#preRender\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  postUpdate: {\n    get: function () {\n      return this._postUpdate;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised when an error is thrown inside the <code>render</code> function.\n   * The Scene instance and the thrown error are the only two parameters passed to the event handler.\n   * By default, errors are not rethrown after this event is raised, but that can be changed by setting\n   * the <code>rethrowRenderErrors</code> property.\n   * @memberof Scene.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  renderError: {\n    get: function () {\n      return this._renderError;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised after the scene is updated and immediately before the scene is rendered.\n   * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n   * parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#postUpdate\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  preRender: {\n    get: function () {\n      return this._preRender;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised immediately after the scene is rendered.  Subscribers to the event\n   * receive the Scene instance as the first parameter and the current time as the second parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#postUpdate\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  postRender: {\n    get: function () {\n      return this._postRender;\n    },\n  },\n\n  /**\n   * Gets the simulation time when the scene was last rendered. Returns undefined if the scene has not yet been\n   * rendered.\n   * @memberof Scene.prototype\n   *\n   * @type {JulianDate}\n   * @readonly\n   */\n  lastRenderTime: {\n    get: function () {\n      return this._lastRenderTime;\n    },\n  },\n\n  /**\n   * @memberof Scene.prototype\n   * @private\n   * @readonly\n   */\n  context: {\n    get: function () {\n      return this._context;\n    },\n  },\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When {@link Scene.debugShowFrustums} is <code>true</code>, this contains\n   * properties with statistics about the number of command execute per frustum.\n   * <code>totalCommands</code> is the total number of commands executed, ignoring\n   * overlap. <code>commandsInFrustums</code> is an array with the number of times\n   * commands are executed redundantly, e.g., how many commands overlap two or\n   * three frustums.\n   * </p>\n   *\n   * @memberof Scene.prototype\n   *\n   * @type {object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  debugFrustumStatistics: {\n    get: function () {\n      return this._view.debugFrustumStatistics;\n    },\n  },\n\n  /**\n   * Gets whether or not the scene is optimized for 3D only viewing.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  scene3DOnly: {\n    get: function () {\n      return this._frameState.scene3DOnly;\n    },\n  },\n\n  /**\n   * Gets whether or not the scene has order independent translucency enabled.\n   * Note that this only reflects the original construction option, and there are\n   * other factors that could prevent OIT from functioning on a given system configuration.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  orderIndependentTranslucency: {\n    get: function () {\n      return this._useOIT;\n    },\n  },\n\n  /**\n   * Gets the unique identifier for this scene.\n   * @memberof Scene.prototype\n   * @type {string}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * Gets or sets the current mode of the scene.\n   * @memberof Scene.prototype\n   * @type {SceneMode}\n   * @default {@link SceneMode.SCENE3D}\n   */\n  mode: {\n    get: function () {\n      return this._mode;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (this.scene3DOnly && value !== SceneMode.SCENE3D) {\n        throw new DeveloperError(\n          \"Only SceneMode.SCENE3D is valid when scene3DOnly is true.\",\n        );\n      }\n      //>>includeEnd('debug');\n      if (value === SceneMode.SCENE2D) {\n        this.morphTo2D(0);\n      } else if (value === SceneMode.SCENE3D) {\n        this.morphTo3D(0);\n      } else if (value === SceneMode.COLUMBUS_VIEW) {\n        this.morphToColumbusView(0);\n        //>>includeStart('debug', pragmas.debug);\n      } else {\n        throw new DeveloperError(\n          \"value must be a valid SceneMode enumeration.\",\n        );\n        //>>includeEnd('debug');\n      }\n      this._mode = value;\n    },\n  },\n\n  /**\n   * Gets the number of frustums used in the last frame.\n   * @memberof Scene.prototype\n   * @type {FrustumCommands[]}\n   *\n   * @private\n   */\n  frustumCommandsList: {\n    get: function () {\n      return this._view.frustumCommandsList;\n    },\n  },\n\n  /**\n   * Gets the number of frustums used in the last frame.\n   * @memberof Scene.prototype\n   * @type {number}\n   *\n   * @private\n   */\n  numberOfFrustums: {\n    get: function () {\n      return this._view.frustumCommandsList.length;\n    },\n  },\n\n  /**\n   * When <code>true</code>, splits the scene into two viewports with steroscopic views for the left and right eyes.\n   * Used for cardboard and WebVR.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @default false\n   */\n  useWebVR: {\n    get: function () {\n      return this._useWebVR;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (this.camera.frustum instanceof OrthographicFrustum) {\n        throw new DeveloperError(\n          \"VR is unsupported with an orthographic projection.\",\n        );\n      }\n      //>>includeEnd('debug');\n      this._useWebVR = value;\n      if (this._useWebVR) {\n        this._frameState.creditDisplay.container.style.visibility = \"hidden\";\n        this._cameraVR = new Camera(this);\n        if (!defined(this._deviceOrientationCameraController)) {\n          this._deviceOrientationCameraController =\n            new DeviceOrientationCameraController(this);\n        }\n\n        this._aspectRatioVR = this.camera.frustum.aspectRatio;\n      } else {\n        this._frameState.creditDisplay.container.style.visibility = \"visible\";\n        this._cameraVR = undefined;\n        this._deviceOrientationCameraController =\n          this._deviceOrientationCameraController &&\n          !this._deviceOrientationCameraController.isDestroyed() &&\n          this._deviceOrientationCameraController.destroy();\n\n        this.camera.frustum.aspectRatio = this._aspectRatioVR;\n        this.camera.frustum.xOffset = 0.0;\n      }\n    },\n  },\n\n  /**\n   * Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n   * @memberof Scene.prototype\n   * @type {MapMode2D}\n   * @readonly\n   */\n  mapMode2D: {\n    get: function () {\n      return this._mapMode2D;\n    },\n  },\n\n  /**\n   * Gets or sets the position of the splitter within the viewport.  Valid values are between 0.0 and 1.0.\n   * @memberof Scene.prototype\n   *\n   * @type {number}\n   */\n  splitPosition: {\n    get: function () {\n      return this._frameState.splitPosition;\n    },\n    set: function (value) {\n      this._frameState.splitPosition = value;\n    },\n  },\n\n  /**\n   * The distance from the camera at which to disable the depth test of billboards, labels and points\n   * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n   * be applied. When less than zero, the depth test should never be applied. Setting the disableDepthTestDistance\n   * property of a billboard, label or point will override this value.\n   * @memberof Scene.prototype\n   * @type {number}\n   * @default 0.0\n   */\n  minimumDisableDepthTestDistance: {\n    get: function () {\n      return this._minimumDisableDepthTestDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value) || value < 0.0) {\n        throw new DeveloperError(\n          \"minimumDisableDepthTestDistance must be greater than or equal to 0.0.\",\n        );\n      }\n      //>>includeEnd('debug');\n      this._minimumDisableDepthTestDistance = value;\n    },\n  },\n\n  /**\n   * Whether or not to use a logarithmic depth buffer. Enabling this option will allow for less frustums in the multi-frustum,\n   * increasing performance. This property relies on fragmentDepth being supported.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   */\n  logarithmicDepthBuffer: {\n    get: function () {\n      return this._logDepthBuffer;\n    },\n    set: function (value) {\n      value = this._context.fragmentDepth && value;\n      if (this._logDepthBuffer !== value) {\n        this._logDepthBuffer = value;\n        this._logDepthBufferDirty = true;\n      }\n    },\n  },\n\n  /**\n   * The value used for gamma correction. This is only used when rendering with high dynamic range.\n   * @memberof Scene.prototype\n   * @type {number}\n   * @default 2.2\n   */\n  gamma: {\n    get: function () {\n      return this._context.uniformState.gamma;\n    },\n    set: function (value) {\n      this._context.uniformState.gamma = value;\n    },\n  },\n\n  /**\n   * Whether or not to use high dynamic range rendering.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @default false\n   */\n  highDynamicRange: {\n    get: function () {\n      return this._hdr;\n    },\n    set: function (value) {\n      const context = this._context;\n      const hdr =\n        value &&\n        context.depthTexture &&\n        (context.colorBufferFloat || context.colorBufferHalfFloat);\n      this._hdrDirty = hdr !== this._hdr;\n      this._hdr = hdr;\n    },\n  },\n\n  /**\n   * Whether or not high dynamic range rendering is supported.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @readonly\n   * @default true\n   */\n  highDynamicRangeSupported: {\n    get: function () {\n      const context = this._context;\n      return (\n        context.depthTexture &&\n        (context.colorBufferFloat || context.colorBufferHalfFloat)\n      );\n    },\n  },\n\n  /**\n   * Whether or not the camera is underneath the globe.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @readonly\n   * @default false\n   */\n  cameraUnderground: {\n    get: function () {\n      return this._cameraUnderground;\n    },\n  },\n\n  /**\n   * The sample rate of multisample antialiasing (values greater than 1 enable MSAA).\n   * @memberof Scene.prototype\n   * @type {number}\n   * @default 4\n   */\n  msaaSamples: {\n    get: function () {\n      return this._msaaSamples;\n    },\n    set: function (value) {\n      value = Math.min(value, ContextLimits.maximumSamples);\n      this._msaaSamples = value;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the Scene's context supports MSAA.\n   * @memberof Scene.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  msaaSupported: {\n    get: function () {\n      return this._context.msaa;\n    },\n  },\n\n  /**\n   * Ratio between a pixel and a density-independent pixel. Provides a standard unit of\n   * measure for real pixel measurements appropriate to a particular device.\n   *\n   * @memberof Scene.prototype\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  pixelRatio: {\n    get: function () {\n      return this._frameState.pixelRatio;\n    },\n    set: function (value) {\n      this._frameState.pixelRatio = value;\n    },\n  },\n\n  /**\n   * @private\n   */\n  opaqueFrustumNearOffset: {\n    get: function () {\n      return 0.9999;\n    },\n  },\n\n  /**\n   * @private\n   */\n  globeHeight: {\n    get: function () {\n      return this._globeHeight;\n    },\n  },\n});\n\n/**\n * Determines if a compressed texture format is supported.\n * @param {string} format The texture format. May be the name of the format or the WebGL extension name, e.g. s3tc or WEBGL_compressed_texture_s3tc.\n * @return {boolean} Whether or not the format is supported.\n */\nScene.prototype.getCompressedTextureFormatSupported = function (format) {\n  const context = this.context;\n  return (\n    ((format === \"WEBGL_compressed_texture_s3tc\" || format === \"s3tc\") &&\n      context.s3tc) ||\n    ((format === \"WEBGL_compressed_texture_pvrtc\" || format === \"pvrtc\") &&\n      context.pvrtc) ||\n    ((format === \"WEBGL_compressed_texture_etc\" || format === \"etc\") &&\n      context.etc) ||\n    ((format === \"WEBGL_compressed_texture_etc1\" || format === \"etc1\") &&\n      context.etc1) ||\n    ((format === \"WEBGL_compressed_texture_astc\" || format === \"astc\") &&\n      context.astc) ||\n    ((format === \"EXT_texture_compression_bptc\" || format === \"bc7\") &&\n      context.bc7)\n  );\n};\n\nfunction pickedMetadataInfoChanged(command, frameState) {\n  const oldPickedMetadataInfo = command.pickedMetadataInfo;\n  const newPickedMetadataInfo = frameState.pickedMetadataInfo;\n  if (oldPickedMetadataInfo?.schemaId !== newPickedMetadataInfo?.schemaId) {\n    return true;\n  }\n  if (oldPickedMetadataInfo?.className !== newPickedMetadataInfo?.className) {\n    return true;\n  }\n  if (\n    oldPickedMetadataInfo?.propertyName !== newPickedMetadataInfo?.propertyName\n  ) {\n    return true;\n  }\n  return false;\n}\n\nfunction updateDerivedCommands(scene, command, shadowsDirty) {\n  const frameState = scene._frameState;\n  const context = scene._context;\n  const oit = scene._view.oit;\n  const { lightShadowMaps, lightShadowsEnabled } = frameState.shadowState;\n\n  let derivedCommands = command.derivedCommands;\n\n  if (defined(command.pickId)) {\n    derivedCommands.picking = DerivedCommand.createPickDerivedCommand(\n      scene,\n      command,\n      context,\n      derivedCommands.picking,\n    );\n  }\n  if (frameState.pickingMetadata && command.pickMetadataAllowed) {\n    command.pickedMetadataInfo = frameState.pickedMetadataInfo;\n    if (defined(command.pickedMetadataInfo)) {\n      derivedCommands.pickingMetadata =\n        DerivedCommand.createPickMetadataDerivedCommand(\n          scene,\n          command,\n          context,\n          derivedCommands.pickingMetadata,\n        );\n    }\n  }\n  if (!command.pickOnly) {\n    derivedCommands.depth = DerivedCommand.createDepthOnlyDerivedCommand(\n      scene,\n      command,\n      context,\n      derivedCommands.depth,\n    );\n  }\n\n  derivedCommands.originalCommand = command;\n\n  if (scene._hdr) {\n    derivedCommands.hdr = DerivedCommand.createHdrCommand(\n      command,\n      context,\n      derivedCommands.hdr,\n    );\n    command = derivedCommands.hdr.command;\n    derivedCommands = command.derivedCommands;\n  }\n\n  if (lightShadowsEnabled && command.receiveShadows) {\n    derivedCommands.shadows = ShadowMap.createReceiveDerivedCommand(\n      lightShadowMaps,\n      command,\n      shadowsDirty,\n      context,\n      derivedCommands.shadows,\n    );\n  }\n\n  if (command.pass === Pass.TRANSLUCENT && defined(oit) && oit.isSupported()) {\n    if (lightShadowsEnabled && command.receiveShadows) {\n      derivedCommands.oit = defined(derivedCommands.oit)\n        ? derivedCommands.oit\n        : {};\n      derivedCommands.oit.shadows = oit.createDerivedCommands(\n        derivedCommands.shadows.receiveCommand,\n        context,\n        derivedCommands.oit.shadows,\n      );\n    } else {\n      derivedCommands.oit = oit.createDerivedCommands(\n        command,\n        context,\n        derivedCommands.oit,\n      );\n    }\n  }\n}\n\n/**\n * @private\n */\nScene.prototype.updateDerivedCommands = function (command) {\n  const { derivedCommands } = command;\n  if (!defined(derivedCommands)) {\n    // Is not a DrawCommand\n    return;\n  }\n\n  const frameState = this._frameState;\n  const { shadowState, useLogDepth } = this._frameState;\n  const context = this._context;\n\n  // Update derived commands when any shadow maps become dirty\n  let shadowsDirty = false;\n  const lastDirtyTime = shadowState.lastDirtyTime;\n  if (command.lastDirtyTime !== lastDirtyTime) {\n    command.lastDirtyTime = lastDirtyTime;\n    command.dirty = true;\n    shadowsDirty = true;\n  }\n\n  const useHdr = this._hdr;\n  const hasLogDepthDerivedCommands = defined(derivedCommands.logDepth);\n  const hasHdrCommands = defined(derivedCommands.hdr);\n  const hasDerivedCommands = defined(derivedCommands.originalCommand);\n  const needsLogDepthDerivedCommands =\n    useLogDepth && !hasLogDepthDerivedCommands;\n  const needsHdrCommands = useHdr && !hasHdrCommands;\n  const needsDerivedCommands = (!useLogDepth || !useHdr) && !hasDerivedCommands;\n  const needsUpdateForMetadataPicking =\n    frameState.pickingMetadata &&\n    pickedMetadataInfoChanged(command, frameState);\n  command.dirty =\n    command.dirty ||\n    needsLogDepthDerivedCommands ||\n    needsHdrCommands ||\n    needsDerivedCommands ||\n    needsUpdateForMetadataPicking;\n\n  if (!command.dirty) {\n    return;\n  }\n\n  command.dirty = false;\n\n  const { shadowsEnabled, shadowMaps } = shadowState;\n  if (shadowsEnabled && command.castShadows) {\n    derivedCommands.shadows = ShadowMap.createCastDerivedCommand(\n      shadowMaps,\n      command,\n      shadowsDirty,\n      context,\n      derivedCommands.shadows,\n    );\n  }\n\n  if (hasLogDepthDerivedCommands || needsLogDepthDerivedCommands) {\n    derivedCommands.logDepth = DerivedCommand.createLogDepthCommand(\n      command,\n      context,\n      derivedCommands.logDepth,\n    );\n    updateDerivedCommands(this, derivedCommands.logDepth.command, shadowsDirty);\n  }\n  if (hasDerivedCommands || needsDerivedCommands) {\n    updateDerivedCommands(this, command, shadowsDirty);\n  }\n};\n\nconst renderTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.RENDER,\n});\n\nconst preloadTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.PRELOAD,\n});\n\nconst preloadFlightTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.PRELOAD_FLIGHT,\n});\n\nconst requestRenderModeDeferCheckPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.REQUEST_RENDER_MODE_DEFER_CHECK,\n});\n\nconst scratchOccluderBoundingSphere = new BoundingSphere();\nlet scratchOccluder;\n/**\n * Get the central body occluder for the scene.\n * Assumes only one central body occluder, the top-level globe.\n *\n * @param {Scene} scene\n * @returns {Occluder|undefined}\n *\n * @private\n */\nfunction getOccluder(scene) {\n  if (\n    scene._mode !== SceneMode.SCENE3D ||\n    !scene.globe?.show ||\n    scene._cameraUnderground ||\n    scene._globeTranslucencyState.translucent\n  ) {\n    return undefined;\n  }\n\n  scratchOccluderBoundingSphere.radius =\n    scene.ellipsoid.minimumRadius + scene.frameState.minimumTerrainHeight;\n  scratchOccluder = Occluder.fromBoundingSphere(\n    scratchOccluderBoundingSphere,\n    scene.camera.positionWC,\n    scratchOccluder,\n  );\n\n  return scratchOccluder;\n}\n\n/**\n * @private\n * @param {FrameState.Passes} passes\n */\nScene.prototype.clearPasses = function (passes) {\n  passes.render = false;\n  passes.pick = false;\n  passes.pickVoxel = false;\n  passes.depth = false;\n  passes.postProcess = false;\n  passes.offscreen = false;\n};\n\nfunction updateFrameNumber(scene, frameNumber, time) {\n  const frameState = scene._frameState;\n  frameState.frameNumber = frameNumber;\n  frameState.time = JulianDate.clone(time, frameState.time);\n}\n\n/**\n * @private\n */\nScene.prototype.updateFrameState = function () {\n  const camera = this.camera;\n\n  const frameState = this._frameState;\n  frameState.commandList.length = 0;\n  frameState.shadowMaps.length = 0;\n  frameState.brdfLutGenerator = this._brdfLutGenerator;\n  frameState.environmentMap = this.skyBox && this.skyBox._cubeMap;\n  frameState.mode = this._mode;\n  frameState.morphTime = this.morphTime;\n  frameState.mapProjection = this.mapProjection;\n  frameState.camera = camera;\n  frameState.cullingVolume = camera.frustum.computeCullingVolume(\n    camera.positionWC,\n    camera.directionWC,\n    camera.upWC,\n  );\n  frameState.occluder = getOccluder(this);\n  frameState.minimumTerrainHeight = 0.0;\n  frameState.minimumDisableDepthTestDistance =\n    this._minimumDisableDepthTestDistance;\n  frameState.invertClassification = this.invertClassification;\n  frameState.useLogDepth =\n    this._logDepthBuffer &&\n    !(\n      this.camera.frustum instanceof OrthographicFrustum ||\n      this.camera.frustum instanceof OrthographicOffCenterFrustum\n    );\n  frameState.light = this.light;\n  frameState.cameraUnderground = this._cameraUnderground;\n  frameState.globeTranslucencyState = this._globeTranslucencyState;\n\n  const { globe } = this;\n  if (defined(globe) && globe._terrainExaggerationChanged) {\n    // Honor a user-set value for the old deprecated globe.terrainExaggeration.\n    // This can be removed when Globe.terrainExaggeration is removed.\n    this.verticalExaggeration = globe._terrainExaggeration;\n    this.verticalExaggerationRelativeHeight =\n      globe._terrainExaggerationRelativeHeight;\n    globe._terrainExaggerationChanged = false;\n  }\n  frameState.verticalExaggeration = this.verticalExaggeration;\n  frameState.verticalExaggerationRelativeHeight =\n    this.verticalExaggerationRelativeHeight;\n\n  if (\n    defined(this._specularEnvironmentCubeMap) &&\n    this._specularEnvironmentCubeMap.ready\n  ) {\n    frameState.specularEnvironmentMaps =\n      this._specularEnvironmentCubeMap.texture;\n    frameState.specularEnvironmentMapsMaximumLOD =\n      this._specularEnvironmentCubeMap.maximumMipmapLevel;\n  } else {\n    frameState.specularEnvironmentMaps = undefined;\n    frameState.specularEnvironmentMapsMaximumLOD = undefined;\n  }\n\n  frameState.sphericalHarmonicCoefficients = this.sphericalHarmonicCoefficients;\n\n  this._actualInvertClassificationColor = Color.clone(\n    this.invertClassificationColor,\n    this._actualInvertClassificationColor,\n  );\n  if (!InvertClassification.isTranslucencySupported(this._context)) {\n    this._actualInvertClassificationColor.alpha = 1.0;\n  }\n\n  frameState.invertClassificationColor = this._actualInvertClassificationColor;\n\n  if (defined(this.globe)) {\n    frameState.maximumScreenSpaceError = this.globe.maximumScreenSpaceError;\n  } else {\n    frameState.maximumScreenSpaceError = 2;\n  }\n\n  this.clearPasses(frameState.passes);\n\n  frameState.tilesetPassState = undefined;\n};\n\n/**\n * Check whether a draw command will render anything visible in the current Scene,\n * based on its bounding volume.\n *\n * @param {CullingVolume} cullingVolume The culling volume of the current Scene.\n * @param {DrawCommand} [command] The draw command\n * @param {Occluder} [occluder] An occluder that may be in front of the command's bounding volume.\n * @returns {boolean} <code>true</code> if the command's bounding volume is visible in the scene.\n *\n * @private\n */\nScene.prototype.isVisible = function (cullingVolume, command, occluder) {\n  if (!defined(command)) {\n    return false;\n  }\n  const { boundingVolume } = command;\n  if (!defined(boundingVolume) || !command.cull) {\n    return true;\n  }\n  if (cullingVolume.computeVisibility(boundingVolume) === Intersect.OUTSIDE) {\n    return false;\n  }\n  return (\n    !defined(occluder) ||\n    !command.occlude ||\n    !boundingVolume.isOccluded(occluder)\n  );\n};\n\nlet transformFrom2D = new Matrix4(\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  1.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  1.0,\n);\ntransformFrom2D = Matrix4.inverseTransformation(\n  transformFrom2D,\n  transformFrom2D,\n);\n\n/**\n * Debug code to draw bounding volume for command.  Not optimized!\n * Assumes bounding volume is a bounding sphere or box.\n *\n * @param {DrawCommand} command The draw command for which to render the bounding volume.\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n * @param {Framebuffer} debugFramebuffer The framebuffer where the bounding volume will be rendered.\n *\n * @private\n */\nfunction debugShowBoundingVolume(command, scene, passState, debugFramebuffer) {\n  const frameState = scene._frameState;\n  const context = frameState.context;\n  const boundingVolume = command.boundingVolume;\n\n  if (defined(scene._debugVolume)) {\n    scene._debugVolume.destroy();\n  }\n\n  let center = Cartesian3.clone(boundingVolume.center);\n  if (frameState.mode !== SceneMode.SCENE3D) {\n    center = Matrix4.multiplyByPoint(transformFrom2D, center, center);\n    const projection = frameState.mapProjection;\n    const centerCartographic = projection.unproject(center);\n    center = projection.ellipsoid.cartographicToCartesian(centerCartographic);\n  }\n\n  let geometry;\n  let modelMatrix;\n  const { radius } = boundingVolume;\n  if (defined(radius)) {\n    geometry = EllipsoidGeometry.createGeometry(\n      new EllipsoidGeometry({\n        radii: new Cartesian3(radius, radius, radius),\n        vertexFormat: PerInstanceColorAppearance.FLAT_VERTEX_FORMAT,\n      }),\n    );\n    modelMatrix = Matrix4.fromTranslation(center);\n  } else {\n    geometry = BoxGeometry.createGeometry(\n      BoxGeometry.fromDimensions({\n        dimensions: new Cartesian3(2.0, 2.0, 2.0),\n        vertexFormat: PerInstanceColorAppearance.FLAT_VERTEX_FORMAT,\n      }),\n    );\n    modelMatrix = Matrix4.fromRotationTranslation(\n      boundingVolume.halfAxes,\n      center,\n      new Matrix4(),\n    );\n  }\n  scene._debugVolume = new Primitive({\n    geometryInstances: new GeometryInstance({\n      geometry: GeometryPipeline.toWireframe(geometry),\n      modelMatrix: modelMatrix,\n      attributes: {\n        color: new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0),\n      },\n    }),\n    appearance: new PerInstanceColorAppearance({\n      flat: true,\n      translucent: false,\n    }),\n    asynchronous: false,\n  });\n\n  const savedCommandList = frameState.commandList;\n  const commandList = (frameState.commandList = []);\n  scene._debugVolume.update(frameState);\n\n  command = commandList[0];\n\n  if (frameState.useLogDepth) {\n    const logDepth = DerivedCommand.createLogDepthCommand(command, context);\n    command = logDepth.command;\n  }\n\n  let framebuffer;\n  if (defined(debugFramebuffer)) {\n    framebuffer = passState.framebuffer;\n    passState.framebuffer = debugFramebuffer;\n  }\n\n  command.execute(context, passState);\n\n  if (defined(framebuffer)) {\n    passState.framebuffer = framebuffer;\n  }\n\n  frameState.commandList = savedCommandList;\n}\n\n/**\n * Execute a single draw command, or one of its derived commands if appropriate for the current render state.\n *\n * @param {DrawCommand} command The command to execute.\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n * @param {Framebuffer} debugFramebuffer The framebuffer where debug QCs will be rendered.\n *\n * @private\n */\nfunction executeCommand(command, scene, passState, debugFramebuffer) {\n  const frameState = scene._frameState;\n  const context = scene._context;\n\n  if (defined(scene.debugCommandFilter) && !scene.debugCommandFilter(command)) {\n    return;\n  }\n\n  if (command instanceof ClearCommand) {\n    command.execute(context, passState);\n    return;\n  }\n\n  if (command.debugShowBoundingVolume && defined(command.boundingVolume)) {\n    debugShowBoundingVolume(command, scene, passState, debugFramebuffer);\n  }\n\n  if (frameState.useLogDepth && defined(command.derivedCommands.logDepth)) {\n    command = command.derivedCommands.logDepth.command;\n  }\n\n  const passes = frameState.passes;\n  if (\n    !passes.pick &&\n    !passes.pickVoxel &&\n    !passes.depth &&\n    scene._hdr &&\n    defined(command.derivedCommands) &&\n    defined(command.derivedCommands.hdr)\n  ) {\n    command = command.derivedCommands.hdr.command;\n  }\n\n  if (passes.pick || passes.depth) {\n    if (passes.pick && !passes.depth) {\n      if (\n        frameState.pickingMetadata &&\n        defined(command.derivedCommands.pickingMetadata)\n      ) {\n        command = command.derivedCommands.pickingMetadata.pickMetadataCommand;\n        command.execute(context, passState);\n        return;\n      }\n      if (\n        !frameState.pickingMetadata &&\n        defined(command.derivedCommands.picking)\n      ) {\n        command = command.derivedCommands.picking.pickCommand;\n        command.execute(context, passState);\n        return;\n      }\n    } else if (defined(command.derivedCommands.depth)) {\n      command = command.derivedCommands.depth.depthOnlyCommand;\n      command.execute(context, passState);\n      return;\n    }\n  }\n\n  if (scene.debugShowCommands || scene.debugShowFrustums) {\n    scene._debugInspector.executeDebugShowFrustumsCommand(\n      scene,\n      command,\n      passState,\n    );\n    return;\n  }\n\n  if (\n    frameState.shadowState.lightShadowsEnabled &&\n    command.receiveShadows &&\n    defined(command.derivedCommands.shadows)\n  ) {\n    // If the command receives shadows, execute the derived shadows command.\n    // Some commands, such as OIT derived commands, do not have derived shadow commands themselves\n    // and instead shadowing is built-in. In this case execute the command regularly below.\n    command.derivedCommands.shadows.receiveCommand.execute(context, passState);\n  } else {\n    command.execute(context, passState);\n  }\n}\n\n/**\n * Execute a single ID draw command, used to render information for picking.\n *\n * @param {DrawCommand} command The command to execute.\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n *\n * @private\n */\nfunction executeIdCommand(command, scene, passState) {\n  const { derivedCommands } = command;\n  if (!defined(derivedCommands)) {\n    return;\n  }\n\n  const frameState = scene._frameState;\n  const context = scene._context;\n\n  if (frameState.useLogDepth && defined(derivedCommands.logDepth)) {\n    command = derivedCommands.logDepth.command;\n  }\n\n  const { picking, pickingMetadata, depth } = command.derivedCommands;\n  if (defined(pickingMetadata)) {\n    command = derivedCommands.pickingMetadata.pickMetadataCommand;\n    command.execute(context, passState);\n  }\n  if (defined(picking)) {\n    command = picking.pickCommand;\n    command.execute(context, passState);\n  } else if (defined(depth)) {\n    command = depth.depthOnlyCommand;\n    command.execute(context, passState);\n  }\n}\n\nfunction backToFront(a, b, position) {\n  return (\n    b.boundingVolume.distanceSquaredTo(position) -\n    a.boundingVolume.distanceSquaredTo(position)\n  );\n}\n\nfunction frontToBack(a, b, position) {\n  // When distances are equal equal favor sorting b before a. This gives render priority to commands later in the list.\n  return (\n    a.boundingVolume.distanceSquaredTo(position) -\n    b.boundingVolume.distanceSquaredTo(position) +\n    CesiumMath.EPSILON12\n  );\n}\n\nfunction executeTranslucentCommandsBackToFront(\n  scene,\n  executeFunction,\n  passState,\n  commands,\n  invertClassification,\n) {\n  mergeSort(commands, backToFront, scene.camera.positionWC);\n\n  if (defined(invertClassification)) {\n    executeFunction(invertClassification.unclassifiedCommand, scene, passState);\n  }\n\n  for (let i = 0; i < commands.length; ++i) {\n    executeFunction(commands[i], scene, passState);\n  }\n}\n\nfunction executeTranslucentCommandsFrontToBack(\n  scene,\n  executeFunction,\n  passState,\n  commands,\n  invertClassification,\n) {\n  mergeSort(commands, frontToBack, scene.camera.positionWC);\n\n  if (defined(invertClassification)) {\n    executeFunction(invertClassification.unclassifiedCommand, scene, passState);\n  }\n\n  for (let i = 0; i < commands.length; ++i) {\n    executeFunction(commands[i], scene, passState);\n  }\n}\n\n/**\n * Execute commands to render voxels in the scene.\n *\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n * @param {FrustumCommands} frustumCommands The draw commands for the current frustum.\n *\n * @private\n */\nfunction performVoxelsPass(scene, passState, frustumCommands) {\n  scene.context.uniformState.updatePass(Pass.VOXELS);\n\n  const commands = frustumCommands.commands[Pass.VOXELS];\n  commands.length = frustumCommands.indices[Pass.VOXELS];\n\n  mergeSort(commands, backToFront, scene.camera.positionWC);\n\n  for (let i = 0; i < commands.length; ++i) {\n    executeCommand(commands[i], scene, passState);\n  }\n}\n\nconst scratchPerspectiveFrustum = new PerspectiveFrustum();\nconst scratchPerspectiveOffCenterFrustum = new PerspectiveOffCenterFrustum();\nconst scratchOrthographicFrustum = new OrthographicFrustum();\nconst scratchOrthographicOffCenterFrustum = new OrthographicOffCenterFrustum();\n/**\n * Create a working frustum from the original camera frustum.\n *\n * @param {Camera} camera The camera\n * @returns {PerspectiveFrustum|PerspectiveOffCenterFrustum|OrthographicFrustum|OrthographicOffCenterFrustum} The working frustum\n *\n * @private\n */\nfunction createWorkingFrustum(camera) {\n  const { frustum } = camera;\n  if (defined(frustum.fov)) {\n    return frustum.clone(scratchPerspectiveFrustum);\n  }\n  if (defined(frustum.infiniteProjectionMatrix)) {\n    return frustum.clone(scratchPerspectiveOffCenterFrustum);\n  }\n  if (defined(frustum.width)) {\n    return frustum.clone(scratchOrthographicFrustum);\n  }\n  return frustum.clone(scratchOrthographicOffCenterFrustum);\n}\n\n/**\n * Determine how translucent surfaces will be handled.\n *\n * When OIT is enabled, then this will delegate to OIT.executeCommands.\n * Otherwise, it will just be executeTranslucentCommandsBackToFront\n * for render passes, or executeTranslucentCommandsFrontToBack for\n * other passes.\n *\n * @param {Scene} scene The scene.\n * @returns {Function} A function to execute translucent commands.\n */\nfunction obtainTranslucentCommandExecutionFunction(scene) {\n  if (scene._environmentState.useOIT) {\n    if (!defined(scene._executeOITFunction)) {\n      const { view, context } = scene;\n      scene._executeOITFunction = function (\n        scene,\n        executeFunction,\n        passState,\n        commands,\n        invertClassification,\n      ) {\n        view.globeDepth.prepareColorTextures(context);\n        view.oit.executeCommands(\n          scene,\n          executeFunction,\n          passState,\n          commands,\n          invertClassification,\n        );\n      };\n    }\n    return scene._executeOITFunction;\n  }\n  if (scene.frameState.passes.render) {\n    return executeTranslucentCommandsBackToFront;\n  }\n  return executeTranslucentCommandsFrontToBack;\n}\n\n/**\n * Execute draw commands to render translucent objects in the scene.\n *\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n * @param {FrustumCommands} frustumCommands The draw commands for the current frustum.\n *\n * @private\n */\nfunction performTranslucentPass(scene, passState, frustumCommands) {\n  const { frameState, context } = scene;\n  const { pick, pickVoxel } = frameState.passes;\n  const picking = pick || pickVoxel;\n\n  let invertClassification;\n  if (\n    !picking &&\n    scene._environmentState.useInvertClassification &&\n    frameState.invertClassificationColor.alpha < 1.0\n  ) {\n    // Fullscreen pass to copy unclassified fragments when alpha < 1.0.\n    // Not executed when undefined.\n    invertClassification = scene._invertClassification;\n  }\n\n  const executeTranslucentCommands =\n    obtainTranslucentCommandExecutionFunction(scene);\n\n  context.uniformState.updatePass(Pass.TRANSLUCENT);\n  const commands = frustumCommands.commands[Pass.TRANSLUCENT];\n  commands.length = frustumCommands.indices[Pass.TRANSLUCENT];\n  executeTranslucentCommands(\n    scene,\n    executeCommand,\n    passState,\n    commands,\n    invertClassification,\n  );\n}\n\n/**\n * Execute commands for classification of translucent 3D Tiles.\n *\n * @param {Scene} scene The scene.\n * @param {PassState} passState The state for the current render pass.\n * @param {FrustumCommands} frustumCommands The draw commands for the current frustum.\n *\n * @private\n */\nfunction performTranslucent3DTilesClassification(\n  scene,\n  passState,\n  frustumCommands,\n) {\n  const { translucentTileClassification, globeDepth } = scene._view;\n  const has3DTilesClassificationCommands =\n    frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION] > 0;\n  if (\n    !has3DTilesClassificationCommands ||\n    !translucentTileClassification.isSupported()\n  ) {\n    return;\n  }\n\n  const commands = frustumCommands.commands[Pass.TRANSLUCENT];\n  translucentTileClassification.executeTranslucentCommands(\n    scene,\n    executeCommand,\n    passState,\n    commands,\n    globeDepth.depthStencilTexture,\n  );\n  translucentTileClassification.executeClassificationCommands(\n    scene,\n    executeCommand,\n    passState,\n    frustumCommands,\n  );\n}\n\n/**\n * Execute the draw commands for all the render passes.\n *\n * @param {Scene} scene\n * @param {PassState} passState\n *\n * @private\n */\nfunction executeCommands(scene, passState) {\n  const { camera, context, frameState } = scene;\n  const { uniformState } = context;\n\n  uniformState.updateCamera(camera);\n\n  const frustum = createWorkingFrustum(camera);\n  frustum.near = camera.frustum.near;\n  frustum.far = camera.frustum.far;\n\n  const passes = frameState.passes;\n  const picking = passes.pick || passes.pickVoxel;\n\n  // Ideally, we would render the sky box and atmosphere last for\n  // early-z, but we would have to draw it in each frustum.\n  // Do not render environment primitives during a pick pass since they do not generate picking commands.\n  if (!picking) {\n    renderEnvironment(scene, passState);\n  }\n\n  const {\n    clearGlobeDepth,\n    renderTranslucentDepthForPick,\n    useDepthPlane,\n    useGlobeDepthFramebuffer,\n    useInvertClassification,\n    usePostProcessSelected,\n  } = scene._environmentState;\n\n  const {\n    globeDepth,\n    globeTranslucencyFramebuffer,\n    sceneFramebuffer,\n    frustumCommandsList,\n  } = scene._view;\n  const numFrustums = frustumCommandsList.length;\n\n  const globeTranslucencyState = scene._globeTranslucencyState;\n  const clearDepth = scene._depthClearCommand;\n  const clearStencil = scene._stencilClearCommand;\n  const clearClassificationStencil = scene._classificationStencilClearCommand;\n  const depthPlane = scene._depthPlane;\n\n  const height2D = camera.position.z;\n\n  function performPass(frustumCommands, passId) {\n    uniformState.updatePass(passId);\n    const commands = frustumCommands.commands[passId];\n    const commandCount = frustumCommands.indices[passId];\n    for (let j = 0; j < commandCount; ++j) {\n      executeCommand(commands[j], scene, passState);\n    }\n    return commandCount;\n  }\n\n  function performIdPass(frustumCommands, passId) {\n    uniformState.updatePass(passId);\n    const commands = frustumCommands.commands[passId];\n    const commandCount = frustumCommands.indices[passId];\n    for (let j = 0; j < commandCount; ++j) {\n      executeIdCommand(commands[j], scene, passState);\n    }\n  }\n\n  // Execute commands in each frustum in back to front order\n  for (let i = 0; i < numFrustums; ++i) {\n    const index = numFrustums - i - 1;\n    const frustumCommands = frustumCommandsList[index];\n\n    if (scene.mode === SceneMode.SCENE2D) {\n      // To avoid z-fighting in 2D, move the camera to just before the frustum\n      // and scale the frustum depth to be in [1.0, nearToFarDistance2D].\n      camera.position.z = height2D - frustumCommands.near + 1.0;\n      frustum.far = Math.max(1.0, frustumCommands.far - frustumCommands.near);\n      frustum.near = 1.0;\n      uniformState.update(frameState);\n      uniformState.updateFrustum(frustum);\n    } else {\n      // Avoid tearing artifacts between adjacent frustums in the opaque passes\n      frustum.near =\n        index !== 0\n          ? frustumCommands.near * scene.opaqueFrustumNearOffset\n          : frustumCommands.near;\n      frustum.far = frustumCommands.far;\n      uniformState.updateFrustum(frustum);\n    }\n\n    clearDepth.execute(context, passState);\n\n    if (context.stencilBuffer) {\n      clearStencil.execute(context, passState);\n    }\n\n    if (globeTranslucencyState.translucent) {\n      uniformState.updatePass(Pass.GLOBE);\n      globeTranslucencyState.executeGlobeCommands(\n        frustumCommands,\n        executeCommand,\n        globeTranslucencyFramebuffer,\n        scene,\n        passState,\n      );\n    } else {\n      performPass(frustumCommands, Pass.GLOBE);\n    }\n\n    if (useGlobeDepthFramebuffer) {\n      globeDepth.executeCopyDepth(context, passState);\n    }\n\n    // Draw terrain classification\n    if (!renderTranslucentDepthForPick) {\n      if (globeTranslucencyState.translucent) {\n        uniformState.updatePass(Pass.TERRAIN_CLASSIFICATION);\n        globeTranslucencyState.executeGlobeClassificationCommands(\n          frustumCommands,\n          executeCommand,\n          globeTranslucencyFramebuffer,\n          scene,\n          passState,\n        );\n      } else {\n        performPass(frustumCommands, Pass.TERRAIN_CLASSIFICATION);\n      }\n    }\n\n    if (clearGlobeDepth) {\n      clearDepth.execute(context, passState);\n      if (useDepthPlane) {\n        depthPlane.execute(context, passState);\n      }\n    }\n\n    let commandCount;\n    if (!useInvertClassification || picking || renderTranslucentDepthForPick) {\n      // Common/fastest path. Draw 3D Tiles and classification normally.\n\n      // Draw 3D Tiles\n      commandCount = performPass(frustumCommands, Pass.CESIUM_3D_TILE);\n\n      if (commandCount > 0) {\n        if (useGlobeDepthFramebuffer) {\n          globeDepth.prepareColorTextures(context, clearGlobeDepth);\n          globeDepth.executeUpdateDepth(\n            context,\n            passState,\n            globeDepth.depthStencilTexture,\n          );\n        }\n\n        // Draw classifications. Modifies 3D Tiles color.\n        if (!renderTranslucentDepthForPick) {\n          commandCount = performPass(\n            frustumCommands,\n            Pass.CESIUM_3D_TILE_CLASSIFICATION,\n          );\n        }\n      }\n    } else {\n      // When the invert classification color is opaque:\n      //    Main FBO (FBO1):                   Main_Color   + Main_DepthStencil\n      //    Invert classification FBO (FBO2) : Invert_Color + Main_DepthStencil\n      //\n      //    1. Clear FBO2 color to vec4(0.0) for each frustum\n      //    2. Draw 3D Tiles to FBO2\n      //    3. Draw classification to FBO2\n      //    4. Fullscreen pass to FBO1, draw Invert_Color when:\n      //           * Main_DepthStencil has the stencil bit set > 0 (classified)\n      //    5. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n      //           * Main_DepthStencil has stencil bit set to 0 (unclassified) and\n      //           * Invert_Color !== vec4(0.0)\n      //\n      // When the invert classification color is translucent:\n      //    Main FBO (FBO1):                  Main_Color         + Main_DepthStencil\n      //    Invert classification FBO (FBO2): Invert_Color       + Invert_DepthStencil\n      //    IsClassified FBO (FBO3):          IsClassified_Color + Invert_DepthStencil\n      //\n      //    1. Clear FBO2 and FBO3 color to vec4(0.0), stencil to 0, and depth to 1.0\n      //    2. Draw 3D Tiles to FBO2\n      //    3. Draw classification to FBO2\n      //    4. Fullscreen pass to FBO3, draw any color when\n      //           * Invert_DepthStencil has the stencil bit set > 0 (classified)\n      //    5. Fullscreen pass to FBO1, draw Invert_Color when:\n      //           * Invert_Color !== vec4(0.0) and\n      //           * IsClassified_Color !== vec4(0.0)\n      //    6. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n      //           * Invert_Color !== vec4(0.0) and\n      //           * IsClassified_Color === vec4(0.0)\n      //\n      // NOTE: Step six when translucent invert color occurs after the TRANSLUCENT pass\n      //\n      scene._invertClassification.clear(context, passState);\n\n      const opaqueClassificationFramebuffer = passState.framebuffer;\n      passState.framebuffer = scene._invertClassification._fbo.framebuffer;\n\n      // Draw normally\n      commandCount = performPass(frustumCommands, Pass.CESIUM_3D_TILE);\n\n      if (useGlobeDepthFramebuffer) {\n        scene._invertClassification.prepareTextures(context);\n        globeDepth.executeUpdateDepth(\n          context,\n          passState,\n          scene._invertClassification._fbo.getDepthStencilTexture(),\n        );\n      }\n\n      // Set stencil\n      commandCount = performPass(\n        frustumCommands,\n        Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW,\n      );\n\n      passState.framebuffer = opaqueClassificationFramebuffer;\n\n      // Fullscreen pass to copy classified fragments\n      scene._invertClassification.executeClassified(context, passState);\n      if (frameState.invertClassificationColor.alpha === 1.0) {\n        // Fullscreen pass to copy unclassified fragments when alpha == 1.0\n        scene._invertClassification.executeUnclassified(context, passState);\n      }\n\n      // Clear stencil set by the classification for the next classification pass\n      if (commandCount > 0 && context.stencilBuffer) {\n        clearClassificationStencil.execute(context, passState);\n      }\n\n      // Draw style over classification.\n      commandCount = performPass(\n        frustumCommands,\n        Pass.CESIUM_3D_TILE_CLASSIFICATION,\n      );\n    }\n\n    if (commandCount > 0 && context.stencilBuffer) {\n      clearStencil.execute(context, passState);\n    }\n\n    performVoxelsPass(scene, passState, frustumCommands);\n\n    performPass(frustumCommands, Pass.OPAQUE);\n\n    if (index !== 0 && scene.mode !== SceneMode.SCENE2D) {\n      // Do not overlap frustums in the translucent pass to avoid blending artifacts\n      frustum.near = frustumCommands.near;\n      uniformState.updateFrustum(frustum);\n    }\n\n    performTranslucentPass(scene, passState, frustumCommands);\n\n    performTranslucent3DTilesClassification(scene, passState, frustumCommands);\n\n    if (\n      context.depthTexture &&\n      scene.useDepthPicking &&\n      (useGlobeDepthFramebuffer || renderTranslucentDepthForPick)\n    ) {\n      // PERFORMANCE_IDEA: Use MRT to avoid the extra copy.\n      const pickDepth = scene._picking.getPickDepth(scene, index);\n      pickDepth.update(context, globeDepth.depthStencilTexture);\n      pickDepth.executeCopyDepth(context, passState);\n    }\n\n    if (picking || !usePostProcessSelected) {\n      continue;\n    }\n\n    const originalFramebuffer = passState.framebuffer;\n    passState.framebuffer = sceneFramebuffer.getIdFramebuffer();\n\n    // reset frustum\n    frustum.near =\n      index !== 0\n        ? frustumCommands.near * scene.opaqueFrustumNearOffset\n        : frustumCommands.near;\n    frustum.far = frustumCommands.far;\n    uniformState.updateFrustum(frustum);\n\n    if (globeTranslucencyState.translucent) {\n      uniformState.updatePass(Pass.GLOBE);\n      globeTranslucencyState.executeGlobeCommands(\n        frustumCommands,\n        executeIdCommand,\n        globeTranslucencyFramebuffer,\n        scene,\n        passState,\n      );\n    } else {\n      performIdPass(frustumCommands, Pass.GLOBE);\n    }\n\n    if (clearGlobeDepth) {\n      clearDepth.framebuffer = passState.framebuffer;\n      clearDepth.execute(context, passState);\n      clearDepth.framebuffer = undefined;\n    }\n\n    if (clearGlobeDepth && useDepthPlane) {\n      depthPlane.execute(context, passState);\n    }\n\n    performIdPass(frustumCommands, Pass.CESIUM_3D_TILE);\n    performIdPass(frustumCommands, Pass.OPAQUE);\n    performIdPass(frustumCommands, Pass.TRANSLUCENT);\n\n    passState.framebuffer = originalFramebuffer;\n  }\n}\n\n/**\n * Render the sky, atmosphere, sun, and moon\n *\n * @param {Scene} scene The scene.\n * @param {PassState} passState The render state for the pass.\n *\n * @private\n */\nfunction renderEnvironment(scene, passState) {\n  const { context, environmentState, view } = scene;\n\n  context.uniformState.updatePass(Pass.ENVIRONMENT);\n\n  if (defined(environmentState.skyBoxCommand)) {\n    executeCommand(environmentState.skyBoxCommand, scene, passState);\n  }\n\n  if (environmentState.isSkyAtmosphereVisible) {\n    executeCommand(environmentState.skyAtmosphereCommand, scene, passState);\n  }\n\n  if (environmentState.isSunVisible) {\n    environmentState.sunDrawCommand.execute(context, passState);\n    if (scene.sunBloom && !environmentState.useWebVR) {\n      let framebuffer;\n      if (environmentState.useGlobeDepthFramebuffer) {\n        framebuffer = view.globeDepth.framebuffer;\n      } else if (environmentState.usePostProcess) {\n        framebuffer = view.sceneFramebuffer.framebuffer;\n      } else {\n        framebuffer = environmentState.originalFramebuffer;\n      }\n      scene._sunPostProcess.execute(context);\n      scene._sunPostProcess.copy(context, framebuffer);\n      passState.framebuffer = framebuffer;\n    }\n  }\n\n  // Moon can be seen through the atmosphere, since the sun is rendered after the atmosphere.\n  if (environmentState.isMoonVisible) {\n    environmentState.moonCommand.execute(context, passState);\n  }\n}\n\n/**\n * Execute compute commands from the scene's environment state and computeCommandList\n *\n * @param {Scene} scene\n *\n * @private\n */\nfunction executeComputeCommands(scene) {\n  scene.context.uniformState.updatePass(Pass.COMPUTE);\n\n  const sunComputeCommand = scene._environmentState.sunComputeCommand;\n  if (defined(sunComputeCommand)) {\n    sunComputeCommand.execute(scene._computeEngine);\n  }\n\n  const commandList = scene._computeCommandList;\n  for (let i = 0; i < commandList.length; ++i) {\n    commandList[i].execute(scene._computeEngine);\n  }\n}\n\n/**\n * Execute the draw commands for overlays\n *\n * @param {Scene} scene\n * @param {PassState} passState\n *\n * @private\n */\nfunction executeOverlayCommands(scene, passState) {\n  scene.context.uniformState.updatePass(Pass.OVERLAY);\n\n  const context = scene.context;\n  const commandList = scene._overlayCommandList;\n  for (let i = 0; i < commandList.length; ++i) {\n    commandList[i].execute(context, passState);\n  }\n}\n\n/**\n * Add the scene's draw commands into the shadow map passes.\n *\n * @param {Scene} scene\n * @param {DrawCommand[]} commandList\n * @param {ShadowMap} shadowMap\n *\n * @private\n */\nfunction insertShadowCastCommands(scene, commandList, shadowMap) {\n  const { shadowMapCullingVolume, isPointLight, passes } = shadowMap;\n  const numberOfPasses = passes.length;\n\n  const shadowedPasses = [\n    Pass.GLOBE,\n    Pass.CESIUM_3D_TILE,\n    Pass.OPAQUE,\n    Pass.TRANSLUCENT,\n  ];\n\n  for (let i = 0; i < commandList.length; ++i) {\n    const command = commandList[i];\n    scene.updateDerivedCommands(command);\n\n    if (\n      !command.castShadows ||\n      shadowedPasses.indexOf(command.pass) < 0 ||\n      !scene.isVisible(shadowMapCullingVolume, command)\n    ) {\n      continue;\n    }\n\n    if (isPointLight) {\n      for (let k = 0; k < numberOfPasses; ++k) {\n        passes[k].commandList.push(command);\n      }\n    } else if (numberOfPasses === 1) {\n      passes[0].commandList.push(command);\n    } else {\n      let wasVisible = false;\n      // Loop over cascades from largest to smallest\n      for (let j = numberOfPasses - 1; j >= 0; --j) {\n        const cascadeVolume = passes[j].cullingVolume;\n        if (scene.isVisible(cascadeVolume, command)) {\n          passes[j].commandList.push(command);\n          wasVisible = true;\n        } else if (wasVisible) {\n          // If it was visible in the previous cascade but now isn't\n          // then there is no need to check any more cascades\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Execute the draw commands to cast shadows into the shadow maps.\n *\n * @param {Scene} scene\n *\n * @private\n */\nfunction executeShadowMapCastCommands(scene) {\n  const { shadowState, commandList } = scene.frameState;\n  const { shadowsEnabled, shadowMaps } = shadowState;\n\n  if (!shadowsEnabled) {\n    return;\n  }\n\n  const { context } = scene;\n  const { uniformState } = context;\n\n  for (let i = 0; i < shadowMaps.length; ++i) {\n    const shadowMap = shadowMaps[i];\n    if (shadowMap.outOfView) {\n      continue;\n    }\n\n    // Reset the command lists\n    const { passes } = shadowMap;\n    for (let j = 0; j < passes.length; ++j) {\n      passes[j].commandList.length = 0;\n    }\n\n    // Insert the primitive/model commands into the shadow map command lists\n    insertShadowCastCommands(scene, commandList, shadowMap);\n\n    for (let j = 0; j < passes.length; ++j) {\n      const pass = shadowMap.passes[j];\n      const { camera, commandList } = pass;\n      uniformState.updateCamera(camera);\n      shadowMap.updatePass(context, j);\n      for (let k = 0; k < commandList.length; ++k) {\n        const command = commandList[k];\n        // Set the correct pass before rendering into the shadow map because some shaders\n        // conditionally render based on whether the pass is translucent or opaque.\n        uniformState.updatePass(command.pass);\n        const castCommand = command.derivedCommands.shadows.castCommands[i];\n        executeCommand(castCommand, scene, pass.passState);\n      }\n    }\n  }\n}\n\nconst scratchEyeTranslation = new Cartesian3();\n\n/**\n * Update and clear framebuffers, and execute draw commands.\n *\n * @param {PassState} passState State specific to each render pass.\n * @param {Color} backgroundColor\n *\n * @private\n */\nScene.prototype.updateAndExecuteCommands = function (\n  passState,\n  backgroundColor,\n) {\n  updateAndClearFramebuffers(this, passState, backgroundColor);\n\n  if (this._environmentState.useWebVR) {\n    executeWebVRCommands(this, passState, backgroundColor);\n  } else if (\n    this._frameState.mode !== SceneMode.SCENE2D ||\n    this._mapMode2D === MapMode2D.ROTATE\n  ) {\n    executeCommandsInViewport(true, this, passState);\n  } else {\n    execute2DViewportCommands(this, passState);\n  }\n};\n\n/**\n * Execute the draw commands to render the scene into the stereo viewports of a WebVR application.\n *\n * @param {Scene} scene\n * @param {PassState} passState\n *\n * @private\n */\nfunction executeWebVRCommands(scene, passState) {\n  const view = scene._view;\n  const camera = view.camera;\n  const environmentState = scene._environmentState;\n  const renderTranslucentDepthForPick =\n    environmentState.renderTranslucentDepthForPick;\n\n  updateAndRenderPrimitives(scene);\n\n  view.createPotentiallyVisibleSet(scene);\n\n  executeComputeCommands(scene);\n\n  if (!renderTranslucentDepthForPick) {\n    executeShadowMapCastCommands(scene);\n  }\n\n  // Based on Calculating Stereo pairs by Paul Bourke\n  // http://paulbourke.net/stereographics/stereorender/\n  const viewport = passState.viewport;\n  viewport.x = 0;\n  viewport.y = 0;\n  viewport.width = viewport.width * 0.5;\n\n  const savedCamera = Camera.clone(camera, scene._cameraVR);\n  savedCamera.frustum = camera.frustum;\n\n  const near = camera.frustum.near;\n  const fo = near * defaultValue(scene.focalLength, 5.0);\n  const eyeSeparation = defaultValue(scene.eyeSeparation, fo / 30.0);\n  const eyeTranslation = Cartesian3.multiplyByScalar(\n    savedCamera.right,\n    eyeSeparation * 0.5,\n    scratchEyeTranslation,\n  );\n\n  camera.frustum.aspectRatio = viewport.width / viewport.height;\n\n  const offset = (0.5 * eyeSeparation * near) / fo;\n\n  Cartesian3.add(savedCamera.position, eyeTranslation, camera.position);\n  camera.frustum.xOffset = offset;\n\n  executeCommands(scene, passState);\n\n  viewport.x = viewport.width;\n\n  Cartesian3.subtract(savedCamera.position, eyeTranslation, camera.position);\n  camera.frustum.xOffset = -offset;\n\n  executeCommands(scene, passState);\n\n  Camera.clone(savedCamera, camera);\n}\n\nconst scratch2DViewportCartographic = new Cartographic(\n  Math.PI,\n  CesiumMath.PI_OVER_TWO,\n);\nconst scratch2DViewportMaxCoord = new Cartesian3();\nconst scratch2DViewportSavedPosition = new Cartesian3();\nconst scratch2DViewportTransform = new Matrix4();\nconst scratch2DViewportCameraTransform = new Matrix4();\nconst scratch2DViewportEyePoint = new Cartesian3();\nconst scratch2DViewportWindowCoords = new Cartesian3();\nconst scratch2DViewport = new BoundingRectangle();\n\n/**\n * Execute the draw commands to render into a 2D viewport.\n *\n * @param {Scene} scene\n * @param {PassState} passState\n *\n * @private\n */\nfunction execute2DViewportCommands(scene, passState) {\n  const { frameState, camera } = scene;\n  const { uniformState } = scene.context;\n\n  const originalViewport = passState.viewport;\n  const viewport = BoundingRectangle.clone(originalViewport, scratch2DViewport);\n  passState.viewport = viewport;\n\n  const maxCartographic = scratch2DViewportCartographic;\n  const maxCoord = scratch2DViewportMaxCoord;\n\n  const projection = scene.mapProjection;\n  projection.project(maxCartographic, maxCoord);\n\n  const position = Cartesian3.clone(\n    camera.position,\n    scratch2DViewportSavedPosition,\n  );\n  const transform = Matrix4.clone(\n    camera.transform,\n    scratch2DViewportCameraTransform,\n  );\n  const frustum = camera.frustum.clone();\n\n  camera._setTransform(Matrix4.IDENTITY);\n\n  const viewportTransformation = Matrix4.computeViewportTransformation(\n    viewport,\n    0.0,\n    1.0,\n    scratch2DViewportTransform,\n  );\n  const projectionMatrix = camera.frustum.projectionMatrix;\n\n  const x = camera.positionWC.y;\n  const eyePoint = Cartesian3.fromElements(\n    CesiumMath.sign(x) * maxCoord.x - x,\n    0.0,\n    -camera.positionWC.x,\n    scratch2DViewportEyePoint,\n  );\n  const windowCoordinates = Transforms.pointToGLWindowCoordinates(\n    projectionMatrix,\n    viewportTransformation,\n    eyePoint,\n    scratch2DViewportWindowCoords,\n  );\n\n  windowCoordinates.x = Math.floor(windowCoordinates.x);\n\n  const viewportX = viewport.x;\n  const viewportWidth = viewport.width;\n\n  if (\n    x === 0.0 ||\n    windowCoordinates.x <= viewportX ||\n    windowCoordinates.x >= viewportX + viewportWidth\n  ) {\n    executeCommandsInViewport(true, scene, passState);\n  } else if (\n    Math.abs(viewportX + viewportWidth * 0.5 - windowCoordinates.x) < 1.0\n  ) {\n    viewport.width = windowCoordinates.x - viewport.x;\n\n    camera.position.x *= CesiumMath.sign(camera.position.x);\n\n    camera.frustum.right = 0.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC,\n    );\n    uniformState.update(frameState);\n\n    executeCommandsInViewport(true, scene, passState);\n\n    viewport.x = windowCoordinates.x;\n\n    camera.position.x = -camera.position.x;\n\n    camera.frustum.right = -camera.frustum.left;\n    camera.frustum.left = 0.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC,\n    );\n    uniformState.update(frameState);\n\n    executeCommandsInViewport(false, scene, passState);\n  } else if (windowCoordinates.x > viewportX + viewportWidth * 0.5) {\n    viewport.width = windowCoordinates.x - viewportX;\n\n    const right = camera.frustum.right;\n    camera.frustum.right = maxCoord.x - x;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC,\n    );\n    uniformState.update(frameState);\n\n    executeCommandsInViewport(true, scene, passState);\n\n    viewport.x = windowCoordinates.x;\n    viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n\n    camera.position.x = -camera.position.x;\n\n    camera.frustum.left = -camera.frustum.right;\n    camera.frustum.right = right - camera.frustum.right * 2.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC,\n    );\n    uniformState.update(frameState);\n\n    executeCommandsInViewport(false, scene, passState);\n  } else {\n    viewport.x = windowCoordinates.x;\n    viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n\n    const left = camera.frustum.left;\n    camera.frustum.left = -maxCoord.x - x;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC,\n    );\n    uniformState.update(frameState);\n\n    executeCommandsInViewport(true, scene, passState);\n\n    viewport.x = viewportX;\n    viewport.width = windowCoordinates.x - viewportX;\n\n    camera.position.x = -camera.position.x;\n\n    camera.frustum.right = -camera.frustum.left;\n    camera.frustum.left = left - camera.frustum.left * 2.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC,\n    );\n    uniformState.update(frameState);\n\n    executeCommandsInViewport(false, scene, passState);\n  }\n\n  camera._setTransform(transform);\n  Cartesian3.clone(position, camera.position);\n  camera.frustum = frustum.clone();\n  passState.viewport = originalViewport;\n}\n\n/**\n * Execute the draw commands to render the scene into the viewport.\n * If this is the first viewport rendered, the framebuffers will be cleared to the background color.\n *\n * @param {boolean} firstViewport <code>true</code> if this is the first viewport rendered.\n * @param {Scene} scene\n * @param {PassState} passState\n *\n * @private\n */\nfunction executeCommandsInViewport(firstViewport, scene, passState) {\n  const view = scene._view;\n  const { renderTranslucentDepthForPick } = scene._environmentState;\n\n  if (!firstViewport) {\n    scene.frameState.commandList.length = 0;\n  }\n\n  updateAndRenderPrimitives(scene);\n\n  view.createPotentiallyVisibleSet(scene);\n\n  if (firstViewport) {\n    executeComputeCommands(scene);\n    if (!renderTranslucentDepthForPick) {\n      executeShadowMapCastCommands(scene);\n    }\n  }\n\n  executeCommands(scene, passState);\n}\n\nconst scratchCullingVolume = new CullingVolume();\n\n/**\n * @private\n */\nScene.prototype.updateEnvironment = function () {\n  const frameState = this._frameState;\n  const view = this._view;\n\n  // Update celestial and terrestrial environment effects.\n  const environmentState = this._environmentState;\n  const renderPass = frameState.passes.render;\n  const offscreenPass = frameState.passes.offscreen;\n  const atmosphere = this.atmosphere;\n  const skyAtmosphere = this.skyAtmosphere;\n  const globe = this.globe;\n  const globeTranslucencyState = this._globeTranslucencyState;\n\n  if (\n    !renderPass ||\n    (this._mode !== SceneMode.SCENE2D &&\n      view.camera.frustum instanceof OrthographicFrustum) ||\n    !globeTranslucencyState.environmentVisible\n  ) {\n    environmentState.skyAtmosphereCommand = undefined;\n    environmentState.skyBoxCommand = undefined;\n    environmentState.sunDrawCommand = undefined;\n    environmentState.sunComputeCommand = undefined;\n    environmentState.moonCommand = undefined;\n  } else {\n    if (defined(skyAtmosphere)) {\n      if (defined(globe)) {\n        skyAtmosphere.setDynamicLighting(\n          DynamicAtmosphereLightingType.fromGlobeFlags(globe),\n        );\n        environmentState.isReadyForAtmosphere =\n          environmentState.isReadyForAtmosphere ||\n          !globe.show ||\n          globe._surface._tilesToRender.length > 0;\n      } else {\n        const dynamicLighting = atmosphere.dynamicLighting;\n        skyAtmosphere.setDynamicLighting(dynamicLighting);\n        environmentState.isReadyForAtmosphere = true;\n      }\n\n      environmentState.skyAtmosphereCommand = skyAtmosphere.update(\n        frameState,\n        globe,\n      );\n      if (defined(environmentState.skyAtmosphereCommand)) {\n        this.updateDerivedCommands(environmentState.skyAtmosphereCommand);\n      }\n    } else {\n      environmentState.skyAtmosphereCommand = undefined;\n    }\n\n    environmentState.skyBoxCommand = defined(this.skyBox)\n      ? this.skyBox.update(frameState, this._hdr)\n      : undefined;\n    const sunCommands = defined(this.sun)\n      ? this.sun.update(frameState, view.passState, this._hdr)\n      : undefined;\n    environmentState.sunDrawCommand = defined(sunCommands)\n      ? sunCommands.drawCommand\n      : undefined;\n    environmentState.sunComputeCommand = defined(sunCommands)\n      ? sunCommands.computeCommand\n      : undefined;\n    environmentState.moonCommand = defined(this.moon)\n      ? this.moon.update(frameState)\n      : undefined;\n  }\n\n  const clearGlobeDepth = (environmentState.clearGlobeDepth =\n    defined(globe) &&\n    globe.show &&\n    (!globe.depthTestAgainstTerrain || this.mode === SceneMode.SCENE2D));\n  const useDepthPlane = (environmentState.useDepthPlane =\n    clearGlobeDepth &&\n    this.mode === SceneMode.SCENE3D &&\n    globeTranslucencyState.useDepthPlane);\n  if (useDepthPlane) {\n    // Update the depth plane that is rendered in 3D when the primitives are\n    // not depth tested against terrain so primitives on the backface\n    // of the globe are not picked.\n    this._depthPlane.update(frameState);\n  }\n\n  environmentState.renderTranslucentDepthForPick = false;\n  environmentState.useWebVR =\n    this._useWebVR && this.mode !== SceneMode.SCENE2D && !offscreenPass;\n\n  const occluder =\n    frameState.mode === SceneMode.SCENE3D &&\n    !globeTranslucencyState.sunVisibleThroughGlobe\n      ? frameState.occluder\n      : undefined;\n  let cullingVolume = frameState.cullingVolume;\n\n  // get user culling volume minus the far plane.\n  const planes = scratchCullingVolume.planes;\n  for (let k = 0; k < 5; ++k) {\n    planes[k] = cullingVolume.planes[k];\n  }\n  cullingVolume = scratchCullingVolume;\n\n  // Determine visibility of celestial and terrestrial environment effects.\n  environmentState.isSkyAtmosphereVisible =\n    defined(environmentState.skyAtmosphereCommand) &&\n    environmentState.isReadyForAtmosphere;\n  environmentState.isSunVisible = this.isVisible(\n    cullingVolume,\n    environmentState.sunDrawCommand,\n    occluder,\n  );\n  environmentState.isMoonVisible = this.isVisible(\n    cullingVolume,\n    environmentState.moonCommand,\n    occluder,\n  );\n\n  const envMaps = this.specularEnvironmentMaps;\n  let specularEnvironmentCubeMap = this._specularEnvironmentCubeMap;\n  if (defined(envMaps) && specularEnvironmentCubeMap?.url !== envMaps) {\n    specularEnvironmentCubeMap =\n      specularEnvironmentCubeMap && specularEnvironmentCubeMap.destroy();\n    this._specularEnvironmentCubeMap = new SpecularEnvironmentCubeMap(envMaps);\n  } else if (!defined(envMaps) && defined(specularEnvironmentCubeMap)) {\n    specularEnvironmentCubeMap.destroy();\n    this._specularEnvironmentCubeMap = undefined;\n  }\n\n  if (defined(this._specularEnvironmentCubeMap)) {\n    this._specularEnvironmentCubeMap.update(frameState);\n  }\n};\n\nfunction updateDebugFrustumPlanes(scene) {\n  const frameState = scene._frameState;\n  if (scene.debugShowFrustumPlanes !== scene._debugShowFrustumPlanes) {\n    if (scene.debugShowFrustumPlanes) {\n      scene._debugFrustumPlanes = new DebugCameraPrimitive({\n        camera: scene.camera,\n        updateOnChange: false,\n        frustumSplits: frameState.frustumSplits,\n      });\n    } else {\n      scene._debugFrustumPlanes =\n        scene._debugFrustumPlanes && scene._debugFrustumPlanes.destroy();\n    }\n    scene._debugShowFrustumPlanes = scene.debugShowFrustumPlanes;\n  }\n\n  if (defined(scene._debugFrustumPlanes)) {\n    scene._debugFrustumPlanes.update(frameState);\n  }\n}\n\nfunction updateShadowMaps(scene) {\n  const frameState = scene._frameState;\n  const { passes, shadowState, shadowMaps } = frameState;\n  const length = shadowMaps.length;\n\n  const shadowsEnabled =\n    length > 0 &&\n    !passes.pick &&\n    !passes.pickVoxel &&\n    scene.mode === SceneMode.SCENE3D;\n  if (shadowsEnabled !== shadowState.shadowsEnabled) {\n    // Update derived commands when shadowsEnabled changes\n    ++shadowState.lastDirtyTime;\n    shadowState.shadowsEnabled = shadowsEnabled;\n  }\n\n  shadowState.lightShadowsEnabled = false;\n\n  if (!shadowsEnabled) {\n    return;\n  }\n\n  // Check if the shadow maps are different than the shadow maps last frame.\n  // If so, the derived commands need to be updated.\n  for (let j = 0; j < length; ++j) {\n    if (shadowMaps[j] !== shadowState.shadowMaps[j]) {\n      ++shadowState.lastDirtyTime;\n      break;\n    }\n  }\n\n  shadowState.shadowMaps.length = 0;\n  shadowState.lightShadowMaps.length = 0;\n\n  for (let i = 0; i < length; ++i) {\n    const shadowMap = shadowMaps[i];\n    shadowMap.update(frameState);\n\n    shadowState.shadowMaps.push(shadowMap);\n\n    if (shadowMap.fromLightSource) {\n      shadowState.lightShadowMaps.push(shadowMap);\n      shadowState.lightShadowsEnabled = true;\n    }\n\n    if (shadowMap.dirty) {\n      ++shadowState.lastDirtyTime;\n      shadowMap.dirty = false;\n    }\n  }\n}\n\nfunction updateAndRenderPrimitives(scene) {\n  const frameState = scene._frameState;\n\n  scene._groundPrimitives.update(frameState);\n  scene._primitives.update(frameState);\n\n  updateDebugFrustumPlanes(scene);\n  updateShadowMaps(scene);\n\n  if (scene._globe) {\n    scene._globe.render(frameState);\n  }\n}\n\nfunction updateAndClearFramebuffers(scene, passState, clearColor) {\n  const context = scene._context;\n  const frameState = scene._frameState;\n  const environmentState = scene._environmentState;\n  const view = scene._view;\n\n  const passes = frameState.passes;\n  const picking = passes.pick || passes.pickVoxel;\n  if (defined(view.globeDepth)) {\n    view.globeDepth.picking = picking;\n  }\n  const useWebVR = environmentState.useWebVR;\n\n  // Preserve the reference to the original framebuffer.\n  environmentState.originalFramebuffer = passState.framebuffer;\n\n  // Manage sun bloom post-processing effect.\n  if (defined(scene.sun) && scene.sunBloom !== scene._sunBloom) {\n    if (scene.sunBloom && !useWebVR) {\n      scene._sunPostProcess = new SunPostProcess();\n    } else if (defined(scene._sunPostProcess)) {\n      scene._sunPostProcess = scene._sunPostProcess.destroy();\n    }\n\n    scene._sunBloom = scene.sunBloom;\n  } else if (!defined(scene.sun) && defined(scene._sunPostProcess)) {\n    scene._sunPostProcess = scene._sunPostProcess.destroy();\n    scene._sunBloom = false;\n  }\n\n  // Clear the pass state framebuffer.\n  const clear = scene._clearColorCommand;\n  Color.clone(clearColor, clear.color);\n  clear.execute(context, passState);\n\n  // Update globe depth rendering based on the current context and clear the globe depth framebuffer.\n  // Globe depth is copied for the pick pass to support picking batched geometries in GroundPrimitives.\n  const useGlobeDepthFramebuffer = (environmentState.useGlobeDepthFramebuffer =\n    defined(view.globeDepth));\n  if (useGlobeDepthFramebuffer) {\n    view.globeDepth.update(\n      context,\n      passState,\n      view.viewport,\n      scene.msaaSamples,\n      scene._hdr,\n      environmentState.clearGlobeDepth,\n    );\n    view.globeDepth.clear(context, passState, clearColor);\n  }\n\n  // If supported, configure OIT to use the globe depth framebuffer and clear the OIT framebuffer.\n  const oit = view.oit;\n  const useOIT = (environmentState.useOIT =\n    !picking && defined(oit) && oit.isSupported());\n  if (useOIT) {\n    oit.update(\n      context,\n      passState,\n      view.globeDepth.colorFramebufferManager,\n      scene._hdr,\n      scene.msaaSamples,\n    );\n    oit.clear(context, passState, clearColor);\n    environmentState.useOIT = oit.isSupported();\n  }\n\n  const postProcess = scene.postProcessStages;\n  let usePostProcess = (environmentState.usePostProcess =\n    !picking &&\n    (scene._hdr ||\n      postProcess.length > 0 ||\n      postProcess.ambientOcclusion.enabled ||\n      postProcess.fxaa.enabled ||\n      postProcess.bloom.enabled));\n  environmentState.usePostProcessSelected = false;\n  if (usePostProcess) {\n    view.sceneFramebuffer.update(\n      context,\n      view.viewport,\n      scene._hdr,\n      scene.msaaSamples,\n    );\n    view.sceneFramebuffer.clear(context, passState, clearColor);\n\n    postProcess.update(context, frameState.useLogDepth, scene._hdr);\n    postProcess.clear(context);\n\n    usePostProcess = environmentState.usePostProcess = postProcess.ready;\n    environmentState.usePostProcessSelected =\n      usePostProcess && postProcess.hasSelected;\n  }\n\n  if (environmentState.isSunVisible && scene.sunBloom && !useWebVR) {\n    passState.framebuffer = scene._sunPostProcess.update(passState);\n    scene._sunPostProcess.clear(context, passState, clearColor);\n  } else if (useGlobeDepthFramebuffer) {\n    passState.framebuffer = view.globeDepth.framebuffer;\n  } else if (usePostProcess) {\n    passState.framebuffer = view.sceneFramebuffer.framebuffer;\n  }\n\n  if (defined(passState.framebuffer)) {\n    clear.execute(context, passState);\n  }\n\n  const useInvertClassification = (environmentState.useInvertClassification =\n    !picking && defined(passState.framebuffer) && scene.invertClassification);\n  if (useInvertClassification) {\n    let depthFramebuffer;\n    if (frameState.invertClassificationColor.alpha === 1.0) {\n      if (useGlobeDepthFramebuffer) {\n        depthFramebuffer = view.globeDepth.framebuffer;\n      }\n    }\n\n    if (defined(depthFramebuffer) || context.depthTexture) {\n      scene._invertClassification.previousFramebuffer = depthFramebuffer;\n      scene._invertClassification.update(\n        context,\n        scene.msaaSamples,\n        view.globeDepth.colorFramebufferManager,\n      );\n      scene._invertClassification.clear(context, passState);\n\n      if (frameState.invertClassificationColor.alpha < 1.0 && useOIT) {\n        const command = scene._invertClassification.unclassifiedCommand;\n        const derivedCommands = command.derivedCommands;\n        derivedCommands.oit = oit.createDerivedCommands(\n          command,\n          context,\n          derivedCommands.oit,\n        );\n      }\n    } else {\n      environmentState.useInvertClassification = false;\n    }\n  }\n\n  if (scene._globeTranslucencyState.translucent) {\n    view.globeTranslucencyFramebuffer.updateAndClear(\n      scene._hdr,\n      view.viewport,\n      context,\n      passState,\n    );\n  }\n}\n\n/**\n * @private\n */\nScene.prototype.resolveFramebuffers = function (passState) {\n  const context = this._context;\n  const environmentState = this._environmentState;\n  const view = this._view;\n  const { globeDepth, translucentTileClassification } = view;\n  if (defined(globeDepth)) {\n    globeDepth.prepareColorTextures(context);\n  }\n\n  const {\n    useOIT,\n    useGlobeDepthFramebuffer,\n    usePostProcess,\n    originalFramebuffer,\n  } = environmentState;\n\n  const globeFramebuffer = useGlobeDepthFramebuffer\n    ? globeDepth.colorFramebufferManager\n    : undefined;\n  const sceneFramebuffer = view.sceneFramebuffer._colorFramebuffer;\n  const idFramebuffer = view.sceneFramebuffer.idFramebuffer;\n\n  if (useOIT) {\n    passState.framebuffer = usePostProcess\n      ? sceneFramebuffer.framebuffer\n      : originalFramebuffer;\n    view.oit.execute(context, passState);\n  }\n\n  if (\n    translucentTileClassification.hasTranslucentDepth &&\n    translucentTileClassification.isSupported()\n  ) {\n    translucentTileClassification.execute(this, passState);\n  }\n\n  if (usePostProcess) {\n    view.sceneFramebuffer.prepareColorTextures(context);\n    let inputFramebuffer = sceneFramebuffer;\n    if (useGlobeDepthFramebuffer && !useOIT) {\n      inputFramebuffer = globeFramebuffer;\n    }\n\n    const postProcess = this.postProcessStages;\n    const colorTexture = inputFramebuffer.getColorTexture(0);\n    const idTexture = idFramebuffer.getColorTexture(0);\n    const depthTexture = defaultValue(\n      globeFramebuffer,\n      sceneFramebuffer,\n    ).getDepthStencilTexture();\n    postProcess.execute(context, colorTexture, depthTexture, idTexture);\n    postProcess.copy(context, originalFramebuffer);\n  }\n\n  if (!useOIT && !usePostProcess && useGlobeDepthFramebuffer) {\n    passState.framebuffer = originalFramebuffer;\n    globeDepth.executeCopyColor(context, passState);\n  }\n};\n\nfunction callAfterRenderFunctions(scene) {\n  // Functions are queued up during primitive update and executed here in case\n  // the function modifies scene state that should remain constant over the frame.\n  const functions = scene._frameState.afterRender;\n  for (let i = 0; i < functions.length; ++i) {\n    const shouldRequestRender = functions[i]();\n    if (shouldRequestRender) {\n      scene.requestRender();\n    }\n  }\n\n  functions.length = 0;\n}\n\nfunction getGlobeHeight(scene) {\n  if (scene.mode === SceneMode.MORPHING) {\n    return;\n  }\n  const cartographic = scene.camera.positionCartographic;\n  return scene.getHeight(cartographic);\n}\n\n/**\n * Gets the height of the loaded surface at the cartographic position.\n * @param {Cartographic} cartographic The cartographic position.\n * @param {HeightReference} [heightReference=CLAMP_TO_GROUND] Based on the height reference value, determines whether to ignore heights from 3D Tiles or terrain.\n * @private\n */\nScene.prototype.getHeight = function (cartographic, heightReference) {\n  if (!defined(cartographic)) {\n    return undefined;\n  }\n\n  const ignore3dTiles =\n    heightReference === HeightReference.CLAMP_TO_TERRAIN ||\n    heightReference === HeightReference.RELATIVE_TO_TERRAIN;\n\n  const ignoreTerrain =\n    heightReference === HeightReference.CLAMP_TO_3D_TILE ||\n    heightReference === HeightReference.RELATIVE_TO_3D_TILE;\n\n  if (!defined(cartographic)) {\n    return;\n  }\n\n  let maxHeight = Number.NEGATIVE_INFINITY;\n\n  if (!ignore3dTiles) {\n    const length = this.primitives.length;\n    for (let i = 0; i < length; ++i) {\n      const primitive = this.primitives.get(i);\n      if (\n        !primitive.isCesium3DTileset ||\n        !primitive.show ||\n        !primitive.enableCollision\n      ) {\n        continue;\n      }\n\n      const result = primitive.getHeight(cartographic, this);\n      if (defined(result) && result > maxHeight) {\n        maxHeight = result;\n      }\n    }\n  }\n\n  const globe = this._globe;\n  if (!ignoreTerrain && defined(globe) && globe.show) {\n    const result = globe.getHeight(cartographic);\n    if (result > maxHeight) {\n      maxHeight = result;\n    }\n  }\n\n  if (maxHeight > Number.NEGATIVE_INFINITY) {\n    return maxHeight;\n  }\n\n  return undefined;\n};\n\nconst updateHeightScratchCartographic = new Cartographic();\n/**\n * Calls the callback when a new tile is rendered that contains the given cartographic. The only parameter\n * is the cartesian position on the tile.\n *\n * @private\n *\n * @param {Cartographic} cartographic The cartographic position.\n * @param {Function} callback The function to be called when a new tile is loaded containing the updated cartographic.\n * @param {HeightReference} [heightReference=CLAMP_TO_GROUND] Based on the height reference value, determines whether to ignore heights from 3D Tiles or terrain.\n * @returns {Function} The function to remove this callback from the quadtree.\n */\nScene.prototype.updateHeight = function (\n  cartographic,\n  callback,\n  heightReference,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"callback\", callback);\n  //>>includeEnd('debug');\n\n  const callbackWrapper = () => {\n    Cartographic.clone(cartographic, updateHeightScratchCartographic);\n\n    const height = this.getHeight(cartographic, heightReference);\n    if (defined(height)) {\n      updateHeightScratchCartographic.height = height;\n      callback(updateHeightScratchCartographic);\n    }\n  };\n\n  const ignore3dTiles =\n    heightReference === HeightReference.CLAMP_TO_TERRAIN ||\n    heightReference === HeightReference.RELATIVE_TO_TERRAIN;\n\n  const ignoreTerrain =\n    heightReference === HeightReference.CLAMP_TO_3D_TILE ||\n    heightReference === HeightReference.RELATIVE_TO_3D_TILE;\n\n  let terrainRemoveCallback;\n  if (!ignoreTerrain && defined(this.globe)) {\n    terrainRemoveCallback = this.globe._surface.updateHeight(\n      cartographic,\n      callbackWrapper,\n    );\n  }\n\n  let tilesetRemoveCallbacks = {};\n  const ellipsoid = this._ellipsoid;\n  const createPrimitiveEventListener = (primitive) => {\n    if (\n      ignore3dTiles ||\n      primitive.isDestroyed() ||\n      !primitive.isCesium3DTileset\n    ) {\n      return;\n    }\n\n    const tilesetRemoveCallback = primitive.updateHeight(\n      cartographic,\n      callbackWrapper,\n      ellipsoid,\n    );\n    tilesetRemoveCallbacks[primitive.id] = tilesetRemoveCallback;\n  };\n\n  if (!ignore3dTiles) {\n    const length = this.primitives.length;\n    for (let i = 0; i < length; ++i) {\n      const primitive = this.primitives.get(i);\n      createPrimitiveEventListener(primitive);\n    }\n  }\n\n  const removeAddedListener = this.primitives.primitiveAdded.addEventListener(\n    createPrimitiveEventListener,\n  );\n  const removeRemovedListener =\n    this.primitives.primitiveRemoved.addEventListener((primitive) => {\n      if (primitive.isDestroyed() || !primitive.isCesium3DTileset) {\n        return;\n      }\n      if (defined(tilesetRemoveCallbacks[primitive.id])) {\n        tilesetRemoveCallbacks[primitive.id]();\n      }\n      delete tilesetRemoveCallbacks[primitive.id];\n    });\n\n  const removeCallback = () => {\n    terrainRemoveCallback = terrainRemoveCallback && terrainRemoveCallback();\n    Object.values(tilesetRemoveCallbacks).forEach((tilesetRemoveCallback) =>\n      tilesetRemoveCallback(),\n    );\n    tilesetRemoveCallbacks = {};\n    removeAddedListener();\n    removeRemovedListener();\n  };\n\n  return removeCallback;\n};\n\nfunction isCameraUnderground(scene) {\n  const camera = scene.camera;\n  const mode = scene._mode;\n  const cameraController = scene._screenSpaceCameraController;\n  const cartographic = camera.positionCartographic;\n\n  if (!defined(cartographic)) {\n    return false;\n  }\n\n  if (!cameraController.onMap() && cartographic.height < 0.0) {\n    // The camera can go off the map while in Columbus View.\n    // Make a best guess as to whether it's underground by checking if its height is less than zero.\n    return true;\n  }\n\n  if (mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n    return false;\n  }\n\n  const globeHeight = scene._globeHeight;\n  return defined(globeHeight) && cartographic.height < globeHeight;\n}\n\n/**\n * @private\n */\nScene.prototype.initializeFrame = function () {\n  // Destroy released shaders and textures once every 120 frames to avoid thrashing the cache\n  if (this._shaderFrameCount++ === 120) {\n    this._shaderFrameCount = 0;\n    this._context.shaderCache.destroyReleasedShaderPrograms();\n    this._context.textureCache.destroyReleasedTextures();\n  }\n\n  this._tweens.update();\n\n  if (this._globeHeightDirty) {\n    if (defined(this._removeUpdateHeightCallback)) {\n      this._removeUpdateHeightCallback();\n      this._removeUpdateHeightCallback = undefined;\n    }\n\n    this._globeHeight = getGlobeHeight(this);\n    this._globeHeightDirty = false;\n\n    const cartographic = this.camera.positionCartographic;\n    this._removeUpdateHeightCallback = this.updateHeight(\n      cartographic,\n      (updatedCartographic) => {\n        if (this.isDestroyed()) {\n          return;\n        }\n\n        this._globeHeight = updatedCartographic.height;\n      },\n    );\n  }\n  this._cameraUnderground = isCameraUnderground(this);\n  this._globeTranslucencyState.update(this);\n\n  this._screenSpaceCameraController.update();\n  if (defined(this._deviceOrientationCameraController)) {\n    this._deviceOrientationCameraController.update();\n  }\n\n  this.camera.update(this._mode);\n  this.camera._updateCameraChanged();\n};\n\nfunction updateDebugShowFramesPerSecond(scene, renderedThisFrame) {\n  if (scene.debugShowFramesPerSecond) {\n    if (!defined(scene._performanceDisplay)) {\n      const performanceContainer = document.createElement(\"div\");\n      performanceContainer.className =\n        \"cesium-performanceDisplay-defaultContainer\";\n      const container = scene._canvas.parentNode;\n      container.appendChild(performanceContainer);\n      const performanceDisplay = new PerformanceDisplay({\n        container: performanceContainer,\n      });\n      scene._performanceDisplay = performanceDisplay;\n      scene._performanceContainer = performanceContainer;\n    }\n\n    scene._performanceDisplay.throttled = scene.requestRenderMode;\n    scene._performanceDisplay.update(renderedThisFrame);\n  } else if (defined(scene._performanceDisplay)) {\n    scene._performanceDisplay =\n      scene._performanceDisplay && scene._performanceDisplay.destroy();\n    scene._performanceContainer.parentNode.removeChild(\n      scene._performanceContainer,\n    );\n  }\n}\n\nfunction prePassesUpdate(scene) {\n  scene._jobScheduler.resetBudgets();\n\n  const frameState = scene._frameState;\n  scene.primitives.prePassesUpdate(frameState);\n\n  if (defined(scene.globe)) {\n    scene.globe.update(frameState);\n  }\n\n  scene._picking.update();\n  frameState.creditDisplay.update();\n}\n\nfunction postPassesUpdate(scene) {\n  scene.primitives.postPassesUpdate(scene._frameState);\n  RequestScheduler.update();\n}\n\nconst scratchBackgroundColor = new Color();\n\n/**\n * Render the scene\n *\n * @param {Scene} scene\n * @private\n */\nfunction render(scene) {\n  const frameState = scene._frameState;\n\n  const context = scene.context;\n  const { uniformState } = context;\n\n  const view = scene._defaultView;\n  scene._view = view;\n\n  scene.updateFrameState();\n  frameState.passes.render = true;\n  frameState.passes.postProcess = scene.postProcessStages.hasSelected;\n  frameState.tilesetPassState = renderTilesetPassState;\n\n  let backgroundColor = defaultValue(scene.backgroundColor, Color.BLACK);\n  if (scene._hdr) {\n    backgroundColor = Color.clone(backgroundColor, scratchBackgroundColor);\n    backgroundColor.red = Math.pow(backgroundColor.red, scene.gamma);\n    backgroundColor.green = Math.pow(backgroundColor.green, scene.gamma);\n    backgroundColor.blue = Math.pow(backgroundColor.blue, scene.gamma);\n  }\n  frameState.backgroundColor = backgroundColor;\n\n  frameState.atmosphere = scene.atmosphere;\n  scene.fog.update(frameState);\n\n  uniformState.update(frameState);\n\n  const shadowMap = scene.shadowMap;\n  if (defined(shadowMap) && shadowMap.enabled) {\n    if (!defined(scene.light) || scene.light instanceof SunLight) {\n      // Negate the sun direction so that it is from the Sun, not to the Sun\n      Cartesian3.negate(\n        uniformState.sunDirectionWC,\n        scene._shadowMapCamera.direction,\n      );\n    } else {\n      Cartesian3.clone(scene.light.direction, scene._shadowMapCamera.direction);\n    }\n    frameState.shadowMaps.push(shadowMap);\n  }\n\n  scene._computeCommandList.length = 0;\n  scene._overlayCommandList.length = 0;\n\n  const viewport = view.viewport;\n  viewport.x = 0;\n  viewport.y = 0;\n  viewport.width = context.drawingBufferWidth;\n  viewport.height = context.drawingBufferHeight;\n\n  const passState = view.passState;\n  passState.framebuffer = undefined;\n  passState.blendingEnabled = undefined;\n  passState.scissorTest = undefined;\n  passState.viewport = BoundingRectangle.clone(viewport, passState.viewport);\n\n  if (defined(scene.globe)) {\n    scene.globe.beginFrame(frameState);\n  }\n\n  scene.updateEnvironment();\n  scene.updateAndExecuteCommands(passState, backgroundColor);\n  scene.resolveFramebuffers(passState);\n\n  passState.framebuffer = undefined;\n  executeOverlayCommands(scene, passState);\n\n  if (defined(scene.globe)) {\n    scene.globe.endFrame(frameState);\n\n    if (!scene.globe.tilesLoaded) {\n      scene._renderRequested = true;\n    }\n  }\n\n  context.endFrame();\n}\n\nfunction tryAndCatchError(scene, functionToExecute) {\n  try {\n    functionToExecute(scene);\n  } catch (error) {\n    scene._renderError.raiseEvent(scene, error);\n\n    if (scene.rethrowRenderErrors) {\n      throw error;\n    }\n  }\n}\n\nfunction updateMostDetailedRayPicks(scene) {\n  return scene._picking.updateMostDetailedRayPicks(scene);\n}\n\n/**\n * Update and render the scene. It is usually not necessary to call this function\n * directly because {@link CesiumWidget} will do it automatically.\n * @param {JulianDate} [time] The simulation time at which to render.\n */\nScene.prototype.render = function (time) {\n  /**\n   *\n   * Pre passes update. Execute any pass invariant code that should run before the passes here.\n   *\n   */\n  this._preUpdate.raiseEvent(this, time);\n\n  const frameState = this._frameState;\n  frameState.newFrame = false;\n\n  if (!defined(time)) {\n    time = JulianDate.now();\n  }\n\n  const cameraChanged = this._view.checkForCameraUpdates(this);\n  if (cameraChanged) {\n    this._globeHeightDirty = true;\n  }\n\n  // Determine if should render a new frame in request render mode\n  let shouldRender =\n    !this.requestRenderMode ||\n    this._renderRequested ||\n    cameraChanged ||\n    this._logDepthBufferDirty ||\n    this._hdrDirty ||\n    this.mode === SceneMode.MORPHING;\n  if (\n    !shouldRender &&\n    defined(this.maximumRenderTimeChange) &&\n    defined(this._lastRenderTime)\n  ) {\n    const difference = Math.abs(\n      JulianDate.secondsDifference(this._lastRenderTime, time),\n    );\n    shouldRender = shouldRender || difference > this.maximumRenderTimeChange;\n  }\n\n  if (shouldRender) {\n    this._lastRenderTime = JulianDate.clone(time, this._lastRenderTime);\n    this._renderRequested = false;\n    this._logDepthBufferDirty = false;\n    this._hdrDirty = false;\n\n    const frameNumber = CesiumMath.incrementWrap(\n      frameState.frameNumber,\n      15000000.0,\n      1.0,\n    );\n    updateFrameNumber(this, frameNumber, time);\n    frameState.newFrame = true;\n  }\n\n  tryAndCatchError(this, prePassesUpdate);\n\n  /**\n   * Passes update. Add any passes here\n   */\n  if (this.primitives.show) {\n    tryAndCatchError(this, updateMostDetailedRayPicks);\n    tryAndCatchError(this, updatePreloadPass);\n    tryAndCatchError(this, updatePreloadFlightPass);\n    if (!shouldRender) {\n      tryAndCatchError(this, updateRequestRenderModeDeferCheckPass);\n    }\n  }\n\n  this._postUpdate.raiseEvent(this, time);\n\n  if (shouldRender) {\n    this._preRender.raiseEvent(this, time);\n    frameState.creditDisplay.beginFrame();\n    tryAndCatchError(this, render);\n  }\n\n  /**\n   * Post passes update. Execute any pass invariant code that should run after the passes here.\n   */\n  updateDebugShowFramesPerSecond(this, shouldRender);\n  tryAndCatchError(this, postPassesUpdate);\n\n  // Often used to trigger events (so don't want in trycatch) that the user\n  // might be subscribed to. Things like the tile load events, promises, etc.\n  // We don't want those events to resolve during the render loop because the events might add new primitives\n  callAfterRenderFunctions(this);\n\n  if (shouldRender) {\n    this._postRender.raiseEvent(this, time);\n    frameState.creditDisplay.endFrame();\n  }\n};\n\n/**\n * Update and render the scene. Always forces a new render frame regardless of whether a render was\n * previously requested.\n * @param {JulianDate} [time] The simulation time at which to render.\n *\n * @private\n */\nScene.prototype.forceRender = function (time) {\n  this._renderRequested = true;\n  this.render(time);\n};\n\n/**\n * Requests a new rendered frame when {@link Scene#requestRenderMode} is set to <code>true</code>.\n * The render rate will not exceed the {@link CesiumWidget#targetFrameRate}.\n *\n * @see Scene#requestRenderMode\n */\nScene.prototype.requestRender = function () {\n  this._renderRequested = true;\n};\n\n/**\n * @private\n */\nScene.prototype.clampLineWidth = function (width) {\n  return Math.max(\n    ContextLimits.minimumAliasedLineWidth,\n    Math.min(width, ContextLimits.maximumAliasedLineWidth),\n  );\n};\n\n/**\n * Returns an object with a `primitive` property that contains the first (top) primitive in the scene\n * at a particular window coordinate or undefined if nothing is at the location. Other properties may\n * potentially be set depending on the type of primitive and may be used to further identify the picked object.\n * <p>\n * When a feature of a 3D Tiles tileset is picked, <code>pick</code> returns a {@link Cesium3DTileFeature} object.\n * </p>\n *\n * @example\n * // On mouse over, color the feature yellow.\n * handler.setInputAction(function(movement) {\n *     const feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTileFeature) {\n *         feature.color = Cesium.Color.YELLOW;\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {number} [width=3] Width of the pick rectangle.\n * @param {number} [height=3] Height of the pick rectangle.\n * @returns {object} Object containing the picked primitive.\n */\nScene.prototype.pick = function (windowPosition, width, height) {\n  return this._picking.pick(this, windowPosition, width, height);\n};\n\n/**\n * Returns a {@link VoxelCell} for the voxel sample rendered at a particular window coordinate,\n * or undefined if no voxel is rendered at that position.\n *\n * @example\n * On left click, report the value of the \"color\" property at that voxel sample.\n * handler.setInputAction(function(movement) {\n *   const voxelCell = scene.pickVoxel(movement.position);\n *   if (defined(voxelCell)) {\n *     console.log(voxelCell.getProperty(\"color\"));\n *   }\n * }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {number} [width=3] Width of the pick rectangle.\n * @param {number} [height=3] Height of the pick rectangle.\n * @returns {VoxelCell|undefined} Information about the voxel cell rendered at the picked position.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n */\nScene.prototype.pickVoxel = function (windowPosition, width, height) {\n  const pickedObject = this.pick(windowPosition, width, height);\n  if (!defined(pickedObject)) {\n    return;\n  }\n  const voxelPrimitive = pickedObject.primitive;\n  if (!(voxelPrimitive instanceof VoxelPrimitive)) {\n    return;\n  }\n  const voxelCoordinate = this._picking.pickVoxelCoordinate(\n    this,\n    windowPosition,\n    width,\n    height,\n  );\n  // Look up the keyframeNode containing this picked cell\n  const tileIndex = 255 * voxelCoordinate[0] + voxelCoordinate[1];\n  const keyframeNode = voxelPrimitive._traversal.findKeyframeNode(tileIndex);\n  if (!defined(keyframeNode)) {\n    // The tile rendered at the pick position has since been discarded by\n    // a traversal update\n    return;\n  }\n  // Look up the metadata for the picked cell\n  const sampleIndex = 255 * voxelCoordinate[2] + voxelCoordinate[3];\n  return VoxelCell.fromKeyframeNode(\n    voxelPrimitive,\n    tileIndex,\n    sampleIndex,\n    keyframeNode,\n  );\n};\n\n/**\n * Pick a metadata value at the given window position.\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {string|undefined} schemaId The ID of the metadata schema to pick values\n * from. If this is `undefined`, then it will pick the values from the object\n * that match the given class- and property name, regardless of the schema ID.\n * @param {string} className The name of the metadata class to pick\n * values from\n * @param {string} propertyName The name of the metadata property to pick\n * values from\n * @returns {MetadataValue|undefined} The metadata value, or `undefined` when\n * no matching metadata was found at the given position\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n */\nScene.prototype.pickMetadata = function (\n  windowPosition,\n  schemaId,\n  className,\n  propertyName,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"windowPosition\", windowPosition);\n  Check.typeOf.string(\"className\", className);\n  Check.typeOf.string(\"propertyName\", propertyName);\n  //>>includeEnd('debug');\n\n  const pickedObject = this.pick(windowPosition);\n  if (!defined(pickedObject)) {\n    return undefined;\n  }\n\n  // Check if the picked object is a model that has structural\n  // metadata, with a schema that contains the specified\n  // property.\n  const structuralMetadata = pickedObject.detail?.model?.structuralMetadata;\n  if (!defined(structuralMetadata)) {\n    return undefined;\n  }\n  const schema = structuralMetadata.schema;\n  const classProperty = getMetadataClassProperty(\n    schema,\n    schemaId,\n    className,\n    propertyName,\n  );\n  if (!defined(classProperty)) {\n    return undefined;\n  }\n  const metadataProperty = getMetadataProperty(\n    structuralMetadata,\n    className,\n    propertyName,\n  );\n  if (!defined(metadataProperty)) {\n    return undefined;\n  }\n\n  const pickedMetadataInfo = new PickedMetadataInfo(\n    schemaId,\n    className,\n    propertyName,\n    classProperty,\n    metadataProperty,\n  );\n\n  const pickedMetadataValues = this._picking.pickMetadata(\n    this,\n    windowPosition,\n    pickedMetadataInfo,\n  );\n\n  return pickedMetadataValues;\n};\n\n/**\n * Pick the schema of the metadata of the object at the given position\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @returns {MetadataSchema} The metadata schema, or `undefined` if there is no object with\n * associated metadata at the given position.\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n */\nScene.prototype.pickMetadataSchema = function (windowPosition) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"windowPosition\", windowPosition);\n  //>>includeEnd('debug');\n\n  const pickedObject = this.pick(windowPosition);\n  if (!defined(pickedObject)) {\n    return undefined;\n  }\n  const schema = pickedObject.detail?.model?.structuralMetadata?.schema;\n  return schema;\n};\n\n/**\n * Returns the cartesian position reconstructed from the depth buffer and window position.\n * The returned position is in world coordinates. Used internally by camera functions to\n * prevent conversion to projected 2D coordinates and then back.\n * <p>\n * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n * translucent primitives; otherwise, this essentially picks through translucent primitives.\n * </p>\n *\n * @private\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Cartesian3} [result] The object on which to restore the result.\n * @returns {Cartesian3} The cartesian position in world coordinates.\n *\n * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n */\nScene.prototype.pickPositionWorldCoordinates = function (\n  windowPosition,\n  result,\n) {\n  return this._picking.pickPositionWorldCoordinates(\n    this,\n    windowPosition,\n    result,\n  );\n};\n\n/**\n * Returns the cartesian position reconstructed from the depth buffer and window position.\n * <p>\n * The position reconstructed from the depth buffer in 2D may be slightly different from those\n * reconstructed in 3D and Columbus view. This is caused by the difference in the distribution\n * of depth values of perspective and orthographic projection.\n * </p>\n * <p>\n * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n * translucent primitives; otherwise, this essentially picks through translucent primitives.\n * </p>\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Cartesian3} [result] The object on which to restore the result.\n * @returns {Cartesian3} The cartesian position.\n *\n * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n */\nScene.prototype.pickPosition = function (windowPosition, result) {\n  return this._picking.pickPosition(this, windowPosition, result);\n};\n\n/**\n * Returns a list of objects, each containing a `primitive` property, for all primitives at\n * a particular window coordinate position. Other properties may also be set depending on the\n * type of primitive and may be used to further identify the picked object. The primitives in\n * the list are ordered by their visual order in the scene (front to back).\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {number} [limit] If supplied, stop drilling after collecting this many picks.\n * @param {number} [width=3] Width of the pick rectangle.\n * @param {number} [height=3] Height of the pick rectangle.\n * @returns {any[]} Array of objects, each containing 1 picked primitives.\n *\n * @exception {DeveloperError} windowPosition is undefined.\n *\n * @example\n * const pickedObjects = scene.drillPick(new Cesium.Cartesian2(100.0, 200.0));\n *\n * @see Scene#pick\n */\nScene.prototype.drillPick = function (windowPosition, limit, width, height) {\n  return this._picking.drillPick(this, windowPosition, limit, width, height);\n};\n\nfunction updatePreloadPass(scene) {\n  const frameState = scene._frameState;\n  preloadTilesetPassState.camera = frameState.camera;\n  preloadTilesetPassState.cullingVolume = frameState.cullingVolume;\n\n  const primitives = scene.primitives;\n  primitives.updateForPass(frameState, preloadTilesetPassState);\n}\n\nfunction updatePreloadFlightPass(scene) {\n  const frameState = scene._frameState;\n  const camera = frameState.camera;\n  if (!camera.canPreloadFlight()) {\n    return;\n  }\n\n  preloadFlightTilesetPassState.camera = scene.preloadFlightCamera;\n  preloadFlightTilesetPassState.cullingVolume =\n    scene.preloadFlightCullingVolume;\n\n  const primitives = scene.primitives;\n  primitives.updateForPass(frameState, preloadFlightTilesetPassState);\n}\n\nfunction updateRequestRenderModeDeferCheckPass(scene) {\n  // Check if any ignored requests are ready to go (to wake rendering up again)\n  scene.primitives.updateForPass(\n    scene._frameState,\n    requestRenderModeDeferCheckPassState,\n  );\n}\n\n/**\n * Returns an object containing the first object intersected by the ray and the position of intersection,\n * or <code>undefined</code> if there were no intersections. The intersected object has a <code>primitive</code>\n * property that contains the intersected primitive. Other properties may be set depending on the type of primitive\n * and may be used to further identify the picked object. The ray must be given in world coordinates.\n * <p>\n * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n * primitives regardless of their visibility.\n * </p>\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {object} An object containing the object and position of the first intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.pickFromRay = function (ray, objectsToExclude, width) {\n  return this._picking.pickFromRay(this, ray, objectsToExclude, width);\n};\n\n/**\n * Returns a list of objects, each containing the object intersected by the ray and the position of intersection.\n * The intersected object has a <code>primitive</code> property that contains the intersected primitive. Other\n * properties may also be set depending on the type of primitive and may be used to further identify the picked object.\n * The primitives in the list are ordered by first intersection to last intersection. The ray must be given in\n * world coordinates.\n * <p>\n * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n * primitives regardless of their visibility.\n * </p>\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Object[]} List of objects containing the object and position of each intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.drillPickFromRay = function (\n  ray,\n  limit,\n  objectsToExclude,\n  width,\n) {\n  return this._picking.drillPickFromRay(\n    this,\n    ray,\n    limit,\n    objectsToExclude,\n    width,\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#pickFromRay} request using the maximum level of detail for 3D Tilesets\n * regardless of visibility.\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise<object>} A promise that resolves to an object containing the object and position of the first intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.pickFromRayMostDetailed = function (\n  ray,\n  objectsToExclude,\n  width,\n) {\n  return this._picking.pickFromRayMostDetailed(\n    this,\n    ray,\n    objectsToExclude,\n    width,\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#drillPickFromRay} request using the maximum level of detail for 3D Tilesets\n * regardless of visibility.\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise<Object[]>} A promise that resolves to a list of objects containing the object and position of each intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.drillPickFromRayMostDetailed = function (\n  ray,\n  limit,\n  objectsToExclude,\n  width,\n) {\n  return this._picking.drillPickFromRayMostDetailed(\n    this,\n    ray,\n    limit,\n    objectsToExclude,\n    width,\n  );\n};\n\n/**\n * Returns the height of scene geometry at the given cartographic position or <code>undefined</code> if there was no\n * scene geometry to sample height from. The height of the input position is ignored. May be used to clamp objects to\n * the globe, 3D Tiles, or primitives in the scene.\n * <p>\n * This function only samples height from globe tiles and 3D Tiles that are rendered in the current view. Samples height\n * from all other primitives regardless of their visibility.\n * </p>\n *\n * @param {Cartographic} position The cartographic position to sample height from.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {number} The height. This may be <code>undefined</code> if there was no scene geometry to sample height from.\n *\n * @example\n * const position = new Cesium.Cartographic(-1.31968, 0.698874);\n * const height = viewer.scene.sampleHeight(position);\n * console.log(height);\n *\n * @see Scene#clampToHeight\n * @see Scene#clampToHeightMostDetailed\n * @see Scene#sampleHeightMostDetailed\n *\n * @exception {DeveloperError} sampleHeight is only supported in 3D mode.\n * @exception {DeveloperError} sampleHeight requires depth texture support. Check sampleHeightSupported.\n */\nScene.prototype.sampleHeight = function (position, objectsToExclude, width) {\n  return this._picking.sampleHeight(this, position, objectsToExclude, width);\n};\n\n/**\n * Clamps the given cartesian position to the scene geometry along the geodetic surface normal. Returns the\n * clamped position or <code>undefined</code> if there was no scene geometry to clamp to. May be used to clamp\n * objects to the globe, 3D Tiles, or primitives in the scene.\n * <p>\n * This function only clamps to globe tiles and 3D Tiles that are rendered in the current view. Clamps to\n * all other primitives regardless of their visibility.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian position.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @param {Cartesian3} [result] An optional object to return the clamped position.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. This may be <code>undefined</code> if there was no scene geometry to clamp to.\n *\n * @example\n * // Clamp an entity to the underlying scene geometry\n * const position = entity.position.getValue(Cesium.JulianDate.now());\n * entity.position = viewer.scene.clampToHeight(position);\n *\n * @see Scene#sampleHeight\n * @see Scene#sampleHeightMostDetailed\n * @see Scene#clampToHeightMostDetailed\n *\n * @exception {DeveloperError} clampToHeight is only supported in 3D mode.\n * @exception {DeveloperError} clampToHeight requires depth texture support. Check clampToHeightSupported.\n */\nScene.prototype.clampToHeight = function (\n  cartesian,\n  objectsToExclude,\n  width,\n  result,\n) {\n  return this._picking.clampToHeight(\n    this,\n    cartesian,\n    objectsToExclude,\n    width,\n    result,\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#sampleHeight} query for an array of {@link Cartographic} positions\n * using the maximum level of detail for 3D Tilesets in the scene. The height of the input positions is ignored.\n * Returns a promise that is resolved when the query completes. Each point height is modified in place.\n * If a height cannot be determined because no geometry can be sampled at that location, or another error occurs,\n * the height is set to undefined.\n *\n * @param {Cartographic[]} positions The cartographic positions to update with sampled heights.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise<Cartographic[]>} A promise that resolves to the provided list of positions when the query has completed.\n *\n * @example\n * const positions = [\n *     new Cesium.Cartographic(-1.31968, 0.69887),\n *     new Cesium.Cartographic(-1.10489, 0.83923)\n * ];\n * const promise = viewer.scene.sampleHeightMostDetailed(positions);\n * promise.then(function(updatedPosition) {\n *     // positions[0].height and positions[1].height have been updated.\n *     // updatedPositions is just a reference to positions.\n * }\n *\n * @see Scene#sampleHeight\n *\n * @exception {DeveloperError} sampleHeightMostDetailed is only supported in 3D mode.\n * @exception {DeveloperError} sampleHeightMostDetailed requires depth texture support. Check sampleHeightSupported.\n */\nScene.prototype.sampleHeightMostDetailed = function (\n  positions,\n  objectsToExclude,\n  width,\n) {\n  return this._picking.sampleHeightMostDetailed(\n    this,\n    positions,\n    objectsToExclude,\n    width,\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#clampToHeight} query for an array of {@link Cartesian3} positions\n * using the maximum level of detail for 3D Tilesets in the scene. Returns a promise that is resolved when\n * the query completes. Each position is modified in place. If a position cannot be clamped because no geometry\n * can be sampled at that location, or another error occurs, the element in the array is set to undefined.\n *\n * @param {Cartesian3[]} cartesians The cartesian positions to update with clamped positions.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n * @param {number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise<Cartesian3[]>} A promise that resolves to the provided list of positions when the query has completed.\n *\n * @example\n * const cartesians = [\n *     entities[0].position.getValue(Cesium.JulianDate.now()),\n *     entities[1].position.getValue(Cesium.JulianDate.now())\n * ];\n * const promise = viewer.scene.clampToHeightMostDetailed(cartesians);\n * promise.then(function(updatedCartesians) {\n *     entities[0].position = updatedCartesians[0];\n *     entities[1].position = updatedCartesians[1];\n * }\n *\n * @see Scene#clampToHeight\n *\n * @exception {DeveloperError} clampToHeightMostDetailed is only supported in 3D mode.\n * @exception {DeveloperError} clampToHeightMostDetailed requires depth texture support. Check clampToHeightSupported.\n */\nScene.prototype.clampToHeightMostDetailed = function (\n  cartesians,\n  objectsToExclude,\n  width,\n) {\n  return this._picking.clampToHeightMostDetailed(\n    this,\n    cartesians,\n    objectsToExclude,\n    width,\n  );\n};\n\n/**\n * Transforms a position in cartesian coordinates to canvas coordinates.  This is commonly used to place an\n * HTML element at the same screen position as an object in the scene.\n *\n * @param {Cartesian3} position The position in cartesian coordinates.\n * @param {Cartesian2} [result] An optional object to return the input position transformed to canvas coordinates.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.  This may be <code>undefined</code> if the input position is near the center of the ellipsoid.\n *\n * @example\n * // Output the canvas position of longitude/latitude (0, 0) every time the mouse moves.\n * const scene = widget.scene;\n * const position = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * const handler = new Cesium.ScreenSpaceEventHandler(scene.canvas);\n * handler.setInputAction(function(movement) {\n *     console.log(scene.cartesianToCanvasCoordinates(position));\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nScene.prototype.cartesianToCanvasCoordinates = function (position, result) {\n  return SceneTransforms.worldToWindowCoordinates(this, position, result);\n};\n\n/**\n * Instantly completes an active transition.\n */\nScene.prototype.completeMorph = function () {\n  this._transitioner.completeMorph();\n};\n\n/**\n * Asynchronously transitions the scene to 2D.\n * @param {number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphTo2D = function (duration) {\n  duration = defaultValue(duration, 2.0);\n  this._transitioner.morphTo2D(duration, this._ellipsoid);\n};\n\n/**\n * Asynchronously transitions the scene to Columbus View.\n * @param {number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphToColumbusView = function (duration) {\n  duration = defaultValue(duration, 2.0);\n  this._transitioner.morphToColumbusView(duration, this._ellipsoid);\n};\n\n/**\n * Asynchronously transitions the scene to 3D.\n * @param {number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphTo3D = function (duration) {\n  duration = defaultValue(duration, 2.0);\n  this._transitioner.morphTo3D(duration, this._ellipsoid);\n};\n\nfunction setTerrain(scene, terrain) {\n  // Cancel any in-progress terrain update\n  scene._removeTerrainProviderReadyListener =\n    scene._removeTerrainProviderReadyListener &&\n    scene._removeTerrainProviderReadyListener();\n\n  // If the terrain is already loaded, set it immediately\n  if (terrain.ready) {\n    if (defined(scene.globe)) {\n      scene.globe.terrainProvider = terrain.provider;\n    }\n    return;\n  }\n  // Otherwise, set a placeholder\n  scene.globe.terrainProvider = undefined;\n  scene._removeTerrainProviderReadyListener =\n    terrain.readyEvent.addEventListener((provider) => {\n      if (defined(scene) && defined(scene.globe)) {\n        scene.globe.terrainProvider = provider;\n      }\n\n      scene._removeTerrainProviderReadyListener();\n    });\n}\n\n/**\n * Update the terrain providing surface geometry for the globe.\n *\n * @param {Terrain} terrain The terrain provider async helper\n * @returns {Terrain} terrain The terrain provider async helper\n *\n * @example\n * // Use Cesium World Terrain\n * scene.setTerrain(Cesium.Terrain.fromWorldTerrain());\n *\n * @example\n * // Use a custom terrain provider\n * const terrain = new Cesium.Terrain(Cesium.CesiumTerrainProvider.fromUrl(\"https://myTestTerrain.com\"));\n * scene.setTerrain(terrain);\n *\n * terrain.errorEvent.addEventListener(error => {\n *   alert(`Encountered an error while creating terrain! ${error}`);\n * });\n */\nScene.prototype.setTerrain = function (terrain) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"terrain\", terrain);\n  //>>includeEnd('debug');\n\n  setTerrain(this, terrain);\n\n  return terrain;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Scene#destroy\n */\nScene.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * scene = scene && scene.destroy();\n *\n * @see Scene#isDestroyed\n */\nScene.prototype.destroy = function () {\n  this._tweens.removeAll();\n  this._computeEngine = this._computeEngine && this._computeEngine.destroy();\n  this._screenSpaceCameraController =\n    this._screenSpaceCameraController &&\n    this._screenSpaceCameraController.destroy();\n  this._deviceOrientationCameraController =\n    this._deviceOrientationCameraController &&\n    !this._deviceOrientationCameraController.isDestroyed() &&\n    this._deviceOrientationCameraController.destroy();\n  this._primitives = this._primitives && this._primitives.destroy();\n  this._groundPrimitives =\n    this._groundPrimitives && this._groundPrimitives.destroy();\n  this._globe = this._globe && this._globe.destroy();\n  this._removeTerrainProviderReadyListener =\n    this._removeTerrainProviderReadyListener &&\n    this._removeTerrainProviderReadyListener();\n  this.skyBox = this.skyBox && this.skyBox.destroy();\n  this.skyAtmosphere = this.skyAtmosphere && this.skyAtmosphere.destroy();\n  this._debugSphere = this._debugSphere && this._debugSphere.destroy();\n  this.sun = this.sun && this.sun.destroy();\n  this._sunPostProcess = this._sunPostProcess && this._sunPostProcess.destroy();\n  this._depthPlane = this._depthPlane && this._depthPlane.destroy();\n  this._transitioner = this._transitioner && this._transitioner.destroy();\n  this._debugFrustumPlanes =\n    this._debugFrustumPlanes && this._debugFrustumPlanes.destroy();\n  this._brdfLutGenerator =\n    this._brdfLutGenerator && this._brdfLutGenerator.destroy();\n  this._picking = this._picking && this._picking.destroy();\n\n  this._defaultView = this._defaultView && this._defaultView.destroy();\n  this._view = undefined;\n\n  if (this._removeCreditContainer) {\n    this._canvas.parentNode.removeChild(this._creditContainer);\n  }\n\n  this.postProcessStages =\n    this.postProcessStages && this.postProcessStages.destroy();\n\n  this._context = this._context && this._context.destroy();\n  this._frameState.creditDisplay =\n    this._frameState.creditDisplay && this._frameState.creditDisplay.destroy();\n\n  if (defined(this._performanceDisplay)) {\n    this._performanceDisplay =\n      this._performanceDisplay && this._performanceDisplay.destroy();\n    this._performanceContainer.parentNode.removeChild(\n      this._performanceContainer,\n    );\n  }\n\n  this._removeRequestListenerCallback();\n  this._removeTaskProcessorListenerCallback();\n  for (let i = 0; i < this._removeGlobeCallbacks.length; ++i) {\n    this._removeGlobeCallbacks[i]();\n  }\n  this._removeGlobeCallbacks.length = 0;\n\n  if (defined(this._removeUpdateHeightCallback)) {\n    this._removeUpdateHeightCallback();\n    this._removeUpdateHeightCallback = undefined;\n  }\n\n  return destroyObject(this);\n};\nexport default Scene;\n"],"mappings":"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A;AACA;EACE,IAAI,CAACgE,SAAS,GAAG,GAAG;;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAG,MAAM;;EAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,8BAA8B,GAAG,GAAG;;EAEzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,mBAAmB,GAAG,MAAM;;EAEjC;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,oBAAoB,GAAG,GAAG;;EAE/B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kCAAkC,GAAG,GAAG;;EAE7C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kBAAkB,GAAGlE,SAAS;;EAEnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACmE,iBAAiB,GAAG,KAAK;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,iBAAiB,GAAG,KAAK;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,wBAAwB,GAAG,KAAK;;EAErC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,qBAAqB,GAAG,CAAC;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,sBAAsB,GAAG,KAAK;EACnC,IAAI,CAACC,uBAAuB,GAAG,KAAK;EACpC,IAAI,CAACC,mBAAmB,GAAGzE,SAAS;;EAEpC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC0E,eAAe,GAAG,IAAI;;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AK,CAAC0M,SAAS,EAAE;EACvC;AACF;AACA;AACA;AACA;AACA;AACA;EACEvM,MAAM,EAAE;IACNwM,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACpL,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoJ,mBAAmB,EAAE;IACnBgC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnL,QAAQ,CAACmJ,mBAAmB;IAC1C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACED,kBAAkB,EAAE;IAClBiC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnL,QAAQ,CAACkJ,kBAAkB;IACzC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkC,uBAAuB,EAAE;IACvBD,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO5P,aAAa,CAAC6P,uBAAuB;IAC9C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,kBAAkB,EAAE;IAClBF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO5P,aAAa,CAAC8P,kBAAkB;IACzC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,qBAAqB,EAAE;IACrBH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnL,QAAQ,CAACuL,YAAY;IACnC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,qBAAqB,EAAE;IACrBL,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnL,QAAQ,CAACuL,YAAY;IACnC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,sBAAsB,EAAE;IACtBN,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnL,QAAQ,CAACuL,YAAY;IACnC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,6BAA6B,EAAE;IAC7BP,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnL,QAAQ,CAACuL,YAAY;IACnC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,gCAAgC,EAAE;IAChCR,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO7N,0BAA0B,CAACsO,WAAW,CAAC,IAAI,CAAC5L,QAAQ,CAAC;IAC9D;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,SAAS,EAAE;IACTgL,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACjL,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEwK,KAAK,EAAE;IACLS,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC9K,MAAM;IACpB,CAAC;IAEDwL,GAAG,EAAE,SAAAA,CAAUnB,KAAK,EAAE;MACpB,IAAI,CAACrK,MAAM,GAAG,IAAI,CAACA,MAAM,IAAI,IAAI,CAACA,MAAM,CAACyL,OAAO,CAAC,CAAC;MAClD,IAAI,CAACzL,MAAM,GAAGqK,KAAK;MAEnBD,oBAAoB,CAAC,IAAI,EAAEC,KAAK,CAAC;IACnC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEqB,UAAU,EAAE;IACVZ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC3K,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEwL,gBAAgB,EAAE;IAChBb,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1K,iBAAiB;IAC/B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE2I,MAAM,EAAE;IACN+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACvB,KAAK,CAACR,MAAM;IAC1B,CAAC;IACDyC,GAAG,EAAE,SAAAA,CAAUzC,MAAM,EAAE;MACrB;MACA,IAAI,CAACQ,KAAK,CAACR,MAAM,GAAGA,MAAM;IAC5B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE6C,IAAI,EAAE;IACJd,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACvB,KAAK;IACnB,CAAC;IACDiC,GAAG,EAAE,SAAAA,CAAUI,IAAI,EAAE;MACnB;MACA,IAAI,CAACrC,KAAK,GAAGqC,IAAI;IACnB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE;IACXf,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACxB,YAAY;IAC1B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEwC,OAAO,EAAE;IACPhB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACzB,QAAQ;IACtB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE0C,2BAA2B,EAAE;IAC3BjB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACzE,4BAA4B;IAC1C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEzC,aAAa,EAAE;IACbkH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnH,cAAc;IAC5B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEqI,YAAY,EAAE;IACZlB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACzL,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEtB,UAAU,EAAE;IACV+M,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACxL,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE2M,gBAAgB,EAAE;IAChBnB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACrE,iBAAiB;IAC/B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyF,MAAM,EAAE;IACNpB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACjK,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEsL,aAAa,EAAE;IACbrB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,IAAI,CAACvR,OAAO,CAAC,IAAI,CAAC8Q,KAAK,CAAC,EAAE;QACxB,OAAOpK,SAAS;MAClB;MAEA,OAAO,IAAI,CAACoK,KAAK,CAAC8B,aAAa;IACjC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,eAAe,EAAE;IACftB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,IAAI,CAACvR,OAAO,CAAC,IAAI,CAAC8Q,KAAK,CAAC,EAAE;QACxB,OAAOpK,SAAS;MAClB;MAEA,OAAO,IAAI,CAACoK,KAAK,CAAC+B,eAAe;IACnC,CAAC;IACDZ,GAAG,EAAE,SAAAA,CAAUY,eAAe,EAAE;MAC9B;MACA,IAAI,CAACzD,mCAAmC,GACtC,IAAI,CAACA,mCAAmC,IACxC,IAAI,CAACA,mCAAmC,CAAC,CAAC;MAE5C,IAAIpP,OAAO,CAAC,IAAI,CAAC8Q,KAAK,CAAC,EAAE;QACvB,IAAI,CAACA,KAAK,CAAC+B,eAAe,GAAGA,eAAe;MAC9C;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE1B,sBAAsB,EAAE;IACtBI,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,IAAI,CAACvR,OAAO,CAAC,IAAI,CAAC8Q,KAAK,CAAC,EAAE;QACxB,OAAOpK,SAAS;MAClB;MAEA,OAAO,IAAI,CAACoK,KAAK,CAACK,sBAAsB;IAC1C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE2B,SAAS,EAAE;IACTvB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC1I,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkK,UAAU,EAAE;IACVxB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACzI,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkK,WAAW,EAAE;IACXzB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACxI,YAAY;IAC1B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkK,SAAS,EAAE;IACT1B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACvI,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkK,UAAU,EAAE;IACV3B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACtI,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEkK,cAAc,EAAE;IACd5B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC3C,eAAe;IAC7B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACExJ,OAAO,EAAE;IACPmM,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnL,QAAQ;IACtB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgN,sBAAsB,EAAE;IACtB7B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACvB,KAAK,CAACoD,sBAAsB;IAC1C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEpN,WAAW,EAAE;IACXuL,GAAG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AAG,EACHC,gBAAgB,EAChB5R,KAAK,EACL;EACA,OAAO,IAAI,CAACpQ,QAAQ,CAACkiB,uBAAuB,CAC1C,IAAI,EACJH,GAAG,EACHC,gBAAgB,EAChB5R,KACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtb,KAAK,CAAC0M,SAAS,CAAC2gB,4BAA4B,GAAG,UAC7CJ,GAAG,EACHJ,KAAK,EACLK,gBAAgB,EAChB5R,KAAK,EACL;EACA,OAAO,IAAI,CAACpQ,QAAQ,CAACmiB,4BAA4B,CAC/C,IAAI,EACJJ,GAAG,EACHJ,KAAK,EACLK,gBAAgB,EAChB5R,KACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtb,KAAK,CAAC0M,SAAS,CAAC4gB,YAAY,GAAG,UAAU1sB,QAAQ,EAAEssB,gBAAgB,EAAE5R,KAAK,EAAE;EAC1E,OAAO,IAAI,CAACpQ,QAAQ,CAACoiB,YAAY,CAAC,IAAI,EAAE1sB,QAAQ,EAAEssB,gBAAgB,EAAE5R,KAAK,CAAC;AAC5E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtb,KAAK,CAAC0M,SAAS,CAAC6gB,aAAa,GAAG,UAC9BC,SAAS,EACTN,gBAAgB,EAChB5R,KAAK,EACL0L,MAAM,EACN;EACA,OAAO,IAAI,CAAC9b,QAAQ,CAACqiB,aAAa,CAChC,IAAI,EACJC,SAAS,EACTN,gBAAgB,EAChB5R,KAAK,EACL0L,MACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}