{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nconst defaultEvenColor = Color.WHITE;\nconst defaultOddColor = Color.BLACK;\nconst defaultRepeat = new Cartesian2(2.0, 2.0);\n\n/**\n * A {@link MaterialProperty} that maps to checkerboard {@link Material} uniforms.\n * @alias CheckerboardMaterialProperty\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Property|Color} [options.evenColor=Color.WHITE] A Property specifying the first {@link Color}.\n * @param {Property|Color} [options.oddColor=Color.BLACK] A Property specifying the second {@link Color}.\n * @param {Property|Cartesian2} [options.repeat=new Cartesian2(2.0, 2.0)] A {@link Cartesian2} Property specifying how many times the tiles repeat in each direction.\n */\nfunction CheckerboardMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._evenColor = undefined;\n  this._evenColorSubscription = undefined;\n  this._oddColor = undefined;\n  this._oddColorSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n  this.evenColor = options.evenColor;\n  this.oddColor = options.oddColor;\n  this.repeat = options.repeat;\n}\nObject.defineProperties(CheckerboardMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CheckerboardMaterialProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._evenColor) &&\n      //\n      Property.isConstant(this._oddColor) &&\n      //\n      Property.isConstant(this._repeat);\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof CheckerboardMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the Property specifying the first {@link Color}.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  evenColor: createPropertyDescriptor(\"evenColor\"),\n  /**\n   * Gets or sets the Property specifying the second {@link Color}.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  oddColor: createPropertyDescriptor(\"oddColor\"),\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying how many times the tiles repeat in each direction.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(2.0, 2.0)\n   */\n  repeat: createPropertyDescriptor(\"repeat\")\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nCheckerboardMaterialProperty.prototype.getType = function (time) {\n  return \"Checkerboard\";\n};\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCheckerboardMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  if (!defined(result)) {\n    result = {};\n  }\n  result.lightColor = Property.getValueOrClonedDefault(this._evenColor, time, defaultEvenColor, result.lightColor);\n  result.darkColor = Property.getValueOrClonedDefault(this._oddColor, time, defaultOddColor, result.darkColor);\n  result.repeat = Property.getValueOrDefault(this._repeat, time, defaultRepeat);\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCheckerboardMaterialProperty.prototype.equals = function (other) {\n  return this === other ||\n  //\n  other instanceof CheckerboardMaterialProperty &&\n  //\n  Property.equals(this._evenColor, other._evenColor) &&\n  //\n  Property.equals(this._oddColor, other._oddColor) &&\n  //\n  Property.equals(this._repeat, other._repeat);\n};\nexport default CheckerboardMaterialProperty;","map":{"version":3,"names":["Cartesian2","Color","defaultValue","defined","Event","JulianDate","createPropertyDescriptor","Property","defaultEvenColor","WHITE","defaultOddColor","BLACK","defaultRepeat","CheckerboardMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_evenColor","undefined","_evenColorSubscription","_oddColor","_oddColorSubscription","_repeat","_repeatSubscription","evenColor","oddColor","repeat","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","timeScratch","getValue","result","now","lightColor","getValueOrClonedDefault","darkColor","getValueOrDefault","equals","other"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/CheckerboardMaterialProperty.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultEvenColor = Color.WHITE;\nconst defaultOddColor = Color.BLACK;\nconst defaultRepeat = new Cartesian2(2.0, 2.0);\n\n/**\n * A {@link MaterialProperty} that maps to checkerboard {@link Material} uniforms.\n * @alias CheckerboardMaterialProperty\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Property|Color} [options.evenColor=Color.WHITE] A Property specifying the first {@link Color}.\n * @param {Property|Color} [options.oddColor=Color.BLACK] A Property specifying the second {@link Color}.\n * @param {Property|Cartesian2} [options.repeat=new Cartesian2(2.0, 2.0)] A {@link Cartesian2} Property specifying how many times the tiles repeat in each direction.\n */\nfunction CheckerboardMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._evenColor = undefined;\n  this._evenColorSubscription = undefined;\n  this._oddColor = undefined;\n  this._oddColorSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n\n  this.evenColor = options.evenColor;\n  this.oddColor = options.oddColor;\n  this.repeat = options.repeat;\n}\n\nObject.defineProperties(CheckerboardMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CheckerboardMaterialProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._evenColor) && //\n        Property.isConstant(this._oddColor) && //\n        Property.isConstant(this._repeat)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof CheckerboardMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying the first {@link Color}.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  evenColor: createPropertyDescriptor(\"evenColor\"),\n\n  /**\n   * Gets or sets the Property specifying the second {@link Color}.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  oddColor: createPropertyDescriptor(\"oddColor\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying how many times the tiles repeat in each direction.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(2.0, 2.0)\n   */\n  repeat: createPropertyDescriptor(\"repeat\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nCheckerboardMaterialProperty.prototype.getType = function (time) {\n  return \"Checkerboard\";\n};\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCheckerboardMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  if (!defined(result)) {\n    result = {};\n  }\n  result.lightColor = Property.getValueOrClonedDefault(\n    this._evenColor,\n    time,\n    defaultEvenColor,\n    result.lightColor,\n  );\n  result.darkColor = Property.getValueOrClonedDefault(\n    this._oddColor,\n    time,\n    defaultOddColor,\n    result.darkColor,\n  );\n  result.repeat = Property.getValueOrDefault(this._repeat, time, defaultRepeat);\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCheckerboardMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof CheckerboardMaterialProperty && //\n      Property.equals(this._evenColor, other._evenColor) && //\n      Property.equals(this._oddColor, other._oddColor) && //\n      Property.equals(this._repeat, other._repeat))\n  );\n};\nexport default CheckerboardMaterialProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}