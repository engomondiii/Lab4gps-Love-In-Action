{"ast":null,"code":"import Framebuffer from \"./Framebuffer.js\";\nimport MultisampleFramebuffer from \"./MultisampleFramebuffer.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\nimport Renderbuffer from \"./Renderbuffer.js\";\nimport RenderbufferFormat from \"./RenderbufferFormat.js\";\nimport Sampler from \"./Sampler.js\";\nimport Texture from \"./Texture.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\n\n/**\n * Creates a wrapper object around a framebuffer and its resources.\n *\n * @param {object} options Object with the following properties:\n * @param {number} [options.numSamples=1] The multisampling rate of the render targets. Requires a WebGL2 context.\n * @param {number} [options.colorAttachmentsLength=1] The number of color attachments this FramebufferManager will create.\n * @param {boolean} [options.color=true] Whether the FramebufferManager will use color attachments.\n * @param {boolean} [options.depth=false] Whether the FramebufferManager will use depth attachments.\n * @param {boolean} [options.depthStencil=false] Whether the FramebufferManager will use depth-stencil attachments.\n * @param {boolean} [options.supportsDepthTexture=false] Whether the FramebufferManager will create a depth texture when the extension is supported.\n * @param {boolean} [options.createColorAttachments=true] Whether the FramebufferManager will construct its own color attachments.\n * @param {boolean} [options.createDepthAttachments=true] Whether the FramebufferManager will construct its own depth attachments.\n * @param {PixelDatatype} [options.pixelDatatype=undefined] The default pixel datatype to use when creating color attachments.\n * @param {PixelFormat} [options.pixelFormat=undefined] The default pixel format to use when creating color attachments.\n *\n * @exception {DeveloperError} Must enable at least one type of framebuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth and depth-stencil attachment.\n *\n * @private\n * @constructor\n */\nfunction FramebufferManager(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._numSamples = defaultValue(options.numSamples, 1);\n  this._colorAttachmentsLength = defaultValue(options.colorAttachmentsLength, 1);\n  this._color = defaultValue(options.color, true);\n  this._depth = defaultValue(options.depth, false);\n  this._depthStencil = defaultValue(options.depthStencil, false);\n  this._supportsDepthTexture = defaultValue(options.supportsDepthTexture, false);\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._color && !this._depth && !this._depthStencil) {\n    throw new DeveloperError(\"Must enable at least one type of framebuffer attachment.\");\n  }\n  if (this._depth && this._depthStencil) {\n    throw new DeveloperError(\"Cannot have both a depth and depth-stencil attachment.\");\n  }\n  //>>includeEnd('debug');\n\n  this._createColorAttachments = defaultValue(options.createColorAttachments, true);\n  this._createDepthAttachments = defaultValue(options.createDepthAttachments, true);\n  this._pixelDatatype = options.pixelDatatype;\n  this._pixelFormat = options.pixelFormat;\n  this._width = undefined;\n  this._height = undefined;\n  this._framebuffer = undefined;\n  this._multisampleFramebuffer = undefined;\n  this._colorTextures = undefined;\n  if (this._color) {\n    this._colorTextures = new Array(this._colorAttachmentsLength);\n    this._colorRenderbuffers = new Array(this._colorAttachmentsLength);\n  }\n  this._colorRenderbuffer = undefined;\n  this._depthStencilRenderbuffer = undefined;\n  this._depthStencilTexture = undefined;\n  this._depthRenderbuffer = undefined;\n  this._depthTexture = undefined;\n  this._attachmentsDirty = false;\n}\nObject.defineProperties(FramebufferManager.prototype, {\n  framebuffer: {\n    get: function () {\n      if (this._numSamples > 1) {\n        return this._multisampleFramebuffer.getRenderFramebuffer();\n      }\n      return this._framebuffer;\n    }\n  },\n  numSamples: {\n    get: function () {\n      return this._numSamples;\n    }\n  },\n  status: {\n    get: function () {\n      return this.framebuffer.status;\n    }\n  }\n});\nFramebufferManager.prototype.isDirty = function (width, height, numSamples, pixelDatatype, pixelFormat) {\n  numSamples = defaultValue(numSamples, 1);\n  const dimensionChanged = this._width !== width || this._height !== height;\n  const samplesChanged = this._numSamples !== numSamples;\n  const pixelChanged = defined(pixelDatatype) && this._pixelDatatype !== pixelDatatype || defined(pixelFormat) && this._pixelFormat !== pixelFormat;\n  const framebufferDefined = numSamples === 1 ? defined(this._framebuffer) : defined(this._multisampleFramebuffer);\n  return this._attachmentsDirty || dimensionChanged || samplesChanged || pixelChanged || !framebufferDefined || this._color && !defined(this._colorTextures[0]);\n};\nFramebufferManager.prototype.update = function (context, width, height, numSamples, pixelDatatype, pixelFormat) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(width) || !defined(height)) {\n    throw new DeveloperError(\"width and height must be defined.\");\n  }\n  //>>includeEnd('debug');\n  numSamples = context.msaa ? defaultValue(numSamples, 1) : 1;\n  pixelDatatype = defaultValue(pixelDatatype, this._color ? defaultValue(this._pixelDatatype, PixelDatatype.UNSIGNED_BYTE) : undefined);\n  pixelFormat = defaultValue(pixelFormat, this._color ? defaultValue(this._pixelFormat, PixelFormat.RGBA) : undefined);\n  if (this.isDirty(width, height, numSamples, pixelDatatype, pixelFormat)) {\n    this.destroy();\n    this._width = width;\n    this._height = height;\n    this._numSamples = numSamples;\n    this._pixelDatatype = pixelDatatype;\n    this._pixelFormat = pixelFormat;\n    this._attachmentsDirty = false;\n\n    // Create color texture\n    if (this._color && this._createColorAttachments) {\n      for (let i = 0; i < this._colorAttachmentsLength; ++i) {\n        this._colorTextures[i] = new Texture({\n          context: context,\n          width: width,\n          height: height,\n          pixelFormat: pixelFormat,\n          pixelDatatype: pixelDatatype,\n          sampler: Sampler.NEAREST\n        });\n        if (this._numSamples > 1) {\n          const format = RenderbufferFormat.getColorFormat(pixelDatatype);\n          this._colorRenderbuffers[i] = new Renderbuffer({\n            context: context,\n            width: width,\n            height: height,\n            format: format,\n            numSamples: this._numSamples\n          });\n        }\n      }\n    }\n\n    // Create depth stencil texture or renderbuffer\n    if (this._depthStencil && this._createDepthAttachments) {\n      if (this._supportsDepthTexture && context.depthTexture) {\n        this._depthStencilTexture = new Texture({\n          context: context,\n          width: width,\n          height: height,\n          pixelFormat: PixelFormat.DEPTH_STENCIL,\n          pixelDatatype: PixelDatatype.UNSIGNED_INT_24_8,\n          sampler: Sampler.NEAREST\n        });\n        if (this._numSamples > 1) {\n          this._depthStencilRenderbuffer = new Renderbuffer({\n            context: context,\n            width: width,\n            height: height,\n            format: RenderbufferFormat.DEPTH24_STENCIL8,\n            numSamples: this._numSamples\n          });\n        }\n      } else {\n        this._depthStencilRenderbuffer = new Renderbuffer({\n          context: context,\n          width: width,\n          height: height,\n          format: RenderbufferFormat.DEPTH_STENCIL\n        });\n      }\n    }\n\n    // Create depth texture\n    if (this._depth && this._createDepthAttachments) {\n      if (this._supportsDepthTexture && context.depthTexture) {\n        this._depthTexture = new Texture({\n          context: context,\n          width: width,\n          height: height,\n          pixelFormat: PixelFormat.DEPTH_COMPONENT,\n          pixelDatatype: PixelDatatype.UNSIGNED_INT,\n          sampler: Sampler.NEAREST\n        });\n      } else {\n        this._depthRenderbuffer = new Renderbuffer({\n          context: context,\n          width: width,\n          height: height,\n          format: RenderbufferFormat.DEPTH_COMPONENT16\n        });\n      }\n    }\n    if (this._numSamples > 1) {\n      this._multisampleFramebuffer = new MultisampleFramebuffer({\n        context: context,\n        width: this._width,\n        height: this._height,\n        colorTextures: this._colorTextures,\n        colorRenderbuffers: this._colorRenderbuffers,\n        depthStencilTexture: this._depthStencilTexture,\n        depthStencilRenderbuffer: this._depthStencilRenderbuffer,\n        destroyAttachments: false\n      });\n    } else {\n      this._framebuffer = new Framebuffer({\n        context: context,\n        colorTextures: this._colorTextures,\n        depthTexture: this._depthTexture,\n        depthRenderbuffer: this._depthRenderbuffer,\n        depthStencilTexture: this._depthStencilTexture,\n        depthStencilRenderbuffer: this._depthStencilRenderbuffer,\n        destroyAttachments: false\n      });\n    }\n  }\n};\nFramebufferManager.prototype.getColorTexture = function (index) {\n  index = defaultValue(index, 0);\n  //>>includeStart('debug', pragmas.debug);\n  if (index >= this._colorAttachmentsLength) {\n    throw new DeveloperError(\"index must be smaller than total number of color attachments.\");\n  }\n  //>>includeEnd('debug');\n  return this._colorTextures[index];\n};\nFramebufferManager.prototype.setColorTexture = function (texture, index) {\n  index = defaultValue(index, 0);\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createColorAttachments) {\n    throw new DeveloperError(\"createColorAttachments must be false if setColorTexture is called.\");\n  }\n  if (index >= this._colorAttachmentsLength) {\n    throw new DeveloperError(\"index must be smaller than total number of color attachments.\");\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = texture !== this._colorTextures[index];\n  this._colorTextures[index] = texture;\n};\nFramebufferManager.prototype.getColorRenderbuffer = function (index) {\n  index = defaultValue(index, 0);\n  //>>includeStart('debug', pragmas.debug);\n  if (index >= this._colorAttachmentsLength) {\n    throw new DeveloperError(\"index must be smaller than total number of color attachments.\");\n  }\n  //>>includeEnd('debug');\n  return this._colorRenderbuffers[index];\n};\nFramebufferManager.prototype.setColorRenderbuffer = function (renderbuffer, index) {\n  index = defaultValue(index, 0);\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createColorAttachments) {\n    throw new DeveloperError(\"createColorAttachments must be false if setColorRenderbuffer is called.\");\n  }\n  if (index >= this._colorAttachmentsLength) {\n    throw new DeveloperError(\"index must be smaller than total number of color attachments.\");\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = renderbuffer !== this._colorRenderbuffers[index];\n  this._colorRenderbuffers[index] = renderbuffer;\n};\nFramebufferManager.prototype.getDepthRenderbuffer = function () {\n  return this._depthRenderbuffer;\n};\nFramebufferManager.prototype.setDepthRenderbuffer = function (renderbuffer) {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createDepthAttachments) {\n    throw new DeveloperError(\"createDepthAttachments must be false if setDepthRenderbuffer is called.\");\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = renderbuffer !== this._depthRenderbuffer;\n  this._depthRenderbuffer = renderbuffer;\n};\nFramebufferManager.prototype.getDepthTexture = function () {\n  return this._depthTexture;\n};\nFramebufferManager.prototype.setDepthTexture = function (texture) {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createDepthAttachments) {\n    throw new DeveloperError(\"createDepthAttachments must be false if setDepthTexture is called.\");\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = texture !== this._depthTexture;\n  this._depthTexture = texture;\n};\nFramebufferManager.prototype.getDepthStencilRenderbuffer = function () {\n  return this._depthStencilRenderbuffer;\n};\nFramebufferManager.prototype.setDepthStencilRenderbuffer = function (renderbuffer) {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createDepthAttachments) {\n    throw new DeveloperError(\"createDepthAttachments must be false if setDepthStencilRenderbuffer is called.\");\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = renderbuffer !== this._depthStencilRenderbuffer;\n  this._depthStencilRenderbuffer = renderbuffer;\n};\nFramebufferManager.prototype.getDepthStencilTexture = function () {\n  return this._depthStencilTexture;\n};\nFramebufferManager.prototype.setDepthStencilTexture = function (texture) {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createDepthAttachments) {\n    throw new DeveloperError(\"createDepthAttachments must be false if setDepthStencilTexture is called.\");\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = texture !== this._depthStencilTexture;\n  this._depthStencilTexture = texture;\n};\n\n/**\n * If using MSAA, resolve the stencil.\n *\n * @param {Context} context\n * @param {boolean} blitStencil\n *\n * @private\n */\nFramebufferManager.prototype.prepareTextures = function (context, blitStencil) {\n  if (this._numSamples > 1) {\n    this._multisampleFramebuffer.blitFramebuffers(context, blitStencil);\n  }\n};\nFramebufferManager.prototype.clear = function (context, clearCommand, passState) {\n  const framebuffer = clearCommand.framebuffer;\n  clearCommand.framebuffer = this.framebuffer;\n  clearCommand.execute(context, passState);\n  clearCommand.framebuffer = framebuffer;\n};\nFramebufferManager.prototype.destroyFramebuffer = function () {\n  this._framebuffer = this._framebuffer && this._framebuffer.destroy();\n  this._multisampleFramebuffer = this._multisampleFramebuffer && this._multisampleFramebuffer.destroy();\n};\nFramebufferManager.prototype.destroy = function () {\n  if (this._color) {\n    const colorTextures = this._colorTextures;\n    const colorRenderbuffers = this._colorRenderbuffers;\n    for (let i = 0; i < colorTextures.length; ++i) {\n      const texture = colorTextures[i];\n      if (this._createColorAttachments) {\n        if (defined(texture) && !texture.isDestroyed()) {\n          texture.destroy();\n        }\n      }\n      if (defined(texture) && texture.isDestroyed()) {\n        colorTextures[i] = undefined;\n      }\n      const renderbuffer = colorRenderbuffers[i];\n      if (this._createColorAttachments) {\n        if (defined(renderbuffer) && !renderbuffer.isDestroyed()) {\n          renderbuffer.destroy();\n        }\n      }\n      if (defined(renderbuffer) && renderbuffer.isDestroyed()) {\n        colorRenderbuffers[i] = undefined;\n      }\n    }\n  }\n  if (this._depthStencil) {\n    if (this._createDepthAttachments) {\n      this._depthStencilTexture = this._depthStencilTexture && this._depthStencilTexture.destroy();\n      this._depthStencilRenderbuffer = this._depthStencilRenderbuffer && this._depthStencilRenderbuffer.destroy();\n    }\n    if (defined(this._depthStencilTexture) && this._depthStencilTexture.isDestroyed()) {\n      this._depthStencilTexture = undefined;\n    }\n    if (defined(this._depthStencilRenderbuffer) && this._depthStencilRenderbuffer.isDestroyed()) {\n      this._depthStencilRenderbuffer = undefined;\n    }\n  }\n  if (this._depth) {\n    if (this._createDepthAttachments) {\n      this._depthTexture = this._depthTexture && this._depthTexture.destroy();\n      this._depthRenderbuffer = this._depthRenderbuffer && this._depthRenderbuffer.destroy();\n    }\n    if (defined(this._depthTexture) && this._depthTexture.isDestroyed()) {\n      this._depthTexture = undefined;\n    }\n    if (defined(this._depthRenderbuffer) && this._depthRenderbuffer.isDestroyed()) {\n      this._depthRenderbuffer = undefined;\n    }\n  }\n  this.destroyFramebuffer();\n};\nexport default FramebufferManager;","map":{"version":3,"names":["Framebuffer","MultisampleFramebuffer","PixelDatatype","Renderbuffer","RenderbufferFormat","Sampler","Texture","defaultValue","defined","DeveloperError","PixelFormat","FramebufferManager","options","EMPTY_OBJECT","_numSamples","numSamples","_colorAttachmentsLength","colorAttachmentsLength","_color","color","_depth","depth","_depthStencil","depthStencil","_supportsDepthTexture","supportsDepthTexture","_createColorAttachments","createColorAttachments","_createDepthAttachments","createDepthAttachments","_pixelDatatype","pixelDatatype","_pixelFormat","pixelFormat","_width","undefined","_height","_framebuffer","_multisampleFramebuffer","_colorTextures","Array","_colorRenderbuffers","_colorRenderbuffer","_depthStencilRenderbuffer","_depthStencilTexture","_depthRenderbuffer","_depthTexture","_attachmentsDirty","Object","defineProperties","prototype","framebuffer","get","getRenderFramebuffer","status","isDirty","width","height","dimensionChanged","samplesChanged","pixelChanged","framebufferDefined","update","context","msaa","UNSIGNED_BYTE","RGBA","destroy","i","sampler","NEAREST","format","getColorFormat","depthTexture","DEPTH_STENCIL","UNSIGNED_INT_24_8","DEPTH24_STENCIL8","DEPTH_COMPONENT","UNSIGNED_INT","DEPTH_COMPONENT16","colorTextures","colorRenderbuffers","depthStencilTexture","depthStencilRenderbuffer","destroyAttachments","depthRenderbuffer","getColorTexture","index","setColorTexture","texture","getColorRenderbuffer","setColorRenderbuffer","renderbuffer","getDepthRenderbuffer","setDepthRenderbuffer","getDepthTexture","setDepthTexture","getDepthStencilRenderbuffer","setDepthStencilRenderbuffer","getDepthStencilTexture","setDepthStencilTexture","prepareTextures","blitStencil","blitFramebuffers","clear","clearCommand","passState","execute","destroyFramebuffer","length","isDestroyed"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/FramebufferManager.js"],"sourcesContent":["import Framebuffer from \"./Framebuffer.js\";\nimport MultisampleFramebuffer from \"./MultisampleFramebuffer.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\nimport Renderbuffer from \"./Renderbuffer.js\";\nimport RenderbufferFormat from \"./RenderbufferFormat.js\";\nimport Sampler from \"./Sampler.js\";\nimport Texture from \"./Texture.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\n\n/**\n * Creates a wrapper object around a framebuffer and its resources.\n *\n * @param {object} options Object with the following properties:\n * @param {number} [options.numSamples=1] The multisampling rate of the render targets. Requires a WebGL2 context.\n * @param {number} [options.colorAttachmentsLength=1] The number of color attachments this FramebufferManager will create.\n * @param {boolean} [options.color=true] Whether the FramebufferManager will use color attachments.\n * @param {boolean} [options.depth=false] Whether the FramebufferManager will use depth attachments.\n * @param {boolean} [options.depthStencil=false] Whether the FramebufferManager will use depth-stencil attachments.\n * @param {boolean} [options.supportsDepthTexture=false] Whether the FramebufferManager will create a depth texture when the extension is supported.\n * @param {boolean} [options.createColorAttachments=true] Whether the FramebufferManager will construct its own color attachments.\n * @param {boolean} [options.createDepthAttachments=true] Whether the FramebufferManager will construct its own depth attachments.\n * @param {PixelDatatype} [options.pixelDatatype=undefined] The default pixel datatype to use when creating color attachments.\n * @param {PixelFormat} [options.pixelFormat=undefined] The default pixel format to use when creating color attachments.\n *\n * @exception {DeveloperError} Must enable at least one type of framebuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth and depth-stencil attachment.\n *\n * @private\n * @constructor\n */\nfunction FramebufferManager(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._numSamples = defaultValue(options.numSamples, 1);\n  this._colorAttachmentsLength = defaultValue(\n    options.colorAttachmentsLength,\n    1,\n  );\n\n  this._color = defaultValue(options.color, true);\n  this._depth = defaultValue(options.depth, false);\n  this._depthStencil = defaultValue(options.depthStencil, false);\n  this._supportsDepthTexture = defaultValue(\n    options.supportsDepthTexture,\n    false,\n  );\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._color && !this._depth && !this._depthStencil) {\n    throw new DeveloperError(\n      \"Must enable at least one type of framebuffer attachment.\",\n    );\n  }\n  if (this._depth && this._depthStencil) {\n    throw new DeveloperError(\n      \"Cannot have both a depth and depth-stencil attachment.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._createColorAttachments = defaultValue(\n    options.createColorAttachments,\n    true,\n  );\n  this._createDepthAttachments = defaultValue(\n    options.createDepthAttachments,\n    true,\n  );\n\n  this._pixelDatatype = options.pixelDatatype;\n  this._pixelFormat = options.pixelFormat;\n\n  this._width = undefined;\n  this._height = undefined;\n\n  this._framebuffer = undefined;\n  this._multisampleFramebuffer = undefined;\n  this._colorTextures = undefined;\n  if (this._color) {\n    this._colorTextures = new Array(this._colorAttachmentsLength);\n    this._colorRenderbuffers = new Array(this._colorAttachmentsLength);\n  }\n  this._colorRenderbuffer = undefined;\n  this._depthStencilRenderbuffer = undefined;\n  this._depthStencilTexture = undefined;\n  this._depthRenderbuffer = undefined;\n  this._depthTexture = undefined;\n\n  this._attachmentsDirty = false;\n}\n\nObject.defineProperties(FramebufferManager.prototype, {\n  framebuffer: {\n    get: function () {\n      if (this._numSamples > 1) {\n        return this._multisampleFramebuffer.getRenderFramebuffer();\n      }\n      return this._framebuffer;\n    },\n  },\n  numSamples: {\n    get: function () {\n      return this._numSamples;\n    },\n  },\n  status: {\n    get: function () {\n      return this.framebuffer.status;\n    },\n  },\n});\n\nFramebufferManager.prototype.isDirty = function (\n  width,\n  height,\n  numSamples,\n  pixelDatatype,\n  pixelFormat,\n) {\n  numSamples = defaultValue(numSamples, 1);\n  const dimensionChanged = this._width !== width || this._height !== height;\n  const samplesChanged = this._numSamples !== numSamples;\n  const pixelChanged =\n    (defined(pixelDatatype) && this._pixelDatatype !== pixelDatatype) ||\n    (defined(pixelFormat) && this._pixelFormat !== pixelFormat);\n  const framebufferDefined =\n    numSamples === 1\n      ? defined(this._framebuffer)\n      : defined(this._multisampleFramebuffer);\n\n  return (\n    this._attachmentsDirty ||\n    dimensionChanged ||\n    samplesChanged ||\n    pixelChanged ||\n    !framebufferDefined ||\n    (this._color && !defined(this._colorTextures[0]))\n  );\n};\n\nFramebufferManager.prototype.update = function (\n  context,\n  width,\n  height,\n  numSamples,\n  pixelDatatype,\n  pixelFormat,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(width) || !defined(height)) {\n    throw new DeveloperError(\"width and height must be defined.\");\n  }\n  //>>includeEnd('debug');\n  numSamples = context.msaa ? defaultValue(numSamples, 1) : 1;\n  pixelDatatype = defaultValue(\n    pixelDatatype,\n    this._color\n      ? defaultValue(this._pixelDatatype, PixelDatatype.UNSIGNED_BYTE)\n      : undefined,\n  );\n  pixelFormat = defaultValue(\n    pixelFormat,\n    this._color ? defaultValue(this._pixelFormat, PixelFormat.RGBA) : undefined,\n  );\n\n  if (this.isDirty(width, height, numSamples, pixelDatatype, pixelFormat)) {\n    this.destroy();\n    this._width = width;\n    this._height = height;\n    this._numSamples = numSamples;\n    this._pixelDatatype = pixelDatatype;\n    this._pixelFormat = pixelFormat;\n    this._attachmentsDirty = false;\n\n    // Create color texture\n    if (this._color && this._createColorAttachments) {\n      for (let i = 0; i < this._colorAttachmentsLength; ++i) {\n        this._colorTextures[i] = new Texture({\n          context: context,\n          width: width,\n          height: height,\n          pixelFormat: pixelFormat,\n          pixelDatatype: pixelDatatype,\n          sampler: Sampler.NEAREST,\n        });\n        if (this._numSamples > 1) {\n          const format = RenderbufferFormat.getColorFormat(pixelDatatype);\n          this._colorRenderbuffers[i] = new Renderbuffer({\n            context: context,\n            width: width,\n            height: height,\n            format: format,\n            numSamples: this._numSamples,\n          });\n        }\n      }\n    }\n\n    // Create depth stencil texture or renderbuffer\n    if (this._depthStencil && this._createDepthAttachments) {\n      if (this._supportsDepthTexture && context.depthTexture) {\n        this._depthStencilTexture = new Texture({\n          context: context,\n          width: width,\n          height: height,\n          pixelFormat: PixelFormat.DEPTH_STENCIL,\n          pixelDatatype: PixelDatatype.UNSIGNED_INT_24_8,\n          sampler: Sampler.NEAREST,\n        });\n        if (this._numSamples > 1) {\n          this._depthStencilRenderbuffer = new Renderbuffer({\n            context: context,\n            width: width,\n            height: height,\n            format: RenderbufferFormat.DEPTH24_STENCIL8,\n            numSamples: this._numSamples,\n          });\n        }\n      } else {\n        this._depthStencilRenderbuffer = new Renderbuffer({\n          context: context,\n          width: width,\n          height: height,\n          format: RenderbufferFormat.DEPTH_STENCIL,\n        });\n      }\n    }\n\n    // Create depth texture\n    if (this._depth && this._createDepthAttachments) {\n      if (this._supportsDepthTexture && context.depthTexture) {\n        this._depthTexture = new Texture({\n          context: context,\n          width: width,\n          height: height,\n          pixelFormat: PixelFormat.DEPTH_COMPONENT,\n          pixelDatatype: PixelDatatype.UNSIGNED_INT,\n          sampler: Sampler.NEAREST,\n        });\n      } else {\n        this._depthRenderbuffer = new Renderbuffer({\n          context: context,\n          width: width,\n          height: height,\n          format: RenderbufferFormat.DEPTH_COMPONENT16,\n        });\n      }\n    }\n\n    if (this._numSamples > 1) {\n      this._multisampleFramebuffer = new MultisampleFramebuffer({\n        context: context,\n        width: this._width,\n        height: this._height,\n        colorTextures: this._colorTextures,\n        colorRenderbuffers: this._colorRenderbuffers,\n        depthStencilTexture: this._depthStencilTexture,\n        depthStencilRenderbuffer: this._depthStencilRenderbuffer,\n        destroyAttachments: false,\n      });\n    } else {\n      this._framebuffer = new Framebuffer({\n        context: context,\n        colorTextures: this._colorTextures,\n        depthTexture: this._depthTexture,\n        depthRenderbuffer: this._depthRenderbuffer,\n        depthStencilTexture: this._depthStencilTexture,\n        depthStencilRenderbuffer: this._depthStencilRenderbuffer,\n        destroyAttachments: false,\n      });\n    }\n  }\n};\n\nFramebufferManager.prototype.getColorTexture = function (index) {\n  index = defaultValue(index, 0);\n  //>>includeStart('debug', pragmas.debug);\n  if (index >= this._colorAttachmentsLength) {\n    throw new DeveloperError(\n      \"index must be smaller than total number of color attachments.\",\n    );\n  }\n  //>>includeEnd('debug');\n  return this._colorTextures[index];\n};\n\nFramebufferManager.prototype.setColorTexture = function (texture, index) {\n  index = defaultValue(index, 0);\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createColorAttachments) {\n    throw new DeveloperError(\n      \"createColorAttachments must be false if setColorTexture is called.\",\n    );\n  }\n  if (index >= this._colorAttachmentsLength) {\n    throw new DeveloperError(\n      \"index must be smaller than total number of color attachments.\",\n    );\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = texture !== this._colorTextures[index];\n  this._colorTextures[index] = texture;\n};\n\nFramebufferManager.prototype.getColorRenderbuffer = function (index) {\n  index = defaultValue(index, 0);\n  //>>includeStart('debug', pragmas.debug);\n  if (index >= this._colorAttachmentsLength) {\n    throw new DeveloperError(\n      \"index must be smaller than total number of color attachments.\",\n    );\n  }\n  //>>includeEnd('debug');\n  return this._colorRenderbuffers[index];\n};\n\nFramebufferManager.prototype.setColorRenderbuffer = function (\n  renderbuffer,\n  index,\n) {\n  index = defaultValue(index, 0);\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createColorAttachments) {\n    throw new DeveloperError(\n      \"createColorAttachments must be false if setColorRenderbuffer is called.\",\n    );\n  }\n  if (index >= this._colorAttachmentsLength) {\n    throw new DeveloperError(\n      \"index must be smaller than total number of color attachments.\",\n    );\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = renderbuffer !== this._colorRenderbuffers[index];\n  this._colorRenderbuffers[index] = renderbuffer;\n};\n\nFramebufferManager.prototype.getDepthRenderbuffer = function () {\n  return this._depthRenderbuffer;\n};\n\nFramebufferManager.prototype.setDepthRenderbuffer = function (renderbuffer) {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createDepthAttachments) {\n    throw new DeveloperError(\n      \"createDepthAttachments must be false if setDepthRenderbuffer is called.\",\n    );\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = renderbuffer !== this._depthRenderbuffer;\n  this._depthRenderbuffer = renderbuffer;\n};\n\nFramebufferManager.prototype.getDepthTexture = function () {\n  return this._depthTexture;\n};\n\nFramebufferManager.prototype.setDepthTexture = function (texture) {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createDepthAttachments) {\n    throw new DeveloperError(\n      \"createDepthAttachments must be false if setDepthTexture is called.\",\n    );\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = texture !== this._depthTexture;\n  this._depthTexture = texture;\n};\n\nFramebufferManager.prototype.getDepthStencilRenderbuffer = function () {\n  return this._depthStencilRenderbuffer;\n};\n\nFramebufferManager.prototype.setDepthStencilRenderbuffer = function (\n  renderbuffer,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createDepthAttachments) {\n    throw new DeveloperError(\n      \"createDepthAttachments must be false if setDepthStencilRenderbuffer is called.\",\n    );\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = renderbuffer !== this._depthStencilRenderbuffer;\n  this._depthStencilRenderbuffer = renderbuffer;\n};\n\nFramebufferManager.prototype.getDepthStencilTexture = function () {\n  return this._depthStencilTexture;\n};\n\nFramebufferManager.prototype.setDepthStencilTexture = function (texture) {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._createDepthAttachments) {\n    throw new DeveloperError(\n      \"createDepthAttachments must be false if setDepthStencilTexture is called.\",\n    );\n  }\n  //>>includeEnd('debug');\n  this._attachmentsDirty = texture !== this._depthStencilTexture;\n  this._depthStencilTexture = texture;\n};\n\n/**\n * If using MSAA, resolve the stencil.\n *\n * @param {Context} context\n * @param {boolean} blitStencil\n *\n * @private\n */\nFramebufferManager.prototype.prepareTextures = function (context, blitStencil) {\n  if (this._numSamples > 1) {\n    this._multisampleFramebuffer.blitFramebuffers(context, blitStencil);\n  }\n};\n\nFramebufferManager.prototype.clear = function (\n  context,\n  clearCommand,\n  passState,\n) {\n  const framebuffer = clearCommand.framebuffer;\n  clearCommand.framebuffer = this.framebuffer;\n  clearCommand.execute(context, passState);\n  clearCommand.framebuffer = framebuffer;\n};\n\nFramebufferManager.prototype.destroyFramebuffer = function () {\n  this._framebuffer = this._framebuffer && this._framebuffer.destroy();\n  this._multisampleFramebuffer =\n    this._multisampleFramebuffer && this._multisampleFramebuffer.destroy();\n};\n\nFramebufferManager.prototype.destroy = function () {\n  if (this._color) {\n    const colorTextures = this._colorTextures;\n    const colorRenderbuffers = this._colorRenderbuffers;\n    for (let i = 0; i < colorTextures.length; ++i) {\n      const texture = colorTextures[i];\n      if (this._createColorAttachments) {\n        if (defined(texture) && !texture.isDestroyed()) {\n          texture.destroy();\n        }\n      }\n      if (defined(texture) && texture.isDestroyed()) {\n        colorTextures[i] = undefined;\n      }\n      const renderbuffer = colorRenderbuffers[i];\n      if (this._createColorAttachments) {\n        if (defined(renderbuffer) && !renderbuffer.isDestroyed()) {\n          renderbuffer.destroy();\n        }\n      }\n      if (defined(renderbuffer) && renderbuffer.isDestroyed()) {\n        colorRenderbuffers[i] = undefined;\n      }\n    }\n  }\n\n  if (this._depthStencil) {\n    if (this._createDepthAttachments) {\n      this._depthStencilTexture =\n        this._depthStencilTexture && this._depthStencilTexture.destroy();\n      this._depthStencilRenderbuffer =\n        this._depthStencilRenderbuffer &&\n        this._depthStencilRenderbuffer.destroy();\n    }\n    if (\n      defined(this._depthStencilTexture) &&\n      this._depthStencilTexture.isDestroyed()\n    ) {\n      this._depthStencilTexture = undefined;\n    }\n    if (\n      defined(this._depthStencilRenderbuffer) &&\n      this._depthStencilRenderbuffer.isDestroyed()\n    ) {\n      this._depthStencilRenderbuffer = undefined;\n    }\n  }\n\n  if (this._depth) {\n    if (this._createDepthAttachments) {\n      this._depthTexture = this._depthTexture && this._depthTexture.destroy();\n      this._depthRenderbuffer =\n        this._depthRenderbuffer && this._depthRenderbuffer.destroy();\n    }\n    if (defined(this._depthTexture) && this._depthTexture.isDestroyed()) {\n      this._depthTexture = undefined;\n    }\n    if (\n      defined(this._depthRenderbuffer) &&\n      this._depthRenderbuffer.isDestroyed()\n    ) {\n      this._depthRenderbuffer = undefined;\n    }\n  }\n\n  this.destroyFramebuffer();\n};\nexport default FramebufferManager;\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,sBAAsB,MAAM,6BAA6B;AAChE,OAAOC,aAAa,MAAM,oBAAoB;AAC9C,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,kBAAkB,MAAM,yBAAyB;AACxD,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,WAAW,MAAM,wBAAwB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,OAAO,EAAE;EACnCA,OAAO,GAAGL,YAAY,CAACK,OAAO,EAAEL,YAAY,CAACM,YAAY,CAAC;EAC1D,IAAI,CAACC,WAAW,GAAGP,YAAY,CAACK,OAAO,CAACG,UAAU,EAAE,CAAC,CAAC;EACtD,IAAI,CAACC,uBAAuB,GAAGT,YAAY,CACzCK,OAAO,CAACK,sBAAsB,EAC9B,CACF,CAAC;EAED,IAAI,CAACC,MAAM,GAAGX,YAAY,CAACK,OAAO,CAACO,KAAK,EAAE,IAAI,CAAC;EAC/C,IAAI,CAACC,MAAM,GAAGb,YAAY,CAACK,OAAO,CAACS,KAAK,EAAE,KAAK,CAAC;EAChD,IAAI,CAACC,aAAa,GAAGf,YAAY,CAACK,OAAO,CAACW,YAAY,EAAE,KAAK,CAAC;EAC9D,IAAI,CAACC,qBAAqB,GAAGjB,YAAY,CACvCK,OAAO,CAACa,oBAAoB,EAC5B,KACF,CAAC;EACD;EACA,IAAI,CAAC,IAAI,CAACP,MAAM,IAAI,CAAC,IAAI,CAACE,MAAM,IAAI,CAAC,IAAI,CAACE,aAAa,EAAE;IACvD,MAAM,IAAIb,cAAc,CACtB,0DACF,CAAC;EACH;EACA,IAAI,IAAI,CAACW,MAAM,IAAI,IAAI,CAACE,aAAa,EAAE;IACrC,MAAM,IAAIb,cAAc,CACtB,wDACF,CAAC;EACH;EACA;;EAEA,IAAI,CAACiB,uBAAuB,GAAGnB,YAAY,CACzCK,OAAO,CAACe,sBAAsB,EAC9B,IACF,CAAC;EACD,IAAI,CAACC,uBAAuB,GAAGrB,YAAY,CACzCK,OAAO,CAACiB,sBAAsB,EAC9B,IACF,CAAC;EAED,IAAI,CAACC,cAAc,GAAGlB,OAAO,CAACmB,aAAa;EAC3C,IAAI,CAACC,YAAY,GAAGpB,OAAO,CAACqB,WAAW;EAEvC,IAAI,CAACC,MAAM,GAAGC,SAAS;EACvB,IAAI,CAACC,OAAO,GAAGD,SAAS;EAExB,IAAI,CAACE,YAAY,GAAGF,SAAS;EAC7B,IAAI,CAACG,uBAAuB,GAAGH,SAAS;EACxC,IAAI,CAACI,cAAc,GAAGJ,SAAS;EAC/B,IAAI,IAAI,CAACjB,MAAM,EAAE;IACf,IAAI,CAACqB,cAAc,GAAG,IAAIC,KAAK,CAAC,IAAI,CAACxB,uBAAuB,CAAC;IAC7D,IAAI,CAACyB,mBAAmB,GAAG,IAAID,KAAK,CAAC,IAAI,CAACxB,uBAAuB,CAAC;EACpE;EACA,IAAI,CAAC0B,kBAAkB,GAAGP,SAAS;EACnC,IAAI,CAACQ,yBAAyB,GAAGR,SAAS;EAC1C,IAAI,CAACS,oBAAoB,GAAGT,SAAS;EACrC,IAAI,CAACU,kBAAkB,GAAGV,SAAS;EACnC,IAAI,CAACW,aAAa,GAAGX,SAAS;EAE9B,IAAI,CAACY,iBAAiB,GAAG,KAAK;AAChC;AAEAC,MAAM,CAACC,gBAAgB,CAACtC,kBAAkB,CAACuC,SAAS,EAAE;EACpDC,WAAW,EAAE;IACXC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,IAAI,IAAI,CAACtC,WAAW,GAAG,CAAC,EAAE;QACxB,OAAO,IAAI,CAACwB,uBAAuB,CAACe,oBAAoB,CAAC,CAAC;MAC5D;MACA,OAAO,IAAI,CAAChB,YAAY;IAC1B;EACF,CAAC;EACDtB,UAAU,EAAE;IACVqC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACtC,WAAW;IACzB;EACF,CAAC;EACDwC,MAAM,EAAE;IACNF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACD,WAAW,CAACG,MAAM;IAChC;EACF;AACF,CAAC,CAAC;AAEF3C,kBAAkB,CAACuC,SAAS,CAACK,OAAO,GAAG,UACrCC,KAAK,EACLC,MAAM,EACN1C,UAAU,EACVgB,aAAa,EACbE,WAAW,EACX;EACAlB,UAAU,GAAGR,YAAY,CAACQ,UAAU,EAAE,CAAC,CAAC;EACxC,MAAM2C,gBAAgB,GAAG,IAAI,CAACxB,MAAM,KAAKsB,KAAK,IAAI,IAAI,CAACpB,OAAO,KAAKqB,MAAM;EACzE,MAAME,cAAc,GAAG,IAAI,CAAC7C,WAAW,KAAKC,UAAU;EACtD,MAAM6C,YAAY,GACfpD,OAAO,CAACuB,aAAa,CAAC,IAAI,IAAI,CAACD,cAAc,KAAKC,aAAa,IAC/DvB,OAAO,CAACyB,WAAW,CAAC,IAAI,IAAI,CAACD,YAAY,KAAKC,WAAY;EAC7D,MAAM4B,kBAAkB,GACtB9C,UAAU,KAAK,CAAC,GACZP,OAAO,CAAC,IAAI,CAAC6B,YAAY,CAAC,GAC1B7B,OAAO,CAAC,IAAI,CAAC8B,uBAAuB,CAAC;EAE3C,OACE,IAAI,CAACS,iBAAiB,IACtBW,gBAAgB,IAChBC,cAAc,IACdC,YAAY,IACZ,CAACC,kBAAkB,IAClB,IAAI,CAAC3C,MAAM,IAAI,CAACV,OAAO,CAAC,IAAI,CAAC+B,cAAc,CAAC,CAAC,CAAC,CAAE;AAErD,CAAC;AAED5B,kBAAkB,CAACuC,SAAS,CAACY,MAAM,GAAG,UACpCC,OAAO,EACPP,KAAK,EACLC,MAAM,EACN1C,UAAU,EACVgB,aAAa,EACbE,WAAW,EACX;EACA;EACA,IAAI,CAACzB,OAAO,CAACgD,KAAK,CAAC,IAAI,CAAChD,OAAO,CAACiD,MAAM,CAAC,EAAE;IACvC,MAAM,IAAIhD,cAAc,CAAC,mCAAmC,CAAC;EAC/D;EACA;EACAM,UAAU,GAAGgD,OAAO,CAACC,IAAI,GAAGzD,YAAY,CAACQ,UAAU,EAAE,CAAC,CAAC,GAAG,CAAC;EAC3DgB,aAAa,GAAGxB,YAAY,CAC1BwB,aAAa,EACb,IAAI,CAACb,MAAM,GACPX,YAAY,CAAC,IAAI,CAACuB,cAAc,EAAE5B,aAAa,CAAC+D,aAAa,CAAC,GAC9D9B,SACN,CAAC;EACDF,WAAW,GAAG1B,YAAY,CACxB0B,WAAW,EACX,IAAI,CAACf,MAAM,GAAGX,YAAY,CAAC,IAAI,CAACyB,YAAY,EAAEtB,WAAW,CAACwD,IAAI,CAAC,GAAG/B,SACpE,CAAC;EAED,IAAI,IAAI,CAACoB,OAAO,CAACC,KAAK,EAAEC,MAAM,EAAE1C,UAAU,EAAEgB,aAAa,EAAEE,WAAW,CAAC,EAAE;IACvE,IAAI,CAACkC,OAAO,CAAC,CAAC;IACd,IAAI,CAACjC,MAAM,GAAGsB,KAAK;IACnB,IAAI,CAACpB,OAAO,GAAGqB,MAAM;IACrB,IAAI,CAAC3C,WAAW,GAAGC,UAAU;IAC7B,IAAI,CAACe,cAAc,GAAGC,aAAa;IACnC,IAAI,CAACC,YAAY,GAAGC,WAAW;IAC/B,IAAI,CAACc,iBAAiB,GAAG,KAAK;;IAE9B;IACA,IAAI,IAAI,CAAC7B,MAAM,IAAI,IAAI,CAACQ,uBAAuB,EAAE;MAC/C,KAAK,IAAI0C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACpD,uBAAuB,EAAE,EAAEoD,CAAC,EAAE;QACrD,IAAI,CAAC7B,cAAc,CAAC6B,CAAC,CAAC,GAAG,IAAI9D,OAAO,CAAC;UACnCyD,OAAO,EAAEA,OAAO;UAChBP,KAAK,EAAEA,KAAK;UACZC,MAAM,EAAEA,MAAM;UACdxB,WAAW,EAAEA,WAAW;UACxBF,aAAa,EAAEA,aAAa;UAC5BsC,OAAO,EAAEhE,OAAO,CAACiE;QACnB,CAAC,CAAC;QACF,IAAI,IAAI,CAACxD,WAAW,GAAG,CAAC,EAAE;UACxB,MAAMyD,MAAM,GAAGnE,kBAAkB,CAACoE,cAAc,CAACzC,aAAa,CAAC;UAC/D,IAAI,CAACU,mBAAmB,CAAC2B,CAAC,CAAC,GAAG,IAAIjE,YAAY,CAAC;YAC7C4D,OAAO,EAAEA,OAAO;YAChBP,KAAK,EAAEA,KAAK;YACZC,MAAM,EAAEA,MAAM;YACdc,MAAM,EAAEA,MAAM;YACdxD,UAAU,EAAE,IAAI,CAACD;UACnB,CAAC,CAAC;QACJ;MACF;IACF;;IAEA;IACA,IAAI,IAAI,CAACQ,aAAa,IAAI,IAAI,CAACM,uBAAuB,EAAE;MACtD,IAAI,IAAI,CAACJ,qBAAqB,IAAIuC,OAAO,CAACU,YAAY,EAAE;QACtD,IAAI,CAAC7B,oBAAoB,GAAG,IAAItC,OAAO,CAAC;UACtCyD,OAAO,EAAEA,OAAO;UAChBP,KAAK,EAAEA,KAAK;UACZC,MAAM,EAAEA,MAAM;UACdxB,WAAW,EAAEvB,WAAW,CAACgE,aAAa;UACtC3C,aAAa,EAAE7B,aAAa,CAACyE,iBAAiB;UAC9CN,OAAO,EAAEhE,OAAO,CAACiE;QACnB,CAAC,CAAC;QACF,IAAI,IAAI,CAACxD,WAAW,GAAG,CAAC,EAAE;UACxB,IAAI,CAAC6B,yBAAyB,GAAG,IAAIxC,YAAY,CAAC;YAChD4D,OAAO,EAAEA,OAAO;YAChBP,KAAK,EAAEA,KAAK;YACZC,MAAM,EAAEA,MAAM;YACdc,MAAM,EAAEnE,kBAAkB,CAACwE,gBAAgB;YAC3C7D,UAAU,EAAE,IAAI,CAACD;UACnB,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACL,IAAI,CAAC6B,yBAAyB,GAAG,IAAIxC,YAAY,CAAC;UAChD4D,OAAO,EAAEA,OAAO;UAChBP,KAAK,EAAEA,KAAK;UACZC,MAAM,EAAEA,MAAM;UACdc,MAAM,EAAEnE,kBAAkB,CAACsE;QAC7B,CAAC,CAAC;MACJ;IACF;;IAEA;IACA,IAAI,IAAI,CAACtD,MAAM,IAAI,IAAI,CAACQ,uBAAuB,EAAE;MAC/C,IAAI,IAAI,CAACJ,qBAAqB,IAAIuC,OAAO,CAACU,YAAY,EAAE;QACtD,IAAI,CAAC3B,aAAa,GAAG,IAAIxC,OAAO,CAAC;UAC/ByD,OAAO,EAAEA,OAAO;UAChBP,KAAK,EAAEA,KAAK;UACZC,MAAM,EAAEA,MAAM;UACdxB,WAAW,EAAEvB,WAAW,CAACmE,eAAe;UACxC9C,aAAa,EAAE7B,aAAa,CAAC4E,YAAY;UACzCT,OAAO,EAAEhE,OAAO,CAACiE;QACnB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,IAAI,CAACzB,kBAAkB,GAAG,IAAI1C,YAAY,CAAC;UACzC4D,OAAO,EAAEA,OAAO;UAChBP,KAAK,EAAEA,KAAK;UACZC,MAAM,EAAEA,MAAM;UACdc,MAAM,EAAEnE,kBAAkB,CAAC2E;QAC7B,CAAC,CAAC;MACJ;IACF;IAEA,IAAI,IAAI,CAACjE,WAAW,GAAG,CAAC,EAAE;MACxB,IAAI,CAACwB,uBAAuB,GAAG,IAAIrC,sBAAsB,CAAC;QACxD8D,OAAO,EAAEA,OAAO;QAChBP,KAAK,EAAE,IAAI,CAACtB,MAAM;QAClBuB,MAAM,EAAE,IAAI,CAACrB,OAAO;QACpB4C,aAAa,EAAE,IAAI,CAACzC,cAAc;QAClC0C,kBAAkB,EAAE,IAAI,CAACxC,mBAAmB;QAC5CyC,mBAAmB,EAAE,IAAI,CAACtC,oBAAoB;QAC9CuC,wBAAwB,EAAE,IAAI,CAACxC,yBAAyB;QACxDyC,kBAAkB,EAAE;MACtB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAI,CAAC/C,YAAY,GAAG,IAAIrC,WAAW,CAAC;QAClC+D,OAAO,EAAEA,OAAO;QAChBiB,aAAa,EAAE,IAAI,CAACzC,cAAc;QAClCkC,YAAY,EAAE,IAAI,CAAC3B,aAAa;QAChCuC,iBAAiB,EAAE,IAAI,CAACxC,kBAAkB;QAC1CqC,mBAAmB,EAAE,IAAI,CAACtC,oBAAoB;QAC9CuC,wBAAwB,EAAE,IAAI,CAACxC,yBAAyB;QACxDyC,kBAAkB,EAAE;MACtB,CAAC,CAAC;IACJ;EACF;AACF,CAAC;AAEDzE,kBAAkB,CAACuC,SAAS,CAACoC,eAAe,GAAG,UAAUC,KAAK,EAAE;EAC9DA,KAAK,GAAGhF,YAAY,CAACgF,KAAK,EAAE,CAAC,CAAC;EAC9B;EACA,IAAIA,KAAK,IAAI,IAAI,CAACvE,uBAAuB,EAAE;IACzC,MAAM,IAAIP,cAAc,CACtB,+DACF,CAAC;EACH;EACA;EACA,OAAO,IAAI,CAAC8B,cAAc,CAACgD,KAAK,CAAC;AACnC,CAAC;AAED5E,kBAAkB,CAACuC,SAAS,CAACsC,eAAe,GAAG,UAAUC,OAAO,EAAEF,KAAK,EAAE;EACvEA,KAAK,GAAGhF,YAAY,CAACgF,KAAK,EAAE,CAAC,CAAC;EAC9B;EACA,IAAI,IAAI,CAAC7D,uBAAuB,EAAE;IAChC,MAAM,IAAIjB,cAAc,CACtB,oEACF,CAAC;EACH;EACA,IAAI8E,KAAK,IAAI,IAAI,CAACvE,uBAAuB,EAAE;IACzC,MAAM,IAAIP,cAAc,CACtB,+DACF,CAAC;EACH;EACA;EACA,IAAI,CAACsC,iBAAiB,GAAG0C,OAAO,KAAK,IAAI,CAAClD,cAAc,CAACgD,KAAK,CAAC;EAC/D,IAAI,CAAChD,cAAc,CAACgD,KAAK,CAAC,GAAGE,OAAO;AACtC,CAAC;AAED9E,kBAAkB,CAACuC,SAAS,CAACwC,oBAAoB,GAAG,UAAUH,KAAK,EAAE;EACnEA,KAAK,GAAGhF,YAAY,CAACgF,KAAK,EAAE,CAAC,CAAC;EAC9B;EACA,IAAIA,KAAK,IAAI,IAAI,CAACvE,uBAAuB,EAAE;IACzC,MAAM,IAAIP,cAAc,CACtB,+DACF,CAAC;EACH;EACA;EACA,OAAO,IAAI,CAACgC,mBAAmB,CAAC8C,KAAK,CAAC;AACxC,CAAC;AAED5E,kBAAkB,CAACuC,SAAS,CAACyC,oBAAoB,GAAG,UAClDC,YAAY,EACZL,KAAK,EACL;EACAA,KAAK,GAAGhF,YAAY,CAACgF,KAAK,EAAE,CAAC,CAAC;EAC9B;EACA,IAAI,IAAI,CAAC7D,uBAAuB,EAAE;IAChC,MAAM,IAAIjB,cAAc,CACtB,yEACF,CAAC;EACH;EACA,IAAI8E,KAAK,IAAI,IAAI,CAACvE,uBAAuB,EAAE;IACzC,MAAM,IAAIP,cAAc,CACtB,+DACF,CAAC;EACH;EACA;EACA,IAAI,CAACsC,iBAAiB,GAAG6C,YAAY,KAAK,IAAI,CAACnD,mBAAmB,CAAC8C,KAAK,CAAC;EACzE,IAAI,CAAC9C,mBAAmB,CAAC8C,KAAK,CAAC,GAAGK,YAAY;AAChD,CAAC;AAEDjF,kBAAkB,CAACuC,SAAS,CAAC2C,oBAAoB,GAAG,YAAY;EAC9D,OAAO,IAAI,CAAChD,kBAAkB;AAChC,CAAC;AAEDlC,kBAAkB,CAACuC,SAAS,CAAC4C,oBAAoB,GAAG,UAAUF,YAAY,EAAE;EAC1E;EACA,IAAI,IAAI,CAAChE,uBAAuB,EAAE;IAChC,MAAM,IAAInB,cAAc,CACtB,yEACF,CAAC;EACH;EACA;EACA,IAAI,CAACsC,iBAAiB,GAAG6C,YAAY,KAAK,IAAI,CAAC/C,kBAAkB;EACjE,IAAI,CAACA,kBAAkB,GAAG+C,YAAY;AACxC,CAAC;AAEDjF,kBAAkB,CAACuC,SAAS,CAAC6C,eAAe,GAAG,YAAY;EACzD,OAAO,IAAI,CAACjD,aAAa;AAC3B,CAAC;AAEDnC,kBAAkB,CAACuC,SAAS,CAAC8C,eAAe,GAAG,UAAUP,OAAO,EAAE;EAChE;EACA,IAAI,IAAI,CAAC7D,uBAAuB,EAAE;IAChC,MAAM,IAAInB,cAAc,CACtB,oEACF,CAAC;EACH;EACA;EACA,IAAI,CAACsC,iBAAiB,GAAG0C,OAAO,KAAK,IAAI,CAAC3C,aAAa;EACvD,IAAI,CAACA,aAAa,GAAG2C,OAAO;AAC9B,CAAC;AAED9E,kBAAkB,CAACuC,SAAS,CAAC+C,2BAA2B,GAAG,YAAY;EACrE,OAAO,IAAI,CAACtD,yBAAyB;AACvC,CAAC;AAEDhC,kBAAkB,CAACuC,SAAS,CAACgD,2BAA2B,GAAG,UACzDN,YAAY,EACZ;EACA;EACA,IAAI,IAAI,CAAChE,uBAAuB,EAAE;IAChC,MAAM,IAAInB,cAAc,CACtB,gFACF,CAAC;EACH;EACA;EACA,IAAI,CAACsC,iBAAiB,GAAG6C,YAAY,KAAK,IAAI,CAACjD,yBAAyB;EACxE,IAAI,CAACA,yBAAyB,GAAGiD,YAAY;AAC/C,CAAC;AAEDjF,kBAAkB,CAACuC,SAAS,CAACiD,sBAAsB,GAAG,YAAY;EAChE,OAAO,IAAI,CAACvD,oBAAoB;AAClC,CAAC;AAEDjC,kBAAkB,CAACuC,SAAS,CAACkD,sBAAsB,GAAG,UAAUX,OAAO,EAAE;EACvE;EACA,IAAI,IAAI,CAAC7D,uBAAuB,EAAE;IAChC,MAAM,IAAInB,cAAc,CACtB,2EACF,CAAC;EACH;EACA;EACA,IAAI,CAACsC,iBAAiB,GAAG0C,OAAO,KAAK,IAAI,CAAC7C,oBAAoB;EAC9D,IAAI,CAACA,oBAAoB,GAAG6C,OAAO;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9E,kBAAkB,CAACuC,SAAS,CAACmD,eAAe,GAAG,UAAUtC,OAAO,EAAEuC,WAAW,EAAE;EAC7E,IAAI,IAAI,CAACxF,WAAW,GAAG,CAAC,EAAE;IACxB,IAAI,CAACwB,uBAAuB,CAACiE,gBAAgB,CAACxC,OAAO,EAAEuC,WAAW,CAAC;EACrE;AACF,CAAC;AAED3F,kBAAkB,CAACuC,SAAS,CAACsD,KAAK,GAAG,UACnCzC,OAAO,EACP0C,YAAY,EACZC,SAAS,EACT;EACA,MAAMvD,WAAW,GAAGsD,YAAY,CAACtD,WAAW;EAC5CsD,YAAY,CAACtD,WAAW,GAAG,IAAI,CAACA,WAAW;EAC3CsD,YAAY,CAACE,OAAO,CAAC5C,OAAO,EAAE2C,SAAS,CAAC;EACxCD,YAAY,CAACtD,WAAW,GAAGA,WAAW;AACxC,CAAC;AAEDxC,kBAAkB,CAACuC,SAAS,CAAC0D,kBAAkB,GAAG,YAAY;EAC5D,IAAI,CAACvE,YAAY,GAAG,IAAI,CAACA,YAAY,IAAI,IAAI,CAACA,YAAY,CAAC8B,OAAO,CAAC,CAAC;EACpE,IAAI,CAAC7B,uBAAuB,GAC1B,IAAI,CAACA,uBAAuB,IAAI,IAAI,CAACA,uBAAuB,CAAC6B,OAAO,CAAC,CAAC;AAC1E,CAAC;AAEDxD,kBAAkB,CAACuC,SAAS,CAACiB,OAAO,GAAG,YAAY;EACjD,IAAI,IAAI,CAACjD,MAAM,EAAE;IACf,MAAM8D,aAAa,GAAG,IAAI,CAACzC,cAAc;IACzC,MAAM0C,kBAAkB,GAAG,IAAI,CAACxC,mBAAmB;IACnD,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,aAAa,CAAC6B,MAAM,EAAE,EAAEzC,CAAC,EAAE;MAC7C,MAAMqB,OAAO,GAAGT,aAAa,CAACZ,CAAC,CAAC;MAChC,IAAI,IAAI,CAAC1C,uBAAuB,EAAE;QAChC,IAAIlB,OAAO,CAACiF,OAAO,CAAC,IAAI,CAACA,OAAO,CAACqB,WAAW,CAAC,CAAC,EAAE;UAC9CrB,OAAO,CAACtB,OAAO,CAAC,CAAC;QACnB;MACF;MACA,IAAI3D,OAAO,CAACiF,OAAO,CAAC,IAAIA,OAAO,CAACqB,WAAW,CAAC,CAAC,EAAE;QAC7C9B,aAAa,CAACZ,CAAC,CAAC,GAAGjC,SAAS;MAC9B;MACA,MAAMyD,YAAY,GAAGX,kBAAkB,CAACb,CAAC,CAAC;MAC1C,IAAI,IAAI,CAAC1C,uBAAuB,EAAE;QAChC,IAAIlB,OAAO,CAACoF,YAAY,CAAC,IAAI,CAACA,YAAY,CAACkB,WAAW,CAAC,CAAC,EAAE;UACxDlB,YAAY,CAACzB,OAAO,CAAC,CAAC;QACxB;MACF;MACA,IAAI3D,OAAO,CAACoF,YAAY,CAAC,IAAIA,YAAY,CAACkB,WAAW,CAAC,CAAC,EAAE;QACvD7B,kBAAkB,CAACb,CAAC,CAAC,GAAGjC,SAAS;MACnC;IACF;EACF;EAEA,IAAI,IAAI,CAACb,aAAa,EAAE;IACtB,IAAI,IAAI,CAACM,uBAAuB,EAAE;MAChC,IAAI,CAACgB,oBAAoB,GACvB,IAAI,CAACA,oBAAoB,IAAI,IAAI,CAACA,oBAAoB,CAACuB,OAAO,CAAC,CAAC;MAClE,IAAI,CAACxB,yBAAyB,GAC5B,IAAI,CAACA,yBAAyB,IAC9B,IAAI,CAACA,yBAAyB,CAACwB,OAAO,CAAC,CAAC;IAC5C;IACA,IACE3D,OAAO,CAAC,IAAI,CAACoC,oBAAoB,CAAC,IAClC,IAAI,CAACA,oBAAoB,CAACkE,WAAW,CAAC,CAAC,EACvC;MACA,IAAI,CAAClE,oBAAoB,GAAGT,SAAS;IACvC;IACA,IACE3B,OAAO,CAAC,IAAI,CAACmC,yBAAyB,CAAC,IACvC,IAAI,CAACA,yBAAyB,CAACmE,WAAW,CAAC,CAAC,EAC5C;MACA,IAAI,CAACnE,yBAAyB,GAAGR,SAAS;IAC5C;EACF;EAEA,IAAI,IAAI,CAACf,MAAM,EAAE;IACf,IAAI,IAAI,CAACQ,uBAAuB,EAAE;MAChC,IAAI,CAACkB,aAAa,GAAG,IAAI,CAACA,aAAa,IAAI,IAAI,CAACA,aAAa,CAACqB,OAAO,CAAC,CAAC;MACvE,IAAI,CAACtB,kBAAkB,GACrB,IAAI,CAACA,kBAAkB,IAAI,IAAI,CAACA,kBAAkB,CAACsB,OAAO,CAAC,CAAC;IAChE;IACA,IAAI3D,OAAO,CAAC,IAAI,CAACsC,aAAa,CAAC,IAAI,IAAI,CAACA,aAAa,CAACgE,WAAW,CAAC,CAAC,EAAE;MACnE,IAAI,CAAChE,aAAa,GAAGX,SAAS;IAChC;IACA,IACE3B,OAAO,CAAC,IAAI,CAACqC,kBAAkB,CAAC,IAChC,IAAI,CAACA,kBAAkB,CAACiE,WAAW,CAAC,CAAC,EACrC;MACA,IAAI,CAACjE,kBAAkB,GAAGV,SAAS;IACrC;EACF;EAEA,IAAI,CAACyE,kBAAkB,CAAC,CAAC;AAC3B,CAAC;AACD,eAAejG,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}