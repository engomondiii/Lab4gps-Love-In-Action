{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractMatch } from './abstract-match';\n/**\n * @class Autolinker.match.Phone\n * @extends Autolinker.match.AbstractMatch\n *\n * Represents a Phone number match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\nvar PhoneMatch = /** @class */function (_super) {\n  __extends(PhoneMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n  function PhoneMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @public\n     * @property {'phone'} type\n     *\n     * A string name for the type of match that this class represents. Can be\n     * used in a TypeScript discriminating union to type-narrow from the\n     * `Match` type.\n     */\n    _this.type = 'phone';\n    /**\n     * @protected\n     * @property {String} number (required)\n     *\n     * The phone number that was matched, without any delimiter characters.\n     *\n     * Note: This is a string to allow for prefixed 0's.\n     */\n    _this.number = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @protected\n     * @property  {Boolean} plusSign (required)\n     *\n     * `true` if the matched phone number started with a '+' sign. We'll include\n     * it in the `tel:` URL if so, as this is needed for international numbers.\n     *\n     * Ex: '+1 (123) 456 7879'\n     */\n    _this.plusSign = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n    _this.number = cfg.number;\n    _this.plusSign = cfg.plusSign;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of PhoneMatch, returns 'phone'.\n   *\n   * @return {String}\n   */\n  PhoneMatch.prototype.getType = function () {\n    return 'phone';\n  };\n  /**\n   * Returns the phone number that was matched as a string, without any\n   * delimiter characters.\n   *\n   * Note: This is a string to allow for prefixed 0's.\n   *\n   * @return {String}\n   */\n  PhoneMatch.prototype.getPhoneNumber = function () {\n    return this.number;\n  };\n  /**\n   * Alias of {@link #getPhoneNumber}, returns the phone number that was\n   * matched as a string, without any delimiter characters.\n   *\n   * Note: This is a string to allow for prefixed 0's.\n   *\n   * @return {String}\n   */\n  PhoneMatch.prototype.getNumber = function () {\n    return this.getPhoneNumber();\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n  PhoneMatch.prototype.getAnchorHref = function () {\n    return 'tel:' + (this.plusSign ? '+' : '') + this.number;\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n  PhoneMatch.prototype.getAnchorText = function () {\n    return this.matchedText;\n  };\n  return PhoneMatch;\n}(AbstractMatch);\nexport { PhoneMatch };","map":{"version":3,"names":["AbstractMatch","PhoneMatch","_super","__extends","cfg","_this","call","type","number","plusSign","prototype","getType","getPhoneNumber","getNumber","getAnchorHref","getAnchorText","matchedText"],"sources":["../../../src/match/phone-match.ts"],"sourcesContent":[null],"mappings":";AAAA,SAASA,aAAa,QAA6B,kBAAkB;AAErE;;;;;;;;;;AAUA,IAAAC,UAAA,0BAAAC,MAAA;EAAgCC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EAgC5B;;;;;EAKA,SAAAD,WAAYG,GAAqB;IAAjC,IAAAC,KAAA,GACIH,MAAA,CAAAI,IAAA,OAAMF,GAAG,CAAC;IArCd;;;;;;;;IAQgBC,KAAA,CAAAE,IAAI,GAAY,OAAO;IAEvC;;;;;;;;IAQiBF,KAAA,CAAAG,MAAM,GAAW,EAAE,CAAC,CAAC;IAEtC;;;;;;;;;IASiBH,KAAA,CAAAI,QAAQ,GAAY,KAAK,CAAC,CAAC;IAUxCJ,KAAI,CAACG,MAAM,GAAGJ,GAAG,CAACI,MAAM;IACxBH,KAAI,CAACI,QAAQ,GAAGL,GAAG,CAACK,QAAQ;;EAChC;EAEA;;;;;;EAMAR,UAAA,CAAAS,SAAA,CAAAC,OAAO,GAAP;IACI,OAAO,OAAO;EAClB,CAAC;EAED;;;;;;;;EAQAV,UAAA,CAAAS,SAAA,CAAAE,cAAc,GAAd;IACI,OAAO,IAAI,CAACJ,MAAM;EACtB,CAAC;EAED;;;;;;;;EAQAP,UAAA,CAAAS,SAAA,CAAAG,SAAS,GAAT;IACI,OAAO,IAAI,CAACD,cAAc,EAAE;EAChC,CAAC;EAED;;;;;EAKAX,UAAA,CAAAS,SAAA,CAAAI,aAAa,GAAb;IACI,OAAO,MAAM,IAAI,IAAI,CAACL,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,CAACD,MAAM;EAC5D,CAAC;EAED;;;;;EAKAP,UAAA,CAAAS,SAAA,CAAAK,aAAa,GAAb;IACI,OAAO,IAAI,CAACC,WAAW;EAC3B,CAAC;EACL,OAAAf,UAAC;AAAD,CAAC,CA/F+BD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}