{"ast":null,"code":"import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport RectangleGeometry from \"../Core/RectangleGeometry.js\";\nimport RectangleOutlineGeometry from \"../Core/RectangleOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport GroundGeometryUpdater from \"./GroundGeometryUpdater.js\";\nimport Property from \"./Property.js\";\nconst scratchColor = new Color();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\nconst scratchRectangle = new Rectangle();\nconst scratchCenterRect = new Rectangle();\nconst scratchCarto = new Cartographic();\nfunction RectangleGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.rectangle = undefined;\n  this.height = undefined;\n  this.extrudedHeight = undefined;\n  this.granularity = undefined;\n  this.stRotation = undefined;\n  this.rotation = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for rectangles.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias RectangleGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction RectangleGeometryUpdater(entity, scene) {\n  GroundGeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new RectangleGeometryOptions(entity),\n    geometryPropertyName: \"rectangle\",\n    observedPropertyNames: [\"availability\", \"rectangle\"]\n  });\n  this._onEntityPropertyChanged(entity, \"rectangle\", entity.rectangle, undefined);\n}\nif (defined(Object.create)) {\n  RectangleGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n  RectangleGeometryUpdater.prototype.constructor = RectangleGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nRectangleGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\"This instance does not represent a filled geometry.\");\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n    offset: undefined,\n    color: undefined\n  };\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n  }\n  return new GeometryInstance({\n    id: entity,\n    geometry: new RectangleGeometry(this._options),\n    attributes: attributes\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nRectangleGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\"This instance does not represent an outlined geometry.\");\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n    offset: undefined\n  };\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n  }\n  return new GeometryInstance({\n    id: entity,\n    geometry: new RectangleOutlineGeometry(this._options),\n    attributes: attributes\n  });\n};\nRectangleGeometryUpdater.prototype._computeCenter = function (time, result) {\n  const rect = Property.getValueOrUndefined(this._entity.rectangle.coordinates, time, scratchCenterRect);\n  if (!defined(rect)) {\n    return;\n  }\n  const center = Rectangle.center(rect, scratchCarto);\n  return Cartographic.toCartesian(center, Ellipsoid.default, result);\n};\nRectangleGeometryUpdater.prototype._isHidden = function (entity, rectangle) {\n  return !defined(rectangle.coordinates) || GeometryUpdater.prototype._isHidden.call(this, entity, rectangle);\n};\nRectangleGeometryUpdater.prototype._isDynamic = function (entity, rectangle) {\n  return !rectangle.coordinates.isConstant ||\n  //\n  !Property.isConstant(rectangle.height) ||\n  //\n  !Property.isConstant(rectangle.extrudedHeight) ||\n  //\n  !Property.isConstant(rectangle.granularity) ||\n  //\n  !Property.isConstant(rectangle.stRotation) ||\n  //\n  !Property.isConstant(rectangle.rotation) ||\n  //\n  !Property.isConstant(rectangle.outlineWidth) ||\n  //\n  !Property.isConstant(rectangle.zIndex) ||\n  //\n  this._onTerrain && !Property.isConstant(this._materialProperty) && !(this._materialProperty instanceof ColorMaterialProperty);\n};\nRectangleGeometryUpdater.prototype._setStaticOptions = function (entity, rectangle) {\n  const isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n  let heightValue = Property.getValueOrUndefined(rectangle.height, Iso8601.MINIMUM_VALUE);\n  const heightReferenceValue = Property.getValueOrDefault(rectangle.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n  let extrudedHeightValue = Property.getValueOrUndefined(rectangle.extrudedHeight, Iso8601.MINIMUM_VALUE);\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(rectangle.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n  const options = this._options;\n  options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.rectangle = rectangle.coordinates.getValue(Iso8601.MINIMUM_VALUE, options.rectangle);\n  options.granularity = Property.getValueOrUndefined(rectangle.granularity, Iso8601.MINIMUM_VALUE);\n  options.stRotation = Property.getValueOrUndefined(rectangle.stRotation, Iso8601.MINIMUM_VALUE);\n  options.rotation = Property.getValueOrUndefined(rectangle.rotation, Iso8601.MINIMUM_VALUE);\n  options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n  options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(RectangleGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n  }\n  options.extrudedHeight = extrudedHeightValue;\n};\nRectangleGeometryUpdater.DynamicGeometryUpdater = DynamicRectangleGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicRectangleGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n  DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n}\nif (defined(Object.create)) {\n  DynamicRectangleGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n  DynamicRectangleGeometryUpdater.prototype.constructor = DynamicRectangleGeometryUpdater;\n}\nDynamicRectangleGeometryUpdater.prototype._isHidden = function (entity, rectangle, time) {\n  return !defined(this._options.rectangle) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, rectangle, time);\n};\nDynamicRectangleGeometryUpdater.prototype._setOptions = function (entity, rectangle, time) {\n  const options = this._options;\n  let heightValue = Property.getValueOrUndefined(rectangle.height, time);\n  const heightReferenceValue = Property.getValueOrDefault(rectangle.heightReference, time, HeightReference.NONE);\n  let extrudedHeightValue = Property.getValueOrUndefined(rectangle.extrudedHeight, time);\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(rectangle.extrudedHeightReference, time, HeightReference.NONE);\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n  options.rectangle = Property.getValueOrUndefined(rectangle.coordinates, time, options.rectangle);\n  options.granularity = Property.getValueOrUndefined(rectangle.granularity, time);\n  options.stRotation = Property.getValueOrUndefined(rectangle.stRotation, time);\n  options.rotation = Property.getValueOrUndefined(rectangle.rotation, time);\n  options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n  options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(RectangleGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n  }\n  options.extrudedHeight = extrudedHeightValue;\n};\nexport default RectangleGeometryUpdater;","map":{"version":3,"names":["ApproximateTerrainHeights","Cartesian3","Cartographic","Check","Color","ColorGeometryInstanceAttribute","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","Ellipsoid","GeometryInstance","Iso8601","OffsetGeometryInstanceAttribute","Rectangle","RectangleGeometry","RectangleOutlineGeometry","ShowGeometryInstanceAttribute","HeightReference","MaterialAppearance","PerInstanceColorAppearance","ColorMaterialProperty","DynamicGeometryUpdater","GeometryUpdater","GroundGeometryUpdater","Property","scratchColor","defaultOffset","ZERO","offsetScratch","scratchRectangle","scratchCenterRect","scratchCarto","RectangleGeometryOptions","entity","id","vertexFormat","undefined","rectangle","height","extrudedHeight","granularity","stRotation","rotation","offsetAttribute","RectangleGeometryUpdater","scene","call","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","Object","create","prototype","constructor","createFillGeometryInstance","time","_fillEnabled","_entity","isAvailable","attributes","show","isShowing","_showProperty","getValue","_fillProperty","distanceDisplayCondition","fromDistanceDisplayCondition","_distanceDisplayConditionProperty","offset","color","_materialProperty","currentColor","isConstant","WHITE","fromColor","_options","fromCartesian3","getValueOrDefault","_terrainOffsetProperty","geometry","createOutlineGeometryInstance","_outlineEnabled","outlineColor","_outlineColorProperty","BLACK","_showOutlineProperty","_computeCenter","result","rect","getValueOrUndefined","coordinates","center","toCartesian","default","_isHidden","_isDynamic","outlineWidth","zIndex","_onTerrain","_setStaticOptions","isColorMaterial","heightValue","MINIMUM_VALUE","heightReferenceValue","heightReference","NONE","extrudedHeightValue","extrudedHeightReferenceValue","extrudedHeightReference","options","VERTEX_FORMAT","MaterialSupport","TEXTURED","computeGeometryOffsetAttribute","getGeometryHeight","getGeometryExtrudedHeight","CLAMP_TO_GROUND","getMinimumMaximumHeights","computeRectangle","minimumTerrainHeight","DynamicRectangleGeometryUpdater","geometryUpdater","primitives","groundPrimitives","_setOptions"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/RectangleGeometryUpdater.js"],"sourcesContent":["import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport RectangleGeometry from \"../Core/RectangleGeometry.js\";\nimport RectangleOutlineGeometry from \"../Core/RectangleOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport GroundGeometryUpdater from \"./GroundGeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nconst scratchColor = new Color();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\nconst scratchRectangle = new Rectangle();\nconst scratchCenterRect = new Rectangle();\nconst scratchCarto = new Cartographic();\n\nfunction RectangleGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.rectangle = undefined;\n  this.height = undefined;\n  this.extrudedHeight = undefined;\n  this.granularity = undefined;\n  this.stRotation = undefined;\n  this.rotation = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for rectangles.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias RectangleGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction RectangleGeometryUpdater(entity, scene) {\n  GroundGeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new RectangleGeometryOptions(entity),\n    geometryPropertyName: \"rectangle\",\n    observedPropertyNames: [\"availability\", \"rectangle\"],\n  });\n\n  this._onEntityPropertyChanged(\n    entity,\n    \"rectangle\",\n    entity.rectangle,\n    undefined,\n  );\n}\n\nif (defined(Object.create)) {\n  RectangleGeometryUpdater.prototype = Object.create(\n    GroundGeometryUpdater.prototype,\n  );\n  RectangleGeometryUpdater.prototype.constructor = RectangleGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nRectangleGeometryUpdater.prototype.createFillGeometryInstance = function (\n  time,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._fillProperty.getValue(time),\n    ),\n    distanceDisplayCondition:\n      DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n        this._distanceDisplayConditionProperty.getValue(time),\n      ),\n    offset: undefined,\n    color: undefined,\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch,\n      ),\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new RectangleGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nRectangleGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor,\n  );\n  const distanceDisplayCondition =\n    this._distanceDisplayConditionProperty.getValue(time);\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time),\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition:\n      DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n        distanceDisplayCondition,\n      ),\n    offset: undefined,\n  };\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch,\n      ),\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new RectangleOutlineGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\nRectangleGeometryUpdater.prototype._computeCenter = function (time, result) {\n  const rect = Property.getValueOrUndefined(\n    this._entity.rectangle.coordinates,\n    time,\n    scratchCenterRect,\n  );\n  if (!defined(rect)) {\n    return;\n  }\n  const center = Rectangle.center(rect, scratchCarto);\n  return Cartographic.toCartesian(center, Ellipsoid.default, result);\n};\n\nRectangleGeometryUpdater.prototype._isHidden = function (entity, rectangle) {\n  return (\n    !defined(rectangle.coordinates) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, rectangle)\n  );\n};\n\nRectangleGeometryUpdater.prototype._isDynamic = function (entity, rectangle) {\n  return (\n    !rectangle.coordinates.isConstant || //\n    !Property.isConstant(rectangle.height) || //\n    !Property.isConstant(rectangle.extrudedHeight) || //\n    !Property.isConstant(rectangle.granularity) || //\n    !Property.isConstant(rectangle.stRotation) || //\n    !Property.isConstant(rectangle.rotation) || //\n    !Property.isConstant(rectangle.outlineWidth) || //\n    !Property.isConstant(rectangle.zIndex) || //\n    (this._onTerrain &&\n      !Property.isConstant(this._materialProperty) &&\n      !(this._materialProperty instanceof ColorMaterialProperty))\n  );\n};\n\nRectangleGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  rectangle,\n) {\n  const isColorMaterial =\n    this._materialProperty instanceof ColorMaterialProperty;\n\n  let heightValue = Property.getValueOrUndefined(\n    rectangle.height,\n    Iso8601.MINIMUM_VALUE,\n  );\n  const heightReferenceValue = Property.getValueOrDefault(\n    rectangle.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE,\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    rectangle.extrudedHeight,\n    Iso8601.MINIMUM_VALUE,\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    rectangle.extrudedHeightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE,\n  );\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n\n  const options = this._options;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.rectangle = rectangle.coordinates.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.rectangle,\n  );\n  options.granularity = Property.getValueOrUndefined(\n    rectangle.granularity,\n    Iso8601.MINIMUM_VALUE,\n  );\n  options.stRotation = Property.getValueOrUndefined(\n    rectangle.stRotation,\n    Iso8601.MINIMUM_VALUE,\n  );\n  options.rotation = Property.getValueOrUndefined(\n    rectangle.rotation,\n    Iso8601.MINIMUM_VALUE,\n  );\n  options.offsetAttribute =\n    GroundGeometryUpdater.computeGeometryOffsetAttribute(\n      heightValue,\n      heightReferenceValue,\n      extrudedHeightValue,\n      extrudedHeightReferenceValue,\n    );\n  options.height = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue,\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue,\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      RectangleGeometry.computeRectangle(options, scratchRectangle),\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\n\nRectangleGeometryUpdater.DynamicGeometryUpdater =\n  DynamicRectangleGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicRectangleGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives,\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives,\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicRectangleGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype,\n  );\n  DynamicRectangleGeometryUpdater.prototype.constructor =\n    DynamicRectangleGeometryUpdater;\n}\n\nDynamicRectangleGeometryUpdater.prototype._isHidden = function (\n  entity,\n  rectangle,\n  time,\n) {\n  return (\n    !defined(this._options.rectangle) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(\n      this,\n      entity,\n      rectangle,\n      time,\n    )\n  );\n};\n\nDynamicRectangleGeometryUpdater.prototype._setOptions = function (\n  entity,\n  rectangle,\n  time,\n) {\n  const options = this._options;\n  let heightValue = Property.getValueOrUndefined(rectangle.height, time);\n  const heightReferenceValue = Property.getValueOrDefault(\n    rectangle.heightReference,\n    time,\n    HeightReference.NONE,\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    rectangle.extrudedHeight,\n    time,\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    rectangle.extrudedHeightReference,\n    time,\n    HeightReference.NONE,\n  );\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n\n  options.rectangle = Property.getValueOrUndefined(\n    rectangle.coordinates,\n    time,\n    options.rectangle,\n  );\n  options.granularity = Property.getValueOrUndefined(\n    rectangle.granularity,\n    time,\n  );\n  options.stRotation = Property.getValueOrUndefined(rectangle.stRotation, time);\n  options.rotation = Property.getValueOrUndefined(rectangle.rotation, time);\n  options.offsetAttribute =\n    GroundGeometryUpdater.computeGeometryOffsetAttribute(\n      heightValue,\n      heightReferenceValue,\n      extrudedHeightValue,\n      extrudedHeightReferenceValue,\n    );\n  options.height = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue,\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue,\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      RectangleGeometry.computeRectangle(options, scratchRectangle),\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\nexport default RectangleGeometryUpdater;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}