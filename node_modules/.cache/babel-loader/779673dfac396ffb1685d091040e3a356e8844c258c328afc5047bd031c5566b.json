{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\n\n/**\n * Properties for controlling globe translucency.\n *\n * @alias GlobeTranslucency\n * @constructor\n */\nfunction GlobeTranslucency() {\n  this._enabled = false;\n  this._frontFaceAlpha = 1.0;\n  this._frontFaceAlphaByDistance = undefined;\n  this._backFaceAlpha = 1.0;\n  this._backFaceAlphaByDistance = undefined;\n  this._rectangle = Rectangle.clone(Rectangle.MAX_VALUE);\n}\nObject.defineProperties(GlobeTranslucency.prototype, {\n  /**\n   * When true, the globe is rendered as a translucent surface.\n   * <br /><br />\n   * The alpha is computed by blending {@link Globe#material}, {@link Globe#imageryLayers},\n   * and {@link Globe#baseColor}, all of which may contain translucency, and then multiplying by\n   * {@link GlobeTranslucency#frontFaceAlpha} and {@link GlobeTranslucency#frontFaceAlphaByDistance} for front faces and\n   * {@link GlobeTranslucency#backFaceAlpha} and {@link GlobeTranslucency#backFaceAlphaByDistance} for back faces.\n   * When the camera is underground back faces and front faces are swapped, i.e. back-facing geometry\n   * is considered front facing.\n   * <br /><br />\n   * Translucency is disabled by default.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {boolean}\n   * @default false\n   *\n   * @see GlobeTranslucency#frontFaceAlpha\n   * @see GlobeTranslucency#frontFaceAlphaByDistance\n   * @see GlobeTranslucency#backFaceAlpha\n   * @see GlobeTranslucency#backFaceAlphaByDistance\n   */\n  enabled: {\n    get: function () {\n      return this._enabled;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"enabled\", value);\n      //>>includeEnd('debug');\n      this._enabled = value;\n    }\n  },\n  /**\n   * A constant translucency to apply to front faces of the globe.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {number}\n   * @default 1.0\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#frontFaceAlphaByDistance\n   *\n   * @example\n   * // Set front face translucency to 0.5.\n   * globe.translucency.frontFaceAlpha = 0.5;\n   * globe.translucency.enabled = true;\n   */\n  frontFaceAlpha: {\n    get: function () {\n      return this._frontFaceAlpha;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"frontFaceAlpha\", value, 0.0);\n      Check.typeOf.number.lessThanOrEquals(\"frontFaceAlpha\", value, 1.0);\n      //>>includeEnd('debug');\n      this._frontFaceAlpha = value;\n    }\n  },\n  /**\n   * Gets or sets near and far translucency properties of front faces of the globe based on the distance to the camera.\n   * The translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the translucency remains clamped to the nearest bound.  If undefined,\n   * frontFaceAlphaByDistance will be disabled.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {NearFarScalar}\n   * @default undefined\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#frontFaceAlpha\n   *\n   * @example\n   * // Example 1.\n   * // Set front face translucency to 0.5 when the\n   * // camera is 1500 meters from the surface and 1.0\n   * // as the camera distance approaches 8.0e6 meters.\n   * globe.translucency.frontFaceAlphaByDistance = new Cesium.NearFarScalar(1.5e2, 0.5, 8.0e6, 1.0);\n   * globe.translucency.enabled = true;\n   *\n   * @example\n   * // Example 2.\n   * // Disable front face translucency by distance\n   * globe.translucency.frontFaceAlphaByDistance = undefined;\n   */\n  frontFaceAlphaByDistance: {\n    get: function () {\n      return this._frontFaceAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far < value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      }\n      //>>includeEnd('debug');\n      this._frontFaceAlphaByDistance = NearFarScalar.clone(value, this._frontFaceAlphaByDistance);\n    }\n  },\n  /**\n   * A constant translucency to apply to back faces of the globe.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {number}\n   * @default 1.0\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#backFaceAlphaByDistance\n   *\n   * @example\n   * // Set back face translucency to 0.5.\n   * globe.translucency.backFaceAlpha = 0.5;\n   * globe.translucency.enabled = true;\n   */\n  backFaceAlpha: {\n    get: function () {\n      return this._backFaceAlpha;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"backFaceAlpha\", value, 0.0);\n      Check.typeOf.number.lessThanOrEquals(\"backFaceAlpha\", value, 1.0);\n      //>>includeEnd('debug');\n      this._backFaceAlpha = value;\n    }\n  },\n  /**\n   * Gets or sets near and far translucency properties of back faces of the globe based on the distance to the camera.\n   * The translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the translucency remains clamped to the nearest bound.  If undefined,\n   * backFaceAlphaByDistance will be disabled.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {NearFarScalar}\n   * @default undefined\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#backFaceAlpha\n   *\n   * @example\n   * // Example 1.\n   * // Set back face translucency to 0.5 when the\n   * // camera is 1500 meters from the surface and 1.0\n   * // as the camera distance approaches 8.0e6 meters.\n   * globe.translucency.backFaceAlphaByDistance = new Cesium.NearFarScalar(1.5e2, 0.5, 8.0e6, 1.0);\n   * globe.translucency.enabled = true;\n   *\n   * @example\n   * // Example 2.\n   * // Disable back face translucency by distance\n   * globe.translucency.backFaceAlphaByDistance = undefined;\n   */\n  backFaceAlphaByDistance: {\n    get: function () {\n      return this._backFaceAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far < value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      }\n      //>>includeEnd('debug');\n      this._backFaceAlphaByDistance = NearFarScalar.clone(value, this._backFaceAlphaByDistance);\n    }\n  },\n  /**\n   * A property specifying a {@link Rectangle} used to limit translucency to a cartographic area.\n   * Defaults to the maximum extent of cartographic coordinates.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Rectangle}\n   * @default {@link Rectangle.MAX_VALUE}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        value = Rectangle.clone(Rectangle.MAX_VALUE);\n      }\n      Rectangle.clone(value, this._rectangle);\n    }\n  }\n});\nexport default GlobeTranslucency;","map":{"version":3,"names":["Check","defined","DeveloperError","NearFarScalar","Rectangle","GlobeTranslucency","_enabled","_frontFaceAlpha","_frontFaceAlphaByDistance","undefined","_backFaceAlpha","_backFaceAlphaByDistance","_rectangle","clone","MAX_VALUE","Object","defineProperties","prototype","enabled","get","set","value","typeOf","bool","frontFaceAlpha","number","greaterThanOrEquals","lessThanOrEquals","frontFaceAlphaByDistance","far","near","backFaceAlpha","backFaceAlphaByDistance","rectangle"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GlobeTranslucency.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\n\n/**\n * Properties for controlling globe translucency.\n *\n * @alias GlobeTranslucency\n * @constructor\n */\nfunction GlobeTranslucency() {\n  this._enabled = false;\n  this._frontFaceAlpha = 1.0;\n  this._frontFaceAlphaByDistance = undefined;\n  this._backFaceAlpha = 1.0;\n  this._backFaceAlphaByDistance = undefined;\n  this._rectangle = Rectangle.clone(Rectangle.MAX_VALUE);\n}\n\nObject.defineProperties(GlobeTranslucency.prototype, {\n  /**\n   * When true, the globe is rendered as a translucent surface.\n   * <br /><br />\n   * The alpha is computed by blending {@link Globe#material}, {@link Globe#imageryLayers},\n   * and {@link Globe#baseColor}, all of which may contain translucency, and then multiplying by\n   * {@link GlobeTranslucency#frontFaceAlpha} and {@link GlobeTranslucency#frontFaceAlphaByDistance} for front faces and\n   * {@link GlobeTranslucency#backFaceAlpha} and {@link GlobeTranslucency#backFaceAlphaByDistance} for back faces.\n   * When the camera is underground back faces and front faces are swapped, i.e. back-facing geometry\n   * is considered front facing.\n   * <br /><br />\n   * Translucency is disabled by default.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {boolean}\n   * @default false\n   *\n   * @see GlobeTranslucency#frontFaceAlpha\n   * @see GlobeTranslucency#frontFaceAlphaByDistance\n   * @see GlobeTranslucency#backFaceAlpha\n   * @see GlobeTranslucency#backFaceAlphaByDistance\n   */\n  enabled: {\n    get: function () {\n      return this._enabled;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"enabled\", value);\n      //>>includeEnd('debug');\n      this._enabled = value;\n    },\n  },\n\n  /**\n   * A constant translucency to apply to front faces of the globe.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {number}\n   * @default 1.0\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#frontFaceAlphaByDistance\n   *\n   * @example\n   * // Set front face translucency to 0.5.\n   * globe.translucency.frontFaceAlpha = 0.5;\n   * globe.translucency.enabled = true;\n   */\n  frontFaceAlpha: {\n    get: function () {\n      return this._frontFaceAlpha;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"frontFaceAlpha\", value, 0.0);\n      Check.typeOf.number.lessThanOrEquals(\"frontFaceAlpha\", value, 1.0);\n      //>>includeEnd('debug');\n      this._frontFaceAlpha = value;\n    },\n  },\n  /**\n   * Gets or sets near and far translucency properties of front faces of the globe based on the distance to the camera.\n   * The translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the translucency remains clamped to the nearest bound.  If undefined,\n   * frontFaceAlphaByDistance will be disabled.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {NearFarScalar}\n   * @default undefined\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#frontFaceAlpha\n   *\n   * @example\n   * // Example 1.\n   * // Set front face translucency to 0.5 when the\n   * // camera is 1500 meters from the surface and 1.0\n   * // as the camera distance approaches 8.0e6 meters.\n   * globe.translucency.frontFaceAlphaByDistance = new Cesium.NearFarScalar(1.5e2, 0.5, 8.0e6, 1.0);\n   * globe.translucency.enabled = true;\n   *\n   * @example\n   * // Example 2.\n   * // Disable front face translucency by distance\n   * globe.translucency.frontFaceAlphaByDistance = undefined;\n   */\n  frontFaceAlphaByDistance: {\n    get: function () {\n      return this._frontFaceAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far < value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\",\n        );\n      }\n      //>>includeEnd('debug');\n      this._frontFaceAlphaByDistance = NearFarScalar.clone(\n        value,\n        this._frontFaceAlphaByDistance,\n      );\n    },\n  },\n\n  /**\n   * A constant translucency to apply to back faces of the globe.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {number}\n   * @default 1.0\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#backFaceAlphaByDistance\n   *\n   * @example\n   * // Set back face translucency to 0.5.\n   * globe.translucency.backFaceAlpha = 0.5;\n   * globe.translucency.enabled = true;\n   */\n  backFaceAlpha: {\n    get: function () {\n      return this._backFaceAlpha;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"backFaceAlpha\", value, 0.0);\n      Check.typeOf.number.lessThanOrEquals(\"backFaceAlpha\", value, 1.0);\n      //>>includeEnd('debug');\n      this._backFaceAlpha = value;\n    },\n  },\n  /**\n   * Gets or sets near and far translucency properties of back faces of the globe based on the distance to the camera.\n   * The translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the translucency remains clamped to the nearest bound.  If undefined,\n   * backFaceAlphaByDistance will be disabled.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {NearFarScalar}\n   * @default undefined\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#backFaceAlpha\n   *\n   * @example\n   * // Example 1.\n   * // Set back face translucency to 0.5 when the\n   * // camera is 1500 meters from the surface and 1.0\n   * // as the camera distance approaches 8.0e6 meters.\n   * globe.translucency.backFaceAlphaByDistance = new Cesium.NearFarScalar(1.5e2, 0.5, 8.0e6, 1.0);\n   * globe.translucency.enabled = true;\n   *\n   * @example\n   * // Example 2.\n   * // Disable back face translucency by distance\n   * globe.translucency.backFaceAlphaByDistance = undefined;\n   */\n  backFaceAlphaByDistance: {\n    get: function () {\n      return this._backFaceAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far < value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\",\n        );\n      }\n      //>>includeEnd('debug');\n      this._backFaceAlphaByDistance = NearFarScalar.clone(\n        value,\n        this._backFaceAlphaByDistance,\n      );\n    },\n  },\n\n  /**\n   * A property specifying a {@link Rectangle} used to limit translucency to a cartographic area.\n   * Defaults to the maximum extent of cartographic coordinates.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Rectangle}\n   * @default {@link Rectangle.MAX_VALUE}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        value = Rectangle.clone(Rectangle.MAX_VALUE);\n      }\n      Rectangle.clone(value, this._rectangle);\n    },\n  },\n});\n\nexport default GlobeTranslucency;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,SAAS,MAAM,sBAAsB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAAA,EAAG;EAC3B,IAAI,CAACC,QAAQ,GAAG,KAAK;EACrB,IAAI,CAACC,eAAe,GAAG,GAAG;EAC1B,IAAI,CAACC,yBAAyB,GAAGC,SAAS;EAC1C,IAAI,CAACC,cAAc,GAAG,GAAG;EACzB,IAAI,CAACC,wBAAwB,GAAGF,SAAS;EACzC,IAAI,CAACG,UAAU,GAAGR,SAAS,CAACS,KAAK,CAACT,SAAS,CAACU,SAAS,CAAC;AACxD;AAEAC,MAAM,CAACC,gBAAgB,CAACX,iBAAiB,CAACY,SAAS,EAAE;EACnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAE;IACPC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACb,QAAQ;IACtB,CAAC;IACDc,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACArB,KAAK,CAACsB,MAAM,CAACC,IAAI,CAAC,SAAS,EAAEF,KAAK,CAAC;MACnC;MACA,IAAI,CAACf,QAAQ,GAAGe,KAAK;IACvB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,cAAc,EAAE;IACdL,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACZ,eAAe;IAC7B,CAAC;IACDa,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACArB,KAAK,CAACsB,MAAM,CAACG,MAAM,CAACC,mBAAmB,CAAC,gBAAgB,EAAEL,KAAK,EAAE,GAAG,CAAC;MACrErB,KAAK,CAACsB,MAAM,CAACG,MAAM,CAACE,gBAAgB,CAAC,gBAAgB,EAAEN,KAAK,EAAE,GAAG,CAAC;MAClE;MACA,IAAI,CAACd,eAAe,GAAGc,KAAK;IAC9B;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,wBAAwB,EAAE;IACxBT,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACX,yBAAyB;IACvC,CAAC;IACDY,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAIpB,OAAO,CAACoB,KAAK,CAAC,IAAIA,KAAK,CAACQ,GAAG,GAAGR,KAAK,CAACS,IAAI,EAAE;QAC5C,MAAM,IAAI5B,cAAc,CACtB,kDACF,CAAC;MACH;MACA;MACA,IAAI,CAACM,yBAAyB,GAAGL,aAAa,CAACU,KAAK,CAClDQ,KAAK,EACL,IAAI,CAACb,yBACP,CAAC;IACH;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEuB,aAAa,EAAE;IACbZ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACT,cAAc;IAC5B,CAAC;IACDU,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACArB,KAAK,CAACsB,MAAM,CAACG,MAAM,CAACC,mBAAmB,CAAC,eAAe,EAAEL,KAAK,EAAE,GAAG,CAAC;MACpErB,KAAK,CAACsB,MAAM,CAACG,MAAM,CAACE,gBAAgB,CAAC,eAAe,EAAEN,KAAK,EAAE,GAAG,CAAC;MACjE;MACA,IAAI,CAACX,cAAc,GAAGW,KAAK;IAC7B;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEW,uBAAuB,EAAE;IACvBb,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACR,wBAAwB;IACtC,CAAC;IACDS,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAIpB,OAAO,CAACoB,KAAK,CAAC,IAAIA,KAAK,CAACQ,GAAG,GAAGR,KAAK,CAACS,IAAI,EAAE;QAC5C,MAAM,IAAI5B,cAAc,CACtB,kDACF,CAAC;MACH;MACA;MACA,IAAI,CAACS,wBAAwB,GAAGR,aAAa,CAACU,KAAK,CACjDQ,KAAK,EACL,IAAI,CAACV,wBACP,CAAC;IACH;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsB,SAAS,EAAE;IACTd,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACP,UAAU;IACxB,CAAC;IACDQ,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB,IAAI,CAACpB,OAAO,CAACoB,KAAK,CAAC,EAAE;QACnBA,KAAK,GAAGjB,SAAS,CAACS,KAAK,CAACT,SAAS,CAACU,SAAS,CAAC;MAC9C;MACAV,SAAS,CAACS,KAAK,CAACQ,KAAK,EAAE,IAAI,CAACT,UAAU,CAAC;IACzC;EACF;AACF,CAAC,CAAC;AAEF,eAAeP,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}