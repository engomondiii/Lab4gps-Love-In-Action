{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport TimeIntervalCollection from \"../Core/TimeIntervalCollection.js\";\nimport PositionProperty from \"./PositionProperty.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link TimeIntervalCollectionProperty} which is also a {@link PositionProperty}.\n *\n * @alias TimeIntervalCollectionPositionProperty\n * @constructor\n *\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction TimeIntervalCollectionPositionProperty(referenceFrame) {\n  this._definitionChanged = new Event();\n  this._intervals = new TimeIntervalCollection();\n  this._intervals.changedEvent.addEventListener(TimeIntervalCollectionPositionProperty.prototype._intervalsChanged, this);\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n}\nObject.defineProperties(TimeIntervalCollectionPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._intervals.isEmpty;\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets the interval collection.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   * @type {TimeIntervalCollection}\n   * @readonly\n   */\n  intervals: {\n    get: function () {\n      return this._intervals;\n    }\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @readonly\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    }\n  }\n});\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nTimeIntervalCollectionPositionProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nTimeIntervalCollectionPositionProperty.prototype.getValueInReferenceFrame = function (time, referenceFrame, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const position = this._intervals.findDataForIntervalContainingDate(time);\n  if (defined(position)) {\n    return PositionProperty.convertToReferenceFrame(time, position, this._referenceFrame, referenceFrame, result);\n  }\n  return undefined;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nTimeIntervalCollectionPositionProperty.prototype.equals = function (other) {\n  return this === other ||\n  //\n  other instanceof TimeIntervalCollectionPositionProperty &&\n  //\n  this._intervals.equals(other._intervals, Property.equals) &&\n  //\n  this._referenceFrame === other._referenceFrame;\n};\n\n/**\n * @private\n */\nTimeIntervalCollectionPositionProperty.prototype._intervalsChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default TimeIntervalCollectionPositionProperty;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","Event","JulianDate","ReferenceFrame","TimeIntervalCollection","PositionProperty","Property","TimeIntervalCollectionPositionProperty","referenceFrame","_definitionChanged","_intervals","changedEvent","addEventListener","prototype","_intervalsChanged","_referenceFrame","FIXED","Object","defineProperties","isConstant","get","isEmpty","definitionChanged","intervals","timeScratch","getValue","time","result","now","getValueInReferenceFrame","position","findDataForIntervalContainingDate","convertToReferenceFrame","undefined","equals","other","raiseEvent"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/TimeIntervalCollectionPositionProperty.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport TimeIntervalCollection from \"../Core/TimeIntervalCollection.js\";\nimport PositionProperty from \"./PositionProperty.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link TimeIntervalCollectionProperty} which is also a {@link PositionProperty}.\n *\n * @alias TimeIntervalCollectionPositionProperty\n * @constructor\n *\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction TimeIntervalCollectionPositionProperty(referenceFrame) {\n  this._definitionChanged = new Event();\n  this._intervals = new TimeIntervalCollection();\n  this._intervals.changedEvent.addEventListener(\n    TimeIntervalCollectionPositionProperty.prototype._intervalsChanged,\n    this,\n  );\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n}\n\nObject.defineProperties(TimeIntervalCollectionPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._intervals.isEmpty;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the interval collection.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   * @type {TimeIntervalCollection}\n   * @readonly\n   */\n  intervals: {\n    get: function () {\n      return this._intervals;\n    },\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof TimeIntervalCollectionPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @readonly\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n  },\n});\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nTimeIntervalCollectionPositionProperty.prototype.getValue = function (\n  time,\n  result,\n) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nTimeIntervalCollectionPositionProperty.prototype.getValueInReferenceFrame =\n  function (time, referenceFrame, result) {\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(time)) {\n      throw new DeveloperError(\"time is required.\");\n    }\n    if (!defined(referenceFrame)) {\n      throw new DeveloperError(\"referenceFrame is required.\");\n    }\n    //>>includeEnd('debug');\n\n    const position = this._intervals.findDataForIntervalContainingDate(time);\n    if (defined(position)) {\n      return PositionProperty.convertToReferenceFrame(\n        time,\n        position,\n        this._referenceFrame,\n        referenceFrame,\n        result,\n      );\n    }\n    return undefined;\n  };\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nTimeIntervalCollectionPositionProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof TimeIntervalCollectionPositionProperty && //\n      this._intervals.equals(other._intervals, Property.equals) && //\n      this._referenceFrame === other._referenceFrame)\n  );\n};\n\n/**\n * @private\n */\nTimeIntervalCollectionPositionProperty.prototype._intervalsChanged =\n  function () {\n    this._definitionChanged.raiseEvent(this);\n  };\nexport default TimeIntervalCollectionPositionProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}