{"ast":null,"code":"import DeveloperError from \"./DeveloperError.js\";\n\n/**\n * A tiling scheme for geometry or imagery on the surface of an ellipsoid.  At level-of-detail zero,\n * the coarsest, least-detailed level, the number of tiles is configurable.\n * At level of detail one, each of the level zero tiles has four children, two in each direction.\n * At level of detail two, each of the level one tiles has four children, two in each direction.\n * This continues for as many levels as are present in the geometry or imagery source.\n *\n * @alias TilingScheme\n * @constructor\n *\n * @see WebMercatorTilingScheme\n * @see GeographicTilingScheme\n */\nfunction TilingScheme(options) {\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\"This type should not be instantiated directly.  Instead, use WebMercatorTilingScheme or GeographicTilingScheme.\");\n  //>>includeEnd('debug');\n}\nObject.defineProperties(TilingScheme.prototype, {\n  /**\n   * Gets the ellipsoid that is tiled by the tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the rectangle, in radians, covered by this tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the map projection used by the tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {MapProjection}\n   */\n  projection: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n\n/**\n * Gets the total number of tiles in the X direction at a specified level-of-detail.\n * @function\n *\n * @param {number} level The level-of-detail.\n * @returns {number} The number of tiles in the X direction at the given level.\n */\nTilingScheme.prototype.getNumberOfXTilesAtLevel = DeveloperError.throwInstantiationError;\n\n/**\n * Gets the total number of tiles in the Y direction at a specified level-of-detail.\n * @function\n *\n * @param {number} level The level-of-detail.\n * @returns {number} The number of tiles in the Y direction at the given level.\n */\nTilingScheme.prototype.getNumberOfYTilesAtLevel = DeveloperError.throwInstantiationError;\n\n/**\n * Transforms a rectangle specified in geodetic radians to the native coordinate system\n * of this tiling scheme.\n * @function\n *\n * @param {Rectangle} rectangle The rectangle to transform.\n * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the native rectangle if 'result'\n *          is undefined.\n */\nTilingScheme.prototype.rectangleToNativeRectangle = DeveloperError.throwInstantiationError;\n\n/**\n * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\n * of the tiling scheme.\n * @function\n *\n * @param {number} x The integer x coordinate of the tile.\n * @param {number} y The integer y coordinate of the tile.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nTilingScheme.prototype.tileXYToNativeRectangle = DeveloperError.throwInstantiationError;\n\n/**\n * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\n * @function\n *\n * @param {number} x The integer x coordinate of the tile.\n * @param {number} y The integer y coordinate of the tile.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nTilingScheme.prototype.tileXYToRectangle = DeveloperError.throwInstantiationError;\n\n/**\n * Calculates the tile x, y coordinates of the tile containing\n * a given cartographic position.\n * @function\n *\n * @param {Cartographic} position The position.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Cartesian2} The specified 'result', or a new object containing the tile x, y coordinates\n *          if 'result' is undefined.\n */\nTilingScheme.prototype.positionToTileXY = DeveloperError.throwInstantiationError;\nexport default TilingScheme;","map":{"version":3,"names":["DeveloperError","TilingScheme","options","Object","defineProperties","prototype","ellipsoid","get","throwInstantiationError","rectangle","projection","getNumberOfXTilesAtLevel","getNumberOfYTilesAtLevel","rectangleToNativeRectangle","tileXYToNativeRectangle","tileXYToRectangle","positionToTileXY"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/TilingScheme.js"],"sourcesContent":["import DeveloperError from \"./DeveloperError.js\";\n\n/**\n * A tiling scheme for geometry or imagery on the surface of an ellipsoid.  At level-of-detail zero,\n * the coarsest, least-detailed level, the number of tiles is configurable.\n * At level of detail one, each of the level zero tiles has four children, two in each direction.\n * At level of detail two, each of the level one tiles has four children, two in each direction.\n * This continues for as many levels as are present in the geometry or imagery source.\n *\n * @alias TilingScheme\n * @constructor\n *\n * @see WebMercatorTilingScheme\n * @see GeographicTilingScheme\n */\nfunction TilingScheme(options) {\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\n    \"This type should not be instantiated directly.  Instead, use WebMercatorTilingScheme or GeographicTilingScheme.\",\n  );\n  //>>includeEnd('debug');\n}\n\nObject.defineProperties(TilingScheme.prototype, {\n  /**\n   * Gets the ellipsoid that is tiled by the tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the rectangle, in radians, covered by this tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the map projection used by the tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {MapProjection}\n   */\n  projection: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the total number of tiles in the X direction at a specified level-of-detail.\n * @function\n *\n * @param {number} level The level-of-detail.\n * @returns {number} The number of tiles in the X direction at the given level.\n */\nTilingScheme.prototype.getNumberOfXTilesAtLevel =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Gets the total number of tiles in the Y direction at a specified level-of-detail.\n * @function\n *\n * @param {number} level The level-of-detail.\n * @returns {number} The number of tiles in the Y direction at the given level.\n */\nTilingScheme.prototype.getNumberOfYTilesAtLevel =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Transforms a rectangle specified in geodetic radians to the native coordinate system\n * of this tiling scheme.\n * @function\n *\n * @param {Rectangle} rectangle The rectangle to transform.\n * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the native rectangle if 'result'\n *          is undefined.\n */\nTilingScheme.prototype.rectangleToNativeRectangle =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\n * of the tiling scheme.\n * @function\n *\n * @param {number} x The integer x coordinate of the tile.\n * @param {number} y The integer y coordinate of the tile.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nTilingScheme.prototype.tileXYToNativeRectangle =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\n * @function\n *\n * @param {number} x The integer x coordinate of the tile.\n * @param {number} y The integer y coordinate of the tile.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n *          if 'result' is undefined.\n */\nTilingScheme.prototype.tileXYToRectangle =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Calculates the tile x, y coordinates of the tile containing\n * a given cartographic position.\n * @function\n *\n * @param {Cartographic} position The position.\n * @param {number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Cartesian2} The specified 'result', or a new object containing the tile x, y coordinates\n *          if 'result' is undefined.\n */\nTilingScheme.prototype.positionToTileXY =\n  DeveloperError.throwInstantiationError;\nexport default TilingScheme;\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,OAAO,EAAE;EAC7B;EACA,MAAM,IAAIF,cAAc,CACtB,iHACF,CAAC;EACD;AACF;AAEAG,MAAM,CAACC,gBAAgB,CAACH,YAAY,CAACI,SAAS,EAAE;EAC9C;AACF;AACA;AACA;AACA;EACEC,SAAS,EAAE;IACTC,GAAG,EAAEP,cAAc,CAACQ;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,SAAS,EAAE;IACTF,GAAG,EAAEP,cAAc,CAACQ;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,UAAU,EAAE;IACVH,GAAG,EAAEP,cAAc,CAACQ;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,YAAY,CAACI,SAAS,CAACM,wBAAwB,GAC7CX,cAAc,CAACQ,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,YAAY,CAACI,SAAS,CAACO,wBAAwB,GAC7CZ,cAAc,CAACQ,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,YAAY,CAACI,SAAS,CAACQ,0BAA0B,GAC/Cb,cAAc,CAACQ,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,YAAY,CAACI,SAAS,CAACS,uBAAuB,GAC5Cd,cAAc,CAACQ,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,YAAY,CAACI,SAAS,CAACU,iBAAiB,GACtCf,cAAc,CAACQ,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,YAAY,CAACI,SAAS,CAACW,gBAAgB,GACrChB,cAAc,CAACQ,uBAAuB;AACxC,eAAeP,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}