{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix2 from \"../Core/Matrix2.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\n\n/**\n * @private\n * @constructor\n */\nfunction createUniformArray(gl, activeUniform, uniformName, locations) {\n  switch (activeUniform.type) {\n    case gl.FLOAT:\n      return new UniformArrayFloat(gl, activeUniform, uniformName, locations);\n    case gl.FLOAT_VEC2:\n      return new UniformArrayFloatVec2(gl, activeUniform, uniformName, locations);\n    case gl.FLOAT_VEC3:\n      return new UniformArrayFloatVec3(gl, activeUniform, uniformName, locations);\n    case gl.FLOAT_VEC4:\n      return new UniformArrayFloatVec4(gl, activeUniform, uniformName, locations);\n    case gl.SAMPLER_2D:\n    case gl.SAMPLER_CUBE:\n      return new UniformArraySampler(gl, activeUniform, uniformName, locations);\n    case gl.INT:\n    case gl.BOOL:\n      return new UniformArrayInt(gl, activeUniform, uniformName, locations);\n    case gl.INT_VEC2:\n    case gl.BOOL_VEC2:\n      return new UniformArrayIntVec2(gl, activeUniform, uniformName, locations);\n    case gl.INT_VEC3:\n    case gl.BOOL_VEC3:\n      return new UniformArrayIntVec3(gl, activeUniform, uniformName, locations);\n    case gl.INT_VEC4:\n    case gl.BOOL_VEC4:\n      return new UniformArrayIntVec4(gl, activeUniform, uniformName, locations);\n    case gl.FLOAT_MAT2:\n      return new UniformArrayMat2(gl, activeUniform, uniformName, locations);\n    case gl.FLOAT_MAT3:\n      return new UniformArrayMat3(gl, activeUniform, uniformName, locations);\n    case gl.FLOAT_MAT4:\n      return new UniformArrayMat4(gl, activeUniform, uniformName, locations);\n    default:\n      throw new RuntimeError(`Unrecognized uniform type: ${activeUniform.type} for uniform \"${uniformName}\".`);\n  }\n}\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayFloat(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Float32Array(length);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayFloat.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (v !== arraybuffer[i]) {\n      arraybuffer[i] = v;\n      changed = true;\n    }\n  }\n  if (changed) {\n    this._gl.uniform1fv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayFloatVec2(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 2);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayFloatVec2.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (!Cartesian2.equalsArray(v, arraybuffer, j)) {\n      Cartesian2.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 2;\n  }\n  if (changed) {\n    this._gl.uniform2fv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayFloatVec3(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 3);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayFloatVec3.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (defined(v.red)) {\n      if (v.red !== arraybuffer[j] || v.green !== arraybuffer[j + 1] || v.blue !== arraybuffer[j + 2]) {\n        arraybuffer[j] = v.red;\n        arraybuffer[j + 1] = v.green;\n        arraybuffer[j + 2] = v.blue;\n        changed = true;\n      }\n    } else if (defined(v.x)) {\n      if (!Cartesian3.equalsArray(v, arraybuffer, j)) {\n        Cartesian3.pack(v, arraybuffer, j);\n        changed = true;\n      }\n    } else {\n      //>>includeStart('debug', pragmas.debug);\n      throw new DeveloperError(\"Invalid vec3 value.\");\n      //>>includeEnd('debug');\n    }\n    j += 3;\n  }\n  if (changed) {\n    this._gl.uniform3fv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayFloatVec4(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 4);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayFloatVec4.prototype.set = function () {\n  // PERFORMANCE_IDEA: if it is a common case that only a few elements\n  // in a uniform array change, we could use heuristics to determine\n  // when it is better to call uniform4f for each element that changed\n  // vs. call uniform4fv once to set the entire array.  This applies\n  // to all uniform array types, not just vec4.  We might not care\n  // once we have uniform buffers since that will be the fast path.\n\n  // PERFORMANCE_IDEA: Micro-optimization (I bet it works though):\n  // As soon as changed is true, break into a separate loop that\n  // does the copy without the equals check.\n\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (defined(v.red)) {\n      if (!Color.equalsArray(v, arraybuffer, j)) {\n        Color.pack(v, arraybuffer, j);\n        changed = true;\n      }\n    } else if (defined(v.x)) {\n      if (!Cartesian4.equalsArray(v, arraybuffer, j)) {\n        Cartesian4.pack(v, arraybuffer, j);\n        changed = true;\n      }\n    } else {\n      //>>includeStart('debug', pragmas.debug);\n      throw new DeveloperError(\"Invalid vec4 value.\");\n      //>>includeEnd('debug');\n    }\n    j += 4;\n  }\n  if (changed) {\n    this._gl.uniform4fv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArraySampler(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Float32Array(length);\n  this._gl = gl;\n  this._locations = locations;\n  this.textureUnitIndex = undefined;\n}\nUniformArraySampler.prototype.set = function () {\n  const gl = this._gl;\n  const textureUnitIndex = gl.TEXTURE0 + this.textureUnitIndex;\n  const value = this.value;\n  const length = value.length;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    gl.activeTexture(textureUnitIndex + i);\n    gl.bindTexture(v._target, v._texture);\n  }\n};\nUniformArraySampler.prototype._setSampler = function (textureUnitIndex) {\n  this.textureUnitIndex = textureUnitIndex;\n  const locations = this._locations;\n  const length = locations.length;\n  for (let i = 0; i < length; ++i) {\n    const index = textureUnitIndex + i;\n    this._gl.uniform1i(locations[i], index);\n  }\n  return textureUnitIndex + length;\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayInt(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Int32Array(length);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayInt.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (v !== arraybuffer[i]) {\n      arraybuffer[i] = v;\n      changed = true;\n    }\n  }\n  if (changed) {\n    this._gl.uniform1iv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayIntVec2(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Int32Array(length * 2);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayIntVec2.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (!Cartesian2.equalsArray(v, arraybuffer, j)) {\n      Cartesian2.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 2;\n  }\n  if (changed) {\n    this._gl.uniform2iv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayIntVec3(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Int32Array(length * 3);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayIntVec3.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (!Cartesian3.equalsArray(v, arraybuffer, j)) {\n      Cartesian3.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 3;\n  }\n  if (changed) {\n    this._gl.uniform3iv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayIntVec4(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Int32Array(length * 4);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayIntVec4.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (!Cartesian4.equalsArray(v, arraybuffer, j)) {\n      Cartesian4.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 4;\n  }\n  if (changed) {\n    this._gl.uniform4iv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayMat2(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 4);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayMat2.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (!Matrix2.equalsArray(v, arraybuffer, j)) {\n      Matrix2.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 4;\n  }\n  if (changed) {\n    this._gl.uniformMatrix2fv(this._location, false, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayMat3(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 9);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayMat3.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (!Matrix3.equalsArray(v, arraybuffer, j)) {\n      Matrix3.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 9;\n  }\n  if (changed) {\n    this._gl.uniformMatrix3fv(this._location, false, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayMat4(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 16);\n  this._gl = gl;\n  this._location = locations[0];\n}\nUniformArrayMat4.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    if (!Matrix4.equalsArray(v, arraybuffer, j)) {\n      Matrix4.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 16;\n  }\n  if (changed) {\n    this._gl.uniformMatrix4fv(this._location, false, arraybuffer);\n  }\n};\nexport default createUniformArray;","map":{"version":3,"names":["Cartesian2","Cartesian3","Cartesian4","Color","defined","DeveloperError","Matrix2","Matrix3","Matrix4","RuntimeError","createUniformArray","gl","activeUniform","uniformName","locations","type","FLOAT","UniformArrayFloat","FLOAT_VEC2","UniformArrayFloatVec2","FLOAT_VEC3","UniformArrayFloatVec3","FLOAT_VEC4","UniformArrayFloatVec4","SAMPLER_2D","SAMPLER_CUBE","UniformArraySampler","INT","BOOL","UniformArrayInt","INT_VEC2","BOOL_VEC2","UniformArrayIntVec2","INT_VEC3","BOOL_VEC3","UniformArrayIntVec3","INT_VEC4","BOOL_VEC4","UniformArrayIntVec4","FLOAT_MAT2","UniformArrayMat2","FLOAT_MAT3","UniformArrayMat3","FLOAT_MAT4","UniformArrayMat4","length","name","value","Array","_value","Float32Array","_gl","_location","prototype","set","arraybuffer","changed","i","v","uniform1fv","j","equalsArray","pack","uniform2fv","red","green","blue","x","uniform3fv","uniform4fv","_locations","textureUnitIndex","undefined","TEXTURE0","activeTexture","bindTexture","_target","_texture","_setSampler","index","uniform1i","Int32Array","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/createUniformArray.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix2 from \"../Core/Matrix2.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\n\n/**\n * @private\n * @constructor\n */\nfunction createUniformArray(gl, activeUniform, uniformName, locations) {\n  switch (activeUniform.type) {\n    case gl.FLOAT:\n      return new UniformArrayFloat(gl, activeUniform, uniformName, locations);\n    case gl.FLOAT_VEC2:\n      return new UniformArrayFloatVec2(\n        gl,\n        activeUniform,\n        uniformName,\n        locations,\n      );\n    case gl.FLOAT_VEC3:\n      return new UniformArrayFloatVec3(\n        gl,\n        activeUniform,\n        uniformName,\n        locations,\n      );\n    case gl.FLOAT_VEC4:\n      return new UniformArrayFloatVec4(\n        gl,\n        activeUniform,\n        uniformName,\n        locations,\n      );\n    case gl.SAMPLER_2D:\n    case gl.SAMPLER_CUBE:\n      return new UniformArraySampler(gl, activeUniform, uniformName, locations);\n    case gl.INT:\n    case gl.BOOL:\n      return new UniformArrayInt(gl, activeUniform, uniformName, locations);\n    case gl.INT_VEC2:\n    case gl.BOOL_VEC2:\n      return new UniformArrayIntVec2(gl, activeUniform, uniformName, locations);\n    case gl.INT_VEC3:\n    case gl.BOOL_VEC3:\n      return new UniformArrayIntVec3(gl, activeUniform, uniformName, locations);\n    case gl.INT_VEC4:\n    case gl.BOOL_VEC4:\n      return new UniformArrayIntVec4(gl, activeUniform, uniformName, locations);\n    case gl.FLOAT_MAT2:\n      return new UniformArrayMat2(gl, activeUniform, uniformName, locations);\n    case gl.FLOAT_MAT3:\n      return new UniformArrayMat3(gl, activeUniform, uniformName, locations);\n    case gl.FLOAT_MAT4:\n      return new UniformArrayMat4(gl, activeUniform, uniformName, locations);\n    default:\n      throw new RuntimeError(\n        `Unrecognized uniform type: ${activeUniform.type} for uniform \"${uniformName}\".`,\n      );\n  }\n}\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayFloat(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Float32Array(length);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayFloat.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (v !== arraybuffer[i]) {\n      arraybuffer[i] = v;\n      changed = true;\n    }\n  }\n\n  if (changed) {\n    this._gl.uniform1fv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayFloatVec2(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 2);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayFloatVec2.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (!Cartesian2.equalsArray(v, arraybuffer, j)) {\n      Cartesian2.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 2;\n  }\n\n  if (changed) {\n    this._gl.uniform2fv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayFloatVec3(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 3);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayFloatVec3.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (defined(v.red)) {\n      if (\n        v.red !== arraybuffer[j] ||\n        v.green !== arraybuffer[j + 1] ||\n        v.blue !== arraybuffer[j + 2]\n      ) {\n        arraybuffer[j] = v.red;\n        arraybuffer[j + 1] = v.green;\n        arraybuffer[j + 2] = v.blue;\n        changed = true;\n      }\n    } else if (defined(v.x)) {\n      if (!Cartesian3.equalsArray(v, arraybuffer, j)) {\n        Cartesian3.pack(v, arraybuffer, j);\n        changed = true;\n      }\n    } else {\n      //>>includeStart('debug', pragmas.debug);\n      throw new DeveloperError(\"Invalid vec3 value.\");\n      //>>includeEnd('debug');\n    }\n\n    j += 3;\n  }\n\n  if (changed) {\n    this._gl.uniform3fv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayFloatVec4(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 4);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayFloatVec4.prototype.set = function () {\n  // PERFORMANCE_IDEA: if it is a common case that only a few elements\n  // in a uniform array change, we could use heuristics to determine\n  // when it is better to call uniform4f for each element that changed\n  // vs. call uniform4fv once to set the entire array.  This applies\n  // to all uniform array types, not just vec4.  We might not care\n  // once we have uniform buffers since that will be the fast path.\n\n  // PERFORMANCE_IDEA: Micro-optimization (I bet it works though):\n  // As soon as changed is true, break into a separate loop that\n  // does the copy without the equals check.\n\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (defined(v.red)) {\n      if (!Color.equalsArray(v, arraybuffer, j)) {\n        Color.pack(v, arraybuffer, j);\n        changed = true;\n      }\n    } else if (defined(v.x)) {\n      if (!Cartesian4.equalsArray(v, arraybuffer, j)) {\n        Cartesian4.pack(v, arraybuffer, j);\n        changed = true;\n      }\n    } else {\n      //>>includeStart('debug', pragmas.debug);\n      throw new DeveloperError(\"Invalid vec4 value.\");\n      //>>includeEnd('debug');\n    }\n\n    j += 4;\n  }\n\n  if (changed) {\n    this._gl.uniform4fv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArraySampler(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Float32Array(length);\n\n  this._gl = gl;\n  this._locations = locations;\n\n  this.textureUnitIndex = undefined;\n}\n\nUniformArraySampler.prototype.set = function () {\n  const gl = this._gl;\n  const textureUnitIndex = gl.TEXTURE0 + this.textureUnitIndex;\n\n  const value = this.value;\n  const length = value.length;\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n    gl.activeTexture(textureUnitIndex + i);\n    gl.bindTexture(v._target, v._texture);\n  }\n};\n\nUniformArraySampler.prototype._setSampler = function (textureUnitIndex) {\n  this.textureUnitIndex = textureUnitIndex;\n\n  const locations = this._locations;\n  const length = locations.length;\n  for (let i = 0; i < length; ++i) {\n    const index = textureUnitIndex + i;\n    this._gl.uniform1i(locations[i], index);\n  }\n\n  return textureUnitIndex + length;\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayInt(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Int32Array(length);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayInt.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (v !== arraybuffer[i]) {\n      arraybuffer[i] = v;\n      changed = true;\n    }\n  }\n\n  if (changed) {\n    this._gl.uniform1iv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayIntVec2(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Int32Array(length * 2);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayIntVec2.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (!Cartesian2.equalsArray(v, arraybuffer, j)) {\n      Cartesian2.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 2;\n  }\n\n  if (changed) {\n    this._gl.uniform2iv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayIntVec3(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Int32Array(length * 3);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayIntVec3.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (!Cartesian3.equalsArray(v, arraybuffer, j)) {\n      Cartesian3.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 3;\n  }\n\n  if (changed) {\n    this._gl.uniform3iv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayIntVec4(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Int32Array(length * 4);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayIntVec4.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (!Cartesian4.equalsArray(v, arraybuffer, j)) {\n      Cartesian4.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 4;\n  }\n\n  if (changed) {\n    this._gl.uniform4iv(this._location, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayMat2(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 4);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayMat2.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (!Matrix2.equalsArray(v, arraybuffer, j)) {\n      Matrix2.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 4;\n  }\n\n  if (changed) {\n    this._gl.uniformMatrix2fv(this._location, false, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayMat3(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 9);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayMat3.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (!Matrix3.equalsArray(v, arraybuffer, j)) {\n      Matrix3.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 9;\n  }\n\n  if (changed) {\n    this._gl.uniformMatrix3fv(this._location, false, arraybuffer);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n * @constructor\n */\nfunction UniformArrayMat4(gl, activeUniform, uniformName, locations) {\n  const length = locations.length;\n\n  /**\n   * @type {string}\n   * @readonly\n   */\n  this.name = uniformName;\n\n  this.value = new Array(length);\n  this._value = new Float32Array(length * 16);\n\n  this._gl = gl;\n  this._location = locations[0];\n}\n\nUniformArrayMat4.prototype.set = function () {\n  const value = this.value;\n  const length = value.length;\n  const arraybuffer = this._value;\n  let changed = false;\n  let j = 0;\n\n  for (let i = 0; i < length; ++i) {\n    const v = value[i];\n\n    if (!Matrix4.equalsArray(v, arraybuffer, j)) {\n      Matrix4.pack(v, arraybuffer, j);\n      changed = true;\n    }\n    j += 16;\n  }\n\n  if (changed) {\n    this._gl.uniformMatrix4fv(this._location, false, arraybuffer);\n  }\n};\nexport default createUniformArray;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}