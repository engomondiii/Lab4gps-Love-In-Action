{"ast":null,"code":"import Check from \"../../Core/Check.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\n\n/**\n * An enum to distinguish the different uses for {@link Model},\n * which include individual glTF models, and various 3D Tiles formats\n * (including glTF via <code>3DTILES_content_gltf</code>).\n *\n * @enum {string}\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nconst ModelType = {\n  /**\n   * An individual glTF model.\n   * <p>\n   * Not to be confused with {@link ModelType.TILE_GLTF}\n   * which is for 3D Tiles\n   * </p>\n   *\n   * @type {string}\n   * @constant\n   */\n  GLTF: \"GLTF\",\n  /**\n   * A glTF model used as tile content in a 3D Tileset via\n   * <code>3DTILES_content_gltf</code>.\n   * <p>\n   * Not to be confused with {@link ModelType.GLTF}\n   * which is for individual models\n   * </p>\n   *\n   * @type {string}\n   * @constant\n   */\n  TILE_GLTF: \"TILE_GLTF\",\n  /**\n   * A 3D Tiles 1.0 Batched 3D Model\n   *\n   * @type {string}\n   * @constant\n   */\n  TILE_B3DM: \"B3DM\",\n  /**\n   * A 3D Tiles 1.0 Instanced 3D Model\n   *\n   * @type {string}\n   * @constant\n   */\n  TILE_I3DM: \"I3DM\",\n  /**\n   * A 3D Tiles 1.0 Point Cloud\n   *\n   * @type {string}\n   * @constant\n   */\n  TILE_PNTS: \"PNTS\",\n  /**\n   * GeoJSON content for <code>MAXAR_content_geojson</code> extension\n   *\n   * @type {string}\n   * @constant\n   */\n  TILE_GEOJSON: \"TILE_GEOJSON\"\n};\n\n/**\n * Check if a model is used for 3D Tiles.\n * @param {ModelType} modelType The type of model\n * @returns {boolean} <code>true</code> if the model is a 3D Tiles format, <code>false</code> otherwise\n */\nModelType.is3DTiles = function (modelType) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"modelType\", modelType);\n  //>>includeEnd('debug');\n\n  switch (modelType) {\n    case ModelType.TILE_GLTF:\n    case ModelType.TILE_B3DM:\n    case ModelType.TILE_I3DM:\n    case ModelType.TILE_PNTS:\n    case ModelType.TILE_GEOJSON:\n      return true;\n    case ModelType.GLTF:\n      return false;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"modelType is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\nexport default Object.freeze(ModelType);","map":{"version":3,"names":["Check","DeveloperError","ModelType","GLTF","TILE_GLTF","TILE_B3DM","TILE_I3DM","TILE_PNTS","TILE_GEOJSON","is3DTiles","modelType","typeOf","string","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/ModelType.js"],"sourcesContent":["import Check from \"../../Core/Check.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\n\n/**\n * An enum to distinguish the different uses for {@link Model},\n * which include individual glTF models, and various 3D Tiles formats\n * (including glTF via <code>3DTILES_content_gltf</code>).\n *\n * @enum {string}\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nconst ModelType = {\n  /**\n   * An individual glTF model.\n   * <p>\n   * Not to be confused with {@link ModelType.TILE_GLTF}\n   * which is for 3D Tiles\n   * </p>\n   *\n   * @type {string}\n   * @constant\n   */\n  GLTF: \"GLTF\",\n  /**\n   * A glTF model used as tile content in a 3D Tileset via\n   * <code>3DTILES_content_gltf</code>.\n   * <p>\n   * Not to be confused with {@link ModelType.GLTF}\n   * which is for individual models\n   * </p>\n   *\n   * @type {string}\n   * @constant\n   */\n  TILE_GLTF: \"TILE_GLTF\",\n  /**\n   * A 3D Tiles 1.0 Batched 3D Model\n   *\n   * @type {string}\n   * @constant\n   */\n  TILE_B3DM: \"B3DM\",\n  /**\n   * A 3D Tiles 1.0 Instanced 3D Model\n   *\n   * @type {string}\n   * @constant\n   */\n  TILE_I3DM: \"I3DM\",\n  /**\n   * A 3D Tiles 1.0 Point Cloud\n   *\n   * @type {string}\n   * @constant\n   */\n  TILE_PNTS: \"PNTS\",\n\n  /**\n   * GeoJSON content for <code>MAXAR_content_geojson</code> extension\n   *\n   * @type {string}\n   * @constant\n   */\n  TILE_GEOJSON: \"TILE_GEOJSON\",\n};\n\n/**\n * Check if a model is used for 3D Tiles.\n * @param {ModelType} modelType The type of model\n * @returns {boolean} <code>true</code> if the model is a 3D Tiles format, <code>false</code> otherwise\n */\nModelType.is3DTiles = function (modelType) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"modelType\", modelType);\n  //>>includeEnd('debug');\n\n  switch (modelType) {\n    case ModelType.TILE_GLTF:\n    case ModelType.TILE_B3DM:\n    case ModelType.TILE_I3DM:\n    case ModelType.TILE_PNTS:\n    case ModelType.TILE_GEOJSON:\n      return true;\n    case ModelType.GLTF:\n      return false;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"modelType is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\nexport default Object.freeze(ModelType);\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,qBAAqB;AACvC,OAAOC,cAAc,MAAM,8BAA8B;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG;EAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,IAAI,EAAE,MAAM;EACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,WAAW;EACtB;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,MAAM;EACjB;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,MAAM;EACjB;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,MAAM;EAEjB;AACF;AACA;AACA;AACA;AACA;EACEC,YAAY,EAAE;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAN,SAAS,CAACO,SAAS,GAAG,UAAUC,SAAS,EAAE;EACzC;EACAV,KAAK,CAACW,MAAM,CAACC,MAAM,CAAC,WAAW,EAAEF,SAAS,CAAC;EAC3C;;EAEA,QAAQA,SAAS;IACf,KAAKR,SAAS,CAACE,SAAS;IACxB,KAAKF,SAAS,CAACG,SAAS;IACxB,KAAKH,SAAS,CAACI,SAAS;IACxB,KAAKJ,SAAS,CAACK,SAAS;IACxB,KAAKL,SAAS,CAACM,YAAY;MACzB,OAAO,IAAI;IACb,KAAKN,SAAS,CAACC,IAAI;MACjB,OAAO,KAAK;IACd;IACA;MACE,MAAM,IAAIF,cAAc,CAAC,iCAAiC,CAAC;IAC7D;EACF;AACF,CAAC;AAED,eAAeY,MAAM,CAACC,MAAM,CAACZ,SAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}