{"ast":null,"code":"import defined from \"./defined.js\";\n\n/**\n * @private\n */\nfunction DoublyLinkedList() {\n  this.head = undefined;\n  this.tail = undefined;\n  this._length = 0;\n}\nObject.defineProperties(DoublyLinkedList.prototype, {\n  length: {\n    get: function () {\n      return this._length;\n    }\n  }\n});\n\n/**\n * @private\n */\nfunction DoublyLinkedListNode(item, previous, next) {\n  this.item = item;\n  this.previous = previous;\n  this.next = next;\n}\n\n/**\n * Adds the item to the end of the list\n * @param {*} [item]\n * @return {DoublyLinkedListNode}\n */\nDoublyLinkedList.prototype.add = function (item) {\n  const node = new DoublyLinkedListNode(item, this.tail, undefined);\n  if (defined(this.tail)) {\n    this.tail.next = node;\n    this.tail = node;\n  } else {\n    this.head = node;\n    this.tail = node;\n  }\n  ++this._length;\n  return node;\n};\nfunction remove(list, node) {\n  if (defined(node.previous) && defined(node.next)) {\n    node.previous.next = node.next;\n    node.next.previous = node.previous;\n  } else if (defined(node.previous)) {\n    // Remove last node\n    node.previous.next = undefined;\n    list.tail = node.previous;\n  } else if (defined(node.next)) {\n    // Remove first node\n    node.next.previous = undefined;\n    list.head = node.next;\n  } else {\n    // Remove last node in the linked list\n    list.head = undefined;\n    list.tail = undefined;\n  }\n  node.next = undefined;\n  node.previous = undefined;\n}\n\n/**\n * Removes the given node from the list\n * @param {DoublyLinkedListNode} node\n */\nDoublyLinkedList.prototype.remove = function (node) {\n  if (!defined(node)) {\n    return;\n  }\n  remove(this, node);\n  --this._length;\n};\n\n/**\n * Moves nextNode after node\n * @param {DoublyLinkedListNode} node\n * @param {DoublyLinkedListNode} nextNode\n */\nDoublyLinkedList.prototype.splice = function (node, nextNode) {\n  if (node === nextNode) {\n    return;\n  }\n\n  // Remove nextNode, then insert after node\n  remove(this, nextNode);\n  const oldNodeNext = node.next;\n  node.next = nextNode;\n\n  // nextNode is the new tail\n  if (this.tail === node) {\n    this.tail = nextNode;\n  } else {\n    oldNodeNext.previous = nextNode;\n  }\n  nextNode.next = oldNodeNext;\n  nextNode.previous = node;\n};\nexport default DoublyLinkedList;","map":{"version":3,"names":["defined","DoublyLinkedList","head","undefined","tail","_length","Object","defineProperties","prototype","length","get","DoublyLinkedListNode","item","previous","next","add","node","remove","list","splice","nextNode","oldNodeNext"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/DoublyLinkedList.js"],"sourcesContent":["import defined from \"./defined.js\";\n\n/**\n * @private\n */\nfunction DoublyLinkedList() {\n  this.head = undefined;\n  this.tail = undefined;\n  this._length = 0;\n}\n\nObject.defineProperties(DoublyLinkedList.prototype, {\n  length: {\n    get: function () {\n      return this._length;\n    },\n  },\n});\n\n/**\n * @private\n */\nfunction DoublyLinkedListNode(item, previous, next) {\n  this.item = item;\n  this.previous = previous;\n  this.next = next;\n}\n\n/**\n * Adds the item to the end of the list\n * @param {*} [item]\n * @return {DoublyLinkedListNode}\n */\nDoublyLinkedList.prototype.add = function (item) {\n  const node = new DoublyLinkedListNode(item, this.tail, undefined);\n\n  if (defined(this.tail)) {\n    this.tail.next = node;\n    this.tail = node;\n  } else {\n    this.head = node;\n    this.tail = node;\n  }\n\n  ++this._length;\n\n  return node;\n};\n\nfunction remove(list, node) {\n  if (defined(node.previous) && defined(node.next)) {\n    node.previous.next = node.next;\n    node.next.previous = node.previous;\n  } else if (defined(node.previous)) {\n    // Remove last node\n    node.previous.next = undefined;\n    list.tail = node.previous;\n  } else if (defined(node.next)) {\n    // Remove first node\n    node.next.previous = undefined;\n    list.head = node.next;\n  } else {\n    // Remove last node in the linked list\n    list.head = undefined;\n    list.tail = undefined;\n  }\n\n  node.next = undefined;\n  node.previous = undefined;\n}\n\n/**\n * Removes the given node from the list\n * @param {DoublyLinkedListNode} node\n */\nDoublyLinkedList.prototype.remove = function (node) {\n  if (!defined(node)) {\n    return;\n  }\n\n  remove(this, node);\n\n  --this._length;\n};\n\n/**\n * Moves nextNode after node\n * @param {DoublyLinkedListNode} node\n * @param {DoublyLinkedListNode} nextNode\n */\nDoublyLinkedList.prototype.splice = function (node, nextNode) {\n  if (node === nextNode) {\n    return;\n  }\n\n  // Remove nextNode, then insert after node\n  remove(this, nextNode);\n\n  const oldNodeNext = node.next;\n  node.next = nextNode;\n\n  // nextNode is the new tail\n  if (this.tail === node) {\n    this.tail = nextNode;\n  } else {\n    oldNodeNext.previous = nextNode;\n  }\n\n  nextNode.next = oldNodeNext;\n  nextNode.previous = node;\n};\nexport default DoublyLinkedList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}