{"ast":null,"code":"import defined from \"../Core/defined.js\";\n\n/**\n * Describes a rasterized feature, such as a point, polygon, polyline, etc., in an imagery layer.\n *\n * @alias ImageryLayerFeatureInfo\n * @constructor\n */\nfunction ImageryLayerFeatureInfo() {\n  /**\n   * Gets or sets the name of the feature.\n   * @type {string|undefined}\n   */\n  this.name = undefined;\n\n  /**\n   * Gets or sets an HTML description of the feature.  The HTML is not trusted and should\n   * be sanitized before display to the user.\n   * @type {string|undefined}\n   */\n  this.description = undefined;\n\n  /**\n   * Gets or sets the position of the feature, or undefined if the position is not known.\n   *\n   * @type {Cartographic|undefined}\n   */\n  this.position = undefined;\n\n  /**\n   * Gets or sets the raw data describing the feature.  The raw data may be in any\n   * number of formats, such as GeoJSON, KML, etc.\n   * @type {object|undefined}\n   */\n  this.data = undefined;\n\n  /**\n   * Gets or sets the image layer of the feature.\n   * @type {object|undefined}\n   */\n  this.imageryLayer = undefined;\n}\n\n/**\n * Configures the name of this feature by selecting an appropriate property.  The name will be obtained from\n * one of the following sources, in this order: 1) the property with the name 'name', 2) the property with the name 'title',\n * 3) the first property containing the word 'name', 4) the first property containing the word 'title'.  If\n * the name cannot be obtained from any of these sources, the existing name will be left unchanged.\n *\n * @param {object} properties An object literal containing the properties of the feature.\n */\nImageryLayerFeatureInfo.prototype.configureNameFromProperties = function (properties) {\n  let namePropertyPrecedence = 10;\n  let nameProperty;\n  for (const key in properties) {\n    if (properties.hasOwnProperty(key) && properties[key]) {\n      const lowerKey = key.toLowerCase();\n      if (namePropertyPrecedence > 1 && lowerKey === \"name\") {\n        namePropertyPrecedence = 1;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 2 && lowerKey === \"title\") {\n        namePropertyPrecedence = 2;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 3 && /name/i.test(key)) {\n        namePropertyPrecedence = 3;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 4 && /title/i.test(key)) {\n        namePropertyPrecedence = 4;\n        nameProperty = key;\n      }\n    }\n  }\n  if (defined(nameProperty)) {\n    this.name = properties[nameProperty];\n  }\n};\n\n/**\n * Configures the description of this feature by creating an HTML table of properties and their values.\n *\n * @param {object} properties An object literal containing the properties of the feature.\n */\nImageryLayerFeatureInfo.prototype.configureDescriptionFromProperties = function (properties) {\n  function describe(properties) {\n    let html = '<table class=\"cesium-infoBox-defaultTable\">';\n    for (const key in properties) {\n      if (properties.hasOwnProperty(key)) {\n        const value = properties[key];\n        if (defined(value)) {\n          if (typeof value === \"object\") {\n            html += `<tr><td>${key}</td><td>${describe(value)}</td></tr>`;\n          } else {\n            html += `<tr><td>${key}</td><td>${value}</td></tr>`;\n          }\n        }\n      }\n    }\n    html += \"</table>\";\n    return html;\n  }\n  this.description = describe(properties);\n};\nexport default ImageryLayerFeatureInfo;","map":{"version":3,"names":["defined","ImageryLayerFeatureInfo","name","undefined","description","position","data","imageryLayer","prototype","configureNameFromProperties","properties","namePropertyPrecedence","nameProperty","key","hasOwnProperty","lowerKey","toLowerCase","test","configureDescriptionFromProperties","describe","html","value"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ImageryLayerFeatureInfo.js"],"sourcesContent":["import defined from \"../Core/defined.js\";\n\n/**\n * Describes a rasterized feature, such as a point, polygon, polyline, etc., in an imagery layer.\n *\n * @alias ImageryLayerFeatureInfo\n * @constructor\n */\nfunction ImageryLayerFeatureInfo() {\n  /**\n   * Gets or sets the name of the feature.\n   * @type {string|undefined}\n   */\n  this.name = undefined;\n\n  /**\n   * Gets or sets an HTML description of the feature.  The HTML is not trusted and should\n   * be sanitized before display to the user.\n   * @type {string|undefined}\n   */\n  this.description = undefined;\n\n  /**\n   * Gets or sets the position of the feature, or undefined if the position is not known.\n   *\n   * @type {Cartographic|undefined}\n   */\n  this.position = undefined;\n\n  /**\n   * Gets or sets the raw data describing the feature.  The raw data may be in any\n   * number of formats, such as GeoJSON, KML, etc.\n   * @type {object|undefined}\n   */\n  this.data = undefined;\n\n  /**\n   * Gets or sets the image layer of the feature.\n   * @type {object|undefined}\n   */\n  this.imageryLayer = undefined;\n}\n\n/**\n * Configures the name of this feature by selecting an appropriate property.  The name will be obtained from\n * one of the following sources, in this order: 1) the property with the name 'name', 2) the property with the name 'title',\n * 3) the first property containing the word 'name', 4) the first property containing the word 'title'.  If\n * the name cannot be obtained from any of these sources, the existing name will be left unchanged.\n *\n * @param {object} properties An object literal containing the properties of the feature.\n */\nImageryLayerFeatureInfo.prototype.configureNameFromProperties = function (\n  properties,\n) {\n  let namePropertyPrecedence = 10;\n  let nameProperty;\n\n  for (const key in properties) {\n    if (properties.hasOwnProperty(key) && properties[key]) {\n      const lowerKey = key.toLowerCase();\n\n      if (namePropertyPrecedence > 1 && lowerKey === \"name\") {\n        namePropertyPrecedence = 1;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 2 && lowerKey === \"title\") {\n        namePropertyPrecedence = 2;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 3 && /name/i.test(key)) {\n        namePropertyPrecedence = 3;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 4 && /title/i.test(key)) {\n        namePropertyPrecedence = 4;\n        nameProperty = key;\n      }\n    }\n  }\n\n  if (defined(nameProperty)) {\n    this.name = properties[nameProperty];\n  }\n};\n\n/**\n * Configures the description of this feature by creating an HTML table of properties and their values.\n *\n * @param {object} properties An object literal containing the properties of the feature.\n */\nImageryLayerFeatureInfo.prototype.configureDescriptionFromProperties =\n  function (properties) {\n    function describe(properties) {\n      let html = '<table class=\"cesium-infoBox-defaultTable\">';\n      for (const key in properties) {\n        if (properties.hasOwnProperty(key)) {\n          const value = properties[key];\n          if (defined(value)) {\n            if (typeof value === \"object\") {\n              html += `<tr><td>${key}</td><td>${describe(value)}</td></tr>`;\n            } else {\n              html += `<tr><td>${key}</td><td>${value}</td></tr>`;\n            }\n          }\n        }\n      }\n      html += \"</table>\";\n\n      return html;\n    }\n\n    this.description = describe(properties);\n  };\nexport default ImageryLayerFeatureInfo;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,oBAAoB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAAA,EAAG;EACjC;AACF;AACA;AACA;EACE,IAAI,CAACC,IAAI,GAAGC,SAAS;;EAErB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,WAAW,GAAGD,SAAS;;EAE5B;AACF;AACA;AACA;AACA;EACE,IAAI,CAACE,QAAQ,GAAGF,SAAS;;EAEzB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACG,IAAI,GAAGH,SAAS;;EAErB;AACF;AACA;AACA;EACE,IAAI,CAACI,YAAY,GAAGJ,SAAS;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,uBAAuB,CAACO,SAAS,CAACC,2BAA2B,GAAG,UAC9DC,UAAU,EACV;EACA,IAAIC,sBAAsB,GAAG,EAAE;EAC/B,IAAIC,YAAY;EAEhB,KAAK,MAAMC,GAAG,IAAIH,UAAU,EAAE;IAC5B,IAAIA,UAAU,CAACI,cAAc,CAACD,GAAG,CAAC,IAAIH,UAAU,CAACG,GAAG,CAAC,EAAE;MACrD,MAAME,QAAQ,GAAGF,GAAG,CAACG,WAAW,CAAC,CAAC;MAElC,IAAIL,sBAAsB,GAAG,CAAC,IAAII,QAAQ,KAAK,MAAM,EAAE;QACrDJ,sBAAsB,GAAG,CAAC;QAC1BC,YAAY,GAAGC,GAAG;MACpB,CAAC,MAAM,IAAIF,sBAAsB,GAAG,CAAC,IAAII,QAAQ,KAAK,OAAO,EAAE;QAC7DJ,sBAAsB,GAAG,CAAC;QAC1BC,YAAY,GAAGC,GAAG;MACpB,CAAC,MAAM,IAAIF,sBAAsB,GAAG,CAAC,IAAI,OAAO,CAACM,IAAI,CAACJ,GAAG,CAAC,EAAE;QAC1DF,sBAAsB,GAAG,CAAC;QAC1BC,YAAY,GAAGC,GAAG;MACpB,CAAC,MAAM,IAAIF,sBAAsB,GAAG,CAAC,IAAI,QAAQ,CAACM,IAAI,CAACJ,GAAG,CAAC,EAAE;QAC3DF,sBAAsB,GAAG,CAAC;QAC1BC,YAAY,GAAGC,GAAG;MACpB;IACF;EACF;EAEA,IAAIb,OAAO,CAACY,YAAY,CAAC,EAAE;IACzB,IAAI,CAACV,IAAI,GAAGQ,UAAU,CAACE,YAAY,CAAC;EACtC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAX,uBAAuB,CAACO,SAAS,CAACU,kCAAkC,GAClE,UAAUR,UAAU,EAAE;EACpB,SAASS,QAAQA,CAACT,UAAU,EAAE;IAC5B,IAAIU,IAAI,GAAG,6CAA6C;IACxD,KAAK,MAAMP,GAAG,IAAIH,UAAU,EAAE;MAC5B,IAAIA,UAAU,CAACI,cAAc,CAACD,GAAG,CAAC,EAAE;QAClC,MAAMQ,KAAK,GAAGX,UAAU,CAACG,GAAG,CAAC;QAC7B,IAAIb,OAAO,CAACqB,KAAK,CAAC,EAAE;UAClB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;YAC7BD,IAAI,IAAI,WAAWP,GAAG,YAAYM,QAAQ,CAACE,KAAK,CAAC,YAAY;UAC/D,CAAC,MAAM;YACLD,IAAI,IAAI,WAAWP,GAAG,YAAYQ,KAAK,YAAY;UACrD;QACF;MACF;IACF;IACAD,IAAI,IAAI,UAAU;IAElB,OAAOA,IAAI;EACb;EAEA,IAAI,CAAChB,WAAW,GAAGe,QAAQ,CAACT,UAAU,CAAC;AACzC,CAAC;AACH,eAAeT,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}