{"ast":null,"code":"import arrayRemoveDuplicates from \"../Core/arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PolylinePipeline from \"../Core/PolylinePipeline.js\";\nimport Material from \"./Material.js\";\n\n/**\n * <div class=\"notice\">\n * Create this by calling {@link PolylineCollection#add}. Do not call the constructor directly.\n * </div>\n *\n * A renderable polyline.\n *\n * @alias Polyline\n * @internalConstructor\n * @class\n *\n * @privateParam {object} options Object with the following properties:\n * @privateParam {boolean} [options.show=true] <code>true</code> if this polyline will be shown; otherwise, <code>false</code>.\n * @privateParam {number} [options.width=1.0] The width of the polyline in pixels.\n * @privateParam {boolean} [options.loop=false] Whether a line segment will be added between the last and first line positions to make this line a loop.\n * @privateParam {Material} [options.material=Material.ColorType] The material.\n * @privateParam {Cartesian3[]} [options.positions] The positions.\n * @privateParam {object} [options.id] The user-defined object to be returned when this polyline is picked.\n * @privateParam {DistanceDisplayCondition} [options.distanceDisplayCondition] The condition specifying at what distance from the camera that this polyline will be displayed.\n * @privateParam {PolylineCollection} polylineCollection The renderable polyline collection.\n *\n * @see PolylineCollection\n *\n */\nfunction Polyline(options, polylineCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._show = defaultValue(options.show, true);\n  this._width = defaultValue(options.width, 1.0);\n  this._loop = defaultValue(options.loop, false);\n  this._distanceDisplayCondition = options.distanceDisplayCondition;\n  this._material = options.material;\n  if (!defined(this._material)) {\n    this._material = Material.fromType(Material.ColorType, {\n      color: new Color(1.0, 1.0, 1.0, 1.0)\n    });\n  }\n  let positions = options.positions;\n  if (!defined(positions)) {\n    positions = [];\n  }\n  this._positions = positions;\n  this._actualPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n  if (this._loop && this._actualPositions.length > 2) {\n    if (this._actualPositions === this._positions) {\n      this._actualPositions = positions.slice();\n    }\n    this._actualPositions.push(Cartesian3.clone(this._actualPositions[0]));\n  }\n  this._length = this._actualPositions.length;\n  this._id = options.id;\n  let modelMatrix;\n  if (defined(polylineCollection)) {\n    modelMatrix = Matrix4.clone(polylineCollection.modelMatrix);\n  }\n  this._modelMatrix = modelMatrix;\n  this._segments = PolylinePipeline.wrapLongitude(this._actualPositions, modelMatrix);\n  this._actualLength = undefined;\n\n  // eslint-disable-next-line no-use-before-define\n  this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n  this._polylineCollection = polylineCollection;\n  this._dirty = false;\n  this._pickId = undefined;\n  this._boundingVolume = BoundingSphere.fromPoints(this._actualPositions);\n  this._boundingVolumeWC = BoundingSphere.transform(this._boundingVolume, this._modelMatrix);\n  this._boundingVolume2D = new BoundingSphere(); // modified in PolylineCollection\n}\nconst POSITION_INDEX = Polyline.POSITION_INDEX = 0;\nconst SHOW_INDEX = Polyline.SHOW_INDEX = 1;\nconst WIDTH_INDEX = Polyline.WIDTH_INDEX = 2;\nconst MATERIAL_INDEX = Polyline.MATERIAL_INDEX = 3;\nconst POSITION_SIZE_INDEX = Polyline.POSITION_SIZE_INDEX = 4;\nconst DISTANCE_DISPLAY_CONDITION = Polyline.DISTANCE_DISPLAY_CONDITION = 5;\nconst NUMBER_OF_PROPERTIES = Polyline.NUMBER_OF_PROPERTIES = 6;\nfunction makeDirty(polyline, propertyChanged) {\n  ++polyline._propertiesChanged[propertyChanged];\n  const polylineCollection = polyline._polylineCollection;\n  if (defined(polylineCollection)) {\n    polylineCollection._updatePolyline(polyline, propertyChanged);\n    polyline._dirty = true;\n  }\n}\nObject.defineProperties(Polyline.prototype, {\n  /**\n   * Determines if this polyline will be shown.  Use this to hide or show a polyline, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof Polyline.prototype\n   * @type {boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value !== this._show) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the positions of the polyline.\n   * @memberof Polyline.prototype\n   * @type {Cartesian3[]}\n   * @example\n   * polyline.positions = Cesium.Cartesian3.fromDegreesArray([\n   *     0.0, 0.0,\n   *     10.0, 0.0,\n   *     0.0, 20.0\n   * ]);\n   */\n  positions: {\n    get: function () {\n      return this._positions;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      let positions = arrayRemoveDuplicates(value, Cartesian3.equalsEpsilon);\n      if (this._loop && positions.length > 2) {\n        if (positions === value) {\n          positions = value.slice();\n        }\n        positions.push(Cartesian3.clone(positions[0]));\n      }\n      if (this._actualPositions.length !== positions.length || this._actualPositions.length !== this._length) {\n        makeDirty(this, POSITION_SIZE_INDEX);\n      }\n      this._positions = value;\n      this._actualPositions = positions;\n      this._length = positions.length;\n      this._boundingVolume = BoundingSphere.fromPoints(this._actualPositions, this._boundingVolume);\n      this._boundingVolumeWC = BoundingSphere.transform(this._boundingVolume, this._modelMatrix, this._boundingVolumeWC);\n      makeDirty(this, POSITION_INDEX);\n      this.update();\n    }\n  },\n  /**\n   * Gets or sets the surface appearance of the polyline.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * @memberof Polyline.prototype\n   * @type {Material}\n   */\n  material: {\n    get: function () {\n      return this._material;\n    },\n    set: function (material) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(material)) {\n        throw new DeveloperError(\"material is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._material !== material) {\n        this._material = material;\n        makeDirty(this, MATERIAL_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the width of the polyline.\n   * @memberof Polyline.prototype\n   * @type {number}\n   */\n  width: {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      const width = this._width;\n      if (value !== width) {\n        this._width = value;\n        makeDirty(this, WIDTH_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets whether a line segment will be added between the first and last polyline positions.\n   * @memberof Polyline.prototype\n   * @type {boolean}\n   */\n  loop: {\n    get: function () {\n      return this._loop;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value !== this._loop) {\n        let positions = this._actualPositions;\n        if (value) {\n          if (positions.length > 2 && !Cartesian3.equals(positions[0], positions[positions.length - 1])) {\n            if (positions.length === this._positions.length) {\n              this._actualPositions = positions = this._positions.slice();\n            }\n            positions.push(Cartesian3.clone(positions[0]));\n          }\n        } else if (positions.length > 2 && Cartesian3.equals(positions[0], positions[positions.length - 1])) {\n          if (positions.length - 1 === this._positions.length) {\n            this._actualPositions = this._positions;\n          } else {\n            positions.pop();\n          }\n        }\n        this._loop = value;\n        makeDirty(this, POSITION_SIZE_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the user-defined value returned when the polyline is picked.\n   * @memberof Polyline.prototype\n   * @type {*}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    }\n  },\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    }\n  },\n  /**\n   * Gets the destruction status of this polyline\n   * @memberof Polyline.prototype\n   * @type {boolean}\n   * @default false\n   * @private\n   */\n  isDestroyed: {\n    get: function () {\n      return !defined(this._polylineCollection);\n    }\n  },\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this polyline will be displayed.\n   * @memberof Polyline.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      }\n      //>>includeEnd('debug');\n      if (!DistanceDisplayCondition.equals(value, this._distanceDisplayCondition)) {\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(value, this._distanceDisplayCondition);\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION);\n      }\n    }\n  }\n});\n\n/**\n * @private\n */\nPolyline.prototype.update = function () {\n  let modelMatrix = Matrix4.IDENTITY;\n  if (defined(this._polylineCollection)) {\n    modelMatrix = this._polylineCollection.modelMatrix;\n  }\n  const segmentPositionsLength = this._segments.positions.length;\n  const segmentLengths = this._segments.lengths;\n  const positionsChanged = this._propertiesChanged[POSITION_INDEX] > 0 || this._propertiesChanged[POSITION_SIZE_INDEX] > 0;\n  if (!Matrix4.equals(modelMatrix, this._modelMatrix) || positionsChanged) {\n    this._segments = PolylinePipeline.wrapLongitude(this._actualPositions, modelMatrix);\n    this._boundingVolumeWC = BoundingSphere.transform(this._boundingVolume, modelMatrix, this._boundingVolumeWC);\n  }\n  this._modelMatrix = Matrix4.clone(modelMatrix, this._modelMatrix);\n  if (this._segments.positions.length !== segmentPositionsLength) {\n    // number of positions changed\n    makeDirty(this, POSITION_SIZE_INDEX);\n  } else {\n    const length = segmentLengths.length;\n    for (let i = 0; i < length; ++i) {\n      if (segmentLengths[i] !== this._segments.lengths[i]) {\n        // indices changed\n        makeDirty(this, POSITION_SIZE_INDEX);\n        break;\n      }\n    }\n  }\n};\n\n/**\n * @private\n */\nPolyline.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this,\n      collection: this._polylineCollection,\n      id: this._id\n    });\n  }\n  return this._pickId;\n};\nPolyline.prototype._clean = function () {\n  this._dirty = false;\n  const properties = this._propertiesChanged;\n  for (let k = 0; k < NUMBER_OF_PROPERTIES - 1; ++k) {\n    properties[k] = 0;\n  }\n};\nPolyline.prototype._destroy = function () {\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._material = this._material && this._material.destroy();\n  this._polylineCollection = undefined;\n};\nexport default Polyline;","map":{"version":3,"names":["arrayRemoveDuplicates","BoundingSphere","Cartesian3","Color","defaultValue","defined","DeveloperError","DistanceDisplayCondition","Matrix4","PolylinePipeline","Material","Polyline","options","polylineCollection","EMPTY_OBJECT","_show","show","_width","width","_loop","loop","_distanceDisplayCondition","distanceDisplayCondition","_material","material","fromType","ColorType","color","positions","_positions","_actualPositions","equalsEpsilon","length","slice","push","clone","_length","_id","id","modelMatrix","_modelMatrix","_segments","wrapLongitude","_actualLength","undefined","_propertiesChanged","Uint32Array","NUMBER_OF_PROPERTIES","_polylineCollection","_dirty","_pickId","_boundingVolume","fromPoints","_boundingVolumeWC","transform","_boundingVolume2D","POSITION_INDEX","SHOW_INDEX","WIDTH_INDEX","MATERIAL_INDEX","POSITION_SIZE_INDEX","DISTANCE_DISPLAY_CONDITION","makeDirty","polyline","propertyChanged","_updatePolyline","Object","defineProperties","prototype","get","set","value","update","equals","pop","object","pickId","isDestroyed","far","near","IDENTITY","segmentPositionsLength","segmentLengths","lengths","positionsChanged","i","getPickId","context","createPickId","primitive","collection","_clean","properties","k","_destroy","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Polyline.js"],"sourcesContent":["import arrayRemoveDuplicates from \"../Core/arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PolylinePipeline from \"../Core/PolylinePipeline.js\";\nimport Material from \"./Material.js\";\n\n/**\n * <div class=\"notice\">\n * Create this by calling {@link PolylineCollection#add}. Do not call the constructor directly.\n * </div>\n *\n * A renderable polyline.\n *\n * @alias Polyline\n * @internalConstructor\n * @class\n *\n * @privateParam {object} options Object with the following properties:\n * @privateParam {boolean} [options.show=true] <code>true</code> if this polyline will be shown; otherwise, <code>false</code>.\n * @privateParam {number} [options.width=1.0] The width of the polyline in pixels.\n * @privateParam {boolean} [options.loop=false] Whether a line segment will be added between the last and first line positions to make this line a loop.\n * @privateParam {Material} [options.material=Material.ColorType] The material.\n * @privateParam {Cartesian3[]} [options.positions] The positions.\n * @privateParam {object} [options.id] The user-defined object to be returned when this polyline is picked.\n * @privateParam {DistanceDisplayCondition} [options.distanceDisplayCondition] The condition specifying at what distance from the camera that this polyline will be displayed.\n * @privateParam {PolylineCollection} polylineCollection The renderable polyline collection.\n *\n * @see PolylineCollection\n *\n */\nfunction Polyline(options, polylineCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._show = defaultValue(options.show, true);\n  this._width = defaultValue(options.width, 1.0);\n  this._loop = defaultValue(options.loop, false);\n  this._distanceDisplayCondition = options.distanceDisplayCondition;\n\n  this._material = options.material;\n  if (!defined(this._material)) {\n    this._material = Material.fromType(Material.ColorType, {\n      color: new Color(1.0, 1.0, 1.0, 1.0),\n    });\n  }\n\n  let positions = options.positions;\n  if (!defined(positions)) {\n    positions = [];\n  }\n\n  this._positions = positions;\n  this._actualPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon,\n  );\n\n  if (this._loop && this._actualPositions.length > 2) {\n    if (this._actualPositions === this._positions) {\n      this._actualPositions = positions.slice();\n    }\n    this._actualPositions.push(Cartesian3.clone(this._actualPositions[0]));\n  }\n\n  this._length = this._actualPositions.length;\n  this._id = options.id;\n\n  let modelMatrix;\n  if (defined(polylineCollection)) {\n    modelMatrix = Matrix4.clone(polylineCollection.modelMatrix);\n  }\n\n  this._modelMatrix = modelMatrix;\n  this._segments = PolylinePipeline.wrapLongitude(\n    this._actualPositions,\n    modelMatrix,\n  );\n\n  this._actualLength = undefined;\n\n  // eslint-disable-next-line no-use-before-define\n  this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n  this._polylineCollection = polylineCollection;\n  this._dirty = false;\n  this._pickId = undefined;\n  this._boundingVolume = BoundingSphere.fromPoints(this._actualPositions);\n  this._boundingVolumeWC = BoundingSphere.transform(\n    this._boundingVolume,\n    this._modelMatrix,\n  );\n  this._boundingVolume2D = new BoundingSphere(); // modified in PolylineCollection\n}\n\nconst POSITION_INDEX = (Polyline.POSITION_INDEX = 0);\nconst SHOW_INDEX = (Polyline.SHOW_INDEX = 1);\nconst WIDTH_INDEX = (Polyline.WIDTH_INDEX = 2);\nconst MATERIAL_INDEX = (Polyline.MATERIAL_INDEX = 3);\nconst POSITION_SIZE_INDEX = (Polyline.POSITION_SIZE_INDEX = 4);\nconst DISTANCE_DISPLAY_CONDITION = (Polyline.DISTANCE_DISPLAY_CONDITION = 5);\nconst NUMBER_OF_PROPERTIES = (Polyline.NUMBER_OF_PROPERTIES = 6);\n\nfunction makeDirty(polyline, propertyChanged) {\n  ++polyline._propertiesChanged[propertyChanged];\n  const polylineCollection = polyline._polylineCollection;\n  if (defined(polylineCollection)) {\n    polylineCollection._updatePolyline(polyline, propertyChanged);\n    polyline._dirty = true;\n  }\n}\n\nObject.defineProperties(Polyline.prototype, {\n  /**\n   * Determines if this polyline will be shown.  Use this to hide or show a polyline, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof Polyline.prototype\n   * @type {boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value !== this._show) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the positions of the polyline.\n   * @memberof Polyline.prototype\n   * @type {Cartesian3[]}\n   * @example\n   * polyline.positions = Cesium.Cartesian3.fromDegreesArray([\n   *     0.0, 0.0,\n   *     10.0, 0.0,\n   *     0.0, 20.0\n   * ]);\n   */\n  positions: {\n    get: function () {\n      return this._positions;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      let positions = arrayRemoveDuplicates(value, Cartesian3.equalsEpsilon);\n\n      if (this._loop && positions.length > 2) {\n        if (positions === value) {\n          positions = value.slice();\n        }\n        positions.push(Cartesian3.clone(positions[0]));\n      }\n\n      if (\n        this._actualPositions.length !== positions.length ||\n        this._actualPositions.length !== this._length\n      ) {\n        makeDirty(this, POSITION_SIZE_INDEX);\n      }\n\n      this._positions = value;\n      this._actualPositions = positions;\n      this._length = positions.length;\n      this._boundingVolume = BoundingSphere.fromPoints(\n        this._actualPositions,\n        this._boundingVolume,\n      );\n      this._boundingVolumeWC = BoundingSphere.transform(\n        this._boundingVolume,\n        this._modelMatrix,\n        this._boundingVolumeWC,\n      );\n      makeDirty(this, POSITION_INDEX);\n\n      this.update();\n    },\n  },\n\n  /**\n   * Gets or sets the surface appearance of the polyline.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * @memberof Polyline.prototype\n   * @type {Material}\n   */\n  material: {\n    get: function () {\n      return this._material;\n    },\n    set: function (material) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(material)) {\n        throw new DeveloperError(\"material is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._material !== material) {\n        this._material = material;\n        makeDirty(this, MATERIAL_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the width of the polyline.\n   * @memberof Polyline.prototype\n   * @type {number}\n   */\n  width: {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      const width = this._width;\n      if (value !== width) {\n        this._width = value;\n        makeDirty(this, WIDTH_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets whether a line segment will be added between the first and last polyline positions.\n   * @memberof Polyline.prototype\n   * @type {boolean}\n   */\n  loop: {\n    get: function () {\n      return this._loop;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value !== this._loop) {\n        let positions = this._actualPositions;\n        if (value) {\n          if (\n            positions.length > 2 &&\n            !Cartesian3.equals(positions[0], positions[positions.length - 1])\n          ) {\n            if (positions.length === this._positions.length) {\n              this._actualPositions = positions = this._positions.slice();\n            }\n            positions.push(Cartesian3.clone(positions[0]));\n          }\n        } else if (\n          positions.length > 2 &&\n          Cartesian3.equals(positions[0], positions[positions.length - 1])\n        ) {\n          if (positions.length - 1 === this._positions.length) {\n            this._actualPositions = this._positions;\n          } else {\n            positions.pop();\n          }\n        }\n\n        this._loop = value;\n        makeDirty(this, POSITION_SIZE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the user-defined value returned when the polyline is picked.\n   * @memberof Polyline.prototype\n   * @type {*}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n  },\n\n  /**\n   * Gets the destruction status of this polyline\n   * @memberof Polyline.prototype\n   * @type {boolean}\n   * @default false\n   * @private\n   */\n  isDestroyed: {\n    get: function () {\n      return !defined(this._polylineCollection);\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this polyline will be displayed.\n   * @memberof Polyline.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\",\n        );\n      }\n      //>>includeEnd('debug');\n      if (\n        !DistanceDisplayCondition.equals(value, this._distanceDisplayCondition)\n      ) {\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(\n          value,\n          this._distanceDisplayCondition,\n        );\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION);\n      }\n    },\n  },\n});\n\n/**\n * @private\n */\nPolyline.prototype.update = function () {\n  let modelMatrix = Matrix4.IDENTITY;\n  if (defined(this._polylineCollection)) {\n    modelMatrix = this._polylineCollection.modelMatrix;\n  }\n\n  const segmentPositionsLength = this._segments.positions.length;\n  const segmentLengths = this._segments.lengths;\n\n  const positionsChanged =\n    this._propertiesChanged[POSITION_INDEX] > 0 ||\n    this._propertiesChanged[POSITION_SIZE_INDEX] > 0;\n  if (!Matrix4.equals(modelMatrix, this._modelMatrix) || positionsChanged) {\n    this._segments = PolylinePipeline.wrapLongitude(\n      this._actualPositions,\n      modelMatrix,\n    );\n    this._boundingVolumeWC = BoundingSphere.transform(\n      this._boundingVolume,\n      modelMatrix,\n      this._boundingVolumeWC,\n    );\n  }\n\n  this._modelMatrix = Matrix4.clone(modelMatrix, this._modelMatrix);\n\n  if (this._segments.positions.length !== segmentPositionsLength) {\n    // number of positions changed\n    makeDirty(this, POSITION_SIZE_INDEX);\n  } else {\n    const length = segmentLengths.length;\n    for (let i = 0; i < length; ++i) {\n      if (segmentLengths[i] !== this._segments.lengths[i]) {\n        // indices changed\n        makeDirty(this, POSITION_SIZE_INDEX);\n        break;\n      }\n    }\n  }\n};\n\n/**\n * @private\n */\nPolyline.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this,\n      collection: this._polylineCollection,\n      id: this._id,\n    });\n  }\n  return this._pickId;\n};\n\nPolyline.prototype._clean = function () {\n  this._dirty = false;\n  const properties = this._propertiesChanged;\n  for (let k = 0; k < NUMBER_OF_PROPERTIES - 1; ++k) {\n    properties[k] = 0;\n  }\n};\n\nPolyline.prototype._destroy = function () {\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._material = this._material && this._material.destroy();\n  this._polylineCollection = undefined;\n};\nexport default Polyline;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}