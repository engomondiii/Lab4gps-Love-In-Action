{"ast":null,"code":"import Cartesian2 from \"../../Core/Cartesian2.js\";\nimport ClippingPlaneCollection from \"../ClippingPlaneCollection.js\";\nimport combine from \"../../Core/combine.js\";\nimport Color from \"../../Core/Color.js\";\nimport ModelClippingPlanesStageFS from \"../../Shaders/Model/ModelClippingPlanesStageFS.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\n\n/**\n * The model clipping planes stage is responsible for applying clipping planes to the model.\n *\n * @namespace ModelClippingPlanesPipelineStage\n *\n * @private\n */\nconst ModelClippingPlanesPipelineStage = {\n  name: \"ModelClippingPlanesPipelineStage\" // Helps with debugging\n};\nconst textureResolutionScratch = new Cartesian2();\n/**\n * Process a model. This modifies the following parts of the render resources:\n *\n * <ul>\n *  <li>adds a define to the fragment shader to indicate that the model has clipping planes</li>\n *  <li>adds the defines to the fragment shader for parameters related to clipping planes, such as the number of planes</li>\n *  <li>adds a function to the fragment shader to apply the clipping planes to the model's base color</li>\n *  <li>adds the uniforms for the fragment shader for the clipping plane texture and matrix</li>\n *</ul>\n *\n * @param {ModelRenderResources} renderResources The render resources for this model.\n * @param {Model} model The model.\n * @param {FrameState} frameState The frameState.\n *\n * @private\n */\nModelClippingPlanesPipelineStage.process = function (renderResources, model, frameState) {\n  const clippingPlanes = model.clippingPlanes;\n  const context = frameState.context;\n  const shaderBuilder = renderResources.shaderBuilder;\n  shaderBuilder.addDefine(\"HAS_CLIPPING_PLANES\", undefined, ShaderDestination.FRAGMENT);\n  shaderBuilder.addDefine(\"CLIPPING_PLANES_LENGTH\", clippingPlanes.length, ShaderDestination.FRAGMENT);\n  if (clippingPlanes.unionClippingRegions) {\n    shaderBuilder.addDefine(\"UNION_CLIPPING_REGIONS\", undefined, ShaderDestination.FRAGMENT);\n  }\n  if (ClippingPlaneCollection.useFloatTexture(context)) {\n    shaderBuilder.addDefine(\"USE_CLIPPING_PLANES_FLOAT_TEXTURE\", undefined, ShaderDestination.FRAGMENT);\n  }\n  const textureResolution = ClippingPlaneCollection.getTextureResolution(clippingPlanes, context, textureResolutionScratch);\n  shaderBuilder.addDefine(\"CLIPPING_PLANES_TEXTURE_WIDTH\", textureResolution.x, ShaderDestination.FRAGMENT);\n  shaderBuilder.addDefine(\"CLIPPING_PLANES_TEXTURE_HEIGHT\", textureResolution.y, ShaderDestination.FRAGMENT);\n  shaderBuilder.addUniform(\"sampler2D\", \"model_clippingPlanes\", ShaderDestination.FRAGMENT);\n  shaderBuilder.addUniform(\"vec4\", \"model_clippingPlanesEdgeStyle\", ShaderDestination.FRAGMENT);\n  shaderBuilder.addUniform(\"mat4\", \"model_clippingPlanesMatrix\", ShaderDestination.FRAGMENT);\n  shaderBuilder.addFragmentLines(ModelClippingPlanesStageFS);\n  const uniformMap = {\n    model_clippingPlanes: function () {\n      return clippingPlanes.texture;\n    },\n    model_clippingPlanesEdgeStyle: function () {\n      const style = Color.clone(clippingPlanes.edgeColor);\n      style.alpha = clippingPlanes.edgeWidth;\n      return style;\n    },\n    model_clippingPlanesMatrix: function () {\n      return model._clippingPlanesMatrix;\n    }\n  };\n  renderResources.uniformMap = combine(uniformMap, renderResources.uniformMap);\n};\nexport default ModelClippingPlanesPipelineStage;","map":{"version":3,"names":["Cartesian2","ClippingPlaneCollection","combine","Color","ModelClippingPlanesStageFS","ShaderDestination","ModelClippingPlanesPipelineStage","name","textureResolutionScratch","process","renderResources","model","frameState","clippingPlanes","context","shaderBuilder","addDefine","undefined","FRAGMENT","length","unionClippingRegions","useFloatTexture","textureResolution","getTextureResolution","x","y","addUniform","addFragmentLines","uniformMap","model_clippingPlanes","texture","model_clippingPlanesEdgeStyle","style","clone","edgeColor","alpha","edgeWidth","model_clippingPlanesMatrix","_clippingPlanesMatrix"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/ModelClippingPlanesPipelineStage.js"],"sourcesContent":["import Cartesian2 from \"../../Core/Cartesian2.js\";\nimport ClippingPlaneCollection from \"../ClippingPlaneCollection.js\";\nimport combine from \"../../Core/combine.js\";\nimport Color from \"../../Core/Color.js\";\nimport ModelClippingPlanesStageFS from \"../../Shaders/Model/ModelClippingPlanesStageFS.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\n\n/**\n * The model clipping planes stage is responsible for applying clipping planes to the model.\n *\n * @namespace ModelClippingPlanesPipelineStage\n *\n * @private\n */\nconst ModelClippingPlanesPipelineStage = {\n  name: \"ModelClippingPlanesPipelineStage\", // Helps with debugging\n};\n\nconst textureResolutionScratch = new Cartesian2();\n/**\n * Process a model. This modifies the following parts of the render resources:\n *\n * <ul>\n *  <li>adds a define to the fragment shader to indicate that the model has clipping planes</li>\n *  <li>adds the defines to the fragment shader for parameters related to clipping planes, such as the number of planes</li>\n *  <li>adds a function to the fragment shader to apply the clipping planes to the model's base color</li>\n *  <li>adds the uniforms for the fragment shader for the clipping plane texture and matrix</li>\n *</ul>\n *\n * @param {ModelRenderResources} renderResources The render resources for this model.\n * @param {Model} model The model.\n * @param {FrameState} frameState The frameState.\n *\n * @private\n */\nModelClippingPlanesPipelineStage.process = function (\n  renderResources,\n  model,\n  frameState,\n) {\n  const clippingPlanes = model.clippingPlanes;\n  const context = frameState.context;\n  const shaderBuilder = renderResources.shaderBuilder;\n\n  shaderBuilder.addDefine(\n    \"HAS_CLIPPING_PLANES\",\n    undefined,\n    ShaderDestination.FRAGMENT,\n  );\n\n  shaderBuilder.addDefine(\n    \"CLIPPING_PLANES_LENGTH\",\n    clippingPlanes.length,\n    ShaderDestination.FRAGMENT,\n  );\n\n  if (clippingPlanes.unionClippingRegions) {\n    shaderBuilder.addDefine(\n      \"UNION_CLIPPING_REGIONS\",\n      undefined,\n      ShaderDestination.FRAGMENT,\n    );\n  }\n\n  if (ClippingPlaneCollection.useFloatTexture(context)) {\n    shaderBuilder.addDefine(\n      \"USE_CLIPPING_PLANES_FLOAT_TEXTURE\",\n      undefined,\n      ShaderDestination.FRAGMENT,\n    );\n  }\n\n  const textureResolution = ClippingPlaneCollection.getTextureResolution(\n    clippingPlanes,\n    context,\n    textureResolutionScratch,\n  );\n\n  shaderBuilder.addDefine(\n    \"CLIPPING_PLANES_TEXTURE_WIDTH\",\n    textureResolution.x,\n    ShaderDestination.FRAGMENT,\n  );\n\n  shaderBuilder.addDefine(\n    \"CLIPPING_PLANES_TEXTURE_HEIGHT\",\n    textureResolution.y,\n    ShaderDestination.FRAGMENT,\n  );\n\n  shaderBuilder.addUniform(\n    \"sampler2D\",\n    \"model_clippingPlanes\",\n    ShaderDestination.FRAGMENT,\n  );\n  shaderBuilder.addUniform(\n    \"vec4\",\n    \"model_clippingPlanesEdgeStyle\",\n    ShaderDestination.FRAGMENT,\n  );\n  shaderBuilder.addUniform(\n    \"mat4\",\n    \"model_clippingPlanesMatrix\",\n    ShaderDestination.FRAGMENT,\n  );\n\n  shaderBuilder.addFragmentLines(ModelClippingPlanesStageFS);\n\n  const uniformMap = {\n    model_clippingPlanes: function () {\n      return clippingPlanes.texture;\n    },\n    model_clippingPlanesEdgeStyle: function () {\n      const style = Color.clone(clippingPlanes.edgeColor);\n      style.alpha = clippingPlanes.edgeWidth;\n      return style;\n    },\n    model_clippingPlanesMatrix: function () {\n      return model._clippingPlanesMatrix;\n    },\n  };\n\n  renderResources.uniformMap = combine(uniformMap, renderResources.uniformMap);\n};\n\nexport default ModelClippingPlanesPipelineStage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}