{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\n\n/**\n * A ParticleEmitter that emits particles within a sphere.\n * Particles will be positioned randomly within the sphere and have initial velocities emanating from the center of the sphere.\n *\n * @alias SphereEmitter\n * @constructor\n *\n * @param {number} [radius=1.0] The radius of the sphere in meters.\n */\nfunction SphereEmitter(radius) {\n  radius = defaultValue(radius, 1.0);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"radius\", radius, 0.0);\n  //>>includeEnd('debug');\n\n  this._radius = defaultValue(radius, 1.0);\n}\nObject.defineProperties(SphereEmitter.prototype, {\n  /**\n   * The radius of the sphere in meters.\n   * @memberof SphereEmitter.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  radius: {\n    get: function () {\n      return this._radius;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThan(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._radius = value;\n    }\n  }\n});\n\n/**\n * Initializes the given {Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize\n */\nSphereEmitter.prototype.emit = function (particle) {\n  const theta = CesiumMath.randomBetween(0.0, CesiumMath.TWO_PI);\n  const phi = CesiumMath.randomBetween(0.0, CesiumMath.PI);\n  const rad = CesiumMath.randomBetween(0.0, this._radius);\n  const x = rad * Math.cos(theta) * Math.sin(phi);\n  const y = rad * Math.sin(theta) * Math.sin(phi);\n  const z = rad * Math.cos(phi);\n  particle.position = Cartesian3.fromElements(x, y, z, particle.position);\n  particle.velocity = Cartesian3.normalize(particle.position, particle.velocity);\n};\nexport default SphereEmitter;","map":{"version":3,"names":["Cartesian3","Check","defaultValue","CesiumMath","SphereEmitter","radius","typeOf","number","greaterThan","_radius","Object","defineProperties","prototype","get","set","value","emit","particle","theta","randomBetween","TWO_PI","phi","PI","rad","x","Math","cos","sin","y","z","position","fromElements","velocity","normalize"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/SphereEmitter.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\n\n/**\n * A ParticleEmitter that emits particles within a sphere.\n * Particles will be positioned randomly within the sphere and have initial velocities emanating from the center of the sphere.\n *\n * @alias SphereEmitter\n * @constructor\n *\n * @param {number} [radius=1.0] The radius of the sphere in meters.\n */\nfunction SphereEmitter(radius) {\n  radius = defaultValue(radius, 1.0);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"radius\", radius, 0.0);\n  //>>includeEnd('debug');\n\n  this._radius = defaultValue(radius, 1.0);\n}\n\nObject.defineProperties(SphereEmitter.prototype, {\n  /**\n   * The radius of the sphere in meters.\n   * @memberof SphereEmitter.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  radius: {\n    get: function () {\n      return this._radius;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThan(\"value\", value, 0.0);\n      //>>includeEnd('debug');\n      this._radius = value;\n    },\n  },\n});\n\n/**\n * Initializes the given {Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize\n */\nSphereEmitter.prototype.emit = function (particle) {\n  const theta = CesiumMath.randomBetween(0.0, CesiumMath.TWO_PI);\n  const phi = CesiumMath.randomBetween(0.0, CesiumMath.PI);\n  const rad = CesiumMath.randomBetween(0.0, this._radius);\n\n  const x = rad * Math.cos(theta) * Math.sin(phi);\n  const y = rad * Math.sin(theta) * Math.sin(phi);\n  const z = rad * Math.cos(phi);\n\n  particle.position = Cartesian3.fromElements(x, y, z, particle.position);\n  particle.velocity = Cartesian3.normalize(\n    particle.position,\n    particle.velocity,\n  );\n};\nexport default SphereEmitter;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,UAAU,MAAM,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,MAAM,EAAE;EAC7BA,MAAM,GAAGH,YAAY,CAACG,MAAM,EAAE,GAAG,CAAC;;EAElC;EACAJ,KAAK,CAACK,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC,QAAQ,EAAEH,MAAM,EAAE,GAAG,CAAC;EACtD;;EAEA,IAAI,CAACI,OAAO,GAAGP,YAAY,CAACG,MAAM,EAAE,GAAG,CAAC;AAC1C;AAEAK,MAAM,CAACC,gBAAgB,CAACP,aAAa,CAACQ,SAAS,EAAE;EAC/C;AACF;AACA;AACA;AACA;AACA;EACEP,MAAM,EAAE;IACNQ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACJ,OAAO;IACrB,CAAC;IACDK,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACAd,KAAK,CAACK,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC,OAAO,EAAEO,KAAK,EAAE,GAAG,CAAC;MACpD;MACA,IAAI,CAACN,OAAO,GAAGM,KAAK;IACtB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACAX,aAAa,CAACQ,SAAS,CAACI,IAAI,GAAG,UAAUC,QAAQ,EAAE;EACjD,MAAMC,KAAK,GAAGf,UAAU,CAACgB,aAAa,CAAC,GAAG,EAAEhB,UAAU,CAACiB,MAAM,CAAC;EAC9D,MAAMC,GAAG,GAAGlB,UAAU,CAACgB,aAAa,CAAC,GAAG,EAAEhB,UAAU,CAACmB,EAAE,CAAC;EACxD,MAAMC,GAAG,GAAGpB,UAAU,CAACgB,aAAa,CAAC,GAAG,EAAE,IAAI,CAACV,OAAO,CAAC;EAEvD,MAAMe,CAAC,GAAGD,GAAG,GAAGE,IAAI,CAACC,GAAG,CAACR,KAAK,CAAC,GAAGO,IAAI,CAACE,GAAG,CAACN,GAAG,CAAC;EAC/C,MAAMO,CAAC,GAAGL,GAAG,GAAGE,IAAI,CAACE,GAAG,CAACT,KAAK,CAAC,GAAGO,IAAI,CAACE,GAAG,CAACN,GAAG,CAAC;EAC/C,MAAMQ,CAAC,GAAGN,GAAG,GAAGE,IAAI,CAACC,GAAG,CAACL,GAAG,CAAC;EAE7BJ,QAAQ,CAACa,QAAQ,GAAG9B,UAAU,CAAC+B,YAAY,CAACP,CAAC,EAAEI,CAAC,EAAEC,CAAC,EAAEZ,QAAQ,CAACa,QAAQ,CAAC;EACvEb,QAAQ,CAACe,QAAQ,GAAGhC,UAAU,CAACiC,SAAS,CACtChB,QAAQ,CAACa,QAAQ,EACjBb,QAAQ,CAACe,QACX,CAAC;AACH,CAAC;AACD,eAAe5B,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}