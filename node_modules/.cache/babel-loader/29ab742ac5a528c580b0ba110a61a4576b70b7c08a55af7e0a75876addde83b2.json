{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport getMagic from \"../Core/getMagic.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\n\n/**\n * Represents the contents of a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/TileFormats/Composite|Composite}\n * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification|3D Tiles} tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Composite3DTileContent\n * @constructor\n *\n * @private\n */\nfunction Composite3DTileContent(tileset, tile, resource, contents) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  if (!defined(contents)) {\n    contents = [];\n  }\n  this._contents = contents;\n  this._metadata = undefined;\n  this._group = undefined;\n  this._ready = false;\n}\nObject.defineProperties(Composite3DTileContent.prototype, {\n  featurePropertiesDirty: {\n    get: function () {\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        if (contents[i].featurePropertiesDirty) {\n          return true;\n        }\n      }\n      return false;\n    },\n    set: function (value) {\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        contents[i].featurePropertiesDirty = value;\n      }\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>featuresLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  featuresLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>pointsLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  pointsLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>trianglesLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  trianglesLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>geometryByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  geometryByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.   <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>texturesByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>batchTableByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  batchTableByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  innerContents: {\n    get: function () {\n      return this._contents;\n    }\n  },\n  /**\n   * Returns true when the tile's content is ready to render; otherwise false\n   *\n   * @memberof Composite3DTileContent.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   * @private\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    }\n  },\n  tileset: {\n    get: function () {\n      return this._tileset;\n    }\n  },\n  tile: {\n    get: function () {\n      return this._tile;\n    }\n  },\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Composite3DTileContent</code>\n   * both stores the content metadata and propagates the content metadata to all of its children.\n   * @memberof Composite3DTileContent.prototype\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   */\n  metadata: {\n    get: function () {\n      return this._metadata;\n    },\n    set: function (value) {\n      this._metadata = value;\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        contents[i].metadata = value;\n      }\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Composite3DTileContent</code>\n   * always returns <code>undefined</code>.  Instead call <code>batchTable</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  batchTable: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Composite3DTileContent</code>\n   * both stores the group metadata and propagates the group metadata to all of its children.\n   * @memberof Composite3DTileContent.prototype\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   */\n  group: {\n    get: function () {\n      return this._group;\n    },\n    set: function (value) {\n      this._group = value;\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        contents[i].group = value;\n      }\n    }\n  }\n});\nconst sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\nComposite3DTileContent.fromTileType = async function (tileset, tile, resource, arrayBuffer, byteOffset, factory) {\n  byteOffset = defaultValue(byteOffset, 0);\n  const uint8Array = new Uint8Array(arrayBuffer);\n  const view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic\n\n  const version = view.getUint32(byteOffset, true);\n  if (version !== 1) {\n    throw new RuntimeError(`Only Composite Tile version 1 is supported. Version ${version} is not.`);\n  }\n  byteOffset += sizeOfUint32;\n\n  // Skip byteLength\n  byteOffset += sizeOfUint32;\n  const tilesLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  // For caching purposes, models within the composite tile must be\n  // distinguished. To do this, add a query parameter ?compositeIndex=i.\n  // Since composite tiles may contain other composite tiles, check for an\n  // existing prefix and separate them with underscores. e.g.\n  // ?compositeIndex=0_1_1\n  let prefix = resource.queryParameters.compositeIndex;\n  if (defined(prefix)) {\n    // We'll be adding another value at the end, so add an underscore.\n    prefix = `${prefix}_`;\n  } else {\n    // no prefix\n    prefix = \"\";\n  }\n  const promises = [];\n  promises.length = tilesLength;\n  for (let i = 0; i < tilesLength; ++i) {\n    const tileType = getMagic(uint8Array, byteOffset);\n\n    // Tile byte length is stored after magic and version\n    const tileByteLength = view.getUint32(byteOffset + sizeOfUint32 * 2, true);\n    const contentFactory = factory[tileType];\n\n    // Label which content within the composite this is\n    const compositeIndex = `${prefix}${i}`;\n    const childResource = resource.getDerivedResource({\n      queryParameters: {\n        compositeIndex: compositeIndex\n      }\n    });\n    if (defined(contentFactory)) {\n      promises[i] = Promise.resolve(contentFactory(tileset, tile, childResource, arrayBuffer, byteOffset));\n    } else {\n      throw new RuntimeError(`Unknown tile content type, ${tileType}, inside Composite tile`);\n    }\n    byteOffset += tileByteLength;\n  }\n  const innerContents = await Promise.all(promises);\n  const content = new Composite3DTileContent(tileset, tile, resource, innerContents);\n  return content;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n * always returns <code>false</code>.  Instead call <code>hasProperty</code> for a tile in the composite.\n */\nComposite3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n * always returns <code>undefined</code>.  Instead call <code>getFeature</code> for a tile in the composite.\n */\nComposite3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\nComposite3DTileContent.prototype.applyDebugSettings = function (enabled, color) {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].applyDebugSettings(enabled, color);\n  }\n};\nComposite3DTileContent.prototype.applyStyle = function (style) {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].applyStyle(style);\n  }\n};\nComposite3DTileContent.prototype.update = function (tileset, frameState) {\n  const contents = this._contents;\n  const length = contents.length;\n  let ready = true;\n  for (let i = 0; i < length; ++i) {\n    contents[i].update(tileset, frameState);\n    ready = ready && contents[i].ready;\n  }\n  if (!this._ready && ready) {\n    this._ready = true;\n  }\n};\n\n/**\n * Find an intersection between a ray and the tile content surface that was rendered. The ray must be given in world coordinates.\n *\n * @param {Ray} ray The ray to test for intersection.\n * @param {FrameState} frameState The frame state.\n * @param {Cartesian3|undefined} [result] The intersection or <code>undefined</code> if none was found.\n * @returns {Cartesian3|undefined} The intersection or <code>undefined</code> if none was found.\n *\n * @private\n */\nComposite3DTileContent.prototype.pick = function (ray, frameState, result) {\n  if (!this._ready) {\n    return undefined;\n  }\n  let intersection;\n  let minDistance = Number.POSITIVE_INFINITY;\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    const candidate = contents[i].pick(ray, frameState, result);\n    if (!defined(candidate)) {\n      continue;\n    }\n    const distance = Cartesian3.distance(ray.origin, candidate);\n    if (distance < minDistance) {\n      intersection = candidate;\n      minDistance = distance;\n    }\n  }\n  if (!defined(intersection)) {\n    return undefined;\n  }\n  return result;\n};\nComposite3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\nComposite3DTileContent.prototype.destroy = function () {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].destroy();\n  }\n  return destroyObject(this);\n};\nexport default Composite3DTileContent;","map":{"version":3,"names":["Cartesian3","defaultValue","defined","destroyObject","getMagic","RuntimeError","Composite3DTileContent","tileset","tile","resource","contents","_tileset","_tile","_resource","_contents","_metadata","undefined","_group","_ready","Object","defineProperties","prototype","featurePropertiesDirty","get","length","i","set","value","featuresLength","pointsLength","trianglesLength","geometryByteLength","texturesByteLength","batchTableByteLength","innerContents","ready","url","getUrlComponent","metadata","batchTable","group","sizeOfUint32","Uint32Array","BYTES_PER_ELEMENT","fromTileType","arrayBuffer","byteOffset","factory","uint8Array","Uint8Array","view","DataView","version","getUint32","tilesLength","prefix","queryParameters","compositeIndex","promises","tileType","tileByteLength","contentFactory","childResource","getDerivedResource","Promise","resolve","all","content","hasProperty","batchId","name","getFeature","applyDebugSettings","enabled","color","applyStyle","style","update","frameState","pick","ray","result","intersection","minDistance","Number","POSITIVE_INFINITY","candidate","distance","origin","isDestroyed","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Composite3DTileContent.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport getMagic from \"../Core/getMagic.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\n\n/**\n * Represents the contents of a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/TileFormats/Composite|Composite}\n * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification|3D Tiles} tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Composite3DTileContent\n * @constructor\n *\n * @private\n */\nfunction Composite3DTileContent(tileset, tile, resource, contents) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n\n  if (!defined(contents)) {\n    contents = [];\n  }\n  this._contents = contents;\n\n  this._metadata = undefined;\n  this._group = undefined;\n  this._ready = false;\n}\n\nObject.defineProperties(Composite3DTileContent.prototype, {\n  featurePropertiesDirty: {\n    get: function () {\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        if (contents[i].featurePropertiesDirty) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    set: function (value) {\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        contents[i].featurePropertiesDirty = value;\n      }\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>featuresLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  featuresLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>pointsLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  pointsLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>trianglesLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  trianglesLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>geometryByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  geometryByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.   <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>texturesByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>batchTableByteLength</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  batchTableByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return this._contents;\n    },\n  },\n\n  /**\n   * Returns true when the tile's content is ready to render; otherwise false\n   *\n   * @memberof Composite3DTileContent.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   * @private\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Composite3DTileContent</code>\n   * both stores the content metadata and propagates the content metadata to all of its children.\n   * @memberof Composite3DTileContent.prototype\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   */\n  metadata: {\n    get: function () {\n      return this._metadata;\n    },\n    set: function (value) {\n      this._metadata = value;\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        contents[i].metadata = value;\n      }\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Composite3DTileContent</code>\n   * always returns <code>undefined</code>.  Instead call <code>batchTable</code> for a tile in the composite.\n   * @memberof Composite3DTileContent.prototype\n   */\n  batchTable: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Composite3DTileContent</code>\n   * both stores the group metadata and propagates the group metadata to all of its children.\n   * @memberof Composite3DTileContent.prototype\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   */\n  group: {\n    get: function () {\n      return this._group;\n    },\n    set: function (value) {\n      this._group = value;\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        contents[i].group = value;\n      }\n    },\n  },\n});\n\nconst sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\nComposite3DTileContent.fromTileType = async function (\n  tileset,\n  tile,\n  resource,\n  arrayBuffer,\n  byteOffset,\n  factory,\n) {\n  byteOffset = defaultValue(byteOffset, 0);\n\n  const uint8Array = new Uint8Array(arrayBuffer);\n  const view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic\n\n  const version = view.getUint32(byteOffset, true);\n  if (version !== 1) {\n    throw new RuntimeError(\n      `Only Composite Tile version 1 is supported. Version ${version} is not.`,\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  // Skip byteLength\n  byteOffset += sizeOfUint32;\n\n  const tilesLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  // For caching purposes, models within the composite tile must be\n  // distinguished. To do this, add a query parameter ?compositeIndex=i.\n  // Since composite tiles may contain other composite tiles, check for an\n  // existing prefix and separate them with underscores. e.g.\n  // ?compositeIndex=0_1_1\n  let prefix = resource.queryParameters.compositeIndex;\n  if (defined(prefix)) {\n    // We'll be adding another value at the end, so add an underscore.\n    prefix = `${prefix}_`;\n  } else {\n    // no prefix\n    prefix = \"\";\n  }\n\n  const promises = [];\n  promises.length = tilesLength;\n  for (let i = 0; i < tilesLength; ++i) {\n    const tileType = getMagic(uint8Array, byteOffset);\n\n    // Tile byte length is stored after magic and version\n    const tileByteLength = view.getUint32(byteOffset + sizeOfUint32 * 2, true);\n\n    const contentFactory = factory[tileType];\n\n    // Label which content within the composite this is\n    const compositeIndex = `${prefix}${i}`;\n    const childResource = resource.getDerivedResource({\n      queryParameters: {\n        compositeIndex: compositeIndex,\n      },\n    });\n\n    if (defined(contentFactory)) {\n      promises[i] = Promise.resolve(\n        contentFactory(tileset, tile, childResource, arrayBuffer, byteOffset),\n      );\n    } else {\n      throw new RuntimeError(\n        `Unknown tile content type, ${tileType}, inside Composite tile`,\n      );\n    }\n\n    byteOffset += tileByteLength;\n  }\n\n  const innerContents = await Promise.all(promises);\n  const content = new Composite3DTileContent(\n    tileset,\n    tile,\n    resource,\n    innerContents,\n  );\n  return content;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n * always returns <code>false</code>.  Instead call <code>hasProperty</code> for a tile in the composite.\n */\nComposite3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n * always returns <code>undefined</code>.  Instead call <code>getFeature</code> for a tile in the composite.\n */\nComposite3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\n\nComposite3DTileContent.prototype.applyDebugSettings = function (\n  enabled,\n  color,\n) {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].applyDebugSettings(enabled, color);\n  }\n};\n\nComposite3DTileContent.prototype.applyStyle = function (style) {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].applyStyle(style);\n  }\n};\n\nComposite3DTileContent.prototype.update = function (tileset, frameState) {\n  const contents = this._contents;\n  const length = contents.length;\n  let ready = true;\n  for (let i = 0; i < length; ++i) {\n    contents[i].update(tileset, frameState);\n    ready = ready && contents[i].ready;\n  }\n\n  if (!this._ready && ready) {\n    this._ready = true;\n  }\n};\n\n/**\n * Find an intersection between a ray and the tile content surface that was rendered. The ray must be given in world coordinates.\n *\n * @param {Ray} ray The ray to test for intersection.\n * @param {FrameState} frameState The frame state.\n * @param {Cartesian3|undefined} [result] The intersection or <code>undefined</code> if none was found.\n * @returns {Cartesian3|undefined} The intersection or <code>undefined</code> if none was found.\n *\n * @private\n */\nComposite3DTileContent.prototype.pick = function (ray, frameState, result) {\n  if (!this._ready) {\n    return undefined;\n  }\n\n  let intersection;\n  let minDistance = Number.POSITIVE_INFINITY;\n  const contents = this._contents;\n  const length = contents.length;\n\n  for (let i = 0; i < length; ++i) {\n    const candidate = contents[i].pick(ray, frameState, result);\n\n    if (!defined(candidate)) {\n      continue;\n    }\n\n    const distance = Cartesian3.distance(ray.origin, candidate);\n    if (distance < minDistance) {\n      intersection = candidate;\n      minDistance = distance;\n    }\n  }\n\n  if (!defined(intersection)) {\n    return undefined;\n  }\n\n  return result;\n};\n\nComposite3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nComposite3DTileContent.prototype.destroy = function () {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].destroy();\n  }\n  return destroyObject(this);\n};\nexport default Composite3DTileContent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}