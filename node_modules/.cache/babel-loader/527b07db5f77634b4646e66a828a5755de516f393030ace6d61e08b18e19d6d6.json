{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport FramebufferManager from \"../Renderer/FramebufferManager.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport PassThroughDepth from \"../Shaders/PostProcessStages/PassThroughDepth.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport StencilConstants from \"./StencilConstants.js\";\nimport StencilFunction from \"./StencilFunction.js\";\nimport StencilOperation from \"./StencilOperation.js\";\n\n/**\n * @alias GlobeDepth\n * @constructor\n *\n * @private\n */\nfunction GlobeDepth() {\n  this._picking = false;\n  this._numSamples = 1;\n  this._tempCopyDepthTexture = undefined;\n  this._pickColorFramebuffer = new FramebufferManager({\n    depthStencil: true,\n    supportsDepthTexture: true\n  });\n  this._outputFramebuffer = new FramebufferManager({\n    depthStencil: true,\n    supportsDepthTexture: true\n  });\n  this._copyDepthFramebuffer = new FramebufferManager();\n  this._tempCopyDepthFramebuffer = new FramebufferManager();\n  this._updateDepthFramebuffer = new FramebufferManager({\n    createColorAttachments: false,\n    createDepthAttachments: false,\n    depthStencil: true\n  });\n  this._clearGlobeColorCommand = undefined;\n  this._copyColorCommand = undefined;\n  this._copyDepthCommand = undefined;\n  this._tempCopyDepthCommand = undefined;\n  this._updateDepthCommand = undefined;\n  this._viewport = new BoundingRectangle();\n  this._rs = undefined;\n  this._rsBlend = undefined;\n  this._rsUpdate = undefined;\n  this._useScissorTest = false;\n  this._scissorRectangle = undefined;\n  this._useHdr = undefined;\n  this._clearGlobeDepth = undefined;\n}\nObject.defineProperties(GlobeDepth.prototype, {\n  colorFramebufferManager: {\n    get: function () {\n      return this._picking ? this._pickColorFramebuffer : this._outputFramebuffer;\n    }\n  },\n  framebuffer: {\n    get: function () {\n      return this.colorFramebufferManager.framebuffer;\n    }\n  },\n  depthStencilTexture: {\n    get: function () {\n      return this.colorFramebufferManager.getDepthStencilTexture();\n    }\n  },\n  picking: {\n    get: function () {\n      return this._picking;\n    },\n    set: function (value) {\n      this._picking = value;\n    }\n  }\n});\nfunction updateCopyCommands(globeDepth, context, width, height, passState) {\n  const viewport = globeDepth._viewport;\n  viewport.width = width;\n  viewport.height = height;\n  const useScissorTest = !BoundingRectangle.equals(viewport, passState.viewport);\n  let updateScissor = useScissorTest !== globeDepth._useScissorTest;\n  globeDepth._useScissorTest = useScissorTest;\n  if (!BoundingRectangle.equals(globeDepth._scissorRectangle, passState.viewport)) {\n    globeDepth._scissorRectangle = BoundingRectangle.clone(passState.viewport, globeDepth._scissorRectangle);\n    updateScissor = true;\n  }\n  if (!defined(globeDepth._rs) || !BoundingRectangle.equals(viewport, globeDepth._rs.viewport) || updateScissor) {\n    globeDepth._rs = RenderState.fromCache({\n      viewport: viewport,\n      scissorTest: {\n        enabled: globeDepth._useScissorTest,\n        rectangle: globeDepth._scissorRectangle\n      }\n    });\n    globeDepth._rsBlend = RenderState.fromCache({\n      viewport: viewport,\n      scissorTest: {\n        enabled: globeDepth._useScissorTest,\n        rectangle: globeDepth._scissorRectangle\n      },\n      blending: BlendingState.ALPHA_BLEND\n    });\n\n    // Copy packed depth only if the 3D Tiles bit is set\n    globeDepth._rsUpdate = RenderState.fromCache({\n      viewport: viewport,\n      scissorTest: {\n        enabled: globeDepth._useScissorTest,\n        rectangle: globeDepth._scissorRectangle\n      },\n      stencilTest: {\n        enabled: true,\n        frontFunction: StencilFunction.EQUAL,\n        frontOperation: {\n          fail: StencilOperation.KEEP,\n          zFail: StencilOperation.KEEP,\n          zPass: StencilOperation.KEEP\n        },\n        backFunction: StencilFunction.NEVER,\n        reference: StencilConstants.CESIUM_3D_TILE_MASK,\n        mask: StencilConstants.CESIUM_3D_TILE_MASK\n      }\n    });\n  }\n  if (!defined(globeDepth._copyDepthCommand)) {\n    globeDepth._copyDepthCommand = context.createViewportQuadCommand(PassThroughDepth, {\n      uniformMap: {\n        u_depthTexture: function () {\n          return globeDepth.colorFramebufferManager.getDepthStencilTexture();\n        }\n      },\n      owner: globeDepth\n    });\n  }\n  globeDepth._copyDepthCommand.framebuffer = globeDepth._copyDepthFramebuffer.framebuffer;\n  globeDepth._copyDepthCommand.renderState = globeDepth._rs;\n  if (!defined(globeDepth._copyColorCommand)) {\n    globeDepth._copyColorCommand = context.createViewportQuadCommand(PassThrough, {\n      uniformMap: {\n        colorTexture: function () {\n          return globeDepth.colorFramebufferManager.getColorTexture();\n        }\n      },\n      owner: globeDepth\n    });\n  }\n  globeDepth._copyColorCommand.renderState = globeDepth._rs;\n  if (!defined(globeDepth._tempCopyDepthCommand)) {\n    globeDepth._tempCopyDepthCommand = context.createViewportQuadCommand(PassThroughDepth, {\n      uniformMap: {\n        u_depthTexture: function () {\n          return globeDepth._tempCopyDepthTexture;\n        }\n      },\n      owner: globeDepth\n    });\n  }\n  globeDepth._tempCopyDepthCommand.framebuffer = globeDepth._tempCopyDepthFramebuffer.framebuffer;\n  globeDepth._tempCopyDepthCommand.renderState = globeDepth._rs;\n  if (!defined(globeDepth._updateDepthCommand)) {\n    globeDepth._updateDepthCommand = context.createViewportQuadCommand(PassThrough, {\n      uniformMap: {\n        colorTexture: function () {\n          return globeDepth._tempCopyDepthFramebuffer.getColorTexture();\n        }\n      },\n      owner: globeDepth\n    });\n  }\n  globeDepth._updateDepthCommand.framebuffer = globeDepth._updateDepthFramebuffer.framebuffer;\n  globeDepth._updateDepthCommand.renderState = globeDepth._rsUpdate;\n  if (!defined(globeDepth._clearGlobeColorCommand)) {\n    globeDepth._clearGlobeColorCommand = new ClearCommand({\n      color: new Color(0.0, 0.0, 0.0, 0.0),\n      stencil: 0.0,\n      owner: globeDepth\n    });\n  }\n  globeDepth._clearGlobeColorCommand.framebuffer = globeDepth.framebuffer;\n}\n\n/**\n * Update framebuffers and render state.\n *\n * @param {Context} context The context used for rendering.\n * @param {PassState} passState Rendering state for subsequent render passes.\n * @param {BoundingRectangle} viewport The viewport for the rendering.\n * @param {number} numSamples The number of samples for multi-sample anti-aliasing (MSAA).\n * @param {boolean} hdr <code>true</code> if the color output needs to be floating point for HDR rendering.\n * @param {boolean} clearGlobeDepth <code>true</code> if the depth buffer should be cleared before rendering 3D Tiles and opaque entities.\n *\n * @private\n */\nGlobeDepth.prototype.update = function (context, passState, viewport, numSamples, hdr, clearGlobeDepth) {\n  const {\n    width,\n    height\n  } = viewport;\n  const pixelDatatype = hdr ? context.halfFloatingPointTexture ? PixelDatatype.HALF_FLOAT : PixelDatatype.FLOAT : PixelDatatype.UNSIGNED_BYTE;\n  this._numSamples = numSamples;\n  if (this.picking) {\n    this._pickColorFramebuffer.update(context, width, height);\n  } else {\n    this._outputFramebuffer.update(context, width, height, numSamples, pixelDatatype);\n  }\n  this._copyDepthFramebuffer.update(context, width, height);\n  updateCopyCommands(this, context, width, height, passState);\n  context.uniformState.globeDepthTexture = undefined;\n  this._clearGlobeDepth = clearGlobeDepth;\n};\n\n/**\n * If using MSAA, resolve the stencil.\n *\n * @param {Context} context\n * @param {boolean} blitStencil <code>true</code> if the stencil has been set.\n *\n * @private\n */\nGlobeDepth.prototype.prepareColorTextures = function (context, blitStencil) {\n  if (!this.picking && this._numSamples > 1) {\n    this._outputFramebuffer.prepareTextures(context, blitStencil);\n  }\n};\nGlobeDepth.prototype.executeCopyDepth = function (context, passState) {\n  if (defined(this._copyDepthCommand)) {\n    this.prepareColorTextures(context);\n    this._copyDepthCommand.execute(context, passState);\n    context.uniformState.globeDepthTexture = this._copyDepthFramebuffer.getColorTexture();\n  }\n};\n\n/**\n * Update the existing depth texture using a stencil.\n *\n * @param {Context} context The context used for rendering.\n * @param {PassState} passState Render state for subsequent rendering passes.\n * @param {Texture} [depthTexture] The depth texture to copy.\n */\nGlobeDepth.prototype.executeUpdateDepth = function (context, passState, depthTexture) {\n  const depthTextureToCopy = defined(depthTexture) ? depthTexture : passState.framebuffer.depthStencilTexture;\n  if (!this._clearGlobeDepth && depthTextureToCopy === this.colorFramebufferManager.getDepthStencilTexture()) {\n    // Fast path - the depth texture can be copied normally.\n    if (defined(this._copyDepthCommand)) {\n      this._copyDepthCommand.execute(context, passState);\n    }\n    return;\n  }\n  if (!defined(this._updateDepthCommand)) {\n    return;\n  }\n\n  // First copy the depth to a temporary globe depth texture, then update the\n  // main globe depth texture where the stencil bit for 3D Tiles is set.\n  // This preserves the original globe depth except where 3D Tiles is rendered.\n  // The additional texture and framebuffer resources are created on demand.\n  const updateDepthFramebuffer = this._updateDepthFramebuffer;\n  if (!defined(updateDepthFramebuffer.framebuffer) || updateDepthFramebuffer.getDepthStencilTexture() !== depthTextureToCopy || updateDepthFramebuffer.getColorTexture() !== this._copyDepthFramebuffer.getColorTexture()) {\n    const colorTexture = this._copyDepthFramebuffer.getColorTexture();\n    const {\n      width,\n      height\n    } = colorTexture;\n    this._tempCopyDepthFramebuffer.destroy();\n    this._tempCopyDepthFramebuffer.update(context, width, height);\n    updateDepthFramebuffer.setColorTexture(colorTexture, 0);\n    updateDepthFramebuffer.setDepthStencilTexture(depthTextureToCopy);\n    updateDepthFramebuffer.update(context, width, height);\n    updateCopyCommands(this, context, width, height, passState);\n  }\n  this._tempCopyDepthTexture = depthTextureToCopy;\n  this._tempCopyDepthCommand.execute(context, passState);\n  this._updateDepthCommand.execute(context, passState);\n};\nGlobeDepth.prototype.executeCopyColor = function (context, passState) {\n  if (defined(this._copyColorCommand)) {\n    this._copyColorCommand.execute(context, passState);\n  }\n};\nGlobeDepth.prototype.clear = function (context, passState, clearColor) {\n  const clear = this._clearGlobeColorCommand;\n  if (defined(clear)) {\n    Color.clone(clearColor, clear.color);\n    this.colorFramebufferManager.clear(context, clear, passState);\n  }\n};\nGlobeDepth.prototype.isDestroyed = function () {\n  return false;\n};\nGlobeDepth.prototype.destroy = function () {\n  this._pickColorFramebuffer.destroy();\n  this._outputFramebuffer.destroy();\n  this._copyDepthFramebuffer.destroy();\n  this._tempCopyDepthFramebuffer.destroy();\n  this._updateDepthFramebuffer.destroy();\n  if (defined(this._copyColorCommand)) {\n    this._copyColorCommand.shaderProgram = this._copyColorCommand.shaderProgram.destroy();\n  }\n  if (defined(this._copyDepthCommand)) {\n    this._copyDepthCommand.shaderProgram = this._copyDepthCommand.shaderProgram.destroy();\n  }\n  if (defined(this._tempCopyDepthCommand)) {\n    this._tempCopyDepthCommand.shaderProgram = this._tempCopyDepthCommand.shaderProgram.destroy();\n  }\n  if (defined(this._updateDepthCommand)) {\n    this._updateDepthCommand.shaderProgram = this._updateDepthCommand.shaderProgram.destroy();\n  }\n  return destroyObject(this);\n};\nexport default GlobeDepth;","map":{"version":3,"names":["BoundingRectangle","Color","defined","destroyObject","ClearCommand","FramebufferManager","PixelDatatype","RenderState","PassThrough","PassThroughDepth","BlendingState","StencilConstants","StencilFunction","StencilOperation","GlobeDepth","_picking","_numSamples","_tempCopyDepthTexture","undefined","_pickColorFramebuffer","depthStencil","supportsDepthTexture","_outputFramebuffer","_copyDepthFramebuffer","_tempCopyDepthFramebuffer","_updateDepthFramebuffer","createColorAttachments","createDepthAttachments","_clearGlobeColorCommand","_copyColorCommand","_copyDepthCommand","_tempCopyDepthCommand","_updateDepthCommand","_viewport","_rs","_rsBlend","_rsUpdate","_useScissorTest","_scissorRectangle","_useHdr","_clearGlobeDepth","Object","defineProperties","prototype","colorFramebufferManager","get","framebuffer","depthStencilTexture","getDepthStencilTexture","picking","set","value","updateCopyCommands","globeDepth","context","width","height","passState","viewport","useScissorTest","equals","updateScissor","clone","fromCache","scissorTest","enabled","rectangle","blending","ALPHA_BLEND","stencilTest","frontFunction","EQUAL","frontOperation","fail","KEEP","zFail","zPass","backFunction","NEVER","reference","CESIUM_3D_TILE_MASK","mask","createViewportQuadCommand","uniformMap","u_depthTexture","owner","renderState","colorTexture","getColorTexture","color","stencil","update","numSamples","hdr","clearGlobeDepth","pixelDatatype","halfFloatingPointTexture","HALF_FLOAT","FLOAT","UNSIGNED_BYTE","uniformState","globeDepthTexture","prepareColorTextures","blitStencil","prepareTextures","executeCopyDepth","execute","executeUpdateDepth","depthTexture","depthTextureToCopy","updateDepthFramebuffer","destroy","setColorTexture","setDepthStencilTexture","executeCopyColor","clear","clearColor","isDestroyed","shaderProgram"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GlobeDepth.js"],"sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport FramebufferManager from \"../Renderer/FramebufferManager.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport PassThrough from \"../Shaders/PostProcessStages/PassThrough.js\";\nimport PassThroughDepth from \"../Shaders/PostProcessStages/PassThroughDepth.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport StencilConstants from \"./StencilConstants.js\";\nimport StencilFunction from \"./StencilFunction.js\";\nimport StencilOperation from \"./StencilOperation.js\";\n\n/**\n * @alias GlobeDepth\n * @constructor\n *\n * @private\n */\nfunction GlobeDepth() {\n  this._picking = false;\n  this._numSamples = 1;\n  this._tempCopyDepthTexture = undefined;\n\n  this._pickColorFramebuffer = new FramebufferManager({\n    depthStencil: true,\n    supportsDepthTexture: true,\n  });\n  this._outputFramebuffer = new FramebufferManager({\n    depthStencil: true,\n    supportsDepthTexture: true,\n  });\n  this._copyDepthFramebuffer = new FramebufferManager();\n  this._tempCopyDepthFramebuffer = new FramebufferManager();\n  this._updateDepthFramebuffer = new FramebufferManager({\n    createColorAttachments: false,\n    createDepthAttachments: false,\n    depthStencil: true,\n  });\n\n  this._clearGlobeColorCommand = undefined;\n  this._copyColorCommand = undefined;\n  this._copyDepthCommand = undefined;\n  this._tempCopyDepthCommand = undefined;\n  this._updateDepthCommand = undefined;\n\n  this._viewport = new BoundingRectangle();\n  this._rs = undefined;\n  this._rsBlend = undefined;\n  this._rsUpdate = undefined;\n\n  this._useScissorTest = false;\n  this._scissorRectangle = undefined;\n\n  this._useHdr = undefined;\n  this._clearGlobeDepth = undefined;\n}\n\nObject.defineProperties(GlobeDepth.prototype, {\n  colorFramebufferManager: {\n    get: function () {\n      return this._picking\n        ? this._pickColorFramebuffer\n        : this._outputFramebuffer;\n    },\n  },\n  framebuffer: {\n    get: function () {\n      return this.colorFramebufferManager.framebuffer;\n    },\n  },\n  depthStencilTexture: {\n    get: function () {\n      return this.colorFramebufferManager.getDepthStencilTexture();\n    },\n  },\n  picking: {\n    get: function () {\n      return this._picking;\n    },\n    set: function (value) {\n      this._picking = value;\n    },\n  },\n});\n\nfunction updateCopyCommands(globeDepth, context, width, height, passState) {\n  const viewport = globeDepth._viewport;\n  viewport.width = width;\n  viewport.height = height;\n\n  const useScissorTest = !BoundingRectangle.equals(\n    viewport,\n    passState.viewport,\n  );\n  let updateScissor = useScissorTest !== globeDepth._useScissorTest;\n  globeDepth._useScissorTest = useScissorTest;\n\n  if (\n    !BoundingRectangle.equals(globeDepth._scissorRectangle, passState.viewport)\n  ) {\n    globeDepth._scissorRectangle = BoundingRectangle.clone(\n      passState.viewport,\n      globeDepth._scissorRectangle,\n    );\n    updateScissor = true;\n  }\n\n  if (\n    !defined(globeDepth._rs) ||\n    !BoundingRectangle.equals(viewport, globeDepth._rs.viewport) ||\n    updateScissor\n  ) {\n    globeDepth._rs = RenderState.fromCache({\n      viewport: viewport,\n      scissorTest: {\n        enabled: globeDepth._useScissorTest,\n        rectangle: globeDepth._scissorRectangle,\n      },\n    });\n    globeDepth._rsBlend = RenderState.fromCache({\n      viewport: viewport,\n      scissorTest: {\n        enabled: globeDepth._useScissorTest,\n        rectangle: globeDepth._scissorRectangle,\n      },\n      blending: BlendingState.ALPHA_BLEND,\n    });\n\n    // Copy packed depth only if the 3D Tiles bit is set\n    globeDepth._rsUpdate = RenderState.fromCache({\n      viewport: viewport,\n      scissorTest: {\n        enabled: globeDepth._useScissorTest,\n        rectangle: globeDepth._scissorRectangle,\n      },\n      stencilTest: {\n        enabled: true,\n        frontFunction: StencilFunction.EQUAL,\n        frontOperation: {\n          fail: StencilOperation.KEEP,\n          zFail: StencilOperation.KEEP,\n          zPass: StencilOperation.KEEP,\n        },\n        backFunction: StencilFunction.NEVER,\n        reference: StencilConstants.CESIUM_3D_TILE_MASK,\n        mask: StencilConstants.CESIUM_3D_TILE_MASK,\n      },\n    });\n  }\n\n  if (!defined(globeDepth._copyDepthCommand)) {\n    globeDepth._copyDepthCommand = context.createViewportQuadCommand(\n      PassThroughDepth,\n      {\n        uniformMap: {\n          u_depthTexture: function () {\n            return globeDepth.colorFramebufferManager.getDepthStencilTexture();\n          },\n        },\n        owner: globeDepth,\n      },\n    );\n  }\n\n  globeDepth._copyDepthCommand.framebuffer =\n    globeDepth._copyDepthFramebuffer.framebuffer;\n  globeDepth._copyDepthCommand.renderState = globeDepth._rs;\n\n  if (!defined(globeDepth._copyColorCommand)) {\n    globeDepth._copyColorCommand = context.createViewportQuadCommand(\n      PassThrough,\n      {\n        uniformMap: {\n          colorTexture: function () {\n            return globeDepth.colorFramebufferManager.getColorTexture();\n          },\n        },\n        owner: globeDepth,\n      },\n    );\n  }\n\n  globeDepth._copyColorCommand.renderState = globeDepth._rs;\n\n  if (!defined(globeDepth._tempCopyDepthCommand)) {\n    globeDepth._tempCopyDepthCommand = context.createViewportQuadCommand(\n      PassThroughDepth,\n      {\n        uniformMap: {\n          u_depthTexture: function () {\n            return globeDepth._tempCopyDepthTexture;\n          },\n        },\n        owner: globeDepth,\n      },\n    );\n  }\n\n  globeDepth._tempCopyDepthCommand.framebuffer =\n    globeDepth._tempCopyDepthFramebuffer.framebuffer;\n  globeDepth._tempCopyDepthCommand.renderState = globeDepth._rs;\n\n  if (!defined(globeDepth._updateDepthCommand)) {\n    globeDepth._updateDepthCommand = context.createViewportQuadCommand(\n      PassThrough,\n      {\n        uniformMap: {\n          colorTexture: function () {\n            return globeDepth._tempCopyDepthFramebuffer.getColorTexture();\n          },\n        },\n        owner: globeDepth,\n      },\n    );\n  }\n\n  globeDepth._updateDepthCommand.framebuffer =\n    globeDepth._updateDepthFramebuffer.framebuffer;\n  globeDepth._updateDepthCommand.renderState = globeDepth._rsUpdate;\n\n  if (!defined(globeDepth._clearGlobeColorCommand)) {\n    globeDepth._clearGlobeColorCommand = new ClearCommand({\n      color: new Color(0.0, 0.0, 0.0, 0.0),\n      stencil: 0.0,\n      owner: globeDepth,\n    });\n  }\n\n  globeDepth._clearGlobeColorCommand.framebuffer = globeDepth.framebuffer;\n}\n\n/**\n * Update framebuffers and render state.\n *\n * @param {Context} context The context used for rendering.\n * @param {PassState} passState Rendering state for subsequent render passes.\n * @param {BoundingRectangle} viewport The viewport for the rendering.\n * @param {number} numSamples The number of samples for multi-sample anti-aliasing (MSAA).\n * @param {boolean} hdr <code>true</code> if the color output needs to be floating point for HDR rendering.\n * @param {boolean} clearGlobeDepth <code>true</code> if the depth buffer should be cleared before rendering 3D Tiles and opaque entities.\n *\n * @private\n */\nGlobeDepth.prototype.update = function (\n  context,\n  passState,\n  viewport,\n  numSamples,\n  hdr,\n  clearGlobeDepth,\n) {\n  const { width, height } = viewport;\n\n  const pixelDatatype = hdr\n    ? context.halfFloatingPointTexture\n      ? PixelDatatype.HALF_FLOAT\n      : PixelDatatype.FLOAT\n    : PixelDatatype.UNSIGNED_BYTE;\n  this._numSamples = numSamples;\n  if (this.picking) {\n    this._pickColorFramebuffer.update(context, width, height);\n  } else {\n    this._outputFramebuffer.update(\n      context,\n      width,\n      height,\n      numSamples,\n      pixelDatatype,\n    );\n  }\n  this._copyDepthFramebuffer.update(context, width, height);\n  updateCopyCommands(this, context, width, height, passState);\n  context.uniformState.globeDepthTexture = undefined;\n\n  this._clearGlobeDepth = clearGlobeDepth;\n};\n\n/**\n * If using MSAA, resolve the stencil.\n *\n * @param {Context} context\n * @param {boolean} blitStencil <code>true</code> if the stencil has been set.\n *\n * @private\n */\nGlobeDepth.prototype.prepareColorTextures = function (context, blitStencil) {\n  if (!this.picking && this._numSamples > 1) {\n    this._outputFramebuffer.prepareTextures(context, blitStencil);\n  }\n};\n\nGlobeDepth.prototype.executeCopyDepth = function (context, passState) {\n  if (defined(this._copyDepthCommand)) {\n    this.prepareColorTextures(context);\n    this._copyDepthCommand.execute(context, passState);\n    context.uniformState.globeDepthTexture =\n      this._copyDepthFramebuffer.getColorTexture();\n  }\n};\n\n/**\n * Update the existing depth texture using a stencil.\n *\n * @param {Context} context The context used for rendering.\n * @param {PassState} passState Render state for subsequent rendering passes.\n * @param {Texture} [depthTexture] The depth texture to copy.\n */\nGlobeDepth.prototype.executeUpdateDepth = function (\n  context,\n  passState,\n  depthTexture,\n) {\n  const depthTextureToCopy = defined(depthTexture)\n    ? depthTexture\n    : passState.framebuffer.depthStencilTexture;\n  if (\n    !this._clearGlobeDepth &&\n    depthTextureToCopy === this.colorFramebufferManager.getDepthStencilTexture()\n  ) {\n    // Fast path - the depth texture can be copied normally.\n    if (defined(this._copyDepthCommand)) {\n      this._copyDepthCommand.execute(context, passState);\n    }\n    return;\n  }\n  if (!defined(this._updateDepthCommand)) {\n    return;\n  }\n\n  // First copy the depth to a temporary globe depth texture, then update the\n  // main globe depth texture where the stencil bit for 3D Tiles is set.\n  // This preserves the original globe depth except where 3D Tiles is rendered.\n  // The additional texture and framebuffer resources are created on demand.\n  const updateDepthFramebuffer = this._updateDepthFramebuffer;\n  if (\n    !defined(updateDepthFramebuffer.framebuffer) ||\n    updateDepthFramebuffer.getDepthStencilTexture() !== depthTextureToCopy ||\n    updateDepthFramebuffer.getColorTexture() !==\n      this._copyDepthFramebuffer.getColorTexture()\n  ) {\n    const colorTexture = this._copyDepthFramebuffer.getColorTexture();\n    const { width, height } = colorTexture;\n    this._tempCopyDepthFramebuffer.destroy();\n    this._tempCopyDepthFramebuffer.update(context, width, height);\n\n    updateDepthFramebuffer.setColorTexture(colorTexture, 0);\n    updateDepthFramebuffer.setDepthStencilTexture(depthTextureToCopy);\n    updateDepthFramebuffer.update(context, width, height);\n\n    updateCopyCommands(this, context, width, height, passState);\n  }\n  this._tempCopyDepthTexture = depthTextureToCopy;\n  this._tempCopyDepthCommand.execute(context, passState);\n  this._updateDepthCommand.execute(context, passState);\n};\n\nGlobeDepth.prototype.executeCopyColor = function (context, passState) {\n  if (defined(this._copyColorCommand)) {\n    this._copyColorCommand.execute(context, passState);\n  }\n};\n\nGlobeDepth.prototype.clear = function (context, passState, clearColor) {\n  const clear = this._clearGlobeColorCommand;\n  if (defined(clear)) {\n    Color.clone(clearColor, clear.color);\n    this.colorFramebufferManager.clear(context, clear, passState);\n  }\n};\n\nGlobeDepth.prototype.isDestroyed = function () {\n  return false;\n};\n\nGlobeDepth.prototype.destroy = function () {\n  this._pickColorFramebuffer.destroy();\n  this._outputFramebuffer.destroy();\n  this._copyDepthFramebuffer.destroy();\n  this._tempCopyDepthFramebuffer.destroy();\n  this._updateDepthFramebuffer.destroy();\n\n  if (defined(this._copyColorCommand)) {\n    this._copyColorCommand.shaderProgram =\n      this._copyColorCommand.shaderProgram.destroy();\n  }\n\n  if (defined(this._copyDepthCommand)) {\n    this._copyDepthCommand.shaderProgram =\n      this._copyDepthCommand.shaderProgram.destroy();\n  }\n\n  if (defined(this._tempCopyDepthCommand)) {\n    this._tempCopyDepthCommand.shaderProgram =\n      this._tempCopyDepthCommand.shaderProgram.destroy();\n  }\n\n  if (defined(this._updateDepthCommand)) {\n    this._updateDepthCommand.shaderProgram =\n      this._updateDepthCommand.shaderProgram.destroy();\n  }\n\n  return destroyObject(this);\n};\nexport default GlobeDepth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}