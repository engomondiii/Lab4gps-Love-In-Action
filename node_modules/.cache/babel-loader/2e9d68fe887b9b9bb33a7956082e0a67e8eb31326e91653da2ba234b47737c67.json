{"ast":null,"code":"import Check from \"../Core/Check.js\";\n\n/**\n * Gets a GLSL snippet that clips a fragment using the `clip` function from {@link getClippingFunction} and styles it.\n *\n * @param {string} samplerUniformName Name of the uniform for the clipping planes texture sampler.\n * @param {string} matrixUniformName Name of the uniform for the clipping planes matrix.\n * @param {string} styleUniformName Name of the uniform for the clipping planes style, a vec4.\n * @returns {string} A string containing GLSL that clips and styles the current fragment.\n * @private\n */\nfunction getClipAndStyleCode(samplerUniformName, matrixUniformName, styleUniformName) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"samplerUniformName\", samplerUniformName);\n  Check.typeOf.string(\"matrixUniformName\", matrixUniformName);\n  Check.typeOf.string(\"styleUniformName\", styleUniformName);\n  //>>includeEnd('debug');\n\n  const shaderCode = `    float clipDistance = clip(gl_FragCoord, ${samplerUniformName}, ${matrixUniformName}); \\n` + `    vec4 clippingPlanesEdgeColor = vec4(1.0); \\n` + `    clippingPlanesEdgeColor.rgb = ${styleUniformName}.rgb; \\n` + `    float clippingPlanesEdgeWidth = ${styleUniformName}.a; \\n` + `    if (clipDistance > 0.0 && clipDistance < clippingPlanesEdgeWidth) \\n` + `    { \\n` + `        out_FragColor = clippingPlanesEdgeColor;\\n` + `    } \\n`;\n  return shaderCode;\n}\nexport default getClipAndStyleCode;","map":{"version":3,"names":["Check","getClipAndStyleCode","samplerUniformName","matrixUniformName","styleUniformName","typeOf","string","shaderCode"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/getClipAndStyleCode.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\n\n/**\n * Gets a GLSL snippet that clips a fragment using the `clip` function from {@link getClippingFunction} and styles it.\n *\n * @param {string} samplerUniformName Name of the uniform for the clipping planes texture sampler.\n * @param {string} matrixUniformName Name of the uniform for the clipping planes matrix.\n * @param {string} styleUniformName Name of the uniform for the clipping planes style, a vec4.\n * @returns {string} A string containing GLSL that clips and styles the current fragment.\n * @private\n */\nfunction getClipAndStyleCode(\n  samplerUniformName,\n  matrixUniformName,\n  styleUniformName,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"samplerUniformName\", samplerUniformName);\n  Check.typeOf.string(\"matrixUniformName\", matrixUniformName);\n  Check.typeOf.string(\"styleUniformName\", styleUniformName);\n  //>>includeEnd('debug');\n\n  const shaderCode =\n    `    float clipDistance = clip(gl_FragCoord, ${samplerUniformName}, ${matrixUniformName}); \\n` +\n    `    vec4 clippingPlanesEdgeColor = vec4(1.0); \\n` +\n    `    clippingPlanesEdgeColor.rgb = ${styleUniformName}.rgb; \\n` +\n    `    float clippingPlanesEdgeWidth = ${styleUniformName}.a; \\n` +\n    `    if (clipDistance > 0.0 && clipDistance < clippingPlanesEdgeWidth) \\n` +\n    `    { \\n` +\n    `        out_FragColor = clippingPlanesEdgeColor;\\n` +\n    `    } \\n`;\n  return shaderCode;\n}\nexport default getClipAndStyleCode;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAC1BC,kBAAkB,EAClBC,iBAAiB,EACjBC,gBAAgB,EAChB;EACA;EACAJ,KAAK,CAACK,MAAM,CAACC,MAAM,CAAC,oBAAoB,EAAEJ,kBAAkB,CAAC;EAC7DF,KAAK,CAACK,MAAM,CAACC,MAAM,CAAC,mBAAmB,EAAEH,iBAAiB,CAAC;EAC3DH,KAAK,CAACK,MAAM,CAACC,MAAM,CAAC,kBAAkB,EAAEF,gBAAgB,CAAC;EACzD;;EAEA,MAAMG,UAAU,GACd,+CAA+CL,kBAAkB,KAAKC,iBAAiB,OAAO,GAC9F,kDAAkD,GAClD,qCAAqCC,gBAAgB,UAAU,GAC/D,uCAAuCA,gBAAgB,QAAQ,GAC/D,0EAA0E,GAC1E,UAAU,GACV,oDAAoD,GACpD,UAAU;EACZ,OAAOG,UAAU;AACnB;AACA,eAAeN,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}