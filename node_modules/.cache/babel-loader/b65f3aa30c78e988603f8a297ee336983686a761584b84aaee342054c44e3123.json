{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport ArcGisMapService from \"./ArcGisMapService.js\";\nimport DiscardMissingTileImagePolicy from \"./DiscardMissingTileImagePolicy.js\";\nimport ImageryLayerFeatureInfo from \"./ImageryLayerFeatureInfo.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\nimport ArcGisBaseMapType from \"./ArcGisBaseMapType.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * @typedef {object} ArcGisMapServerImageryProvider.ConstructorOptions\n *\n * Initialization options for the ArcGisMapServerImageryProvider constructor\n *\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded.  If this value is not specified, a default\n *        {@link DiscardMissingTileImagePolicy} is used for tiled map servers, and a\n *        {@link NeverTileDiscardPolicy} is used for non-tiled map servers.  In the former case,\n *        we request tile 0,0 at the maximum tile level and check pixels (0,0), (200,20), (20,200),\n *        (80,110), and (160, 130).  If all of these pixels are transparent, the discard check is\n *        disabled and no tiles are discarded.  If any of them have a non-transparent color, any\n *        tile that has the same values in these pixel locations is discarded.  The end result of\n *        these defaults should be correct tile discarding for a standard ArcGIS Server.  To ensure\n *        that no tiles are discarded, construct and pass a {@link NeverTileDiscardPolicy} for this\n *        parameter.\n * @property {boolean} [usePreCachedTilesIfAvailable=true] If true, the server's pre-cached\n *        tiles are used if they are available. Exporting Tiles is only supported with deprecated APIs.\n * @property {string} [layers] A comma-separated list of the layers to show, or undefined if all layers should be shown.\n * @property {boolean} [enablePickFeatures=true] If true, {@link ArcGisMapServerImageryProvider#pickFeatures} will invoke\n *        the Identify service on the MapServer and return the features included in the response.  If false,\n *        {@link ArcGisMapServerImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n *        without communicating with the server.  Set this property to false if you don't want this provider's features to\n *        be pickable. Can be overridden by setting the {@link ArcGisMapServerImageryProvider#enablePickFeatures} property on the object.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle of the layer.  This parameter is ignored when accessing\n *                    a tiled layer.\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme to use to divide the world into tiles.\n *                       This parameter is ignored when accessing a tiled server.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid.  If the tilingScheme is specified and used,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the default ellipsoid is used.\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.  This parameter is ignored when accessing a tiled server.\n * @property {number} [tileWidth=256] The width of each tile in pixels.  This parameter is ignored when accessing a tiled server.\n * @property {number} [tileHeight=256] The height of each tile in pixels.  This parameter is ignored when accessing a tiled server.\n * @property {number} [maximumLevel] The maximum tile level to request, or undefined if there is no maximum.  This parameter is ignored when accessing\n *                                        a tiled server.\n *\n *\n */\n\n/**\n * Used to track creation details while fetching initial metadata\n *\n * @constructor\n * @private\n *\n * @param {ArcGisMapServerImageryProvider.ConstructorOptions} options An object describing initialization options\n */\nfunction ImageryProviderBuilder(options) {\n  this.useTiles = defaultValue(options.usePreCachedTilesIfAvailable, true);\n  const ellipsoid = options.ellipsoid;\n  this.tilingScheme = defaultValue(options.tilingScheme, new GeographicTilingScheme({\n    ellipsoid: ellipsoid\n  }));\n  this.rectangle = defaultValue(options.rectangle, this.tilingScheme.rectangle);\n  this.ellipsoid = ellipsoid;\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this.credit = credit;\n  this.tileCredits = undefined;\n  this.tileDiscardPolicy = options.tileDiscardPolicy;\n  this.tileWidth = defaultValue(options.tileWidth, 256);\n  this.tileHeight = defaultValue(options.tileHeight, 256);\n  this.maximumLevel = options.maximumLevel;\n}\n\n/**\n * Complete ArcGisMapServerImageryProvider creation based on builder values.\n *\n * @private\n *\n * @param {ArcGisMapServerImageryProvider} provider\n */\nImageryProviderBuilder.prototype.build = function (provider) {\n  provider._useTiles = this.useTiles;\n  provider._tilingScheme = this.tilingScheme;\n  provider._rectangle = this.rectangle;\n  provider._credit = this.credit;\n  provider._tileCredits = this.tileCredits;\n  provider._tileDiscardPolicy = this.tileDiscardPolicy;\n  provider._tileWidth = this.tileWidth;\n  provider._tileHeight = this.tileHeight;\n  provider._maximumLevel = this.maximumLevel;\n\n  // Install the default tile discard policy if none has been supplied.\n  if (this.useTiles && !defined(this.tileDiscardPolicy)) {\n    provider._tileDiscardPolicy = new DiscardMissingTileImagePolicy({\n      missingImageUrl: buildImageResource(provider, 0, 0, this.maximumLevel).url,\n      pixelsToCheck: [new Cartesian2(0, 0), new Cartesian2(200, 20), new Cartesian2(20, 200), new Cartesian2(80, 110), new Cartesian2(160, 130)],\n      disableCheckIfAllPixelsAreTransparent: true\n    });\n  }\n};\nfunction metadataSuccess(data, imageryProviderBuilder) {\n  const tileInfo = data.tileInfo;\n  if (!defined(tileInfo)) {\n    imageryProviderBuilder.useTiles = false;\n  } else {\n    imageryProviderBuilder.tileWidth = tileInfo.rows;\n    imageryProviderBuilder.tileHeight = tileInfo.cols;\n    if (tileInfo.spatialReference.wkid === 102100 || tileInfo.spatialReference.wkid === 102113) {\n      imageryProviderBuilder.tilingScheme = new WebMercatorTilingScheme({\n        ellipsoid: imageryProviderBuilder.ellipsoid\n      });\n    } else if (data.tileInfo.spatialReference.wkid === 4326) {\n      imageryProviderBuilder.tilingScheme = new GeographicTilingScheme({\n        ellipsoid: imageryProviderBuilder.ellipsoid\n      });\n    } else {\n      const message = `Tile spatial reference WKID ${data.tileInfo.spatialReference.wkid} is not supported.`;\n      throw new RuntimeError(message);\n    }\n    imageryProviderBuilder.maximumLevel = data.tileInfo.lods.length - 1;\n    if (defined(data.fullExtent)) {\n      if (defined(data.fullExtent.spatialReference) && defined(data.fullExtent.spatialReference.wkid)) {\n        if (data.fullExtent.spatialReference.wkid === 102100 || data.fullExtent.spatialReference.wkid === 102113) {\n          const projection = new WebMercatorProjection();\n          const extent = data.fullExtent;\n          const sw = projection.unproject(new Cartesian3(Math.max(extent.xmin, -imageryProviderBuilder.tilingScheme.ellipsoid.maximumRadius * Math.PI), Math.max(extent.ymin, -imageryProviderBuilder.tilingScheme.ellipsoid.maximumRadius * Math.PI), 0.0));\n          const ne = projection.unproject(new Cartesian3(Math.min(extent.xmax, imageryProviderBuilder.tilingScheme.ellipsoid.maximumRadius * Math.PI), Math.min(extent.ymax, imageryProviderBuilder.tilingScheme.ellipsoid.maximumRadius * Math.PI), 0.0));\n          imageryProviderBuilder.rectangle = new Rectangle(sw.longitude, sw.latitude, ne.longitude, ne.latitude);\n        } else if (data.fullExtent.spatialReference.wkid === 4326) {\n          imageryProviderBuilder.rectangle = Rectangle.fromDegrees(data.fullExtent.xmin, data.fullExtent.ymin, data.fullExtent.xmax, data.fullExtent.ymax);\n        } else {\n          const extentMessage = `fullExtent.spatialReference WKID ${data.fullExtent.spatialReference.wkid} is not supported.`;\n          throw new RuntimeError(extentMessage);\n        }\n      }\n    } else {\n      imageryProviderBuilder.rectangle = imageryProviderBuilder.tilingScheme.rectangle;\n    }\n    imageryProviderBuilder.useTiles = true;\n  }\n  if (defined(data.copyrightText) && data.copyrightText.length > 0) {\n    if (defined(imageryProviderBuilder.credit)) {\n      imageryProviderBuilder.tileCredits = [new Credit(data.copyrightText)];\n    } else {\n      imageryProviderBuilder.credit = new Credit(data.copyrightText);\n    }\n  }\n}\nfunction metadataFailure(resource, error) {\n  let message = `An error occurred while accessing ${resource.url}`;\n  if (defined(error) && defined(error.message)) {\n    message += `: ${error.message}`;\n  }\n  throw new RuntimeError(message);\n}\nasync function requestMetadata(resource, imageryProviderBuilder) {\n  const jsonResource = resource.getDerivedResource({\n    queryParameters: {\n      f: \"json\"\n    }\n  });\n  try {\n    const data = await jsonResource.fetchJson();\n    metadataSuccess(data, imageryProviderBuilder);\n  } catch (error) {\n    metadataFailure(resource, error);\n  }\n}\n\n/**\n * <div class=\"notice\">\n * This object is normally not instantiated directly, use {@link ArcGisMapServerImageryProvider.fromBasemapType} or {@link ArcGisMapServerImageryProvider.fromUrl}.\n * </div>\n *\n * Provides tiled imagery hosted by an ArcGIS MapServer.  By default, the server's pre-cached tiles are\n * used, if available.\n *\n * <br/>\n *\n * An {@link https://developers.arcgis.com/documentation/mapping-apis-and-services/security| ArcGIS Access Token } is required to authenticate requests to an ArcGIS Image Tile service.\n * To access secure ArcGIS resources, it's required to create an ArcGIS developer\n * account or an ArcGIS online account, then implement an authentication method to obtain an access token.\n *\n * @alias ArcGisMapServerImageryProvider\n * @constructor\n *\n * @param {ArcGisMapServerImageryProvider.ConstructorOptions} [options] Object describing initialization options\n *\n * @see ArcGisMapServerImageryProvider.fromBasemapType\n * @see ArcGisMapServerImageryProvider.fromUrl\n *\n * @example\n * // Set the default access token for accessing ArcGIS Image Tile service\n * Cesium.ArcGisMapService.defaultAccessToken = \"<ArcGIS Access Token>\";\n *\n * // Add a base layer from a default ArcGIS basemap\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   baseLayer: Cesium.ImageryLayer.fromProviderAsync(\n *     Cesium.ArcGisMapServerImageryProvider.fromBasemapType(\n *       Cesium.ArcGisBaseMapType.SATELLITE\n *     )\n *   ),\n * });\n *\n * @example\n * // Create an imagery provider from the url directly\n * const esri = await Cesium.ArcGisMapServerImageryProvider.fromUrl(\n *   \"https://ibasemaps-api.arcgis.com/arcgis/rest/services/World_Imagery/MapServer\", {\n *     token: \"<ArcGIS Access Token>\"\n * });\n *\n * @see {@link https://developers.arcgis.com/rest/|ArcGIS Server REST API}\n * @see {@link https://developers.arcgis.com/documentation/mapping-apis-and-services/security| ArcGIS Access Token }\n\n */\nfunction ArcGisMapServerImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n  this._maximumLevel = options.maximumLevel;\n  this._tilingScheme = defaultValue(options.tilingScheme, new GeographicTilingScheme({\n    ellipsoid: options.ellipsoid\n  }));\n  this._useTiles = defaultValue(options.usePreCachedTilesIfAvailable, true);\n  this._rectangle = defaultValue(options.rectangle, this._tilingScheme.rectangle);\n  this._layers = options.layers;\n  this._credit = options.credit;\n  this._tileCredits = undefined;\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link ArcGisMapServerImageryProvider#pickFeatures} will\n   * invoke the \"identify\" operation on the ArcGIS server and return the features included in the response.  If false,\n   * {@link ArcGisMapServerImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n   * without communicating with the server.\n   * @type {boolean}\n   * @default true\n   */\n  this.enablePickFeatures = defaultValue(options.enablePickFeatures, true);\n  this._errorEvent = new Event();\n}\n\n/**\n * Creates an {@link ImageryProvider} which provides tiled imagery from an ArcGIS base map.\n * @param {ArcGisBaseMapType} style The style of the ArcGIS base map imagery. Valid options are {@link ArcGisBaseMapType.SATELLITE}, {@link ArcGisBaseMapType.OCEANS}, and {@link ArcGisBaseMapType.HILLSHADE}.\n * @param {ArcGisMapServerImageryProvider.ConstructorOptions} [options] Object describing initialization options.\n * @returns {Promise<ArcGisMapServerImageryProvider>} A promise that resolves to the created ArcGisMapServerImageryProvider.\n *\n * @example\n * // Set the default access token for accessing ArcGIS Image Tile service\n * Cesium.ArcGisMapService.defaultAccessToken = \"<ArcGIS Access Token>\";\n *\n * // Add a base layer from a default ArcGIS basemap\n * const provider = await Cesium.ArcGisMapServerImageryProvider.fromBasemapType(\n *   Cesium.ArcGisBaseMapType.SATELLITE);\n *\n * @example\n * // Add a base layer from a default ArcGIS Basemap\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   baseLayer: Cesium.ImageryLayer.fromProviderAsync(\n *     Cesium.ArcGisMapServerImageryProvider.fromBasemapType(\n *       Cesium.ArcGisBaseMapType.HILLSHADE, {\n *         token: \"<ArcGIS Access Token>\"\n *       }\n *     )\n *   ),\n * });\n */\n\nArcGisMapServerImageryProvider.fromBasemapType = async function (style, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"style\", style);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let accessToken;\n  let server;\n  let warningCredit;\n  switch (style) {\n    case ArcGisBaseMapType.SATELLITE:\n      {\n        accessToken = defaultValue(options.token, ArcGisMapService.defaultAccessToken);\n        server = Resource.createIfNeeded(ArcGisMapService.defaultWorldImageryServer);\n        server.appendForwardSlash();\n        const defaultTokenCredit = ArcGisMapService.getDefaultTokenCredit(accessToken);\n        if (defined(defaultTokenCredit)) {\n          warningCredit = Credit.clone(defaultTokenCredit);\n        }\n      }\n      break;\n    case ArcGisBaseMapType.OCEANS:\n      {\n        accessToken = defaultValue(options.token, ArcGisMapService.defaultAccessToken);\n        server = Resource.createIfNeeded(ArcGisMapService.defaultWorldOceanServer);\n        server.appendForwardSlash();\n        const defaultTokenCredit = ArcGisMapService.getDefaultTokenCredit(accessToken);\n        if (defined(defaultTokenCredit)) {\n          warningCredit = Credit.clone(defaultTokenCredit);\n        }\n      }\n      break;\n    case ArcGisBaseMapType.HILLSHADE:\n      {\n        accessToken = defaultValue(options.token, ArcGisMapService.defaultAccessToken);\n        server = Resource.createIfNeeded(ArcGisMapService.defaultWorldHillshadeServer);\n        server.appendForwardSlash();\n        const defaultTokenCredit = ArcGisMapService.getDefaultTokenCredit(accessToken);\n        if (defined(defaultTokenCredit)) {\n          warningCredit = Credit.clone(defaultTokenCredit);\n        }\n      }\n      break;\n    default:\n      //>>includeStart('debug', pragmas.debug);\n      throw new DeveloperError(`Unsupported basemap type: ${style}`);\n    //>>includeEnd('debug');\n  }\n  return ArcGisMapServerImageryProvider.fromUrl(server, {\n    ...options,\n    token: accessToken,\n    credit: warningCredit,\n    usePreCachedTilesIfAvailable: true // ArcGIS Base Map Service Layers only support Tiled views\n  });\n};\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  let resource;\n  if (imageryProvider._useTiles) {\n    resource = imageryProvider._resource.getDerivedResource({\n      url: `tile/${level}/${y}/${x}`,\n      request: request\n    });\n  } else {\n    const nativeRectangle = imageryProvider._tilingScheme.tileXYToNativeRectangle(x, y, level);\n    const bbox = `${nativeRectangle.west},${nativeRectangle.south},${nativeRectangle.east},${nativeRectangle.north}`;\n    const query = {\n      bbox: bbox,\n      size: `${imageryProvider._tileWidth},${imageryProvider._tileHeight}`,\n      format: \"png32\",\n      transparent: true,\n      f: \"image\"\n    };\n    if (imageryProvider._tilingScheme.projection instanceof GeographicProjection) {\n      query.bboxSR = 4326;\n      query.imageSR = 4326;\n    } else {\n      query.bboxSR = 3857;\n      query.imageSR = 3857;\n    }\n    if (imageryProvider.layers) {\n      query.layers = `show:${imageryProvider.layers}`;\n    }\n    resource = imageryProvider._resource.getDerivedResource({\n      url: \"export\",\n      request: request,\n      queryParameters: query\n    });\n  }\n  return resource;\n}\nObject.defineProperties(ArcGisMapServerImageryProvider.prototype, {\n  /**\n   * Gets the URL of the ArcGIS MapServer.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource._url;\n    }\n  },\n  /**\n   * Gets the ArcGIS token used to authenticate with the ArcGis MapServer service.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  token: {\n    get: function () {\n      return this._resource.queryParameters.token;\n    }\n  },\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    }\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    }\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    }\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    }\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    }\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n  /**\n   * Gets a value indicating whether this imagery provider is using pre-cached tiles from the\n   * ArcGIS MapServer.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   * @default true\n   */\n  usingPrecachedTiles: {\n    get: function () {\n      return this._useTiles;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   * @default true\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    }\n  },\n  /**\n   * Gets the comma-separated list of layer IDs to show.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {string}\n   */\n  layers: {\n    get: function () {\n      return this._layers;\n    }\n  }\n});\n\n/**\n * Creates an {@link ImageryProvider} which provides tiled imagery hosted by an ArcGIS MapServer.  By default, the server's pre-cached tiles are\n * used, if available.\n *\n * @param {Resource|String} url The URL of the ArcGIS MapServer service.\n * @param {ArcGisMapServerImageryProvider.ConstructorOptions} [options] Object describing initialization options.\n * @returns {Promise<ArcGisMapServerImageryProvider>} A promise that resolves to the created ArcGisMapServerImageryProvider.\n *\n * @example\n * const esri = await Cesium.ArcGisMapServerImageryProvider.fromUrl(\n *     \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer\"\n * );\n *\n * @exception {RuntimeError} metadata spatial reference specifies an unknown WKID\n * @exception {RuntimeError} metadata fullExtent.spatialReference specifies an unknown WKID\n */\nArcGisMapServerImageryProvider.fromUrl = async function (url, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const resource = Resource.createIfNeeded(url);\n  resource.appendForwardSlash();\n  if (defined(options.token)) {\n    resource.setQueryParameters({\n      token: options.token\n    });\n  }\n  const provider = new ArcGisMapServerImageryProvider(options);\n  provider._resource = resource;\n  const imageryProviderBuilder = new ImageryProviderBuilder(options);\n  const useTiles = defaultValue(options.usePreCachedTilesIfAvailable, true);\n  if (useTiles) {\n    await requestMetadata(resource, imageryProviderBuilder);\n  }\n  imageryProviderBuilder.build(provider);\n  return provider;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nArcGisMapServerImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return this._tileCredits;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nArcGisMapServerImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return ImageryProvider.loadImage(this, buildImageResource(this, x, y, level, request));\n};\n\n/**\n    /**\n     * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n     * a tile.\n     *\n     * @param {number} x The tile X coordinate.\n     * @param {number} y The tile Y coordinate.\n     * @param {number} level The tile level.\n     * @param {number} longitude The longitude at which to pick features.\n     * @param {number} latitude  The latitude at which to pick features.\n     * @return {Promise<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n     *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n     *                   instances.  The array may be empty if no features are found at the given location.\n     */\nArcGisMapServerImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  if (!this.enablePickFeatures) {\n    return undefined;\n  }\n  const rectangle = this._tilingScheme.tileXYToNativeRectangle(x, y, level);\n  let horizontal;\n  let vertical;\n  let sr;\n  if (this._tilingScheme.projection instanceof GeographicProjection) {\n    horizontal = CesiumMath.toDegrees(longitude);\n    vertical = CesiumMath.toDegrees(latitude);\n    sr = \"4326\";\n  } else {\n    const projected = this._tilingScheme.projection.project(new Cartographic(longitude, latitude, 0.0));\n    horizontal = projected.x;\n    vertical = projected.y;\n    sr = \"3857\";\n  }\n  let layers = \"visible\";\n  if (defined(this._layers)) {\n    layers += `:${this._layers}`;\n  }\n  const query = {\n    f: \"json\",\n    tolerance: 2,\n    geometryType: \"esriGeometryPoint\",\n    geometry: `${horizontal},${vertical}`,\n    mapExtent: `${rectangle.west},${rectangle.south},${rectangle.east},${rectangle.north}`,\n    imageDisplay: `${this._tileWidth},${this._tileHeight},96`,\n    sr: sr,\n    layers: layers\n  };\n  const resource = this._resource.getDerivedResource({\n    url: \"identify\",\n    queryParameters: query\n  });\n  return resource.fetchJson().then(function (json) {\n    const result = [];\n    const features = json.results;\n    if (!defined(features)) {\n      return result;\n    }\n    for (let i = 0; i < features.length; ++i) {\n      const feature = features[i];\n      const featureInfo = new ImageryLayerFeatureInfo();\n      featureInfo.data = feature;\n      featureInfo.name = feature.value;\n      featureInfo.properties = feature.attributes;\n      featureInfo.configureDescriptionFromProperties(feature.attributes);\n\n      // If this is a point feature, use the coordinates of the point.\n      if (feature.geometryType === \"esriGeometryPoint\" && feature.geometry) {\n        const wkid = feature.geometry.spatialReference && feature.geometry.spatialReference.wkid ? feature.geometry.spatialReference.wkid : 4326;\n        if (wkid === 4326 || wkid === 4283) {\n          featureInfo.position = Cartographic.fromDegrees(feature.geometry.x, feature.geometry.y, feature.geometry.z);\n        } else if (wkid === 102100 || wkid === 900913 || wkid === 3857) {\n          const projection = new WebMercatorProjection();\n          featureInfo.position = projection.unproject(new Cartesian3(feature.geometry.x, feature.geometry.y, feature.geometry.z));\n        }\n      }\n      result.push(featureInfo);\n    }\n    return result;\n  });\n};\nArcGisMapServerImageryProvider._metadataCache = {};\nexport default ArcGisMapServerImageryProvider;","map":{"version":3,"names":["Cartesian2","Cartesian3","Cartographic","Check","Credit","defaultValue","defined","Event","GeographicProjection","GeographicTilingScheme","CesiumMath","Rectangle","Resource","RuntimeError","WebMercatorProjection","WebMercatorTilingScheme","ArcGisMapService","DiscardMissingTileImagePolicy","ImageryLayerFeatureInfo","ImageryProvider","ArcGisBaseMapType","DeveloperError","ImageryProviderBuilder","options","useTiles","usePreCachedTilesIfAvailable","ellipsoid","tilingScheme","rectangle","credit","tileCredits","undefined","tileDiscardPolicy","tileWidth","tileHeight","maximumLevel","prototype","build","provider","_useTiles","_tilingScheme","_rectangle","_credit","_tileCredits","_tileDiscardPolicy","_tileWidth","_tileHeight","_maximumLevel","missingImageUrl","buildImageResource","url","pixelsToCheck","disableCheckIfAllPixelsAreTransparent","metadataSuccess","data","imageryProviderBuilder","tileInfo","rows","cols","spatialReference","wkid","message","lods","length","fullExtent","projection","extent","sw","unproject","Math","max","xmin","maximumRadius","PI","ymin","ne","min","xmax","ymax","longitude","latitude","fromDegrees","extentMessage","copyrightText","metadataFailure","resource","error","requestMetadata","jsonResource","getDerivedResource","queryParameters","f","fetchJson","ArcGisMapServerImageryProvider","EMPTY_OBJECT","_defaultAlpha","_defaultNightAlpha","_defaultDayAlpha","_defaultBrightness","_defaultContrast","_defaultHue","_defaultSaturation","_defaultGamma","_defaultMinificationFilter","_defaultMagnificationFilter","_layers","layers","enablePickFeatures","_errorEvent","fromBasemapType","style","accessToken","server","warningCredit","SATELLITE","token","defaultAccessToken","createIfNeeded","defaultWorldImageryServer","appendForwardSlash","defaultTokenCredit","getDefaultTokenCredit","clone","OCEANS","defaultWorldOceanServer","HILLSHADE","defaultWorldHillshadeServer","fromUrl","imageryProvider","x","y","level","request","_resource","nativeRectangle","tileXYToNativeRectangle","bbox","west","south","east","north","query","size","format","transparent","bboxSR","imageSR","Object","defineProperties","get","_url","proxy","minimumLevel","errorEvent","usingPrecachedTiles","hasAlphaChannel","setQueryParameters","getTileCredits","requestImage","loadImage","pickFeatures","horizontal","vertical","sr","toDegrees","projected","project","tolerance","geometryType","geometry","mapExtent","imageDisplay","then","json","result","features","results","i","feature","featureInfo","name","value","properties","attributes","configureDescriptionFromProperties","position","z","push","_metadataCache"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ArcGisMapServerImageryProvider.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport ArcGisMapService from \"./ArcGisMapService.js\";\nimport DiscardMissingTileImagePolicy from \"./DiscardMissingTileImagePolicy.js\";\nimport ImageryLayerFeatureInfo from \"./ImageryLayerFeatureInfo.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\nimport ArcGisBaseMapType from \"./ArcGisBaseMapType.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * @typedef {object} ArcGisMapServerImageryProvider.ConstructorOptions\n *\n * Initialization options for the ArcGisMapServerImageryProvider constructor\n *\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded.  If this value is not specified, a default\n *        {@link DiscardMissingTileImagePolicy} is used for tiled map servers, and a\n *        {@link NeverTileDiscardPolicy} is used for non-tiled map servers.  In the former case,\n *        we request tile 0,0 at the maximum tile level and check pixels (0,0), (200,20), (20,200),\n *        (80,110), and (160, 130).  If all of these pixels are transparent, the discard check is\n *        disabled and no tiles are discarded.  If any of them have a non-transparent color, any\n *        tile that has the same values in these pixel locations is discarded.  The end result of\n *        these defaults should be correct tile discarding for a standard ArcGIS Server.  To ensure\n *        that no tiles are discarded, construct and pass a {@link NeverTileDiscardPolicy} for this\n *        parameter.\n * @property {boolean} [usePreCachedTilesIfAvailable=true] If true, the server's pre-cached\n *        tiles are used if they are available. Exporting Tiles is only supported with deprecated APIs.\n * @property {string} [layers] A comma-separated list of the layers to show, or undefined if all layers should be shown.\n * @property {boolean} [enablePickFeatures=true] If true, {@link ArcGisMapServerImageryProvider#pickFeatures} will invoke\n *        the Identify service on the MapServer and return the features included in the response.  If false,\n *        {@link ArcGisMapServerImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n *        without communicating with the server.  Set this property to false if you don't want this provider's features to\n *        be pickable. Can be overridden by setting the {@link ArcGisMapServerImageryProvider#enablePickFeatures} property on the object.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle of the layer.  This parameter is ignored when accessing\n *                    a tiled layer.\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme to use to divide the world into tiles.\n *                       This parameter is ignored when accessing a tiled server.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid.  If the tilingScheme is specified and used,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the default ellipsoid is used.\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.  This parameter is ignored when accessing a tiled server.\n * @property {number} [tileWidth=256] The width of each tile in pixels.  This parameter is ignored when accessing a tiled server.\n * @property {number} [tileHeight=256] The height of each tile in pixels.  This parameter is ignored when accessing a tiled server.\n * @property {number} [maximumLevel] The maximum tile level to request, or undefined if there is no maximum.  This parameter is ignored when accessing\n *                                        a tiled server.\n *\n *\n */\n\n/**\n * Used to track creation details while fetching initial metadata\n *\n * @constructor\n * @private\n *\n * @param {ArcGisMapServerImageryProvider.ConstructorOptions} options An object describing initialization options\n */\nfunction ImageryProviderBuilder(options) {\n  this.useTiles = defaultValue(options.usePreCachedTilesIfAvailable, true);\n\n  const ellipsoid = options.ellipsoid;\n  this.tilingScheme = defaultValue(\n    options.tilingScheme,\n    new GeographicTilingScheme({ ellipsoid: ellipsoid }),\n  );\n  this.rectangle = defaultValue(options.rectangle, this.tilingScheme.rectangle);\n  this.ellipsoid = ellipsoid;\n\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this.credit = credit;\n  this.tileCredits = undefined;\n  this.tileDiscardPolicy = options.tileDiscardPolicy;\n\n  this.tileWidth = defaultValue(options.tileWidth, 256);\n  this.tileHeight = defaultValue(options.tileHeight, 256);\n  this.maximumLevel = options.maximumLevel;\n}\n\n/**\n * Complete ArcGisMapServerImageryProvider creation based on builder values.\n *\n * @private\n *\n * @param {ArcGisMapServerImageryProvider} provider\n */\nImageryProviderBuilder.prototype.build = function (provider) {\n  provider._useTiles = this.useTiles;\n  provider._tilingScheme = this.tilingScheme;\n  provider._rectangle = this.rectangle;\n  provider._credit = this.credit;\n  provider._tileCredits = this.tileCredits;\n  provider._tileDiscardPolicy = this.tileDiscardPolicy;\n  provider._tileWidth = this.tileWidth;\n  provider._tileHeight = this.tileHeight;\n  provider._maximumLevel = this.maximumLevel;\n\n  // Install the default tile discard policy if none has been supplied.\n  if (this.useTiles && !defined(this.tileDiscardPolicy)) {\n    provider._tileDiscardPolicy = new DiscardMissingTileImagePolicy({\n      missingImageUrl: buildImageResource(provider, 0, 0, this.maximumLevel)\n        .url,\n      pixelsToCheck: [\n        new Cartesian2(0, 0),\n        new Cartesian2(200, 20),\n        new Cartesian2(20, 200),\n        new Cartesian2(80, 110),\n        new Cartesian2(160, 130),\n      ],\n      disableCheckIfAllPixelsAreTransparent: true,\n    });\n  }\n};\n\nfunction metadataSuccess(data, imageryProviderBuilder) {\n  const tileInfo = data.tileInfo;\n  if (!defined(tileInfo)) {\n    imageryProviderBuilder.useTiles = false;\n  } else {\n    imageryProviderBuilder.tileWidth = tileInfo.rows;\n    imageryProviderBuilder.tileHeight = tileInfo.cols;\n\n    if (\n      tileInfo.spatialReference.wkid === 102100 ||\n      tileInfo.spatialReference.wkid === 102113\n    ) {\n      imageryProviderBuilder.tilingScheme = new WebMercatorTilingScheme({\n        ellipsoid: imageryProviderBuilder.ellipsoid,\n      });\n    } else if (data.tileInfo.spatialReference.wkid === 4326) {\n      imageryProviderBuilder.tilingScheme = new GeographicTilingScheme({\n        ellipsoid: imageryProviderBuilder.ellipsoid,\n      });\n    } else {\n      const message = `Tile spatial reference WKID ${data.tileInfo.spatialReference.wkid} is not supported.`;\n      throw new RuntimeError(message);\n    }\n    imageryProviderBuilder.maximumLevel = data.tileInfo.lods.length - 1;\n\n    if (defined(data.fullExtent)) {\n      if (\n        defined(data.fullExtent.spatialReference) &&\n        defined(data.fullExtent.spatialReference.wkid)\n      ) {\n        if (\n          data.fullExtent.spatialReference.wkid === 102100 ||\n          data.fullExtent.spatialReference.wkid === 102113\n        ) {\n          const projection = new WebMercatorProjection();\n          const extent = data.fullExtent;\n          const sw = projection.unproject(\n            new Cartesian3(\n              Math.max(\n                extent.xmin,\n                -imageryProviderBuilder.tilingScheme.ellipsoid.maximumRadius *\n                  Math.PI,\n              ),\n              Math.max(\n                extent.ymin,\n                -imageryProviderBuilder.tilingScheme.ellipsoid.maximumRadius *\n                  Math.PI,\n              ),\n              0.0,\n            ),\n          );\n          const ne = projection.unproject(\n            new Cartesian3(\n              Math.min(\n                extent.xmax,\n                imageryProviderBuilder.tilingScheme.ellipsoid.maximumRadius *\n                  Math.PI,\n              ),\n              Math.min(\n                extent.ymax,\n                imageryProviderBuilder.tilingScheme.ellipsoid.maximumRadius *\n                  Math.PI,\n              ),\n              0.0,\n            ),\n          );\n          imageryProviderBuilder.rectangle = new Rectangle(\n            sw.longitude,\n            sw.latitude,\n            ne.longitude,\n            ne.latitude,\n          );\n        } else if (data.fullExtent.spatialReference.wkid === 4326) {\n          imageryProviderBuilder.rectangle = Rectangle.fromDegrees(\n            data.fullExtent.xmin,\n            data.fullExtent.ymin,\n            data.fullExtent.xmax,\n            data.fullExtent.ymax,\n          );\n        } else {\n          const extentMessage = `fullExtent.spatialReference WKID ${data.fullExtent.spatialReference.wkid} is not supported.`;\n          throw new RuntimeError(extentMessage);\n        }\n      }\n    } else {\n      imageryProviderBuilder.rectangle =\n        imageryProviderBuilder.tilingScheme.rectangle;\n    }\n\n    imageryProviderBuilder.useTiles = true;\n  }\n\n  if (defined(data.copyrightText) && data.copyrightText.length > 0) {\n    if (defined(imageryProviderBuilder.credit)) {\n      imageryProviderBuilder.tileCredits = [new Credit(data.copyrightText)];\n    } else {\n      imageryProviderBuilder.credit = new Credit(data.copyrightText);\n    }\n  }\n}\n\nfunction metadataFailure(resource, error) {\n  let message = `An error occurred while accessing ${resource.url}`;\n  if (defined(error) && defined(error.message)) {\n    message += `: ${error.message}`;\n  }\n\n  throw new RuntimeError(message);\n}\n\nasync function requestMetadata(resource, imageryProviderBuilder) {\n  const jsonResource = resource.getDerivedResource({\n    queryParameters: {\n      f: \"json\",\n    },\n  });\n\n  try {\n    const data = await jsonResource.fetchJson();\n    metadataSuccess(data, imageryProviderBuilder);\n  } catch (error) {\n    metadataFailure(resource, error);\n  }\n}\n\n/**\n * <div class=\"notice\">\n * This object is normally not instantiated directly, use {@link ArcGisMapServerImageryProvider.fromBasemapType} or {@link ArcGisMapServerImageryProvider.fromUrl}.\n * </div>\n *\n * Provides tiled imagery hosted by an ArcGIS MapServer.  By default, the server's pre-cached tiles are\n * used, if available.\n *\n * <br/>\n *\n * An {@link https://developers.arcgis.com/documentation/mapping-apis-and-services/security| ArcGIS Access Token } is required to authenticate requests to an ArcGIS Image Tile service.\n * To access secure ArcGIS resources, it's required to create an ArcGIS developer\n * account or an ArcGIS online account, then implement an authentication method to obtain an access token.\n *\n * @alias ArcGisMapServerImageryProvider\n * @constructor\n *\n * @param {ArcGisMapServerImageryProvider.ConstructorOptions} [options] Object describing initialization options\n *\n * @see ArcGisMapServerImageryProvider.fromBasemapType\n * @see ArcGisMapServerImageryProvider.fromUrl\n *\n * @example\n * // Set the default access token for accessing ArcGIS Image Tile service\n * Cesium.ArcGisMapService.defaultAccessToken = \"<ArcGIS Access Token>\";\n *\n * // Add a base layer from a default ArcGIS basemap\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   baseLayer: Cesium.ImageryLayer.fromProviderAsync(\n *     Cesium.ArcGisMapServerImageryProvider.fromBasemapType(\n *       Cesium.ArcGisBaseMapType.SATELLITE\n *     )\n *   ),\n * });\n *\n * @example\n * // Create an imagery provider from the url directly\n * const esri = await Cesium.ArcGisMapServerImageryProvider.fromUrl(\n *   \"https://ibasemaps-api.arcgis.com/arcgis/rest/services/World_Imagery/MapServer\", {\n *     token: \"<ArcGIS Access Token>\"\n * });\n *\n * @see {@link https://developers.arcgis.com/rest/|ArcGIS Server REST API}\n * @see {@link https://developers.arcgis.com/documentation/mapping-apis-and-services/security| ArcGIS Access Token }\n\n */\nfunction ArcGisMapServerImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n  this._maximumLevel = options.maximumLevel;\n  this._tilingScheme = defaultValue(\n    options.tilingScheme,\n    new GeographicTilingScheme({ ellipsoid: options.ellipsoid }),\n  );\n  this._useTiles = defaultValue(options.usePreCachedTilesIfAvailable, true);\n  this._rectangle = defaultValue(\n    options.rectangle,\n    this._tilingScheme.rectangle,\n  );\n  this._layers = options.layers;\n  this._credit = options.credit;\n  this._tileCredits = undefined;\n\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link ArcGisMapServerImageryProvider#pickFeatures} will\n   * invoke the \"identify\" operation on the ArcGIS server and return the features included in the response.  If false,\n   * {@link ArcGisMapServerImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n   * without communicating with the server.\n   * @type {boolean}\n   * @default true\n   */\n  this.enablePickFeatures = defaultValue(options.enablePickFeatures, true);\n\n  this._errorEvent = new Event();\n}\n\n/**\n * Creates an {@link ImageryProvider} which provides tiled imagery from an ArcGIS base map.\n * @param {ArcGisBaseMapType} style The style of the ArcGIS base map imagery. Valid options are {@link ArcGisBaseMapType.SATELLITE}, {@link ArcGisBaseMapType.OCEANS}, and {@link ArcGisBaseMapType.HILLSHADE}.\n * @param {ArcGisMapServerImageryProvider.ConstructorOptions} [options] Object describing initialization options.\n * @returns {Promise<ArcGisMapServerImageryProvider>} A promise that resolves to the created ArcGisMapServerImageryProvider.\n *\n * @example\n * // Set the default access token for accessing ArcGIS Image Tile service\n * Cesium.ArcGisMapService.defaultAccessToken = \"<ArcGIS Access Token>\";\n *\n * // Add a base layer from a default ArcGIS basemap\n * const provider = await Cesium.ArcGisMapServerImageryProvider.fromBasemapType(\n *   Cesium.ArcGisBaseMapType.SATELLITE);\n *\n * @example\n * // Add a base layer from a default ArcGIS Basemap\n * const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *   baseLayer: Cesium.ImageryLayer.fromProviderAsync(\n *     Cesium.ArcGisMapServerImageryProvider.fromBasemapType(\n *       Cesium.ArcGisBaseMapType.HILLSHADE, {\n *         token: \"<ArcGIS Access Token>\"\n *       }\n *     )\n *   ),\n * });\n */\n\nArcGisMapServerImageryProvider.fromBasemapType = async function (\n  style,\n  options,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"style\", style);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let accessToken;\n  let server;\n  let warningCredit;\n  switch (style) {\n    case ArcGisBaseMapType.SATELLITE:\n      {\n        accessToken = defaultValue(\n          options.token,\n          ArcGisMapService.defaultAccessToken,\n        );\n        server = Resource.createIfNeeded(\n          ArcGisMapService.defaultWorldImageryServer,\n        );\n        server.appendForwardSlash();\n        const defaultTokenCredit =\n          ArcGisMapService.getDefaultTokenCredit(accessToken);\n        if (defined(defaultTokenCredit)) {\n          warningCredit = Credit.clone(defaultTokenCredit);\n        }\n      }\n      break;\n    case ArcGisBaseMapType.OCEANS:\n      {\n        accessToken = defaultValue(\n          options.token,\n          ArcGisMapService.defaultAccessToken,\n        );\n        server = Resource.createIfNeeded(\n          ArcGisMapService.defaultWorldOceanServer,\n        );\n        server.appendForwardSlash();\n        const defaultTokenCredit =\n          ArcGisMapService.getDefaultTokenCredit(accessToken);\n        if (defined(defaultTokenCredit)) {\n          warningCredit = Credit.clone(defaultTokenCredit);\n        }\n      }\n      break;\n    case ArcGisBaseMapType.HILLSHADE:\n      {\n        accessToken = defaultValue(\n          options.token,\n          ArcGisMapService.defaultAccessToken,\n        );\n        server = Resource.createIfNeeded(\n          ArcGisMapService.defaultWorldHillshadeServer,\n        );\n        server.appendForwardSlash();\n        const defaultTokenCredit =\n          ArcGisMapService.getDefaultTokenCredit(accessToken);\n        if (defined(defaultTokenCredit)) {\n          warningCredit = Credit.clone(defaultTokenCredit);\n        }\n      }\n      break;\n    default:\n      //>>includeStart('debug', pragmas.debug);\n      throw new DeveloperError(`Unsupported basemap type: ${style}`);\n    //>>includeEnd('debug');\n  }\n\n  return ArcGisMapServerImageryProvider.fromUrl(server, {\n    ...options,\n    token: accessToken,\n    credit: warningCredit,\n    usePreCachedTilesIfAvailable: true, // ArcGIS Base Map Service Layers only support Tiled views\n  });\n};\n\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  let resource;\n  if (imageryProvider._useTiles) {\n    resource = imageryProvider._resource.getDerivedResource({\n      url: `tile/${level}/${y}/${x}`,\n      request: request,\n    });\n  } else {\n    const nativeRectangle =\n      imageryProvider._tilingScheme.tileXYToNativeRectangle(x, y, level);\n    const bbox = `${nativeRectangle.west},${nativeRectangle.south},${nativeRectangle.east},${nativeRectangle.north}`;\n\n    const query = {\n      bbox: bbox,\n      size: `${imageryProvider._tileWidth},${imageryProvider._tileHeight}`,\n      format: \"png32\",\n      transparent: true,\n      f: \"image\",\n    };\n\n    if (\n      imageryProvider._tilingScheme.projection instanceof GeographicProjection\n    ) {\n      query.bboxSR = 4326;\n      query.imageSR = 4326;\n    } else {\n      query.bboxSR = 3857;\n      query.imageSR = 3857;\n    }\n    if (imageryProvider.layers) {\n      query.layers = `show:${imageryProvider.layers}`;\n    }\n\n    resource = imageryProvider._resource.getDerivedResource({\n      url: \"export\",\n      request: request,\n      queryParameters: query,\n    });\n  }\n  return resource;\n}\n\nObject.defineProperties(ArcGisMapServerImageryProvider.prototype, {\n  /**\n   * Gets the URL of the ArcGIS MapServer.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource._url;\n    },\n  },\n\n  /**\n   * Gets the ArcGIS token used to authenticate with the ArcGis MapServer service.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  token: {\n    get: function () {\n      return this._resource.queryParameters.token;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether this imagery provider is using pre-cached tiles from the\n   * ArcGIS MapServer.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   * @default true\n   */\n  usingPrecachedTiles: {\n    get: function () {\n      return this._useTiles;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   * @default true\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n\n  /**\n   * Gets the comma-separated list of layer IDs to show.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {string}\n   */\n  layers: {\n    get: function () {\n      return this._layers;\n    },\n  },\n});\n\n/**\n * Creates an {@link ImageryProvider} which provides tiled imagery hosted by an ArcGIS MapServer.  By default, the server's pre-cached tiles are\n * used, if available.\n *\n * @param {Resource|String} url The URL of the ArcGIS MapServer service.\n * @param {ArcGisMapServerImageryProvider.ConstructorOptions} [options] Object describing initialization options.\n * @returns {Promise<ArcGisMapServerImageryProvider>} A promise that resolves to the created ArcGisMapServerImageryProvider.\n *\n * @example\n * const esri = await Cesium.ArcGisMapServerImageryProvider.fromUrl(\n *     \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer\"\n * );\n *\n * @exception {RuntimeError} metadata spatial reference specifies an unknown WKID\n * @exception {RuntimeError} metadata fullExtent.spatialReference specifies an unknown WKID\n */\nArcGisMapServerImageryProvider.fromUrl = async function (url, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const resource = Resource.createIfNeeded(url);\n  resource.appendForwardSlash();\n\n  if (defined(options.token)) {\n    resource.setQueryParameters({\n      token: options.token,\n    });\n  }\n\n  const provider = new ArcGisMapServerImageryProvider(options);\n  provider._resource = resource;\n  const imageryProviderBuilder = new ImageryProviderBuilder(options);\n  const useTiles = defaultValue(options.usePreCachedTilesIfAvailable, true);\n  if (useTiles) {\n    await requestMetadata(resource, imageryProviderBuilder);\n  }\n\n  imageryProviderBuilder.build(provider);\n  return provider;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nArcGisMapServerImageryProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level,\n) {\n  return this._tileCredits;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nArcGisMapServerImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request,\n) {\n  return ImageryProvider.loadImage(\n    this,\n    buildImageResource(this, x, y, level, request),\n  );\n};\n\n/**\n    /**\n     * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n     * a tile.\n     *\n     * @param {number} x The tile X coordinate.\n     * @param {number} y The tile Y coordinate.\n     * @param {number} level The tile level.\n     * @param {number} longitude The longitude at which to pick features.\n     * @param {number} latitude  The latitude at which to pick features.\n     * @return {Promise<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n     *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n     *                   instances.  The array may be empty if no features are found at the given location.\n     */\nArcGisMapServerImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  if (!this.enablePickFeatures) {\n    return undefined;\n  }\n\n  const rectangle = this._tilingScheme.tileXYToNativeRectangle(x, y, level);\n\n  let horizontal;\n  let vertical;\n  let sr;\n  if (this._tilingScheme.projection instanceof GeographicProjection) {\n    horizontal = CesiumMath.toDegrees(longitude);\n    vertical = CesiumMath.toDegrees(latitude);\n    sr = \"4326\";\n  } else {\n    const projected = this._tilingScheme.projection.project(\n      new Cartographic(longitude, latitude, 0.0),\n    );\n    horizontal = projected.x;\n    vertical = projected.y;\n    sr = \"3857\";\n  }\n\n  let layers = \"visible\";\n  if (defined(this._layers)) {\n    layers += `:${this._layers}`;\n  }\n\n  const query = {\n    f: \"json\",\n    tolerance: 2,\n    geometryType: \"esriGeometryPoint\",\n    geometry: `${horizontal},${vertical}`,\n    mapExtent: `${rectangle.west},${rectangle.south},${rectangle.east},${rectangle.north}`,\n    imageDisplay: `${this._tileWidth},${this._tileHeight},96`,\n    sr: sr,\n    layers: layers,\n  };\n\n  const resource = this._resource.getDerivedResource({\n    url: \"identify\",\n    queryParameters: query,\n  });\n\n  return resource.fetchJson().then(function (json) {\n    const result = [];\n\n    const features = json.results;\n    if (!defined(features)) {\n      return result;\n    }\n\n    for (let i = 0; i < features.length; ++i) {\n      const feature = features[i];\n\n      const featureInfo = new ImageryLayerFeatureInfo();\n      featureInfo.data = feature;\n      featureInfo.name = feature.value;\n      featureInfo.properties = feature.attributes;\n      featureInfo.configureDescriptionFromProperties(feature.attributes);\n\n      // If this is a point feature, use the coordinates of the point.\n      if (feature.geometryType === \"esriGeometryPoint\" && feature.geometry) {\n        const wkid =\n          feature.geometry.spatialReference &&\n          feature.geometry.spatialReference.wkid\n            ? feature.geometry.spatialReference.wkid\n            : 4326;\n        if (wkid === 4326 || wkid === 4283) {\n          featureInfo.position = Cartographic.fromDegrees(\n            feature.geometry.x,\n            feature.geometry.y,\n            feature.geometry.z,\n          );\n        } else if (wkid === 102100 || wkid === 900913 || wkid === 3857) {\n          const projection = new WebMercatorProjection();\n          featureInfo.position = projection.unproject(\n            new Cartesian3(\n              feature.geometry.x,\n              feature.geometry.y,\n              feature.geometry.z,\n            ),\n          );\n        }\n      }\n\n      result.push(featureInfo);\n    }\n\n    return result;\n  });\n};\nArcGisMapServerImageryProvider._metadataCache = {};\nexport default ArcGisMapServerImageryProvider;\n"],"mappings":"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ACA;AACA;AACA;EACEZ,SAAS,EAAE;IACTyH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC5G,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACET,iBAAiB,EAAE;IACjBqH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACzG,kBAAkB;IAChC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE6G,UAAU,EAAE;IACVJ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACzC,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE/E,MAAM,EAAE;IACNwH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC3G,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgH,mBAAmB,EAAE;IACnBL,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC9G,SAAS;IACvB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoH,eAAe,EAAE;IACfN,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACE3C,MAAM,EAAE;IACN2C,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC5C,OAAO;IACrB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,8BAA8B,CAACkC,OAAO,GAAG,gBAAgB7E,GAAG,EAAE3B,OAAO,EAAE;EACrE;EACApB,KAAK,CAACG,OAAO,CAAC,KAAK,EAAE4C,GAAG,CAAC;EACzB;;EAEA3B,OAAO,GAAGlB,YAAY,CAACkB,OAAO,EAAElB,YAAY,CAACyF,YAAY,CAAC;EAE1D,MAAMT,QAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}