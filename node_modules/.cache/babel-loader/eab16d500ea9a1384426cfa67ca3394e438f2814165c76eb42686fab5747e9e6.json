{"ast":null,"code":"import BlendingState from \"./BlendingState.js\";\nimport Buffer from \"../Renderer/Buffer.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ComputeCommand from \"../Renderer/ComputeCommand.js\";\nimport CloudType from \"./CloudType.js\";\nimport CloudCollectionFS from \"../Shaders/CloudCollectionFS.js\";\nimport CloudCollectionVS from \"../Shaders/CloudCollectionVS.js\";\nimport CloudNoiseFS from \"../Shaders/CloudNoiseFS.js\";\nimport CloudNoiseVS from \"../Shaders/CloudNoiseVS.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport CumulusCloud from \"./CumulusCloud.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport EncodedCartesian3 from \"../Core/EncodedCartesian3.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport TextureMagnificationFilter from \"../Renderer/TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"../Renderer/TextureMinificationFilter.js\";\nimport TextureWrap from \"../Renderer/TextureWrap.js\";\nimport VertexArray from \"../Renderer/VertexArray.js\";\nimport VertexArrayFacade from \"../Renderer/VertexArrayFacade.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nlet attributeLocations;\nconst scratchTextureDimensions = new Cartesian3();\nconst attributeLocationsBatched = {\n  positionHighAndScaleX: 0,\n  positionLowAndScaleY: 1,\n  packedAttribute0: 2,\n  // show, brightness, direction\n  packedAttribute1: 3,\n  // cloudSize, slice\n  color: 4\n};\nconst attributeLocationsInstanced = {\n  direction: 0,\n  positionHighAndScaleX: 1,\n  positionLowAndScaleY: 2,\n  packedAttribute0: 3,\n  // show, brightness\n  packedAttribute1: 4,\n  // cloudSize, slice\n  color: 5\n};\nconst SHOW_INDEX = CumulusCloud.SHOW_INDEX;\nconst POSITION_INDEX = CumulusCloud.POSITION_INDEX;\nconst SCALE_INDEX = CumulusCloud.SCALE_INDEX;\nconst MAXIMUM_SIZE_INDEX = CumulusCloud.MAXIMUM_SIZE_INDEX;\nconst SLICE_INDEX = CumulusCloud.SLICE_INDEX;\nconst BRIGHTNESS_INDEX = CumulusCloud.BRIGHTNESS_INDEX;\nconst NUMBER_OF_PROPERTIES = CumulusCloud.NUMBER_OF_PROPERTIES;\nconst COLOR_INDEX = CumulusCloud.COLOR_INDEX;\n\n/**\n * A renderable collection of clouds in the 3D scene.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/CumulusCloud.png' width='400' height='300' /><br />\n * Example cumulus clouds\n * </div>\n * <br /><br />\n * Clouds are added and removed from the collection using {@link CloudCollection#add}\n * and {@link CloudCollection#remove}.\n * @alias CloudCollection\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.show=true] Whether to display the clouds.\n * @param {number} [options.noiseDetail=16.0] Desired amount of detail in the noise texture.\n * @param {number} [options.noiseOffset=Cartesian3.ZERO] Desired translation of data in noise texture.\n * @param {boolean} [options.debugBillboards=false] For debugging only. Determines if the billboards are rendered with an opaque color.\n * @param {boolean} [options.debugEllipsoids=false] For debugging only. Determines if the clouds will be rendered as opaque ellipsoids.\n * @see CloudCollection#add\n * @see CloudCollection#remove\n * @see CumulusCloud\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Clouds.html|Cesium Sandcastle Clouds Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Cloud%20Parameters.html|Cesium Sandcastle Cloud Parameters Demo}\n *\n * @example\n * // Create a cloud collection with two cumulus clouds\n * const clouds = scene.primitives.add(new Cesium.CloudCollection());\n * clouds.add({\n *   position : new Cesium.Cartesian3(1.0, 2.0, 3.0),\n *   maximumSize: new Cesium.Cartesian3(20.0, 12.0, 8.0)\n * });\n * clouds.add({\n *   position : new Cesium.Cartesian3(4.0, 5.0, 6.0),\n *   maximumSize: new Cesium.Cartesian3(15.0, 9.0, 9.0),\n *   slice: 0.5\n * });\n *\n */\nfunction CloudCollection(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._clouds = [];\n  this._cloudsToUpdate = [];\n  this._cloudsToUpdateIndex = 0;\n  this._cloudsRemoved = false;\n  this._createVertexArray = false;\n  this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n  this._noiseTexture = undefined;\n  this._textureSliceWidth = 128;\n  this._noiseTextureRows = 4;\n\n  /**\n   * <p>\n   * Controls the amount of detail captured in the precomputed noise texture\n   * used to render the cumulus clouds. In order for the texture to be tileable,\n   * this must be a power of two. For best results, set this to be a power of two\n   * between <code>8.0</code> and <code>32.0</code> (inclusive).\n   * </p>\n   *\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'>\n   *   <code>clouds.noiseDetail = 8.0;</code><br/>\n   *   <img src='Images/CloudCollection.noiseDetail8.png' width='250' height='158' />\n   * </td>\n   * <td align='center'>\n   *   <code>clouds.noiseDetail = 32.0;</code><br/>\n   *   <img src='Images/CloudCollection.noiseDetail32.png' width='250' height='158' />\n   * </td>\n   * </tr></table>\n   * </div>\n   *\n   * @type {number}\n   *\n   * @default 16.0\n   */\n  this.noiseDetail = defaultValue(options.noiseDetail, 16.0);\n\n  /**\n   * <p>\n   * Applies a translation to noise texture coordinates to generate different data.\n   * This can be modified if the default noise does not generate good-looking clouds.\n   * </p>\n   *\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'>\n   *   <code>default</code><br/>\n   *   <img src='Images/CloudCollection.noiseOffsetdefault.png' width='250' height='158' />\n   * </td>\n   * <td align='center'>\n   *   <code>clouds.noiseOffset = new Cesium.Cartesian3(10, 20, 10);</code><br/>\n   *   <img src='Images/CloudCollection.noiseOffsetx10y20z10.png' width='250' height='158' />\n   * </td>\n   * </tr></table>\n   * </div>\n   * @type {Cartesian3}\n   *\n   * @default Cartesian3.ZERO\n   */\n  this.noiseOffset = Cartesian3.clone(defaultValue(options.noiseOffset, Cartesian3.ZERO));\n  this._loading = false;\n  this._ready = false;\n  const that = this;\n  this._uniforms = {\n    u_noiseTexture: function () {\n      return that._noiseTexture;\n    },\n    u_noiseTextureDimensions: getNoiseTextureDimensions(that),\n    u_noiseDetail: function () {\n      return that.noiseDetail;\n    }\n  };\n  this._vaNoise = undefined;\n  this._spNoise = undefined;\n  this._spCreated = false;\n  this._sp = undefined;\n  this._rs = undefined;\n\n  /**\n   * Determines if billboards in this collection will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n  this._colorCommands = [];\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Renders the billboards with one opaque color for the sake of debugging.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugBillboards = defaultValue(options.debugBillboards, false);\n  this._compiledDebugBillboards = false;\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the clouds as opaque, monochrome ellipsoids for the sake of debugging.\n   * If <code>debugBillboards</code> is also true, then the ellipsoids will draw on top of the billboards.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugEllipsoids = defaultValue(options.debugEllipsoids, false);\n  this._compiledDebugEllipsoids = false;\n}\n\n// Wraps useful texture metrics into a single vec3 for less overhead.\nfunction getNoiseTextureDimensions(collection) {\n  return function () {\n    scratchTextureDimensions.x = collection._textureSliceWidth;\n    scratchTextureDimensions.y = collection._noiseTextureRows;\n    scratchTextureDimensions.z = 1.0 / collection._noiseTextureRows;\n    return scratchTextureDimensions;\n  };\n}\nObject.defineProperties(CloudCollection.prototype, {\n  /**\n   * Returns the number of clouds in this collection.\n   * @memberof CloudCollection.prototype\n   * @type {number}\n   */\n  length: {\n    get: function () {\n      removeClouds(this);\n      return this._clouds.length;\n    }\n  }\n});\nfunction destroyClouds(clouds) {\n  const length = clouds.length;\n  for (let i = 0; i < length; ++i) {\n    if (clouds[i]) {\n      clouds[i]._destroy();\n    }\n  }\n}\n\n/**\n * Creates and adds a cloud with the specified initial properties to the collection.\n * The added cloud is returned so it can be modified or removed from the collection later.\n *\n * @param {object}[options] A template describing the cloud's properties as shown in Example 1.\n * @returns {CumulusCloud} The cloud that was added to the collection.\n *\n * @performance Calling <code>add</code> is expected constant time.  However, the collection's vertex buffer\n * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For\n * best performance, add as many clouds as possible before calling <code>update</code>.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Example 1:  Add a cumulus cloud, specifying all the default values.\n * const c = clouds.add({\n *   show : true,\n *   position : Cesium.Cartesian3.ZERO,\n *   scale : new Cesium.Cartesian2(20.0, 12.0),\n *   maximumSize: new Cesium.Cartesian3(20.0, 12.0, 12.0),\n *   slice: -1.0,\n *   cloudType : CloudType.CUMULUS\n * });\n *\n * @example\n * // Example 2:  Specify only the cloud's cartographic position.\n * const c = clouds.add({\n *   position : Cesium.Cartesian3.fromDegrees(longitude, latitude, height)\n * });\n *\n * @see CloudCollection#remove\n * @see CloudCollection#removeAll\n */\nCloudCollection.prototype.add = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const cloudType = defaultValue(options.cloudType, CloudType.CUMULUS);\n  //>>includeStart('debug', pragmas.debug);\n  if (!CloudType.validate(cloudType)) {\n    throw new DeveloperError(\"invalid cloud type\");\n  }\n  //>>includeEnd('debug');\n\n  let cloud;\n  if (cloudType === CloudType.CUMULUS) {\n    cloud = new CumulusCloud(options, this);\n    cloud._index = this._clouds.length;\n    this._clouds.push(cloud);\n    this._createVertexArray = true;\n  }\n  return cloud;\n};\n\n/**\n * Removes a cloud from the collection.\n *\n * @param {CumulusCloud} cloud The cloud to remove.\n * @returns {boolean} <code>true</code> if the cloud was removed; <code>false</code> if the cloud was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * const c = clouds.add(...);\n * clouds.remove(c);  // Returns true\n *\n * @see CloudCollection#add\n * @see CloudCollection#removeAll\n * @see CumulusCloud#show\n */\nCloudCollection.prototype.remove = function (cloud) {\n  if (this.contains(cloud)) {\n    this._clouds[cloud._index] = undefined; // Removed later in removeClouds()\n    this._cloudsRemoved = true;\n    this._createVertexArray = true;\n    cloud._destroy();\n    return true;\n  }\n  return false;\n};\n\n/**\n * Removes all clouds from the collection.\n *\n * @performance <code>O(n)</code>.  It is more efficient to remove all the clouds\n * from a collection and then add new ones than to create a new collection entirely.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * clouds.add(...);\n * clouds.add(...);\n * clouds.removeAll();\n *\n * @see CloudCollection#add\n * @see CloudCollection#remove\n */\nCloudCollection.prototype.removeAll = function () {\n  destroyClouds(this._clouds);\n  this._clouds = [];\n  this._cloudsToUpdate = [];\n  this._cloudsToUpdateIndex = 0;\n  this._cloudsRemoved = false;\n  this._createVertexArray = true;\n};\nfunction removeClouds(cloudCollection) {\n  if (cloudCollection._cloudsRemoved) {\n    cloudCollection._cloudsRemoved = false;\n    const newClouds = [];\n    const clouds = cloudCollection._clouds;\n    const length = clouds.length;\n    for (let i = 0, j = 0; i < length; ++i) {\n      const cloud = clouds[i];\n      if (defined(cloud)) {\n        clouds._index = j++;\n        newClouds.push(cloud);\n      }\n    }\n    cloudCollection._clouds = newClouds;\n  }\n}\nCloudCollection.prototype._updateCloud = function (cloud, propertyChanged) {\n  if (!cloud._dirty) {\n    this._cloudsToUpdate[this._cloudsToUpdateIndex++] = cloud;\n  }\n  ++this._propertiesChanged[propertyChanged];\n};\n\n/**\n * Check whether this collection contains a given cloud.\n *\n * @param {CumulusCloud} [cloud] The cloud to check for.\n * @returns {boolean} true if this collection contains the cloud, false otherwise.\n *\n * @see CloudCollection#get\n */\nCloudCollection.prototype.contains = function (cloud) {\n  return defined(cloud) && cloud._cloudCollection === this;\n};\n\n/**\n * Returns the cloud in the collection at the specified index. Indices are zero-based\n * and increase as clouds are added. Removing a cloud shifts all clouds after\n * it to the left, changing their indices. This function is commonly used with\n * {@link CloudCollection#length} to iterate over all the clouds in the collection.\n *\n * @param {number} index The zero-based index of the cloud.\n * @returns {CumulusCloud} The cloud at the specified index.\n *\n * @performance Expected constant time. If clouds were removed from the collection and\n * {@link CloudCollection#update} was not called, an implicit <code>O(n)</code>\n * operation is performed.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Toggle the show property of every cloud in the collection\n * const len = clouds.length;\n * for (let i = 0; i < len; ++i) {\n *   const c = clouds.get(i);\n *   c.show = !c.show;\n * }\n *\n * @see CloudCollection#length\n */\nCloudCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index);\n  //>>includeEnd('debug');\n\n  removeClouds(this);\n  return this._clouds[index];\n};\nconst texturePositions = new Float32Array([-1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0]);\nconst textureIndices = new Uint16Array([0, 1, 2, 0, 2, 3]);\nfunction createTextureVA(context) {\n  const positionBuffer = Buffer.createVertexBuffer({\n    context: context,\n    typedArray: texturePositions,\n    usage: BufferUsage.STATIC_DRAW\n  });\n  const indexBuffer = Buffer.createIndexBuffer({\n    context: context,\n    typedArray: textureIndices,\n    usage: BufferUsage.STATIC_DRAW,\n    indexDatatype: IndexDatatype.UNSIGNED_SHORT\n  });\n  const attributes = [{\n    index: 0,\n    vertexBuffer: positionBuffer,\n    componentsPerAttribute: 2,\n    componentDatatype: ComponentDatatype.FLOAT\n  }];\n  return new VertexArray({\n    context: context,\n    attributes: attributes,\n    indexBuffer: indexBuffer\n  });\n}\nlet getIndexBuffer;\nfunction getIndexBufferBatched(context) {\n  const sixteenK = 16 * 1024;\n  let indexBuffer = context.cache.cloudCollection_indexBufferBatched;\n  if (defined(indexBuffer)) {\n    return indexBuffer;\n  }\n\n  // Subtract 6 because the last index is reserved for primitive restart.\n  // https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.18\n  const length = sixteenK * 6 - 6;\n  const indices = new Uint16Array(length);\n  for (let i = 0, j = 0; i < length; i += 6, j += 4) {\n    indices[i] = j;\n    indices[i + 1] = j + 1;\n    indices[i + 2] = j + 2;\n    indices[i + 3] = j;\n    indices[i + 4] = j + 2;\n    indices[i + 5] = j + 3;\n  }\n  indexBuffer = Buffer.createIndexBuffer({\n    context: context,\n    typedArray: indices,\n    usage: BufferUsage.STATIC_DRAW,\n    indexDatatype: IndexDatatype.UNSIGNED_SHORT\n  });\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.cloudCollection_indexBufferBatched = indexBuffer;\n  return indexBuffer;\n}\nfunction getIndexBufferInstanced(context) {\n  let indexBuffer = context.cache.cloudCollection_indexBufferInstanced;\n  if (defined(indexBuffer)) {\n    return indexBuffer;\n  }\n  indexBuffer = Buffer.createIndexBuffer({\n    context: context,\n    typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),\n    usage: BufferUsage.STATIC_DRAW,\n    indexDatatype: IndexDatatype.UNSIGNED_SHORT\n  });\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.cloudCollection_indexBufferInstanced = indexBuffer;\n  return indexBuffer;\n}\nfunction getVertexBufferInstanced(context) {\n  let vertexBuffer = context.cache.cloudCollection_vertexBufferInstanced;\n  if (defined(vertexBuffer)) {\n    return vertexBuffer;\n  }\n  vertexBuffer = Buffer.createVertexBuffer({\n    context: context,\n    typedArray: new Float32Array([0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]),\n    usage: BufferUsage.STATIC_DRAW\n  });\n  vertexBuffer.vertexArrayDestroyable = false;\n  context.cache.cloudCollection_vertexBufferInstanced = vertexBuffer;\n  return vertexBuffer;\n}\nfunction createVAF(context, numberOfClouds, instanced) {\n  const attributes = [{\n    index: attributeLocations.positionHighAndScaleX,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: BufferUsage.STATIC_DRAW\n  }, {\n    index: attributeLocations.positionLowAndScaleY,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: BufferUsage.STATIC_DRAW\n  }, {\n    index: attributeLocations.packedAttribute0,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: BufferUsage.STATIC_DRAW\n  }, {\n    index: attributeLocations.packedAttribute1,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: BufferUsage.STATIC_DRAW\n  }, {\n    index: attributeLocations.color,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n    normalize: true,\n    usage: BufferUsage.STATIC_DRAW\n  }];\n  if (instanced) {\n    attributes.push({\n      index: attributeLocations.direction,\n      componentsPerAttribute: 2,\n      componentDatatype: ComponentDatatype.FLOAT,\n      vertexBuffer: getVertexBufferInstanced(context)\n    });\n  }\n  const sizeInVertices = instanced ? numberOfClouds : 4 * numberOfClouds;\n  return new VertexArrayFacade(context, attributes, sizeInVertices, instanced);\n}\nconst writePositionScratch = new EncodedCartesian3();\nfunction writePositionAndScale(cloudCollection, frameState, vafWriters, cloud) {\n  let i;\n  const positionHighWriter = vafWriters[attributeLocations.positionHighAndScaleX];\n  const positionLowWriter = vafWriters[attributeLocations.positionLowAndScaleY];\n  const position = cloud.position;\n  EncodedCartesian3.fromCartesian(position, writePositionScratch);\n  const scale = cloud.scale;\n  const high = writePositionScratch.high;\n  const low = writePositionScratch.low;\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    positionHighWriter(i, high.x, high.y, high.z, scale.x);\n    positionLowWriter(i, low.x, low.y, low.z, scale.y);\n  } else {\n    i = cloud._index * 4;\n    positionHighWriter(i + 0, high.x, high.y, high.z, scale.x);\n    positionHighWriter(i + 1, high.x, high.y, high.z, scale.x);\n    positionHighWriter(i + 2, high.x, high.y, high.z, scale.x);\n    positionHighWriter(i + 3, high.x, high.y, high.z, scale.x);\n    positionLowWriter(i + 0, low.x, low.y, low.z, scale.y);\n    positionLowWriter(i + 1, low.x, low.y, low.z, scale.y);\n    positionLowWriter(i + 2, low.x, low.y, low.z, scale.y);\n    positionLowWriter(i + 3, low.x, low.y, low.z, scale.y);\n  }\n}\nfunction writePackedAttribute0(cloudCollection, frameState, vafWriters, cloud) {\n  let i;\n  const writer = vafWriters[attributeLocations.packedAttribute0];\n  const show = cloud.show;\n  const brightness = cloud.brightness;\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    writer(i, show, brightness, 0.0, 0.0);\n  } else {\n    i = cloud._index * 4;\n    writer(i + 0, show, brightness, 0.0, 0.0);\n    writer(i + 1, show, brightness, 1.0, 0.0);\n    writer(i + 2, show, brightness, 1.0, 1.0);\n    writer(i + 3, show, brightness, 0.0, 1.0);\n  }\n}\nfunction writePackedAttribute1(cloudCollection, frameState, vafWriters, cloud) {\n  let i;\n  const writer = vafWriters[attributeLocations.packedAttribute1];\n  const maximumSize = cloud.maximumSize;\n  const slice = cloud.slice;\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    writer(i, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n  } else {\n    i = cloud._index * 4;\n    writer(i + 0, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n    writer(i + 1, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n    writer(i + 2, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n    writer(i + 3, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n  }\n}\nfunction writeColor(cloudCollection, frameState, vafWriters, cloud) {\n  let i;\n  const writer = vafWriters[attributeLocations.color];\n  const color = cloud.color;\n  const red = Color.floatToByte(color.red);\n  const green = Color.floatToByte(color.green);\n  const blue = Color.floatToByte(color.blue);\n  const alpha = Color.floatToByte(color.alpha);\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    writer(i, red, green, blue, alpha);\n  } else {\n    i = cloud._index * 4;\n    writer(i + 0, red, green, blue, alpha);\n    writer(i + 1, red, green, blue, alpha);\n    writer(i + 2, red, green, blue, alpha);\n    writer(i + 3, red, green, blue, alpha);\n  }\n}\nfunction writeCloud(cloudCollection, frameState, vafWriters, cloud) {\n  writePositionAndScale(cloudCollection, frameState, vafWriters, cloud);\n  writePackedAttribute0(cloudCollection, frameState, vafWriters, cloud);\n  writePackedAttribute1(cloudCollection, frameState, vafWriters, cloud);\n  writeColor(cloudCollection, frameState, vafWriters, cloud);\n}\nfunction createNoiseTexture(cloudCollection, frameState, vsSource, fsSource) {\n  const that = cloudCollection;\n  const textureSliceWidth = that._textureSliceWidth;\n  const noiseTextureRows = that._noiseTextureRows;\n  //>>includeStart('debug', pragmas.debug);\n  if (textureSliceWidth / noiseTextureRows < 1 || textureSliceWidth % noiseTextureRows !== 0) {\n    throw new DeveloperError(\"noiseTextureRows must evenly divide textureSliceWidth\");\n  }\n  //>>includeEnd('debug');\n\n  const context = frameState.context;\n  that._vaNoise = createTextureVA(context);\n  that._spNoise = ShaderProgram.fromCache({\n    context: context,\n    vertexShaderSource: vsSource,\n    fragmentShaderSource: fsSource,\n    attributeLocations: {\n      position: 0\n    }\n  });\n  const noiseDetail = that.noiseDetail;\n  const noiseOffset = that.noiseOffset;\n  that._noiseTexture = new Texture({\n    context: context,\n    width: textureSliceWidth * textureSliceWidth / noiseTextureRows,\n    height: textureSliceWidth * noiseTextureRows,\n    pixelDatatype: PixelDatatype.UNSIGNED_BYTE,\n    pixelFormat: PixelFormat.RGBA,\n    sampler: new Sampler({\n      wrapS: TextureWrap.REPEAT,\n      wrapT: TextureWrap.REPEAT,\n      minificationFilter: TextureMinificationFilter.NEAREST,\n      magnificationFilter: TextureMagnificationFilter.NEAREST\n    })\n  });\n  const textureCommand = new ComputeCommand({\n    vertexArray: that._vaNoise,\n    shaderProgram: that._spNoise,\n    outputTexture: that._noiseTexture,\n    uniformMap: {\n      u_noiseTextureDimensions: getNoiseTextureDimensions(that),\n      u_noiseDetail: function () {\n        return noiseDetail;\n      },\n      u_noiseOffset: function () {\n        return noiseOffset;\n      }\n    },\n    persists: false,\n    owner: cloudCollection,\n    postExecute: function (texture) {\n      that._ready = true;\n      that._loading = false;\n    }\n  });\n  frameState.commandList.push(textureCommand);\n  that._loading = true;\n}\nfunction createVertexArray(cloudCollection, frameState) {\n  const that = cloudCollection;\n  const context = frameState.context;\n  that._createVertexArray = false;\n  that._vaf = that._vaf && that._vaf.destroy();\n  const clouds = cloudCollection._clouds;\n  const cloudsLength = clouds.length;\n  if (cloudsLength > 0) {\n    that._vaf = createVAF(context, cloudsLength, that._instanced);\n    const vafWriters = that._vaf.writers;\n    let i;\n    // Rewrite entire buffer if clouds were added or removed.\n    for (i = 0; i < cloudsLength; ++i) {\n      const cloud = clouds[i];\n      writeCloud(cloudCollection, frameState, vafWriters, cloud);\n    }\n\n    // Different cloud collections share the same index buffer.\n    that._vaf.commit(getIndexBuffer(context));\n  }\n}\nconst scratchWriterArray = [];\nfunction updateClouds(cloudCollection, frameState) {\n  const context = frameState.context;\n  const that = cloudCollection;\n  const clouds = that._clouds;\n  const cloudsLength = clouds.length;\n  const cloudsToUpdate = that._cloudsToUpdate;\n  const cloudsToUpdateLength = that._cloudsToUpdateIndex;\n  const properties = that._propertiesChanged;\n  const writers = scratchWriterArray;\n  writers.length = 0;\n  if (properties[POSITION_INDEX] || properties[SCALE_INDEX]) {\n    writers.push(writePositionAndScale);\n  }\n  if (properties[SHOW_INDEX] || properties[BRIGHTNESS_INDEX]) {\n    writers.push(writePackedAttribute0);\n  }\n  if (properties[MAXIMUM_SIZE_INDEX] || properties[SLICE_INDEX]) {\n    writers.push(writePackedAttribute1);\n  }\n  if (properties[COLOR_INDEX]) {\n    writers.push(writeColor);\n  }\n  const numWriters = writers.length;\n  const vafWriters = that._vaf.writers;\n  let i, c, w;\n  if (cloudsToUpdateLength / cloudsLength > 0.1) {\n    // Like BillboardCollection, if more than 10% of clouds change,\n    // rewrite the entire buffer.\n\n    for (i = 0; i < cloudsToUpdateLength; ++i) {\n      c = cloudsToUpdate[i];\n      c._dirty = false;\n      for (w = 0; w < numWriters; ++w) {\n        writers[w](cloudCollection, frameState, vafWriters, c);\n      }\n    }\n    that._vaf.commit(getIndexBuffer(context));\n  } else {\n    for (i = 0; i < cloudsToUpdateLength; ++i) {\n      c = cloudsToUpdate[i];\n      c._dirty = false;\n      for (w = 0; w < numWriters; ++w) {\n        writers[w](cloudCollection, frameState, vafWriters, c);\n      }\n      if (that._instanced) {\n        that._vaf.subCommit(c._index, 1);\n      } else {\n        that._vaf.subCommit(c._index * 4, 4);\n      }\n    }\n    that._vaf.endSubCommits();\n  }\n  that._cloudsToUpdateIndex = 0;\n}\nfunction createShaderProgram(cloudCollection, frameState, vsSource, fsSource) {\n  const context = frameState.context;\n  const that = cloudCollection;\n  const vs = new ShaderSource({\n    defines: [],\n    sources: [vsSource]\n  });\n  if (that._instanced) {\n    vs.defines.push(\"INSTANCED\");\n  }\n  const fs = new ShaderSource({\n    defines: [],\n    sources: [fsSource]\n  });\n  if (that.debugBillboards) {\n    fs.defines.push(\"DEBUG_BILLBOARDS\");\n  }\n  if (that.debugEllipsoids) {\n    fs.defines.push(\"DEBUG_ELLIPSOIDS\");\n  }\n  that._sp = ShaderProgram.replaceCache({\n    context: context,\n    shaderProgram: that._sp,\n    vertexShaderSource: vs,\n    fragmentShaderSource: fs,\n    attributeLocations: attributeLocations\n  });\n  that._rs = RenderState.fromCache({\n    depthTest: {\n      enabled: true,\n      func: WebGLConstants.LESS\n    },\n    depthMask: false,\n    blending: BlendingState.ALPHA_BLEND\n  });\n  that._spCreated = true;\n  that._compiledDebugBillboards = that.debugBillboards;\n  that._compiledDebugEllipsoids = that.debugEllipsoids;\n}\nfunction createDrawCommands(cloudCollection, frameState) {\n  const that = cloudCollection;\n  const pass = frameState.passes;\n  const uniforms = that._uniforms;\n  const commandList = frameState.commandList;\n  if (pass.render) {\n    const colorList = that._colorCommands;\n    const va = that._vaf.va;\n    const vaLength = va.length;\n    colorList.length = vaLength;\n    for (let i = 0; i < vaLength; i++) {\n      let command = colorList[i];\n      if (!defined(command)) {\n        command = colorList[i] = new DrawCommand();\n      }\n      command.pass = Pass.TRANSLUCENT;\n      command.owner = cloudCollection;\n      command.uniformMap = uniforms;\n      command.count = va[i].indicesCount;\n      command.vertexArray = va[i].va;\n      command.shaderProgram = that._sp;\n      command.renderState = that._rs;\n      if (that._instanced) {\n        command.count = 6;\n        command.instanceCount = that._clouds.length;\n      }\n      commandList.push(command);\n    }\n  }\n}\n\n/**\n * @private\n */\nCloudCollection.prototype.update = function (frameState) {\n  removeClouds(this);\n  if (!this.show) {\n    return;\n  }\n  const debugging = this.debugBillboards || this.debugEllipsoids;\n  this._ready = debugging ? true : defined(this._noiseTexture);\n  if (!this._ready && !this._loading && !debugging) {\n    createNoiseTexture(this, frameState, CloudNoiseVS, CloudNoiseFS);\n  }\n  this._instanced = frameState.context.instancedArrays;\n  attributeLocations = this._instanced ? attributeLocationsInstanced : attributeLocationsBatched;\n  getIndexBuffer = this._instanced ? getIndexBufferInstanced : getIndexBufferBatched;\n  const clouds = this._clouds;\n  const cloudsLength = clouds.length;\n  const cloudsToUpdate = this._cloudsToUpdate;\n  const cloudsToUpdateLength = this._cloudsToUpdateIndex;\n  if (this._createVertexArray) {\n    createVertexArray(this, frameState);\n  } else if (cloudsToUpdateLength > 0) {\n    // Clouds were modified, but none were added or removed.\n    updateClouds(this, frameState);\n  }\n\n  // If the number of total clouds ever shrinks considerably,\n  // truncate cloudsToUpdate so that we free memory that\n  // we are no longer using.\n  if (cloudsToUpdateLength > cloudsLength * 1.5) {\n    cloudsToUpdate.length = cloudsLength;\n  }\n  if (!defined(this._vaf) || !defined(this._vaf.va) || !this._ready & !debugging) {\n    return;\n  }\n  if (!this._spCreated || this.debugBillboards !== this._compiledDebugBillboards || this.debugEllipsoids !== this._compiledDebugEllipsoids) {\n    createShaderProgram(this, frameState, CloudCollectionVS, CloudCollectionFS);\n  }\n  createDrawCommands(this, frameState);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see CloudCollection#destroy\n */\nCloudCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * clouds = clouds && clouds.destroy();\n *\n * @see CloudCollection#isDestroyed\n */\nCloudCollection.prototype.destroy = function () {\n  this._noiseTexture = this._noiseTexture && this._noiseTexture.destroy();\n  this._sp = this._sp && this._sp.destroy();\n  this._vaf = this._vaf && this._vaf.destroy();\n  destroyClouds(this._clouds);\n  return destroyObject(this);\n};\nexport default CloudCollection;","map":{"version":3,"names":["BlendingState","Buffer","BufferUsage","Cartesian3","Check","Color","ComputeCommand","CloudType","CloudCollectionFS","CloudCollectionVS","CloudNoiseFS","CloudNoiseVS","ComponentDatatype","CumulusCloud","defaultValue","defined","destroyObject","DeveloperError","DrawCommand","EncodedCartesian3","IndexDatatype","Pass","PixelDatatype","PixelFormat","RenderState","Sampler","ShaderSource","ShaderProgram","Texture","TextureMagnificationFilter","TextureMinificationFilter","TextureWrap","VertexArray","VertexArrayFacade","WebGLConstants","attributeLocations","scratchTextureDimensions","attributeLocationsBatched","positionHighAndScaleX","positionLowAndScaleY","packedAttribute0","packedAttribute1","color","attributeLocationsInstanced","direction","SHOW_INDEX","POSITION_INDEX","SCALE_INDEX","MAXIMUM_SIZE_INDEX","SLICE_INDEX","BRIGHTNESS_INDEX","NUMBER_OF_PROPERTIES","COLOR_INDEX","CloudCollection","options","EMPTY_OBJECT","_clouds","_cloudsToUpdate","_cloudsToUpdateIndex","_cloudsRemoved","_createVertexArray","_propertiesChanged","Uint32Array","_noiseTexture","undefined","_textureSliceWidth","_noiseTextureRows","noiseDetail","noiseOffset","clone","ZERO","_loading","_ready","that","_uniforms","u_noiseTexture","u_noiseTextureDimensions","getNoiseTextureDimensions","u_noiseDetail","_vaNoise","_spNoise","_spCreated","_sp","_rs","show","_colorCommands","debugBillboards","_compiledDebugBillboards","debugEllipsoids","_compiledDebugEllipsoids","collection","x","y","z","Object","defineProperties","prototype","length","get","removeClouds","destroyClouds","clouds","i","_destroy","add","cloudType","CUMULUS","validate","cloud","_index","push","remove","contains","removeAll","cloudCollection","newClouds","j","_updateCloud","propertyChanged","_dirty","_cloudCollection","index","typeOf","number","texturePositions","Float32Array","textureIndices","Uint16Array","createTextureVA","context","positionBuffer","createVertexBuffer","typedArray","usage","STATIC_DRAW","indexBuffer","createIndexBuffer","indexDatatype","UNSIGNED_SHORT","attributes","vertexBuffer","componentsPerAttribute","componentDatatype","FLOAT","getIndexBuffer","getIndexBufferBatched","sixteenK","cache","cloudCollection_indexBufferBatched","indices","vertexArrayDestroyable","getIndexBufferInstanced","cloudCollection_indexBufferInstanced","getVertexBufferInstanced","cloudCollection_vertexBufferInstanced","createVAF","numberOfClouds","instanced","UNSIGNED_BYTE","normalize","sizeInVertices","writePositionScratch","writePositionAndScale","frameState","vafWriters","positionHighWriter","positionLowWriter","position","fromCartesian","scale","high","low","_instanced","writePackedAttribute0","writer","brightness","writePackedAttribute1","maximumSize","slice","writeColor","red","floatToByte","green","blue","alpha","writeCloud","createNoiseTexture","vsSource","fsSource","textureSliceWidth","noiseTextureRows","fromCache","vertexShaderSource","fragmentShaderSource","width","height","pixelDatatype","pixelFormat","RGBA","sampler","wrapS","REPEAT","wrapT","minificationFilter","NEAREST","magnificationFilter","textureCommand","vertexArray","shaderProgram","outputTexture","uniformMap","u_noiseOffset","persists","owner","postExecute","texture","commandList","createVertexArray","_vaf","destroy","cloudsLength","writers","commit","scratchWriterArray","updateClouds","cloudsToUpdate","cloudsToUpdateLength","properties","numWriters","c","w","subCommit","endSubCommits","createShaderProgram","vs","defines","sources","fs","replaceCache","depthTest","enabled","func","LESS","depthMask","blending","ALPHA_BLEND","createDrawCommands","pass","passes","uniforms","render","colorList","va","vaLength","command","TRANSLUCENT","count","indicesCount","renderState","instanceCount","update","debugging","instancedArrays","isDestroyed"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/CloudCollection.js"],"sourcesContent":["import BlendingState from \"./BlendingState.js\";\nimport Buffer from \"../Renderer/Buffer.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ComputeCommand from \"../Renderer/ComputeCommand.js\";\nimport CloudType from \"./CloudType.js\";\nimport CloudCollectionFS from \"../Shaders/CloudCollectionFS.js\";\nimport CloudCollectionVS from \"../Shaders/CloudCollectionVS.js\";\nimport CloudNoiseFS from \"../Shaders/CloudNoiseFS.js\";\nimport CloudNoiseVS from \"../Shaders/CloudNoiseVS.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport CumulusCloud from \"./CumulusCloud.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport EncodedCartesian3 from \"../Core/EncodedCartesian3.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport TextureMagnificationFilter from \"../Renderer/TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"../Renderer/TextureMinificationFilter.js\";\nimport TextureWrap from \"../Renderer/TextureWrap.js\";\nimport VertexArray from \"../Renderer/VertexArray.js\";\nimport VertexArrayFacade from \"../Renderer/VertexArrayFacade.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\n\nlet attributeLocations;\nconst scratchTextureDimensions = new Cartesian3();\n\nconst attributeLocationsBatched = {\n  positionHighAndScaleX: 0,\n  positionLowAndScaleY: 1,\n  packedAttribute0: 2, // show, brightness, direction\n  packedAttribute1: 3, // cloudSize, slice\n  color: 4,\n};\n\nconst attributeLocationsInstanced = {\n  direction: 0,\n  positionHighAndScaleX: 1,\n  positionLowAndScaleY: 2,\n  packedAttribute0: 3, // show, brightness\n  packedAttribute1: 4, // cloudSize, slice\n  color: 5,\n};\n\nconst SHOW_INDEX = CumulusCloud.SHOW_INDEX;\nconst POSITION_INDEX = CumulusCloud.POSITION_INDEX;\nconst SCALE_INDEX = CumulusCloud.SCALE_INDEX;\nconst MAXIMUM_SIZE_INDEX = CumulusCloud.MAXIMUM_SIZE_INDEX;\nconst SLICE_INDEX = CumulusCloud.SLICE_INDEX;\nconst BRIGHTNESS_INDEX = CumulusCloud.BRIGHTNESS_INDEX;\nconst NUMBER_OF_PROPERTIES = CumulusCloud.NUMBER_OF_PROPERTIES;\nconst COLOR_INDEX = CumulusCloud.COLOR_INDEX;\n\n/**\n * A renderable collection of clouds in the 3D scene.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/CumulusCloud.png' width='400' height='300' /><br />\n * Example cumulus clouds\n * </div>\n * <br /><br />\n * Clouds are added and removed from the collection using {@link CloudCollection#add}\n * and {@link CloudCollection#remove}.\n * @alias CloudCollection\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.show=true] Whether to display the clouds.\n * @param {number} [options.noiseDetail=16.0] Desired amount of detail in the noise texture.\n * @param {number} [options.noiseOffset=Cartesian3.ZERO] Desired translation of data in noise texture.\n * @param {boolean} [options.debugBillboards=false] For debugging only. Determines if the billboards are rendered with an opaque color.\n * @param {boolean} [options.debugEllipsoids=false] For debugging only. Determines if the clouds will be rendered as opaque ellipsoids.\n * @see CloudCollection#add\n * @see CloudCollection#remove\n * @see CumulusCloud\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Clouds.html|Cesium Sandcastle Clouds Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Cloud%20Parameters.html|Cesium Sandcastle Cloud Parameters Demo}\n *\n * @example\n * // Create a cloud collection with two cumulus clouds\n * const clouds = scene.primitives.add(new Cesium.CloudCollection());\n * clouds.add({\n *   position : new Cesium.Cartesian3(1.0, 2.0, 3.0),\n *   maximumSize: new Cesium.Cartesian3(20.0, 12.0, 8.0)\n * });\n * clouds.add({\n *   position : new Cesium.Cartesian3(4.0, 5.0, 6.0),\n *   maximumSize: new Cesium.Cartesian3(15.0, 9.0, 9.0),\n *   slice: 0.5\n * });\n *\n */\nfunction CloudCollection(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._clouds = [];\n  this._cloudsToUpdate = [];\n  this._cloudsToUpdateIndex = 0;\n  this._cloudsRemoved = false;\n  this._createVertexArray = false;\n\n  this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n\n  this._noiseTexture = undefined;\n  this._textureSliceWidth = 128;\n  this._noiseTextureRows = 4;\n\n  /**\n   * <p>\n   * Controls the amount of detail captured in the precomputed noise texture\n   * used to render the cumulus clouds. In order for the texture to be tileable,\n   * this must be a power of two. For best results, set this to be a power of two\n   * between <code>8.0</code> and <code>32.0</code> (inclusive).\n   * </p>\n   *\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'>\n   *   <code>clouds.noiseDetail = 8.0;</code><br/>\n   *   <img src='Images/CloudCollection.noiseDetail8.png' width='250' height='158' />\n   * </td>\n   * <td align='center'>\n   *   <code>clouds.noiseDetail = 32.0;</code><br/>\n   *   <img src='Images/CloudCollection.noiseDetail32.png' width='250' height='158' />\n   * </td>\n   * </tr></table>\n   * </div>\n   *\n   * @type {number}\n   *\n   * @default 16.0\n   */\n  this.noiseDetail = defaultValue(options.noiseDetail, 16.0);\n\n  /**\n   * <p>\n   * Applies a translation to noise texture coordinates to generate different data.\n   * This can be modified if the default noise does not generate good-looking clouds.\n   * </p>\n   *\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'>\n   *   <code>default</code><br/>\n   *   <img src='Images/CloudCollection.noiseOffsetdefault.png' width='250' height='158' />\n   * </td>\n   * <td align='center'>\n   *   <code>clouds.noiseOffset = new Cesium.Cartesian3(10, 20, 10);</code><br/>\n   *   <img src='Images/CloudCollection.noiseOffsetx10y20z10.png' width='250' height='158' />\n   * </td>\n   * </tr></table>\n   * </div>\n   * @type {Cartesian3}\n   *\n   * @default Cartesian3.ZERO\n   */\n  this.noiseOffset = Cartesian3.clone(\n    defaultValue(options.noiseOffset, Cartesian3.ZERO),\n  );\n\n  this._loading = false;\n  this._ready = false;\n\n  const that = this;\n  this._uniforms = {\n    u_noiseTexture: function () {\n      return that._noiseTexture;\n    },\n    u_noiseTextureDimensions: getNoiseTextureDimensions(that),\n    u_noiseDetail: function () {\n      return that.noiseDetail;\n    },\n  };\n\n  this._vaNoise = undefined;\n  this._spNoise = undefined;\n\n  this._spCreated = false;\n  this._sp = undefined;\n  this._rs = undefined;\n\n  /**\n   * Determines if billboards in this collection will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  this._colorCommands = [];\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Renders the billboards with one opaque color for the sake of debugging.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugBillboards = defaultValue(options.debugBillboards, false);\n  this._compiledDebugBillboards = false;\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the clouds as opaque, monochrome ellipsoids for the sake of debugging.\n   * If <code>debugBillboards</code> is also true, then the ellipsoids will draw on top of the billboards.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugEllipsoids = defaultValue(options.debugEllipsoids, false);\n  this._compiledDebugEllipsoids = false;\n}\n\n// Wraps useful texture metrics into a single vec3 for less overhead.\nfunction getNoiseTextureDimensions(collection) {\n  return function () {\n    scratchTextureDimensions.x = collection._textureSliceWidth;\n    scratchTextureDimensions.y = collection._noiseTextureRows;\n    scratchTextureDimensions.z = 1.0 / collection._noiseTextureRows;\n    return scratchTextureDimensions;\n  };\n}\n\nObject.defineProperties(CloudCollection.prototype, {\n  /**\n   * Returns the number of clouds in this collection.\n   * @memberof CloudCollection.prototype\n   * @type {number}\n   */\n  length: {\n    get: function () {\n      removeClouds(this);\n      return this._clouds.length;\n    },\n  },\n});\n\nfunction destroyClouds(clouds) {\n  const length = clouds.length;\n  for (let i = 0; i < length; ++i) {\n    if (clouds[i]) {\n      clouds[i]._destroy();\n    }\n  }\n}\n\n/**\n * Creates and adds a cloud with the specified initial properties to the collection.\n * The added cloud is returned so it can be modified or removed from the collection later.\n *\n * @param {object}[options] A template describing the cloud's properties as shown in Example 1.\n * @returns {CumulusCloud} The cloud that was added to the collection.\n *\n * @performance Calling <code>add</code> is expected constant time.  However, the collection's vertex buffer\n * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For\n * best performance, add as many clouds as possible before calling <code>update</code>.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Example 1:  Add a cumulus cloud, specifying all the default values.\n * const c = clouds.add({\n *   show : true,\n *   position : Cesium.Cartesian3.ZERO,\n *   scale : new Cesium.Cartesian2(20.0, 12.0),\n *   maximumSize: new Cesium.Cartesian3(20.0, 12.0, 12.0),\n *   slice: -1.0,\n *   cloudType : CloudType.CUMULUS\n * });\n *\n * @example\n * // Example 2:  Specify only the cloud's cartographic position.\n * const c = clouds.add({\n *   position : Cesium.Cartesian3.fromDegrees(longitude, latitude, height)\n * });\n *\n * @see CloudCollection#remove\n * @see CloudCollection#removeAll\n */\nCloudCollection.prototype.add = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const cloudType = defaultValue(options.cloudType, CloudType.CUMULUS);\n  //>>includeStart('debug', pragmas.debug);\n  if (!CloudType.validate(cloudType)) {\n    throw new DeveloperError(\"invalid cloud type\");\n  }\n  //>>includeEnd('debug');\n\n  let cloud;\n  if (cloudType === CloudType.CUMULUS) {\n    cloud = new CumulusCloud(options, this);\n    cloud._index = this._clouds.length;\n    this._clouds.push(cloud);\n    this._createVertexArray = true;\n  }\n\n  return cloud;\n};\n\n/**\n * Removes a cloud from the collection.\n *\n * @param {CumulusCloud} cloud The cloud to remove.\n * @returns {boolean} <code>true</code> if the cloud was removed; <code>false</code> if the cloud was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * const c = clouds.add(...);\n * clouds.remove(c);  // Returns true\n *\n * @see CloudCollection#add\n * @see CloudCollection#removeAll\n * @see CumulusCloud#show\n */\nCloudCollection.prototype.remove = function (cloud) {\n  if (this.contains(cloud)) {\n    this._clouds[cloud._index] = undefined; // Removed later in removeClouds()\n    this._cloudsRemoved = true;\n    this._createVertexArray = true;\n    cloud._destroy();\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Removes all clouds from the collection.\n *\n * @performance <code>O(n)</code>.  It is more efficient to remove all the clouds\n * from a collection and then add new ones than to create a new collection entirely.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * clouds.add(...);\n * clouds.add(...);\n * clouds.removeAll();\n *\n * @see CloudCollection#add\n * @see CloudCollection#remove\n */\nCloudCollection.prototype.removeAll = function () {\n  destroyClouds(this._clouds);\n  this._clouds = [];\n  this._cloudsToUpdate = [];\n  this._cloudsToUpdateIndex = 0;\n  this._cloudsRemoved = false;\n\n  this._createVertexArray = true;\n};\n\nfunction removeClouds(cloudCollection) {\n  if (cloudCollection._cloudsRemoved) {\n    cloudCollection._cloudsRemoved = false;\n\n    const newClouds = [];\n    const clouds = cloudCollection._clouds;\n    const length = clouds.length;\n    for (let i = 0, j = 0; i < length; ++i) {\n      const cloud = clouds[i];\n      if (defined(cloud)) {\n        clouds._index = j++;\n        newClouds.push(cloud);\n      }\n    }\n\n    cloudCollection._clouds = newClouds;\n  }\n}\n\nCloudCollection.prototype._updateCloud = function (cloud, propertyChanged) {\n  if (!cloud._dirty) {\n    this._cloudsToUpdate[this._cloudsToUpdateIndex++] = cloud;\n  }\n\n  ++this._propertiesChanged[propertyChanged];\n};\n\n/**\n * Check whether this collection contains a given cloud.\n *\n * @param {CumulusCloud} [cloud] The cloud to check for.\n * @returns {boolean} true if this collection contains the cloud, false otherwise.\n *\n * @see CloudCollection#get\n */\nCloudCollection.prototype.contains = function (cloud) {\n  return defined(cloud) && cloud._cloudCollection === this;\n};\n\n/**\n * Returns the cloud in the collection at the specified index. Indices are zero-based\n * and increase as clouds are added. Removing a cloud shifts all clouds after\n * it to the left, changing their indices. This function is commonly used with\n * {@link CloudCollection#length} to iterate over all the clouds in the collection.\n *\n * @param {number} index The zero-based index of the cloud.\n * @returns {CumulusCloud} The cloud at the specified index.\n *\n * @performance Expected constant time. If clouds were removed from the collection and\n * {@link CloudCollection#update} was not called, an implicit <code>O(n)</code>\n * operation is performed.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Toggle the show property of every cloud in the collection\n * const len = clouds.length;\n * for (let i = 0; i < len; ++i) {\n *   const c = clouds.get(i);\n *   c.show = !c.show;\n * }\n *\n * @see CloudCollection#length\n */\nCloudCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index);\n  //>>includeEnd('debug');\n\n  removeClouds(this);\n  return this._clouds[index];\n};\n\nconst texturePositions = new Float32Array([\n  -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0,\n]);\n\nconst textureIndices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nfunction createTextureVA(context) {\n  const positionBuffer = Buffer.createVertexBuffer({\n    context: context,\n    typedArray: texturePositions,\n    usage: BufferUsage.STATIC_DRAW,\n  });\n  const indexBuffer = Buffer.createIndexBuffer({\n    context: context,\n    typedArray: textureIndices,\n    usage: BufferUsage.STATIC_DRAW,\n    indexDatatype: IndexDatatype.UNSIGNED_SHORT,\n  });\n\n  const attributes = [\n    {\n      index: 0,\n      vertexBuffer: positionBuffer,\n      componentsPerAttribute: 2,\n      componentDatatype: ComponentDatatype.FLOAT,\n    },\n  ];\n\n  return new VertexArray({\n    context: context,\n    attributes: attributes,\n    indexBuffer: indexBuffer,\n  });\n}\n\nlet getIndexBuffer;\n\nfunction getIndexBufferBatched(context) {\n  const sixteenK = 16 * 1024;\n\n  let indexBuffer = context.cache.cloudCollection_indexBufferBatched;\n  if (defined(indexBuffer)) {\n    return indexBuffer;\n  }\n\n  // Subtract 6 because the last index is reserved for primitive restart.\n  // https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.18\n  const length = sixteenK * 6 - 6;\n  const indices = new Uint16Array(length);\n  for (let i = 0, j = 0; i < length; i += 6, j += 4) {\n    indices[i] = j;\n    indices[i + 1] = j + 1;\n    indices[i + 2] = j + 2;\n\n    indices[i + 3] = j;\n    indices[i + 4] = j + 2;\n    indices[i + 5] = j + 3;\n  }\n\n  indexBuffer = Buffer.createIndexBuffer({\n    context: context,\n    typedArray: indices,\n    usage: BufferUsage.STATIC_DRAW,\n    indexDatatype: IndexDatatype.UNSIGNED_SHORT,\n  });\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.cloudCollection_indexBufferBatched = indexBuffer;\n  return indexBuffer;\n}\n\nfunction getIndexBufferInstanced(context) {\n  let indexBuffer = context.cache.cloudCollection_indexBufferInstanced;\n  if (defined(indexBuffer)) {\n    return indexBuffer;\n  }\n\n  indexBuffer = Buffer.createIndexBuffer({\n    context: context,\n    typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),\n    usage: BufferUsage.STATIC_DRAW,\n    indexDatatype: IndexDatatype.UNSIGNED_SHORT,\n  });\n\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.cloudCollection_indexBufferInstanced = indexBuffer;\n  return indexBuffer;\n}\n\nfunction getVertexBufferInstanced(context) {\n  let vertexBuffer = context.cache.cloudCollection_vertexBufferInstanced;\n  if (defined(vertexBuffer)) {\n    return vertexBuffer;\n  }\n\n  vertexBuffer = Buffer.createVertexBuffer({\n    context: context,\n    typedArray: new Float32Array([0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]),\n    usage: BufferUsage.STATIC_DRAW,\n  });\n\n  vertexBuffer.vertexArrayDestroyable = false;\n  context.cache.cloudCollection_vertexBufferInstanced = vertexBuffer;\n  return vertexBuffer;\n}\n\nfunction createVAF(context, numberOfClouds, instanced) {\n  const attributes = [\n    {\n      index: attributeLocations.positionHighAndScaleX,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: BufferUsage.STATIC_DRAW,\n    },\n    {\n      index: attributeLocations.positionLowAndScaleY,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: BufferUsage.STATIC_DRAW,\n    },\n    {\n      index: attributeLocations.packedAttribute0,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: BufferUsage.STATIC_DRAW,\n    },\n    {\n      index: attributeLocations.packedAttribute1,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: BufferUsage.STATIC_DRAW,\n    },\n    {\n      index: attributeLocations.color,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      normalize: true,\n      usage: BufferUsage.STATIC_DRAW,\n    },\n  ];\n\n  if (instanced) {\n    attributes.push({\n      index: attributeLocations.direction,\n      componentsPerAttribute: 2,\n      componentDatatype: ComponentDatatype.FLOAT,\n      vertexBuffer: getVertexBufferInstanced(context),\n    });\n  }\n\n  const sizeInVertices = instanced ? numberOfClouds : 4 * numberOfClouds;\n  return new VertexArrayFacade(context, attributes, sizeInVertices, instanced);\n}\n\nconst writePositionScratch = new EncodedCartesian3();\n\nfunction writePositionAndScale(cloudCollection, frameState, vafWriters, cloud) {\n  let i;\n  const positionHighWriter =\n    vafWriters[attributeLocations.positionHighAndScaleX];\n  const positionLowWriter = vafWriters[attributeLocations.positionLowAndScaleY];\n  const position = cloud.position;\n\n  EncodedCartesian3.fromCartesian(position, writePositionScratch);\n  const scale = cloud.scale;\n\n  const high = writePositionScratch.high;\n  const low = writePositionScratch.low;\n\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    positionHighWriter(i, high.x, high.y, high.z, scale.x);\n    positionLowWriter(i, low.x, low.y, low.z, scale.y);\n  } else {\n    i = cloud._index * 4;\n    positionHighWriter(i + 0, high.x, high.y, high.z, scale.x);\n    positionHighWriter(i + 1, high.x, high.y, high.z, scale.x);\n    positionHighWriter(i + 2, high.x, high.y, high.z, scale.x);\n    positionHighWriter(i + 3, high.x, high.y, high.z, scale.x);\n\n    positionLowWriter(i + 0, low.x, low.y, low.z, scale.y);\n    positionLowWriter(i + 1, low.x, low.y, low.z, scale.y);\n    positionLowWriter(i + 2, low.x, low.y, low.z, scale.y);\n    positionLowWriter(i + 3, low.x, low.y, low.z, scale.y);\n  }\n}\n\nfunction writePackedAttribute0(cloudCollection, frameState, vafWriters, cloud) {\n  let i;\n  const writer = vafWriters[attributeLocations.packedAttribute0];\n  const show = cloud.show;\n  const brightness = cloud.brightness;\n\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    writer(i, show, brightness, 0.0, 0.0);\n  } else {\n    i = cloud._index * 4;\n    writer(i + 0, show, brightness, 0.0, 0.0);\n    writer(i + 1, show, brightness, 1.0, 0.0);\n    writer(i + 2, show, brightness, 1.0, 1.0);\n    writer(i + 3, show, brightness, 0.0, 1.0);\n  }\n}\n\nfunction writePackedAttribute1(cloudCollection, frameState, vafWriters, cloud) {\n  let i;\n  const writer = vafWriters[attributeLocations.packedAttribute1];\n  const maximumSize = cloud.maximumSize;\n  const slice = cloud.slice;\n\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    writer(i, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n  } else {\n    i = cloud._index * 4;\n    writer(i + 0, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n    writer(i + 1, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n    writer(i + 2, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n    writer(i + 3, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n  }\n}\n\nfunction writeColor(cloudCollection, frameState, vafWriters, cloud) {\n  let i;\n  const writer = vafWriters[attributeLocations.color];\n  const color = cloud.color;\n  const red = Color.floatToByte(color.red);\n  const green = Color.floatToByte(color.green);\n  const blue = Color.floatToByte(color.blue);\n  const alpha = Color.floatToByte(color.alpha);\n\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    writer(i, red, green, blue, alpha);\n  } else {\n    i = cloud._index * 4;\n    writer(i + 0, red, green, blue, alpha);\n    writer(i + 1, red, green, blue, alpha);\n    writer(i + 2, red, green, blue, alpha);\n    writer(i + 3, red, green, blue, alpha);\n  }\n}\nfunction writeCloud(cloudCollection, frameState, vafWriters, cloud) {\n  writePositionAndScale(cloudCollection, frameState, vafWriters, cloud);\n  writePackedAttribute0(cloudCollection, frameState, vafWriters, cloud);\n  writePackedAttribute1(cloudCollection, frameState, vafWriters, cloud);\n  writeColor(cloudCollection, frameState, vafWriters, cloud);\n}\n\nfunction createNoiseTexture(cloudCollection, frameState, vsSource, fsSource) {\n  const that = cloudCollection;\n\n  const textureSliceWidth = that._textureSliceWidth;\n  const noiseTextureRows = that._noiseTextureRows;\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    textureSliceWidth / noiseTextureRows < 1 ||\n    textureSliceWidth % noiseTextureRows !== 0\n  ) {\n    throw new DeveloperError(\n      \"noiseTextureRows must evenly divide textureSliceWidth\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const context = frameState.context;\n  that._vaNoise = createTextureVA(context);\n  that._spNoise = ShaderProgram.fromCache({\n    context: context,\n    vertexShaderSource: vsSource,\n    fragmentShaderSource: fsSource,\n    attributeLocations: {\n      position: 0,\n    },\n  });\n\n  const noiseDetail = that.noiseDetail;\n  const noiseOffset = that.noiseOffset;\n\n  that._noiseTexture = new Texture({\n    context: context,\n    width: (textureSliceWidth * textureSliceWidth) / noiseTextureRows,\n    height: textureSliceWidth * noiseTextureRows,\n    pixelDatatype: PixelDatatype.UNSIGNED_BYTE,\n    pixelFormat: PixelFormat.RGBA,\n    sampler: new Sampler({\n      wrapS: TextureWrap.REPEAT,\n      wrapT: TextureWrap.REPEAT,\n      minificationFilter: TextureMinificationFilter.NEAREST,\n      magnificationFilter: TextureMagnificationFilter.NEAREST,\n    }),\n  });\n\n  const textureCommand = new ComputeCommand({\n    vertexArray: that._vaNoise,\n    shaderProgram: that._spNoise,\n    outputTexture: that._noiseTexture,\n    uniformMap: {\n      u_noiseTextureDimensions: getNoiseTextureDimensions(that),\n      u_noiseDetail: function () {\n        return noiseDetail;\n      },\n      u_noiseOffset: function () {\n        return noiseOffset;\n      },\n    },\n    persists: false,\n    owner: cloudCollection,\n    postExecute: function (texture) {\n      that._ready = true;\n      that._loading = false;\n    },\n  });\n\n  frameState.commandList.push(textureCommand);\n  that._loading = true;\n}\n\nfunction createVertexArray(cloudCollection, frameState) {\n  const that = cloudCollection;\n  const context = frameState.context;\n  that._createVertexArray = false;\n  that._vaf = that._vaf && that._vaf.destroy();\n\n  const clouds = cloudCollection._clouds;\n  const cloudsLength = clouds.length;\n  if (cloudsLength > 0) {\n    that._vaf = createVAF(context, cloudsLength, that._instanced);\n    const vafWriters = that._vaf.writers;\n\n    let i;\n    // Rewrite entire buffer if clouds were added or removed.\n    for (i = 0; i < cloudsLength; ++i) {\n      const cloud = clouds[i];\n      writeCloud(cloudCollection, frameState, vafWriters, cloud);\n    }\n\n    // Different cloud collections share the same index buffer.\n    that._vaf.commit(getIndexBuffer(context));\n  }\n}\n\nconst scratchWriterArray = [];\n\nfunction updateClouds(cloudCollection, frameState) {\n  const context = frameState.context;\n  const that = cloudCollection;\n  const clouds = that._clouds;\n  const cloudsLength = clouds.length;\n  const cloudsToUpdate = that._cloudsToUpdate;\n  const cloudsToUpdateLength = that._cloudsToUpdateIndex;\n\n  const properties = that._propertiesChanged;\n\n  const writers = scratchWriterArray;\n  writers.length = 0;\n\n  if (properties[POSITION_INDEX] || properties[SCALE_INDEX]) {\n    writers.push(writePositionAndScale);\n  }\n\n  if (properties[SHOW_INDEX] || properties[BRIGHTNESS_INDEX]) {\n    writers.push(writePackedAttribute0);\n  }\n\n  if (properties[MAXIMUM_SIZE_INDEX] || properties[SLICE_INDEX]) {\n    writers.push(writePackedAttribute1);\n  }\n\n  if (properties[COLOR_INDEX]) {\n    writers.push(writeColor);\n  }\n\n  const numWriters = writers.length;\n  const vafWriters = that._vaf.writers;\n\n  let i, c, w;\n  if (cloudsToUpdateLength / cloudsLength > 0.1) {\n    // Like BillboardCollection, if more than 10% of clouds change,\n    // rewrite the entire buffer.\n\n    for (i = 0; i < cloudsToUpdateLength; ++i) {\n      c = cloudsToUpdate[i];\n      c._dirty = false;\n\n      for (w = 0; w < numWriters; ++w) {\n        writers[w](cloudCollection, frameState, vafWriters, c);\n      }\n    }\n\n    that._vaf.commit(getIndexBuffer(context));\n  } else {\n    for (i = 0; i < cloudsToUpdateLength; ++i) {\n      c = cloudsToUpdate[i];\n      c._dirty = false;\n\n      for (w = 0; w < numWriters; ++w) {\n        writers[w](cloudCollection, frameState, vafWriters, c);\n      }\n\n      if (that._instanced) {\n        that._vaf.subCommit(c._index, 1);\n      } else {\n        that._vaf.subCommit(c._index * 4, 4);\n      }\n    }\n    that._vaf.endSubCommits();\n  }\n\n  that._cloudsToUpdateIndex = 0;\n}\n\nfunction createShaderProgram(cloudCollection, frameState, vsSource, fsSource) {\n  const context = frameState.context;\n  const that = cloudCollection;\n  const vs = new ShaderSource({\n    defines: [],\n    sources: [vsSource],\n  });\n\n  if (that._instanced) {\n    vs.defines.push(\"INSTANCED\");\n  }\n\n  const fs = new ShaderSource({\n    defines: [],\n    sources: [fsSource],\n  });\n\n  if (that.debugBillboards) {\n    fs.defines.push(\"DEBUG_BILLBOARDS\");\n  }\n\n  if (that.debugEllipsoids) {\n    fs.defines.push(\"DEBUG_ELLIPSOIDS\");\n  }\n\n  that._sp = ShaderProgram.replaceCache({\n    context: context,\n    shaderProgram: that._sp,\n    vertexShaderSource: vs,\n    fragmentShaderSource: fs,\n    attributeLocations: attributeLocations,\n  });\n\n  that._rs = RenderState.fromCache({\n    depthTest: {\n      enabled: true,\n      func: WebGLConstants.LESS,\n    },\n    depthMask: false,\n    blending: BlendingState.ALPHA_BLEND,\n  });\n\n  that._spCreated = true;\n  that._compiledDebugBillboards = that.debugBillboards;\n  that._compiledDebugEllipsoids = that.debugEllipsoids;\n}\n\nfunction createDrawCommands(cloudCollection, frameState) {\n  const that = cloudCollection;\n  const pass = frameState.passes;\n  const uniforms = that._uniforms;\n  const commandList = frameState.commandList;\n  if (pass.render) {\n    const colorList = that._colorCommands;\n\n    const va = that._vaf.va;\n    const vaLength = va.length;\n    colorList.length = vaLength;\n    for (let i = 0; i < vaLength; i++) {\n      let command = colorList[i];\n      if (!defined(command)) {\n        command = colorList[i] = new DrawCommand();\n      }\n      command.pass = Pass.TRANSLUCENT;\n      command.owner = cloudCollection;\n      command.uniformMap = uniforms;\n      command.count = va[i].indicesCount;\n      command.vertexArray = va[i].va;\n      command.shaderProgram = that._sp;\n      command.renderState = that._rs;\n      if (that._instanced) {\n        command.count = 6;\n        command.instanceCount = that._clouds.length;\n      }\n\n      commandList.push(command);\n    }\n  }\n}\n\n/**\n * @private\n */\nCloudCollection.prototype.update = function (frameState) {\n  removeClouds(this);\n  if (!this.show) {\n    return;\n  }\n\n  const debugging = this.debugBillboards || this.debugEllipsoids;\n  this._ready = debugging ? true : defined(this._noiseTexture);\n\n  if (!this._ready && !this._loading && !debugging) {\n    createNoiseTexture(this, frameState, CloudNoiseVS, CloudNoiseFS);\n  }\n\n  this._instanced = frameState.context.instancedArrays;\n  attributeLocations = this._instanced\n    ? attributeLocationsInstanced\n    : attributeLocationsBatched;\n  getIndexBuffer = this._instanced\n    ? getIndexBufferInstanced\n    : getIndexBufferBatched;\n\n  const clouds = this._clouds;\n  const cloudsLength = clouds.length;\n  const cloudsToUpdate = this._cloudsToUpdate;\n  const cloudsToUpdateLength = this._cloudsToUpdateIndex;\n\n  if (this._createVertexArray) {\n    createVertexArray(this, frameState);\n  } else if (cloudsToUpdateLength > 0) {\n    // Clouds were modified, but none were added or removed.\n    updateClouds(this, frameState);\n  }\n\n  // If the number of total clouds ever shrinks considerably,\n  // truncate cloudsToUpdate so that we free memory that\n  // we are no longer using.\n  if (cloudsToUpdateLength > cloudsLength * 1.5) {\n    cloudsToUpdate.length = cloudsLength;\n  }\n\n  if (\n    !defined(this._vaf) ||\n    !defined(this._vaf.va) ||\n    !this._ready & !debugging\n  ) {\n    return;\n  }\n\n  if (\n    !this._spCreated ||\n    this.debugBillboards !== this._compiledDebugBillboards ||\n    this.debugEllipsoids !== this._compiledDebugEllipsoids\n  ) {\n    createShaderProgram(this, frameState, CloudCollectionVS, CloudCollectionFS);\n  }\n\n  createDrawCommands(this, frameState);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see CloudCollection#destroy\n */\nCloudCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * clouds = clouds && clouds.destroy();\n *\n * @see CloudCollection#isDestroyed\n */\nCloudCollection.prototype.destroy = function () {\n  this._noiseTexture = this._noiseTexture && this._noiseTexture.destroy();\n  this._sp = this._sp && this._sp.destroy();\n  this._vaf = this._vaf && this._vaf.destroy();\n\n  destroyClouds(this._clouds);\n\n  return destroyObject(this);\n};\n\nexport default CloudCollection;\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,oBAAoB;AAC9C,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,cAAc,MAAM,+BAA+B;AAC1D,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,iBAAiB,MAAM,iCAAiC;AAC/D,OAAOC,iBAAiB,MAAM,iCAAiC;AAC/D,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,aAAa,MAAM,8BAA8B;AACxD,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,aAAa,MAAM,8BAA8B;AACxD,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,OAAOC,0BAA0B,MAAM,2CAA2C;AAClF,OAAOC,yBAAyB,MAAM,0CAA0C;AAChF,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,iBAAiB,MAAM,kCAAkC;AAChE,OAAOC,cAAc,MAAM,2BAA2B;AAEtD,IAAIC,kBAAkB;AACtB,MAAMC,wBAAwB,GAAG,IAAIjC,UAAU,CAAC,CAAC;AAEjD,MAAMkC,yBAAyB,GAAG;EAChCC,qBAAqB,EAAE,CAAC;EACxBC,oBAAoB,EAAE,CAAC;EACvBC,gBAAgB,EAAE,CAAC;EAAE;EACrBC,gBAAgB,EAAE,CAAC;EAAE;EACrBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,2BAA2B,GAAG;EAClCC,SAAS,EAAE,CAAC;EACZN,qBAAqB,EAAE,CAAC;EACxBC,oBAAoB,EAAE,CAAC;EACvBC,gBAAgB,EAAE,CAAC;EAAE;EACrBC,gBAAgB,EAAE,CAAC;EAAE;EACrBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMG,UAAU,GAAGhC,YAAY,CAACgC,UAAU;AAC1C,MAAMC,cAAc,GAAGjC,YAAY,CAACiC,cAAc;AAClD,MAAMC,WAAW,GAAGlC,YAAY,CAACkC,WAAW;AAC5C,MAAMC,kBAAkB,GAAGnC,YAAY,CAACmC,kBAAkB;AAC1D,MAAMC,WAAW,GAAGpC,YAAY,CAACoC,WAAW;AAC5C,MAAMC,gBAAgB,GAAGrC,YAAY,CAACqC,gBAAgB;AACtD,MAAMC,oBAAoB,GAAGtC,YAAY,CAACsC,oBAAoB;AAC9D,MAAMC,WAAW,GAAGvC,YAAY,CAACuC,WAAW;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,OAAO,EAAE;EAChCA,OAAO,GAAGxC,YAAY,CAACwC,OAAO,EAAExC,YAAY,CAACyC,YAAY,CAAC;EAE1D,IAAI,CAACC,OAAO,GAAG,EAAE;EACjB,IAAI,CAACC,eAAe,GAAG,EAAE;EACzB,IAAI,CAACC,oBAAoB,GAAG,CAAC;EAC7B,IAAI,CAACC,cAAc,GAAG,KAAK;EAC3B,IAAI,CAACC,kBAAkB,GAAG,KAAK;EAE/B,IAAI,CAACC,kBAAkB,GAAG,IAAIC,WAAW,CAACX,oBAAoB,CAAC;EAE/D,IAAI,CAACY,aAAa,GAAGC,SAAS;EAC9B,IAAI,CAACC,kBAAkB,GAAG,GAAG;EAC7B,IAAI,CAACC,iBAAiB,GAAG,CAAC;;EAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,WAAW,GAAGrD,YAAY,CAACwC,OAAO,CAACa,WAAW,EAAE,IAAI,CAAC;;EAE1D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,WAAW,GAAGjE,UAAU,CAACkE,KAAK,CACjCvD,YAAY,CAACwC,OAAO,CAACc,WAAW,EAAEjE,UAAU,CAACmE,IAAI,CACnD,CAAC;EAED,IAAI,CAACC,QAAQ,GAAG,KAAK;EACrB,IAAI,CAACC,MAAM,GAAG,KAAK;EAEnB,MAAMC,IAAI,GAAG,IAAI;EACjB,IAAI,CAACC,SAAS,GAAG;IACfC,cAAc,EAAE,SAAAA,CAAA,EAAY;MAC1B,OAAOF,IAAI,CAACV,aAAa;IAC3B,CAAC;IACDa,wBAAwB,EAAEC,yBAAyB,CAACJ,IAAI,CAAC;IACzDK,aAAa,EAAE,SAAAA,CAAA,EAAY;MACzB,OAAOL,IAAI,CAACN,WAAW;IACzB;EACF,CAAC;EAED,IAAI,CAACY,QAAQ,GAAGf,SAAS;EACzB,IAAI,CAACgB,QAAQ,GAAGhB,SAAS;EAEzB,IAAI,CAACiB,UAAU,GAAG,KAAK;EACvB,IAAI,CAACC,GAAG,GAAGlB,SAAS;EACpB,IAAI,CAACmB,GAAG,GAAGnB,SAAS;;EAEpB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACoB,IAAI,GAAGtE,YAAY,CAACwC,OAAO,CAAC8B,IAAI,EAAE,IAAI,CAAC;EAE5C,IAAI,CAACC,cAAc,GAAG,EAAE;;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,eAAe,GAAGxE,YAAY,CAACwC,OAAO,CAACgC,eAAe,EAAE,KAAK,CAAC;EACnE,IAAI,CAACC,wBAAwB,GAAG,KAAK;;EAErC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,eAAe,GAAG1E,YAAY,CAACwC,OAAO,CAACkC,eAAe,EAAE,KAAK,CAAC;EACnE,IAAI,CAACC,wBAAwB,GAAG,KAAK;AACvC;;AAEA;AACA,SAASZ,yBAAyBA,CAACa,UAAU,EAAE;EAC7C,OAAO,YAAY;IACjBtD,wBAAwB,CAACuD,CAAC,GAAGD,UAAU,CAACzB,kBAAkB;IAC1D7B,wBAAwB,CAACwD,CAAC,GAAGF,UAAU,CAACxB,iBAAiB;IACzD9B,wBAAwB,CAACyD,CAAC,GAAG,GAAG,GAAGH,UAAU,CAACxB,iBAAiB;IAC/D,OAAO9B,wBAAwB;EACjC,CAAC;AACH;AAEA0D,MAAM,CAACC,gBAAgB,CAAC1C,eAAe,CAAC2C,SAAS,EAAE;EACjD;AACF;AACA;AACA;AACA;EACEC,MAAM,EAAE;IACNC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACfC,YAAY,CAAC,IAAI,CAAC;MAClB,OAAO,IAAI,CAAC3C,OAAO,CAACyC,MAAM;IAC5B;EACF;AACF,CAAC,CAAC;AAEF,SAASG,aAAaA,CAACC,MAAM,EAAE;EAC7B,MAAMJ,MAAM,GAAGI,MAAM,CAACJ,MAAM;EAC5B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAE,EAAEK,CAAC,EAAE;IAC/B,IAAID,MAAM,CAACC,CAAC,CAAC,EAAE;MACbD,MAAM,CAACC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IACtB;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlD,eAAe,CAAC2C,SAAS,CAACQ,GAAG,GAAG,UAAUlD,OAAO,EAAE;EACjDA,OAAO,GAAGxC,YAAY,CAACwC,OAAO,EAAExC,YAAY,CAACyC,YAAY,CAAC;EAC1D,MAAMkD,SAAS,GAAG3F,YAAY,CAACwC,OAAO,CAACmD,SAAS,EAAElG,SAAS,CAACmG,OAAO,CAAC;EACpE;EACA,IAAI,CAACnG,SAAS,CAACoG,QAAQ,CAACF,SAAS,CAAC,EAAE;IAClC,MAAM,IAAIxF,cAAc,CAAC,oBAAoB,CAAC;EAChD;EACA;;EAEA,IAAI2F,KAAK;EACT,IAAIH,SAAS,KAAKlG,SAAS,CAACmG,OAAO,EAAE;IACnCE,KAAK,GAAG,IAAI/F,YAAY,CAACyC,OAAO,EAAE,IAAI,CAAC;IACvCsD,KAAK,CAACC,MAAM,GAAG,IAAI,CAACrD,OAAO,CAACyC,MAAM;IAClC,IAAI,CAACzC,OAAO,CAACsD,IAAI,CAACF,KAAK,CAAC;IACxB,IAAI,CAAChD,kBAAkB,GAAG,IAAI;EAChC;EAEA,OAAOgD,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvD,eAAe,CAAC2C,SAAS,CAACe,MAAM,GAAG,UAAUH,KAAK,EAAE;EAClD,IAAI,IAAI,CAACI,QAAQ,CAACJ,KAAK,CAAC,EAAE;IACxB,IAAI,CAACpD,OAAO,CAACoD,KAAK,CAACC,MAAM,CAAC,GAAG7C,SAAS,CAAC,CAAC;IACxC,IAAI,CAACL,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9BgD,KAAK,CAACL,QAAQ,CAAC,CAAC;IAChB,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlD,eAAe,CAAC2C,SAAS,CAACiB,SAAS,GAAG,YAAY;EAChDb,aAAa,CAAC,IAAI,CAAC5C,OAAO,CAAC;EAC3B,IAAI,CAACA,OAAO,GAAG,EAAE;EACjB,IAAI,CAACC,eAAe,GAAG,EAAE;EACzB,IAAI,CAACC,oBAAoB,GAAG,CAAC;EAC7B,IAAI,CAACC,cAAc,GAAG,KAAK;EAE3B,IAAI,CAACC,kBAAkB,GAAG,IAAI;AAChC,CAAC;AAED,SAASuC,YAAYA,CAACe,eAAe,EAAE;EACrC,IAAIA,eAAe,CAACvD,cAAc,EAAE;IAClCuD,eAAe,CAACvD,cAAc,GAAG,KAAK;IAEtC,MAAMwD,SAAS,GAAG,EAAE;IACpB,MAAMd,MAAM,GAAGa,eAAe,CAAC1D,OAAO;IACtC,MAAMyC,MAAM,GAAGI,MAAM,CAACJ,MAAM;IAC5B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEc,CAAC,GAAG,CAAC,EAAEd,CAAC,GAAGL,MAAM,EAAE,EAAEK,CAAC,EAAE;MACtC,MAAMM,KAAK,GAAGP,MAAM,CAACC,CAAC,CAAC;MACvB,IAAIvF,OAAO,CAAC6F,KAAK,CAAC,EAAE;QAClBP,MAAM,CAACQ,MAAM,GAAGO,CAAC,EAAE;QACnBD,SAAS,CAACL,IAAI,CAACF,KAAK,CAAC;MACvB;IACF;IAEAM,eAAe,CAAC1D,OAAO,GAAG2D,SAAS;EACrC;AACF;AAEA9D,eAAe,CAAC2C,SAAS,CAACqB,YAAY,GAAG,UAAUT,KAAK,EAAEU,eAAe,EAAE;EACzE,IAAI,CAACV,KAAK,CAACW,MAAM,EAAE;IACjB,IAAI,CAAC9D,eAAe,CAAC,IAAI,CAACC,oBAAoB,EAAE,CAAC,GAAGkD,KAAK;EAC3D;EAEA,EAAE,IAAI,CAAC/C,kBAAkB,CAACyD,eAAe,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjE,eAAe,CAAC2C,SAAS,CAACgB,QAAQ,GAAG,UAAUJ,KAAK,EAAE;EACpD,OAAO7F,OAAO,CAAC6F,KAAK,CAAC,IAAIA,KAAK,CAACY,gBAAgB,KAAK,IAAI;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnE,eAAe,CAAC2C,SAAS,CAACE,GAAG,GAAG,UAAUuB,KAAK,EAAE;EAC/C;EACArH,KAAK,CAACsH,MAAM,CAACC,MAAM,CAAC,OAAO,EAAEF,KAAK,CAAC;EACnC;;EAEAtB,YAAY,CAAC,IAAI,CAAC;EAClB,OAAO,IAAI,CAAC3C,OAAO,CAACiE,KAAK,CAAC;AAC5B,CAAC;AAED,MAAMG,gBAAgB,GAAG,IAAIC,YAAY,CAAC,CACxC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAC3C,CAAC;AAEF,MAAMC,cAAc,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAE1D,SAASC,eAAeA,CAACC,OAAO,EAAE;EAChC,MAAMC,cAAc,GAAGjI,MAAM,CAACkI,kBAAkB,CAAC;IAC/CF,OAAO,EAAEA,OAAO;IAChBG,UAAU,EAAER,gBAAgB;IAC5BS,KAAK,EAAEnI,WAAW,CAACoI;EACrB,CAAC,CAAC;EACF,MAAMC,WAAW,GAAGtI,MAAM,CAACuI,iBAAiB,CAAC;IAC3CP,OAAO,EAAEA,OAAO;IAChBG,UAAU,EAAEN,cAAc;IAC1BO,KAAK,EAAEnI,WAAW,CAACoI,WAAW;IAC9BG,aAAa,EAAErH,aAAa,CAACsH;EAC/B,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAG,CACjB;IACElB,KAAK,EAAE,CAAC;IACRmB,YAAY,EAAEV,cAAc;IAC5BW,sBAAsB,EAAE,CAAC;IACzBC,iBAAiB,EAAElI,iBAAiB,CAACmI;EACvC,CAAC,CACF;EAED,OAAO,IAAI/G,WAAW,CAAC;IACrBiG,OAAO,EAAEA,OAAO;IAChBU,UAAU,EAAEA,UAAU;IACtBJ,WAAW,EAAEA;EACf,CAAC,CAAC;AACJ;AAEA,IAAIS,cAAc;AAElB,SAASC,qBAAqBA,CAAChB,OAAO,EAAE;EACtC,MAAMiB,QAAQ,GAAG,EAAE,GAAG,IAAI;EAE1B,IAAIX,WAAW,GAAGN,OAAO,CAACkB,KAAK,CAACC,kCAAkC;EAClE,IAAIrI,OAAO,CAACwH,WAAW,CAAC,EAAE;IACxB,OAAOA,WAAW;EACpB;;EAEA;EACA;EACA,MAAMtC,MAAM,GAAGiD,QAAQ,GAAG,CAAC,GAAG,CAAC;EAC/B,MAAMG,OAAO,GAAG,IAAItB,WAAW,CAAC9B,MAAM,CAAC;EACvC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEc,CAAC,GAAG,CAAC,EAAEd,CAAC,GAAGL,MAAM,EAAEK,CAAC,IAAI,CAAC,EAAEc,CAAC,IAAI,CAAC,EAAE;IACjDiC,OAAO,CAAC/C,CAAC,CAAC,GAAGc,CAAC;IACdiC,OAAO,CAAC/C,CAAC,GAAG,CAAC,CAAC,GAAGc,CAAC,GAAG,CAAC;IACtBiC,OAAO,CAAC/C,CAAC,GAAG,CAAC,CAAC,GAAGc,CAAC,GAAG,CAAC;IAEtBiC,OAAO,CAAC/C,CAAC,GAAG,CAAC,CAAC,GAAGc,CAAC;IAClBiC,OAAO,CAAC/C,CAAC,GAAG,CAAC,CAAC,GAAGc,CAAC,GAAG,CAAC;IACtBiC,OAAO,CAAC/C,CAAC,GAAG,CAAC,CAAC,GAAGc,CAAC,GAAG,CAAC;EACxB;EAEAmB,WAAW,GAAGtI,MAAM,CAACuI,iBAAiB,CAAC;IACrCP,OAAO,EAAEA,OAAO;IAChBG,UAAU,EAAEiB,OAAO;IACnBhB,KAAK,EAAEnI,WAAW,CAACoI,WAAW;IAC9BG,aAAa,EAAErH,aAAa,CAACsH;EAC/B,CAAC,CAAC;EACFH,WAAW,CAACe,sBAAsB,GAAG,KAAK;EAC1CrB,OAAO,CAACkB,KAAK,CAACC,kCAAkC,GAAGb,WAAW;EAC9D,OAAOA,WAAW;AACpB;AAEA,SAASgB,uBAAuBA,CAACtB,OAAO,EAAE;EACxC,IAAIM,WAAW,GAAGN,OAAO,CAACkB,KAAK,CAACK,oCAAoC;EACpE,IAAIzI,OAAO,CAACwH,WAAW,CAAC,EAAE;IACxB,OAAOA,WAAW;EACpB;EAEAA,WAAW,GAAGtI,MAAM,CAACuI,iBAAiB,CAAC;IACrCP,OAAO,EAAEA,OAAO;IAChBG,UAAU,EAAE,IAAIL,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/CM,KAAK,EAAEnI,WAAW,CAACoI,WAAW;IAC9BG,aAAa,EAAErH,aAAa,CAACsH;EAC/B,CAAC,CAAC;EAEFH,WAAW,CAACe,sBAAsB,GAAG,KAAK;EAC1CrB,OAAO,CAACkB,KAAK,CAACK,oCAAoC,GAAGjB,WAAW;EAChE,OAAOA,WAAW;AACpB;AAEA,SAASkB,wBAAwBA,CAACxB,OAAO,EAAE;EACzC,IAAIW,YAAY,GAAGX,OAAO,CAACkB,KAAK,CAACO,qCAAqC;EACtE,IAAI3I,OAAO,CAAC6H,YAAY,CAAC,EAAE;IACzB,OAAOA,YAAY;EACrB;EAEAA,YAAY,GAAG3I,MAAM,CAACkI,kBAAkB,CAAC;IACvCF,OAAO,EAAEA,OAAO;IAChBG,UAAU,EAAE,IAAIP,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACtEQ,KAAK,EAAEnI,WAAW,CAACoI;EACrB,CAAC,CAAC;EAEFM,YAAY,CAACU,sBAAsB,GAAG,KAAK;EAC3CrB,OAAO,CAACkB,KAAK,CAACO,qCAAqC,GAAGd,YAAY;EAClE,OAAOA,YAAY;AACrB;AAEA,SAASe,SAASA,CAAC1B,OAAO,EAAE2B,cAAc,EAAEC,SAAS,EAAE;EACrD,MAAMlB,UAAU,GAAG,CACjB;IACElB,KAAK,EAAEtF,kBAAkB,CAACG,qBAAqB;IAC/CuG,sBAAsB,EAAE,CAAC;IACzBC,iBAAiB,EAAElI,iBAAiB,CAACmI,KAAK;IAC1CV,KAAK,EAAEnI,WAAW,CAACoI;EACrB,CAAC,EACD;IACEb,KAAK,EAAEtF,kBAAkB,CAACI,oBAAoB;IAC9CsG,sBAAsB,EAAE,CAAC;IACzBC,iBAAiB,EAAElI,iBAAiB,CAACmI,KAAK;IAC1CV,KAAK,EAAEnI,WAAW,CAACoI;EACrB,CAAC,EACD;IACEb,KAAK,EAAEtF,kBAAkB,CAACK,gBAAgB;IAC1CqG,sBAAsB,EAAE,CAAC;IACzBC,iBAAiB,EAAElI,iBAAiB,CAACmI,KAAK;IAC1CV,KAAK,EAAEnI,WAAW,CAACoI;EACrB,CAAC,EACD;IACEb,KAAK,EAAEtF,kBAAkB,CAACM,gBAAgB;IAC1CoG,sBAAsB,EAAE,CAAC;IACzBC,iBAAiB,EAAElI,iBAAiB,CAACmI,KAAK;IAC1CV,KAAK,EAAEnI,WAAW,CAACoI;EACrB,CAAC,EACD;IACEb,KAAK,EAAEtF,kBAAkB,CAACO,KAAK;IAC/BmG,sBAAsB,EAAE,CAAC;IACzBC,iBAAiB,EAAElI,iBAAiB,CAACkJ,aAAa;IAClDC,SAAS,EAAE,IAAI;IACf1B,KAAK,EAAEnI,WAAW,CAACoI;EACrB,CAAC,CACF;EAED,IAAIuB,SAAS,EAAE;IACblB,UAAU,CAAC7B,IAAI,CAAC;MACdW,KAAK,EAAEtF,kBAAkB,CAACS,SAAS;MACnCiG,sBAAsB,EAAE,CAAC;MACzBC,iBAAiB,EAAElI,iBAAiB,CAACmI,KAAK;MAC1CH,YAAY,EAAEa,wBAAwB,CAACxB,OAAO;IAChD,CAAC,CAAC;EACJ;EAEA,MAAM+B,cAAc,GAAGH,SAAS,GAAGD,cAAc,GAAG,CAAC,GAAGA,cAAc;EACtE,OAAO,IAAI3H,iBAAiB,CAACgG,OAAO,EAAEU,UAAU,EAAEqB,cAAc,EAAEH,SAAS,CAAC;AAC9E;AAEA,MAAMI,oBAAoB,GAAG,IAAI9I,iBAAiB,CAAC,CAAC;AAEpD,SAAS+I,qBAAqBA,CAAChD,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAExD,KAAK,EAAE;EAC7E,IAAIN,CAAC;EACL,MAAM+D,kBAAkB,GACtBD,UAAU,CAACjI,kBAAkB,CAACG,qBAAqB,CAAC;EACtD,MAAMgI,iBAAiB,GAAGF,UAAU,CAACjI,kBAAkB,CAACI,oBAAoB,CAAC;EAC7E,MAAMgI,QAAQ,GAAG3D,KAAK,CAAC2D,QAAQ;EAE/BpJ,iBAAiB,CAACqJ,aAAa,CAACD,QAAQ,EAAEN,oBAAoB,CAAC;EAC/D,MAAMQ,KAAK,GAAG7D,KAAK,CAAC6D,KAAK;EAEzB,MAAMC,IAAI,GAAGT,oBAAoB,CAACS,IAAI;EACtC,MAAMC,GAAG,GAAGV,oBAAoB,CAACU,GAAG;EAEpC,IAAIzD,eAAe,CAAC0D,UAAU,EAAE;IAC9BtE,CAAC,GAAGM,KAAK,CAACC,MAAM;IAChBwD,kBAAkB,CAAC/D,CAAC,EAAEoE,IAAI,CAAC/E,CAAC,EAAE+E,IAAI,CAAC9E,CAAC,EAAE8E,IAAI,CAAC7E,CAAC,EAAE4E,KAAK,CAAC9E,CAAC,CAAC;IACtD2E,iBAAiB,CAAChE,CAAC,EAAEqE,GAAG,CAAChF,CAAC,EAAEgF,GAAG,CAAC/E,CAAC,EAAE+E,GAAG,CAAC9E,CAAC,EAAE4E,KAAK,CAAC7E,CAAC,CAAC;EACpD,CAAC,MAAM;IACLU,CAAC,GAAGM,KAAK,CAACC,MAAM,GAAG,CAAC;IACpBwD,kBAAkB,CAAC/D,CAAC,GAAG,CAAC,EAAEoE,IAAI,CAAC/E,CAAC,EAAE+E,IAAI,CAAC9E,CAAC,EAAE8E,IAAI,CAAC7E,CAAC,EAAE4E,KAAK,CAAC9E,CAAC,CAAC;IAC1D0E,kBAAkB,CAAC/D,CAAC,GAAG,CAAC,EAAEoE,IAAI,CAAC/E,CAAC,EAAE+E,IAAI,CAAC9E,CAAC,EAAE8E,IAAI,CAAC7E,CAAC,EAAE4E,KAAK,CAAC9E,CAAC,CAAC;IAC1D0E,kBAAkB,CAAC/D,CAAC,GAAG,CAAC,EAAEoE,IAAI,CAAC/E,CAAC,EAAE+E,IAAI,CAAC9E,CAAC,EAAE8E,IAAI,CAAC7E,CAAC,EAAE4E,KAAK,CAAC9E,CAAC,CAAC;IAC1D0E,kBAAkB,CAAC/D,CAAC,GAAG,CAAC,EAAEoE,IAAI,CAAC/E,CAAC,EAAE+E,IAAI,CAAC9E,CAAC,EAAE8E,IAAI,CAAC7E,CAAC,EAAE4E,KAAK,CAAC9E,CAAC,CAAC;IAE1D2E,iBAAiB,CAAChE,CAAC,GAAG,CAAC,EAAEqE,GAAG,CAAChF,CAAC,EAAEgF,GAAG,CAAC/E,CAAC,EAAE+E,GAAG,CAAC9E,CAAC,EAAE4E,KAAK,CAAC7E,CAAC,CAAC;IACtD0E,iBAAiB,CAAChE,CAAC,GAAG,CAAC,EAAEqE,GAAG,CAAChF,CAAC,EAAEgF,GAAG,CAAC/E,CAAC,EAAE+E,GAAG,CAAC9E,CAAC,EAAE4E,KAAK,CAAC7E,CAAC,CAAC;IACtD0E,iBAAiB,CAAChE,CAAC,GAAG,CAAC,EAAEqE,GAAG,CAAChF,CAAC,EAAEgF,GAAG,CAAC/E,CAAC,EAAE+E,GAAG,CAAC9E,CAAC,EAAE4E,KAAK,CAAC7E,CAAC,CAAC;IACtD0E,iBAAiB,CAAChE,CAAC,GAAG,CAAC,EAAEqE,GAAG,CAAChF,CAAC,EAAEgF,GAAG,CAAC/E,CAAC,EAAE+E,GAAG,CAAC9E,CAAC,EAAE4E,KAAK,CAAC7E,CAAC,CAAC;EACxD;AACF;AAEA,SAASiF,qBAAqBA,CAAC3D,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAExD,KAAK,EAAE;EAC7E,IAAIN,CAAC;EACL,MAAMwE,MAAM,GAAGV,UAAU,CAACjI,kBAAkB,CAACK,gBAAgB,CAAC;EAC9D,MAAM4C,IAAI,GAAGwB,KAAK,CAACxB,IAAI;EACvB,MAAM2F,UAAU,GAAGnE,KAAK,CAACmE,UAAU;EAEnC,IAAI7D,eAAe,CAAC0D,UAAU,EAAE;IAC9BtE,CAAC,GAAGM,KAAK,CAACC,MAAM;IAChBiE,MAAM,CAACxE,CAAC,EAAElB,IAAI,EAAE2F,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC;EACvC,CAAC,MAAM;IACLzE,CAAC,GAAGM,KAAK,CAACC,MAAM,GAAG,CAAC;IACpBiE,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAElB,IAAI,EAAE2F,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC;IACzCD,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAElB,IAAI,EAAE2F,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC;IACzCD,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAElB,IAAI,EAAE2F,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC;IACzCD,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAElB,IAAI,EAAE2F,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC;EAC3C;AACF;AAEA,SAASC,qBAAqBA,CAAC9D,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAExD,KAAK,EAAE;EAC7E,IAAIN,CAAC;EACL,MAAMwE,MAAM,GAAGV,UAAU,CAACjI,kBAAkB,CAACM,gBAAgB,CAAC;EAC9D,MAAMwI,WAAW,GAAGrE,KAAK,CAACqE,WAAW;EACrC,MAAMC,KAAK,GAAGtE,KAAK,CAACsE,KAAK;EAEzB,IAAIhE,eAAe,CAAC0D,UAAU,EAAE;IAC9BtE,CAAC,GAAGM,KAAK,CAACC,MAAM;IAChBiE,MAAM,CAACxE,CAAC,EAAE2E,WAAW,CAACtF,CAAC,EAAEsF,WAAW,CAACrF,CAAC,EAAEqF,WAAW,CAACpF,CAAC,EAAEqF,KAAK,CAAC;EAC/D,CAAC,MAAM;IACL5E,CAAC,GAAGM,KAAK,CAACC,MAAM,GAAG,CAAC;IACpBiE,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAE2E,WAAW,CAACtF,CAAC,EAAEsF,WAAW,CAACrF,CAAC,EAAEqF,WAAW,CAACpF,CAAC,EAAEqF,KAAK,CAAC;IACjEJ,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAE2E,WAAW,CAACtF,CAAC,EAAEsF,WAAW,CAACrF,CAAC,EAAEqF,WAAW,CAACpF,CAAC,EAAEqF,KAAK,CAAC;IACjEJ,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAE2E,WAAW,CAACtF,CAAC,EAAEsF,WAAW,CAACrF,CAAC,EAAEqF,WAAW,CAACpF,CAAC,EAAEqF,KAAK,CAAC;IACjEJ,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAE2E,WAAW,CAACtF,CAAC,EAAEsF,WAAW,CAACrF,CAAC,EAAEqF,WAAW,CAACpF,CAAC,EAAEqF,KAAK,CAAC;EACnE;AACF;AAEA,SAASC,UAAUA,CAACjE,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAExD,KAAK,EAAE;EAClE,IAAIN,CAAC;EACL,MAAMwE,MAAM,GAAGV,UAAU,CAACjI,kBAAkB,CAACO,KAAK,CAAC;EACnD,MAAMA,KAAK,GAAGkE,KAAK,CAAClE,KAAK;EACzB,MAAM0I,GAAG,GAAG/K,KAAK,CAACgL,WAAW,CAAC3I,KAAK,CAAC0I,GAAG,CAAC;EACxC,MAAME,KAAK,GAAGjL,KAAK,CAACgL,WAAW,CAAC3I,KAAK,CAAC4I,KAAK,CAAC;EAC5C,MAAMC,IAAI,GAAGlL,KAAK,CAACgL,WAAW,CAAC3I,KAAK,CAAC6I,IAAI,CAAC;EAC1C,MAAMC,KAAK,GAAGnL,KAAK,CAACgL,WAAW,CAAC3I,KAAK,CAAC8I,KAAK,CAAC;EAE5C,IAAItE,eAAe,CAAC0D,UAAU,EAAE;IAC9BtE,CAAC,GAAGM,KAAK,CAACC,MAAM;IAChBiE,MAAM,CAACxE,CAAC,EAAE8E,GAAG,EAAEE,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC;EACpC,CAAC,MAAM;IACLlF,CAAC,GAAGM,KAAK,CAACC,MAAM,GAAG,CAAC;IACpBiE,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAE8E,GAAG,EAAEE,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC;IACtCV,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAE8E,GAAG,EAAEE,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC;IACtCV,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAE8E,GAAG,EAAEE,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC;IACtCV,MAAM,CAACxE,CAAC,GAAG,CAAC,EAAE8E,GAAG,EAAEE,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC;EACxC;AACF;AACA,SAASC,UAAUA,CAACvE,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAExD,KAAK,EAAE;EAClEsD,qBAAqB,CAAChD,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAExD,KAAK,CAAC;EACrEiE,qBAAqB,CAAC3D,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAExD,KAAK,CAAC;EACrEoE,qBAAqB,CAAC9D,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAExD,KAAK,CAAC;EACrEuE,UAAU,CAACjE,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAExD,KAAK,CAAC;AAC5D;AAEA,SAAS8E,kBAAkBA,CAACxE,eAAe,EAAEiD,UAAU,EAAEwB,QAAQ,EAAEC,QAAQ,EAAE;EAC3E,MAAMnH,IAAI,GAAGyC,eAAe;EAE5B,MAAM2E,iBAAiB,GAAGpH,IAAI,CAACR,kBAAkB;EACjD,MAAM6H,gBAAgB,GAAGrH,IAAI,CAACP,iBAAiB;EAC/C;EACA,IACE2H,iBAAiB,GAAGC,gBAAgB,GAAG,CAAC,IACxCD,iBAAiB,GAAGC,gBAAgB,KAAK,CAAC,EAC1C;IACA,MAAM,IAAI7K,cAAc,CACtB,uDACF,CAAC;EACH;EACA;;EAEA,MAAMgH,OAAO,GAAGkC,UAAU,CAAClC,OAAO;EAClCxD,IAAI,CAACM,QAAQ,GAAGiD,eAAe,CAACC,OAAO,CAAC;EACxCxD,IAAI,CAACO,QAAQ,GAAGrD,aAAa,CAACoK,SAAS,CAAC;IACtC9D,OAAO,EAAEA,OAAO;IAChB+D,kBAAkB,EAAEL,QAAQ;IAC5BM,oBAAoB,EAAEL,QAAQ;IAC9BzJ,kBAAkB,EAAE;MAClBoI,QAAQ,EAAE;IACZ;EACF,CAAC,CAAC;EAEF,MAAMpG,WAAW,GAAGM,IAAI,CAACN,WAAW;EACpC,MAAMC,WAAW,GAAGK,IAAI,CAACL,WAAW;EAEpCK,IAAI,CAACV,aAAa,GAAG,IAAInC,OAAO,CAAC;IAC/BqG,OAAO,EAAEA,OAAO;IAChBiE,KAAK,EAAGL,iBAAiB,GAAGA,iBAAiB,GAAIC,gBAAgB;IACjEK,MAAM,EAAEN,iBAAiB,GAAGC,gBAAgB;IAC5CM,aAAa,EAAE9K,aAAa,CAACwI,aAAa;IAC1CuC,WAAW,EAAE9K,WAAW,CAAC+K,IAAI;IAC7BC,OAAO,EAAE,IAAI9K,OAAO,CAAC;MACnB+K,KAAK,EAAEzK,WAAW,CAAC0K,MAAM;MACzBC,KAAK,EAAE3K,WAAW,CAAC0K,MAAM;MACzBE,kBAAkB,EAAE7K,yBAAyB,CAAC8K,OAAO;MACrDC,mBAAmB,EAAEhL,0BAA0B,CAAC+K;IAClD,CAAC;EACH,CAAC,CAAC;EAEF,MAAME,cAAc,GAAG,IAAIxM,cAAc,CAAC;IACxCyM,WAAW,EAAEtI,IAAI,CAACM,QAAQ;IAC1BiI,aAAa,EAAEvI,IAAI,CAACO,QAAQ;IAC5BiI,aAAa,EAAExI,IAAI,CAACV,aAAa;IACjCmJ,UAAU,EAAE;MACVtI,wBAAwB,EAAEC,yBAAyB,CAACJ,IAAI,CAAC;MACzDK,aAAa,EAAE,SAAAA,CAAA,EAAY;QACzB,OAAOX,WAAW;MACpB,CAAC;MACDgJ,aAAa,EAAE,SAAAA,CAAA,EAAY;QACzB,OAAO/I,WAAW;MACpB;IACF,CAAC;IACDgJ,QAAQ,EAAE,KAAK;IACfC,KAAK,EAAEnG,eAAe;IACtBoG,WAAW,EAAE,SAAAA,CAAUC,OAAO,EAAE;MAC9B9I,IAAI,CAACD,MAAM,GAAG,IAAI;MAClBC,IAAI,CAACF,QAAQ,GAAG,KAAK;IACvB;EACF,CAAC,CAAC;EAEF4F,UAAU,CAACqD,WAAW,CAAC1G,IAAI,CAACgG,cAAc,CAAC;EAC3CrI,IAAI,CAACF,QAAQ,GAAG,IAAI;AACtB;AAEA,SAASkJ,iBAAiBA,CAACvG,eAAe,EAAEiD,UAAU,EAAE;EACtD,MAAM1F,IAAI,GAAGyC,eAAe;EAC5B,MAAMe,OAAO,GAAGkC,UAAU,CAAClC,OAAO;EAClCxD,IAAI,CAACb,kBAAkB,GAAG,KAAK;EAC/Ba,IAAI,CAACiJ,IAAI,GAAGjJ,IAAI,CAACiJ,IAAI,IAAIjJ,IAAI,CAACiJ,IAAI,CAACC,OAAO,CAAC,CAAC;EAE5C,MAAMtH,MAAM,GAAGa,eAAe,CAAC1D,OAAO;EACtC,MAAMoK,YAAY,GAAGvH,MAAM,CAACJ,MAAM;EAClC,IAAI2H,YAAY,GAAG,CAAC,EAAE;IACpBnJ,IAAI,CAACiJ,IAAI,GAAG/D,SAAS,CAAC1B,OAAO,EAAE2F,YAAY,EAAEnJ,IAAI,CAACmG,UAAU,CAAC;IAC7D,MAAMR,UAAU,GAAG3F,IAAI,CAACiJ,IAAI,CAACG,OAAO;IAEpC,IAAIvH,CAAC;IACL;IACA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsH,YAAY,EAAE,EAAEtH,CAAC,EAAE;MACjC,MAAMM,KAAK,GAAGP,MAAM,CAACC,CAAC,CAAC;MACvBmF,UAAU,CAACvE,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAExD,KAAK,CAAC;IAC5D;;IAEA;IACAnC,IAAI,CAACiJ,IAAI,CAACI,MAAM,CAAC9E,cAAc,CAACf,OAAO,CAAC,CAAC;EAC3C;AACF;AAEA,MAAM8F,kBAAkB,GAAG,EAAE;AAE7B,SAASC,YAAYA,CAAC9G,eAAe,EAAEiD,UAAU,EAAE;EACjD,MAAMlC,OAAO,GAAGkC,UAAU,CAAClC,OAAO;EAClC,MAAMxD,IAAI,GAAGyC,eAAe;EAC5B,MAAMb,MAAM,GAAG5B,IAAI,CAACjB,OAAO;EAC3B,MAAMoK,YAAY,GAAGvH,MAAM,CAACJ,MAAM;EAClC,MAAMgI,cAAc,GAAGxJ,IAAI,CAAChB,eAAe;EAC3C,MAAMyK,oBAAoB,GAAGzJ,IAAI,CAACf,oBAAoB;EAEtD,MAAMyK,UAAU,GAAG1J,IAAI,CAACZ,kBAAkB;EAE1C,MAAMgK,OAAO,GAAGE,kBAAkB;EAClCF,OAAO,CAAC5H,MAAM,GAAG,CAAC;EAElB,IAAIkI,UAAU,CAACrL,cAAc,CAAC,IAAIqL,UAAU,CAACpL,WAAW,CAAC,EAAE;IACzD8K,OAAO,CAAC/G,IAAI,CAACoD,qBAAqB,CAAC;EACrC;EAEA,IAAIiE,UAAU,CAACtL,UAAU,CAAC,IAAIsL,UAAU,CAACjL,gBAAgB,CAAC,EAAE;IAC1D2K,OAAO,CAAC/G,IAAI,CAAC+D,qBAAqB,CAAC;EACrC;EAEA,IAAIsD,UAAU,CAACnL,kBAAkB,CAAC,IAAImL,UAAU,CAAClL,WAAW,CAAC,EAAE;IAC7D4K,OAAO,CAAC/G,IAAI,CAACkE,qBAAqB,CAAC;EACrC;EAEA,IAAImD,UAAU,CAAC/K,WAAW,CAAC,EAAE;IAC3ByK,OAAO,CAAC/G,IAAI,CAACqE,UAAU,CAAC;EAC1B;EAEA,MAAMiD,UAAU,GAAGP,OAAO,CAAC5H,MAAM;EACjC,MAAMmE,UAAU,GAAG3F,IAAI,CAACiJ,IAAI,CAACG,OAAO;EAEpC,IAAIvH,CAAC,EAAE+H,CAAC,EAAEC,CAAC;EACX,IAAIJ,oBAAoB,GAAGN,YAAY,GAAG,GAAG,EAAE;IAC7C;IACA;;IAEA,KAAKtH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4H,oBAAoB,EAAE,EAAE5H,CAAC,EAAE;MACzC+H,CAAC,GAAGJ,cAAc,CAAC3H,CAAC,CAAC;MACrB+H,CAAC,CAAC9G,MAAM,GAAG,KAAK;MAEhB,KAAK+G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,UAAU,EAAE,EAAEE,CAAC,EAAE;QAC/BT,OAAO,CAACS,CAAC,CAAC,CAACpH,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAEiE,CAAC,CAAC;MACxD;IACF;IAEA5J,IAAI,CAACiJ,IAAI,CAACI,MAAM,CAAC9E,cAAc,CAACf,OAAO,CAAC,CAAC;EAC3C,CAAC,MAAM;IACL,KAAK3B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4H,oBAAoB,EAAE,EAAE5H,CAAC,EAAE;MACzC+H,CAAC,GAAGJ,cAAc,CAAC3H,CAAC,CAAC;MACrB+H,CAAC,CAAC9G,MAAM,GAAG,KAAK;MAEhB,KAAK+G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,UAAU,EAAE,EAAEE,CAAC,EAAE;QAC/BT,OAAO,CAACS,CAAC,CAAC,CAACpH,eAAe,EAAEiD,UAAU,EAAEC,UAAU,EAAEiE,CAAC,CAAC;MACxD;MAEA,IAAI5J,IAAI,CAACmG,UAAU,EAAE;QACnBnG,IAAI,CAACiJ,IAAI,CAACa,SAAS,CAACF,CAAC,CAACxH,MAAM,EAAE,CAAC,CAAC;MAClC,CAAC,MAAM;QACLpC,IAAI,CAACiJ,IAAI,CAACa,SAAS,CAACF,CAAC,CAACxH,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;MACtC;IACF;IACApC,IAAI,CAACiJ,IAAI,CAACc,aAAa,CAAC,CAAC;EAC3B;EAEA/J,IAAI,CAACf,oBAAoB,GAAG,CAAC;AAC/B;AAEA,SAAS+K,mBAAmBA,CAACvH,eAAe,EAAEiD,UAAU,EAAEwB,QAAQ,EAAEC,QAAQ,EAAE;EAC5E,MAAM3D,OAAO,GAAGkC,UAAU,CAAClC,OAAO;EAClC,MAAMxD,IAAI,GAAGyC,eAAe;EAC5B,MAAMwH,EAAE,GAAG,IAAIhN,YAAY,CAAC;IAC1BiN,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE,CAACjD,QAAQ;EACpB,CAAC,CAAC;EAEF,IAAIlH,IAAI,CAACmG,UAAU,EAAE;IACnB8D,EAAE,CAACC,OAAO,CAAC7H,IAAI,CAAC,WAAW,CAAC;EAC9B;EAEA,MAAM+H,EAAE,GAAG,IAAInN,YAAY,CAAC;IAC1BiN,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE,CAAChD,QAAQ;EACpB,CAAC,CAAC;EAEF,IAAInH,IAAI,CAACa,eAAe,EAAE;IACxBuJ,EAAE,CAACF,OAAO,CAAC7H,IAAI,CAAC,kBAAkB,CAAC;EACrC;EAEA,IAAIrC,IAAI,CAACe,eAAe,EAAE;IACxBqJ,EAAE,CAACF,OAAO,CAAC7H,IAAI,CAAC,kBAAkB,CAAC;EACrC;EAEArC,IAAI,CAACS,GAAG,GAAGvD,aAAa,CAACmN,YAAY,CAAC;IACpC7G,OAAO,EAAEA,OAAO;IAChB+E,aAAa,EAAEvI,IAAI,CAACS,GAAG;IACvB8G,kBAAkB,EAAE0C,EAAE;IACtBzC,oBAAoB,EAAE4C,EAAE;IACxB1M,kBAAkB,EAAEA;EACtB,CAAC,CAAC;EAEFsC,IAAI,CAACU,GAAG,GAAG3D,WAAW,CAACuK,SAAS,CAAC;IAC/BgD,SAAS,EAAE;MACTC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE/M,cAAc,CAACgN;IACvB,CAAC;IACDC,SAAS,EAAE,KAAK;IAChBC,QAAQ,EAAEpP,aAAa,CAACqP;EAC1B,CAAC,CAAC;EAEF5K,IAAI,CAACQ,UAAU,GAAG,IAAI;EACtBR,IAAI,CAACc,wBAAwB,GAAGd,IAAI,CAACa,eAAe;EACpDb,IAAI,CAACgB,wBAAwB,GAAGhB,IAAI,CAACe,eAAe;AACtD;AAEA,SAAS8J,kBAAkBA,CAACpI,eAAe,EAAEiD,UAAU,EAAE;EACvD,MAAM1F,IAAI,GAAGyC,eAAe;EAC5B,MAAMqI,IAAI,GAAGpF,UAAU,CAACqF,MAAM;EAC9B,MAAMC,QAAQ,GAAGhL,IAAI,CAACC,SAAS;EAC/B,MAAM8I,WAAW,GAAGrD,UAAU,CAACqD,WAAW;EAC1C,IAAI+B,IAAI,CAACG,MAAM,EAAE;IACf,MAAMC,SAAS,GAAGlL,IAAI,CAACY,cAAc;IAErC,MAAMuK,EAAE,GAAGnL,IAAI,CAACiJ,IAAI,CAACkC,EAAE;IACvB,MAAMC,QAAQ,GAAGD,EAAE,CAAC3J,MAAM;IAC1B0J,SAAS,CAAC1J,MAAM,GAAG4J,QAAQ;IAC3B,KAAK,IAAIvJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuJ,QAAQ,EAAEvJ,CAAC,EAAE,EAAE;MACjC,IAAIwJ,OAAO,GAAGH,SAAS,CAACrJ,CAAC,CAAC;MAC1B,IAAI,CAACvF,OAAO,CAAC+O,OAAO,CAAC,EAAE;QACrBA,OAAO,GAAGH,SAAS,CAACrJ,CAAC,CAAC,GAAG,IAAIpF,WAAW,CAAC,CAAC;MAC5C;MACA4O,OAAO,CAACP,IAAI,GAAGlO,IAAI,CAAC0O,WAAW;MAC/BD,OAAO,CAACzC,KAAK,GAAGnG,eAAe;MAC/B4I,OAAO,CAAC5C,UAAU,GAAGuC,QAAQ;MAC7BK,OAAO,CAACE,KAAK,GAAGJ,EAAE,CAACtJ,CAAC,CAAC,CAAC2J,YAAY;MAClCH,OAAO,CAAC/C,WAAW,GAAG6C,EAAE,CAACtJ,CAAC,CAAC,CAACsJ,EAAE;MAC9BE,OAAO,CAAC9C,aAAa,GAAGvI,IAAI,CAACS,GAAG;MAChC4K,OAAO,CAACI,WAAW,GAAGzL,IAAI,CAACU,GAAG;MAC9B,IAAIV,IAAI,CAACmG,UAAU,EAAE;QACnBkF,OAAO,CAACE,KAAK,GAAG,CAAC;QACjBF,OAAO,CAACK,aAAa,GAAG1L,IAAI,CAACjB,OAAO,CAACyC,MAAM;MAC7C;MAEAuH,WAAW,CAAC1G,IAAI,CAACgJ,OAAO,CAAC;IAC3B;EACF;AACF;;AAEA;AACA;AACA;AACAzM,eAAe,CAAC2C,SAAS,CAACoK,MAAM,GAAG,UAAUjG,UAAU,EAAE;EACvDhE,YAAY,CAAC,IAAI,CAAC;EAClB,IAAI,CAAC,IAAI,CAACf,IAAI,EAAE;IACd;EACF;EAEA,MAAMiL,SAAS,GAAG,IAAI,CAAC/K,eAAe,IAAI,IAAI,CAACE,eAAe;EAC9D,IAAI,CAAChB,MAAM,GAAG6L,SAAS,GAAG,IAAI,GAAGtP,OAAO,CAAC,IAAI,CAACgD,aAAa,CAAC;EAE5D,IAAI,CAAC,IAAI,CAACS,MAAM,IAAI,CAAC,IAAI,CAACD,QAAQ,IAAI,CAAC8L,SAAS,EAAE;IAChD3E,kBAAkB,CAAC,IAAI,EAAEvB,UAAU,EAAExJ,YAAY,EAAED,YAAY,CAAC;EAClE;EAEA,IAAI,CAACkK,UAAU,GAAGT,UAAU,CAAClC,OAAO,CAACqI,eAAe;EACpDnO,kBAAkB,GAAG,IAAI,CAACyI,UAAU,GAChCjI,2BAA2B,GAC3BN,yBAAyB;EAC7B2G,cAAc,GAAG,IAAI,CAAC4B,UAAU,GAC5BrB,uBAAuB,GACvBN,qBAAqB;EAEzB,MAAM5C,MAAM,GAAG,IAAI,CAAC7C,OAAO;EAC3B,MAAMoK,YAAY,GAAGvH,MAAM,CAACJ,MAAM;EAClC,MAAMgI,cAAc,GAAG,IAAI,CAACxK,eAAe;EAC3C,MAAMyK,oBAAoB,GAAG,IAAI,CAACxK,oBAAoB;EAEtD,IAAI,IAAI,CAACE,kBAAkB,EAAE;IAC3B6J,iBAAiB,CAAC,IAAI,EAAEtD,UAAU,CAAC;EACrC,CAAC,MAAM,IAAI+D,oBAAoB,GAAG,CAAC,EAAE;IACnC;IACAF,YAAY,CAAC,IAAI,EAAE7D,UAAU,CAAC;EAChC;;EAEA;EACA;EACA;EACA,IAAI+D,oBAAoB,GAAGN,YAAY,GAAG,GAAG,EAAE;IAC7CK,cAAc,CAAChI,MAAM,GAAG2H,YAAY;EACtC;EAEA,IACE,CAAC7M,OAAO,CAAC,IAAI,CAAC2M,IAAI,CAAC,IACnB,CAAC3M,OAAO,CAAC,IAAI,CAAC2M,IAAI,CAACkC,EAAE,CAAC,IACtB,CAAC,IAAI,CAACpL,MAAM,GAAG,CAAC6L,SAAS,EACzB;IACA;EACF;EAEA,IACE,CAAC,IAAI,CAACpL,UAAU,IAChB,IAAI,CAACK,eAAe,KAAK,IAAI,CAACC,wBAAwB,IACtD,IAAI,CAACC,eAAe,KAAK,IAAI,CAACC,wBAAwB,EACtD;IACAgJ,mBAAmB,CAAC,IAAI,EAAEtE,UAAU,EAAE1J,iBAAiB,EAAED,iBAAiB,CAAC;EAC7E;EAEA8O,kBAAkB,CAAC,IAAI,EAAEnF,UAAU,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9G,eAAe,CAAC2C,SAAS,CAACuK,WAAW,GAAG,YAAY;EAClD,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlN,eAAe,CAAC2C,SAAS,CAAC2H,OAAO,GAAG,YAAY;EAC9C,IAAI,CAAC5J,aAAa,GAAG,IAAI,CAACA,aAAa,IAAI,IAAI,CAACA,aAAa,CAAC4J,OAAO,CAAC,CAAC;EACvE,IAAI,CAACzI,GAAG,GAAG,IAAI,CAACA,GAAG,IAAI,IAAI,CAACA,GAAG,CAACyI,OAAO,CAAC,CAAC;EACzC,IAAI,CAACD,IAAI,GAAG,IAAI,CAACA,IAAI,IAAI,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC,CAAC;EAE5CvH,aAAa,CAAC,IAAI,CAAC5C,OAAO,CAAC;EAE3B,OAAOxC,aAAa,CAAC,IAAI,CAAC;AAC5B,CAAC;AAED,eAAeqC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}