{"ast":null,"code":"import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport OrderedGroundPrimitiveCollection from \"../Scene/OrderedGroundPrimitiveCollection.js\";\nimport PrimitiveCollection from \"../Scene/PrimitiveCollection.js\";\nimport BillboardVisualizer from \"./BillboardVisualizer.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport CustomDataSource from \"./CustomDataSource.js\";\nimport GeometryVisualizer from \"./GeometryVisualizer.js\";\nimport LabelVisualizer from \"./LabelVisualizer.js\";\nimport ModelVisualizer from \"./ModelVisualizer.js\";\nimport Cesium3DTilesetVisualizer from \"./Cesium3DTilesetVisualizer.js\";\nimport PathVisualizer from \"./PathVisualizer.js\";\nimport PointVisualizer from \"./PointVisualizer.js\";\nimport PolylineVisualizer from \"./PolylineVisualizer.js\";\n\n/**\n * Visualizes a collection of {@link DataSource} instances.\n * @alias DataSourceDisplay\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Scene} options.scene The scene in which to display the data.\n * @param {DataSourceCollection} options.dataSourceCollection The data sources to display.\n * @param {DataSourceDisplay.VisualizersCallback} [options.visualizersCallback=DataSourceDisplay.defaultVisualizersCallback]\n *        A function which creates an array of visualizers used for visualization.\n *        If undefined, all standard visualizers are used.\n */\nfunction DataSourceDisplay(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.scene\", options.scene);\n  Check.typeOf.object(\"options.dataSourceCollection\", options.dataSourceCollection);\n  //>>includeEnd('debug');\n\n  GroundPrimitive.initializeTerrainHeights();\n  GroundPolylinePrimitive.initializeTerrainHeights();\n  const scene = options.scene;\n  const dataSourceCollection = options.dataSourceCollection;\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(dataSourceCollection.dataSourceAdded, this._onDataSourceAdded, this);\n  this._eventHelper.add(dataSourceCollection.dataSourceRemoved, this._onDataSourceRemoved, this);\n  this._eventHelper.add(dataSourceCollection.dataSourceMoved, this._onDataSourceMoved, this);\n  this._eventHelper.add(scene.postRender, this._postRender, this);\n  this._dataSourceCollection = dataSourceCollection;\n  this._scene = scene;\n  this._visualizersCallback = defaultValue(options.visualizersCallback, DataSourceDisplay.defaultVisualizersCallback);\n  let primitivesAdded = false;\n  const primitives = new PrimitiveCollection();\n  const groundPrimitives = new PrimitiveCollection();\n  if (dataSourceCollection.length > 0) {\n    scene.primitives.add(primitives);\n    scene.groundPrimitives.add(groundPrimitives);\n    primitivesAdded = true;\n  }\n  this._primitives = primitives;\n  this._groundPrimitives = groundPrimitives;\n  for (let i = 0, len = dataSourceCollection.length; i < len; i++) {\n    this._onDataSourceAdded(dataSourceCollection, dataSourceCollection.get(i));\n  }\n  const defaultDataSource = new CustomDataSource();\n  this._onDataSourceAdded(undefined, defaultDataSource);\n  this._defaultDataSource = defaultDataSource;\n  let removeDefaultDataSourceListener;\n  let removeDataSourceCollectionListener;\n  if (!primitivesAdded) {\n    const that = this;\n    const addPrimitives = function () {\n      scene.primitives.add(primitives);\n      scene.groundPrimitives.add(groundPrimitives);\n      removeDefaultDataSourceListener();\n      removeDataSourceCollectionListener();\n      that._removeDefaultDataSourceListener = undefined;\n      that._removeDataSourceCollectionListener = undefined;\n    };\n    removeDefaultDataSourceListener = defaultDataSource.entities.collectionChanged.addEventListener(addPrimitives);\n    removeDataSourceCollectionListener = dataSourceCollection.dataSourceAdded.addEventListener(addPrimitives);\n  }\n  this._removeDefaultDataSourceListener = removeDefaultDataSourceListener;\n  this._removeDataSourceCollectionListener = removeDataSourceCollectionListener;\n  this._ready = false;\n}\nconst ExtraVisualizers = [];\n/**\n * Add the provided Visualizer to the default visualizers callback if not already included\n * @private\n * @param {Visualizer} visualizer Visualizer class to add\n */\nDataSourceDisplay.registerVisualizer = function (visualizer) {\n  if (!ExtraVisualizers.includes(visualizer)) {\n    ExtraVisualizers.push(visualizer);\n  }\n};\n\n/**\n * Remove the provided Visualizer from the default visualizers callback if it's already included\n * @private\n * @param {Visualizer} visualizer Visualizer class to remove\n */\nDataSourceDisplay.unregisterVisualizer = function (visualizer) {\n  if (ExtraVisualizers.includes(visualizer)) {\n    const index = ExtraVisualizers.indexOf(visualizer);\n    ExtraVisualizers.splice(index, 1);\n  }\n};\n\n/**\n * Gets or sets the default function which creates an array of visualizers used for visualization.\n * By default, this function uses all standard visualizers.\n *\n * @type {DataSourceDisplay.VisualizersCallback}\n */\nDataSourceDisplay.defaultVisualizersCallback = function (scene, entityCluster, dataSource) {\n  const entities = dataSource.entities;\n  return [new BillboardVisualizer(entityCluster, entities), new GeometryVisualizer(scene, entities, dataSource._primitives, dataSource._groundPrimitives), new LabelVisualizer(entityCluster, entities), new ModelVisualizer(scene, entities), new Cesium3DTilesetVisualizer(scene, entities), new PointVisualizer(entityCluster, entities), new PathVisualizer(scene, entities), new PolylineVisualizer(scene, entities, dataSource._primitives, dataSource._groundPrimitives), ...ExtraVisualizers.map(VisualizerClass => new VisualizerClass(scene, entities))];\n};\nObject.defineProperties(DataSourceDisplay.prototype, {\n  /**\n   * Gets the scene associated with this display.\n   * @memberof DataSourceDisplay.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    }\n  },\n  /**\n   * Gets the collection of data sources to display.\n   * @memberof DataSourceDisplay.prototype\n   * @type {DataSourceCollection}\n   */\n  dataSources: {\n    get: function () {\n      return this._dataSourceCollection;\n    }\n  },\n  /**\n   * Gets the default data source instance which can be used to\n   * manually create and visualize entities not tied to\n   * a specific data source. This instance is always available\n   * and does not appear in the list dataSources collection.\n   * @memberof DataSourceDisplay.prototype\n   * @type {CustomDataSource}\n   */\n  defaultDataSource: {\n    get: function () {\n      return this._defaultDataSource;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not all entities in the data source are ready\n   * @memberof DataSourceDisplay.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    }\n  }\n});\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see DataSourceDisplay#destroy\n */\nDataSourceDisplay.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * dataSourceDisplay = dataSourceDisplay.destroy();\n *\n * @see DataSourceDisplay#isDestroyed\n */\nDataSourceDisplay.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n  const dataSourceCollection = this._dataSourceCollection;\n  for (let i = 0, length = dataSourceCollection.length; i < length; ++i) {\n    this._onDataSourceRemoved(this._dataSourceCollection, dataSourceCollection.get(i));\n  }\n  this._onDataSourceRemoved(undefined, this._defaultDataSource);\n  if (defined(this._removeDefaultDataSourceListener)) {\n    this._removeDefaultDataSourceListener();\n    this._removeDataSourceCollectionListener();\n  } else {\n    this._scene.primitives.remove(this._primitives);\n    this._scene.groundPrimitives.remove(this._groundPrimitives);\n  }\n  return destroyObject(this);\n};\n\n/**\n * Updates the display to the provided time.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {boolean} True if all data sources are ready to be displayed, false otherwise.\n */\nDataSourceDisplay.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  if (!ApproximateTerrainHeights.initialized) {\n    this._ready = false;\n    return false;\n  }\n  let result = true;\n  let i;\n  let x;\n  let visualizers;\n  let vLength;\n  const dataSources = this._dataSourceCollection;\n  const length = dataSources.length;\n  for (i = 0; i < length; i++) {\n    const dataSource = dataSources.get(i);\n    if (defined(dataSource.update)) {\n      result = dataSource.update(time) && result;\n    }\n    visualizers = dataSource._visualizers;\n    vLength = visualizers.length;\n    for (x = 0; x < vLength; x++) {\n      result = visualizers[x].update(time) && result;\n    }\n  }\n  visualizers = this._defaultDataSource._visualizers;\n  vLength = visualizers.length;\n  for (x = 0; x < vLength; x++) {\n    result = visualizers[x].update(time) && result;\n  }\n\n  // Request a rendering of the scene when the data source\n  // becomes 'ready' for the first time\n  if (!this._ready && result) {\n    this._scene.requestRender();\n  }\n  this._ready = result;\n  return result;\n};\nDataSourceDisplay.prototype._postRender = function () {\n  // Adds credits for all datasources\n  const frameState = this._scene.frameState;\n  const dataSources = this._dataSourceCollection;\n  const length = dataSources.length;\n  for (let i = 0; i < length; i++) {\n    const dataSource = dataSources.get(i);\n    const credit = dataSource.credit;\n    if (defined(credit)) {\n      frameState.creditDisplay.addCreditToNextFrame(credit);\n    }\n\n    // Credits from the resource that the user can't remove\n    const credits = dataSource._resourceCredits;\n    if (defined(credits)) {\n      const creditCount = credits.length;\n      for (let c = 0; c < creditCount; c++) {\n        frameState.creditDisplay.addCreditToNextFrame(credits[c]);\n      }\n    }\n  }\n};\nconst getBoundingSphereArrayScratch = [];\nconst getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {boolean} allowPartial If true, pending bounding spheres are ignored and an answer will be returned from the currently available data.\n *                               If false, the the function will halt and return pending if any of the bounding spheres are pending.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nDataSourceDisplay.prototype.getBoundingSphere = function (entity, allowPartial, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"entity\", entity);\n  Check.typeOf.bool(\"allowPartial\", allowPartial);\n  Check.defined(\"result\", result);\n  //>>includeEnd('debug');\n\n  if (!this._ready && !allowPartial) {\n    return BoundingSphereState.PENDING;\n  }\n  let i;\n  let length;\n  let dataSource = this._defaultDataSource;\n  if (!dataSource.entities.contains(entity)) {\n    dataSource = undefined;\n    const dataSources = this._dataSourceCollection;\n    length = dataSources.length;\n    for (i = 0; i < length; i++) {\n      const d = dataSources.get(i);\n      if (d.entities.contains(entity)) {\n        dataSource = d;\n        break;\n      }\n    }\n  }\n  if (!defined(dataSource)) {\n    return BoundingSphereState.FAILED;\n  }\n  const boundingSpheres = getBoundingSphereArrayScratch;\n  const tmp = getBoundingSphereBoundingSphereScratch;\n  let count = 0;\n  let state = BoundingSphereState.DONE;\n  const visualizers = dataSource._visualizers;\n  const visualizersLength = visualizers.length;\n  for (i = 0; i < visualizersLength; i++) {\n    const visualizer = visualizers[i];\n    if (defined(visualizer.getBoundingSphere)) {\n      state = visualizers[i].getBoundingSphere(entity, tmp);\n      if (!allowPartial && state === BoundingSphereState.PENDING) {\n        return BoundingSphereState.PENDING;\n      } else if (state === BoundingSphereState.DONE) {\n        boundingSpheres[count] = BoundingSphere.clone(tmp, boundingSpheres[count]);\n        count++;\n      }\n    }\n  }\n  if (count === 0) {\n    return BoundingSphereState.FAILED;\n  }\n  boundingSpheres.length = count;\n  BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n  return BoundingSphereState.DONE;\n};\nDataSourceDisplay.prototype._onDataSourceAdded = function (dataSourceCollection, dataSource) {\n  const scene = this._scene;\n  const displayPrimitives = this._primitives;\n  const displayGroundPrimitives = this._groundPrimitives;\n  const primitives = displayPrimitives.add(new PrimitiveCollection());\n  const groundPrimitives = displayGroundPrimitives.add(new OrderedGroundPrimitiveCollection());\n  dataSource._primitives = primitives;\n  dataSource._groundPrimitives = groundPrimitives;\n  const entityCluster = dataSource.clustering;\n  entityCluster._initialize(scene);\n  primitives.add(entityCluster);\n  dataSource._visualizers = this._visualizersCallback(scene, entityCluster, dataSource);\n};\nDataSourceDisplay.prototype._onDataSourceRemoved = function (dataSourceCollection, dataSource) {\n  const displayPrimitives = this._primitives;\n  const displayGroundPrimitives = this._groundPrimitives;\n  const primitives = dataSource._primitives;\n  const groundPrimitives = dataSource._groundPrimitives;\n  const entityCluster = dataSource.clustering;\n  primitives.remove(entityCluster);\n  const visualizers = dataSource._visualizers;\n  const length = visualizers.length;\n  for (let i = 0; i < length; i++) {\n    visualizers[i].destroy();\n  }\n  displayPrimitives.remove(primitives);\n  displayGroundPrimitives.remove(groundPrimitives);\n  dataSource._visualizers = undefined;\n};\nDataSourceDisplay.prototype._onDataSourceMoved = function (dataSource, newIndex, oldIndex) {\n  const displayPrimitives = this._primitives;\n  const displayGroundPrimitives = this._groundPrimitives;\n  const primitives = dataSource._primitives;\n  const groundPrimitives = dataSource._groundPrimitives;\n  if (newIndex === oldIndex + 1) {\n    displayPrimitives.raise(primitives);\n    displayGroundPrimitives.raise(groundPrimitives);\n  } else if (newIndex === oldIndex - 1) {\n    displayPrimitives.lower(primitives);\n    displayGroundPrimitives.lower(groundPrimitives);\n  } else if (newIndex === 0) {\n    displayPrimitives.lowerToBottom(primitives);\n    displayGroundPrimitives.lowerToBottom(groundPrimitives);\n    displayPrimitives.raise(primitives); // keep defaultDataSource primitives at index 0 since it's not in the collection\n    displayGroundPrimitives.raise(groundPrimitives);\n  } else {\n    displayPrimitives.raiseToTop(primitives);\n    displayGroundPrimitives.raiseToTop(groundPrimitives);\n  }\n};\n\n/**\n * A function which creates an array of visualizers used for visualization.\n * @callback DataSourceDisplay.VisualizersCallback\n *\n * @param {Scene} scene The scene to create visualizers for.\n * @param {EntityCluster} entityCluster The entity cluster to create visualizers for.\n * @param {DataSource} dataSource The data source to create visualizers for.\n * @returns {Visualizer[]} An array of visualizers used for visualization.\n *\n * @example\n * function createVisualizers(scene, entityCluster, dataSource) {\n *     return [new Cesium.BillboardVisualizer(entityCluster, dataSource.entities)];\n * }\n */\nexport default DataSourceDisplay;","map":{"version":3,"names":["ApproximateTerrainHeights","BoundingSphere","Check","defaultValue","defined","destroyObject","EventHelper","GroundPolylinePrimitive","GroundPrimitive","OrderedGroundPrimitiveCollection","PrimitiveCollection","BillboardVisualizer","BoundingSphereState","CustomDataSource","GeometryVisualizer","LabelVisualizer","ModelVisualizer","Cesium3DTilesetVisualizer","PathVisualizer","PointVisualizer","PolylineVisualizer","DataSourceDisplay","options","typeOf","object","scene","dataSourceCollection","initializeTerrainHeights","_eventHelper","add","dataSourceAdded","_onDataSourceAdded","dataSourceRemoved","_onDataSourceRemoved","dataSourceMoved","_onDataSourceMoved","postRender","_postRender","_dataSourceCollection","_scene","_visualizersCallback","visualizersCallback","defaultVisualizersCallback","primitivesAdded","primitives","groundPrimitives","length","_primitives","_groundPrimitives","i","len","get","defaultDataSource","undefined","_defaultDataSource","removeDefaultDataSourceListener","removeDataSourceCollectionListener","that","addPrimitives","_removeDefaultDataSourceListener","_removeDataSourceCollectionListener","entities","collectionChanged","addEventListener","_ready","ExtraVisualizers","registerVisualizer","visualizer","includes","push","unregisterVisualizer","index","indexOf","splice","entityCluster","dataSource","map","VisualizerClass","Object","defineProperties","prototype","dataSources","ready","isDestroyed","destroy","removeAll","remove","update","time","initialized","result","x","visualizers","vLength","_visualizers","requestRender","frameState","credit","creditDisplay","addCreditToNextFrame","credits","_resourceCredits","creditCount","c","getBoundingSphereArrayScratch","getBoundingSphereBoundingSphereScratch","getBoundingSphere","entity","allowPartial","bool","PENDING","contains","d","FAILED","boundingSpheres","tmp","count","state","DONE","visualizersLength","clone","fromBoundingSpheres","displayPrimitives","displayGroundPrimitives","clustering","_initialize","newIndex","oldIndex","raise","lower","lowerToBottom","raiseToTop"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/DataSourceDisplay.js"],"sourcesContent":["import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport OrderedGroundPrimitiveCollection from \"../Scene/OrderedGroundPrimitiveCollection.js\";\nimport PrimitiveCollection from \"../Scene/PrimitiveCollection.js\";\nimport BillboardVisualizer from \"./BillboardVisualizer.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport CustomDataSource from \"./CustomDataSource.js\";\nimport GeometryVisualizer from \"./GeometryVisualizer.js\";\nimport LabelVisualizer from \"./LabelVisualizer.js\";\nimport ModelVisualizer from \"./ModelVisualizer.js\";\nimport Cesium3DTilesetVisualizer from \"./Cesium3DTilesetVisualizer.js\";\nimport PathVisualizer from \"./PathVisualizer.js\";\nimport PointVisualizer from \"./PointVisualizer.js\";\nimport PolylineVisualizer from \"./PolylineVisualizer.js\";\n\n/**\n * Visualizes a collection of {@link DataSource} instances.\n * @alias DataSourceDisplay\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Scene} options.scene The scene in which to display the data.\n * @param {DataSourceCollection} options.dataSourceCollection The data sources to display.\n * @param {DataSourceDisplay.VisualizersCallback} [options.visualizersCallback=DataSourceDisplay.defaultVisualizersCallback]\n *        A function which creates an array of visualizers used for visualization.\n *        If undefined, all standard visualizers are used.\n */\nfunction DataSourceDisplay(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.scene\", options.scene);\n  Check.typeOf.object(\n    \"options.dataSourceCollection\",\n    options.dataSourceCollection,\n  );\n  //>>includeEnd('debug');\n\n  GroundPrimitive.initializeTerrainHeights();\n  GroundPolylinePrimitive.initializeTerrainHeights();\n\n  const scene = options.scene;\n  const dataSourceCollection = options.dataSourceCollection;\n\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(\n    dataSourceCollection.dataSourceAdded,\n    this._onDataSourceAdded,\n    this,\n  );\n  this._eventHelper.add(\n    dataSourceCollection.dataSourceRemoved,\n    this._onDataSourceRemoved,\n    this,\n  );\n  this._eventHelper.add(\n    dataSourceCollection.dataSourceMoved,\n    this._onDataSourceMoved,\n    this,\n  );\n  this._eventHelper.add(scene.postRender, this._postRender, this);\n\n  this._dataSourceCollection = dataSourceCollection;\n  this._scene = scene;\n  this._visualizersCallback = defaultValue(\n    options.visualizersCallback,\n    DataSourceDisplay.defaultVisualizersCallback,\n  );\n\n  let primitivesAdded = false;\n  const primitives = new PrimitiveCollection();\n  const groundPrimitives = new PrimitiveCollection();\n\n  if (dataSourceCollection.length > 0) {\n    scene.primitives.add(primitives);\n    scene.groundPrimitives.add(groundPrimitives);\n    primitivesAdded = true;\n  }\n\n  this._primitives = primitives;\n  this._groundPrimitives = groundPrimitives;\n\n  for (let i = 0, len = dataSourceCollection.length; i < len; i++) {\n    this._onDataSourceAdded(dataSourceCollection, dataSourceCollection.get(i));\n  }\n\n  const defaultDataSource = new CustomDataSource();\n  this._onDataSourceAdded(undefined, defaultDataSource);\n  this._defaultDataSource = defaultDataSource;\n\n  let removeDefaultDataSourceListener;\n  let removeDataSourceCollectionListener;\n  if (!primitivesAdded) {\n    const that = this;\n    const addPrimitives = function () {\n      scene.primitives.add(primitives);\n      scene.groundPrimitives.add(groundPrimitives);\n      removeDefaultDataSourceListener();\n      removeDataSourceCollectionListener();\n      that._removeDefaultDataSourceListener = undefined;\n      that._removeDataSourceCollectionListener = undefined;\n    };\n    removeDefaultDataSourceListener =\n      defaultDataSource.entities.collectionChanged.addEventListener(\n        addPrimitives,\n      );\n    removeDataSourceCollectionListener =\n      dataSourceCollection.dataSourceAdded.addEventListener(addPrimitives);\n  }\n\n  this._removeDefaultDataSourceListener = removeDefaultDataSourceListener;\n  this._removeDataSourceCollectionListener = removeDataSourceCollectionListener;\n\n  this._ready = false;\n}\n\nconst ExtraVisualizers = [];\n/**\n * Add the provided Visualizer to the default visualizers callback if not already included\n * @private\n * @param {Visualizer} visualizer Visualizer class to add\n */\nDataSourceDisplay.registerVisualizer = function (visualizer) {\n  if (!ExtraVisualizers.includes(visualizer)) {\n    ExtraVisualizers.push(visualizer);\n  }\n};\n\n/**\n * Remove the provided Visualizer from the default visualizers callback if it's already included\n * @private\n * @param {Visualizer} visualizer Visualizer class to remove\n */\nDataSourceDisplay.unregisterVisualizer = function (visualizer) {\n  if (ExtraVisualizers.includes(visualizer)) {\n    const index = ExtraVisualizers.indexOf(visualizer);\n    ExtraVisualizers.splice(index, 1);\n  }\n};\n\n/**\n * Gets or sets the default function which creates an array of visualizers used for visualization.\n * By default, this function uses all standard visualizers.\n *\n * @type {DataSourceDisplay.VisualizersCallback}\n */\nDataSourceDisplay.defaultVisualizersCallback = function (\n  scene,\n  entityCluster,\n  dataSource,\n) {\n  const entities = dataSource.entities;\n  return [\n    new BillboardVisualizer(entityCluster, entities),\n    new GeometryVisualizer(\n      scene,\n      entities,\n      dataSource._primitives,\n      dataSource._groundPrimitives,\n    ),\n    new LabelVisualizer(entityCluster, entities),\n    new ModelVisualizer(scene, entities),\n    new Cesium3DTilesetVisualizer(scene, entities),\n    new PointVisualizer(entityCluster, entities),\n    new PathVisualizer(scene, entities),\n    new PolylineVisualizer(\n      scene,\n      entities,\n      dataSource._primitives,\n      dataSource._groundPrimitives,\n    ),\n    ...ExtraVisualizers.map(\n      (VisualizerClass) => new VisualizerClass(scene, entities),\n    ),\n  ];\n};\n\nObject.defineProperties(DataSourceDisplay.prototype, {\n  /**\n   * Gets the scene associated with this display.\n   * @memberof DataSourceDisplay.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n  /**\n   * Gets the collection of data sources to display.\n   * @memberof DataSourceDisplay.prototype\n   * @type {DataSourceCollection}\n   */\n  dataSources: {\n    get: function () {\n      return this._dataSourceCollection;\n    },\n  },\n  /**\n   * Gets the default data source instance which can be used to\n   * manually create and visualize entities not tied to\n   * a specific data source. This instance is always available\n   * and does not appear in the list dataSources collection.\n   * @memberof DataSourceDisplay.prototype\n   * @type {CustomDataSource}\n   */\n  defaultDataSource: {\n    get: function () {\n      return this._defaultDataSource;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not all entities in the data source are ready\n   * @memberof DataSourceDisplay.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n});\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see DataSourceDisplay#destroy\n */\nDataSourceDisplay.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * dataSourceDisplay = dataSourceDisplay.destroy();\n *\n * @see DataSourceDisplay#isDestroyed\n */\nDataSourceDisplay.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  const dataSourceCollection = this._dataSourceCollection;\n  for (let i = 0, length = dataSourceCollection.length; i < length; ++i) {\n    this._onDataSourceRemoved(\n      this._dataSourceCollection,\n      dataSourceCollection.get(i),\n    );\n  }\n  this._onDataSourceRemoved(undefined, this._defaultDataSource);\n\n  if (defined(this._removeDefaultDataSourceListener)) {\n    this._removeDefaultDataSourceListener();\n    this._removeDataSourceCollectionListener();\n  } else {\n    this._scene.primitives.remove(this._primitives);\n    this._scene.groundPrimitives.remove(this._groundPrimitives);\n  }\n\n  return destroyObject(this);\n};\n\n/**\n * Updates the display to the provided time.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {boolean} True if all data sources are ready to be displayed, false otherwise.\n */\nDataSourceDisplay.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  if (!ApproximateTerrainHeights.initialized) {\n    this._ready = false;\n    return false;\n  }\n\n  let result = true;\n\n  let i;\n  let x;\n  let visualizers;\n  let vLength;\n  const dataSources = this._dataSourceCollection;\n  const length = dataSources.length;\n  for (i = 0; i < length; i++) {\n    const dataSource = dataSources.get(i);\n    if (defined(dataSource.update)) {\n      result = dataSource.update(time) && result;\n    }\n\n    visualizers = dataSource._visualizers;\n    vLength = visualizers.length;\n    for (x = 0; x < vLength; x++) {\n      result = visualizers[x].update(time) && result;\n    }\n  }\n\n  visualizers = this._defaultDataSource._visualizers;\n  vLength = visualizers.length;\n  for (x = 0; x < vLength; x++) {\n    result = visualizers[x].update(time) && result;\n  }\n\n  // Request a rendering of the scene when the data source\n  // becomes 'ready' for the first time\n  if (!this._ready && result) {\n    this._scene.requestRender();\n  }\n  this._ready = result;\n\n  return result;\n};\n\nDataSourceDisplay.prototype._postRender = function () {\n  // Adds credits for all datasources\n  const frameState = this._scene.frameState;\n  const dataSources = this._dataSourceCollection;\n  const length = dataSources.length;\n  for (let i = 0; i < length; i++) {\n    const dataSource = dataSources.get(i);\n\n    const credit = dataSource.credit;\n    if (defined(credit)) {\n      frameState.creditDisplay.addCreditToNextFrame(credit);\n    }\n\n    // Credits from the resource that the user can't remove\n    const credits = dataSource._resourceCredits;\n    if (defined(credits)) {\n      const creditCount = credits.length;\n      for (let c = 0; c < creditCount; c++) {\n        frameState.creditDisplay.addCreditToNextFrame(credits[c]);\n      }\n    }\n  }\n};\n\nconst getBoundingSphereArrayScratch = [];\nconst getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {boolean} allowPartial If true, pending bounding spheres are ignored and an answer will be returned from the currently available data.\n *                               If false, the the function will halt and return pending if any of the bounding spheres are pending.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nDataSourceDisplay.prototype.getBoundingSphere = function (\n  entity,\n  allowPartial,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"entity\", entity);\n  Check.typeOf.bool(\"allowPartial\", allowPartial);\n  Check.defined(\"result\", result);\n  //>>includeEnd('debug');\n\n  if (!this._ready && !allowPartial) {\n    return BoundingSphereState.PENDING;\n  }\n\n  let i;\n  let length;\n  let dataSource = this._defaultDataSource;\n  if (!dataSource.entities.contains(entity)) {\n    dataSource = undefined;\n\n    const dataSources = this._dataSourceCollection;\n    length = dataSources.length;\n    for (i = 0; i < length; i++) {\n      const d = dataSources.get(i);\n      if (d.entities.contains(entity)) {\n        dataSource = d;\n        break;\n      }\n    }\n  }\n\n  if (!defined(dataSource)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  const boundingSpheres = getBoundingSphereArrayScratch;\n  const tmp = getBoundingSphereBoundingSphereScratch;\n\n  let count = 0;\n  let state = BoundingSphereState.DONE;\n  const visualizers = dataSource._visualizers;\n  const visualizersLength = visualizers.length;\n\n  for (i = 0; i < visualizersLength; i++) {\n    const visualizer = visualizers[i];\n    if (defined(visualizer.getBoundingSphere)) {\n      state = visualizers[i].getBoundingSphere(entity, tmp);\n      if (!allowPartial && state === BoundingSphereState.PENDING) {\n        return BoundingSphereState.PENDING;\n      } else if (state === BoundingSphereState.DONE) {\n        boundingSpheres[count] = BoundingSphere.clone(\n          tmp,\n          boundingSpheres[count],\n        );\n        count++;\n      }\n    }\n  }\n\n  if (count === 0) {\n    return BoundingSphereState.FAILED;\n  }\n\n  boundingSpheres.length = count;\n  BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n  return BoundingSphereState.DONE;\n};\n\nDataSourceDisplay.prototype._onDataSourceAdded = function (\n  dataSourceCollection,\n  dataSource,\n) {\n  const scene = this._scene;\n\n  const displayPrimitives = this._primitives;\n  const displayGroundPrimitives = this._groundPrimitives;\n\n  const primitives = displayPrimitives.add(new PrimitiveCollection());\n  const groundPrimitives = displayGroundPrimitives.add(\n    new OrderedGroundPrimitiveCollection(),\n  );\n\n  dataSource._primitives = primitives;\n  dataSource._groundPrimitives = groundPrimitives;\n\n  const entityCluster = dataSource.clustering;\n  entityCluster._initialize(scene);\n\n  primitives.add(entityCluster);\n\n  dataSource._visualizers = this._visualizersCallback(\n    scene,\n    entityCluster,\n    dataSource,\n  );\n};\n\nDataSourceDisplay.prototype._onDataSourceRemoved = function (\n  dataSourceCollection,\n  dataSource,\n) {\n  const displayPrimitives = this._primitives;\n  const displayGroundPrimitives = this._groundPrimitives;\n\n  const primitives = dataSource._primitives;\n  const groundPrimitives = dataSource._groundPrimitives;\n\n  const entityCluster = dataSource.clustering;\n  primitives.remove(entityCluster);\n\n  const visualizers = dataSource._visualizers;\n  const length = visualizers.length;\n  for (let i = 0; i < length; i++) {\n    visualizers[i].destroy();\n  }\n\n  displayPrimitives.remove(primitives);\n  displayGroundPrimitives.remove(groundPrimitives);\n\n  dataSource._visualizers = undefined;\n};\n\nDataSourceDisplay.prototype._onDataSourceMoved = function (\n  dataSource,\n  newIndex,\n  oldIndex,\n) {\n  const displayPrimitives = this._primitives;\n  const displayGroundPrimitives = this._groundPrimitives;\n\n  const primitives = dataSource._primitives;\n  const groundPrimitives = dataSource._groundPrimitives;\n\n  if (newIndex === oldIndex + 1) {\n    displayPrimitives.raise(primitives);\n    displayGroundPrimitives.raise(groundPrimitives);\n  } else if (newIndex === oldIndex - 1) {\n    displayPrimitives.lower(primitives);\n    displayGroundPrimitives.lower(groundPrimitives);\n  } else if (newIndex === 0) {\n    displayPrimitives.lowerToBottom(primitives);\n    displayGroundPrimitives.lowerToBottom(groundPrimitives);\n    displayPrimitives.raise(primitives); // keep defaultDataSource primitives at index 0 since it's not in the collection\n    displayGroundPrimitives.raise(groundPrimitives);\n  } else {\n    displayPrimitives.raiseToTop(primitives);\n    displayGroundPrimitives.raiseToTop(groundPrimitives);\n  }\n};\n\n/**\n * A function which creates an array of visualizers used for visualization.\n * @callback DataSourceDisplay.VisualizersCallback\n *\n * @param {Scene} scene The scene to create visualizers for.\n * @param {EntityCluster} entityCluster The entity cluster to create visualizers for.\n * @param {DataSource} dataSource The data source to create visualizers for.\n * @returns {Visualizer[]} An array of visualizers used for visualization.\n *\n * @example\n * function createVisualizers(scene, entityCluster, dataSource) {\n *     return [new Cesium.BillboardVisualizer(entityCluster, dataSource.entities)];\n * }\n */\nexport default DataSourceDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}