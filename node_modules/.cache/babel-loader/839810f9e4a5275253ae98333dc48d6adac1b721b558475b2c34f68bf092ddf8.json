{"ast":null,"code":"/**\n * An enum of built-in semantics.\n *\n * @enum MetadataSemantic\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Metadata/Semantics|3D Metadata Semantic Reference}\n */\nconst MetadataSemantic = {\n  /**\n   * A unique identifier, stored as a <code>STRING</code>.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  ID: \"ID\",\n  /**\n   * A name, stored as a <code>STRING</code>. This does not have to be unique.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  NAME: \"NAME\",\n  /**\n   * A description, stored as a <code>STRING</code>.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  DESCRIPTION: \"DESCRIPTION\",\n  /**\n   * The number of tiles in a tileset, stored as a <code>UINT64</code>.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILESET_TILE_COUNT: \"TILESET_TILE_COUNT\",\n  /**\n   * A bounding box for a tile, stored as an array of 12 <code>FLOAT32</code> or <code>FLOAT64</code> components. The components are the same format as for <code>boundingVolume.box</code> in 3D Tiles 1.0. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_BOUNDING_BOX: \"TILE_BOUNDING_BOX\",\n  /**\n   * A bounding region for a tile, stored as an array of 6 <code>FLOAT64</code> components. The components are <code>[west, south, east, north, minimumHeight, maximumHeight]</code>. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_BOUNDING_REGION: \"TILE_BOUNDING_REGION\",\n  /**\n   * A bounding sphere for a tile, stored as an array of 4 <code>FLOAT32</code> or <code>FLOAT64</code> components. The components are <code>[centerX, centerY, centerZ, radius]</code>. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_BOUNDING_SPHERE: \"TILE_BOUNDING_SPHERE\",\n  /**\n   * The minimum height of a tile above (or below) the ellipsoid, stored as a <code>FLOAT32</code> or a <code>FLOAT64</code>. This semantic is used to tighten bounding regions implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_MINIMUM_HEIGHT: \"TILE_MINIMUM_HEIGHT\",\n  /**\n   * The maximum height of a tile above (or below) the ellipsoid, stored as a <code>FLOAT32</code> or a <code>FLOAT64</code>. This semantic is used to tighten bounding regions implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_MAXIMUM_HEIGHT: \"TILE_MAXIMUM_HEIGHT\",\n  /**\n   * The horizon occlusion point for a tile, stored as an <code>VEC3</code> of <code>FLOAT32</code> or <code>FLOAT64</code> components.\n   *\n   * @see {@link https://cesium.com/blog/2013/04/25/horizon-culling/|Horizon Culling}\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_HORIZON_OCCLUSION_POINT: \"TILE_HORIZON_OCCLUSION_POINT\",\n  /**\n   * The geometric error for a tile, stored as a <code>FLOAT32</code> or a <code>FLOAT64</code>. This semantic is used to override the geometric error implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_GEOMETRIC_ERROR: \"TILE_GEOMETRIC_ERROR\",\n  /**\n   * A bounding box for the content of a tile, stored as an array of 12 <code>FLOAT32</code> or <code>FLOAT64</code> components. The components are the same format as for <code>boundingVolume.box</code> in 3D Tiles 1.0. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_BOUNDING_BOX: \"CONTENT_BOUNDING_BOX\",\n  /**\n   * A bounding region for the content of a tile, stored as an array of 6 <code>FLOAT64</code> components. The components are <code>[west, south, east, north, minimumHeight, maximumHeight]</code>. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_BOUNDING_REGION: \"CONTENT_BOUNDING_REGION\",\n  /**\n   * A bounding sphere for the content of a tile, stored as an array of 4 <code>FLOAT32</code> or <code>FLOAT64</code> components. The components are <code>[centerX, centerY, centerZ, radius]</code>. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_BOUNDING_SPHERE: \"CONTENT_BOUNDING_SPHERE\",\n  /**\n   * The minimum height of the content of a tile above (or below) the ellipsoid, stored as a <code>FLOAT32</code> or a <code>FLOAT64</code>\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_MINIMUM_HEIGHT: \"CONTENT_MINIMUM_HEIGHT\",\n  /**\n   * The maximum height of the content of a tile above (or below) the ellipsoid, stored as a <code>FLOAT32</code> or a <code>FLOAT64</code>\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_MAXIMUM_HEIGHT: \"CONTENT_MAXIMUM_HEIGHT\",\n  /**\n   * The horizon occlusion point for the content of a tile, stored as an <code>VEC3</code> of <code>FLOAT32</code> or <code>FLOAT64</code> components.\n   *\n   * @see {@link https://cesium.com/blog/2013/04/25/horizon-culling/|Horizon Culling}\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_HORIZON_OCCLUSION_POINT: \"CONTENT_HORIZON_OCCLUSION_POINT\"\n};\nexport default Object.freeze(MetadataSemantic);","map":{"version":3,"names":["MetadataSemantic","ID","NAME","DESCRIPTION","TILESET_TILE_COUNT","TILE_BOUNDING_BOX","TILE_BOUNDING_REGION","TILE_BOUNDING_SPHERE","TILE_MINIMUM_HEIGHT","TILE_MAXIMUM_HEIGHT","TILE_HORIZON_OCCLUSION_POINT","TILE_GEOMETRIC_ERROR","CONTENT_BOUNDING_BOX","CONTENT_BOUNDING_REGION","CONTENT_BOUNDING_SPHERE","CONTENT_MINIMUM_HEIGHT","CONTENT_MAXIMUM_HEIGHT","CONTENT_HORIZON_OCCLUSION_POINT","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/MetadataSemantic.js"],"sourcesContent":["/**\n * An enum of built-in semantics.\n *\n * @enum MetadataSemantic\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Metadata/Semantics|3D Metadata Semantic Reference}\n */\nconst MetadataSemantic = {\n  /**\n   * A unique identifier, stored as a <code>STRING</code>.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  ID: \"ID\",\n  /**\n   * A name, stored as a <code>STRING</code>. This does not have to be unique.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  NAME: \"NAME\",\n  /**\n   * A description, stored as a <code>STRING</code>.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  DESCRIPTION: \"DESCRIPTION\",\n  /**\n   * The number of tiles in a tileset, stored as a <code>UINT64</code>.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILESET_TILE_COUNT: \"TILESET_TILE_COUNT\",\n  /**\n   * A bounding box for a tile, stored as an array of 12 <code>FLOAT32</code> or <code>FLOAT64</code> components. The components are the same format as for <code>boundingVolume.box</code> in 3D Tiles 1.0. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_BOUNDING_BOX: \"TILE_BOUNDING_BOX\",\n  /**\n   * A bounding region for a tile, stored as an array of 6 <code>FLOAT64</code> components. The components are <code>[west, south, east, north, minimumHeight, maximumHeight]</code>. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_BOUNDING_REGION: \"TILE_BOUNDING_REGION\",\n  /**\n   * A bounding sphere for a tile, stored as an array of 4 <code>FLOAT32</code> or <code>FLOAT64</code> components. The components are <code>[centerX, centerY, centerZ, radius]</code>. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_BOUNDING_SPHERE: \"TILE_BOUNDING_SPHERE\",\n  /**\n   * The minimum height of a tile above (or below) the ellipsoid, stored as a <code>FLOAT32</code> or a <code>FLOAT64</code>. This semantic is used to tighten bounding regions implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_MINIMUM_HEIGHT: \"TILE_MINIMUM_HEIGHT\",\n  /**\n   * The maximum height of a tile above (or below) the ellipsoid, stored as a <code>FLOAT32</code> or a <code>FLOAT64</code>. This semantic is used to tighten bounding regions implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_MAXIMUM_HEIGHT: \"TILE_MAXIMUM_HEIGHT\",\n  /**\n   * The horizon occlusion point for a tile, stored as an <code>VEC3</code> of <code>FLOAT32</code> or <code>FLOAT64</code> components.\n   *\n   * @see {@link https://cesium.com/blog/2013/04/25/horizon-culling/|Horizon Culling}\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_HORIZON_OCCLUSION_POINT: \"TILE_HORIZON_OCCLUSION_POINT\",\n  /**\n   * The geometric error for a tile, stored as a <code>FLOAT32</code> or a <code>FLOAT64</code>. This semantic is used to override the geometric error implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  TILE_GEOMETRIC_ERROR: \"TILE_GEOMETRIC_ERROR\",\n  /**\n   * A bounding box for the content of a tile, stored as an array of 12 <code>FLOAT32</code> or <code>FLOAT64</code> components. The components are the same format as for <code>boundingVolume.box</code> in 3D Tiles 1.0. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_BOUNDING_BOX: \"CONTENT_BOUNDING_BOX\",\n  /**\n   * A bounding region for the content of a tile, stored as an array of 6 <code>FLOAT64</code> components. The components are <code>[west, south, east, north, minimumHeight, maximumHeight]</code>. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_BOUNDING_REGION: \"CONTENT_BOUNDING_REGION\",\n  /**\n   * A bounding sphere for the content of a tile, stored as an array of 4 <code>FLOAT32</code> or <code>FLOAT64</code> components. The components are <code>[centerX, centerY, centerZ, radius]</code>. This semantic is used to provide a tighter bounding volume than the one implicitly calculated in implicit tiling.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_BOUNDING_SPHERE: \"CONTENT_BOUNDING_SPHERE\",\n  /**\n   * The minimum height of the content of a tile above (or below) the ellipsoid, stored as a <code>FLOAT32</code> or a <code>FLOAT64</code>\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_MINIMUM_HEIGHT: \"CONTENT_MINIMUM_HEIGHT\",\n  /**\n   * The maximum height of the content of a tile above (or below) the ellipsoid, stored as a <code>FLOAT32</code> or a <code>FLOAT64</code>\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_MAXIMUM_HEIGHT: \"CONTENT_MAXIMUM_HEIGHT\",\n  /**\n   * The horizon occlusion point for the content of a tile, stored as an <code>VEC3</code> of <code>FLOAT32</code> or <code>FLOAT64</code> components.\n   *\n   * @see {@link https://cesium.com/blog/2013/04/25/horizon-culling/|Horizon Culling}\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CONTENT_HORIZON_OCCLUSION_POINT: \"CONTENT_HORIZON_OCCLUSION_POINT\",\n};\n\nexport default Object.freeze(MetadataSemantic);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,gBAAgB,GAAG;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,EAAE,EAAE,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,IAAI,EAAE,MAAM;EACZ;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,aAAa;EAC1B;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,kBAAkB,EAAE,oBAAoB;EACxC;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,iBAAiB,EAAE,mBAAmB;EACtC;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,oBAAoB,EAAE,sBAAsB;EAC5C;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,oBAAoB,EAAE,sBAAsB;EAC5C;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,mBAAmB,EAAE,qBAAqB;EAC1C;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,mBAAmB,EAAE,qBAAqB;EAC1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,4BAA4B,EAAE,8BAA8B;EAC5D;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,oBAAoB,EAAE,sBAAsB;EAC5C;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,oBAAoB,EAAE,sBAAsB;EAC5C;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,uBAAuB,EAAE,yBAAyB;EAClD;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,uBAAuB,EAAE,yBAAyB;EAClD;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,sBAAsB,EAAE,wBAAwB;EAChD;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,sBAAsB,EAAE,wBAAwB;EAChD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,+BAA+B,EAAE;AACnC,CAAC;AAED,eAAeC,MAAM,CAACC,MAAM,CAACnB,gBAAgB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}