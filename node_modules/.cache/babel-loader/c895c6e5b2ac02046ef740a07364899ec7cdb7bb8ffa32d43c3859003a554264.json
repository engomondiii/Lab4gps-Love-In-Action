{"ast":null,"code":"import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\n/**\n * Describes geometry representing the outline of a plane centered at the origin, with a unit width and length.\n *\n * @alias PlaneOutlineGeometry\n * @constructor\n *\n */\nfunction PlaneOutlineGeometry() {\n  this._workerName = \"createPlaneOutlineGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nPlaneOutlineGeometry.packedLength = 0;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PlaneOutlineGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n *\n * @returns {number[]} The array that was packed into\n */\nPlaneOutlineGeometry.pack = function (value, array) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PlaneOutlineGeometry} [result] The object into which to store the result.\n * @returns {PlaneOutlineGeometry} The modified result parameter or a new PlaneOutlineGeometry instance if one was not provided.\n */\nPlaneOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new PlaneOutlineGeometry();\n  }\n  return result;\n};\nconst min = new Cartesian3(-0.5, -0.5, 0.0);\nconst max = new Cartesian3(0.5, 0.5, 0.0);\n\n/**\n * Computes the geometric representation of an outline of a plane, including its vertices, indices, and a bounding sphere.\n *\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPlaneOutlineGeometry.createGeometry = function () {\n  const attributes = new GeometryAttributes();\n  const indices = new Uint16Array(4 * 2);\n  const positions = new Float64Array(4 * 3);\n  positions[0] = min.x;\n  positions[1] = min.y;\n  positions[2] = min.z;\n  positions[3] = max.x;\n  positions[4] = min.y;\n  positions[5] = min.z;\n  positions[6] = max.x;\n  positions[7] = max.y;\n  positions[8] = min.z;\n  positions[9] = min.x;\n  positions[10] = max.y;\n  positions[11] = min.z;\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: positions\n  });\n  indices[0] = 0;\n  indices[1] = 1;\n  indices[2] = 1;\n  indices[3] = 2;\n  indices[4] = 2;\n  indices[5] = 3;\n  indices[6] = 3;\n  indices[7] = 0;\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\n  });\n};\nexport default PlaneOutlineGeometry;","map":{"version":3,"names":["BoundingSphere","Cartesian3","Check","ComponentDatatype","defined","Geometry","GeometryAttribute","GeometryAttributes","PrimitiveType","PlaneOutlineGeometry","_workerName","packedLength","pack","value","array","unpack","startingIndex","result","min","max","createGeometry","attributes","indices","Uint16Array","positions","Float64Array","x","y","z","position","componentDatatype","DOUBLE","componentsPerAttribute","values","primitiveType","LINES","boundingSphere","ZERO","Math","sqrt"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/PlaneOutlineGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\n/**\n * Describes geometry representing the outline of a plane centered at the origin, with a unit width and length.\n *\n * @alias PlaneOutlineGeometry\n * @constructor\n *\n */\nfunction PlaneOutlineGeometry() {\n  this._workerName = \"createPlaneOutlineGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nPlaneOutlineGeometry.packedLength = 0;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PlaneOutlineGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n *\n * @returns {number[]} The array that was packed into\n */\nPlaneOutlineGeometry.pack = function (value, array) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PlaneOutlineGeometry} [result] The object into which to store the result.\n * @returns {PlaneOutlineGeometry} The modified result parameter or a new PlaneOutlineGeometry instance if one was not provided.\n */\nPlaneOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new PlaneOutlineGeometry();\n  }\n\n  return result;\n};\n\nconst min = new Cartesian3(-0.5, -0.5, 0.0);\nconst max = new Cartesian3(0.5, 0.5, 0.0);\n\n/**\n * Computes the geometric representation of an outline of a plane, including its vertices, indices, and a bounding sphere.\n *\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPlaneOutlineGeometry.createGeometry = function () {\n  const attributes = new GeometryAttributes();\n  const indices = new Uint16Array(4 * 2);\n  const positions = new Float64Array(4 * 3);\n\n  positions[0] = min.x;\n  positions[1] = min.y;\n  positions[2] = min.z;\n  positions[3] = max.x;\n  positions[4] = min.y;\n  positions[5] = min.z;\n  positions[6] = max.x;\n  positions[7] = max.y;\n  positions[8] = min.z;\n  positions[9] = min.x;\n  positions[10] = max.y;\n  positions[11] = min.z;\n\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: positions,\n  });\n\n  indices[0] = 0;\n  indices[1] = 1;\n  indices[2] = 1;\n  indices[3] = 2;\n  indices[4] = 2;\n  indices[5] = 3;\n  indices[6] = 3;\n  indices[7] = 0;\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0)),\n  });\n};\nexport default PlaneOutlineGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}