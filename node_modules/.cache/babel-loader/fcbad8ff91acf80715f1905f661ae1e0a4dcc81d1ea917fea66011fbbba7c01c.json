{"ast":null,"code":"import Check from \"./Check.js\";\nimport Resource from \"./Resource.js\";\nimport KTX2Transcoder from \"./KTX2Transcoder.js\";\n\n/**\n * Stores the supported formats that KTX2 can transcode to. Called during context creation.\n *\n * @param {boolean} s3tc Whether or not S3TC is supported\n * @param {boolean} pvrtc Whether or not PVRTC is supported\n * @param {boolean} astc Whether or not ASTC is supported\n * @param {boolean} etc Whether or not ETC is supported\n * @param {boolean} etc1 Whether or not ETC1 is supported\n * @param {boolean} bc7 Whether or not BC7 is supported\n * @private\n */\nlet supportedTranscoderFormats;\nloadKTX2.setKTX2SupportedFormats = function (s3tc, pvrtc, astc, etc, etc1, bc7) {\n  supportedTranscoderFormats = {\n    s3tc: s3tc,\n    pvrtc: pvrtc,\n    astc: astc,\n    etc: etc,\n    etc1: etc1,\n    bc7: bc7\n  };\n};\n\n/**\n * Asynchronously loads and parses the given URL to a KTX2 file or parses the raw binary data of a KTX2 file.\n * Returns a promise that will resolve to an object containing the image buffer, width, height, and format once loaded,\n * or reject if the URL failed to load or failed to parse the data. The data is loaded\n * using XMLHttpRequest, which means that in order to make requests to another origin,\n * the server must have Cross-Origin Resource sharing (CORS) headers enabled.\n * <p>\n * The following are part of the KTX2 format specification but are not supported:\n * <ul>\n *     <li>Metadata</li>\n *     <li>3D textures</li>\n *     <li>Texture Arrays</li>\n *     <li>Video</li>\n * </ul>\n * </p>\n *\n * @function loadKTX2\n *\n * @param {Resource|string|ArrayBuffer} resourceOrUrlOrBuffer The URL of the binary data or an ArrayBuffer.\n * @returns {Promise<CompressedTextureBuffer>|undefined} A promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\n *\n * @exception {RuntimeError} Invalid KTX2 file.\n * @exception {RuntimeError} KTX2 texture arrays are not supported.\n * @exception {RuntimeError} KTX2 3D textures are unsupported.\n * @exception {RuntimeError} No transcoding format target available for ETC1S compressed ktx2s.\n * @exception {RuntimeError} No transcoding format target available for UASTC compressed ktx2s.\n * @exception {RuntimeError} startTranscoding() failed.\n * @exception {RuntimeError} transcodeImage() failed.\n *\n * @example\n * // load a single URL asynchronously\n * Cesium.loadKTX2('some/url').then(function (ktx2Data) {\n *     const width = ktx2Data.width;\n *     const height = ktx2Data.height;\n *     const format = ktx2Data.internalFormat;\n *     const arrayBufferView = ktx2Data.bufferView;\n *     // use the data to create a texture\n * }).catch(function (error) {\n *     // an error occurred.\n * });\n *\n * @see {@link https://github.com/KhronosGroup/KTX-Specification|KTX file format}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n * @private\n */\nfunction loadKTX2(resourceOrUrlOrBuffer) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"resourceOrUrlOrBuffer\", resourceOrUrlOrBuffer);\n  //>>includeEnd('debug');\n\n  let loadPromise;\n  if (resourceOrUrlOrBuffer instanceof ArrayBuffer || ArrayBuffer.isView(resourceOrUrlOrBuffer)) {\n    loadPromise = Promise.resolve(resourceOrUrlOrBuffer);\n  } else {\n    const resource = Resource.createIfNeeded(resourceOrUrlOrBuffer);\n    loadPromise = resource.fetchArrayBuffer();\n  }\n\n  // load module then return\n  return loadPromise.then(function (data) {\n    return KTX2Transcoder.transcode(data, supportedTranscoderFormats);\n  });\n}\nexport default loadKTX2;","map":{"version":3,"names":["Check","Resource","KTX2Transcoder","supportedTranscoderFormats","loadKTX2","setKTX2SupportedFormats","s3tc","pvrtc","astc","etc","etc1","bc7","resourceOrUrlOrBuffer","defined","loadPromise","ArrayBuffer","isView","Promise","resolve","resource","createIfNeeded","fetchArrayBuffer","then","data","transcode"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/loadKTX2.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport Resource from \"./Resource.js\";\nimport KTX2Transcoder from \"./KTX2Transcoder.js\";\n\n/**\n * Stores the supported formats that KTX2 can transcode to. Called during context creation.\n *\n * @param {boolean} s3tc Whether or not S3TC is supported\n * @param {boolean} pvrtc Whether or not PVRTC is supported\n * @param {boolean} astc Whether or not ASTC is supported\n * @param {boolean} etc Whether or not ETC is supported\n * @param {boolean} etc1 Whether or not ETC1 is supported\n * @param {boolean} bc7 Whether or not BC7 is supported\n * @private\n */\nlet supportedTranscoderFormats;\n\nloadKTX2.setKTX2SupportedFormats = function (\n  s3tc,\n  pvrtc,\n  astc,\n  etc,\n  etc1,\n  bc7,\n) {\n  supportedTranscoderFormats = {\n    s3tc: s3tc,\n    pvrtc: pvrtc,\n    astc: astc,\n    etc: etc,\n    etc1: etc1,\n    bc7: bc7,\n  };\n};\n\n/**\n * Asynchronously loads and parses the given URL to a KTX2 file or parses the raw binary data of a KTX2 file.\n * Returns a promise that will resolve to an object containing the image buffer, width, height, and format once loaded,\n * or reject if the URL failed to load or failed to parse the data. The data is loaded\n * using XMLHttpRequest, which means that in order to make requests to another origin,\n * the server must have Cross-Origin Resource sharing (CORS) headers enabled.\n * <p>\n * The following are part of the KTX2 format specification but are not supported:\n * <ul>\n *     <li>Metadata</li>\n *     <li>3D textures</li>\n *     <li>Texture Arrays</li>\n *     <li>Video</li>\n * </ul>\n * </p>\n *\n * @function loadKTX2\n *\n * @param {Resource|string|ArrayBuffer} resourceOrUrlOrBuffer The URL of the binary data or an ArrayBuffer.\n * @returns {Promise<CompressedTextureBuffer>|undefined} A promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\n *\n * @exception {RuntimeError} Invalid KTX2 file.\n * @exception {RuntimeError} KTX2 texture arrays are not supported.\n * @exception {RuntimeError} KTX2 3D textures are unsupported.\n * @exception {RuntimeError} No transcoding format target available for ETC1S compressed ktx2s.\n * @exception {RuntimeError} No transcoding format target available for UASTC compressed ktx2s.\n * @exception {RuntimeError} startTranscoding() failed.\n * @exception {RuntimeError} transcodeImage() failed.\n *\n * @example\n * // load a single URL asynchronously\n * Cesium.loadKTX2('some/url').then(function (ktx2Data) {\n *     const width = ktx2Data.width;\n *     const height = ktx2Data.height;\n *     const format = ktx2Data.internalFormat;\n *     const arrayBufferView = ktx2Data.bufferView;\n *     // use the data to create a texture\n * }).catch(function (error) {\n *     // an error occurred.\n * });\n *\n * @see {@link https://github.com/KhronosGroup/KTX-Specification|KTX file format}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n * @private\n */\nfunction loadKTX2(resourceOrUrlOrBuffer) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"resourceOrUrlOrBuffer\", resourceOrUrlOrBuffer);\n  //>>includeEnd('debug');\n\n  let loadPromise;\n  if (\n    resourceOrUrlOrBuffer instanceof ArrayBuffer ||\n    ArrayBuffer.isView(resourceOrUrlOrBuffer)\n  ) {\n    loadPromise = Promise.resolve(resourceOrUrlOrBuffer);\n  } else {\n    const resource = Resource.createIfNeeded(resourceOrUrlOrBuffer);\n    loadPromise = resource.fetchArrayBuffer();\n  }\n\n  // load module then return\n  return loadPromise.then(function (data) {\n    return KTX2Transcoder.transcode(data, supportedTranscoderFormats);\n  });\n}\n\nexport default loadKTX2;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,0BAA0B;AAE9BC,QAAQ,CAACC,uBAAuB,GAAG,UACjCC,IAAI,EACJC,KAAK,EACLC,IAAI,EACJC,GAAG,EACHC,IAAI,EACJC,GAAG,EACH;EACAR,0BAA0B,GAAG;IAC3BG,IAAI,EAAEA,IAAI;IACVC,KAAK,EAAEA,KAAK;IACZC,IAAI,EAAEA,IAAI;IACVC,GAAG,EAAEA,GAAG;IACRC,IAAI,EAAEA,IAAI;IACVC,GAAG,EAAEA;EACP,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,QAAQA,CAACQ,qBAAqB,EAAE;EACvC;EACAZ,KAAK,CAACa,OAAO,CAAC,uBAAuB,EAAED,qBAAqB,CAAC;EAC7D;;EAEA,IAAIE,WAAW;EACf,IACEF,qBAAqB,YAAYG,WAAW,IAC5CA,WAAW,CAACC,MAAM,CAACJ,qBAAqB,CAAC,EACzC;IACAE,WAAW,GAAGG,OAAO,CAACC,OAAO,CAACN,qBAAqB,CAAC;EACtD,CAAC,MAAM;IACL,MAAMO,QAAQ,GAAGlB,QAAQ,CAACmB,cAAc,CAACR,qBAAqB,CAAC;IAC/DE,WAAW,GAAGK,QAAQ,CAACE,gBAAgB,CAAC,CAAC;EAC3C;;EAEA;EACA,OAAOP,WAAW,CAACQ,IAAI,CAAC,UAAUC,IAAI,EAAE;IACtC,OAAOrB,cAAc,CAACsB,SAAS,CAACD,IAAI,EAAEpB,0BAA0B,CAAC;EACnE,CAAC,CAAC;AACJ;AAEA,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}