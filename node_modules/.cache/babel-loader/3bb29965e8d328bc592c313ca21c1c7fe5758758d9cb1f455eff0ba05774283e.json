{"ast":null,"code":"import addToArray from \"./addToArray.js\";\nimport ForEach from \"./ForEach.js\";\nimport getAccessorByteStride from \"./getAccessorByteStride.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport WebGLConstants from \"../../Core/WebGLConstants.js\";\n\n/**\n * Adds default glTF values if they don't exist.\n *\n * @param {object} gltf A javascript object containing a glTF asset.\n * @returns {object} The modified glTF.\n *\n * @private\n */\nfunction addDefaults(gltf) {\n  ForEach.accessor(gltf, function (accessor) {\n    if (defined(accessor.bufferView)) {\n      accessor.byteOffset = defaultValue(accessor.byteOffset, 0);\n    }\n  });\n  ForEach.bufferView(gltf, function (bufferView) {\n    if (defined(bufferView.buffer)) {\n      bufferView.byteOffset = defaultValue(bufferView.byteOffset, 0);\n    }\n  });\n  ForEach.mesh(gltf, function (mesh) {\n    ForEach.meshPrimitive(mesh, function (primitive) {\n      primitive.mode = defaultValue(primitive.mode, WebGLConstants.TRIANGLES);\n      if (!defined(primitive.material)) {\n        if (!defined(gltf.materials)) {\n          gltf.materials = [];\n        }\n        const defaultMaterial = {\n          name: \"default\"\n        };\n        primitive.material = addToArray(gltf.materials, defaultMaterial);\n      }\n    });\n  });\n  ForEach.accessorContainingVertexAttributeData(gltf, function (accessorId) {\n    const accessor = gltf.accessors[accessorId];\n    const bufferViewId = accessor.bufferView;\n    accessor.normalized = defaultValue(accessor.normalized, false);\n    if (defined(bufferViewId)) {\n      const bufferView = gltf.bufferViews[bufferViewId];\n      bufferView.byteStride = getAccessorByteStride(gltf, accessor);\n      bufferView.target = WebGLConstants.ARRAY_BUFFER;\n    }\n  });\n  ForEach.accessorContainingIndexData(gltf, function (accessorId) {\n    const accessor = gltf.accessors[accessorId];\n    const bufferViewId = accessor.bufferView;\n    if (defined(bufferViewId)) {\n      const bufferView = gltf.bufferViews[bufferViewId];\n      bufferView.target = WebGLConstants.ELEMENT_ARRAY_BUFFER;\n    }\n  });\n  ForEach.material(gltf, function (material) {\n    const extensions = defaultValue(material.extensions, defaultValue.EMPTY_OBJECT);\n    const materialsCommon = extensions.KHR_materials_common;\n    if (defined(materialsCommon)) {\n      const technique = materialsCommon.technique;\n      const values = defined(materialsCommon.values) ? materialsCommon.values : {};\n      materialsCommon.values = values;\n      values.ambient = defined(values.ambient) ? values.ambient : [0.0, 0.0, 0.0, 1.0];\n      values.emission = defined(values.emission) ? values.emission : [0.0, 0.0, 0.0, 1.0];\n      values.transparency = defaultValue(values.transparency, 1.0);\n      if (technique !== \"CONSTANT\") {\n        values.diffuse = defined(values.diffuse) ? values.diffuse : [0.0, 0.0, 0.0, 1.0];\n        if (technique !== \"LAMBERT\") {\n          values.specular = defined(values.specular) ? values.specular : [0.0, 0.0, 0.0, 1.0];\n          values.shininess = defaultValue(values.shininess, 0.0);\n        }\n      }\n\n      // These actually exist on the extension object, not the values object despite what's shown in the spec\n      materialsCommon.transparent = defaultValue(materialsCommon.transparent, false);\n      materialsCommon.doubleSided = defaultValue(materialsCommon.doubleSided, false);\n      return;\n    }\n    material.emissiveFactor = defaultValue(material.emissiveFactor, [0.0, 0.0, 0.0]);\n    material.alphaMode = defaultValue(material.alphaMode, \"OPAQUE\");\n    material.doubleSided = defaultValue(material.doubleSided, false);\n    if (material.alphaMode === \"MASK\") {\n      material.alphaCutoff = defaultValue(material.alphaCutoff, 0.5);\n    }\n    const techniquesExtension = extensions.KHR_techniques_webgl;\n    if (defined(techniquesExtension)) {\n      ForEach.materialValue(material, function (materialValue) {\n        // Check if material value is a TextureInfo object\n        if (defined(materialValue.index)) {\n          addTextureDefaults(materialValue);\n        }\n      });\n    }\n    addTextureDefaults(material.emissiveTexture);\n    addTextureDefaults(material.normalTexture);\n    addTextureDefaults(material.occlusionTexture);\n    const pbrMetallicRoughness = material.pbrMetallicRoughness;\n    if (defined(pbrMetallicRoughness)) {\n      pbrMetallicRoughness.baseColorFactor = defaultValue(pbrMetallicRoughness.baseColorFactor, [1.0, 1.0, 1.0, 1.0]);\n      pbrMetallicRoughness.metallicFactor = defaultValue(pbrMetallicRoughness.metallicFactor, 1.0);\n      pbrMetallicRoughness.roughnessFactor = defaultValue(pbrMetallicRoughness.roughnessFactor, 1.0);\n      addTextureDefaults(pbrMetallicRoughness.baseColorTexture);\n      addTextureDefaults(pbrMetallicRoughness.metallicRoughnessTexture);\n    }\n    const pbrSpecularGlossiness = extensions.KHR_materials_pbrSpecularGlossiness;\n    if (defined(pbrSpecularGlossiness)) {\n      pbrSpecularGlossiness.diffuseFactor = defaultValue(pbrSpecularGlossiness.diffuseFactor, [1.0, 1.0, 1.0, 1.0]);\n      pbrSpecularGlossiness.specularFactor = defaultValue(pbrSpecularGlossiness.specularFactor, [1.0, 1.0, 1.0]);\n      pbrSpecularGlossiness.glossinessFactor = defaultValue(pbrSpecularGlossiness.glossinessFactor, 1.0);\n      addTextureDefaults(pbrSpecularGlossiness.specularGlossinessTexture);\n    }\n  });\n  ForEach.animation(gltf, function (animation) {\n    ForEach.animationSampler(animation, function (sampler) {\n      sampler.interpolation = defaultValue(sampler.interpolation, \"LINEAR\");\n    });\n  });\n  const animatedNodes = getAnimatedNodes(gltf);\n  ForEach.node(gltf, function (node, id) {\n    const animated = defined(animatedNodes[id]);\n    if (animated || defined(node.translation) || defined(node.rotation) || defined(node.scale)) {\n      node.translation = defaultValue(node.translation, [0.0, 0.0, 0.0]);\n      node.rotation = defaultValue(node.rotation, [0.0, 0.0, 0.0, 1.0]);\n      node.scale = defaultValue(node.scale, [1.0, 1.0, 1.0]);\n    } else {\n      node.matrix = defaultValue(node.matrix, [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n    }\n  });\n  ForEach.sampler(gltf, function (sampler) {\n    sampler.wrapS = defaultValue(sampler.wrapS, WebGLConstants.REPEAT);\n    sampler.wrapT = defaultValue(sampler.wrapT, WebGLConstants.REPEAT);\n  });\n  if (defined(gltf.scenes) && !defined(gltf.scene)) {\n    gltf.scene = 0;\n  }\n  return gltf;\n}\nfunction getAnimatedNodes(gltf) {\n  const nodes = {};\n  ForEach.animation(gltf, function (animation) {\n    ForEach.animationChannel(animation, function (channel) {\n      const target = channel.target;\n      const nodeId = target.node;\n      const path = target.path;\n      // Ignore animations that target 'weights'\n      if (path === \"translation\" || path === \"rotation\" || path === \"scale\") {\n        nodes[nodeId] = true;\n      }\n    });\n  });\n  return nodes;\n}\nfunction addTextureDefaults(texture) {\n  if (defined(texture)) {\n    texture.texCoord = defaultValue(texture.texCoord, 0);\n  }\n}\nexport default addDefaults;","map":{"version":3,"names":["addToArray","ForEach","getAccessorByteStride","defaultValue","defined","WebGLConstants","addDefaults","gltf","accessor","bufferView","byteOffset","buffer","mesh","meshPrimitive","primitive","mode","TRIANGLES","material","materials","defaultMaterial","name","accessorContainingVertexAttributeData","accessorId","accessors","bufferViewId","normalized","bufferViews","byteStride","target","ARRAY_BUFFER","accessorContainingIndexData","ELEMENT_ARRAY_BUFFER","extensions","EMPTY_OBJECT","materialsCommon","KHR_materials_common","technique","values","ambient","emission","transparency","diffuse","specular","shininess","transparent","doubleSided","emissiveFactor","alphaMode","alphaCutoff","techniquesExtension","KHR_techniques_webgl","materialValue","index","addTextureDefaults","emissiveTexture","normalTexture","occlusionTexture","pbrMetallicRoughness","baseColorFactor","metallicFactor","roughnessFactor","baseColorTexture","metallicRoughnessTexture","pbrSpecularGlossiness","KHR_materials_pbrSpecularGlossiness","diffuseFactor","specularFactor","glossinessFactor","specularGlossinessTexture","animation","animationSampler","sampler","interpolation","animatedNodes","getAnimatedNodes","node","id","animated","translation","rotation","scale","matrix","wrapS","REPEAT","wrapT","scenes","scene","nodes","animationChannel","channel","nodeId","path","texture","texCoord"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GltfPipeline/addDefaults.js"],"sourcesContent":["import addToArray from \"./addToArray.js\";\nimport ForEach from \"./ForEach.js\";\nimport getAccessorByteStride from \"./getAccessorByteStride.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport WebGLConstants from \"../../Core/WebGLConstants.js\";\n\n/**\n * Adds default glTF values if they don't exist.\n *\n * @param {object} gltf A javascript object containing a glTF asset.\n * @returns {object} The modified glTF.\n *\n * @private\n */\nfunction addDefaults(gltf) {\n  ForEach.accessor(gltf, function (accessor) {\n    if (defined(accessor.bufferView)) {\n      accessor.byteOffset = defaultValue(accessor.byteOffset, 0);\n    }\n  });\n\n  ForEach.bufferView(gltf, function (bufferView) {\n    if (defined(bufferView.buffer)) {\n      bufferView.byteOffset = defaultValue(bufferView.byteOffset, 0);\n    }\n  });\n\n  ForEach.mesh(gltf, function (mesh) {\n    ForEach.meshPrimitive(mesh, function (primitive) {\n      primitive.mode = defaultValue(primitive.mode, WebGLConstants.TRIANGLES);\n      if (!defined(primitive.material)) {\n        if (!defined(gltf.materials)) {\n          gltf.materials = [];\n        }\n        const defaultMaterial = {\n          name: \"default\",\n        };\n        primitive.material = addToArray(gltf.materials, defaultMaterial);\n      }\n    });\n  });\n\n  ForEach.accessorContainingVertexAttributeData(gltf, function (accessorId) {\n    const accessor = gltf.accessors[accessorId];\n    const bufferViewId = accessor.bufferView;\n    accessor.normalized = defaultValue(accessor.normalized, false);\n    if (defined(bufferViewId)) {\n      const bufferView = gltf.bufferViews[bufferViewId];\n      bufferView.byteStride = getAccessorByteStride(gltf, accessor);\n      bufferView.target = WebGLConstants.ARRAY_BUFFER;\n    }\n  });\n\n  ForEach.accessorContainingIndexData(gltf, function (accessorId) {\n    const accessor = gltf.accessors[accessorId];\n    const bufferViewId = accessor.bufferView;\n    if (defined(bufferViewId)) {\n      const bufferView = gltf.bufferViews[bufferViewId];\n      bufferView.target = WebGLConstants.ELEMENT_ARRAY_BUFFER;\n    }\n  });\n\n  ForEach.material(gltf, function (material) {\n    const extensions = defaultValue(\n      material.extensions,\n      defaultValue.EMPTY_OBJECT\n    );\n    const materialsCommon = extensions.KHR_materials_common;\n    if (defined(materialsCommon)) {\n      const technique = materialsCommon.technique;\n      const values = defined(materialsCommon.values)\n        ? materialsCommon.values\n        : {};\n      materialsCommon.values = values;\n\n      values.ambient = defined(values.ambient)\n        ? values.ambient\n        : [0.0, 0.0, 0.0, 1.0];\n      values.emission = defined(values.emission)\n        ? values.emission\n        : [0.0, 0.0, 0.0, 1.0];\n\n      values.transparency = defaultValue(values.transparency, 1.0);\n\n      if (technique !== \"CONSTANT\") {\n        values.diffuse = defined(values.diffuse)\n          ? values.diffuse\n          : [0.0, 0.0, 0.0, 1.0];\n        if (technique !== \"LAMBERT\") {\n          values.specular = defined(values.specular)\n            ? values.specular\n            : [0.0, 0.0, 0.0, 1.0];\n          values.shininess = defaultValue(values.shininess, 0.0);\n        }\n      }\n\n      // These actually exist on the extension object, not the values object despite what's shown in the spec\n      materialsCommon.transparent = defaultValue(\n        materialsCommon.transparent,\n        false\n      );\n      materialsCommon.doubleSided = defaultValue(\n        materialsCommon.doubleSided,\n        false\n      );\n\n      return;\n    }\n\n    material.emissiveFactor = defaultValue(\n      material.emissiveFactor,\n      [0.0, 0.0, 0.0]\n    );\n    material.alphaMode = defaultValue(material.alphaMode, \"OPAQUE\");\n    material.doubleSided = defaultValue(material.doubleSided, false);\n\n    if (material.alphaMode === \"MASK\") {\n      material.alphaCutoff = defaultValue(material.alphaCutoff, 0.5);\n    }\n\n    const techniquesExtension = extensions.KHR_techniques_webgl;\n    if (defined(techniquesExtension)) {\n      ForEach.materialValue(material, function (materialValue) {\n        // Check if material value is a TextureInfo object\n        if (defined(materialValue.index)) {\n          addTextureDefaults(materialValue);\n        }\n      });\n    }\n\n    addTextureDefaults(material.emissiveTexture);\n    addTextureDefaults(material.normalTexture);\n    addTextureDefaults(material.occlusionTexture);\n\n    const pbrMetallicRoughness = material.pbrMetallicRoughness;\n    if (defined(pbrMetallicRoughness)) {\n      pbrMetallicRoughness.baseColorFactor = defaultValue(\n        pbrMetallicRoughness.baseColorFactor,\n        [1.0, 1.0, 1.0, 1.0]\n      );\n      pbrMetallicRoughness.metallicFactor = defaultValue(\n        pbrMetallicRoughness.metallicFactor,\n        1.0\n      );\n      pbrMetallicRoughness.roughnessFactor = defaultValue(\n        pbrMetallicRoughness.roughnessFactor,\n        1.0\n      );\n      addTextureDefaults(pbrMetallicRoughness.baseColorTexture);\n      addTextureDefaults(pbrMetallicRoughness.metallicRoughnessTexture);\n    }\n\n    const pbrSpecularGlossiness =\n      extensions.KHR_materials_pbrSpecularGlossiness;\n    if (defined(pbrSpecularGlossiness)) {\n      pbrSpecularGlossiness.diffuseFactor = defaultValue(\n        pbrSpecularGlossiness.diffuseFactor,\n        [1.0, 1.0, 1.0, 1.0]\n      );\n      pbrSpecularGlossiness.specularFactor = defaultValue(\n        pbrSpecularGlossiness.specularFactor,\n        [1.0, 1.0, 1.0]\n      );\n      pbrSpecularGlossiness.glossinessFactor = defaultValue(\n        pbrSpecularGlossiness.glossinessFactor,\n        1.0\n      );\n      addTextureDefaults(pbrSpecularGlossiness.specularGlossinessTexture);\n    }\n  });\n\n  ForEach.animation(gltf, function (animation) {\n    ForEach.animationSampler(animation, function (sampler) {\n      sampler.interpolation = defaultValue(sampler.interpolation, \"LINEAR\");\n    });\n  });\n\n  const animatedNodes = getAnimatedNodes(gltf);\n  ForEach.node(gltf, function (node, id) {\n    const animated = defined(animatedNodes[id]);\n    if (\n      animated ||\n      defined(node.translation) ||\n      defined(node.rotation) ||\n      defined(node.scale)\n    ) {\n      node.translation = defaultValue(node.translation, [0.0, 0.0, 0.0]);\n      node.rotation = defaultValue(node.rotation, [0.0, 0.0, 0.0, 1.0]);\n      node.scale = defaultValue(node.scale, [1.0, 1.0, 1.0]);\n    } else {\n      node.matrix = defaultValue(\n        node.matrix,\n        [\n          1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,\n          0.0, 1.0,\n        ]\n      );\n    }\n  });\n\n  ForEach.sampler(gltf, function (sampler) {\n    sampler.wrapS = defaultValue(sampler.wrapS, WebGLConstants.REPEAT);\n    sampler.wrapT = defaultValue(sampler.wrapT, WebGLConstants.REPEAT);\n  });\n\n  if (defined(gltf.scenes) && !defined(gltf.scene)) {\n    gltf.scene = 0;\n  }\n\n  return gltf;\n}\n\nfunction getAnimatedNodes(gltf) {\n  const nodes = {};\n  ForEach.animation(gltf, function (animation) {\n    ForEach.animationChannel(animation, function (channel) {\n      const target = channel.target;\n      const nodeId = target.node;\n      const path = target.path;\n      // Ignore animations that target 'weights'\n      if (path === \"translation\" || path === \"rotation\" || path === \"scale\") {\n        nodes[nodeId] = true;\n      }\n    });\n  });\n  return nodes;\n}\n\nfunction addTextureDefaults(texture) {\n  if (defined(texture)) {\n    texture.texCoord = defaultValue(texture.texCoord, 0);\n  }\n}\n\nexport default addDefaults;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}