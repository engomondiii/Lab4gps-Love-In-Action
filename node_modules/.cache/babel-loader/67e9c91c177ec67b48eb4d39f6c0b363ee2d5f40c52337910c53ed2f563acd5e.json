{"ast":null,"code":"import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * Describes geometry representing a plane centered at the origin, with a unit width and length.\n *\n * @alias PlaneGeometry\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @example\n * const planeGeometry = new Cesium.PlaneGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n * });\n */\nfunction PlaneGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._vertexFormat = vertexFormat;\n  this._workerName = \"createPlaneGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nPlaneGeometry.packedLength = VertexFormat.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PlaneGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nPlaneGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  return array;\n};\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  vertexFormat: scratchVertexFormat\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PlaneGeometry} [result] The object into which to store the result.\n * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\n */\nPlaneGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  const vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n  if (!defined(result)) {\n    return new PlaneGeometry(scratchOptions);\n  }\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  return result;\n};\nconst min = new Cartesian3(-0.5, -0.5, 0.0);\nconst max = new Cartesian3(0.5, 0.5, 0.0);\n\n/**\n * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\n *\n * @param {PlaneGeometry} planeGeometry A description of the plane.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPlaneGeometry.createGeometry = function (planeGeometry) {\n  const vertexFormat = planeGeometry._vertexFormat;\n  const attributes = new GeometryAttributes();\n  let indices;\n  let positions;\n  if (vertexFormat.position) {\n    // 4 corner points.  Duplicated 3 times each for each incident edge/face.\n    positions = new Float64Array(4 * 3);\n\n    // +z face\n    positions[0] = min.x;\n    positions[1] = min.y;\n    positions[2] = 0.0;\n    positions[3] = max.x;\n    positions[4] = min.y;\n    positions[5] = 0.0;\n    positions[6] = max.x;\n    positions[7] = max.y;\n    positions[8] = 0.0;\n    positions[9] = min.x;\n    positions[10] = max.y;\n    positions[11] = 0.0;\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions\n    });\n    if (vertexFormat.normal) {\n      const normals = new Float32Array(4 * 3);\n\n      // +z face\n      normals[0] = 0.0;\n      normals[1] = 0.0;\n      normals[2] = 1.0;\n      normals[3] = 0.0;\n      normals[4] = 0.0;\n      normals[5] = 1.0;\n      normals[6] = 0.0;\n      normals[7] = 0.0;\n      normals[8] = 1.0;\n      normals[9] = 0.0;\n      normals[10] = 0.0;\n      normals[11] = 1.0;\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals\n      });\n    }\n    if (vertexFormat.st) {\n      const texCoords = new Float32Array(4 * 2);\n\n      // +z face\n      texCoords[0] = 0.0;\n      texCoords[1] = 0.0;\n      texCoords[2] = 1.0;\n      texCoords[3] = 0.0;\n      texCoords[4] = 1.0;\n      texCoords[5] = 1.0;\n      texCoords[6] = 0.0;\n      texCoords[7] = 1.0;\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: texCoords\n      });\n    }\n    if (vertexFormat.tangent) {\n      const tangents = new Float32Array(4 * 3);\n\n      // +z face\n      tangents[0] = 1.0;\n      tangents[1] = 0.0;\n      tangents[2] = 0.0;\n      tangents[3] = 1.0;\n      tangents[4] = 0.0;\n      tangents[5] = 0.0;\n      tangents[6] = 1.0;\n      tangents[7] = 0.0;\n      tangents[8] = 0.0;\n      tangents[9] = 1.0;\n      tangents[10] = 0.0;\n      tangents[11] = 0.0;\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents\n      });\n    }\n    if (vertexFormat.bitangent) {\n      const bitangents = new Float32Array(4 * 3);\n\n      // +z face\n      bitangents[0] = 0.0;\n      bitangents[1] = 1.0;\n      bitangents[2] = 0.0;\n      bitangents[3] = 0.0;\n      bitangents[4] = 1.0;\n      bitangents[5] = 0.0;\n      bitangents[6] = 0.0;\n      bitangents[7] = 1.0;\n      bitangents[8] = 0.0;\n      bitangents[9] = 0.0;\n      bitangents[10] = 1.0;\n      bitangents[11] = 0.0;\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents\n      });\n    }\n\n    // 2 triangles\n    indices = new Uint16Array(2 * 3);\n\n    // +z face\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n  }\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\n  });\n};\nexport default PlaneGeometry;","map":{"version":3,"names":["BoundingSphere","Cartesian3","Check","ComponentDatatype","defaultValue","defined","Geometry","GeometryAttribute","GeometryAttributes","PrimitiveType","VertexFormat","PlaneGeometry","options","EMPTY_OBJECT","vertexFormat","DEFAULT","_vertexFormat","_workerName","packedLength","pack","value","array","startingIndex","typeOf","object","scratchVertexFormat","scratchOptions","unpack","result","clone","min","max","createGeometry","planeGeometry","attributes","indices","positions","position","Float64Array","x","y","componentDatatype","DOUBLE","componentsPerAttribute","values","normal","normals","Float32Array","FLOAT","st","texCoords","tangent","tangents","bitangent","bitangents","Uint16Array","primitiveType","TRIANGLES","boundingSphere","ZERO","Math","sqrt"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/PlaneGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * Describes geometry representing a plane centered at the origin, with a unit width and length.\n *\n * @alias PlaneGeometry\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @example\n * const planeGeometry = new Cesium.PlaneGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n * });\n */\nfunction PlaneGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n  this._vertexFormat = vertexFormat;\n  this._workerName = \"createPlaneGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nPlaneGeometry.packedLength = VertexFormat.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PlaneGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nPlaneGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n\n  return array;\n};\n\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  vertexFormat: scratchVertexFormat,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PlaneGeometry} [result] The object into which to store the result.\n * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\n */\nPlaneGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat,\n  );\n\n  if (!defined(result)) {\n    return new PlaneGeometry(scratchOptions);\n  }\n\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n\n  return result;\n};\n\nconst min = new Cartesian3(-0.5, -0.5, 0.0);\nconst max = new Cartesian3(0.5, 0.5, 0.0);\n\n/**\n * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\n *\n * @param {PlaneGeometry} planeGeometry A description of the plane.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPlaneGeometry.createGeometry = function (planeGeometry) {\n  const vertexFormat = planeGeometry._vertexFormat;\n\n  const attributes = new GeometryAttributes();\n  let indices;\n  let positions;\n\n  if (vertexFormat.position) {\n    // 4 corner points.  Duplicated 3 times each for each incident edge/face.\n    positions = new Float64Array(4 * 3);\n\n    // +z face\n    positions[0] = min.x;\n    positions[1] = min.y;\n    positions[2] = 0.0;\n    positions[3] = max.x;\n    positions[4] = min.y;\n    positions[5] = 0.0;\n    positions[6] = max.x;\n    positions[7] = max.y;\n    positions[8] = 0.0;\n    positions[9] = min.x;\n    positions[10] = max.y;\n    positions[11] = 0.0;\n\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n\n    if (vertexFormat.normal) {\n      const normals = new Float32Array(4 * 3);\n\n      // +z face\n      normals[0] = 0.0;\n      normals[1] = 0.0;\n      normals[2] = 1.0;\n      normals[3] = 0.0;\n      normals[4] = 0.0;\n      normals[5] = 1.0;\n      normals[6] = 0.0;\n      normals[7] = 0.0;\n      normals[8] = 1.0;\n      normals[9] = 0.0;\n      normals[10] = 0.0;\n      normals[11] = 1.0;\n\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.st) {\n      const texCoords = new Float32Array(4 * 2);\n\n      // +z face\n      texCoords[0] = 0.0;\n      texCoords[1] = 0.0;\n      texCoords[2] = 1.0;\n      texCoords[3] = 0.0;\n      texCoords[4] = 1.0;\n      texCoords[5] = 1.0;\n      texCoords[6] = 0.0;\n      texCoords[7] = 1.0;\n\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: texCoords,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      const tangents = new Float32Array(4 * 3);\n\n      // +z face\n      tangents[0] = 1.0;\n      tangents[1] = 0.0;\n      tangents[2] = 0.0;\n      tangents[3] = 1.0;\n      tangents[4] = 0.0;\n      tangents[5] = 0.0;\n      tangents[6] = 1.0;\n      tangents[7] = 0.0;\n      tangents[8] = 0.0;\n      tangents[9] = 1.0;\n      tangents[10] = 0.0;\n      tangents[11] = 0.0;\n\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      const bitangents = new Float32Array(4 * 3);\n\n      // +z face\n      bitangents[0] = 0.0;\n      bitangents[1] = 1.0;\n      bitangents[2] = 0.0;\n      bitangents[3] = 0.0;\n      bitangents[4] = 1.0;\n      bitangents[5] = 0.0;\n      bitangents[6] = 0.0;\n      bitangents[7] = 1.0;\n      bitangents[8] = 0.0;\n      bitangents[9] = 0.0;\n      bitangents[10] = 1.0;\n      bitangents[11] = 0.0;\n\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n\n    // 2 triangles\n    indices = new Uint16Array(2 * 3);\n\n    // +z face\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0)),\n  });\n};\nexport default PlaneGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}