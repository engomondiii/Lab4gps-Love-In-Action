{"ast":null,"code":"import Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\nconst scratchCartesian1 = new Cartesian3();\nconst scratchCartesian2 = new Cartesian3();\nconst scratchCartesian3 = new Cartesian3();\n\n/**\n * Computes the barycentric coordinates for a point with respect to a triangle.\n *\n * @function\n *\n * @param {Cartesian2|Cartesian3} point The point to test.\n * @param {Cartesian2|Cartesian3} p0 The first point of the triangle, corresponding to the barycentric x-axis.\n * @param {Cartesian2|Cartesian3} p1 The second point of the triangle, corresponding to the barycentric y-axis.\n * @param {Cartesian2|Cartesian3} p2 The third point of the triangle, corresponding to the barycentric z-axis.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3|undefined} The modified result parameter or a new Cartesian3 instance if one was not provided. If the triangle is degenerate the function will return undefined.\n *\n * @example\n * // Returns Cartesian3.UNIT_X\n * const p = new Cesium.Cartesian3(-1.0, 0.0, 0.0);\n * const b = Cesium.barycentricCoordinates(p,\n *   new Cesium.Cartesian3(-1.0, 0.0, 0.0),\n *   new Cesium.Cartesian3( 1.0, 0.0, 0.0),\n *   new Cesium.Cartesian3( 0.0, 1.0, 1.0));\n */\nfunction barycentricCoordinates(point, p0, p1, p2, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"point\", point);\n  Check.defined(\"p0\", p0);\n  Check.defined(\"p1\", p1);\n  Check.defined(\"p2\", p2);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  // Implementation based on http://www.blackpawn.com/texts/pointinpoly/default.html.\n  let v0;\n  let v1;\n  let v2;\n  let dot00;\n  let dot01;\n  let dot02;\n  let dot11;\n  let dot12;\n  if (!defined(p0.z)) {\n    if (Cartesian2.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_X, result);\n    }\n    if (Cartesian2.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Y, result);\n    }\n    if (Cartesian2.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Z, result);\n    }\n    v0 = Cartesian2.subtract(p1, p0, scratchCartesian1);\n    v1 = Cartesian2.subtract(p2, p0, scratchCartesian2);\n    v2 = Cartesian2.subtract(point, p0, scratchCartesian3);\n    dot00 = Cartesian2.dot(v0, v0);\n    dot01 = Cartesian2.dot(v0, v1);\n    dot02 = Cartesian2.dot(v0, v2);\n    dot11 = Cartesian2.dot(v1, v1);\n    dot12 = Cartesian2.dot(v1, v2);\n  } else {\n    if (Cartesian3.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_X, result);\n    }\n    if (Cartesian3.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Y, result);\n    }\n    if (Cartesian3.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Z, result);\n    }\n    v0 = Cartesian3.subtract(p1, p0, scratchCartesian1);\n    v1 = Cartesian3.subtract(p2, p0, scratchCartesian2);\n    v2 = Cartesian3.subtract(point, p0, scratchCartesian3);\n    dot00 = Cartesian3.dot(v0, v0);\n    dot01 = Cartesian3.dot(v0, v1);\n    dot02 = Cartesian3.dot(v0, v2);\n    dot11 = Cartesian3.dot(v1, v1);\n    dot12 = Cartesian3.dot(v1, v2);\n  }\n  result.y = dot11 * dot02 - dot01 * dot12;\n  result.z = dot00 * dot12 - dot01 * dot02;\n  const q = dot00 * dot11 - dot01 * dot01;\n\n  // Triangle is degenerate\n  if (q === 0) {\n    return undefined;\n  }\n  result.y /= q;\n  result.z /= q;\n  result.x = 1.0 - result.y - result.z;\n  return result;\n}\nexport default barycentricCoordinates;","map":{"version":3,"names":["Cartesian2","Cartesian3","Check","defined","CesiumMath","scratchCartesian1","scratchCartesian2","scratchCartesian3","barycentricCoordinates","point","p0","p1","p2","result","v0","v1","v2","dot00","dot01","dot02","dot11","dot12","z","equalsEpsilon","EPSILON14","clone","UNIT_X","UNIT_Y","UNIT_Z","subtract","dot","y","q","undefined","x"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/barycentricCoordinates.js"],"sourcesContent":["import Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\n\nconst scratchCartesian1 = new Cartesian3();\nconst scratchCartesian2 = new Cartesian3();\nconst scratchCartesian3 = new Cartesian3();\n\n/**\n * Computes the barycentric coordinates for a point with respect to a triangle.\n *\n * @function\n *\n * @param {Cartesian2|Cartesian3} point The point to test.\n * @param {Cartesian2|Cartesian3} p0 The first point of the triangle, corresponding to the barycentric x-axis.\n * @param {Cartesian2|Cartesian3} p1 The second point of the triangle, corresponding to the barycentric y-axis.\n * @param {Cartesian2|Cartesian3} p2 The third point of the triangle, corresponding to the barycentric z-axis.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3|undefined} The modified result parameter or a new Cartesian3 instance if one was not provided. If the triangle is degenerate the function will return undefined.\n *\n * @example\n * // Returns Cartesian3.UNIT_X\n * const p = new Cesium.Cartesian3(-1.0, 0.0, 0.0);\n * const b = Cesium.barycentricCoordinates(p,\n *   new Cesium.Cartesian3(-1.0, 0.0, 0.0),\n *   new Cesium.Cartesian3( 1.0, 0.0, 0.0),\n *   new Cesium.Cartesian3( 0.0, 1.0, 1.0));\n */\nfunction barycentricCoordinates(point, p0, p1, p2, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"point\", point);\n  Check.defined(\"p0\", p0);\n  Check.defined(\"p1\", p1);\n  Check.defined(\"p2\", p2);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  // Implementation based on http://www.blackpawn.com/texts/pointinpoly/default.html.\n  let v0;\n  let v1;\n  let v2;\n  let dot00;\n  let dot01;\n  let dot02;\n  let dot11;\n  let dot12;\n\n  if (!defined(p0.z)) {\n    if (Cartesian2.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_X, result);\n    }\n    if (Cartesian2.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Y, result);\n    }\n    if (Cartesian2.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Z, result);\n    }\n\n    v0 = Cartesian2.subtract(p1, p0, scratchCartesian1);\n    v1 = Cartesian2.subtract(p2, p0, scratchCartesian2);\n    v2 = Cartesian2.subtract(point, p0, scratchCartesian3);\n\n    dot00 = Cartesian2.dot(v0, v0);\n    dot01 = Cartesian2.dot(v0, v1);\n    dot02 = Cartesian2.dot(v0, v2);\n    dot11 = Cartesian2.dot(v1, v1);\n    dot12 = Cartesian2.dot(v1, v2);\n  } else {\n    if (Cartesian3.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_X, result);\n    }\n    if (Cartesian3.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Y, result);\n    }\n    if (Cartesian3.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Z, result);\n    }\n\n    v0 = Cartesian3.subtract(p1, p0, scratchCartesian1);\n    v1 = Cartesian3.subtract(p2, p0, scratchCartesian2);\n    v2 = Cartesian3.subtract(point, p0, scratchCartesian3);\n\n    dot00 = Cartesian3.dot(v0, v0);\n    dot01 = Cartesian3.dot(v0, v1);\n    dot02 = Cartesian3.dot(v0, v2);\n    dot11 = Cartesian3.dot(v1, v1);\n    dot12 = Cartesian3.dot(v1, v2);\n  }\n\n  result.y = dot11 * dot02 - dot01 * dot12;\n  result.z = dot00 * dot12 - dot01 * dot02;\n  const q = dot00 * dot11 - dot01 * dot01;\n\n  // Triangle is degenerate\n  if (q === 0) {\n    return undefined;\n  }\n\n  result.y /= q;\n  result.z /= q;\n  result.x = 1.0 - result.y - result.z;\n  return result;\n}\nexport default barycentricCoordinates;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,iBAAiB;AACxC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,UAAU,MAAM,WAAW;AAElC,MAAMC,iBAAiB,GAAG,IAAIJ,UAAU,CAAC,CAAC;AAC1C,MAAMK,iBAAiB,GAAG,IAAIL,UAAU,CAAC,CAAC;AAC1C,MAAMM,iBAAiB,GAAG,IAAIN,UAAU,CAAC,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,sBAAsBA,CAACC,KAAK,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,MAAM,EAAE;EACzD;EACAX,KAAK,CAACC,OAAO,CAAC,OAAO,EAAEM,KAAK,CAAC;EAC7BP,KAAK,CAACC,OAAO,CAAC,IAAI,EAAEO,EAAE,CAAC;EACvBR,KAAK,CAACC,OAAO,CAAC,IAAI,EAAEQ,EAAE,CAAC;EACvBT,KAAK,CAACC,OAAO,CAAC,IAAI,EAAES,EAAE,CAAC;EACvB;;EAEA,IAAI,CAACT,OAAO,CAACU,MAAM,CAAC,EAAE;IACpBA,MAAM,GAAG,IAAIZ,UAAU,CAAC,CAAC;EAC3B;;EAEA;EACA,IAAIa,EAAE;EACN,IAAIC,EAAE;EACN,IAAIC,EAAE;EACN,IAAIC,KAAK;EACT,IAAIC,KAAK;EACT,IAAIC,KAAK;EACT,IAAIC,KAAK;EACT,IAAIC,KAAK;EAET,IAAI,CAAClB,OAAO,CAACO,EAAE,CAACY,CAAC,CAAC,EAAE;IAClB,IAAItB,UAAU,CAACuB,aAAa,CAACd,KAAK,EAAEC,EAAE,EAAEN,UAAU,CAACoB,SAAS,CAAC,EAAE;MAC7D,OAAOvB,UAAU,CAACwB,KAAK,CAACxB,UAAU,CAACyB,MAAM,EAAEb,MAAM,CAAC;IACpD;IACA,IAAIb,UAAU,CAACuB,aAAa,CAACd,KAAK,EAAEE,EAAE,EAAEP,UAAU,CAACoB,SAAS,CAAC,EAAE;MAC7D,OAAOvB,UAAU,CAACwB,KAAK,CAACxB,UAAU,CAAC0B,MAAM,EAAEd,MAAM,CAAC;IACpD;IACA,IAAIb,UAAU,CAACuB,aAAa,CAACd,KAAK,EAAEG,EAAE,EAAER,UAAU,CAACoB,SAAS,CAAC,EAAE;MAC7D,OAAOvB,UAAU,CAACwB,KAAK,CAACxB,UAAU,CAAC2B,MAAM,EAAEf,MAAM,CAAC;IACpD;IAEAC,EAAE,GAAGd,UAAU,CAAC6B,QAAQ,CAAClB,EAAE,EAAED,EAAE,EAAEL,iBAAiB,CAAC;IACnDU,EAAE,GAAGf,UAAU,CAAC6B,QAAQ,CAACjB,EAAE,EAAEF,EAAE,EAAEJ,iBAAiB,CAAC;IACnDU,EAAE,GAAGhB,UAAU,CAAC6B,QAAQ,CAACpB,KAAK,EAAEC,EAAE,EAAEH,iBAAiB,CAAC;IAEtDU,KAAK,GAAGjB,UAAU,CAAC8B,GAAG,CAAChB,EAAE,EAAEA,EAAE,CAAC;IAC9BI,KAAK,GAAGlB,UAAU,CAAC8B,GAAG,CAAChB,EAAE,EAAEC,EAAE,CAAC;IAC9BI,KAAK,GAAGnB,UAAU,CAAC8B,GAAG,CAAChB,EAAE,EAAEE,EAAE,CAAC;IAC9BI,KAAK,GAAGpB,UAAU,CAAC8B,GAAG,CAACf,EAAE,EAAEA,EAAE,CAAC;IAC9BM,KAAK,GAAGrB,UAAU,CAAC8B,GAAG,CAACf,EAAE,EAAEC,EAAE,CAAC;EAChC,CAAC,MAAM;IACL,IAAIf,UAAU,CAACsB,aAAa,CAACd,KAAK,EAAEC,EAAE,EAAEN,UAAU,CAACoB,SAAS,CAAC,EAAE;MAC7D,OAAOvB,UAAU,CAACwB,KAAK,CAACxB,UAAU,CAACyB,MAAM,EAAEb,MAAM,CAAC;IACpD;IACA,IAAIZ,UAAU,CAACsB,aAAa,CAACd,KAAK,EAAEE,EAAE,EAAEP,UAAU,CAACoB,SAAS,CAAC,EAAE;MAC7D,OAAOvB,UAAU,CAACwB,KAAK,CAACxB,UAAU,CAAC0B,MAAM,EAAEd,MAAM,CAAC;IACpD;IACA,IAAIZ,UAAU,CAACsB,aAAa,CAACd,KAAK,EAAEG,EAAE,EAAER,UAAU,CAACoB,SAAS,CAAC,EAAE;MAC7D,OAAOvB,UAAU,CAACwB,KAAK,CAACxB,UAAU,CAAC2B,MAAM,EAAEf,MAAM,CAAC;IACpD;IAEAC,EAAE,GAAGb,UAAU,CAAC4B,QAAQ,CAAClB,EAAE,EAAED,EAAE,EAAEL,iBAAiB,CAAC;IACnDU,EAAE,GAAGd,UAAU,CAAC4B,QAAQ,CAACjB,EAAE,EAAEF,EAAE,EAAEJ,iBAAiB,CAAC;IACnDU,EAAE,GAAGf,UAAU,CAAC4B,QAAQ,CAACpB,KAAK,EAAEC,EAAE,EAAEH,iBAAiB,CAAC;IAEtDU,KAAK,GAAGhB,UAAU,CAAC6B,GAAG,CAAChB,EAAE,EAAEA,EAAE,CAAC;IAC9BI,KAAK,GAAGjB,UAAU,CAAC6B,GAAG,CAAChB,EAAE,EAAEC,EAAE,CAAC;IAC9BI,KAAK,GAAGlB,UAAU,CAAC6B,GAAG,CAAChB,EAAE,EAAEE,EAAE,CAAC;IAC9BI,KAAK,GAAGnB,UAAU,CAAC6B,GAAG,CAACf,EAAE,EAAEA,EAAE,CAAC;IAC9BM,KAAK,GAAGpB,UAAU,CAAC6B,GAAG,CAACf,EAAE,EAAEC,EAAE,CAAC;EAChC;EAEAH,MAAM,CAACkB,CAAC,GAAGX,KAAK,GAAGD,KAAK,GAAGD,KAAK,GAAGG,KAAK;EACxCR,MAAM,CAACS,CAAC,GAAGL,KAAK,GAAGI,KAAK,GAAGH,KAAK,GAAGC,KAAK;EACxC,MAAMa,CAAC,GAAGf,KAAK,GAAGG,KAAK,GAAGF,KAAK,GAAGA,KAAK;;EAEvC;EACA,IAAIc,CAAC,KAAK,CAAC,EAAE;IACX,OAAOC,SAAS;EAClB;EAEApB,MAAM,CAACkB,CAAC,IAAIC,CAAC;EACbnB,MAAM,CAACS,CAAC,IAAIU,CAAC;EACbnB,MAAM,CAACqB,CAAC,GAAG,GAAG,GAAGrB,MAAM,CAACkB,CAAC,GAAGlB,MAAM,CAACS,CAAC;EACpC,OAAOT,MAAM;AACf;AACA,eAAeL,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}