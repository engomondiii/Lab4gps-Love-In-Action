{"ast":null,"code":"import combine from \"../../Core/combine.js\";\nimport ModelSplitterStageFS from \"../../Shaders/Model/ModelSplitterStageFS.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\n\n/**\n * The model splitting pipeline stage is responsible for discarding fragments on the wrong side of the splitter.\n *\n * @namespace ModelSplitterPipelineStage\n *\n * @private\n */\nconst ModelSplitterPipelineStage = {\n  name: \"ModelSplitterPipelineStage\",\n  // Helps with debugging\n\n  SPLIT_DIRECTION_UNIFORM_NAME: \"model_splitDirection\"\n};\n\n/**\n * Process a model. This modifies the following parts of the render resources:\n *\n * <ul>\n *  <li>adds a define to the fragment shader to indicate that the model is split</li>\n *  <li>adds a function to the fragment shader to discard the fragment if it's on the wrong side of the splitter.</li>\n *  <li>adds a uniform indicating the \"splitDirection\" (side of the screen on which to show the model)\n *</ul>\n *\n * @param {ModelRenderResources} renderResources The render resources for this model.\n * @param {Model} model The model.\n * @param {FrameState} frameState The frameState.\n *\n * @private\n */\nModelSplitterPipelineStage.process = function (renderResources, model, frameState) {\n  const shaderBuilder = renderResources.shaderBuilder;\n  shaderBuilder.addDefine(\"HAS_MODEL_SPLITTER\", undefined, ShaderDestination.FRAGMENT);\n  shaderBuilder.addFragmentLines(ModelSplitterStageFS);\n  const stageUniforms = {};\n  shaderBuilder.addUniform(\"float\", ModelSplitterPipelineStage.SPLIT_DIRECTION_UNIFORM_NAME, ShaderDestination.FRAGMENT);\n  stageUniforms[ModelSplitterPipelineStage.SPLIT_DIRECTION_UNIFORM_NAME] = function () {\n    return model.splitDirection;\n  };\n  renderResources.uniformMap = combine(stageUniforms, renderResources.uniformMap);\n};\nexport default ModelSplitterPipelineStage;","map":{"version":3,"names":["combine","ModelSplitterStageFS","ShaderDestination","ModelSplitterPipelineStage","name","SPLIT_DIRECTION_UNIFORM_NAME","process","renderResources","model","frameState","shaderBuilder","addDefine","undefined","FRAGMENT","addFragmentLines","stageUniforms","addUniform","splitDirection","uniformMap"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/ModelSplitterPipelineStage.js"],"sourcesContent":["import combine from \"../../Core/combine.js\";\nimport ModelSplitterStageFS from \"../../Shaders/Model/ModelSplitterStageFS.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\n\n/**\n * The model splitting pipeline stage is responsible for discarding fragments on the wrong side of the splitter.\n *\n * @namespace ModelSplitterPipelineStage\n *\n * @private\n */\nconst ModelSplitterPipelineStage = {\n  name: \"ModelSplitterPipelineStage\", // Helps with debugging\n\n  SPLIT_DIRECTION_UNIFORM_NAME: \"model_splitDirection\",\n};\n\n/**\n * Process a model. This modifies the following parts of the render resources:\n *\n * <ul>\n *  <li>adds a define to the fragment shader to indicate that the model is split</li>\n *  <li>adds a function to the fragment shader to discard the fragment if it's on the wrong side of the splitter.</li>\n *  <li>adds a uniform indicating the \"splitDirection\" (side of the screen on which to show the model)\n *</ul>\n *\n * @param {ModelRenderResources} renderResources The render resources for this model.\n * @param {Model} model The model.\n * @param {FrameState} frameState The frameState.\n *\n * @private\n */\nModelSplitterPipelineStage.process = function (\n  renderResources,\n  model,\n  frameState,\n) {\n  const shaderBuilder = renderResources.shaderBuilder;\n\n  shaderBuilder.addDefine(\n    \"HAS_MODEL_SPLITTER\",\n    undefined,\n    ShaderDestination.FRAGMENT,\n  );\n  shaderBuilder.addFragmentLines(ModelSplitterStageFS);\n\n  const stageUniforms = {};\n\n  shaderBuilder.addUniform(\n    \"float\",\n    ModelSplitterPipelineStage.SPLIT_DIRECTION_UNIFORM_NAME,\n    ShaderDestination.FRAGMENT,\n  );\n  stageUniforms[ModelSplitterPipelineStage.SPLIT_DIRECTION_UNIFORM_NAME] =\n    function () {\n      return model.splitDirection;\n    };\n\n  renderResources.uniformMap = combine(\n    stageUniforms,\n    renderResources.uniformMap,\n  );\n};\n\nexport default ModelSplitterPipelineStage;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,oBAAoB,MAAM,6CAA6C;AAC9E,OAAOC,iBAAiB,MAAM,qCAAqC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,GAAG;EACjCC,IAAI,EAAE,4BAA4B;EAAE;;EAEpCC,4BAA4B,EAAE;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,0BAA0B,CAACG,OAAO,GAAG,UACnCC,eAAe,EACfC,KAAK,EACLC,UAAU,EACV;EACA,MAAMC,aAAa,GAAGH,eAAe,CAACG,aAAa;EAEnDA,aAAa,CAACC,SAAS,CACrB,oBAAoB,EACpBC,SAAS,EACTV,iBAAiB,CAACW,QACpB,CAAC;EACDH,aAAa,CAACI,gBAAgB,CAACb,oBAAoB,CAAC;EAEpD,MAAMc,aAAa,GAAG,CAAC,CAAC;EAExBL,aAAa,CAACM,UAAU,CACtB,OAAO,EACPb,0BAA0B,CAACE,4BAA4B,EACvDH,iBAAiB,CAACW,QACpB,CAAC;EACDE,aAAa,CAACZ,0BAA0B,CAACE,4BAA4B,CAAC,GACpE,YAAY;IACV,OAAOG,KAAK,CAACS,cAAc;EAC7B,CAAC;EAEHV,eAAe,CAACW,UAAU,GAAGlB,OAAO,CAClCe,aAAa,EACbR,eAAe,CAACW,UAClB,CAAC;AACH,CAAC;AAED,eAAef,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}