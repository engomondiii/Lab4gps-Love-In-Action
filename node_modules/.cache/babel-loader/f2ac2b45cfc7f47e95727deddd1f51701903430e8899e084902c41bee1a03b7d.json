{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"// See IntersectionUtils.glsl for the definitions of Ray, Intersections,\\n\\\n// setIntersectionPair, INF_HIT, NO_HIT\\n\\\n\\n\\\n/* intersectDepth defines (set in Scene/VoxelRenderResources.js)\\n\\\n#define DEPTH_INTERSECTION_INDEX ###\\n\\\n*/\\n\\\n\\n\\\nuniform mat4 u_transformPositionViewToUv;\\n\\\n\\n\\\nvoid intersectDepth(in vec2 screenCoord, in Ray ray, inout Intersections ix) {\\n\\\n    float logDepthOrDepth = czm_unpackDepth(texture(czm_globeDepthTexture, screenCoord));\\n\\\n    if (logDepthOrDepth != 0.0) {\\n\\\n        // Calculate how far the ray must travel before it hits the depth buffer.\\n\\\n        vec4 eyeCoordinateDepth = czm_screenToEyeCoordinates(screenCoord, logDepthOrDepth);\\n\\\n        eyeCoordinateDepth /= eyeCoordinateDepth.w;\\n\\\n        vec3 depthPositionUv = vec3(u_transformPositionViewToUv * eyeCoordinateDepth);\\n\\\n        float t = dot(depthPositionUv - ray.pos, ray.dir);\\n\\\n        setIntersectionPair(ix, DEPTH_INTERSECTION_INDEX, vec2(t, +INF_HIT));\\n\\\n    } else {\\n\\\n        // There's no depth at this location.\\n\\\n        setIntersectionPair(ix, DEPTH_INTERSECTION_INDEX, vec2(NO_HIT));\\n\\\n    }\\n\\\n}\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Voxels/IntersectDepth.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"// See IntersectionUtils.glsl for the definitions of Ray, Intersections,\\n\\\n// setIntersectionPair, INF_HIT, NO_HIT\\n\\\n\\n\\\n/* intersectDepth defines (set in Scene/VoxelRenderResources.js)\\n\\\n#define DEPTH_INTERSECTION_INDEX ###\\n\\\n*/\\n\\\n\\n\\\nuniform mat4 u_transformPositionViewToUv;\\n\\\n\\n\\\nvoid intersectDepth(in vec2 screenCoord, in Ray ray, inout Intersections ix) {\\n\\\n    float logDepthOrDepth = czm_unpackDepth(texture(czm_globeDepthTexture, screenCoord));\\n\\\n    if (logDepthOrDepth != 0.0) {\\n\\\n        // Calculate how far the ray must travel before it hits the depth buffer.\\n\\\n        vec4 eyeCoordinateDepth = czm_screenToEyeCoordinates(screenCoord, logDepthOrDepth);\\n\\\n        eyeCoordinateDepth /= eyeCoordinateDepth.w;\\n\\\n        vec3 depthPositionUv = vec3(u_transformPositionViewToUv * eyeCoordinateDepth);\\n\\\n        float t = dot(depthPositionUv - ray.pos, ray.dir);\\n\\\n        setIntersectionPair(ix, DEPTH_INTERSECTION_INDEX, vec2(t, +INF_HIT));\\n\\\n    } else {\\n\\\n        // There's no depth at this location.\\n\\\n        setIntersectionPair(ix, DEPTH_INTERSECTION_INDEX, vec2(NO_HIT));\\n\\\n    }\\n\\\n}\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}