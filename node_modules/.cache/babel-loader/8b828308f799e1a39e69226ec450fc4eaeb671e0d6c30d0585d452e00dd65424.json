{"ast":null,"code":"import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nconst scratchPosition = new Cartesian3();\nconst scratchBR = new BoundingRectangle();\nconst stScratch = new Cartesian2();\nconst textureCoordinatesOrigin = new Cartesian2();\nconst scratchNormal = new Cartesian3();\nconst scratchTangent = new Cartesian3();\nconst scratchBitangent = new Cartesian3();\nconst centerScratch = new Cartesian3();\nconst axis1Scratch = new Cartesian3();\nconst axis2Scratch = new Cartesian3();\nconst quaternionScratch = new Quaternion();\nconst textureMatrixScratch = new Matrix3();\nconst tangentRotationScratch = new Matrix3();\nconst surfaceNormalScratch = new Cartesian3();\nfunction createGeometryFromPolygon(polygon, vertexFormat, boundingRectangle, stRotation, hardcodedTextureCoordinates, projectPointTo2D, normal, tangent, bitangent) {\n  const positions = polygon.positions;\n  let indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n  /* If polygon is completely unrenderable, just use the first three vertices */\n  if (indices.length < 3) {\n    indices = [0, 1, 2];\n  }\n  const newIndices = IndexDatatype.createTypedArray(positions.length, indices.length);\n  newIndices.set(indices);\n  let textureMatrix = textureMatrixScratch;\n  if (stRotation !== 0.0) {\n    let rotation = Quaternion.fromAxisAngle(normal, stRotation, quaternionScratch);\n    textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n    if (vertexFormat.tangent || vertexFormat.bitangent) {\n      rotation = Quaternion.fromAxisAngle(normal, -stRotation, quaternionScratch);\n      const tangentRotation = Matrix3.fromQuaternion(rotation, tangentRotationScratch);\n      tangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotation, tangent, tangent), tangent);\n      if (vertexFormat.bitangent) {\n        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n      }\n    }\n  } else {\n    textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n  }\n  const stOrigin = textureCoordinatesOrigin;\n  if (vertexFormat.st) {\n    stOrigin.x = boundingRectangle.x;\n    stOrigin.y = boundingRectangle.y;\n  }\n  const length = positions.length;\n  const size = length * 3;\n  const flatPositions = new Float64Array(size);\n  const normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  const tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  const bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n  const textureCoordinates = vertexFormat.st ? new Float32Array(length * 2) : undefined;\n  let positionIndex = 0;\n  let normalIndex = 0;\n  let bitangentIndex = 0;\n  let tangentIndex = 0;\n  let stIndex = 0;\n  for (let i = 0; i < length; i++) {\n    const position = positions[i];\n    flatPositions[positionIndex++] = position.x;\n    flatPositions[positionIndex++] = position.y;\n    flatPositions[positionIndex++] = position.z;\n    if (vertexFormat.st) {\n      if (defined(hardcodedTextureCoordinates) && hardcodedTextureCoordinates.positions.length === length) {\n        textureCoordinates[stIndex++] = hardcodedTextureCoordinates.positions[i].x;\n        textureCoordinates[stIndex++] = hardcodedTextureCoordinates.positions[i].y;\n      } else {\n        const p = Matrix3.multiplyByVector(textureMatrix, position, scratchPosition);\n        const st = projectPointTo2D(p, stScratch);\n        Cartesian2.subtract(st, stOrigin, st);\n        const stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n        const sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n        textureCoordinates[stIndex++] = stx;\n        textureCoordinates[stIndex++] = sty;\n      }\n    }\n    if (vertexFormat.normal) {\n      normals[normalIndex++] = normal.x;\n      normals[normalIndex++] = normal.y;\n      normals[normalIndex++] = normal.z;\n    }\n    if (vertexFormat.tangent) {\n      tangents[tangentIndex++] = tangent.x;\n      tangents[tangentIndex++] = tangent.y;\n      tangents[tangentIndex++] = tangent.z;\n    }\n    if (vertexFormat.bitangent) {\n      bitangents[bitangentIndex++] = bitangent.x;\n      bitangents[bitangentIndex++] = bitangent.y;\n      bitangents[bitangentIndex++] = bitangent.z;\n    }\n  }\n  const attributes = new GeometryAttributes();\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: flatPositions\n    });\n  }\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals\n    });\n  }\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents\n    });\n  }\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents\n    });\n  }\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates\n    });\n  }\n  return new Geometry({\n    attributes: attributes,\n    indices: newIndices,\n    primitiveType: PrimitiveType.TRIANGLES\n  });\n}\n\n/**\n * A description of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonGeometry\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid to be used as a reference.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points.\n *\n * @example\n * const polygonGeometry = new Cesium.CoplanarPolygonGeometry({\n *  polygonHierarchy: new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 300000.0,\n *      -80.0, 30.0, 300000.0,\n *      -80.0, 30.0, 0.0\n *   ]))\n * });\n *\n */\nfunction CoplanarPolygonGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const polygonHierarchy = options.polygonHierarchy;\n  const textureCoordinates = options.textureCoordinates;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\n  //>>includeEnd('debug');\n\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._polygonHierarchy = polygonHierarchy;\n  this._stRotation = defaultValue(options.stRotation, 0.0);\n  this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.default));\n  this._workerName = \"createCoplanarPolygonGeometry\";\n  this._textureCoordinates = textureCoordinates;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {number}\n   */\n  this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy, Cartesian3) + VertexFormat.packedLength + Ellipsoid.packedLength + (defined(textureCoordinates) ? PolygonGeometryLibrary.computeHierarchyPackedLength(textureCoordinates, Cartesian2) : 1) + 2;\n}\n\n/**\n * A description of a coplanar polygon from an array of positions.\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid to be used as a reference.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points.\n * @returns {CoplanarPolygonGeometry}\n *\n * @example\n * // create a polygon from points\n * const polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nCoplanarPolygonGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  const newOptions = {\n    polygonHierarchy: {\n      positions: options.positions\n    },\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    ellipsoid: options.ellipsoid,\n    textureCoordinates: options.textureCoordinates\n  };\n  return new CoplanarPolygonGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nCoplanarPolygonGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex, Cartesian3);\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n  array[startingIndex++] = value._stRotation;\n  if (defined(value._textureCoordinates)) {\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._textureCoordinates, array, startingIndex, Cartesian2);\n  } else {\n    array[startingIndex++] = -1.0;\n  }\n  array[startingIndex++] = value.packedLength;\n  return array;\n};\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  polygonHierarchy: {}\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\n */\nCoplanarPolygonGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  const polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex, Cartesian3);\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n  const vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n  startingIndex += VertexFormat.packedLength;\n  const stRotation = array[startingIndex++];\n  const textureCoordinates = array[startingIndex] === -1.0 ? undefined : PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex, Cartesian2);\n  if (defined(textureCoordinates)) {\n    startingIndex = textureCoordinates.startingIndex;\n    delete textureCoordinates.startingIndex;\n  } else {\n    startingIndex++;\n  }\n  const packedLength = array[startingIndex++];\n  if (!defined(result)) {\n    result = new CoplanarPolygonGeometry(scratchOptions);\n  }\n  result._polygonHierarchy = polygonHierarchy;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._stRotation = stRotation;\n  result._textureCoordinates = textureCoordinates;\n  result.packedLength = packedLength;\n  return result;\n};\n\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCoplanarPolygonGeometry.createGeometry = function (polygonGeometry) {\n  const vertexFormat = polygonGeometry._vertexFormat;\n  const polygonHierarchy = polygonGeometry._polygonHierarchy;\n  const stRotation = polygonGeometry._stRotation;\n  const textureCoordinates = polygonGeometry._textureCoordinates;\n  const hasTextureCoordinates = defined(textureCoordinates);\n  let outerPositions = polygonHierarchy.positions;\n  outerPositions = arrayRemoveDuplicates(outerPositions, Cartesian3.equalsEpsilon, true);\n  if (outerPositions.length < 3) {\n    return;\n  }\n  let normal = scratchNormal;\n  let tangent = scratchTangent;\n  let bitangent = scratchBitangent;\n  let axis1 = axis1Scratch;\n  const axis2 = axis2Scratch;\n  const validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(outerPositions, centerScratch, axis1, axis2);\n  if (!validGeometry) {\n    return undefined;\n  }\n  normal = Cartesian3.cross(axis1, axis2, normal);\n  normal = Cartesian3.normalize(normal, normal);\n  if (!Cartesian3.equalsEpsilon(centerScratch, Cartesian3.ZERO, CesiumMath.EPSILON6)) {\n    const surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(centerScratch, surfaceNormalScratch);\n    if (Cartesian3.dot(normal, surfaceNormal) < 0) {\n      normal = Cartesian3.negate(normal, normal);\n      axis1 = Cartesian3.negate(axis1, axis1);\n    }\n  }\n  const projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(centerScratch, axis1, axis2);\n  const projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(centerScratch, axis1, axis2);\n  if (vertexFormat.tangent) {\n    tangent = Cartesian3.clone(axis1, tangent);\n  }\n  if (vertexFormat.bitangent) {\n    bitangent = Cartesian3.clone(axis2, bitangent);\n  }\n  const results = PolygonGeometryLibrary.polygonsFromHierarchy(polygonHierarchy, hasTextureCoordinates, projectPoints, false);\n  const hierarchy = results.hierarchy;\n  const polygons = results.polygons;\n  const dummyFunction = function (identity) {\n    return identity;\n  };\n  const textureCoordinatePolygons = hasTextureCoordinates ? PolygonGeometryLibrary.polygonsFromHierarchy(textureCoordinates, true, dummyFunction, false).polygons : undefined;\n  if (hierarchy.length === 0) {\n    return;\n  }\n  outerPositions = hierarchy[0].outerRing;\n  const boundingSphere = BoundingSphere.fromPoints(outerPositions);\n  const boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(normal, projectPoint, outerPositions, stRotation, scratchBR);\n  const geometries = [];\n  for (let i = 0; i < polygons.length; i++) {\n    const geometryInstance = new GeometryInstance({\n      geometry: createGeometryFromPolygon(polygons[i], vertexFormat, boundingRectangle, stRotation, hasTextureCoordinates ? textureCoordinatePolygons[i] : undefined, projectPoint, normal, tangent, bitangent)\n    });\n    geometries.push(geometryInstance);\n  }\n  const geometry = GeometryPipeline.combineInstances(geometries)[0];\n  geometry.attributes.position.values = new Float64Array(geometry.attributes.position.values);\n  geometry.indices = IndexDatatype.createTypedArray(geometry.attributes.position.values.length / 3, geometry.indices);\n  const attributes = geometry.attributes;\n  if (!vertexFormat.position) {\n    delete attributes.position;\n  }\n  return new Geometry({\n    attributes: attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere\n  });\n};\nexport default CoplanarPolygonGeometry;","map":{"version":3,"names":["arrayRemoveDuplicates","BoundingRectangle","BoundingSphere","Cartesian2","Cartesian3","Check","ComponentDatatype","CoplanarPolygonGeometryLibrary","defaultValue","defined","Ellipsoid","Geometry","GeometryAttribute","GeometryAttributes","GeometryInstance","GeometryPipeline","IndexDatatype","CesiumMath","Matrix3","PolygonGeometryLibrary","PolygonPipeline","PrimitiveType","Quaternion","VertexFormat","scratchPosition","scratchBR","stScratch","textureCoordinatesOrigin","scratchNormal","scratchTangent","scratchBitangent","centerScratch","axis1Scratch","axis2Scratch","quaternionScratch","textureMatrixScratch","tangentRotationScratch","surfaceNormalScratch","createGeometryFromPolygon","polygon","vertexFormat","boundingRectangle","stRotation","hardcodedTextureCoordinates","projectPointTo2D","normal","tangent","bitangent","positions","indices","triangulate","positions2D","holes","length","newIndices","createTypedArray","set","textureMatrix","rotation","fromAxisAngle","fromQuaternion","tangentRotation","normalize","multiplyByVector","cross","clone","IDENTITY","stOrigin","st","x","y","size","flatPositions","Float64Array","normals","Float32Array","undefined","tangents","bitangents","textureCoordinates","positionIndex","normalIndex","bitangentIndex","tangentIndex","stIndex","i","position","z","p","subtract","stx","clamp","width","sty","height","attributes","componentDatatype","DOUBLE","componentsPerAttribute","values","FLOAT","primitiveType","TRIANGLES","CoplanarPolygonGeometry","options","EMPTY_OBJECT","polygonHierarchy","DEFAULT","_vertexFormat","_polygonHierarchy","_stRotation","_ellipsoid","ellipsoid","default","_workerName","_textureCoordinates","packedLength","computeHierarchyPackedLength","fromPositions","newOptions","pack","value","array","startingIndex","typeOf","object","packPolygonHierarchy","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","unpack","result","unpackPolygonHierarchy","createGeometry","polygonGeometry","hasTextureCoordinates","outerPositions","equalsEpsilon","axis1","axis2","validGeometry","computeProjectTo2DArguments","ZERO","EPSILON6","surfaceNormal","geodeticSurfaceNormal","dot","negate","projectPoints","createProjectPointsTo2DFunction","projectPoint","createProjectPointTo2DFunction","results","polygonsFromHierarchy","hierarchy","polygons","dummyFunction","identity","textureCoordinatePolygons","outerRing","boundingSphere","fromPoints","computeBoundingRectangle","geometries","geometryInstance","geometry","push","combineInstances"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/CoplanarPolygonGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nconst scratchPosition = new Cartesian3();\nconst scratchBR = new BoundingRectangle();\nconst stScratch = new Cartesian2();\nconst textureCoordinatesOrigin = new Cartesian2();\nconst scratchNormal = new Cartesian3();\nconst scratchTangent = new Cartesian3();\nconst scratchBitangent = new Cartesian3();\nconst centerScratch = new Cartesian3();\nconst axis1Scratch = new Cartesian3();\nconst axis2Scratch = new Cartesian3();\nconst quaternionScratch = new Quaternion();\nconst textureMatrixScratch = new Matrix3();\nconst tangentRotationScratch = new Matrix3();\nconst surfaceNormalScratch = new Cartesian3();\n\nfunction createGeometryFromPolygon(\n  polygon,\n  vertexFormat,\n  boundingRectangle,\n  stRotation,\n  hardcodedTextureCoordinates,\n  projectPointTo2D,\n  normal,\n  tangent,\n  bitangent,\n) {\n  const positions = polygon.positions;\n  let indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n  /* If polygon is completely unrenderable, just use the first three vertices */\n  if (indices.length < 3) {\n    indices = [0, 1, 2];\n  }\n\n  const newIndices = IndexDatatype.createTypedArray(\n    positions.length,\n    indices.length,\n  );\n  newIndices.set(indices);\n\n  let textureMatrix = textureMatrixScratch;\n  if (stRotation !== 0.0) {\n    let rotation = Quaternion.fromAxisAngle(\n      normal,\n      stRotation,\n      quaternionScratch,\n    );\n    textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n    if (vertexFormat.tangent || vertexFormat.bitangent) {\n      rotation = Quaternion.fromAxisAngle(\n        normal,\n        -stRotation,\n        quaternionScratch,\n      );\n      const tangentRotation = Matrix3.fromQuaternion(\n        rotation,\n        tangentRotationScratch,\n      );\n\n      tangent = Cartesian3.normalize(\n        Matrix3.multiplyByVector(tangentRotation, tangent, tangent),\n        tangent,\n      );\n      if (vertexFormat.bitangent) {\n        bitangent = Cartesian3.normalize(\n          Cartesian3.cross(normal, tangent, bitangent),\n          bitangent,\n        );\n      }\n    }\n  } else {\n    textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n  }\n\n  const stOrigin = textureCoordinatesOrigin;\n  if (vertexFormat.st) {\n    stOrigin.x = boundingRectangle.x;\n    stOrigin.y = boundingRectangle.y;\n  }\n\n  const length = positions.length;\n  const size = length * 3;\n  const flatPositions = new Float64Array(size);\n  const normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  const tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  const bitangents = vertexFormat.bitangent\n    ? new Float32Array(size)\n    : undefined;\n  const textureCoordinates = vertexFormat.st\n    ? new Float32Array(length * 2)\n    : undefined;\n\n  let positionIndex = 0;\n  let normalIndex = 0;\n  let bitangentIndex = 0;\n  let tangentIndex = 0;\n  let stIndex = 0;\n\n  for (let i = 0; i < length; i++) {\n    const position = positions[i];\n    flatPositions[positionIndex++] = position.x;\n    flatPositions[positionIndex++] = position.y;\n    flatPositions[positionIndex++] = position.z;\n\n    if (vertexFormat.st) {\n      if (\n        defined(hardcodedTextureCoordinates) &&\n        hardcodedTextureCoordinates.positions.length === length\n      ) {\n        textureCoordinates[stIndex++] =\n          hardcodedTextureCoordinates.positions[i].x;\n        textureCoordinates[stIndex++] =\n          hardcodedTextureCoordinates.positions[i].y;\n      } else {\n        const p = Matrix3.multiplyByVector(\n          textureMatrix,\n          position,\n          scratchPosition,\n        );\n        const st = projectPointTo2D(p, stScratch);\n        Cartesian2.subtract(st, stOrigin, st);\n\n        const stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n        const sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n        textureCoordinates[stIndex++] = stx;\n        textureCoordinates[stIndex++] = sty;\n      }\n    }\n\n    if (vertexFormat.normal) {\n      normals[normalIndex++] = normal.x;\n      normals[normalIndex++] = normal.y;\n      normals[normalIndex++] = normal.z;\n    }\n\n    if (vertexFormat.tangent) {\n      tangents[tangentIndex++] = tangent.x;\n      tangents[tangentIndex++] = tangent.y;\n      tangents[tangentIndex++] = tangent.z;\n    }\n\n    if (vertexFormat.bitangent) {\n      bitangents[bitangentIndex++] = bitangent.x;\n      bitangents[bitangentIndex++] = bitangent.y;\n      bitangents[bitangentIndex++] = bitangent.z;\n    }\n  }\n\n  const attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: flatPositions,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: newIndices,\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n}\n\n/**\n * A description of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonGeometry\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid to be used as a reference.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points.\n *\n * @example\n * const polygonGeometry = new Cesium.CoplanarPolygonGeometry({\n *  polygonHierarchy: new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 300000.0,\n *      -80.0, 30.0, 300000.0,\n *      -80.0, 30.0, 0.0\n *   ]))\n * });\n *\n */\nfunction CoplanarPolygonGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const polygonHierarchy = options.polygonHierarchy;\n  const textureCoordinates = options.textureCoordinates;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\n  //>>includeEnd('debug');\n\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._polygonHierarchy = polygonHierarchy;\n  this._stRotation = defaultValue(options.stRotation, 0.0);\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.default),\n  );\n  this._workerName = \"createCoplanarPolygonGeometry\";\n  this._textureCoordinates = textureCoordinates;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(\n      polygonHierarchy,\n      Cartesian3,\n    ) +\n    VertexFormat.packedLength +\n    Ellipsoid.packedLength +\n    (defined(textureCoordinates)\n      ? PolygonGeometryLibrary.computeHierarchyPackedLength(\n          textureCoordinates,\n          Cartesian2,\n        )\n      : 1) +\n    2;\n}\n\n/**\n * A description of a coplanar polygon from an array of positions.\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid to be used as a reference.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points.\n * @returns {CoplanarPolygonGeometry}\n *\n * @example\n * // create a polygon from points\n * const polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nCoplanarPolygonGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  const newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    ellipsoid: options.ellipsoid,\n    textureCoordinates: options.textureCoordinates,\n  };\n  return new CoplanarPolygonGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nCoplanarPolygonGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex,\n    Cartesian3,\n  );\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._stRotation;\n  if (defined(value._textureCoordinates)) {\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n      value._textureCoordinates,\n      array,\n      startingIndex,\n      Cartesian2,\n    );\n  } else {\n    array[startingIndex++] = -1.0;\n  }\n  array[startingIndex++] = value.packedLength;\n\n  return array;\n};\n\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  polygonHierarchy: {},\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\n */\nCoplanarPolygonGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex,\n    Cartesian3,\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat,\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const stRotation = array[startingIndex++];\n  const textureCoordinates =\n    array[startingIndex] === -1.0\n      ? undefined\n      : PolygonGeometryLibrary.unpackPolygonHierarchy(\n          array,\n          startingIndex,\n          Cartesian2,\n        );\n  if (defined(textureCoordinates)) {\n    startingIndex = textureCoordinates.startingIndex;\n    delete textureCoordinates.startingIndex;\n  } else {\n    startingIndex++;\n  }\n  const packedLength = array[startingIndex++];\n\n  if (!defined(result)) {\n    result = new CoplanarPolygonGeometry(scratchOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._stRotation = stRotation;\n  result._textureCoordinates = textureCoordinates;\n  result.packedLength = packedLength;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCoplanarPolygonGeometry.createGeometry = function (polygonGeometry) {\n  const vertexFormat = polygonGeometry._vertexFormat;\n  const polygonHierarchy = polygonGeometry._polygonHierarchy;\n  const stRotation = polygonGeometry._stRotation;\n  const textureCoordinates = polygonGeometry._textureCoordinates;\n  const hasTextureCoordinates = defined(textureCoordinates);\n\n  let outerPositions = polygonHierarchy.positions;\n  outerPositions = arrayRemoveDuplicates(\n    outerPositions,\n    Cartesian3.equalsEpsilon,\n    true,\n  );\n  if (outerPositions.length < 3) {\n    return;\n  }\n\n  let normal = scratchNormal;\n  let tangent = scratchTangent;\n  let bitangent = scratchBitangent;\n  let axis1 = axis1Scratch;\n  const axis2 = axis2Scratch;\n\n  const validGeometry =\n    CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(\n      outerPositions,\n      centerScratch,\n      axis1,\n      axis2,\n    );\n  if (!validGeometry) {\n    return undefined;\n  }\n\n  normal = Cartesian3.cross(axis1, axis2, normal);\n  normal = Cartesian3.normalize(normal, normal);\n\n  if (\n    !Cartesian3.equalsEpsilon(\n      centerScratch,\n      Cartesian3.ZERO,\n      CesiumMath.EPSILON6,\n    )\n  ) {\n    const surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(\n      centerScratch,\n      surfaceNormalScratch,\n    );\n    if (Cartesian3.dot(normal, surfaceNormal) < 0) {\n      normal = Cartesian3.negate(normal, normal);\n      axis1 = Cartesian3.negate(axis1, axis1);\n    }\n  }\n\n  const projectPoints =\n    CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(\n      centerScratch,\n      axis1,\n      axis2,\n    );\n  const projectPoint =\n    CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(\n      centerScratch,\n      axis1,\n      axis2,\n    );\n\n  if (vertexFormat.tangent) {\n    tangent = Cartesian3.clone(axis1, tangent);\n  }\n  if (vertexFormat.bitangent) {\n    bitangent = Cartesian3.clone(axis2, bitangent);\n  }\n\n  const results = PolygonGeometryLibrary.polygonsFromHierarchy(\n    polygonHierarchy,\n    hasTextureCoordinates,\n    projectPoints,\n    false,\n  );\n  const hierarchy = results.hierarchy;\n  const polygons = results.polygons;\n\n  const dummyFunction = function (identity) {\n    return identity;\n  };\n\n  const textureCoordinatePolygons = hasTextureCoordinates\n    ? PolygonGeometryLibrary.polygonsFromHierarchy(\n        textureCoordinates,\n        true,\n        dummyFunction,\n        false,\n      ).polygons\n    : undefined;\n\n  if (hierarchy.length === 0) {\n    return;\n  }\n  outerPositions = hierarchy[0].outerRing;\n\n  const boundingSphere = BoundingSphere.fromPoints(outerPositions);\n  const boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\n    normal,\n    projectPoint,\n    outerPositions,\n    stRotation,\n    scratchBR,\n  );\n\n  const geometries = [];\n  for (let i = 0; i < polygons.length; i++) {\n    const geometryInstance = new GeometryInstance({\n      geometry: createGeometryFromPolygon(\n        polygons[i],\n        vertexFormat,\n        boundingRectangle,\n        stRotation,\n        hasTextureCoordinates ? textureCoordinatePolygons[i] : undefined,\n        projectPoint,\n        normal,\n        tangent,\n        bitangent,\n      ),\n    });\n\n    geometries.push(geometryInstance);\n  }\n\n  const geometry = GeometryPipeline.combineInstances(geometries)[0];\n  geometry.attributes.position.values = new Float64Array(\n    geometry.attributes.position.values,\n  );\n  geometry.indices = IndexDatatype.createTypedArray(\n    geometry.attributes.position.values.length / 3,\n    geometry.indices,\n  );\n\n  const attributes = geometry.attributes;\n  if (!vertexFormat.position) {\n    delete attributes.position;\n  }\n  return new Geometry({\n    attributes: attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n  });\n};\nexport default CoplanarPolygonGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}