{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DracoLoader from \"./DracoLoader.js\";\nimport ResourceLoader from \"./ResourceLoader.js\";\nimport ResourceLoaderState from \"./ResourceLoaderState.js\";\n\n/**\n * Load a draco buffer from a glTF.\n * <p>\n * Implements the {@link ResourceLoader} interface.\n * </p>\n *\n * @alias GltfDracoLoader\n * @constructor\n * @augments ResourceLoader\n *\n * @param {object} options Object with the following properties:\n * @param {ResourceCache} options.resourceCache The {@link ResourceCache} (to avoid circular dependencies).\n * @param {object} options.gltf The glTF JSON.\n * @param {object} options.draco The Draco extension object.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {string} [options.cacheKey] The cache key of the resource.\n *\n * @private\n */\nfunction GltfDracoLoader(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const resourceCache = options.resourceCache;\n  const gltf = options.gltf;\n  const draco = options.draco;\n  const gltfResource = options.gltfResource;\n  const baseResource = options.baseResource;\n  const cacheKey = options.cacheKey;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"options.resourceCache\", resourceCache);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.object(\"options.draco\", draco);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  this._resourceCache = resourceCache;\n  this._gltfResource = gltfResource;\n  this._baseResource = baseResource;\n  this._gltf = gltf;\n  this._draco = draco;\n  this._cacheKey = cacheKey;\n  this._bufferViewLoader = undefined;\n  this._bufferViewTypedArray = undefined;\n  this._decodePromise = undefined;\n  this._decodedData = undefined;\n  this._state = ResourceLoaderState.UNLOADED;\n  this._promise = undefined;\n  this._dracoError = undefined;\n}\nif (defined(Object.create)) {\n  GltfDracoLoader.prototype = Object.create(ResourceLoader.prototype);\n  GltfDracoLoader.prototype.constructor = GltfDracoLoader;\n}\nObject.defineProperties(GltfDracoLoader.prototype, {\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof GltfDracoLoader.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    }\n  },\n  /**\n   * The decoded data.\n   *\n   * @memberof GltfDracoLoader.prototype\n   *\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  decodedData: {\n    get: function () {\n      return this._decodedData;\n    }\n  }\n});\nasync function loadResources(loader) {\n  const resourceCache = loader._resourceCache;\n  try {\n    const bufferViewLoader = resourceCache.getBufferViewLoader({\n      gltf: loader._gltf,\n      bufferViewId: loader._draco.bufferView,\n      gltfResource: loader._gltfResource,\n      baseResource: loader._baseResource\n    });\n    loader._bufferViewLoader = bufferViewLoader;\n    await bufferViewLoader.load();\n    if (loader.isDestroyed()) {\n      return;\n    }\n    loader._bufferViewTypedArray = bufferViewLoader.typedArray;\n    loader._state = ResourceLoaderState.PROCESSING;\n    return loader;\n  } catch (error) {\n    if (loader.isDestroyed()) {\n      return;\n    }\n    handleError(loader, error);\n  }\n}\n\n/**\n * Loads the resource.\n * @returns {Promise<GltfDracoLoader>} A promise which resolves to the loader when the resource loading is completed.\n * @private\n */\nGltfDracoLoader.prototype.load = async function () {\n  if (defined(this._promise)) {\n    return this._promise;\n  }\n  this._state = ResourceLoaderState.LOADING;\n  this._promise = loadResources(this);\n  return this._promise;\n};\nfunction handleError(dracoLoader, error) {\n  dracoLoader.unload();\n  dracoLoader._state = ResourceLoaderState.FAILED;\n  const errorMessage = \"Failed to load Draco\";\n  throw dracoLoader.getError(errorMessage, error);\n}\nasync function processDecode(loader, decodePromise) {\n  try {\n    const results = await decodePromise;\n    if (loader.isDestroyed()) {\n      return;\n    }\n\n    // Unload everything except the decoded data\n    loader.unload();\n    loader._decodedData = {\n      indices: results.indexArray,\n      vertexAttributes: results.attributeData\n    };\n    loader._state = ResourceLoaderState.READY;\n    return loader._baseResource;\n  } catch (error) {\n    if (loader.isDestroyed()) {\n      return;\n    }\n\n    // Capture this error so it can be thrown on the next `process` call\n    loader._dracoError = error;\n  }\n}\n\n/**\n * Processes the resource until it becomes ready.\n *\n * @param {FrameState} frameState The frame state.\n * @private\n */\nGltfDracoLoader.prototype.process = function (frameState) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"frameState\", frameState);\n  //>>includeEnd('debug');\n\n  if (this._state === ResourceLoaderState.READY) {\n    return true;\n  }\n  if (this._state !== ResourceLoaderState.PROCESSING) {\n    return false;\n  }\n  if (defined(this._dracoError)) {\n    handleError(this, this._dracoError);\n  }\n  if (!defined(this._bufferViewTypedArray)) {\n    // Not ready to decode the Draco buffer\n    return false;\n  }\n  if (defined(this._decodePromise)) {\n    // Currently decoding\n    return false;\n  }\n  const draco = this._draco;\n  const gltf = this._gltf;\n  const bufferViews = gltf.bufferViews;\n  const bufferViewId = draco.bufferView;\n  const bufferView = bufferViews[bufferViewId];\n  const compressedAttributes = draco.attributes;\n  const decodeOptions = {\n    // Need to make a copy of the typed array otherwise the underlying\n    // ArrayBuffer may be accessed on both the worker and the main thread. This\n    // leads to errors such as \"ArrayBuffer at index 0 is already detached\".\n    // PERFORMANCE_IDEA: Look into SharedArrayBuffer to get around this.\n    array: new Uint8Array(this._bufferViewTypedArray),\n    bufferView: bufferView,\n    compressedAttributes: compressedAttributes,\n    dequantizeInShader: true\n  };\n  const decodePromise = DracoLoader.decodeBufferView(decodeOptions);\n  if (!defined(decodePromise)) {\n    // Cannot schedule task this frame\n    return false;\n  }\n  this._decodePromise = processDecode(this, decodePromise);\n};\n\n/**\n * Unloads the resource.\n * @private\n */\nGltfDracoLoader.prototype.unload = function () {\n  if (defined(this._bufferViewLoader)) {\n    this._resourceCache.unload(this._bufferViewLoader);\n  }\n  this._bufferViewLoader = undefined;\n  this._bufferViewTypedArray = undefined;\n  this._decodedData = undefined;\n  this._gltf = undefined;\n};\nexport default GltfDracoLoader;","map":{"version":3,"names":["Check","defaultValue","defined","DracoLoader","ResourceLoader","ResourceLoaderState","GltfDracoLoader","options","EMPTY_OBJECT","resourceCache","gltf","draco","gltfResource","baseResource","cacheKey","typeOf","func","object","_resourceCache","_gltfResource","_baseResource","_gltf","_draco","_cacheKey","_bufferViewLoader","undefined","_bufferViewTypedArray","_decodePromise","_decodedData","_state","UNLOADED","_promise","_dracoError","Object","create","prototype","constructor","defineProperties","get","decodedData","loadResources","loader","bufferViewLoader","getBufferViewLoader","bufferViewId","bufferView","load","isDestroyed","typedArray","PROCESSING","error","handleError","LOADING","dracoLoader","unload","FAILED","errorMessage","getError","processDecode","decodePromise","results","indices","indexArray","vertexAttributes","attributeData","READY","process","frameState","bufferViews","compressedAttributes","attributes","decodeOptions","array","Uint8Array","dequantizeInShader","decodeBufferView"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GltfDracoLoader.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DracoLoader from \"./DracoLoader.js\";\nimport ResourceLoader from \"./ResourceLoader.js\";\nimport ResourceLoaderState from \"./ResourceLoaderState.js\";\n\n/**\n * Load a draco buffer from a glTF.\n * <p>\n * Implements the {@link ResourceLoader} interface.\n * </p>\n *\n * @alias GltfDracoLoader\n * @constructor\n * @augments ResourceLoader\n *\n * @param {object} options Object with the following properties:\n * @param {ResourceCache} options.resourceCache The {@link ResourceCache} (to avoid circular dependencies).\n * @param {object} options.gltf The glTF JSON.\n * @param {object} options.draco The Draco extension object.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {string} [options.cacheKey] The cache key of the resource.\n *\n * @private\n */\nfunction GltfDracoLoader(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const resourceCache = options.resourceCache;\n  const gltf = options.gltf;\n  const draco = options.draco;\n  const gltfResource = options.gltfResource;\n  const baseResource = options.baseResource;\n  const cacheKey = options.cacheKey;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"options.resourceCache\", resourceCache);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.object(\"options.draco\", draco);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  this._resourceCache = resourceCache;\n  this._gltfResource = gltfResource;\n  this._baseResource = baseResource;\n  this._gltf = gltf;\n  this._draco = draco;\n  this._cacheKey = cacheKey;\n  this._bufferViewLoader = undefined;\n  this._bufferViewTypedArray = undefined;\n  this._decodePromise = undefined;\n  this._decodedData = undefined;\n  this._state = ResourceLoaderState.UNLOADED;\n  this._promise = undefined;\n  this._dracoError = undefined;\n}\n\nif (defined(Object.create)) {\n  GltfDracoLoader.prototype = Object.create(ResourceLoader.prototype);\n  GltfDracoLoader.prototype.constructor = GltfDracoLoader;\n}\n\nObject.defineProperties(GltfDracoLoader.prototype, {\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof GltfDracoLoader.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    },\n  },\n  /**\n   * The decoded data.\n   *\n   * @memberof GltfDracoLoader.prototype\n   *\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  decodedData: {\n    get: function () {\n      return this._decodedData;\n    },\n  },\n});\n\nasync function loadResources(loader) {\n  const resourceCache = loader._resourceCache;\n  try {\n    const bufferViewLoader = resourceCache.getBufferViewLoader({\n      gltf: loader._gltf,\n      bufferViewId: loader._draco.bufferView,\n      gltfResource: loader._gltfResource,\n      baseResource: loader._baseResource,\n    });\n    loader._bufferViewLoader = bufferViewLoader;\n    await bufferViewLoader.load();\n\n    if (loader.isDestroyed()) {\n      return;\n    }\n\n    loader._bufferViewTypedArray = bufferViewLoader.typedArray;\n    loader._state = ResourceLoaderState.PROCESSING;\n    return loader;\n  } catch (error) {\n    if (loader.isDestroyed()) {\n      return;\n    }\n\n    handleError(loader, error);\n  }\n}\n\n/**\n * Loads the resource.\n * @returns {Promise<GltfDracoLoader>} A promise which resolves to the loader when the resource loading is completed.\n * @private\n */\nGltfDracoLoader.prototype.load = async function () {\n  if (defined(this._promise)) {\n    return this._promise;\n  }\n\n  this._state = ResourceLoaderState.LOADING;\n  this._promise = loadResources(this);\n  return this._promise;\n};\n\nfunction handleError(dracoLoader, error) {\n  dracoLoader.unload();\n  dracoLoader._state = ResourceLoaderState.FAILED;\n  const errorMessage = \"Failed to load Draco\";\n  throw dracoLoader.getError(errorMessage, error);\n}\n\nasync function processDecode(loader, decodePromise) {\n  try {\n    const results = await decodePromise;\n    if (loader.isDestroyed()) {\n      return;\n    }\n\n    // Unload everything except the decoded data\n    loader.unload();\n\n    loader._decodedData = {\n      indices: results.indexArray,\n      vertexAttributes: results.attributeData,\n    };\n    loader._state = ResourceLoaderState.READY;\n    return loader._baseResource;\n  } catch (error) {\n    if (loader.isDestroyed()) {\n      return;\n    }\n\n    // Capture this error so it can be thrown on the next `process` call\n    loader._dracoError = error;\n  }\n}\n\n/**\n * Processes the resource until it becomes ready.\n *\n * @param {FrameState} frameState The frame state.\n * @private\n */\nGltfDracoLoader.prototype.process = function (frameState) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"frameState\", frameState);\n  //>>includeEnd('debug');\n\n  if (this._state === ResourceLoaderState.READY) {\n    return true;\n  }\n\n  if (this._state !== ResourceLoaderState.PROCESSING) {\n    return false;\n  }\n\n  if (defined(this._dracoError)) {\n    handleError(this, this._dracoError);\n  }\n\n  if (!defined(this._bufferViewTypedArray)) {\n    // Not ready to decode the Draco buffer\n    return false;\n  }\n\n  if (defined(this._decodePromise)) {\n    // Currently decoding\n    return false;\n  }\n\n  const draco = this._draco;\n  const gltf = this._gltf;\n  const bufferViews = gltf.bufferViews;\n  const bufferViewId = draco.bufferView;\n  const bufferView = bufferViews[bufferViewId];\n  const compressedAttributes = draco.attributes;\n\n  const decodeOptions = {\n    // Need to make a copy of the typed array otherwise the underlying\n    // ArrayBuffer may be accessed on both the worker and the main thread. This\n    // leads to errors such as \"ArrayBuffer at index 0 is already detached\".\n    // PERFORMANCE_IDEA: Look into SharedArrayBuffer to get around this.\n    array: new Uint8Array(this._bufferViewTypedArray),\n    bufferView: bufferView,\n    compressedAttributes: compressedAttributes,\n    dequantizeInShader: true,\n  };\n\n  const decodePromise = DracoLoader.decodeBufferView(decodeOptions);\n\n  if (!defined(decodePromise)) {\n    // Cannot schedule task this frame\n    return false;\n  }\n\n  this._decodePromise = processDecode(this, decodePromise);\n};\n\n/**\n * Unloads the resource.\n * @private\n */\nGltfDracoLoader.prototype.unload = function () {\n  if (defined(this._bufferViewLoader)) {\n    this._resourceCache.unload(this._bufferViewLoader);\n  }\n\n  this._bufferViewLoader = undefined;\n  this._bufferViewTypedArray = undefined;\n  this._decodedData = undefined;\n  this._gltf = undefined;\n};\n\nexport default GltfDracoLoader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}