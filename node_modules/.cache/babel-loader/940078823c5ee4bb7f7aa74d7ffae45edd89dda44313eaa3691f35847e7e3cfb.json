{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport CullFace from \"./CullFace.js\";\nimport getClippingFunction from \"./getClippingFunction.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderDestination from \"../Renderer/ShaderDestination.js\";\nimport VoxelRenderResources from \"./VoxelRenderResources.js\";\nimport processVoxelProperties from \"./processVoxelProperties.js\";\n\n/**\n * @function\n *\n * @param {VoxelPrimitive} primitive\n * @param {Context} context\n *\n * @private\n */\nfunction buildVoxelDrawCommands(primitive, context) {\n  const renderResources = new VoxelRenderResources(primitive);\n  processVoxelProperties(renderResources, primitive);\n  const {\n    shaderBuilder,\n    clippingPlanes,\n    clippingPlanesLength\n  } = renderResources;\n  if (clippingPlanesLength > 0) {\n    // Extract the getClippingPlane function from the getClippingFunction string.\n    // This is a bit of a hack.\n    const functionId = \"getClippingPlane\";\n    const entireFunction = getClippingFunction(clippingPlanes, context);\n    const functionSignatureBegin = 0;\n    const functionSignatureEnd = entireFunction.indexOf(\")\") + 1;\n    const functionBodyBegin = entireFunction.indexOf(\"{\", functionSignatureEnd) + 1;\n    const functionBodyEnd = entireFunction.indexOf(\"}\", functionBodyBegin);\n    const functionSignature = entireFunction.slice(functionSignatureBegin, functionSignatureEnd);\n    const functionBody = entireFunction.slice(functionBodyBegin, functionBodyEnd);\n    shaderBuilder.addFunction(functionId, functionSignature, ShaderDestination.FRAGMENT);\n    shaderBuilder.addFunctionLines(functionId, [functionBody]);\n  }\n\n  // Compile shaders\n  const shaderBuilderPick = shaderBuilder.clone();\n  shaderBuilderPick.addDefine(\"PICKING\", undefined, ShaderDestination.FRAGMENT);\n  const shaderBuilderPickVoxel = shaderBuilder.clone();\n  shaderBuilderPickVoxel.addDefine(\"PICKING_VOXEL\", undefined, ShaderDestination.FRAGMENT);\n  const shaderProgram = shaderBuilder.buildShaderProgram(context);\n  const shaderProgramPick = shaderBuilderPick.buildShaderProgram(context);\n  const shaderProgramPickVoxel = shaderBuilderPickVoxel.buildShaderProgram(context);\n  const renderState = RenderState.fromCache({\n    cull: {\n      enabled: true,\n      face: CullFace.BACK\n    },\n    depthTest: {\n      enabled: false\n    },\n    depthMask: false,\n    // internally the shader does premultiplied alpha, so it makes sense to blend that way too\n    blending: BlendingState.PRE_MULTIPLIED_ALPHA_BLEND\n  });\n\n  // Create the draw commands\n  const viewportQuadVertexArray = context.getViewportQuadVertexArray();\n  const depthTest = primitive._depthTest;\n  const drawCommand = new DrawCommand({\n    vertexArray: viewportQuadVertexArray,\n    primitiveType: PrimitiveType.TRIANGLES,\n    renderState: renderState,\n    shaderProgram: shaderProgram,\n    uniformMap: renderResources.uniformMap,\n    modelMatrix: primitive._compoundModelMatrix,\n    pass: Pass.VOXELS,\n    executeInClosestFrustum: true,\n    owner: this,\n    cull: depthTest,\n    // don't cull or occlude if depth testing is off\n    occlude: depthTest // don't cull or occlude if depth testing is off\n  });\n\n  // Create the pick draw command\n  const drawCommandPick = DrawCommand.shallowClone(drawCommand, new DrawCommand());\n  drawCommandPick.shaderProgram = shaderProgramPick;\n  drawCommandPick.pickOnly = true;\n\n  // Create the pick voxels draw command\n  const drawCommandPickVoxel = DrawCommand.shallowClone(drawCommand, new DrawCommand());\n  drawCommandPickVoxel.shaderProgram = shaderProgramPickVoxel;\n  drawCommandPickVoxel.pickOnly = true;\n\n  // Delete the old shader programs\n  if (defined(primitive._drawCommand)) {\n    const command = primitive._drawCommand;\n    command.shaderProgram = command.shaderProgram && command.shaderProgram.destroy();\n  }\n  if (defined(primitive._drawCommandPick)) {\n    const command = primitive._drawCommandPick;\n    command.shaderProgram = command.shaderProgram && command.shaderProgram.destroy();\n  }\n  if (defined(primitive._drawCommandPickVoxel)) {\n    const command = primitive._drawCommandPickVoxel;\n    command.shaderProgram = command.shaderProgram && command.shaderProgram.destroy();\n  }\n  primitive._drawCommand = drawCommand;\n  primitive._drawCommandPick = drawCommandPick;\n  primitive._drawCommandPickVoxel = drawCommandPickVoxel;\n}\nexport default buildVoxelDrawCommands;","map":{"version":3,"names":["defined","PrimitiveType","BlendingState","CullFace","getClippingFunction","DrawCommand","Pass","RenderState","ShaderDestination","VoxelRenderResources","processVoxelProperties","buildVoxelDrawCommands","primitive","context","renderResources","shaderBuilder","clippingPlanes","clippingPlanesLength","functionId","entireFunction","functionSignatureBegin","functionSignatureEnd","indexOf","functionBodyBegin","functionBodyEnd","functionSignature","slice","functionBody","addFunction","FRAGMENT","addFunctionLines","shaderBuilderPick","clone","addDefine","undefined","shaderBuilderPickVoxel","shaderProgram","buildShaderProgram","shaderProgramPick","shaderProgramPickVoxel","renderState","fromCache","cull","enabled","face","BACK","depthTest","depthMask","blending","PRE_MULTIPLIED_ALPHA_BLEND","viewportQuadVertexArray","getViewportQuadVertexArray","_depthTest","drawCommand","vertexArray","primitiveType","TRIANGLES","uniformMap","modelMatrix","_compoundModelMatrix","pass","VOXELS","executeInClosestFrustum","owner","occlude","drawCommandPick","shallowClone","pickOnly","drawCommandPickVoxel","_drawCommand","command","destroy","_drawCommandPick","_drawCommandPickVoxel"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/buildVoxelDrawCommands.js"],"sourcesContent":["import defined from \"../Core/defined.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport CullFace from \"./CullFace.js\";\nimport getClippingFunction from \"./getClippingFunction.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderDestination from \"../Renderer/ShaderDestination.js\";\nimport VoxelRenderResources from \"./VoxelRenderResources.js\";\nimport processVoxelProperties from \"./processVoxelProperties.js\";\n\n/**\n * @function\n *\n * @param {VoxelPrimitive} primitive\n * @param {Context} context\n *\n * @private\n */\nfunction buildVoxelDrawCommands(primitive, context) {\n  const renderResources = new VoxelRenderResources(primitive);\n\n  processVoxelProperties(renderResources, primitive);\n\n  const { shaderBuilder, clippingPlanes, clippingPlanesLength } =\n    renderResources;\n\n  if (clippingPlanesLength > 0) {\n    // Extract the getClippingPlane function from the getClippingFunction string.\n    // This is a bit of a hack.\n    const functionId = \"getClippingPlane\";\n    const entireFunction = getClippingFunction(clippingPlanes, context);\n    const functionSignatureBegin = 0;\n    const functionSignatureEnd = entireFunction.indexOf(\")\") + 1;\n    const functionBodyBegin =\n      entireFunction.indexOf(\"{\", functionSignatureEnd) + 1;\n    const functionBodyEnd = entireFunction.indexOf(\"}\", functionBodyBegin);\n    const functionSignature = entireFunction.slice(\n      functionSignatureBegin,\n      functionSignatureEnd,\n    );\n    const functionBody = entireFunction.slice(\n      functionBodyBegin,\n      functionBodyEnd,\n    );\n    shaderBuilder.addFunction(\n      functionId,\n      functionSignature,\n      ShaderDestination.FRAGMENT,\n    );\n    shaderBuilder.addFunctionLines(functionId, [functionBody]);\n  }\n\n  // Compile shaders\n  const shaderBuilderPick = shaderBuilder.clone();\n  shaderBuilderPick.addDefine(\"PICKING\", undefined, ShaderDestination.FRAGMENT);\n  const shaderBuilderPickVoxel = shaderBuilder.clone();\n  shaderBuilderPickVoxel.addDefine(\n    \"PICKING_VOXEL\",\n    undefined,\n    ShaderDestination.FRAGMENT,\n  );\n  const shaderProgram = shaderBuilder.buildShaderProgram(context);\n  const shaderProgramPick = shaderBuilderPick.buildShaderProgram(context);\n  const shaderProgramPickVoxel =\n    shaderBuilderPickVoxel.buildShaderProgram(context);\n  const renderState = RenderState.fromCache({\n    cull: {\n      enabled: true,\n      face: CullFace.BACK,\n    },\n    depthTest: {\n      enabled: false,\n    },\n    depthMask: false,\n    // internally the shader does premultiplied alpha, so it makes sense to blend that way too\n    blending: BlendingState.PRE_MULTIPLIED_ALPHA_BLEND,\n  });\n\n  // Create the draw commands\n  const viewportQuadVertexArray = context.getViewportQuadVertexArray();\n  const depthTest = primitive._depthTest;\n  const drawCommand = new DrawCommand({\n    vertexArray: viewportQuadVertexArray,\n    primitiveType: PrimitiveType.TRIANGLES,\n    renderState: renderState,\n    shaderProgram: shaderProgram,\n    uniformMap: renderResources.uniformMap,\n    modelMatrix: primitive._compoundModelMatrix,\n    pass: Pass.VOXELS,\n    executeInClosestFrustum: true,\n    owner: this,\n    cull: depthTest, // don't cull or occlude if depth testing is off\n    occlude: depthTest, // don't cull or occlude if depth testing is off\n  });\n\n  // Create the pick draw command\n  const drawCommandPick = DrawCommand.shallowClone(\n    drawCommand,\n    new DrawCommand(),\n  );\n  drawCommandPick.shaderProgram = shaderProgramPick;\n  drawCommandPick.pickOnly = true;\n\n  // Create the pick voxels draw command\n  const drawCommandPickVoxel = DrawCommand.shallowClone(\n    drawCommand,\n    new DrawCommand(),\n  );\n  drawCommandPickVoxel.shaderProgram = shaderProgramPickVoxel;\n  drawCommandPickVoxel.pickOnly = true;\n\n  // Delete the old shader programs\n  if (defined(primitive._drawCommand)) {\n    const command = primitive._drawCommand;\n    command.shaderProgram =\n      command.shaderProgram && command.shaderProgram.destroy();\n  }\n  if (defined(primitive._drawCommandPick)) {\n    const command = primitive._drawCommandPick;\n    command.shaderProgram =\n      command.shaderProgram && command.shaderProgram.destroy();\n  }\n  if (defined(primitive._drawCommandPickVoxel)) {\n    const command = primitive._drawCommandPickVoxel;\n    command.shaderProgram =\n      command.shaderProgram && command.shaderProgram.destroy();\n  }\n\n  primitive._drawCommand = drawCommand;\n  primitive._drawCommandPick = drawCommandPick;\n  primitive._drawCommandPickVoxel = drawCommandPickVoxel;\n}\n\nexport default buildVoxelDrawCommands;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,oBAAoB;AACxC,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,aAAa,MAAM,oBAAoB;AAC9C,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,mBAAmB,MAAM,0BAA0B;AAC1D,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,iBAAiB,MAAM,kCAAkC;AAChE,OAAOC,oBAAoB,MAAM,2BAA2B;AAC5D,OAAOC,sBAAsB,MAAM,6BAA6B;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsBA,CAACC,SAAS,EAAEC,OAAO,EAAE;EAClD,MAAMC,eAAe,GAAG,IAAIL,oBAAoB,CAACG,SAAS,CAAC;EAE3DF,sBAAsB,CAACI,eAAe,EAAEF,SAAS,CAAC;EAElD,MAAM;IAAEG,aAAa;IAAEC,cAAc;IAAEC;EAAqB,CAAC,GAC3DH,eAAe;EAEjB,IAAIG,oBAAoB,GAAG,CAAC,EAAE;IAC5B;IACA;IACA,MAAMC,UAAU,GAAG,kBAAkB;IACrC,MAAMC,cAAc,GAAGf,mBAAmB,CAACY,cAAc,EAAEH,OAAO,CAAC;IACnE,MAAMO,sBAAsB,GAAG,CAAC;IAChC,MAAMC,oBAAoB,GAAGF,cAAc,CAACG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;IAC5D,MAAMC,iBAAiB,GACrBJ,cAAc,CAACG,OAAO,CAAC,GAAG,EAAED,oBAAoB,CAAC,GAAG,CAAC;IACvD,MAAMG,eAAe,GAAGL,cAAc,CAACG,OAAO,CAAC,GAAG,EAAEC,iBAAiB,CAAC;IACtE,MAAME,iBAAiB,GAAGN,cAAc,CAACO,KAAK,CAC5CN,sBAAsB,EACtBC,oBACF,CAAC;IACD,MAAMM,YAAY,GAAGR,cAAc,CAACO,KAAK,CACvCH,iBAAiB,EACjBC,eACF,CAAC;IACDT,aAAa,CAACa,WAAW,CACvBV,UAAU,EACVO,iBAAiB,EACjBjB,iBAAiB,CAACqB,QACpB,CAAC;IACDd,aAAa,CAACe,gBAAgB,CAACZ,UAAU,EAAE,CAACS,YAAY,CAAC,CAAC;EAC5D;;EAEA;EACA,MAAMI,iBAAiB,GAAGhB,aAAa,CAACiB,KAAK,CAAC,CAAC;EAC/CD,iBAAiB,CAACE,SAAS,CAAC,SAAS,EAAEC,SAAS,EAAE1B,iBAAiB,CAACqB,QAAQ,CAAC;EAC7E,MAAMM,sBAAsB,GAAGpB,aAAa,CAACiB,KAAK,CAAC,CAAC;EACpDG,sBAAsB,CAACF,SAAS,CAC9B,eAAe,EACfC,SAAS,EACT1B,iBAAiB,CAACqB,QACpB,CAAC;EACD,MAAMO,aAAa,GAAGrB,aAAa,CAACsB,kBAAkB,CAACxB,OAAO,CAAC;EAC/D,MAAMyB,iBAAiB,GAAGP,iBAAiB,CAACM,kBAAkB,CAACxB,OAAO,CAAC;EACvE,MAAM0B,sBAAsB,GAC1BJ,sBAAsB,CAACE,kBAAkB,CAACxB,OAAO,CAAC;EACpD,MAAM2B,WAAW,GAAGjC,WAAW,CAACkC,SAAS,CAAC;IACxCC,IAAI,EAAE;MACJC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEzC,QAAQ,CAAC0C;IACjB,CAAC;IACDC,SAAS,EAAE;MACTH,OAAO,EAAE;IACX,CAAC;IACDI,SAAS,EAAE,KAAK;IAChB;IACAC,QAAQ,EAAE9C,aAAa,CAAC+C;EAC1B,CAAC,CAAC;;EAEF;EACA,MAAMC,uBAAuB,GAAGrC,OAAO,CAACsC,0BAA0B,CAAC,CAAC;EACpE,MAAML,SAAS,GAAGlC,SAAS,CAACwC,UAAU;EACtC,MAAMC,WAAW,GAAG,IAAIhD,WAAW,CAAC;IAClCiD,WAAW,EAAEJ,uBAAuB;IACpCK,aAAa,EAAEtD,aAAa,CAACuD,SAAS;IACtChB,WAAW,EAAEA,WAAW;IACxBJ,aAAa,EAAEA,aAAa;IAC5BqB,UAAU,EAAE3C,eAAe,CAAC2C,UAAU;IACtCC,WAAW,EAAE9C,SAAS,CAAC+C,oBAAoB;IAC3CC,IAAI,EAAEtD,IAAI,CAACuD,MAAM;IACjBC,uBAAuB,EAAE,IAAI;IAC7BC,KAAK,EAAE,IAAI;IACXrB,IAAI,EAAEI,SAAS;IAAE;IACjBkB,OAAO,EAAElB,SAAS,CAAE;EACtB,CAAC,CAAC;;EAEF;EACA,MAAMmB,eAAe,GAAG5D,WAAW,CAAC6D,YAAY,CAC9Cb,WAAW,EACX,IAAIhD,WAAW,CAAC,CAClB,CAAC;EACD4D,eAAe,CAAC7B,aAAa,GAAGE,iBAAiB;EACjD2B,eAAe,CAACE,QAAQ,GAAG,IAAI;;EAE/B;EACA,MAAMC,oBAAoB,GAAG/D,WAAW,CAAC6D,YAAY,CACnDb,WAAW,EACX,IAAIhD,WAAW,CAAC,CAClB,CAAC;EACD+D,oBAAoB,CAAChC,aAAa,GAAGG,sBAAsB;EAC3D6B,oBAAoB,CAACD,QAAQ,GAAG,IAAI;;EAEpC;EACA,IAAInE,OAAO,CAACY,SAAS,CAACyD,YAAY,CAAC,EAAE;IACnC,MAAMC,OAAO,GAAG1D,SAAS,CAACyD,YAAY;IACtCC,OAAO,CAAClC,aAAa,GACnBkC,OAAO,CAAClC,aAAa,IAAIkC,OAAO,CAAClC,aAAa,CAACmC,OAAO,CAAC,CAAC;EAC5D;EACA,IAAIvE,OAAO,CAACY,SAAS,CAAC4D,gBAAgB,CAAC,EAAE;IACvC,MAAMF,OAAO,GAAG1D,SAAS,CAAC4D,gBAAgB;IAC1CF,OAAO,CAAClC,aAAa,GACnBkC,OAAO,CAAClC,aAAa,IAAIkC,OAAO,CAAClC,aAAa,CAACmC,OAAO,CAAC,CAAC;EAC5D;EACA,IAAIvE,OAAO,CAACY,SAAS,CAAC6D,qBAAqB,CAAC,EAAE;IAC5C,MAAMH,OAAO,GAAG1D,SAAS,CAAC6D,qBAAqB;IAC/CH,OAAO,CAAClC,aAAa,GACnBkC,OAAO,CAAClC,aAAa,IAAIkC,OAAO,CAAClC,aAAa,CAACmC,OAAO,CAAC,CAAC;EAC5D;EAEA3D,SAAS,CAACyD,YAAY,GAAGhB,WAAW;EACpCzC,SAAS,CAAC4D,gBAAgB,GAAGP,eAAe;EAC5CrD,SAAS,CAAC6D,qBAAqB,GAAGL,oBAAoB;AACxD;AAEA,eAAezD,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}