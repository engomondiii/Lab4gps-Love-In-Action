{"ast":null,"code":"import Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nconst API_URL = \"https://maps.googleapis.com/maps/api/geocode/json\";\nconst CREDIT_HTML = `<img alt=\"Google\" src=\"https://assets.ion.cesium.com/google-credit.png\" style=\"vertical-align:-5px\">`;\n\n/**\n * Provides geocoding through Google.\n *\n * @see {@link https://developers.google.com/maps/documentation/geocoding/policies|Google Geocoding Policies}\n * @alias GoogleGeocoderService\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.key An API key to use with the Google geocoding service\n */\nfunction GoogleGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const key = options.key;\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(key)) {\n    throw new DeveloperError(\"options.key is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._resource = new Resource({\n    url: API_URL,\n    queryParameters: {\n      key\n    }\n  });\n  this._credit = new Credit(CREDIT_HTML, true);\n}\nObject.defineProperties(GoogleGeocoderService.prototype, {\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof GoogleGeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  }\n});\n\n/**\n * Get a list of possible locations that match a search string.\n *\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService.Result[]>}\n * @throws {RuntimeError} If the services returns a status other than <code>OK</code> or <code>ZERO_RESULTS</code>\n */\nGoogleGeocoderService.prototype.geocode = async function (query) {\n  // See API documentation at https://developers.google.com/maps/documentation/geocoding/requests-geocoding\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  const resource = this._resource.getDerivedResource({\n    queryParameters: {\n      address: query\n    }\n  });\n  const response = await resource.fetchJson();\n  if (response.status === \"ZERO_RESULTS\") {\n    return [];\n  }\n  if (response.status !== \"OK\") {\n    throw new RuntimeError(`GoogleGeocoderService got a bad response ${response.status}: ${response.error_message}`);\n  }\n  const results = response.results.map(result => {\n    const southWest = result.geometry.viewport.southwest;\n    const northEast = result.geometry.viewport.northeast;\n    return {\n      displayName: result.formatted_address,\n      destination: Rectangle.fromDegrees(southWest.lng, southWest.lat, northEast.lng, northEast.lat),\n      attribution: {\n        html: CREDIT_HTML,\n        collapsible: false\n      }\n    };\n  });\n  return results;\n};\nexport default GoogleGeocoderService;","map":{"version":3,"names":["Check","Credit","defaultValue","Rectangle","Resource","defined","DeveloperError","RuntimeError","API_URL","CREDIT_HTML","GoogleGeocoderService","options","EMPTY_OBJECT","key","_resource","url","queryParameters","_credit","Object","defineProperties","prototype","credit","get","geocode","query","typeOf","string","resource","getDerivedResource","address","response","fetchJson","status","error_message","results","map","result","southWest","geometry","viewport","southwest","northEast","northeast","displayName","formatted_address","destination","fromDegrees","lng","lat","attribution","html","collapsible"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/GoogleGeocoderService.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\nconst API_URL = \"https://maps.googleapis.com/maps/api/geocode/json\";\nconst CREDIT_HTML = `<img alt=\"Google\" src=\"https://assets.ion.cesium.com/google-credit.png\" style=\"vertical-align:-5px\">`;\n\n/**\n * Provides geocoding through Google.\n *\n * @see {@link https://developers.google.com/maps/documentation/geocoding/policies|Google Geocoding Policies}\n * @alias GoogleGeocoderService\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.key An API key to use with the Google geocoding service\n */\nfunction GoogleGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const key = options.key;\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(key)) {\n    throw new DeveloperError(\"options.key is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._resource = new Resource({\n    url: API_URL,\n    queryParameters: { key },\n  });\n\n  this._credit = new Credit(CREDIT_HTML, true);\n}\n\nObject.defineProperties(GoogleGeocoderService.prototype, {\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof GoogleGeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n});\n\n/**\n * Get a list of possible locations that match a search string.\n *\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService.Result[]>}\n * @throws {RuntimeError} If the services returns a status other than <code>OK</code> or <code>ZERO_RESULTS</code>\n */\nGoogleGeocoderService.prototype.geocode = async function (query) {\n  // See API documentation at https://developers.google.com/maps/documentation/geocoding/requests-geocoding\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  const resource = this._resource.getDerivedResource({\n    queryParameters: {\n      address: query,\n    },\n  });\n\n  const response = await resource.fetchJson();\n\n  if (response.status === \"ZERO_RESULTS\") {\n    return [];\n  }\n\n  if (response.status !== \"OK\") {\n    throw new RuntimeError(\n      `GoogleGeocoderService got a bad response ${response.status}: ${response.error_message}`,\n    );\n  }\n\n  const results = response.results.map((result) => {\n    const southWest = result.geometry.viewport.southwest;\n    const northEast = result.geometry.viewport.northeast;\n    return {\n      displayName: result.formatted_address,\n      destination: Rectangle.fromDegrees(\n        southWest.lng,\n        southWest.lat,\n        northEast.lng,\n        northEast.lat,\n      ),\n      attribution: {\n        html: CREDIT_HTML,\n        collapsible: false,\n      },\n    };\n  });\n\n  return results;\n};\n\nexport default GoogleGeocoderService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,cAAc,MAAM,qBAAqB;AAChD,OAAOC,YAAY,MAAM,mBAAmB;AAE5C,MAAMC,OAAO,GAAG,mDAAmD;AACnE,MAAMC,WAAW,GAAG,sGAAsG;;AAE1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,OAAO,EAAE;EACtCA,OAAO,GAAGT,YAAY,CAACS,OAAO,EAAET,YAAY,CAACU,YAAY,CAAC;EAC1D,MAAMC,GAAG,GAAGF,OAAO,CAACE,GAAG;EACvB;EACA,IAAI,CAACR,OAAO,CAACQ,GAAG,CAAC,EAAE;IACjB,MAAM,IAAIP,cAAc,CAAC,0BAA0B,CAAC;EACtD;EACA;;EAEA,IAAI,CAACQ,SAAS,GAAG,IAAIV,QAAQ,CAAC;IAC5BW,GAAG,EAAEP,OAAO;IACZQ,eAAe,EAAE;MAAEH;IAAI;EACzB,CAAC,CAAC;EAEF,IAAI,CAACI,OAAO,GAAG,IAAIhB,MAAM,CAACQ,WAAW,EAAE,IAAI,CAAC;AAC9C;AAEAS,MAAM,CAACC,gBAAgB,CAACT,qBAAqB,CAACU,SAAS,EAAE;EACvD;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,MAAM,EAAE;IACNC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACL,OAAO;IACrB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,qBAAqB,CAACU,SAAS,CAACG,OAAO,GAAG,gBAAgBC,KAAK,EAAE;EAC/D;;EAEA;EACAxB,KAAK,CAACyB,MAAM,CAACC,MAAM,CAAC,OAAO,EAAEF,KAAK,CAAC;EACnC;;EAEA,MAAMG,QAAQ,GAAG,IAAI,CAACb,SAAS,CAACc,kBAAkB,CAAC;IACjDZ,eAAe,EAAE;MACfa,OAAO,EAAEL;IACX;EACF,CAAC,CAAC;EAEF,MAAMM,QAAQ,GAAG,MAAMH,QAAQ,CAACI,SAAS,CAAC,CAAC;EAE3C,IAAID,QAAQ,CAACE,MAAM,KAAK,cAAc,EAAE;IACtC,OAAO,EAAE;EACX;EAEA,IAAIF,QAAQ,CAACE,MAAM,KAAK,IAAI,EAAE;IAC5B,MAAM,IAAIzB,YAAY,CACpB,4CAA4CuB,QAAQ,CAACE,MAAM,KAAKF,QAAQ,CAACG,aAAa,EACxF,CAAC;EACH;EAEA,MAAMC,OAAO,GAAGJ,QAAQ,CAACI,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;IAC/C,MAAMC,SAAS,GAAGD,MAAM,CAACE,QAAQ,CAACC,QAAQ,CAACC,SAAS;IACpD,MAAMC,SAAS,GAAGL,MAAM,CAACE,QAAQ,CAACC,QAAQ,CAACG,SAAS;IACpD,OAAO;MACLC,WAAW,EAAEP,MAAM,CAACQ,iBAAiB;MACrCC,WAAW,EAAE1C,SAAS,CAAC2C,WAAW,CAChCT,SAAS,CAACU,GAAG,EACbV,SAAS,CAACW,GAAG,EACbP,SAAS,CAACM,GAAG,EACbN,SAAS,CAACO,GACZ,CAAC;MACDC,WAAW,EAAE;QACXC,IAAI,EAAEzC,WAAW;QACjB0C,WAAW,EAAE;MACf;IACF,CAAC;EACH,CAAC,CAAC;EAEF,OAAOjB,OAAO;AAChB,CAAC;AAED,eAAexB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}