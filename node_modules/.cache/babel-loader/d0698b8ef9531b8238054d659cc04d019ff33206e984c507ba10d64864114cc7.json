{"ast":null,"code":"import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nconst scratchPosition = new Cartesian3();\nconst scratchNormal = new Cartesian3();\nconst scratchTangent = new Cartesian3();\nconst scratchBitangent = new Cartesian3();\nconst scratchNormalST = new Cartesian3();\nconst defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\nconst cos = Math.cos;\nconst sin = Math.sin;\n\n/**\n * A description of an ellipsoid centered at the origin.\n *\n * @alias EllipsoidGeometry\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\n * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\n * @param {number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\n * @param {number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\n * @param {number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\n * @param {number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\n *\n * @see EllipsoidGeometry#createGeometry\n *\n * @example\n * const ellipsoid = new Cesium.EllipsoidGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0)\n * });\n * const geometry = Cesium.EllipsoidGeometry.createGeometry(ellipsoid);\n */\nfunction EllipsoidGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const radii = defaultValue(options.radii, defaultRadii);\n  const innerRadii = defaultValue(options.innerRadii, radii);\n  const minimumClock = defaultValue(options.minimumClock, 0.0);\n  const maximumClock = defaultValue(options.maximumClock, CesiumMath.TWO_PI);\n  const minimumCone = defaultValue(options.minimumCone, 0.0);\n  const maximumCone = defaultValue(options.maximumCone, CesiumMath.PI);\n  const stackPartitions = Math.round(defaultValue(options.stackPartitions, 64));\n  const slicePartitions = Math.round(defaultValue(options.slicePartitions, 64));\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (slicePartitions < 3) {\n    throw new DeveloperError(\"options.slicePartitions cannot be less than three.\");\n  }\n  if (stackPartitions < 3) {\n    throw new DeveloperError(\"options.stackPartitions cannot be less than three.\");\n  }\n  //>>includeEnd('debug');\n\n  this._radii = Cartesian3.clone(radii);\n  this._innerRadii = Cartesian3.clone(innerRadii);\n  this._minimumClock = minimumClock;\n  this._maximumClock = maximumClock;\n  this._minimumCone = minimumCone;\n  this._maximumCone = maximumCone;\n  this._stackPartitions = stackPartitions;\n  this._slicePartitions = slicePartitions;\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createEllipsoidGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nEllipsoidGeometry.packedLength = 2 * Cartesian3.packedLength + VertexFormat.packedLength + 7;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {EllipsoidGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nEllipsoidGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  Cartesian3.pack(value._radii, array, startingIndex);\n  startingIndex += Cartesian3.packedLength;\n  Cartesian3.pack(value._innerRadii, array, startingIndex);\n  startingIndex += Cartesian3.packedLength;\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n  array[startingIndex++] = value._minimumClock;\n  array[startingIndex++] = value._maximumClock;\n  array[startingIndex++] = value._minimumCone;\n  array[startingIndex++] = value._maximumCone;\n  array[startingIndex++] = value._stackPartitions;\n  array[startingIndex++] = value._slicePartitions;\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n  return array;\n};\nconst scratchRadii = new Cartesian3();\nconst scratchInnerRadii = new Cartesian3();\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  radii: scratchRadii,\n  innerRadii: scratchInnerRadii,\n  vertexFormat: scratchVertexFormat,\n  minimumClock: undefined,\n  maximumClock: undefined,\n  minimumCone: undefined,\n  maximumCone: undefined,\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n  offsetAttribute: undefined\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {EllipsoidGeometry} [result] The object into which to store the result.\n * @returns {EllipsoidGeometry} The modified result parameter or a new EllipsoidGeometry instance if one was not provided.\n */\nEllipsoidGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  const radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\n  startingIndex += Cartesian3.packedLength;\n  const innerRadii = Cartesian3.unpack(array, startingIndex, scratchInnerRadii);\n  startingIndex += Cartesian3.packedLength;\n  const vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n  startingIndex += VertexFormat.packedLength;\n  const minimumClock = array[startingIndex++];\n  const maximumClock = array[startingIndex++];\n  const minimumCone = array[startingIndex++];\n  const maximumCone = array[startingIndex++];\n  const stackPartitions = array[startingIndex++];\n  const slicePartitions = array[startingIndex++];\n  const offsetAttribute = array[startingIndex];\n  if (!defined(result)) {\n    scratchOptions.minimumClock = minimumClock;\n    scratchOptions.maximumClock = maximumClock;\n    scratchOptions.minimumCone = minimumCone;\n    scratchOptions.maximumCone = maximumCone;\n    scratchOptions.stackPartitions = stackPartitions;\n    scratchOptions.slicePartitions = slicePartitions;\n    scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new EllipsoidGeometry(scratchOptions);\n  }\n  result._radii = Cartesian3.clone(radii, result._radii);\n  result._innerRadii = Cartesian3.clone(innerRadii, result._innerRadii);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._minimumClock = minimumClock;\n  result._maximumClock = maximumClock;\n  result._minimumCone = minimumCone;\n  result._maximumCone = maximumCone;\n  result._stackPartitions = stackPartitions;\n  result._slicePartitions = slicePartitions;\n  result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n  return result;\n};\n\n/**\n * Computes the geometric representation of an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {EllipsoidGeometry} ellipsoidGeometry A description of the ellipsoid.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nEllipsoidGeometry.createGeometry = function (ellipsoidGeometry) {\n  const radii = ellipsoidGeometry._radii;\n  if (radii.x <= 0 || radii.y <= 0 || radii.z <= 0) {\n    return;\n  }\n  const innerRadii = ellipsoidGeometry._innerRadii;\n  if (innerRadii.x <= 0 || innerRadii.y <= 0 || innerRadii.z <= 0) {\n    return;\n  }\n  const minimumClock = ellipsoidGeometry._minimumClock;\n  const maximumClock = ellipsoidGeometry._maximumClock;\n  const minimumCone = ellipsoidGeometry._minimumCone;\n  const maximumCone = ellipsoidGeometry._maximumCone;\n  const vertexFormat = ellipsoidGeometry._vertexFormat;\n\n  // Add an extra slice and stack so that the number of partitions is the\n  // number of surfaces rather than the number of joints\n  let slicePartitions = ellipsoidGeometry._slicePartitions + 1;\n  let stackPartitions = ellipsoidGeometry._stackPartitions + 1;\n  slicePartitions = Math.round(slicePartitions * Math.abs(maximumClock - minimumClock) / CesiumMath.TWO_PI);\n  stackPartitions = Math.round(stackPartitions * Math.abs(maximumCone - minimumCone) / CesiumMath.PI);\n  if (slicePartitions < 2) {\n    slicePartitions = 2;\n  }\n  if (stackPartitions < 2) {\n    stackPartitions = 2;\n  }\n  let i;\n  let j;\n  let index = 0;\n\n  // Create arrays for theta and phi. Duplicate first and last angle to\n  // allow different normals at the intersections.\n  const phis = [minimumCone];\n  const thetas = [minimumClock];\n  for (i = 0; i < stackPartitions; i++) {\n    phis.push(minimumCone + i * (maximumCone - minimumCone) / (stackPartitions - 1));\n  }\n  phis.push(maximumCone);\n  for (j = 0; j < slicePartitions; j++) {\n    thetas.push(minimumClock + j * (maximumClock - minimumClock) / (slicePartitions - 1));\n  }\n  thetas.push(maximumClock);\n  const numPhis = phis.length;\n  const numThetas = thetas.length;\n\n  // Allow for extra indices if there is an inner surface and if we need\n  // to close the sides if the clock range is not a full circle\n  let extraIndices = 0;\n  let vertexMultiplier = 1.0;\n  const hasInnerSurface = innerRadii.x !== radii.x || innerRadii.y !== radii.y || innerRadii.z !== radii.z;\n  let isTopOpen = false;\n  let isBotOpen = false;\n  let isClockOpen = false;\n  if (hasInnerSurface) {\n    vertexMultiplier = 2.0;\n    if (minimumCone > 0.0) {\n      isTopOpen = true;\n      extraIndices += slicePartitions - 1;\n    }\n    if (maximumCone < Math.PI) {\n      isBotOpen = true;\n      extraIndices += slicePartitions - 1;\n    }\n    if ((maximumClock - minimumClock) % CesiumMath.TWO_PI) {\n      isClockOpen = true;\n      extraIndices += (stackPartitions - 1) * 2 + 1;\n    } else {\n      extraIndices += 1;\n    }\n  }\n  const vertexCount = numThetas * numPhis * vertexMultiplier;\n  const positions = new Float64Array(vertexCount * 3);\n  const isInner = new Array(vertexCount).fill(false);\n  const negateNormal = new Array(vertexCount).fill(false);\n\n  // Multiply by 6 because there are two triangles per sector\n  const indexCount = slicePartitions * stackPartitions * vertexMultiplier;\n  const numIndices = 6 * (indexCount + extraIndices + 1 - (slicePartitions + stackPartitions) * vertexMultiplier);\n  const indices = IndexDatatype.createTypedArray(indexCount, numIndices);\n  const normals = vertexFormat.normal ? new Float32Array(vertexCount * 3) : undefined;\n  const tangents = vertexFormat.tangent ? new Float32Array(vertexCount * 3) : undefined;\n  const bitangents = vertexFormat.bitangent ? new Float32Array(vertexCount * 3) : undefined;\n  const st = vertexFormat.st ? new Float32Array(vertexCount * 2) : undefined;\n\n  // Calculate sin/cos phi\n  const sinPhi = new Array(numPhis);\n  const cosPhi = new Array(numPhis);\n  for (i = 0; i < numPhis; i++) {\n    sinPhi[i] = sin(phis[i]);\n    cosPhi[i] = cos(phis[i]);\n  }\n\n  // Calculate sin/cos theta\n  const sinTheta = new Array(numThetas);\n  const cosTheta = new Array(numThetas);\n  for (j = 0; j < numThetas; j++) {\n    cosTheta[j] = cos(thetas[j]);\n    sinTheta[j] = sin(thetas[j]);\n  }\n\n  // Create outer surface\n  for (i = 0; i < numPhis; i++) {\n    for (j = 0; j < numThetas; j++) {\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\n      positions[index++] = radii.z * cosPhi[i];\n    }\n  }\n\n  // Create inner surface\n  let vertexIndex = vertexCount / 2.0;\n  if (hasInnerSurface) {\n    for (i = 0; i < numPhis; i++) {\n      for (j = 0; j < numThetas; j++) {\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\n        positions[index++] = innerRadii.z * cosPhi[i];\n\n        // Keep track of which vertices are the inner and which ones\n        // need the normal to be negated\n        isInner[vertexIndex] = true;\n        if (i > 0 && i !== numPhis - 1 && j !== 0 && j !== numThetas - 1) {\n          negateNormal[vertexIndex] = true;\n        }\n        vertexIndex++;\n      }\n    }\n  }\n\n  // Create indices for outer surface\n  index = 0;\n  let topOffset;\n  let bottomOffset;\n  for (i = 1; i < numPhis - 2; i++) {\n    topOffset = i * numThetas;\n    bottomOffset = (i + 1) * numThetas;\n    for (j = 1; j < numThetas - 2; j++) {\n      indices[index++] = bottomOffset + j;\n      indices[index++] = bottomOffset + j + 1;\n      indices[index++] = topOffset + j + 1;\n      indices[index++] = bottomOffset + j;\n      indices[index++] = topOffset + j + 1;\n      indices[index++] = topOffset + j;\n    }\n  }\n\n  // Create indices for inner surface\n  if (hasInnerSurface) {\n    const offset = numPhis * numThetas;\n    for (i = 1; i < numPhis - 2; i++) {\n      topOffset = offset + i * numThetas;\n      bottomOffset = offset + (i + 1) * numThetas;\n      for (j = 1; j < numThetas - 2; j++) {\n        indices[index++] = bottomOffset + j;\n        indices[index++] = topOffset + j;\n        indices[index++] = topOffset + j + 1;\n        indices[index++] = bottomOffset + j;\n        indices[index++] = topOffset + j + 1;\n        indices[index++] = bottomOffset + j + 1;\n      }\n    }\n  }\n  let outerOffset;\n  let innerOffset;\n  if (hasInnerSurface) {\n    if (isTopOpen) {\n      // Connect the top of the inner surface to the top of the outer surface\n      innerOffset = numPhis * numThetas;\n      for (i = 1; i < numThetas - 2; i++) {\n        indices[index++] = i;\n        indices[index++] = i + 1;\n        indices[index++] = innerOffset + i + 1;\n        indices[index++] = i;\n        indices[index++] = innerOffset + i + 1;\n        indices[index++] = innerOffset + i;\n      }\n    }\n    if (isBotOpen) {\n      // Connect the bottom of the inner surface to the bottom of the outer surface\n      outerOffset = numPhis * numThetas - numThetas;\n      innerOffset = numPhis * numThetas * vertexMultiplier - numThetas;\n      for (i = 1; i < numThetas - 2; i++) {\n        indices[index++] = outerOffset + i + 1;\n        indices[index++] = outerOffset + i;\n        indices[index++] = innerOffset + i;\n        indices[index++] = outerOffset + i + 1;\n        indices[index++] = innerOffset + i;\n        indices[index++] = innerOffset + i + 1;\n      }\n    }\n  }\n\n  // Connect the edges if clock is not closed\n  if (isClockOpen) {\n    for (i = 1; i < numPhis - 2; i++) {\n      innerOffset = numThetas * numPhis + numThetas * i;\n      outerOffset = numThetas * i;\n      indices[index++] = innerOffset;\n      indices[index++] = outerOffset + numThetas;\n      indices[index++] = outerOffset;\n      indices[index++] = innerOffset;\n      indices[index++] = innerOffset + numThetas;\n      indices[index++] = outerOffset + numThetas;\n    }\n    for (i = 1; i < numPhis - 2; i++) {\n      innerOffset = numThetas * numPhis + numThetas * (i + 1) - 1;\n      outerOffset = numThetas * (i + 1) - 1;\n      indices[index++] = outerOffset + numThetas;\n      indices[index++] = innerOffset;\n      indices[index++] = outerOffset;\n      indices[index++] = outerOffset + numThetas;\n      indices[index++] = innerOffset + numThetas;\n      indices[index++] = innerOffset;\n    }\n  }\n  const attributes = new GeometryAttributes();\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions\n    });\n  }\n  let stIndex = 0;\n  let normalIndex = 0;\n  let tangentIndex = 0;\n  let bitangentIndex = 0;\n  const vertexCountHalf = vertexCount / 2.0;\n  let ellipsoid;\n  const ellipsoidOuter = Ellipsoid.fromCartesian3(radii);\n  const ellipsoidInner = Ellipsoid.fromCartesian3(innerRadii);\n  if (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n    for (i = 0; i < vertexCount; i++) {\n      ellipsoid = isInner[i] ? ellipsoidInner : ellipsoidOuter;\n      const position = Cartesian3.fromArray(positions, i * 3, scratchPosition);\n      const normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\n      if (negateNormal[i]) {\n        Cartesian3.negate(normal, normal);\n      }\n      if (vertexFormat.st) {\n        const normalST = Cartesian2.negate(normal, scratchNormalST);\n        st[stIndex++] = Math.atan2(normalST.y, normalST.x) / CesiumMath.TWO_PI + 0.5;\n        st[stIndex++] = Math.asin(normal.z) / Math.PI + 0.5;\n      }\n      if (vertexFormat.normal) {\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n      }\n      if (vertexFormat.tangent || vertexFormat.bitangent) {\n        const tangent = scratchTangent;\n\n        // Use UNIT_X for the poles\n        let tangetOffset = 0;\n        let unit;\n        if (isInner[i]) {\n          tangetOffset = vertexCountHalf;\n        }\n        if (!isTopOpen && i >= tangetOffset && i < tangetOffset + numThetas * 2) {\n          unit = Cartesian3.UNIT_X;\n        } else {\n          unit = Cartesian3.UNIT_Z;\n        }\n        Cartesian3.cross(unit, normal, tangent);\n        Cartesian3.normalize(tangent, tangent);\n        if (vertexFormat.tangent) {\n          tangents[tangentIndex++] = tangent.x;\n          tangents[tangentIndex++] = tangent.y;\n          tangents[tangentIndex++] = tangent.z;\n        }\n        if (vertexFormat.bitangent) {\n          const bitangent = Cartesian3.cross(normal, tangent, scratchBitangent);\n          Cartesian3.normalize(bitangent, bitangent);\n          bitangents[bitangentIndex++] = bitangent.x;\n          bitangents[bitangentIndex++] = bitangent.y;\n          bitangents[bitangentIndex++] = bitangent.z;\n        }\n      }\n    }\n    if (vertexFormat.st) {\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: st\n      });\n    }\n    if (vertexFormat.normal) {\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals\n      });\n    }\n    if (vertexFormat.tangent) {\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents\n      });\n    }\n    if (vertexFormat.bitangent) {\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents\n      });\n    }\n  }\n  if (defined(ellipsoidGeometry._offsetAttribute)) {\n    const length = positions.length;\n    const offsetValue = ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n    const applyOffset = new Uint8Array(length / 3).fill(offsetValue);\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset\n    });\n  }\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: BoundingSphere.fromEllipsoid(ellipsoidOuter),\n    offsetAttribute: ellipsoidGeometry._offsetAttribute\n  });\n};\nlet unitEllipsoidGeometry;\n\n/**\n * Returns the geometric representation of a unit ellipsoid, including its vertices, indices, and a bounding sphere.\n * @returns {Geometry} The computed vertices and indices.\n *\n * @private\n */\nEllipsoidGeometry.getUnitEllipsoid = function () {\n  if (!defined(unitEllipsoidGeometry)) {\n    unitEllipsoidGeometry = EllipsoidGeometry.createGeometry(new EllipsoidGeometry({\n      radii: new Cartesian3(1.0, 1.0, 1.0),\n      vertexFormat: VertexFormat.POSITION_ONLY\n    }));\n  }\n  return unitEllipsoidGeometry;\n};\nexport default EllipsoidGeometry;","map":{"version":3,"names":["BoundingSphere","Cartesian2","Cartesian3","ComponentDatatype","defaultValue","defined","DeveloperError","Ellipsoid","Geometry","GeometryAttribute","GeometryAttributes","GeometryOffsetAttribute","IndexDatatype","CesiumMath","PrimitiveType","VertexFormat","scratchPosition","scratchNormal","scratchTangent","scratchBitangent","scratchNormalST","defaultRadii","cos","Math","sin","EllipsoidGeometry","options","EMPTY_OBJECT","radii","innerRadii","minimumClock","maximumClock","TWO_PI","minimumCone","maximumCone","PI","stackPartitions","round","slicePartitions","vertexFormat","DEFAULT","_radii","clone","_innerRadii","_minimumClock","_maximumClock","_minimumCone","_maximumCone","_stackPartitions","_slicePartitions","_vertexFormat","_offsetAttribute","offsetAttribute","_workerName","packedLength","pack","value","array","startingIndex","scratchRadii","scratchInnerRadii","scratchVertexFormat","scratchOptions","undefined","unpack","result","createGeometry","ellipsoidGeometry","x","y","z","abs","i","j","index","phis","thetas","push","numPhis","length","numThetas","extraIndices","vertexMultiplier","hasInnerSurface","isTopOpen","isBotOpen","isClockOpen","vertexCount","positions","Float64Array","isInner","Array","fill","negateNormal","indexCount","numIndices","indices","createTypedArray","normals","normal","Float32Array","tangents","tangent","bitangents","bitangent","st","sinPhi","cosPhi","sinTheta","cosTheta","vertexIndex","topOffset","bottomOffset","offset","outerOffset","innerOffset","attributes","position","componentDatatype","DOUBLE","componentsPerAttribute","values","stIndex","normalIndex","tangentIndex","bitangentIndex","vertexCountHalf","ellipsoid","ellipsoidOuter","fromCartesian3","ellipsoidInner","fromArray","geodeticSurfaceNormal","negate","normalST","atan2","asin","tangetOffset","unit","UNIT_X","UNIT_Z","cross","normalize","FLOAT","offsetValue","NONE","applyOffset","Uint8Array","UNSIGNED_BYTE","primitiveType","TRIANGLES","boundingSphere","fromEllipsoid","unitEllipsoidGeometry","getUnitEllipsoid","POSITION_ONLY"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/EllipsoidGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nconst scratchPosition = new Cartesian3();\nconst scratchNormal = new Cartesian3();\nconst scratchTangent = new Cartesian3();\nconst scratchBitangent = new Cartesian3();\nconst scratchNormalST = new Cartesian3();\nconst defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\n\nconst cos = Math.cos;\nconst sin = Math.sin;\n\n/**\n * A description of an ellipsoid centered at the origin.\n *\n * @alias EllipsoidGeometry\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\n * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\n * @param {number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\n * @param {number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\n * @param {number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\n * @param {number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\n *\n * @see EllipsoidGeometry#createGeometry\n *\n * @example\n * const ellipsoid = new Cesium.EllipsoidGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0)\n * });\n * const geometry = Cesium.EllipsoidGeometry.createGeometry(ellipsoid);\n */\nfunction EllipsoidGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const radii = defaultValue(options.radii, defaultRadii);\n  const innerRadii = defaultValue(options.innerRadii, radii);\n  const minimumClock = defaultValue(options.minimumClock, 0.0);\n  const maximumClock = defaultValue(options.maximumClock, CesiumMath.TWO_PI);\n  const minimumCone = defaultValue(options.minimumCone, 0.0);\n  const maximumCone = defaultValue(options.maximumCone, CesiumMath.PI);\n  const stackPartitions = Math.round(defaultValue(options.stackPartitions, 64));\n  const slicePartitions = Math.round(defaultValue(options.slicePartitions, 64));\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (slicePartitions < 3) {\n    throw new DeveloperError(\n      \"options.slicePartitions cannot be less than three.\",\n    );\n  }\n  if (stackPartitions < 3) {\n    throw new DeveloperError(\n      \"options.stackPartitions cannot be less than three.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._radii = Cartesian3.clone(radii);\n  this._innerRadii = Cartesian3.clone(innerRadii);\n  this._minimumClock = minimumClock;\n  this._maximumClock = maximumClock;\n  this._minimumCone = minimumCone;\n  this._maximumCone = maximumCone;\n  this._stackPartitions = stackPartitions;\n  this._slicePartitions = slicePartitions;\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createEllipsoidGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nEllipsoidGeometry.packedLength =\n  2 * Cartesian3.packedLength + VertexFormat.packedLength + 7;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {EllipsoidGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nEllipsoidGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  Cartesian3.pack(value._radii, array, startingIndex);\n  startingIndex += Cartesian3.packedLength;\n\n  Cartesian3.pack(value._innerRadii, array, startingIndex);\n  startingIndex += Cartesian3.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._minimumClock;\n  array[startingIndex++] = value._maximumClock;\n  array[startingIndex++] = value._minimumCone;\n  array[startingIndex++] = value._maximumCone;\n  array[startingIndex++] = value._stackPartitions;\n  array[startingIndex++] = value._slicePartitions;\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n  return array;\n};\n\nconst scratchRadii = new Cartesian3();\nconst scratchInnerRadii = new Cartesian3();\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  radii: scratchRadii,\n  innerRadii: scratchInnerRadii,\n  vertexFormat: scratchVertexFormat,\n  minimumClock: undefined,\n  maximumClock: undefined,\n  minimumCone: undefined,\n  maximumCone: undefined,\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {EllipsoidGeometry} [result] The object into which to store the result.\n * @returns {EllipsoidGeometry} The modified result parameter or a new EllipsoidGeometry instance if one was not provided.\n */\nEllipsoidGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\n  startingIndex += Cartesian3.packedLength;\n\n  const innerRadii = Cartesian3.unpack(array, startingIndex, scratchInnerRadii);\n  startingIndex += Cartesian3.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat,\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const minimumClock = array[startingIndex++];\n  const maximumClock = array[startingIndex++];\n  const minimumCone = array[startingIndex++];\n  const maximumCone = array[startingIndex++];\n  const stackPartitions = array[startingIndex++];\n  const slicePartitions = array[startingIndex++];\n  const offsetAttribute = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.minimumClock = minimumClock;\n    scratchOptions.maximumClock = maximumClock;\n    scratchOptions.minimumCone = minimumCone;\n    scratchOptions.maximumCone = maximumCone;\n    scratchOptions.stackPartitions = stackPartitions;\n    scratchOptions.slicePartitions = slicePartitions;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new EllipsoidGeometry(scratchOptions);\n  }\n\n  result._radii = Cartesian3.clone(radii, result._radii);\n  result._innerRadii = Cartesian3.clone(innerRadii, result._innerRadii);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._minimumClock = minimumClock;\n  result._maximumClock = maximumClock;\n  result._minimumCone = minimumCone;\n  result._maximumCone = maximumCone;\n  result._stackPartitions = stackPartitions;\n  result._slicePartitions = slicePartitions;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {EllipsoidGeometry} ellipsoidGeometry A description of the ellipsoid.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nEllipsoidGeometry.createGeometry = function (ellipsoidGeometry) {\n  const radii = ellipsoidGeometry._radii;\n  if (radii.x <= 0 || radii.y <= 0 || radii.z <= 0) {\n    return;\n  }\n\n  const innerRadii = ellipsoidGeometry._innerRadii;\n  if (innerRadii.x <= 0 || innerRadii.y <= 0 || innerRadii.z <= 0) {\n    return;\n  }\n\n  const minimumClock = ellipsoidGeometry._minimumClock;\n  const maximumClock = ellipsoidGeometry._maximumClock;\n  const minimumCone = ellipsoidGeometry._minimumCone;\n  const maximumCone = ellipsoidGeometry._maximumCone;\n  const vertexFormat = ellipsoidGeometry._vertexFormat;\n\n  // Add an extra slice and stack so that the number of partitions is the\n  // number of surfaces rather than the number of joints\n  let slicePartitions = ellipsoidGeometry._slicePartitions + 1;\n  let stackPartitions = ellipsoidGeometry._stackPartitions + 1;\n\n  slicePartitions = Math.round(\n    (slicePartitions * Math.abs(maximumClock - minimumClock)) /\n      CesiumMath.TWO_PI,\n  );\n  stackPartitions = Math.round(\n    (stackPartitions * Math.abs(maximumCone - minimumCone)) / CesiumMath.PI,\n  );\n\n  if (slicePartitions < 2) {\n    slicePartitions = 2;\n  }\n  if (stackPartitions < 2) {\n    stackPartitions = 2;\n  }\n\n  let i;\n  let j;\n  let index = 0;\n\n  // Create arrays for theta and phi. Duplicate first and last angle to\n  // allow different normals at the intersections.\n  const phis = [minimumCone];\n  const thetas = [minimumClock];\n  for (i = 0; i < stackPartitions; i++) {\n    phis.push(\n      minimumCone + (i * (maximumCone - minimumCone)) / (stackPartitions - 1),\n    );\n  }\n  phis.push(maximumCone);\n  for (j = 0; j < slicePartitions; j++) {\n    thetas.push(\n      minimumClock +\n        (j * (maximumClock - minimumClock)) / (slicePartitions - 1),\n    );\n  }\n  thetas.push(maximumClock);\n  const numPhis = phis.length;\n  const numThetas = thetas.length;\n\n  // Allow for extra indices if there is an inner surface and if we need\n  // to close the sides if the clock range is not a full circle\n  let extraIndices = 0;\n  let vertexMultiplier = 1.0;\n  const hasInnerSurface =\n    innerRadii.x !== radii.x ||\n    innerRadii.y !== radii.y ||\n    innerRadii.z !== radii.z;\n  let isTopOpen = false;\n  let isBotOpen = false;\n  let isClockOpen = false;\n  if (hasInnerSurface) {\n    vertexMultiplier = 2.0;\n    if (minimumCone > 0.0) {\n      isTopOpen = true;\n      extraIndices += slicePartitions - 1;\n    }\n    if (maximumCone < Math.PI) {\n      isBotOpen = true;\n      extraIndices += slicePartitions - 1;\n    }\n    if ((maximumClock - minimumClock) % CesiumMath.TWO_PI) {\n      isClockOpen = true;\n      extraIndices += (stackPartitions - 1) * 2 + 1;\n    } else {\n      extraIndices += 1;\n    }\n  }\n\n  const vertexCount = numThetas * numPhis * vertexMultiplier;\n  const positions = new Float64Array(vertexCount * 3);\n  const isInner = new Array(vertexCount).fill(false);\n  const negateNormal = new Array(vertexCount).fill(false);\n\n  // Multiply by 6 because there are two triangles per sector\n  const indexCount = slicePartitions * stackPartitions * vertexMultiplier;\n  const numIndices =\n    6 *\n    (indexCount +\n      extraIndices +\n      1 -\n      (slicePartitions + stackPartitions) * vertexMultiplier);\n  const indices = IndexDatatype.createTypedArray(indexCount, numIndices);\n\n  const normals = vertexFormat.normal\n    ? new Float32Array(vertexCount * 3)\n    : undefined;\n  const tangents = vertexFormat.tangent\n    ? new Float32Array(vertexCount * 3)\n    : undefined;\n  const bitangents = vertexFormat.bitangent\n    ? new Float32Array(vertexCount * 3)\n    : undefined;\n  const st = vertexFormat.st ? new Float32Array(vertexCount * 2) : undefined;\n\n  // Calculate sin/cos phi\n  const sinPhi = new Array(numPhis);\n  const cosPhi = new Array(numPhis);\n  for (i = 0; i < numPhis; i++) {\n    sinPhi[i] = sin(phis[i]);\n    cosPhi[i] = cos(phis[i]);\n  }\n\n  // Calculate sin/cos theta\n  const sinTheta = new Array(numThetas);\n  const cosTheta = new Array(numThetas);\n  for (j = 0; j < numThetas; j++) {\n    cosTheta[j] = cos(thetas[j]);\n    sinTheta[j] = sin(thetas[j]);\n  }\n\n  // Create outer surface\n  for (i = 0; i < numPhis; i++) {\n    for (j = 0; j < numThetas; j++) {\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\n      positions[index++] = radii.z * cosPhi[i];\n    }\n  }\n\n  // Create inner surface\n  let vertexIndex = vertexCount / 2.0;\n  if (hasInnerSurface) {\n    for (i = 0; i < numPhis; i++) {\n      for (j = 0; j < numThetas; j++) {\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\n        positions[index++] = innerRadii.z * cosPhi[i];\n\n        // Keep track of which vertices are the inner and which ones\n        // need the normal to be negated\n        isInner[vertexIndex] = true;\n        if (i > 0 && i !== numPhis - 1 && j !== 0 && j !== numThetas - 1) {\n          negateNormal[vertexIndex] = true;\n        }\n        vertexIndex++;\n      }\n    }\n  }\n\n  // Create indices for outer surface\n  index = 0;\n  let topOffset;\n  let bottomOffset;\n  for (i = 1; i < numPhis - 2; i++) {\n    topOffset = i * numThetas;\n    bottomOffset = (i + 1) * numThetas;\n\n    for (j = 1; j < numThetas - 2; j++) {\n      indices[index++] = bottomOffset + j;\n      indices[index++] = bottomOffset + j + 1;\n      indices[index++] = topOffset + j + 1;\n\n      indices[index++] = bottomOffset + j;\n      indices[index++] = topOffset + j + 1;\n      indices[index++] = topOffset + j;\n    }\n  }\n\n  // Create indices for inner surface\n  if (hasInnerSurface) {\n    const offset = numPhis * numThetas;\n    for (i = 1; i < numPhis - 2; i++) {\n      topOffset = offset + i * numThetas;\n      bottomOffset = offset + (i + 1) * numThetas;\n\n      for (j = 1; j < numThetas - 2; j++) {\n        indices[index++] = bottomOffset + j;\n        indices[index++] = topOffset + j;\n        indices[index++] = topOffset + j + 1;\n\n        indices[index++] = bottomOffset + j;\n        indices[index++] = topOffset + j + 1;\n        indices[index++] = bottomOffset + j + 1;\n      }\n    }\n  }\n\n  let outerOffset;\n  let innerOffset;\n  if (hasInnerSurface) {\n    if (isTopOpen) {\n      // Connect the top of the inner surface to the top of the outer surface\n      innerOffset = numPhis * numThetas;\n      for (i = 1; i < numThetas - 2; i++) {\n        indices[index++] = i;\n        indices[index++] = i + 1;\n        indices[index++] = innerOffset + i + 1;\n\n        indices[index++] = i;\n        indices[index++] = innerOffset + i + 1;\n        indices[index++] = innerOffset + i;\n      }\n    }\n\n    if (isBotOpen) {\n      // Connect the bottom of the inner surface to the bottom of the outer surface\n      outerOffset = numPhis * numThetas - numThetas;\n      innerOffset = numPhis * numThetas * vertexMultiplier - numThetas;\n      for (i = 1; i < numThetas - 2; i++) {\n        indices[index++] = outerOffset + i + 1;\n        indices[index++] = outerOffset + i;\n        indices[index++] = innerOffset + i;\n\n        indices[index++] = outerOffset + i + 1;\n        indices[index++] = innerOffset + i;\n        indices[index++] = innerOffset + i + 1;\n      }\n    }\n  }\n\n  // Connect the edges if clock is not closed\n  if (isClockOpen) {\n    for (i = 1; i < numPhis - 2; i++) {\n      innerOffset = numThetas * numPhis + numThetas * i;\n      outerOffset = numThetas * i;\n      indices[index++] = innerOffset;\n      indices[index++] = outerOffset + numThetas;\n      indices[index++] = outerOffset;\n\n      indices[index++] = innerOffset;\n      indices[index++] = innerOffset + numThetas;\n      indices[index++] = outerOffset + numThetas;\n    }\n\n    for (i = 1; i < numPhis - 2; i++) {\n      innerOffset = numThetas * numPhis + numThetas * (i + 1) - 1;\n      outerOffset = numThetas * (i + 1) - 1;\n      indices[index++] = outerOffset + numThetas;\n      indices[index++] = innerOffset;\n      indices[index++] = outerOffset;\n\n      indices[index++] = outerOffset + numThetas;\n      indices[index++] = innerOffset + numThetas;\n      indices[index++] = innerOffset;\n    }\n  }\n\n  const attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n  }\n\n  let stIndex = 0;\n  let normalIndex = 0;\n  let tangentIndex = 0;\n  let bitangentIndex = 0;\n  const vertexCountHalf = vertexCount / 2.0;\n\n  let ellipsoid;\n  const ellipsoidOuter = Ellipsoid.fromCartesian3(radii);\n  const ellipsoidInner = Ellipsoid.fromCartesian3(innerRadii);\n\n  if (\n    vertexFormat.st ||\n    vertexFormat.normal ||\n    vertexFormat.tangent ||\n    vertexFormat.bitangent\n  ) {\n    for (i = 0; i < vertexCount; i++) {\n      ellipsoid = isInner[i] ? ellipsoidInner : ellipsoidOuter;\n      const position = Cartesian3.fromArray(positions, i * 3, scratchPosition);\n      const normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\n      if (negateNormal[i]) {\n        Cartesian3.negate(normal, normal);\n      }\n\n      if (vertexFormat.st) {\n        const normalST = Cartesian2.negate(normal, scratchNormalST);\n        st[stIndex++] =\n          Math.atan2(normalST.y, normalST.x) / CesiumMath.TWO_PI + 0.5;\n        st[stIndex++] = Math.asin(normal.z) / Math.PI + 0.5;\n      }\n\n      if (vertexFormat.normal) {\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n      }\n\n      if (vertexFormat.tangent || vertexFormat.bitangent) {\n        const tangent = scratchTangent;\n\n        // Use UNIT_X for the poles\n        let tangetOffset = 0;\n        let unit;\n        if (isInner[i]) {\n          tangetOffset = vertexCountHalf;\n        }\n        if (\n          !isTopOpen &&\n          i >= tangetOffset &&\n          i < tangetOffset + numThetas * 2\n        ) {\n          unit = Cartesian3.UNIT_X;\n        } else {\n          unit = Cartesian3.UNIT_Z;\n        }\n        Cartesian3.cross(unit, normal, tangent);\n        Cartesian3.normalize(tangent, tangent);\n\n        if (vertexFormat.tangent) {\n          tangents[tangentIndex++] = tangent.x;\n          tangents[tangentIndex++] = tangent.y;\n          tangents[tangentIndex++] = tangent.z;\n        }\n\n        if (vertexFormat.bitangent) {\n          const bitangent = Cartesian3.cross(normal, tangent, scratchBitangent);\n          Cartesian3.normalize(bitangent, bitangent);\n\n          bitangents[bitangentIndex++] = bitangent.x;\n          bitangents[bitangentIndex++] = bitangent.y;\n          bitangents[bitangentIndex++] = bitangent.z;\n        }\n      }\n    }\n\n    if (vertexFormat.st) {\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: st,\n      });\n    }\n\n    if (vertexFormat.normal) {\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n  }\n\n  if (defined(ellipsoidGeometry._offsetAttribute)) {\n    const length = positions.length;\n    const offsetValue =\n      ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n        ? 0\n        : 1;\n    const applyOffset = new Uint8Array(length / 3).fill(offsetValue);\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: BoundingSphere.fromEllipsoid(ellipsoidOuter),\n    offsetAttribute: ellipsoidGeometry._offsetAttribute,\n  });\n};\n\nlet unitEllipsoidGeometry;\n\n/**\n * Returns the geometric representation of a unit ellipsoid, including its vertices, indices, and a bounding sphere.\n * @returns {Geometry} The computed vertices and indices.\n *\n * @private\n */\nEllipsoidGeometry.getUnitEllipsoid = function () {\n  if (!defined(unitEllipsoidGeometry)) {\n    unitEllipsoidGeometry = EllipsoidGeometry.createGeometry(\n      new EllipsoidGeometry({\n        radii: new Cartesian3(1.0, 1.0, 1.0),\n        vertexFormat: VertexFormat.POSITION_ONLY,\n      }),\n    );\n  }\n  return unitEllipsoidGeometry;\n};\nexport default EllipsoidGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}