{"ast":null,"code":"import combine from \"../../Core/combine.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\nimport Cartesian2 from \"../../Core/Cartesian2.js\";\nimport StencilConstants from \"../StencilConstants.js\";\n\n/**\n * The tileset pipeline stage is responsible for updating the model with behavior\n * specific to 3D Tiles.\n *\n * @namespace TilesetPipelineStage\n *\n * @private\n */\nconst TilesetPipelineStage = {\n  name: \"TilesetPipelineStage\" // Helps with debugging\n};\n\n/**\n * Process a model. This modifies the following parts of the render resources:\n *\n * <ul>\n *  <li>adds a define to the fragment shader to indicate that the model uses polygon offset for the skipLevelOfDetail optimization</li>\n *  <li>adds a function to the uniform map to supply polygon offset values for the skipLevelOfDetail optimization</li>\n *  <li>sets stencil values that enable classification on 3D Tiles</li>\n * </ul>\n *\n * <p>\n * See {@link ModelDrawCommand} for the corresponding skipLevelOfDetail derived commands.\n * </p>\n *\n * @param {ModelRenderResources} renderResources The render resources for this model.\n * @param {ModelExperimental} model The model.\n * @param {FrameState} frameState The frameState.\n *\n * @private\n */\nTilesetPipelineStage.process = function (renderResources, model, frameState) {\n  if (model.hasSkipLevelOfDetail(frameState)) {\n    // Make the log-depth depth fragment write account for the polygon offset, too.\n    // Otherwise, the back face commands will cause the higher resolution\n    // tiles to disappear.\n    const shaderBuilder = renderResources.shaderBuilder;\n    shaderBuilder.addDefine(\"POLYGON_OFFSET\", undefined, ShaderDestination.FRAGMENT);\n\n    // This value will be overriden by the depth-only back face derived command.\n    // We just prepare it in advance so we don't have to recompile the shader.\n    // We don't add a uniform declaration through ShaderBuilder because\n    // this is included in writeLogDepth.glsl\n    const uniformMap = {\n      u_polygonOffset: function () {\n        return Cartesian2.ZERO;\n      }\n    };\n    renderResources.uniformMap = combine(uniformMap, renderResources.uniformMap);\n    renderResources.hasSkipLevelOfDetail = true;\n  }\n\n  // Set stencil values for classification on 3D Tiles. This is applied to all\n  // of the derived commands, not just the back-face derived command.\n  const renderStateOptions = renderResources.renderStateOptions;\n  renderStateOptions.stencilTest = StencilConstants.setCesium3DTileBit();\n  renderStateOptions.stencilMask = StencilConstants.CESIUM_3D_TILE_MASK;\n};\nexport default TilesetPipelineStage;","map":{"version":3,"names":["combine","ShaderDestination","Cartesian2","StencilConstants","TilesetPipelineStage","name","process","renderResources","model","frameState","hasSkipLevelOfDetail","shaderBuilder","addDefine","undefined","FRAGMENT","uniformMap","u_polygonOffset","ZERO","renderStateOptions","stencilTest","setCesium3DTileBit","stencilMask","CESIUM_3D_TILE_MASK"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/TilesetPipelineStage.js"],"sourcesContent":["import combine from \"../../Core/combine.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\nimport Cartesian2 from \"../../Core/Cartesian2.js\";\nimport StencilConstants from \"../StencilConstants.js\";\n\n/**\n * The tileset pipeline stage is responsible for updating the model with behavior\n * specific to 3D Tiles.\n *\n * @namespace TilesetPipelineStage\n *\n * @private\n */\nconst TilesetPipelineStage = {\n  name: \"TilesetPipelineStage\", // Helps with debugging\n};\n\n/**\n * Process a model. This modifies the following parts of the render resources:\n *\n * <ul>\n *  <li>adds a define to the fragment shader to indicate that the model uses polygon offset for the skipLevelOfDetail optimization</li>\n *  <li>adds a function to the uniform map to supply polygon offset values for the skipLevelOfDetail optimization</li>\n *  <li>sets stencil values that enable classification on 3D Tiles</li>\n * </ul>\n *\n * <p>\n * See {@link ModelDrawCommand} for the corresponding skipLevelOfDetail derived commands.\n * </p>\n *\n * @param {ModelRenderResources} renderResources The render resources for this model.\n * @param {ModelExperimental} model The model.\n * @param {FrameState} frameState The frameState.\n *\n * @private\n */\nTilesetPipelineStage.process = function (renderResources, model, frameState) {\n  if (model.hasSkipLevelOfDetail(frameState)) {\n    // Make the log-depth depth fragment write account for the polygon offset, too.\n    // Otherwise, the back face commands will cause the higher resolution\n    // tiles to disappear.\n    const shaderBuilder = renderResources.shaderBuilder;\n    shaderBuilder.addDefine(\n      \"POLYGON_OFFSET\",\n      undefined,\n      ShaderDestination.FRAGMENT,\n    );\n\n    // This value will be overriden by the depth-only back face derived command.\n    // We just prepare it in advance so we don't have to recompile the shader.\n    // We don't add a uniform declaration through ShaderBuilder because\n    // this is included in writeLogDepth.glsl\n    const uniformMap = {\n      u_polygonOffset: function () {\n        return Cartesian2.ZERO;\n      },\n    };\n\n    renderResources.uniformMap = combine(\n      uniformMap,\n      renderResources.uniformMap,\n    );\n    renderResources.hasSkipLevelOfDetail = true;\n  }\n\n  // Set stencil values for classification on 3D Tiles. This is applied to all\n  // of the derived commands, not just the back-face derived command.\n  const renderStateOptions = renderResources.renderStateOptions;\n  renderStateOptions.stencilTest = StencilConstants.setCesium3DTileBit();\n  renderStateOptions.stencilMask = StencilConstants.CESIUM_3D_TILE_MASK;\n};\n\nexport default TilesetPipelineStage;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,iBAAiB,MAAM,qCAAqC;AACnE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,gBAAgB,MAAM,wBAAwB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG;EAC3BC,IAAI,EAAE,sBAAsB,CAAE;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,oBAAoB,CAACE,OAAO,GAAG,UAAUC,eAAe,EAAEC,KAAK,EAAEC,UAAU,EAAE;EAC3E,IAAID,KAAK,CAACE,oBAAoB,CAACD,UAAU,CAAC,EAAE;IAC1C;IACA;IACA;IACA,MAAME,aAAa,GAAGJ,eAAe,CAACI,aAAa;IACnDA,aAAa,CAACC,SAAS,CACrB,gBAAgB,EAChBC,SAAS,EACTZ,iBAAiB,CAACa,QACpB,CAAC;;IAED;IACA;IACA;IACA;IACA,MAAMC,UAAU,GAAG;MACjBC,eAAe,EAAE,SAAAA,CAAA,EAAY;QAC3B,OAAOd,UAAU,CAACe,IAAI;MACxB;IACF,CAAC;IAEDV,eAAe,CAACQ,UAAU,GAAGf,OAAO,CAClCe,UAAU,EACVR,eAAe,CAACQ,UAClB,CAAC;IACDR,eAAe,CAACG,oBAAoB,GAAG,IAAI;EAC7C;;EAEA;EACA;EACA,MAAMQ,kBAAkB,GAAGX,eAAe,CAACW,kBAAkB;EAC7DA,kBAAkB,CAACC,WAAW,GAAGhB,gBAAgB,CAACiB,kBAAkB,CAAC,CAAC;EACtEF,kBAAkB,CAACG,WAAW,GAAGlB,gBAAgB,CAACmB,mBAAmB;AACvE,CAAC;AAED,eAAelB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}