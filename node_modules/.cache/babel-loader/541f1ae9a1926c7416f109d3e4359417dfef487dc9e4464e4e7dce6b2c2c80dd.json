{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\n\n/**\n * A fixed-point encoding of a {@link Cartesian3} with 64-bit floating-point components, as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * This is used to encode positions in vertex buffers for rendering without jittering artifacts\n * as described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @alias EncodedCartesian3\n * @constructor\n *\n * @private\n */\nfunction EncodedCartesian3() {\n  /**\n   * The high bits for each component.  Bits 0 to 22 store the whole value.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.high = Cartesian3.clone(Cartesian3.ZERO);\n\n  /**\n   * The low bits for each component.  Bits 7 to 22 store the whole value, and bits 0 to 6 store the fraction.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.low = Cartesian3.clone(Cartesian3.ZERO);\n}\n\n/**\n * Encodes a 64-bit floating-point value as two floating-point values that, when converted to\n * 32-bit floating-point and added, approximate the original input.  The returned object\n * has <code>high</code> and <code>low</code> properties for the high and low bits, respectively.\n * <p>\n * The fixed-point encoding follows {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @param {number} value The floating-point value to encode.\n * @param {object} [result] The object onto which to store the result.\n * @returns {object} The modified result parameter or a new instance if one was not provided.\n *\n * @example\n * const value = 1234567.1234567;\n * const splitValue = Cesium.EncodedCartesian3.encode(value);\n */\nEncodedCartesian3.encode = function (value, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"value\", value);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = {\n      high: 0.0,\n      low: 0.0\n    };\n  }\n  let doubleHigh;\n  if (value >= 0.0) {\n    doubleHigh = Math.floor(value / 65536.0) * 65536.0;\n    result.high = doubleHigh;\n    result.low = value - doubleHigh;\n  } else {\n    doubleHigh = Math.floor(-value / 65536.0) * 65536.0;\n    result.high = -doubleHigh;\n    result.low = value + doubleHigh;\n  }\n  return result;\n};\nconst scratchEncode = {\n  high: 0.0,\n  low: 0.0\n};\n\n/**\n * Encodes a {@link Cartesian3} with 64-bit floating-point components as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * The fixed-point encoding follows {@link https://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {EncodedCartesian3} [result] The object onto which to store the result.\n * @returns {EncodedCartesian3} The modified result parameter or a new EncodedCartesian3 instance if one was not provided.\n *\n * @example\n * const cart = new Cesium.Cartesian3(-10000000.0, 0.0, 10000000.0);\n * const encoded = Cesium.EncodedCartesian3.fromCartesian(cart);\n */\nEncodedCartesian3.fromCartesian = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new EncodedCartesian3();\n  }\n  const high = result.high;\n  const low = result.low;\n  EncodedCartesian3.encode(cartesian.x, scratchEncode);\n  high.x = scratchEncode.high;\n  low.x = scratchEncode.low;\n  EncodedCartesian3.encode(cartesian.y, scratchEncode);\n  high.y = scratchEncode.high;\n  low.y = scratchEncode.low;\n  EncodedCartesian3.encode(cartesian.z, scratchEncode);\n  high.z = scratchEncode.high;\n  low.z = scratchEncode.low;\n  return result;\n};\nconst encodedP = new EncodedCartesian3();\n\n/**\n * Encodes the provided <code>cartesian</code>, and writes it to an array with <code>high</code>\n * components followed by <code>low</code> components, i.e. <code>[high.x, high.y, high.z, low.x, low.y, low.z]</code>.\n * <p>\n * This is used to create interleaved high-precision position vertex attributes.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {number[]} cartesianArray The array to write to.\n * @param {number} index The index into the array to start writing.  Six elements will be written.\n *\n * @exception {DeveloperError} index must be a number greater than or equal to 0.\n *\n * @example\n * const positions = [\n *    new Cesium.Cartesian3(),\n *    // ...\n * ];\n * const encodedPositions = new Float32Array(2 * 3 * positions.length);\n * let j = 0;\n * for (let i = 0; i < positions.length; ++i) {\n *   Cesium.EncodedCartesian3.writeElement(positions[i], encodedPositions, j);\n *   j += 6;\n * }\n */\nEncodedCartesian3.writeElements = function (cartesian, cartesianArray, index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesianArray\", cartesianArray);\n  Check.typeOf.number(\"index\", index);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  //>>includeEnd('debug');\n\n  EncodedCartesian3.fromCartesian(cartesian, encodedP);\n  const high = encodedP.high;\n  const low = encodedP.low;\n  cartesianArray[index] = high.x;\n  cartesianArray[index + 1] = high.y;\n  cartesianArray[index + 2] = high.z;\n  cartesianArray[index + 3] = low.x;\n  cartesianArray[index + 4] = low.y;\n  cartesianArray[index + 5] = low.z;\n};\nexport default EncodedCartesian3;","map":{"version":3,"names":["Cartesian3","Check","defined","EncodedCartesian3","high","clone","ZERO","low","encode","value","result","typeOf","number","doubleHigh","Math","floor","scratchEncode","fromCartesian","cartesian","object","x","y","z","encodedP","writeElements","cartesianArray","index","greaterThanOrEquals"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/EncodedCartesian3.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\n\n/**\n * A fixed-point encoding of a {@link Cartesian3} with 64-bit floating-point components, as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * This is used to encode positions in vertex buffers for rendering without jittering artifacts\n * as described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @alias EncodedCartesian3\n * @constructor\n *\n * @private\n */\nfunction EncodedCartesian3() {\n  /**\n   * The high bits for each component.  Bits 0 to 22 store the whole value.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.high = Cartesian3.clone(Cartesian3.ZERO);\n\n  /**\n   * The low bits for each component.  Bits 7 to 22 store the whole value, and bits 0 to 6 store the fraction.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.low = Cartesian3.clone(Cartesian3.ZERO);\n}\n\n/**\n * Encodes a 64-bit floating-point value as two floating-point values that, when converted to\n * 32-bit floating-point and added, approximate the original input.  The returned object\n * has <code>high</code> and <code>low</code> properties for the high and low bits, respectively.\n * <p>\n * The fixed-point encoding follows {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @param {number} value The floating-point value to encode.\n * @param {object} [result] The object onto which to store the result.\n * @returns {object} The modified result parameter or a new instance if one was not provided.\n *\n * @example\n * const value = 1234567.1234567;\n * const splitValue = Cesium.EncodedCartesian3.encode(value);\n */\nEncodedCartesian3.encode = function (value, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"value\", value);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = {\n      high: 0.0,\n      low: 0.0,\n    };\n  }\n\n  let doubleHigh;\n  if (value >= 0.0) {\n    doubleHigh = Math.floor(value / 65536.0) * 65536.0;\n    result.high = doubleHigh;\n    result.low = value - doubleHigh;\n  } else {\n    doubleHigh = Math.floor(-value / 65536.0) * 65536.0;\n    result.high = -doubleHigh;\n    result.low = value + doubleHigh;\n  }\n\n  return result;\n};\n\nconst scratchEncode = {\n  high: 0.0,\n  low: 0.0,\n};\n\n/**\n * Encodes a {@link Cartesian3} with 64-bit floating-point components as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * The fixed-point encoding follows {@link https://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {EncodedCartesian3} [result] The object onto which to store the result.\n * @returns {EncodedCartesian3} The modified result parameter or a new EncodedCartesian3 instance if one was not provided.\n *\n * @example\n * const cart = new Cesium.Cartesian3(-10000000.0, 0.0, 10000000.0);\n * const encoded = Cesium.EncodedCartesian3.fromCartesian(cart);\n */\nEncodedCartesian3.fromCartesian = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new EncodedCartesian3();\n  }\n\n  const high = result.high;\n  const low = result.low;\n\n  EncodedCartesian3.encode(cartesian.x, scratchEncode);\n  high.x = scratchEncode.high;\n  low.x = scratchEncode.low;\n\n  EncodedCartesian3.encode(cartesian.y, scratchEncode);\n  high.y = scratchEncode.high;\n  low.y = scratchEncode.low;\n\n  EncodedCartesian3.encode(cartesian.z, scratchEncode);\n  high.z = scratchEncode.high;\n  low.z = scratchEncode.low;\n\n  return result;\n};\n\nconst encodedP = new EncodedCartesian3();\n\n/**\n * Encodes the provided <code>cartesian</code>, and writes it to an array with <code>high</code>\n * components followed by <code>low</code> components, i.e. <code>[high.x, high.y, high.z, low.x, low.y, low.z]</code>.\n * <p>\n * This is used to create interleaved high-precision position vertex attributes.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {number[]} cartesianArray The array to write to.\n * @param {number} index The index into the array to start writing.  Six elements will be written.\n *\n * @exception {DeveloperError} index must be a number greater than or equal to 0.\n *\n * @example\n * const positions = [\n *    new Cesium.Cartesian3(),\n *    // ...\n * ];\n * const encodedPositions = new Float32Array(2 * 3 * positions.length);\n * let j = 0;\n * for (let i = 0; i < positions.length; ++i) {\n *   Cesium.EncodedCartesian3.writeElement(positions[i], encodedPositions, j);\n *   j += 6;\n * }\n */\nEncodedCartesian3.writeElements = function (cartesian, cartesianArray, index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesianArray\", cartesianArray);\n  Check.typeOf.number(\"index\", index);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  //>>includeEnd('debug');\n\n  EncodedCartesian3.fromCartesian(cartesian, encodedP);\n  const high = encodedP.high;\n  const low = encodedP.low;\n\n  cartesianArray[index] = high.x;\n  cartesianArray[index + 1] = high.y;\n  cartesianArray[index + 2] = high.z;\n  cartesianArray[index + 3] = low.x;\n  cartesianArray[index + 4] = low.y;\n  cartesianArray[index + 5] = low.z;\n};\nexport default EncodedCartesian3;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}