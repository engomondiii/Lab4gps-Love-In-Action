{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\nimport SplitDirection from \"../Scene/SplitDirection.js\";\nconst defaultColor = Color.WHITE;\nconst defaultEyeOffset = Cartesian3.ZERO;\nconst defaultHeightReference = HeightReference.NONE;\nconst defaultPixelOffset = Cartesian2.ZERO;\nconst defaultScale = 1.0;\nconst defaultRotation = 0.0;\nconst defaultAlignedAxis = Cartesian3.ZERO;\nconst defaultHorizontalOrigin = HorizontalOrigin.CENTER;\nconst defaultVerticalOrigin = VerticalOrigin.CENTER;\nconst defaultSizeInMeters = false;\nconst defaultSplitDirection = SplitDirection.NONE;\nconst positionScratch = new Cartesian3();\nconst colorScratch = new Color();\nconst eyeOffsetScratch = new Cartesian3();\nconst pixelOffsetScratch = new Cartesian2();\nconst scaleByDistanceScratch = new NearFarScalar();\nconst translucencyByDistanceScratch = new NearFarScalar();\nconst pixelOffsetScaleByDistanceScratch = new NearFarScalar();\nconst boundingRectangleScratch = new BoundingRectangle();\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\nfunction EntityData(entity) {\n  this.entity = entity;\n  this.billboard = undefined;\n  this.textureValue = undefined;\n}\n\n/**\n * A {@link Visualizer} which maps {@link Entity#billboard} to a {@link Billboard}.\n * @alias BillboardVisualizer\n * @constructor\n *\n * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction BillboardVisualizer(entityCluster, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entityCluster)) {\n    throw new DeveloperError(\"entityCluster is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(BillboardVisualizer.prototype._onCollectionChanged, this);\n  this._cluster = entityCluster;\n  this._entityCollection = entityCollection;\n  this._items = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {boolean} This function always returns true.\n */\nBillboardVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const items = this._items.values;\n  const cluster = this._cluster;\n  for (let i = 0, len = items.length; i < len; i++) {\n    const item = items[i];\n    const entity = item.entity;\n    const billboardGraphics = entity._billboard;\n    let textureValue;\n    let billboard = item.billboard;\n    let show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(billboardGraphics._show, time, true);\n    let position;\n    if (show) {\n      position = Property.getValueOrUndefined(entity._position, time, positionScratch);\n      textureValue = Property.getValueOrUndefined(billboardGraphics._image, time);\n      show = defined(position) && defined(textureValue);\n    }\n    if (!show) {\n      //don't bother creating or updating anything else\n      returnPrimitive(item, entity, cluster);\n      continue;\n    }\n    if (!Property.isConstant(entity._position)) {\n      cluster._clusterDirty = true;\n    }\n    if (!defined(billboard)) {\n      billboard = cluster.getBillboard(entity);\n      billboard.id = entity;\n      billboard.image = undefined;\n      item.billboard = billboard;\n    }\n    billboard.show = show;\n    if (!defined(billboard.image) || item.textureValue !== textureValue) {\n      billboard.image = textureValue;\n      item.textureValue = textureValue;\n    }\n    billboard.position = position;\n    billboard.color = Property.getValueOrDefault(billboardGraphics._color, time, defaultColor, colorScratch);\n    billboard.eyeOffset = Property.getValueOrDefault(billboardGraphics._eyeOffset, time, defaultEyeOffset, eyeOffsetScratch);\n    billboard.heightReference = Property.getValueOrDefault(billboardGraphics._heightReference, time, defaultHeightReference);\n    billboard.pixelOffset = Property.getValueOrDefault(billboardGraphics._pixelOffset, time, defaultPixelOffset, pixelOffsetScratch);\n    billboard.scale = Property.getValueOrDefault(billboardGraphics._scale, time, defaultScale);\n    billboard.rotation = Property.getValueOrDefault(billboardGraphics._rotation, time, defaultRotation);\n    billboard.alignedAxis = Property.getValueOrDefault(billboardGraphics._alignedAxis, time, defaultAlignedAxis);\n    billboard.horizontalOrigin = Property.getValueOrDefault(billboardGraphics._horizontalOrigin, time, defaultHorizontalOrigin);\n    billboard.verticalOrigin = Property.getValueOrDefault(billboardGraphics._verticalOrigin, time, defaultVerticalOrigin);\n    billboard.width = Property.getValueOrUndefined(billboardGraphics._width, time);\n    billboard.height = Property.getValueOrUndefined(billboardGraphics._height, time);\n    billboard.scaleByDistance = Property.getValueOrUndefined(billboardGraphics._scaleByDistance, time, scaleByDistanceScratch);\n    billboard.translucencyByDistance = Property.getValueOrUndefined(billboardGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n    billboard.pixelOffsetScaleByDistance = Property.getValueOrUndefined(billboardGraphics._pixelOffsetScaleByDistance, time, pixelOffsetScaleByDistanceScratch);\n    billboard.sizeInMeters = Property.getValueOrDefault(billboardGraphics._sizeInMeters, time, defaultSizeInMeters);\n    billboard.distanceDisplayCondition = Property.getValueOrUndefined(billboardGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n    billboard.disableDepthTestDistance = Property.getValueOrUndefined(billboardGraphics._disableDepthTestDistance, time);\n    billboard.splitDirection = Property.getValueOrDefault(billboardGraphics._splitDirection, time, defaultSplitDirection);\n    const subRegion = Property.getValueOrUndefined(billboardGraphics._imageSubRegion, time, boundingRectangleScratch);\n    if (defined(subRegion)) {\n      billboard.setImageSubRegion(billboard._imageId, subRegion);\n    }\n  }\n  return true;\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nBillboardVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const item = this._items.get(entity.id);\n  if (!defined(item) || !defined(item.billboard)) {\n    return BoundingSphereState.FAILED;\n  }\n  const billboard = item.billboard;\n  if (billboard.heightReference === HeightReference.NONE) {\n    result.center = Cartesian3.clone(billboard.position, result.center);\n  } else {\n    if (!defined(billboard._clampedPosition)) {\n      return BoundingSphereState.PENDING;\n    }\n    result.center = Cartesian3.clone(billboard._clampedPosition, result.center);\n  }\n  result.radius = 0;\n  return BoundingSphereState.DONE;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n */\nBillboardVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nBillboardVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(BillboardVisualizer.prototype._onCollectionChanged, this);\n  const entities = this._entityCollection.values;\n  for (let i = 0; i < entities.length; i++) {\n    this._cluster.removeBillboard(entities[i]);\n  }\n  return destroyObject(this);\n};\nBillboardVisualizer.prototype._onCollectionChanged = function (entityCollection, added, removed, changed) {\n  let i;\n  let entity;\n  const items = this._items;\n  const cluster = this._cluster;\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._billboard) && defined(entity._position)) {\n      items.set(entity.id, new EntityData(entity));\n    }\n  }\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._billboard) && defined(entity._position)) {\n      if (!items.contains(entity.id)) {\n        items.set(entity.id, new EntityData(entity));\n      }\n    } else {\n      returnPrimitive(items.get(entity.id), entity, cluster);\n      items.remove(entity.id);\n    }\n  }\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    returnPrimitive(items.get(entity.id), entity, cluster);\n    items.remove(entity.id);\n  }\n};\nfunction returnPrimitive(item, entity, cluster) {\n  if (defined(item)) {\n    item.billboard = undefined;\n    cluster.removeBillboard(entity);\n  }\n}\nexport default BillboardVisualizer;","map":{"version":3,"names":["AssociativeArray","BoundingRectangle","Cartesian2","Cartesian3","Color","defined","destroyObject","DeveloperError","DistanceDisplayCondition","NearFarScalar","HeightReference","HorizontalOrigin","VerticalOrigin","BoundingSphereState","Property","SplitDirection","defaultColor","WHITE","defaultEyeOffset","ZERO","defaultHeightReference","NONE","defaultPixelOffset","defaultScale","defaultRotation","defaultAlignedAxis","defaultHorizontalOrigin","CENTER","defaultVerticalOrigin","defaultSizeInMeters","defaultSplitDirection","positionScratch","colorScratch","eyeOffsetScratch","pixelOffsetScratch","scaleByDistanceScratch","translucencyByDistanceScratch","pixelOffsetScaleByDistanceScratch","boundingRectangleScratch","distanceDisplayConditionScratch","EntityData","entity","billboard","undefined","textureValue","BillboardVisualizer","entityCluster","entityCollection","collectionChanged","addEventListener","prototype","_onCollectionChanged","_cluster","_entityCollection","_items","values","update","time","items","cluster","i","len","length","item","billboardGraphics","_billboard","show","isShowing","isAvailable","getValueOrDefault","_show","position","getValueOrUndefined","_position","_image","returnPrimitive","isConstant","_clusterDirty","getBillboard","id","image","color","_color","eyeOffset","_eyeOffset","heightReference","_heightReference","pixelOffset","_pixelOffset","scale","_scale","rotation","_rotation","alignedAxis","_alignedAxis","horizontalOrigin","_horizontalOrigin","verticalOrigin","_verticalOrigin","width","_width","height","_height","scaleByDistance","_scaleByDistance","translucencyByDistance","_translucencyByDistance","pixelOffsetScaleByDistance","_pixelOffsetScaleByDistance","sizeInMeters","_sizeInMeters","distanceDisplayCondition","_distanceDisplayCondition","disableDepthTestDistance","_disableDepthTestDistance","splitDirection","_splitDirection","subRegion","_imageSubRegion","setImageSubRegion","_imageId","getBoundingSphere","result","get","FAILED","center","clone","_clampedPosition","PENDING","radius","DONE","isDestroyed","destroy","removeEventListener","entities","removeBillboard","added","removed","changed","set","contains","remove"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/BillboardVisualizer.js"],"sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\nimport SplitDirection from \"../Scene/SplitDirection.js\";\n\nconst defaultColor = Color.WHITE;\nconst defaultEyeOffset = Cartesian3.ZERO;\nconst defaultHeightReference = HeightReference.NONE;\nconst defaultPixelOffset = Cartesian2.ZERO;\nconst defaultScale = 1.0;\nconst defaultRotation = 0.0;\nconst defaultAlignedAxis = Cartesian3.ZERO;\nconst defaultHorizontalOrigin = HorizontalOrigin.CENTER;\nconst defaultVerticalOrigin = VerticalOrigin.CENTER;\nconst defaultSizeInMeters = false;\nconst defaultSplitDirection = SplitDirection.NONE;\n\nconst positionScratch = new Cartesian3();\nconst colorScratch = new Color();\nconst eyeOffsetScratch = new Cartesian3();\nconst pixelOffsetScratch = new Cartesian2();\nconst scaleByDistanceScratch = new NearFarScalar();\nconst translucencyByDistanceScratch = new NearFarScalar();\nconst pixelOffsetScaleByDistanceScratch = new NearFarScalar();\nconst boundingRectangleScratch = new BoundingRectangle();\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\nfunction EntityData(entity) {\n  this.entity = entity;\n  this.billboard = undefined;\n  this.textureValue = undefined;\n}\n\n/**\n * A {@link Visualizer} which maps {@link Entity#billboard} to a {@link Billboard}.\n * @alias BillboardVisualizer\n * @constructor\n *\n * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction BillboardVisualizer(entityCluster, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entityCluster)) {\n    throw new DeveloperError(\"entityCluster is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    BillboardVisualizer.prototype._onCollectionChanged,\n    this,\n  );\n\n  this._cluster = entityCluster;\n  this._entityCollection = entityCollection;\n  this._items = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {boolean} This function always returns true.\n */\nBillboardVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const items = this._items.values;\n  const cluster = this._cluster;\n\n  for (let i = 0, len = items.length; i < len; i++) {\n    const item = items[i];\n    const entity = item.entity;\n    const billboardGraphics = entity._billboard;\n    let textureValue;\n    let billboard = item.billboard;\n    let show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(billboardGraphics._show, time, true);\n    let position;\n    if (show) {\n      position = Property.getValueOrUndefined(\n        entity._position,\n        time,\n        positionScratch,\n      );\n      textureValue = Property.getValueOrUndefined(\n        billboardGraphics._image,\n        time,\n      );\n      show = defined(position) && defined(textureValue);\n    }\n\n    if (!show) {\n      //don't bother creating or updating anything else\n      returnPrimitive(item, entity, cluster);\n      continue;\n    }\n\n    if (!Property.isConstant(entity._position)) {\n      cluster._clusterDirty = true;\n    }\n\n    if (!defined(billboard)) {\n      billboard = cluster.getBillboard(entity);\n      billboard.id = entity;\n      billboard.image = undefined;\n      item.billboard = billboard;\n    }\n\n    billboard.show = show;\n    if (!defined(billboard.image) || item.textureValue !== textureValue) {\n      billboard.image = textureValue;\n      item.textureValue = textureValue;\n    }\n    billboard.position = position;\n    billboard.color = Property.getValueOrDefault(\n      billboardGraphics._color,\n      time,\n      defaultColor,\n      colorScratch,\n    );\n    billboard.eyeOffset = Property.getValueOrDefault(\n      billboardGraphics._eyeOffset,\n      time,\n      defaultEyeOffset,\n      eyeOffsetScratch,\n    );\n    billboard.heightReference = Property.getValueOrDefault(\n      billboardGraphics._heightReference,\n      time,\n      defaultHeightReference,\n    );\n    billboard.pixelOffset = Property.getValueOrDefault(\n      billboardGraphics._pixelOffset,\n      time,\n      defaultPixelOffset,\n      pixelOffsetScratch,\n    );\n    billboard.scale = Property.getValueOrDefault(\n      billboardGraphics._scale,\n      time,\n      defaultScale,\n    );\n    billboard.rotation = Property.getValueOrDefault(\n      billboardGraphics._rotation,\n      time,\n      defaultRotation,\n    );\n    billboard.alignedAxis = Property.getValueOrDefault(\n      billboardGraphics._alignedAxis,\n      time,\n      defaultAlignedAxis,\n    );\n    billboard.horizontalOrigin = Property.getValueOrDefault(\n      billboardGraphics._horizontalOrigin,\n      time,\n      defaultHorizontalOrigin,\n    );\n    billboard.verticalOrigin = Property.getValueOrDefault(\n      billboardGraphics._verticalOrigin,\n      time,\n      defaultVerticalOrigin,\n    );\n    billboard.width = Property.getValueOrUndefined(\n      billboardGraphics._width,\n      time,\n    );\n    billboard.height = Property.getValueOrUndefined(\n      billboardGraphics._height,\n      time,\n    );\n    billboard.scaleByDistance = Property.getValueOrUndefined(\n      billboardGraphics._scaleByDistance,\n      time,\n      scaleByDistanceScratch,\n    );\n    billboard.translucencyByDistance = Property.getValueOrUndefined(\n      billboardGraphics._translucencyByDistance,\n      time,\n      translucencyByDistanceScratch,\n    );\n    billboard.pixelOffsetScaleByDistance = Property.getValueOrUndefined(\n      billboardGraphics._pixelOffsetScaleByDistance,\n      time,\n      pixelOffsetScaleByDistanceScratch,\n    );\n    billboard.sizeInMeters = Property.getValueOrDefault(\n      billboardGraphics._sizeInMeters,\n      time,\n      defaultSizeInMeters,\n    );\n    billboard.distanceDisplayCondition = Property.getValueOrUndefined(\n      billboardGraphics._distanceDisplayCondition,\n      time,\n      distanceDisplayConditionScratch,\n    );\n    billboard.disableDepthTestDistance = Property.getValueOrUndefined(\n      billboardGraphics._disableDepthTestDistance,\n      time,\n    );\n    billboard.splitDirection = Property.getValueOrDefault(\n      billboardGraphics._splitDirection,\n      time,\n      defaultSplitDirection,\n    );\n\n    const subRegion = Property.getValueOrUndefined(\n      billboardGraphics._imageSubRegion,\n      time,\n      boundingRectangleScratch,\n    );\n    if (defined(subRegion)) {\n      billboard.setImageSubRegion(billboard._imageId, subRegion);\n    }\n  }\n  return true;\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nBillboardVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const item = this._items.get(entity.id);\n  if (!defined(item) || !defined(item.billboard)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  const billboard = item.billboard;\n  if (billboard.heightReference === HeightReference.NONE) {\n    result.center = Cartesian3.clone(billboard.position, result.center);\n  } else {\n    if (!defined(billboard._clampedPosition)) {\n      return BoundingSphereState.PENDING;\n    }\n    result.center = Cartesian3.clone(billboard._clampedPosition, result.center);\n  }\n  result.radius = 0;\n  return BoundingSphereState.DONE;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n */\nBillboardVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nBillboardVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    BillboardVisualizer.prototype._onCollectionChanged,\n    this,\n  );\n  const entities = this._entityCollection.values;\n  for (let i = 0; i < entities.length; i++) {\n    this._cluster.removeBillboard(entities[i]);\n  }\n  return destroyObject(this);\n};\n\nBillboardVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed,\n) {\n  let i;\n  let entity;\n  const items = this._items;\n  const cluster = this._cluster;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._billboard) && defined(entity._position)) {\n      items.set(entity.id, new EntityData(entity));\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._billboard) && defined(entity._position)) {\n      if (!items.contains(entity.id)) {\n        items.set(entity.id, new EntityData(entity));\n      }\n    } else {\n      returnPrimitive(items.get(entity.id), entity, cluster);\n      items.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    returnPrimitive(items.get(entity.id), entity, cluster);\n    items.remove(entity.id);\n  }\n};\n\nfunction returnPrimitive(item, entity, cluster) {\n  if (defined(item)) {\n    item.billboard = undefined;\n    cluster.removeBillboard(entity);\n  }\n}\nexport default BillboardVisualizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}