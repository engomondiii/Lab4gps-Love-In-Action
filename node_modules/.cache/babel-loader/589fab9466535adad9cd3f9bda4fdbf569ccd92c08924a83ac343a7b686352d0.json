{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nconst defaultColor = Color.WHITE;\nconst defaultGapColor = Color.TRANSPARENT;\nconst defaultDashLength = 16.0;\nconst defaultDashPattern = 255.0;\n\n/**\n * A {@link MaterialProperty} that maps to polyline dash {@link Material} uniforms.\n * @alias PolylineDashMaterialProperty\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Property|Color} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property|Color} [options.gapColor=Color.TRANSPARENT] A Property specifying the {@link Color} of the gaps in the line.\n * @param {Property|number} [options.dashLength=16.0] A numeric Property specifying the length of the dash pattern in pixels.\n * @param {Property|number} [options.dashPattern=255.0] A numeric Property specifying a 16 bit pattern for the dash\n */\nfunction PolylineDashMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._gapColor = undefined;\n  this._gapColorSubscription = undefined;\n  this._dashLength = undefined;\n  this._dashLengthSubscription = undefined;\n  this._dashPattern = undefined;\n  this._dashPatternSubscription = undefined;\n  this.color = options.color;\n  this.gapColor = options.gapColor;\n  this.dashLength = options.dashLength;\n  this.dashPattern = options.dashPattern;\n}\nObject.defineProperties(PolylineDashMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._color) && Property.isConstant(this._gapColor) && Property.isConstant(this._dashLength) && Property.isConstant(this._dashPattern);\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  color: createPropertyDescriptor(\"color\"),\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the gaps in the line.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  gapColor: createPropertyDescriptor(\"gapColor\"),\n  /**\n   * Gets or sets the numeric Property specifying the length of a dash cycle\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  dashLength: createPropertyDescriptor(\"dashLength\"),\n  /**\n   * Gets or sets the numeric Property specifying a dash pattern\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  dashPattern: createPropertyDescriptor(\"dashPattern\")\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nPolylineDashMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineDash\";\n};\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineDashMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\n  result.gapColor = Property.getValueOrClonedDefault(this._gapColor, time, defaultGapColor, result.gapColor);\n  result.dashLength = Property.getValueOrDefault(this._dashLength, time, defaultDashLength, result.dashLength);\n  result.dashPattern = Property.getValueOrDefault(this._dashPattern, time, defaultDashPattern, result.dashPattern);\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineDashMaterialProperty.prototype.equals = function (other) {\n  return this === other ||\n  //\n  other instanceof PolylineDashMaterialProperty && Property.equals(this._color, other._color) && Property.equals(this._gapColor, other._gapColor) && Property.equals(this._dashLength, other._dashLength) && Property.equals(this._dashPattern, other._dashPattern);\n};\nexport default PolylineDashMaterialProperty;","map":{"version":3,"names":["Color","defaultValue","defined","Event","JulianDate","createPropertyDescriptor","Property","defaultColor","WHITE","defaultGapColor","TRANSPARENT","defaultDashLength","defaultDashPattern","PolylineDashMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_color","undefined","_colorSubscription","_gapColor","_gapColorSubscription","_dashLength","_dashLengthSubscription","_dashPattern","_dashPatternSubscription","color","gapColor","dashLength","dashPattern","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","timeScratch","getValue","result","now","getValueOrClonedDefault","getValueOrDefault","equals","other"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/PolylineDashMaterialProperty.js"],"sourcesContent":["import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultColor = Color.WHITE;\nconst defaultGapColor = Color.TRANSPARENT;\nconst defaultDashLength = 16.0;\nconst defaultDashPattern = 255.0;\n\n/**\n * A {@link MaterialProperty} that maps to polyline dash {@link Material} uniforms.\n * @alias PolylineDashMaterialProperty\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Property|Color} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property|Color} [options.gapColor=Color.TRANSPARENT] A Property specifying the {@link Color} of the gaps in the line.\n * @param {Property|number} [options.dashLength=16.0] A numeric Property specifying the length of the dash pattern in pixels.\n * @param {Property|number} [options.dashPattern=255.0] A numeric Property specifying a 16 bit pattern for the dash\n */\nfunction PolylineDashMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._gapColor = undefined;\n  this._gapColorSubscription = undefined;\n  this._dashLength = undefined;\n  this._dashLengthSubscription = undefined;\n  this._dashPattern = undefined;\n  this._dashPatternSubscription = undefined;\n\n  this.color = options.color;\n  this.gapColor = options.gapColor;\n  this.dashLength = options.dashLength;\n  this.dashPattern = options.dashPattern;\n}\n\nObject.defineProperties(PolylineDashMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) &&\n        Property.isConstant(this._gapColor) &&\n        Property.isConstant(this._dashLength) &&\n        Property.isConstant(this._dashPattern)\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the gaps in the line.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  gapColor: createPropertyDescriptor(\"gapColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the length of a dash cycle\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  dashLength: createPropertyDescriptor(\"dashLength\"),\n\n  /**\n   * Gets or sets the numeric Property specifying a dash pattern\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  dashPattern: createPropertyDescriptor(\"dashPattern\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nPolylineDashMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineDash\";\n};\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineDashMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color,\n  );\n  result.gapColor = Property.getValueOrClonedDefault(\n    this._gapColor,\n    time,\n    defaultGapColor,\n    result.gapColor,\n  );\n  result.dashLength = Property.getValueOrDefault(\n    this._dashLength,\n    time,\n    defaultDashLength,\n    result.dashLength,\n  );\n  result.dashPattern = Property.getValueOrDefault(\n    this._dashPattern,\n    time,\n    defaultDashPattern,\n    result.dashPattern,\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineDashMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PolylineDashMaterialProperty &&\n      Property.equals(this._color, other._color) &&\n      Property.equals(this._gapColor, other._gapColor) &&\n      Property.equals(this._dashLength, other._dashLength) &&\n      Property.equals(this._dashPattern, other._dashPattern))\n  );\n};\nexport default PolylineDashMaterialProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}