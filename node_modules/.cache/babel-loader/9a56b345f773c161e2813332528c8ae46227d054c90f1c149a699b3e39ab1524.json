{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\nconst defaultDistanceDisplayCondition = new DistanceDisplayCondition();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\nfunction Batch(primitives, appearanceType, materialProperty, depthFailAppearanceType, depthFailMaterialProperty, closed, shadows) {\n  this.primitives = primitives;\n  this.appearanceType = appearanceType;\n  this.materialProperty = materialProperty;\n  this.depthFailAppearanceType = depthFailAppearanceType;\n  this.depthFailMaterialProperty = depthFailMaterialProperty;\n  this.closed = closed;\n  this.shadows = shadows;\n  this.updaters = new AssociativeArray();\n  this.createPrimitive = true;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.material = undefined;\n  this.depthFailMaterial = undefined;\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.invalidated = false;\n  this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n}\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\nBatch.prototype.isMaterial = function (updater) {\n  const material = this.materialProperty;\n  const updaterMaterial = updater.fillMaterialProperty;\n  const depthFailMaterial = this.depthFailMaterialProperty;\n  const updaterDepthFailMaterial = updater.depthFailMaterialProperty;\n  if (updaterMaterial === material && updaterDepthFailMaterial === depthFailMaterial) {\n    return true;\n  }\n  let equals = defined(material) && material.equals(updaterMaterial);\n  equals = (!defined(depthFailMaterial) && !defined(updaterDepthFailMaterial) || defined(depthFailMaterial) && depthFailMaterial.equals(updaterDepthFailMaterial)) && equals;\n  return equals;\n};\nBatch.prototype.add = function (time, updater) {\n  const id = updater.id;\n  this.updaters.set(id, updater);\n  this.geometry.set(id, updater.createFillGeometryInstance(time));\n  if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty) || !Property.isConstant(updater.terrainOffsetProperty)) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    const that = this;\n    this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function (entity, propertyName, newValue, oldValue) {\n      if (propertyName === \"isShowing\") {\n        that.showsUpdated.set(updater.id, updater);\n      }\n    }));\n  }\n  this.createPrimitive = true;\n};\nBatch.prototype.remove = function (updater) {\n  const id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    const unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\nconst colorScratch = new Color();\nBatch.prototype.update = function (time) {\n  let isUpdated = true;\n  let primitive = this.primitive;\n  const primitives = this.primitives;\n  const geometries = this.geometry.values;\n  let i;\n  if (this.createPrimitive) {\n    const geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n      this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n      let depthFailAppearance;\n      if (defined(this.depthFailMaterialProperty)) {\n        this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n        depthFailAppearance = new this.depthFailAppearanceType({\n          material: this.depthFailMaterial,\n          translucent: this.depthFailMaterial.isTranslucent(),\n          closed: this.closed\n        });\n      }\n      primitive = new Primitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType({\n          material: this.material,\n          translucent: this.material.isTranslucent(),\n          closed: this.closed\n        }),\n        depthFailAppearance: depthFailAppearance,\n        shadows: this.shadows\n      });\n      primitives.add(primitive);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n      const oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n    this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n    this.primitive.appearance.material = this.material;\n    if (defined(this.depthFailAppearanceType) && !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)) {\n      this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n      this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n    }\n    const updatersWithAttributes = this.updatersWithAttributes.values;\n    const length = updatersWithAttributes.length;\n    for (i = 0; i < length; i++) {\n      const updater = updatersWithAttributes[i];\n      const entity = updater.entity;\n      const instance = this.geometry.get(updater.id);\n      let attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n      if (defined(this.depthFailAppearanceType) && this.depthFailMaterialProperty instanceof ColorMaterialProperty && !updater.depthFailMaterialProperty.isConstant) {\n        const depthFailColorProperty = updater.depthFailMaterialProperty.color;\n        const depthFailColor = Property.getValueOrDefault(depthFailColorProperty, time, Color.WHITE, colorScratch);\n        if (!Color.equals(attributes._lastDepthFailColor, depthFailColor)) {\n          attributes._lastDepthFailColor = Color.clone(depthFailColor, attributes._lastDepthFailColor);\n          attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(depthFailColor, attributes.depthFailColor);\n        }\n      }\n      const show = entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      const currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      }\n      const distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        const distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n        if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n        }\n      }\n      const offsetProperty = updater.terrainOffsetProperty;\n      if (!Property.isConstant(offsetProperty)) {\n        const offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n        if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n          attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n          attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n        }\n      }\n    }\n    this.updateShows(primitive);\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n  return isUpdated;\n};\nBatch.prototype.updateShows = function (primitive) {\n  const showsUpdated = this.showsUpdated.values;\n  const length = showsUpdated.length;\n  for (let i = 0; i < length; i++) {\n    const updater = showsUpdated[i];\n    const entity = updater.entity;\n    const instance = this.geometry.get(updater.id);\n    let attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n    const show = entity.isShowing;\n    const currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  const primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n  const attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n  if (!defined(attributes) || !defined(attributes.boundingSphere) || defined(attributes.show) && attributes.show[0] === 0) {\n    return BoundingSphereState.FAILED;\n  }\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\nBatch.prototype.destroy = function () {\n  const primitive = this.primitive;\n  const primitives = this.primitives;\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n  }\n  const oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n  }\n  this.removeMaterialSubscription();\n};\n\n/**\n * @private\n */\nfunction StaticGeometryPerMaterialBatch(primitives, appearanceType, depthFailAppearanceType, closed, shadows) {\n  this._items = [];\n  this._primitives = primitives;\n  this._appearanceType = appearanceType;\n  this._depthFailAppearanceType = depthFailAppearanceType;\n  this._closed = closed;\n  this._shadows = shadows;\n}\nStaticGeometryPerMaterialBatch.prototype.add = function (time, updater) {\n  const items = this._items;\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    const item = items[i];\n    if (item.isMaterial(updater)) {\n      item.add(time, updater);\n      return;\n    }\n  }\n  const batch = new Batch(this._primitives, this._appearanceType, updater.fillMaterialProperty, this._depthFailAppearanceType, updater.depthFailMaterialProperty, this._closed, this._shadows);\n  batch.add(time, updater);\n  items.push(batch);\n};\nStaticGeometryPerMaterialBatch.prototype.remove = function (updater) {\n  const items = this._items;\n  const length = items.length;\n  for (let i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n      break;\n    }\n  }\n};\nStaticGeometryPerMaterialBatch.prototype.update = function (time) {\n  let i;\n  const items = this._items;\n  const length = items.length;\n  for (i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.invalidated) {\n      items.splice(i, 1);\n      const updaters = item.updaters.values;\n      const updatersLength = updaters.length;\n      for (let h = 0; h < updatersLength; h++) {\n        this.add(time, updaters[h]);\n      }\n      item.destroy();\n    }\n  }\n  let isUpdated = true;\n  for (i = 0; i < items.length; i++) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n  return isUpdated;\n};\nStaticGeometryPerMaterialBatch.prototype.getBoundingSphere = function (updater, result) {\n  const items = this._items;\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    const item = items[i];\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n  return BoundingSphereState.FAILED;\n};\nStaticGeometryPerMaterialBatch.prototype.removeAllPrimitives = function () {\n  const items = this._items;\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n  this._items.length = 0;\n};\nexport default StaticGeometryPerMaterialBatch;","map":{"version":3,"names":["AssociativeArray","Cartesian3","Color","ColorGeometryInstanceAttribute","defined","DistanceDisplayCondition","DistanceDisplayConditionGeometryInstanceAttribute","OffsetGeometryInstanceAttribute","ShowGeometryInstanceAttribute","Primitive","BoundingSphereState","ColorMaterialProperty","MaterialProperty","Property","distanceDisplayConditionScratch","defaultDistanceDisplayCondition","defaultOffset","ZERO","offsetScratch","Batch","primitives","appearanceType","materialProperty","depthFailAppearanceType","depthFailMaterialProperty","closed","shadows","updaters","createPrimitive","primitive","undefined","oldPrimitive","geometry","material","depthFailMaterial","updatersWithAttributes","attributes","invalidated","removeMaterialSubscription","definitionChanged","addEventListener","prototype","onMaterialChanged","subscriptions","showsUpdated","isMaterial","updater","updaterMaterial","fillMaterialProperty","updaterDepthFailMaterial","equals","add","time","id","set","createFillGeometryInstance","hasConstantFill","isConstant","distanceDisplayConditionProperty","terrainOffsetProperty","that","entity","propertyName","newValue","oldValue","remove","unsubscribe","get","colorScratch","update","isUpdated","geometries","values","i","geometriesLength","length","getValue","depthFailAppearance","translucent","isTranslucent","show","asynchronous","geometryInstances","slice","appearance","removeAll","ready","instance","getGeometryInstanceAttributes","depthFailColorProperty","color","depthFailColor","getValueOrDefault","WHITE","_lastDepthFailColor","clone","toValue","isShowing","isFilled","currentShow","distanceDisplayCondition","_lastDistanceDisplayCondition","offsetProperty","offset","_lastOffset","updateShows","value","contains","getBoundingSphere","result","PENDING","boundingSphere","FAILED","DONE","destroy","StaticGeometryPerMaterialBatch","_items","_primitives","_appearanceType","_depthFailAppearanceType","_closed","_shadows","items","item","batch","push","splice","updatersLength","h","removeAllPrimitives"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/StaticGeometryPerMaterialBatch.js"],"sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\n\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\nconst defaultDistanceDisplayCondition = new DistanceDisplayCondition();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\n\nfunction Batch(\n  primitives,\n  appearanceType,\n  materialProperty,\n  depthFailAppearanceType,\n  depthFailMaterialProperty,\n  closed,\n  shadows,\n) {\n  this.primitives = primitives;\n  this.appearanceType = appearanceType;\n  this.materialProperty = materialProperty;\n  this.depthFailAppearanceType = depthFailAppearanceType;\n  this.depthFailMaterialProperty = depthFailMaterialProperty;\n  this.closed = closed;\n  this.shadows = shadows;\n  this.updaters = new AssociativeArray();\n  this.createPrimitive = true;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.material = undefined;\n  this.depthFailMaterial = undefined;\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.invalidated = false;\n  this.removeMaterialSubscription =\n    materialProperty.definitionChanged.addEventListener(\n      Batch.prototype.onMaterialChanged,\n      this,\n    );\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n}\n\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\n\nBatch.prototype.isMaterial = function (updater) {\n  const material = this.materialProperty;\n  const updaterMaterial = updater.fillMaterialProperty;\n  const depthFailMaterial = this.depthFailMaterialProperty;\n  const updaterDepthFailMaterial = updater.depthFailMaterialProperty;\n\n  if (\n    updaterMaterial === material &&\n    updaterDepthFailMaterial === depthFailMaterial\n  ) {\n    return true;\n  }\n  let equals = defined(material) && material.equals(updaterMaterial);\n  equals =\n    ((!defined(depthFailMaterial) && !defined(updaterDepthFailMaterial)) ||\n      (defined(depthFailMaterial) &&\n        depthFailMaterial.equals(updaterDepthFailMaterial))) &&\n    equals;\n  return equals;\n};\n\nBatch.prototype.add = function (time, updater) {\n  const id = updater.id;\n  this.updaters.set(id, updater);\n  this.geometry.set(id, updater.createFillGeometryInstance(time));\n  if (\n    !updater.hasConstantFill ||\n    !updater.fillMaterialProperty.isConstant ||\n    !Property.isConstant(updater.distanceDisplayConditionProperty) ||\n    !Property.isConstant(updater.terrainOffsetProperty)\n  ) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    const that = this;\n    this.subscriptions.set(\n      id,\n      updater.entity.definitionChanged.addEventListener(\n        function (entity, propertyName, newValue, oldValue) {\n          if (propertyName === \"isShowing\") {\n            that.showsUpdated.set(updater.id, updater);\n          }\n        },\n      ),\n    );\n  }\n  this.createPrimitive = true;\n};\n\nBatch.prototype.remove = function (updater) {\n  const id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    const unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\n\nconst colorScratch = new Color();\n\nBatch.prototype.update = function (time) {\n  let isUpdated = true;\n  let primitive = this.primitive;\n  const primitives = this.primitives;\n  const geometries = this.geometry.values;\n  let i;\n\n  if (this.createPrimitive) {\n    const geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n\n      this.material = MaterialProperty.getValue(\n        time,\n        this.materialProperty,\n        this.material,\n      );\n\n      let depthFailAppearance;\n      if (defined(this.depthFailMaterialProperty)) {\n        this.depthFailMaterial = MaterialProperty.getValue(\n          time,\n          this.depthFailMaterialProperty,\n          this.depthFailMaterial,\n        );\n        depthFailAppearance = new this.depthFailAppearanceType({\n          material: this.depthFailMaterial,\n          translucent: this.depthFailMaterial.isTranslucent(),\n          closed: this.closed,\n        });\n      }\n\n      primitive = new Primitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType({\n          material: this.material,\n          translucent: this.material.isTranslucent(),\n          closed: this.closed,\n        }),\n        depthFailAppearance: depthFailAppearance,\n        shadows: this.shadows,\n      });\n\n      primitives.add(primitive);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n      const oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    this.material = MaterialProperty.getValue(\n      time,\n      this.materialProperty,\n      this.material,\n    );\n    this.primitive.appearance.material = this.material;\n\n    if (\n      defined(this.depthFailAppearanceType) &&\n      !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)\n    ) {\n      this.depthFailMaterial = MaterialProperty.getValue(\n        time,\n        this.depthFailMaterialProperty,\n        this.depthFailMaterial,\n      );\n      this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n    }\n\n    const updatersWithAttributes = this.updatersWithAttributes.values;\n    const length = updatersWithAttributes.length;\n    for (i = 0; i < length; i++) {\n      const updater = updatersWithAttributes[i];\n      const entity = updater.entity;\n      const instance = this.geometry.get(updater.id);\n\n      let attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (\n        defined(this.depthFailAppearanceType) &&\n        this.depthFailMaterialProperty instanceof ColorMaterialProperty &&\n        !updater.depthFailMaterialProperty.isConstant\n      ) {\n        const depthFailColorProperty = updater.depthFailMaterialProperty.color;\n        const depthFailColor = Property.getValueOrDefault(\n          depthFailColorProperty,\n          time,\n          Color.WHITE,\n          colorScratch,\n        );\n        if (!Color.equals(attributes._lastDepthFailColor, depthFailColor)) {\n          attributes._lastDepthFailColor = Color.clone(\n            depthFailColor,\n            attributes._lastDepthFailColor,\n          );\n          attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(\n            depthFailColor,\n            attributes.depthFailColor,\n          );\n        }\n      }\n\n      const show =\n        entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      const currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(\n          show,\n          attributes.show,\n        );\n      }\n\n      const distanceDisplayConditionProperty =\n        updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        const distanceDisplayCondition = Property.getValueOrDefault(\n          distanceDisplayConditionProperty,\n          time,\n          defaultDistanceDisplayCondition,\n          distanceDisplayConditionScratch,\n        );\n        if (\n          !DistanceDisplayCondition.equals(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition,\n          )\n        ) {\n          attributes._lastDistanceDisplayCondition =\n            DistanceDisplayCondition.clone(\n              distanceDisplayCondition,\n              attributes._lastDistanceDisplayCondition,\n            );\n          attributes.distanceDisplayCondition =\n            DistanceDisplayConditionGeometryInstanceAttribute.toValue(\n              distanceDisplayCondition,\n              attributes.distanceDisplayCondition,\n            );\n        }\n      }\n\n      const offsetProperty = updater.terrainOffsetProperty;\n      if (!Property.isConstant(offsetProperty)) {\n        const offset = Property.getValueOrDefault(\n          offsetProperty,\n          time,\n          defaultOffset,\n          offsetScratch,\n        );\n        if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n          attributes._lastOffset = Cartesian3.clone(\n            offset,\n            attributes._lastOffset,\n          );\n          attributes.offset = OffsetGeometryInstanceAttribute.toValue(\n            offset,\n            attributes.offset,\n          );\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  const showsUpdated = this.showsUpdated.values;\n  const length = showsUpdated.length;\n  for (let i = 0; i < length; i++) {\n    const updater = showsUpdated[i];\n    const entity = updater.entity;\n    const instance = this.geometry.get(updater.id);\n\n    let attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    const show = entity.isShowing;\n    const currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(\n        show,\n        attributes.show,\n      );\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  const primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n  const attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n  if (\n    !defined(attributes) ||\n    !defined(attributes.boundingSphere) ||\n    (defined(attributes.show) && attributes.show[0] === 0)\n  ) {\n    return BoundingSphereState.FAILED;\n  }\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.destroy = function () {\n  const primitive = this.primitive;\n  const primitives = this.primitives;\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n  }\n  const oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n  }\n  this.removeMaterialSubscription();\n};\n\n/**\n * @private\n */\nfunction StaticGeometryPerMaterialBatch(\n  primitives,\n  appearanceType,\n  depthFailAppearanceType,\n  closed,\n  shadows,\n) {\n  this._items = [];\n  this._primitives = primitives;\n  this._appearanceType = appearanceType;\n  this._depthFailAppearanceType = depthFailAppearanceType;\n  this._closed = closed;\n  this._shadows = shadows;\n}\n\nStaticGeometryPerMaterialBatch.prototype.add = function (time, updater) {\n  const items = this._items;\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    const item = items[i];\n    if (item.isMaterial(updater)) {\n      item.add(time, updater);\n      return;\n    }\n  }\n  const batch = new Batch(\n    this._primitives,\n    this._appearanceType,\n    updater.fillMaterialProperty,\n    this._depthFailAppearanceType,\n    updater.depthFailMaterialProperty,\n    this._closed,\n    this._shadows,\n  );\n  batch.add(time, updater);\n  items.push(batch);\n};\n\nStaticGeometryPerMaterialBatch.prototype.remove = function (updater) {\n  const items = this._items;\n  const length = items.length;\n  for (let i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n      break;\n    }\n  }\n};\n\nStaticGeometryPerMaterialBatch.prototype.update = function (time) {\n  let i;\n  const items = this._items;\n  const length = items.length;\n\n  for (i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.invalidated) {\n      items.splice(i, 1);\n      const updaters = item.updaters.values;\n      const updatersLength = updaters.length;\n      for (let h = 0; h < updatersLength; h++) {\n        this.add(time, updaters[h]);\n      }\n      item.destroy();\n    }\n  }\n\n  let isUpdated = true;\n  for (i = 0; i < items.length; i++) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n  return isUpdated;\n};\n\nStaticGeometryPerMaterialBatch.prototype.getBoundingSphere = function (\n  updater,\n  result,\n) {\n  const items = this._items;\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    const item = items[i];\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n  return BoundingSphereState.FAILED;\n};\n\nStaticGeometryPerMaterialBatch.prototype.removeAllPrimitives = function () {\n  const items = this._items;\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n  this._items.length = 0;\n};\nexport default StaticGeometryPerMaterialBatch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}