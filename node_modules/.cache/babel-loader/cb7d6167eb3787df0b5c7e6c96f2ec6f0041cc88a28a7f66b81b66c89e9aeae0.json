{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\n\n/**\n * A {@link Property} whose value does not change with respect to simulation time.\n *\n * @alias ConstantProperty\n * @constructor\n *\n * @param {*} [value] The property value.\n *\n * @see ConstantPositionProperty\n */\nfunction ConstantProperty(value) {\n  this._value = undefined;\n  this._hasClone = false;\n  this._hasEquals = false;\n  this._definitionChanged = new Event();\n  this.setValue(value);\n}\nObject.defineProperties(ConstantProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * This property always returns <code>true</code>.\n   * @memberof ConstantProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    value: true\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof ConstantProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  }\n});\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.  This parameter is unused since the value does not change with respect to time.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantProperty.prototype.getValue = function (time, result) {\n  return this._hasClone ? this._value.clone(result) : this._value;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {*} value The property value.\n */\nConstantProperty.prototype.setValue = function (value) {\n  const oldValue = this._value;\n  if (oldValue !== value) {\n    const isDefined = defined(value);\n    const hasClone = isDefined && typeof value.clone === \"function\";\n    const hasEquals = isDefined && typeof value.equals === \"function\";\n    const changed = !hasEquals || !value.equals(oldValue);\n    if (changed) {\n      this._hasClone = hasClone;\n      this._hasEquals = hasEquals;\n      this._value = !hasClone ? value : value.clone(this._value);\n      this._definitionChanged.raiseEvent(this);\n    }\n  }\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nConstantProperty.prototype.equals = function (other) {\n  return this === other ||\n  //\n  other instanceof ConstantProperty && (\n  //\n  !this._hasEquals && this._value === other._value ||\n  //\n  this._hasEquals && this._value.equals(other._value));\n};\n\n/**\n * Gets this property's value.\n *\n * @returns {*} This property's value.\n */\nConstantProperty.prototype.valueOf = function () {\n  return this._value;\n};\n\n/**\n * Creates a string representing this property's value.\n *\n * @returns {string} A string representing the property's value.\n */\nConstantProperty.prototype.toString = function () {\n  return String(this._value);\n};\nexport default ConstantProperty;","map":{"version":3,"names":["defined","Event","ConstantProperty","value","_value","undefined","_hasClone","_hasEquals","_definitionChanged","setValue","Object","defineProperties","prototype","isConstant","definitionChanged","get","getValue","time","result","clone","oldValue","isDefined","hasClone","hasEquals","equals","changed","raiseEvent","other","valueOf","toString","String"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/ConstantProperty.js"],"sourcesContent":["import defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\n\n/**\n * A {@link Property} whose value does not change with respect to simulation time.\n *\n * @alias ConstantProperty\n * @constructor\n *\n * @param {*} [value] The property value.\n *\n * @see ConstantPositionProperty\n */\nfunction ConstantProperty(value) {\n  this._value = undefined;\n  this._hasClone = false;\n  this._hasEquals = false;\n  this._definitionChanged = new Event();\n  this.setValue(value);\n}\n\nObject.defineProperties(ConstantProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * This property always returns <code>true</code>.\n   * @memberof ConstantProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    value: true,\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof ConstantProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.  This parameter is unused since the value does not change with respect to time.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantProperty.prototype.getValue = function (time, result) {\n  return this._hasClone ? this._value.clone(result) : this._value;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {*} value The property value.\n */\nConstantProperty.prototype.setValue = function (value) {\n  const oldValue = this._value;\n  if (oldValue !== value) {\n    const isDefined = defined(value);\n    const hasClone = isDefined && typeof value.clone === \"function\";\n    const hasEquals = isDefined && typeof value.equals === \"function\";\n\n    const changed = !hasEquals || !value.equals(oldValue);\n    if (changed) {\n      this._hasClone = hasClone;\n      this._hasEquals = hasEquals;\n      this._value = !hasClone ? value : value.clone(this._value);\n      this._definitionChanged.raiseEvent(this);\n    }\n  }\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nConstantProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof ConstantProperty && //\n      ((!this._hasEquals && this._value === other._value) || //\n        (this._hasEquals && this._value.equals(other._value))))\n  );\n};\n\n/**\n * Gets this property's value.\n *\n * @returns {*} This property's value.\n */\nConstantProperty.prototype.valueOf = function () {\n  return this._value;\n};\n\n/**\n * Creates a string representing this property's value.\n *\n * @returns {string} A string representing the property's value.\n */\nConstantProperty.prototype.toString = function () {\n  return String(this._value);\n};\nexport default ConstantProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}