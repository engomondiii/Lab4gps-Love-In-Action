{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nfunction createPolygonHierarchyProperty(value) {\n  if (Array.isArray(value)) {\n    // convert array of positions to PolygonHierarchy object\n    value = new PolygonHierarchy(value);\n  }\n  return new ConstantProperty(value);\n}\n\n/**\n * @typedef {object} PolygonGraphics.ConstructorOptions\n *\n * Initialization options for the PolygonGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the polygon.\n * @property {Property | PolygonHierarchy | Cartesian3[]} [hierarchy] A Property specifying the {@link PolygonHierarchy}.\n * @property {Property | number} [height=0] A numeric Property specifying the altitude of the polygon relative to the ellipsoid surface.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | number} [extrudedHeight] A numeric Property specifying the altitude of the polygon's extruded face relative to the ellipsoid surface.\n * @property {Property | HeightReference} [extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @property {Property | number} [stRotation=0.0] A numeric property specifying the rotation of the polygon texture counter-clockwise from north. Only has an effect if textureCoordinates is not defined.\n * @property {Property | number} [granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude point.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the polygon is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the polygon.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the polygon is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | boolean} [perPositionHeight=false] A boolean specifying whether or not the height of each position is used.\n * @property {boolean | boolean} [closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @property {boolean | boolean} [closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @property {Property | ArcType} [arcType=ArcType.GEODESIC] The type of line the polygon edges must follow.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the polygon casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this polygon will be displayed.\n * @property {Property | ClassificationType} [classificationType=ClassificationType.BOTH] An enum Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground.\n * @property {ConstantProperty | number} [zIndex=0] A property specifying the zIndex used for ordering ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified.\n * @property {Property | PolygonHierarchy} [textureCoordinates] A Property specifying texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points. Has no effect for ground primitives.\n */\n\n/**\n * Describes a polygon defined by an hierarchy of linear rings which make up the outer shape and any nested holes.\n * The polygon conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n *\n * @alias PolygonGraphics\n * @constructor\n *\n * @param {PolygonGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n */\nfunction PolygonGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._hierarchy = undefined;\n  this._hierarchySubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._perPositionHeight = undefined;\n  this._perPositionHeightSubscription = undefined;\n  this._closeTop = undefined;\n  this._closeTopSubscription = undefined;\n  this._closeBottom = undefined;\n  this._closeBottomSubscription = undefined;\n  this._arcType = undefined;\n  this._arcTypeSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n  this._textureCoordinates = undefined;\n  this._textureCoordinatesSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\nObject.defineProperties(PolygonGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolygonGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n  /**\n   * Gets or sets the Property specifying the {@link PolygonHierarchy}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  hierarchy: createPropertyDescriptor(\"hierarchy\", undefined, createPolygonHierarchyProperty),\n  /**\n   * Gets or sets the numeric Property specifying the constant altitude of the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the polygon extrusion.\n   * If {@link PolygonGraphics#perPositionHeight} is false, the volume starts at {@link PolygonGraphics#height} and ends at this altitude.\n   * If {@link PolygonGraphics#perPositionHeight} is true, the volume starts at the height of each {@link PolygonGraphics#hierarchy} position and ends at this altitude.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n  /**\n   * Gets or sets the numeric property specifying the rotation of the polygon texture counter-clockwise from north. Only has an effect if textureCoordinates is not defined.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n  /**\n   * Gets or sets the boolean Property specifying whether the polygon is filled with the provided material.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n  /**\n   * Gets or sets the Property specifying the material used to fill the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n  /**\n   * Gets or sets the Property specifying whether the polygon is outlined.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n  /**\n   * Gets or sets the boolean specifying whether or not the the height of each position is used.\n   * If true, the shape will have non-uniform altitude defined by the height of each {@link PolygonGraphics#hierarchy} position.\n   * If false, the shape will have a constant altitude as specified by {@link PolygonGraphics#height}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  perPositionHeight: createPropertyDescriptor(\"perPositionHeight\"),\n  /**\n   * Gets or sets a boolean specifying whether or not the top of an extruded polygon is included.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  closeTop: createPropertyDescriptor(\"closeTop\"),\n  /**\n   * Gets or sets a boolean specifying whether or not the bottom of an extruded polygon is included.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  closeBottom: createPropertyDescriptor(\"closeBottom\"),\n  /**\n   * Gets or sets the {@link ArcType} Property specifying the type of lines the polygon edges use.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default ArcType.GEODESIC\n   */\n  arcType: createPropertyDescriptor(\"arcType\"),\n  /**\n   * Get or sets the enum Property specifying whether the polygon\n   * casts or receives shadows from light sources.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this polygon will be displayed.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\"),\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n  /**\n   * Gets or sets the zIndex Prperty specifying the ordering of ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified.\n   * @memberof PolygonGraphics.prototype\n   * @type {ConstantProperty|undefined}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n  /**\n   *  A Property specifying texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points. Has no effect for ground primitives.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  textureCoordinates: createPropertyDescriptor(\"textureCoordinates\")\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PolygonGraphics} [result] The object onto which to store the result.\n * @returns {PolygonGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPolygonGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolygonGraphics(this);\n  }\n  result.show = this.show;\n  result.hierarchy = this.hierarchy;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.perPositionHeight = this.perPositionHeight;\n  result.closeTop = this.closeTop;\n  result.closeBottom = this.closeBottom;\n  result.arcType = this.arcType;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  result.textureCoordinates = this.textureCoordinates;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolygonGraphics} source The object to be merged into this object.\n */\nPolygonGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.hierarchy = defaultValue(this.hierarchy, source.hierarchy);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(this.heightReference, source.heightReference);\n  this.extrudedHeight = defaultValue(this.extrudedHeight, source.extrudedHeight);\n  this.extrudedHeightReference = defaultValue(this.extrudedHeightReference, source.extrudedHeightReference);\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.perPositionHeight = defaultValue(this.perPositionHeight, source.perPositionHeight);\n  this.closeTop = defaultValue(this.closeTop, source.closeTop);\n  this.closeBottom = defaultValue(this.closeBottom, source.closeBottom);\n  this.arcType = defaultValue(this.arcType, source.arcType);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n  this.classificationType = defaultValue(this.classificationType, source.classificationType);\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n  this.textureCoordinates = defaultValue(this.textureCoordinates, source.textureCoordinates);\n};\nexport default PolygonGraphics;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","Event","PolygonHierarchy","ConstantProperty","createMaterialPropertyDescriptor","createPropertyDescriptor","createPolygonHierarchyProperty","value","Array","isArray","PolygonGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_hierarchy","_hierarchySubscription","_height","_heightSubscription","_heightReference","_heightReferenceSubscription","_extrudedHeight","_extrudedHeightSubscription","_extrudedHeightReference","_extrudedHeightReferenceSubscription","_stRotation","_stRotationSubscription","_granularity","_granularitySubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_perPositionHeight","_perPositionHeightSubscription","_closeTop","_closeTopSubscription","_closeBottom","_closeBottomSubscription","_arcType","_arcTypeSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_classificationType","_classificationTypeSubscription","_zIndex","_zIndexSubscription","_textureCoordinates","_textureCoordinatesSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","hierarchy","height","heightReference","extrudedHeight","extrudedHeightReference","stRotation","granularity","fill","material","outline","outlineColor","outlineWidth","perPositionHeight","closeTop","closeBottom","arcType","shadows","distanceDisplayCondition","classificationType","zIndex","textureCoordinates","clone","result","source"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/PolygonGraphics.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\nfunction createPolygonHierarchyProperty(value) {\n  if (Array.isArray(value)) {\n    // convert array of positions to PolygonHierarchy object\n    value = new PolygonHierarchy(value);\n  }\n  return new ConstantProperty(value);\n}\n\n/**\n * @typedef {object} PolygonGraphics.ConstructorOptions\n *\n * Initialization options for the PolygonGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the polygon.\n * @property {Property | PolygonHierarchy | Cartesian3[]} [hierarchy] A Property specifying the {@link PolygonHierarchy}.\n * @property {Property | number} [height=0] A numeric Property specifying the altitude of the polygon relative to the ellipsoid surface.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | number} [extrudedHeight] A numeric Property specifying the altitude of the polygon's extruded face relative to the ellipsoid surface.\n * @property {Property | HeightReference} [extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @property {Property | number} [stRotation=0.0] A numeric property specifying the rotation of the polygon texture counter-clockwise from north. Only has an effect if textureCoordinates is not defined.\n * @property {Property | number} [granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude point.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the polygon is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the polygon.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the polygon is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | boolean} [perPositionHeight=false] A boolean specifying whether or not the height of each position is used.\n * @property {boolean | boolean} [closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @property {boolean | boolean} [closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @property {Property | ArcType} [arcType=ArcType.GEODESIC] The type of line the polygon edges must follow.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the polygon casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this polygon will be displayed.\n * @property {Property | ClassificationType} [classificationType=ClassificationType.BOTH] An enum Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground.\n * @property {ConstantProperty | number} [zIndex=0] A property specifying the zIndex used for ordering ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified.\n * @property {Property | PolygonHierarchy} [textureCoordinates] A Property specifying texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points. Has no effect for ground primitives.\n */\n\n/**\n * Describes a polygon defined by an hierarchy of linear rings which make up the outer shape and any nested holes.\n * The polygon conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n *\n * @alias PolygonGraphics\n * @constructor\n *\n * @param {PolygonGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n */\nfunction PolygonGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._hierarchy = undefined;\n  this._hierarchySubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._perPositionHeight = undefined;\n  this._perPositionHeightSubscription = undefined;\n  this._closeTop = undefined;\n  this._closeTopSubscription = undefined;\n  this._closeBottom = undefined;\n  this._closeBottomSubscription = undefined;\n  this._arcType = undefined;\n  this._arcTypeSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n  this._textureCoordinates = undefined;\n  this._textureCoordinatesSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PolygonGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolygonGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link PolygonHierarchy}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  hierarchy: createPropertyDescriptor(\n    \"hierarchy\",\n    undefined,\n    createPolygonHierarchyProperty,\n  ),\n\n  /**\n   * Gets or sets the numeric Property specifying the constant altitude of the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the polygon extrusion.\n   * If {@link PolygonGraphics#perPositionHeight} is false, the volume starts at {@link PolygonGraphics#height} and ends at this altitude.\n   * If {@link PolygonGraphics#perPositionHeight} is true, the volume starts at the height of each {@link PolygonGraphics#hierarchy} position and ends at this altitude.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the polygon texture counter-clockwise from north. Only has an effect if textureCoordinates is not defined.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the polygon is filled with the provided material.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the polygon is outlined.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the boolean specifying whether or not the the height of each position is used.\n   * If true, the shape will have non-uniform altitude defined by the height of each {@link PolygonGraphics#hierarchy} position.\n   * If false, the shape will have a constant altitude as specified by {@link PolygonGraphics#height}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  perPositionHeight: createPropertyDescriptor(\"perPositionHeight\"),\n\n  /**\n   * Gets or sets a boolean specifying whether or not the top of an extruded polygon is included.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  closeTop: createPropertyDescriptor(\"closeTop\"),\n\n  /**\n   * Gets or sets a boolean specifying whether or not the bottom of an extruded polygon is included.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  closeBottom: createPropertyDescriptor(\"closeBottom\"),\n\n  /**\n   * Gets or sets the {@link ArcType} Property specifying the type of lines the polygon edges use.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default ArcType.GEODESIC\n   */\n  arcType: createPropertyDescriptor(\"arcType\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the polygon\n   * casts or receives shadows from light sources.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this polygon will be displayed.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\",\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Prperty specifying the ordering of ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified.\n   * @memberof PolygonGraphics.prototype\n   * @type {ConstantProperty|undefined}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n\n  /**\n   *  A Property specifying texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points. Has no effect for ground primitives.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  textureCoordinates: createPropertyDescriptor(\"textureCoordinates\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PolygonGraphics} [result] The object onto which to store the result.\n * @returns {PolygonGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPolygonGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolygonGraphics(this);\n  }\n  result.show = this.show;\n  result.hierarchy = this.hierarchy;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.perPositionHeight = this.perPositionHeight;\n  result.closeTop = this.closeTop;\n  result.closeBottom = this.closeBottom;\n  result.arcType = this.arcType;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  result.textureCoordinates = this.textureCoordinates;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolygonGraphics} source The object to be merged into this object.\n */\nPolygonGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.hierarchy = defaultValue(this.hierarchy, source.hierarchy);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference,\n  );\n  this.extrudedHeight = defaultValue(\n    this.extrudedHeight,\n    source.extrudedHeight,\n  );\n  this.extrudedHeightReference = defaultValue(\n    this.extrudedHeightReference,\n    source.extrudedHeightReference,\n  );\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.perPositionHeight = defaultValue(\n    this.perPositionHeight,\n    source.perPositionHeight,\n  );\n  this.closeTop = defaultValue(this.closeTop, source.closeTop);\n  this.closeBottom = defaultValue(this.closeBottom, source.closeBottom);\n  this.arcType = defaultValue(this.arcType, source.arcType);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition,\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType,\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n  this.textureCoordinates = defaultValue(\n    this.textureCoordinates,\n    source.textureCoordinates,\n  );\n};\nexport default PolygonGraphics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}