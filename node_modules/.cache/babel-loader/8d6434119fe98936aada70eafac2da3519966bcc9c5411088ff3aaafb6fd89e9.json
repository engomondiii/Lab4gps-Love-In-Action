{"ast":null,"code":"import Check from \"../../Core/Check.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport Matrix4 from \"../../Core/Matrix4.js\";\nimport ModelArticulationStage from \"./ModelArticulationStage.js\";\n\n/**\n * An in-memory representation of an articulation that affects nodes in the\n * {@link ModelSceneGraph}. This is defined in a model by the\n * <code>AGI_articulations</code> extension.\n *\n * @param {object} options An object containing the following options:\n * @param {ModelComponents.Articulation} options.articulation The articulation components from the 3D model.\n * @param {ModelSceneGraph} options.sceneGraph The scene graph this articulation belongs to.\n *\n * @alias ModelArticulation\n * @constructor\n *\n * @private\n */\nfunction ModelArticulation(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const articulation = options.articulation;\n  const sceneGraph = options.sceneGraph;\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.articulation\", articulation);\n  Check.typeOf.object(\"options.sceneGraph\", sceneGraph);\n  //>>includeEnd('debug');\n\n  this._articulation = articulation;\n  this._sceneGraph = sceneGraph;\n  this._name = articulation.name;\n  this._runtimeStages = [];\n  this._runtimeStagesByName = {};\n\n  // Will be populated as the runtime nodes are created\n  this._runtimeNodes = [];\n\n  // Set to true so that the first call to\n  // ModelSceneGraph.applyArticulations will work.\n  this._dirty = true;\n  initialize(this);\n}\nObject.defineProperties(ModelArticulation.prototype, {\n  /**\n   * The internal articulation that this runtime articulation represents.\n   *\n   * @memberof ModelArticulation.prototype\n   * @type {ModelComponents.Articulation}\n   * @readonly\n   *\n   * @private\n   */\n  articulation: {\n    get: function () {\n      return this._articulation;\n    }\n  },\n  /**\n   * The scene graph that this articulation belongs to.\n   *\n   * @memberof ModelArticulation.prototype\n   * @type {ModelSceneGraph}\n   * @readonly\n   *\n   * @private\n   */\n  sceneGraph: {\n    get: function () {\n      return this._sceneGraph;\n    }\n  },\n  /**\n   * The name of this articulation.\n   *\n   * @memberof ModelArticulation.prototype\n   * @type {string}\n   * @readonly\n   *\n   * @private\n   */\n  name: {\n    get: function () {\n      return this._name;\n    }\n  },\n  /**\n   * The runtime stages that belong to this articulation.\n   *\n   * @memberof ModelArticulation.prototype\n   * @type {ModelArticulationStage[]}\n   * @readonly\n   *\n   * @private\n   */\n  runtimeStages: {\n    get: function () {\n      return this._runtimeStages;\n    }\n  },\n  /**\n   * The runtime nodes that are affected by this articulation.\n   *\n   * @memberof ModelArticulation.prototype\n   * @type {ModelRuntimeNode[]}\n   * @readonly\n   *\n   * @private\n   */\n  runtimeNodes: {\n    get: function () {\n      return this._runtimeNodes;\n    }\n  }\n});\nfunction initialize(runtimeArticulation) {\n  const articulation = runtimeArticulation.articulation;\n  const stages = articulation.stages;\n  const length = stages.length;\n  const runtimeStages = runtimeArticulation._runtimeStages;\n  const runtimeStagesByName = runtimeArticulation._runtimeStagesByName;\n  for (let i = 0; i < length; i++) {\n    const stage = stages[i];\n    const runtimeStage = new ModelArticulationStage({\n      stage: stage,\n      runtimeArticulation: runtimeArticulation\n    });\n\n    // Store the stages in an array to preserve the order in which\n    // they appeared in the 3D model.\n    runtimeStages.push(runtimeStage);\n\n    // Store the stages in a dictionary for retrieval by name.\n    const stageName = stage.name;\n    runtimeStagesByName[stageName] = runtimeStage;\n  }\n}\n\n/**\n * Sets the current value of an articulation stage.\n *\n * @param {string} stageName The name of the articulation stage.\n * @param {number} value The numeric value of this stage of the articulation.\n *\n * @private\n */\nModelArticulation.prototype.setArticulationStage = function (stageName, value) {\n  const stage = this._runtimeStagesByName[stageName];\n  if (defined(stage)) {\n    stage.currentValue = value;\n  }\n};\nconst scratchArticulationMatrix = new Matrix4();\nconst scratchNodeMatrix = new Matrix4();\n\n/**\n * Applies the chain of articulation stages to the transform of each node that\n * participates in the articulation. This only recomputes the node transforms\n * if any stage in the articulation has been modified.\n * <p>\n * Note that this will overwrite any existing transformations on participating\n * nodes.\n * </p>\n *\n * @private\n */\nModelArticulation.prototype.apply = function () {\n  if (!this._dirty) {\n    return;\n  }\n  this._dirty = false;\n  let articulationMatrix = Matrix4.clone(Matrix4.IDENTITY, scratchArticulationMatrix);\n  let i;\n  const stages = this._runtimeStages;\n  const stagesLength = stages.length;\n\n  // Compute the result of the articulation stages...\n  for (i = 0; i < stagesLength; i++) {\n    const stage = stages[i];\n    articulationMatrix = stage.applyStageToMatrix(articulationMatrix);\n  }\n\n  // ...then apply it to the transforms of the affected nodes.\n  const nodes = this._runtimeNodes;\n  const nodesLength = nodes.length;\n  for (i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    const transform = Matrix4.multiplyTransformation(node.originalTransform, articulationMatrix, scratchNodeMatrix);\n    node.transform = transform;\n  }\n};\nexport default ModelArticulation;","map":{"version":3,"names":["Check","defaultValue","defined","Matrix4","ModelArticulationStage","ModelArticulation","options","EMPTY_OBJECT","articulation","sceneGraph","typeOf","object","_articulation","_sceneGraph","_name","name","_runtimeStages","_runtimeStagesByName","_runtimeNodes","_dirty","initialize","Object","defineProperties","prototype","get","runtimeStages","runtimeNodes","runtimeArticulation","stages","length","runtimeStagesByName","i","stage","runtimeStage","push","stageName","setArticulationStage","value","currentValue","scratchArticulationMatrix","scratchNodeMatrix","apply","articulationMatrix","clone","IDENTITY","stagesLength","applyStageToMatrix","nodes","nodesLength","node","transform","multiplyTransformation","originalTransform"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/ModelArticulation.js"],"sourcesContent":["import Check from \"../../Core/Check.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport Matrix4 from \"../../Core/Matrix4.js\";\nimport ModelArticulationStage from \"./ModelArticulationStage.js\";\n\n/**\n * An in-memory representation of an articulation that affects nodes in the\n * {@link ModelSceneGraph}. This is defined in a model by the\n * <code>AGI_articulations</code> extension.\n *\n * @param {object} options An object containing the following options:\n * @param {ModelComponents.Articulation} options.articulation The articulation components from the 3D model.\n * @param {ModelSceneGraph} options.sceneGraph The scene graph this articulation belongs to.\n *\n * @alias ModelArticulation\n * @constructor\n *\n * @private\n */\nfunction ModelArticulation(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const articulation = options.articulation;\n  const sceneGraph = options.sceneGraph;\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.articulation\", articulation);\n  Check.typeOf.object(\"options.sceneGraph\", sceneGraph);\n  //>>includeEnd('debug');\n\n  this._articulation = articulation;\n  this._sceneGraph = sceneGraph;\n\n  this._name = articulation.name;\n  this._runtimeStages = [];\n  this._runtimeStagesByName = {};\n\n  // Will be populated as the runtime nodes are created\n  this._runtimeNodes = [];\n\n  // Set to true so that the first call to\n  // ModelSceneGraph.applyArticulations will work.\n  this._dirty = true;\n\n  initialize(this);\n}\n\nObject.defineProperties(ModelArticulation.prototype, {\n  /**\n   * The internal articulation that this runtime articulation represents.\n   *\n   * @memberof ModelArticulation.prototype\n   * @type {ModelComponents.Articulation}\n   * @readonly\n   *\n   * @private\n   */\n  articulation: {\n    get: function () {\n      return this._articulation;\n    },\n  },\n\n  /**\n   * The scene graph that this articulation belongs to.\n   *\n   * @memberof ModelArticulation.prototype\n   * @type {ModelSceneGraph}\n   * @readonly\n   *\n   * @private\n   */\n  sceneGraph: {\n    get: function () {\n      return this._sceneGraph;\n    },\n  },\n\n  /**\n   * The name of this articulation.\n   *\n   * @memberof ModelArticulation.prototype\n   * @type {string}\n   * @readonly\n   *\n   * @private\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * The runtime stages that belong to this articulation.\n   *\n   * @memberof ModelArticulation.prototype\n   * @type {ModelArticulationStage[]}\n   * @readonly\n   *\n   * @private\n   */\n  runtimeStages: {\n    get: function () {\n      return this._runtimeStages;\n    },\n  },\n\n  /**\n   * The runtime nodes that are affected by this articulation.\n   *\n   * @memberof ModelArticulation.prototype\n   * @type {ModelRuntimeNode[]}\n   * @readonly\n   *\n   * @private\n   */\n  runtimeNodes: {\n    get: function () {\n      return this._runtimeNodes;\n    },\n  },\n});\n\nfunction initialize(runtimeArticulation) {\n  const articulation = runtimeArticulation.articulation;\n\n  const stages = articulation.stages;\n  const length = stages.length;\n\n  const runtimeStages = runtimeArticulation._runtimeStages;\n  const runtimeStagesByName = runtimeArticulation._runtimeStagesByName;\n  for (let i = 0; i < length; i++) {\n    const stage = stages[i];\n    const runtimeStage = new ModelArticulationStage({\n      stage: stage,\n      runtimeArticulation: runtimeArticulation,\n    });\n\n    // Store the stages in an array to preserve the order in which\n    // they appeared in the 3D model.\n    runtimeStages.push(runtimeStage);\n\n    // Store the stages in a dictionary for retrieval by name.\n    const stageName = stage.name;\n    runtimeStagesByName[stageName] = runtimeStage;\n  }\n}\n\n/**\n * Sets the current value of an articulation stage.\n *\n * @param {string} stageName The name of the articulation stage.\n * @param {number} value The numeric value of this stage of the articulation.\n *\n * @private\n */\nModelArticulation.prototype.setArticulationStage = function (stageName, value) {\n  const stage = this._runtimeStagesByName[stageName];\n  if (defined(stage)) {\n    stage.currentValue = value;\n  }\n};\n\nconst scratchArticulationMatrix = new Matrix4();\nconst scratchNodeMatrix = new Matrix4();\n\n/**\n * Applies the chain of articulation stages to the transform of each node that\n * participates in the articulation. This only recomputes the node transforms\n * if any stage in the articulation has been modified.\n * <p>\n * Note that this will overwrite any existing transformations on participating\n * nodes.\n * </p>\n *\n * @private\n */\nModelArticulation.prototype.apply = function () {\n  if (!this._dirty) {\n    return;\n  }\n  this._dirty = false;\n\n  let articulationMatrix = Matrix4.clone(\n    Matrix4.IDENTITY,\n    scratchArticulationMatrix,\n  );\n\n  let i;\n  const stages = this._runtimeStages;\n  const stagesLength = stages.length;\n\n  // Compute the result of the articulation stages...\n  for (i = 0; i < stagesLength; i++) {\n    const stage = stages[i];\n    articulationMatrix = stage.applyStageToMatrix(articulationMatrix);\n  }\n\n  // ...then apply it to the transforms of the affected nodes.\n  const nodes = this._runtimeNodes;\n  const nodesLength = nodes.length;\n  for (i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    const transform = Matrix4.multiplyTransformation(\n      node.originalTransform,\n      articulationMatrix,\n      scratchNodeMatrix,\n    );\n    node.transform = transform;\n  }\n};\n\nexport default ModelArticulation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}