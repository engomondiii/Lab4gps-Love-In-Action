{"ast":null,"code":"import formatError from \"../Core/formatError.js\";\n\n/**\n * Creates an adapter function to allow a calculation function to operate as a Web Worker,\n * paired with TaskProcessor, to receive tasks and return results.\n *\n * @function createTaskProcessorWorker\n *\n * @param {createTaskProcessorWorker.WorkerFunction} workerFunction The calculation function,\n *        which takes parameters and returns a result.\n * @returns {createTaskProcessorWorker.TaskProcessorWorkerFunction} A function that adapts the\n *          calculation function to work as a Web Worker onmessage listener with TaskProcessor.\n *\n *\n * @example\n * function doCalculation(parameters, transferableObjects) {\n *   // calculate some result using the inputs in parameters\n *   return result;\n * }\n *\n * return Cesium.createTaskProcessorWorker(doCalculation);\n * // the resulting function is compatible with TaskProcessor\n *\n * @see TaskProcessor\n * @see {@link http://www.w3.org/TR/workers/|Web Workers}\n * @see {@link http://www.w3.org/TR/html5/common-dom-interfaces.html#transferable-objects|Transferable objects}\n */\nfunction createTaskProcessorWorker(workerFunction) {\n  async function onMessageHandler({\n    data\n  }) {\n    const transferableObjects = [];\n    const responseMessage = {\n      id: data.id,\n      result: undefined,\n      error: undefined\n    };\n    self.CESIUM_BASE_URL = data.baseUrl;\n    try {\n      const result = await workerFunction(data.parameters, transferableObjects);\n      responseMessage.result = result;\n    } catch (error) {\n      if (error instanceof Error) {\n        responseMessage.error = {\n          name: error.name,\n          message: error.message,\n          stack: error.stack\n        };\n      } else {\n        responseMessage.error = error;\n      }\n    }\n    if (!data.canTransferArrayBuffer) {\n      transferableObjects.length = 0;\n    }\n    try {\n      postMessage(responseMessage, transferableObjects);\n    } catch (error) {\n      // something went wrong trying to post the message, post a simpler\n      // error that we can be sure will be cloneable\n      responseMessage.result = undefined;\n      responseMessage.error = `postMessage failed with error: ${formatError(error)}\\n  with responseMessage: ${JSON.stringify(responseMessage)}`;\n      postMessage(responseMessage);\n    }\n  }\n  function onMessageErrorHandler(event) {\n    postMessage({\n      id: event.data?.id,\n      error: `postMessage failed with error: ${JSON.stringify(event)}`\n    });\n  }\n  self.onmessage = onMessageHandler;\n  self.onmessageerror = onMessageErrorHandler;\n  return self;\n}\n\n/**\n * A function that performs a calculation in a Web Worker.\n * @callback createTaskProcessorWorker.WorkerFunction\n *\n * @param {object} parameters Parameters to the calculation.\n * @param {Array} transferableObjects An array that should be filled with references to objects inside\n *        the result that should be transferred back to the main document instead of copied.\n * @returns {object} The result of the calculation.\n *\n * @example\n * function calculate(parameters, transferableObjects) {\n *   // perform whatever calculation is necessary.\n *   const typedArray = new Float32Array(0);\n *\n *   // typed arrays are transferable\n *   transferableObjects.push(typedArray)\n *\n *   return {\n *      typedArray : typedArray\n *   };\n * }\n */\n\n/**\n * A Web Worker message event handler function that handles the interaction with TaskProcessor,\n * specifically, task ID management and posting a response message containing the result.\n * @callback createTaskProcessorWorker.TaskProcessorWorkerFunction\n *\n * @param {object} event The onmessage event object.\n */\nexport default createTaskProcessorWorker;","map":{"version":3,"names":["formatError","createTaskProcessorWorker","workerFunction","onMessageHandler","data","transferableObjects","responseMessage","id","result","undefined","error","self","CESIUM_BASE_URL","baseUrl","parameters","Error","name","message","stack","canTransferArrayBuffer","length","postMessage","JSON","stringify","onMessageErrorHandler","event","onmessage","onmessageerror"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Workers/createTaskProcessorWorker.js"],"sourcesContent":["import formatError from \"../Core/formatError.js\";\n\n/**\n * Creates an adapter function to allow a calculation function to operate as a Web Worker,\n * paired with TaskProcessor, to receive tasks and return results.\n *\n * @function createTaskProcessorWorker\n *\n * @param {createTaskProcessorWorker.WorkerFunction} workerFunction The calculation function,\n *        which takes parameters and returns a result.\n * @returns {createTaskProcessorWorker.TaskProcessorWorkerFunction} A function that adapts the\n *          calculation function to work as a Web Worker onmessage listener with TaskProcessor.\n *\n *\n * @example\n * function doCalculation(parameters, transferableObjects) {\n *   // calculate some result using the inputs in parameters\n *   return result;\n * }\n *\n * return Cesium.createTaskProcessorWorker(doCalculation);\n * // the resulting function is compatible with TaskProcessor\n *\n * @see TaskProcessor\n * @see {@link http://www.w3.org/TR/workers/|Web Workers}\n * @see {@link http://www.w3.org/TR/html5/common-dom-interfaces.html#transferable-objects|Transferable objects}\n */\nfunction createTaskProcessorWorker(workerFunction) {\n  async function onMessageHandler({ data }) {\n    const transferableObjects = [];\n    const responseMessage = {\n      id: data.id,\n      result: undefined,\n      error: undefined,\n    };\n\n    self.CESIUM_BASE_URL = data.baseUrl;\n\n    try {\n      const result = await workerFunction(data.parameters, transferableObjects);\n      responseMessage.result = result;\n    } catch (error) {\n      if (error instanceof Error) {\n        responseMessage.error = {\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n        };\n      } else {\n        responseMessage.error = error;\n      }\n    }\n\n    if (!data.canTransferArrayBuffer) {\n      transferableObjects.length = 0;\n    }\n\n    try {\n      postMessage(responseMessage, transferableObjects);\n    } catch (error) {\n      // something went wrong trying to post the message, post a simpler\n      // error that we can be sure will be cloneable\n      responseMessage.result = undefined;\n      responseMessage.error = `postMessage failed with error: ${formatError(\n        error,\n      )}\\n  with responseMessage: ${JSON.stringify(responseMessage)}`;\n      postMessage(responseMessage);\n    }\n  }\n\n  function onMessageErrorHandler(event) {\n    postMessage({\n      id: event.data?.id,\n      error: `postMessage failed with error: ${JSON.stringify(event)}`,\n    });\n  }\n\n  self.onmessage = onMessageHandler;\n  self.onmessageerror = onMessageErrorHandler;\n  return self;\n}\n\n/**\n * A function that performs a calculation in a Web Worker.\n * @callback createTaskProcessorWorker.WorkerFunction\n *\n * @param {object} parameters Parameters to the calculation.\n * @param {Array} transferableObjects An array that should be filled with references to objects inside\n *        the result that should be transferred back to the main document instead of copied.\n * @returns {object} The result of the calculation.\n *\n * @example\n * function calculate(parameters, transferableObjects) {\n *   // perform whatever calculation is necessary.\n *   const typedArray = new Float32Array(0);\n *\n *   // typed arrays are transferable\n *   transferableObjects.push(typedArray)\n *\n *   return {\n *      typedArray : typedArray\n *   };\n * }\n */\n\n/**\n * A Web Worker message event handler function that handles the interaction with TaskProcessor,\n * specifically, task ID management and posting a response message containing the result.\n * @callback createTaskProcessorWorker.TaskProcessorWorkerFunction\n *\n * @param {object} event The onmessage event object.\n */\nexport default createTaskProcessorWorker;\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,wBAAwB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,yBAAyBA,CAACC,cAAc,EAAE;EACjD,eAAeC,gBAAgBA,CAAC;IAAEC;EAAK,CAAC,EAAE;IACxC,MAAMC,mBAAmB,GAAG,EAAE;IAC9B,MAAMC,eAAe,GAAG;MACtBC,EAAE,EAAEH,IAAI,CAACG,EAAE;MACXC,MAAM,EAAEC,SAAS;MACjBC,KAAK,EAAED;IACT,CAAC;IAEDE,IAAI,CAACC,eAAe,GAAGR,IAAI,CAACS,OAAO;IAEnC,IAAI;MACF,MAAML,MAAM,GAAG,MAAMN,cAAc,CAACE,IAAI,CAACU,UAAU,EAAET,mBAAmB,CAAC;MACzEC,eAAe,CAACE,MAAM,GAAGA,MAAM;IACjC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAIA,KAAK,YAAYK,KAAK,EAAE;QAC1BT,eAAe,CAACI,KAAK,GAAG;UACtBM,IAAI,EAAEN,KAAK,CAACM,IAAI;UAChBC,OAAO,EAAEP,KAAK,CAACO,OAAO;UACtBC,KAAK,EAAER,KAAK,CAACQ;QACf,CAAC;MACH,CAAC,MAAM;QACLZ,eAAe,CAACI,KAAK,GAAGA,KAAK;MAC/B;IACF;IAEA,IAAI,CAACN,IAAI,CAACe,sBAAsB,EAAE;MAChCd,mBAAmB,CAACe,MAAM,GAAG,CAAC;IAChC;IAEA,IAAI;MACFC,WAAW,CAACf,eAAe,EAAED,mBAAmB,CAAC;IACnD,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd;MACA;MACAJ,eAAe,CAACE,MAAM,GAAGC,SAAS;MAClCH,eAAe,CAACI,KAAK,GAAG,kCAAkCV,WAAW,CACnEU,KACF,CAAC,6BAA6BY,IAAI,CAACC,SAAS,CAACjB,eAAe,CAAC,EAAE;MAC/De,WAAW,CAACf,eAAe,CAAC;IAC9B;EACF;EAEA,SAASkB,qBAAqBA,CAACC,KAAK,EAAE;IACpCJ,WAAW,CAAC;MACVd,EAAE,EAAEkB,KAAK,CAACrB,IAAI,EAAEG,EAAE;MAClBG,KAAK,EAAE,kCAAkCY,IAAI,CAACC,SAAS,CAACE,KAAK,CAAC;IAChE,CAAC,CAAC;EACJ;EAEAd,IAAI,CAACe,SAAS,GAAGvB,gBAAgB;EACjCQ,IAAI,CAACgB,cAAc,GAAGH,qBAAqB;EAC3C,OAAOb,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeV,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}