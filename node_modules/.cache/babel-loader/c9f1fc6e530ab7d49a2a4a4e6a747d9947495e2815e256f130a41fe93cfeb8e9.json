{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport ResourceLoader from \"./ResourceLoader.js\";\nimport ResourceLoaderState from \"./ResourceLoaderState.js\";\n\n/**\n * Loads an embedded or external buffer.\n * <p>\n * Implements the {@link ResourceLoader} interface.\n * </p>\n *\n * @alias BufferLoader\n * @constructor\n * @augments ResourceLoader\n *\n * @param {object} options Object with the following properties:\n * @param {Uint8Array} [options.typedArray] The typed array containing the embedded buffer contents. Mutually exclusive with options.resource.\n * @param {Resource} [options.resource] The {@link Resource} pointing to the external buffer. Mutually exclusive with options.typedArray.\n * @param {string} [options.cacheKey] The cache key of the resource.\n *\n * @exception {DeveloperError} One of options.typedArray and options.resource must be defined.\n *\n * @private\n */\nfunction BufferLoader(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const typedArray = options.typedArray;\n  const resource = options.resource;\n  const cacheKey = options.cacheKey;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(typedArray) === defined(resource)) {\n    throw new DeveloperError(\"One of options.typedArray and options.resource must be defined.\");\n  }\n  //>>includeEnd('debug');\n\n  this._typedArray = typedArray;\n  this._resource = resource;\n  this._cacheKey = cacheKey;\n  this._state = ResourceLoaderState.UNLOADED;\n  this._promise = undefined;\n}\nif (defined(Object.create)) {\n  BufferLoader.prototype = Object.create(ResourceLoader.prototype);\n  BufferLoader.prototype.constructor = BufferLoader;\n}\nObject.defineProperties(BufferLoader.prototype, {\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof BufferLoader.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    }\n  },\n  /**\n   * The typed array containing the embedded buffer contents.\n   *\n   * @memberof BufferLoader.prototype\n   *\n   * @type {Uint8Array}\n   * @readonly\n   * @private\n   */\n  typedArray: {\n    get: function () {\n      return this._typedArray;\n    }\n  }\n});\n\n/**\n * Loads the resource.\n * @returns {Promise<BufferLoader>} A promise which resolves to the loader when the resource loading is completed.\n * @private\n */\nBufferLoader.prototype.load = async function () {\n  if (defined(this._promise)) {\n    return this._promise;\n  }\n  if (defined(this._typedArray)) {\n    this._promise = Promise.resolve(this);\n    return this._promise;\n  }\n  this._promise = loadExternalBuffer(this);\n  return this._promise;\n};\nasync function loadExternalBuffer(bufferLoader) {\n  const resource = bufferLoader._resource;\n  bufferLoader._state = ResourceLoaderState.LOADING;\n  try {\n    const arrayBuffer = await BufferLoader._fetchArrayBuffer(resource);\n    if (bufferLoader.isDestroyed()) {\n      return;\n    }\n    bufferLoader._typedArray = new Uint8Array(arrayBuffer);\n    bufferLoader._state = ResourceLoaderState.READY;\n    return bufferLoader;\n  } catch (error) {\n    if (bufferLoader.isDestroyed()) {\n      return;\n    }\n    bufferLoader._state = ResourceLoaderState.FAILED;\n    const errorMessage = `Failed to load external buffer: ${resource.url}`;\n    throw bufferLoader.getError(errorMessage, error);\n  }\n}\n\n/**\n * Exposed for testing\n * @private\n */\nBufferLoader._fetchArrayBuffer = function (resource) {\n  return resource.fetchArrayBuffer();\n};\n\n/**\n * Unloads the resource.\n * @private\n */\nBufferLoader.prototype.unload = function () {\n  this._typedArray = undefined;\n};\nexport default BufferLoader;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","ResourceLoader","ResourceLoaderState","BufferLoader","options","EMPTY_OBJECT","typedArray","resource","cacheKey","_typedArray","_resource","_cacheKey","_state","UNLOADED","_promise","undefined","Object","create","prototype","constructor","defineProperties","get","load","Promise","resolve","loadExternalBuffer","bufferLoader","LOADING","arrayBuffer","_fetchArrayBuffer","isDestroyed","Uint8Array","READY","error","FAILED","errorMessage","url","getError","fetchArrayBuffer","unload"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/BufferLoader.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport ResourceLoader from \"./ResourceLoader.js\";\nimport ResourceLoaderState from \"./ResourceLoaderState.js\";\n\n/**\n * Loads an embedded or external buffer.\n * <p>\n * Implements the {@link ResourceLoader} interface.\n * </p>\n *\n * @alias BufferLoader\n * @constructor\n * @augments ResourceLoader\n *\n * @param {object} options Object with the following properties:\n * @param {Uint8Array} [options.typedArray] The typed array containing the embedded buffer contents. Mutually exclusive with options.resource.\n * @param {Resource} [options.resource] The {@link Resource} pointing to the external buffer. Mutually exclusive with options.typedArray.\n * @param {string} [options.cacheKey] The cache key of the resource.\n *\n * @exception {DeveloperError} One of options.typedArray and options.resource must be defined.\n *\n * @private\n */\nfunction BufferLoader(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const typedArray = options.typedArray;\n  const resource = options.resource;\n  const cacheKey = options.cacheKey;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(typedArray) === defined(resource)) {\n    throw new DeveloperError(\n      \"One of options.typedArray and options.resource must be defined.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._typedArray = typedArray;\n  this._resource = resource;\n  this._cacheKey = cacheKey;\n  this._state = ResourceLoaderState.UNLOADED;\n  this._promise = undefined;\n}\n\nif (defined(Object.create)) {\n  BufferLoader.prototype = Object.create(ResourceLoader.prototype);\n  BufferLoader.prototype.constructor = BufferLoader;\n}\n\nObject.defineProperties(BufferLoader.prototype, {\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof BufferLoader.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    },\n  },\n  /**\n   * The typed array containing the embedded buffer contents.\n   *\n   * @memberof BufferLoader.prototype\n   *\n   * @type {Uint8Array}\n   * @readonly\n   * @private\n   */\n  typedArray: {\n    get: function () {\n      return this._typedArray;\n    },\n  },\n});\n\n/**\n * Loads the resource.\n * @returns {Promise<BufferLoader>} A promise which resolves to the loader when the resource loading is completed.\n * @private\n */\nBufferLoader.prototype.load = async function () {\n  if (defined(this._promise)) {\n    return this._promise;\n  }\n\n  if (defined(this._typedArray)) {\n    this._promise = Promise.resolve(this);\n    return this._promise;\n  }\n\n  this._promise = loadExternalBuffer(this);\n  return this._promise;\n};\n\nasync function loadExternalBuffer(bufferLoader) {\n  const resource = bufferLoader._resource;\n  bufferLoader._state = ResourceLoaderState.LOADING;\n  try {\n    const arrayBuffer = await BufferLoader._fetchArrayBuffer(resource);\n    if (bufferLoader.isDestroyed()) {\n      return;\n    }\n\n    bufferLoader._typedArray = new Uint8Array(arrayBuffer);\n    bufferLoader._state = ResourceLoaderState.READY;\n    return bufferLoader;\n  } catch (error) {\n    if (bufferLoader.isDestroyed()) {\n      return;\n    }\n\n    bufferLoader._state = ResourceLoaderState.FAILED;\n    const errorMessage = `Failed to load external buffer: ${resource.url}`;\n    throw bufferLoader.getError(errorMessage, error);\n  }\n}\n\n/**\n * Exposed for testing\n * @private\n */\nBufferLoader._fetchArrayBuffer = function (resource) {\n  return resource.fetchArrayBuffer();\n};\n\n/**\n * Unloads the resource.\n * @private\n */\nBufferLoader.prototype.unload = function () {\n  this._typedArray = undefined;\n};\n\nexport default BufferLoader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}