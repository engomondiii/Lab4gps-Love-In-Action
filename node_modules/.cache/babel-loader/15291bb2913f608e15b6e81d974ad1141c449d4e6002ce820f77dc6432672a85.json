{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {object} BillboardGraphics.ConstructorOptions\n *\n * Initialization options for the BillboardGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the billboard.\n * @property {Property | string | HTMLCanvasElement} [image] A Property specifying the Image, URI, or Canvas to use for the billboard.\n * @property {Property | number} [scale=1.0] A numeric Property specifying the scale to apply to the image size.\n * @property {Property | Cartesian2} [pixelOffset=Cartesian2.ZERO] A {@link Cartesian2} Property specifying the pixel offset.\n * @property {Property | Cartesian3} [eyeOffset=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the eye offset.\n * @property {Property | HorizontalOrigin} [horizontalOrigin=HorizontalOrigin.CENTER] A Property specifying the {@link HorizontalOrigin}.\n * @property {Property | VerticalOrigin} [verticalOrigin=VerticalOrigin.CENTER] A Property specifying the {@link VerticalOrigin}.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | Color} [color=Color.WHITE] A Property specifying the tint {@link Color} of the image.\n * @property {Property | number} [rotation=0] A numeric Property specifying the rotation about the alignedAxis.\n * @property {Property | Cartesian3} [alignedAxis=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the unit vector axis of rotation.\n * @property {Property | boolean} [sizeInMeters] A boolean Property specifying whether this billboard's size should be measured in meters.\n * @property {Property | number} [width] A numeric Property specifying the width of the billboard in pixels, overriding the native size.\n * @property {Property | number} [height] A numeric Property specifying the height of the billboard in pixels, overriding the native size.\n * @property {Property | NearFarScalar} [scaleByDistance] A {@link NearFarScalar} Property used to scale the point based on distance from the camera.\n * @property {Property | NearFarScalar} [translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @property {Property | NearFarScalar} [pixelOffsetScaleByDistance] A {@link NearFarScalar} Property used to set pixelOffset based on distance from the camera.\n * @property {Property | BoundingRectangle} [imageSubRegion] A Property specifying a {@link BoundingRectangle} that defines a sub-region of the image to use for the billboard, rather than the entire image, measured in pixels from the bottom-left.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this billboard will be displayed.\n * @property {Property | number} [disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n * @property {Property | SplitDirection} [splitDirection] A Property specifying the {@link SplitDirection} of the billboard.\n */\n\n/**\n * Describes a two dimensional icon located at the position of the containing {@link Entity}.\n * <p>\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n * </p>\n *\n * @alias BillboardGraphics\n * @constructor\n *\n * @param {BillboardGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n */\nfunction BillboardGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._scale = undefined;\n  this._scaleSubscription = undefined;\n  this._pixelOffset = undefined;\n  this._pixelOffsetSubscription = undefined;\n  this._eyeOffset = undefined;\n  this._eyeOffsetSubscription = undefined;\n  this._horizontalOrigin = undefined;\n  this._horizontalOriginSubscription = undefined;\n  this._verticalOrigin = undefined;\n  this._verticalOriginSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._alignedAxis = undefined;\n  this._alignedAxisSubscription = undefined;\n  this._sizeInMeters = undefined;\n  this._sizeInMetersSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._pixelOffsetScaleByDistance = undefined;\n  this._pixelOffsetScaleByDistanceSubscription = undefined;\n  this._imageSubRegion = undefined;\n  this._imageSubRegionSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n  this._splitDirection = undefined;\n  this._splitDirectionSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\nObject.defineProperties(BillboardGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof BillboardGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n  /**\n   * Gets or sets the Property specifying the Image, URI, or Canvas to use for the billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  image: createPropertyDescriptor(\"image\"),\n  /**\n   * Gets or sets the numeric Property specifying the uniform scale to apply to the image.\n   * A scale greater than <code>1.0</code> enlarges the billboard while a scale less than <code>1.0</code> shrinks it.\n   * <p>\n   * <div align='center'>\n   * <img src='Images/Billboard.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>, and <code>2.0</code>.\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  scale: createPropertyDescriptor(\"scale\"),\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the billboard's pixel offset in screen space\n   * from the origin of this billboard.  This is commonly used to align multiple billboards and labels at\n   * the same position, e.g., an image and text.  The screen space origin is the top, left corner of the\n   * canvas; <code>x</code> increases from left to right, and <code>y</code> increases from top to bottom.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src='Images/Billboard.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The billboard's origin is indicated by the yellow point.\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian2.ZERO\n   */\n  pixelOffset: createPropertyDescriptor(\"pixelOffset\"),\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the billboard's offset in eye coordinates.\n   * Eye coordinates is a left-handed coordinate system, where <code>x</code> points towards the viewer's\n   * right, <code>y</code> points up, and <code>z</code> points into the screen.\n   * <p>\n   * An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to\n   * arrange a billboard above its corresponding 3D model.\n   * </p>\n   * Below, the billboard is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code>\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian3.ZERO\n   */\n  eyeOffset: createPropertyDescriptor(\"eyeOffset\"),\n  /**\n   * Gets or sets the Property specifying the {@link HorizontalOrigin}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default HorizontalOrigin.CENTER\n   */\n  horizontalOrigin: createPropertyDescriptor(\"horizontalOrigin\"),\n  /**\n   * Gets or sets the Property specifying the {@link VerticalOrigin}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default VerticalOrigin.CENTER\n   */\n  verticalOrigin: createPropertyDescriptor(\"verticalOrigin\"),\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n  /**\n   * Gets or sets the Property specifying the {@link Color} that is multiplied with the <code>image</code>.\n   * This has two common use cases.  First, the same white texture may be used by many different billboards,\n   * each with a different color, to create colored billboards. Second, the color's alpha component can be\n   * used to make the billboard translucent as shown below. An alpha of <code>0.0</code> makes the billboard\n   * transparent, and <code>1.0</code> makes the billboard opaque.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setColor.Alpha255.png' width='250' height='188' /></td>\n   * <td align='center'><code>alpha : 0.5</code><br/><img src='Images/Billboard.setColor.Alpha127.png' width='250' height='188' /></td>\n   * </tr></table>\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n  /**\n   * Gets or sets the numeric Property specifying the rotation of the image\n   * counter clockwise from the <code>alignedAxis</code>.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the unit vector axis of rotation\n   * in the fixed frame. When set to Cartesian3.ZERO the rotation is from the top of the screen.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian3.ZERO\n   */\n  alignedAxis: createPropertyDescriptor(\"alignedAxis\"),\n  /**\n   * Gets or sets the boolean Property specifying if this billboard's size will be measured in meters.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  sizeInMeters: createPropertyDescriptor(\"sizeInMeters\"),\n  /**\n   * Gets or sets the numeric Property specifying the width of the billboard in pixels.\n   * When undefined, the native width is used.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  width: createPropertyDescriptor(\"width\"),\n  /**\n   * Gets or sets the numeric Property specifying the height of the billboard in pixels.\n   * When undefined, the native height is used.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  height: createPropertyDescriptor(\"height\"),\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the scale of the billboard based on the distance from the camera.\n   * A billboard's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's scale remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the billboard based on the distance from the camera.\n   * A billboard's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's translucency remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the pixel offset of the billboard based on the distance from the camera.\n   * A billboard's pixel offset will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's pixel offset remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  pixelOffsetScaleByDistance: createPropertyDescriptor(\"pixelOffsetScaleByDistance\"),\n  /**\n   * Gets or sets the Property specifying a {@link BoundingRectangle} that defines a\n   * sub-region of the <code>image</code> to use for the billboard, rather than the entire image,\n   * measured in pixels from the bottom-left.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  imageSubRegion: createPropertyDescriptor(\"imageSubRegion\"),\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this billboard will be displayed.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\"),\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\"disableDepthTestDistance\"),\n  /**\n   * Gets or sets the Property specifying the {@link SplitDirection} of this billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default SplitDirection.NONE\n   */\n  splitDirection: createPropertyDescriptor(\"splitDirection\")\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {BillboardGraphics} [result] The object onto which to store the result.\n * @returns {BillboardGraphics} The modified result parameter or a new instance if one was not provided.\n */\nBillboardGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new BillboardGraphics(this);\n  }\n  result.show = this._show;\n  result.image = this._image;\n  result.scale = this._scale;\n  result.pixelOffset = this._pixelOffset;\n  result.eyeOffset = this._eyeOffset;\n  result.horizontalOrigin = this._horizontalOrigin;\n  result.verticalOrigin = this._verticalOrigin;\n  result.heightReference = this._heightReference;\n  result.color = this._color;\n  result.rotation = this._rotation;\n  result.alignedAxis = this._alignedAxis;\n  result.sizeInMeters = this._sizeInMeters;\n  result.width = this._width;\n  result.height = this._height;\n  result.scaleByDistance = this._scaleByDistance;\n  result.translucencyByDistance = this._translucencyByDistance;\n  result.pixelOffsetScaleByDistance = this._pixelOffsetScaleByDistance;\n  result.imageSubRegion = this._imageSubRegion;\n  result.distanceDisplayCondition = this._distanceDisplayCondition;\n  result.disableDepthTestDistance = this._disableDepthTestDistance;\n  result.splitDirection = this._splitDirection;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {BillboardGraphics} source The object to be merged into this object.\n */\nBillboardGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this._show, source.show);\n  this.image = defaultValue(this._image, source.image);\n  this.scale = defaultValue(this._scale, source.scale);\n  this.pixelOffset = defaultValue(this._pixelOffset, source.pixelOffset);\n  this.eyeOffset = defaultValue(this._eyeOffset, source.eyeOffset);\n  this.horizontalOrigin = defaultValue(this._horizontalOrigin, source.horizontalOrigin);\n  this.verticalOrigin = defaultValue(this._verticalOrigin, source.verticalOrigin);\n  this.heightReference = defaultValue(this._heightReference, source.heightReference);\n  this.color = defaultValue(this._color, source.color);\n  this.rotation = defaultValue(this._rotation, source.rotation);\n  this.alignedAxis = defaultValue(this._alignedAxis, source.alignedAxis);\n  this.sizeInMeters = defaultValue(this._sizeInMeters, source.sizeInMeters);\n  this.width = defaultValue(this._width, source.width);\n  this.height = defaultValue(this._height, source.height);\n  this.scaleByDistance = defaultValue(this._scaleByDistance, source.scaleByDistance);\n  this.translucencyByDistance = defaultValue(this._translucencyByDistance, source.translucencyByDistance);\n  this.pixelOffsetScaleByDistance = defaultValue(this._pixelOffsetScaleByDistance, source.pixelOffsetScaleByDistance);\n  this.imageSubRegion = defaultValue(this._imageSubRegion, source.imageSubRegion);\n  this.distanceDisplayCondition = defaultValue(this._distanceDisplayCondition, source.distanceDisplayCondition);\n  this.disableDepthTestDistance = defaultValue(this._disableDepthTestDistance, source.disableDepthTestDistance);\n  this.splitDirection = defaultValue(this.splitDirection, source.splitDirection);\n};\nexport default BillboardGraphics;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","Event","createPropertyDescriptor","BillboardGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_image","_imageSubscription","_scale","_scaleSubscription","_pixelOffset","_pixelOffsetSubscription","_eyeOffset","_eyeOffsetSubscription","_horizontalOrigin","_horizontalOriginSubscription","_verticalOrigin","_verticalOriginSubscription","_heightReference","_heightReferenceSubscription","_color","_colorSubscription","_rotation","_rotationSubscription","_alignedAxis","_alignedAxisSubscription","_sizeInMeters","_sizeInMetersSubscription","_width","_widthSubscription","_height","_heightSubscription","_scaleByDistance","_scaleByDistanceSubscription","_translucencyByDistance","_translucencyByDistanceSubscription","_pixelOffsetScaleByDistance","_pixelOffsetScaleByDistanceSubscription","_imageSubRegion","_imageSubRegionSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_disableDepthTestDistance","_disableDepthTestDistanceSubscription","_splitDirection","_splitDirectionSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","image","scale","pixelOffset","eyeOffset","horizontalOrigin","verticalOrigin","heightReference","color","rotation","alignedAxis","sizeInMeters","width","height","scaleByDistance","translucencyByDistance","pixelOffsetScaleByDistance","imageSubRegion","distanceDisplayCondition","disableDepthTestDistance","splitDirection","clone","result","source"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/BillboardGraphics.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {object} BillboardGraphics.ConstructorOptions\n *\n * Initialization options for the BillboardGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the billboard.\n * @property {Property | string | HTMLCanvasElement} [image] A Property specifying the Image, URI, or Canvas to use for the billboard.\n * @property {Property | number} [scale=1.0] A numeric Property specifying the scale to apply to the image size.\n * @property {Property | Cartesian2} [pixelOffset=Cartesian2.ZERO] A {@link Cartesian2} Property specifying the pixel offset.\n * @property {Property | Cartesian3} [eyeOffset=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the eye offset.\n * @property {Property | HorizontalOrigin} [horizontalOrigin=HorizontalOrigin.CENTER] A Property specifying the {@link HorizontalOrigin}.\n * @property {Property | VerticalOrigin} [verticalOrigin=VerticalOrigin.CENTER] A Property specifying the {@link VerticalOrigin}.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | Color} [color=Color.WHITE] A Property specifying the tint {@link Color} of the image.\n * @property {Property | number} [rotation=0] A numeric Property specifying the rotation about the alignedAxis.\n * @property {Property | Cartesian3} [alignedAxis=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the unit vector axis of rotation.\n * @property {Property | boolean} [sizeInMeters] A boolean Property specifying whether this billboard's size should be measured in meters.\n * @property {Property | number} [width] A numeric Property specifying the width of the billboard in pixels, overriding the native size.\n * @property {Property | number} [height] A numeric Property specifying the height of the billboard in pixels, overriding the native size.\n * @property {Property | NearFarScalar} [scaleByDistance] A {@link NearFarScalar} Property used to scale the point based on distance from the camera.\n * @property {Property | NearFarScalar} [translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @property {Property | NearFarScalar} [pixelOffsetScaleByDistance] A {@link NearFarScalar} Property used to set pixelOffset based on distance from the camera.\n * @property {Property | BoundingRectangle} [imageSubRegion] A Property specifying a {@link BoundingRectangle} that defines a sub-region of the image to use for the billboard, rather than the entire image, measured in pixels from the bottom-left.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this billboard will be displayed.\n * @property {Property | number} [disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n * @property {Property | SplitDirection} [splitDirection] A Property specifying the {@link SplitDirection} of the billboard.\n */\n\n/**\n * Describes a two dimensional icon located at the position of the containing {@link Entity}.\n * <p>\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n * </p>\n *\n * @alias BillboardGraphics\n * @constructor\n *\n * @param {BillboardGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n */\nfunction BillboardGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._scale = undefined;\n  this._scaleSubscription = undefined;\n  this._pixelOffset = undefined;\n  this._pixelOffsetSubscription = undefined;\n  this._eyeOffset = undefined;\n  this._eyeOffsetSubscription = undefined;\n  this._horizontalOrigin = undefined;\n  this._horizontalOriginSubscription = undefined;\n  this._verticalOrigin = undefined;\n  this._verticalOriginSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._alignedAxis = undefined;\n  this._alignedAxisSubscription = undefined;\n  this._sizeInMeters = undefined;\n  this._sizeInMetersSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._pixelOffsetScaleByDistance = undefined;\n  this._pixelOffsetScaleByDistanceSubscription = undefined;\n  this._imageSubRegion = undefined;\n  this._imageSubRegionSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n  this._splitDirection = undefined;\n  this._splitDirectionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(BillboardGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof BillboardGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the Image, URI, or Canvas to use for the billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  image: createPropertyDescriptor(\"image\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the uniform scale to apply to the image.\n   * A scale greater than <code>1.0</code> enlarges the billboard while a scale less than <code>1.0</code> shrinks it.\n   * <p>\n   * <div align='center'>\n   * <img src='Images/Billboard.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>, and <code>2.0</code>.\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  scale: createPropertyDescriptor(\"scale\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the billboard's pixel offset in screen space\n   * from the origin of this billboard.  This is commonly used to align multiple billboards and labels at\n   * the same position, e.g., an image and text.  The screen space origin is the top, left corner of the\n   * canvas; <code>x</code> increases from left to right, and <code>y</code> increases from top to bottom.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src='Images/Billboard.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The billboard's origin is indicated by the yellow point.\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian2.ZERO\n   */\n  pixelOffset: createPropertyDescriptor(\"pixelOffset\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the billboard's offset in eye coordinates.\n   * Eye coordinates is a left-handed coordinate system, where <code>x</code> points towards the viewer's\n   * right, <code>y</code> points up, and <code>z</code> points into the screen.\n   * <p>\n   * An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to\n   * arrange a billboard above its corresponding 3D model.\n   * </p>\n   * Below, the billboard is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code>\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian3.ZERO\n   */\n  eyeOffset: createPropertyDescriptor(\"eyeOffset\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HorizontalOrigin}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default HorizontalOrigin.CENTER\n   */\n  horizontalOrigin: createPropertyDescriptor(\"horizontalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link VerticalOrigin}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default VerticalOrigin.CENTER\n   */\n  verticalOrigin: createPropertyDescriptor(\"verticalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} that is multiplied with the <code>image</code>.\n   * This has two common use cases.  First, the same white texture may be used by many different billboards,\n   * each with a different color, to create colored billboards. Second, the color's alpha component can be\n   * used to make the billboard translucent as shown below. An alpha of <code>0.0</code> makes the billboard\n   * transparent, and <code>1.0</code> makes the billboard opaque.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setColor.Alpha255.png' width='250' height='188' /></td>\n   * <td align='center'><code>alpha : 0.5</code><br/><img src='Images/Billboard.setColor.Alpha127.png' width='250' height='188' /></td>\n   * </tr></table>\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the rotation of the image\n   * counter clockwise from the <code>alignedAxis</code>.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the unit vector axis of rotation\n   * in the fixed frame. When set to Cartesian3.ZERO the rotation is from the top of the screen.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian3.ZERO\n   */\n  alignedAxis: createPropertyDescriptor(\"alignedAxis\"),\n\n  /**\n   * Gets or sets the boolean Property specifying if this billboard's size will be measured in meters.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  sizeInMeters: createPropertyDescriptor(\"sizeInMeters\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the billboard in pixels.\n   * When undefined, the native width is used.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the height of the billboard in pixels.\n   * When undefined, the native height is used.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the scale of the billboard based on the distance from the camera.\n   * A billboard's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's scale remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the billboard based on the distance from the camera.\n   * A billboard's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's translucency remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the pixel offset of the billboard based on the distance from the camera.\n   * A billboard's pixel offset will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's pixel offset remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  pixelOffsetScaleByDistance: createPropertyDescriptor(\n    \"pixelOffsetScaleByDistance\",\n  ),\n\n  /**\n   * Gets or sets the Property specifying a {@link BoundingRectangle} that defines a\n   * sub-region of the <code>image</code> to use for the billboard, rather than the entire image,\n   * measured in pixels from the bottom-left.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  imageSubRegion: createPropertyDescriptor(\"imageSubRegion\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this billboard will be displayed.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\",\n  ),\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\n    \"disableDepthTestDistance\",\n  ),\n\n  /**\n   * Gets or sets the Property specifying the {@link SplitDirection} of this billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default SplitDirection.NONE\n   */\n  splitDirection: createPropertyDescriptor(\"splitDirection\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {BillboardGraphics} [result] The object onto which to store the result.\n * @returns {BillboardGraphics} The modified result parameter or a new instance if one was not provided.\n */\nBillboardGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new BillboardGraphics(this);\n  }\n  result.show = this._show;\n  result.image = this._image;\n  result.scale = this._scale;\n  result.pixelOffset = this._pixelOffset;\n  result.eyeOffset = this._eyeOffset;\n  result.horizontalOrigin = this._horizontalOrigin;\n  result.verticalOrigin = this._verticalOrigin;\n  result.heightReference = this._heightReference;\n  result.color = this._color;\n  result.rotation = this._rotation;\n  result.alignedAxis = this._alignedAxis;\n  result.sizeInMeters = this._sizeInMeters;\n  result.width = this._width;\n  result.height = this._height;\n  result.scaleByDistance = this._scaleByDistance;\n  result.translucencyByDistance = this._translucencyByDistance;\n  result.pixelOffsetScaleByDistance = this._pixelOffsetScaleByDistance;\n  result.imageSubRegion = this._imageSubRegion;\n  result.distanceDisplayCondition = this._distanceDisplayCondition;\n  result.disableDepthTestDistance = this._disableDepthTestDistance;\n  result.splitDirection = this._splitDirection;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {BillboardGraphics} source The object to be merged into this object.\n */\nBillboardGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this._show, source.show);\n  this.image = defaultValue(this._image, source.image);\n  this.scale = defaultValue(this._scale, source.scale);\n  this.pixelOffset = defaultValue(this._pixelOffset, source.pixelOffset);\n  this.eyeOffset = defaultValue(this._eyeOffset, source.eyeOffset);\n  this.horizontalOrigin = defaultValue(\n    this._horizontalOrigin,\n    source.horizontalOrigin,\n  );\n  this.verticalOrigin = defaultValue(\n    this._verticalOrigin,\n    source.verticalOrigin,\n  );\n  this.heightReference = defaultValue(\n    this._heightReference,\n    source.heightReference,\n  );\n  this.color = defaultValue(this._color, source.color);\n  this.rotation = defaultValue(this._rotation, source.rotation);\n  this.alignedAxis = defaultValue(this._alignedAxis, source.alignedAxis);\n  this.sizeInMeters = defaultValue(this._sizeInMeters, source.sizeInMeters);\n  this.width = defaultValue(this._width, source.width);\n  this.height = defaultValue(this._height, source.height);\n  this.scaleByDistance = defaultValue(\n    this._scaleByDistance,\n    source.scaleByDistance,\n  );\n  this.translucencyByDistance = defaultValue(\n    this._translucencyByDistance,\n    source.translucencyByDistance,\n  );\n  this.pixelOffsetScaleByDistance = defaultValue(\n    this._pixelOffsetScaleByDistance,\n    source.pixelOffsetScaleByDistance,\n  );\n  this.imageSubRegion = defaultValue(\n    this._imageSubRegion,\n    source.imageSubRegion,\n  );\n  this.distanceDisplayCondition = defaultValue(\n    this._distanceDisplayCondition,\n    source.distanceDisplayCondition,\n  );\n  this.disableDepthTestDistance = defaultValue(\n    this._disableDepthTestDistance,\n    source.disableDepthTestDistance,\n  );\n  this.splitDirection = defaultValue(\n    this.splitDirection,\n    source.splitDirection,\n  );\n};\nexport default BillboardGraphics;\n"],"mappings":"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ACA;AACA;AACA;AACA;EACEwD,KAAK,EAAExD,wBAAwB,CAAC,OAAO,CAAC;EAExC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyD,WAAW,EAAEzD,wBAAwB,CAAC,aAAa,CAAC;EAEpD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0D,SAAS,EAAE1D,wBAAwB,CAAC,WAAW,CAAC;EAEhD;AACF;AACA;AACA;AACA;AACA;EACE2D,gBAAgB,EAAE3D,wBAAwB,CAAC,kBAAkB,CAAC;EAE9D;AACF;AACA;AACA;AACA;AACA;EACE4D,cAAc,EAAE5D,wBAAwB,CAAC,gBAAgB,CAAC;EAE1D;AACF;AACA;AACA;AACA;AACA;EACE6D,eAAe,EAAE7D,wBAAwB,CAAC,iBAAiB,CAAC;EAE5D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE8D,KAAK,EAAE9D,wBAAwB,CAAC,OAAO,CAAC;EAExC;AACF;AACA;AACA;AACA;AACA;AACA;EACE+D,QAAQ,EAAE/D,wBAAwB,CAAC,UAAU,CAAC;EAE9C;AACF;AACA;AACA;AACA;AACA;AACA;EACEgE,WAAW,EAAEhE,wBAAwB,CAAC,aAAa,CAAC;EAEpD;AACF;AACA;AACA;AACA;AACA;EACEiE,YAAY,EAAEjE,wBAAwB,CAAC,cAAc,CAAC;EAEtD;AACF;AACA;AACA;AACA;AACA;EACEkE,KAAK,EAAElE,wBAAwB,CAAC,OAAO,CAAC;EAExC;AACF;AACA;AACA;AACA;AACA;EACEmE,MAAM,EAAEnE,wBAAwB,CAAC,QAAQ,CAAC;EAE1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoE,eAAe,EAAEpE,wBAAwB,CAAC,iBAAiB,CAAC;EAE5D;AACF;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}