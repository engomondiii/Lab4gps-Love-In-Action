{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport CullingVolume from \"./CullingVolume.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix4 from \"./Matrix4.js\";\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias OrthographicOffCenterFrustum\n * @constructor\n *\n * @param {object} [options] An object with the following properties:\n * @param {number} [options.left] The left clipping plane distance.\n * @param {number} [options.right] The right clipping plane distance.\n * @param {number} [options.top] The top clipping plane distance.\n * @param {number} [options.bottom] The bottom clipping plane distance.\n * @param {number} [options.near=1.0] The near clipping plane distance.\n * @param {number} [options.far=500000000.0] The far clipping plane distance.\n *\n * @example\n * const maxRadii = ellipsoid.maximumRadius;\n *\n * const frustum = new Cesium.OrthographicOffCenterFrustum();\n * frustum.right = maxRadii * Cesium.Math.PI;\n * frustum.left = -c.frustum.right;\n * frustum.top = c.frustum.right * (canvas.clientHeight / canvas.clientWidth);\n * frustum.bottom = -c.frustum.top;\n * frustum.near = 0.01 * maxRadii;\n * frustum.far = 50.0 * maxRadii;\n */\nfunction OrthographicOffCenterFrustum(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The left clipping plane.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.left = options.left;\n  this._left = undefined;\n\n  /**\n   * The right clipping plane.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.right = options.right;\n  this._right = undefined;\n\n  /**\n   * The top clipping plane.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.top = options.top;\n  this._top = undefined;\n\n  /**\n   * The bottom clipping plane.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.bottom = options.bottom;\n  this._bottom = undefined;\n\n  /**\n   * The distance of the near plane.\n   * @type {number}\n   * @default 1.0\n   */\n  this.near = defaultValue(options.near, 1.0);\n  this._near = this.near;\n\n  /**\n   * The distance of the far plane.\n   * @type {number}\n   * @default 500000000.0;\n   */\n  this.far = defaultValue(options.far, 500000000.0);\n  this._far = this.far;\n  this._cullingVolume = new CullingVolume();\n  this._orthographicMatrix = new Matrix4();\n}\nfunction update(frustum) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(frustum.right) || !defined(frustum.left) || !defined(frustum.top) || !defined(frustum.bottom) || !defined(frustum.near) || !defined(frustum.far)) {\n    throw new DeveloperError(\"right, left, top, bottom, near, or far parameters are not set.\");\n  }\n  //>>includeEnd('debug');\n\n  if (frustum.top !== frustum._top || frustum.bottom !== frustum._bottom || frustum.left !== frustum._left || frustum.right !== frustum._right || frustum.near !== frustum._near || frustum.far !== frustum._far) {\n    //>>includeStart('debug', pragmas.debug);\n    if (frustum.left > frustum.right) {\n      throw new DeveloperError(\"right must be greater than left.\");\n    }\n    if (frustum.bottom > frustum.top) {\n      throw new DeveloperError(\"top must be greater than bottom.\");\n    }\n    if (frustum.near <= 0 || frustum.near > frustum.far) {\n      throw new DeveloperError(\"near must be greater than zero and less than far.\");\n    }\n    //>>includeEnd('debug');\n\n    frustum._left = frustum.left;\n    frustum._right = frustum.right;\n    frustum._top = frustum.top;\n    frustum._bottom = frustum.bottom;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._orthographicMatrix = Matrix4.computeOrthographicOffCenter(frustum.left, frustum.right, frustum.bottom, frustum.top, frustum.near, frustum.far, frustum._orthographicMatrix);\n  }\n}\nObject.defineProperties(OrthographicOffCenterFrustum.prototype, {\n  /**\n   * Gets the orthographic projection matrix computed from the view frustum.\n   * @memberof OrthographicOffCenterFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  projectionMatrix: {\n    get: function () {\n      update(this);\n      return this._orthographicMatrix;\n    }\n  }\n});\nconst getPlanesRight = new Cartesian3();\nconst getPlanesNearCenter = new Cartesian3();\nconst getPlanesPoint = new Cartesian3();\nconst negateScratch = new Cartesian3();\n\n/**\n * Creates a culling volume for this frustum.\n *\n * @param {Cartesian3} position The eye position.\n * @param {Cartesian3} direction The view direction.\n * @param {Cartesian3} up The up direction.\n * @returns {CullingVolume} A culling volume at the given position and orientation.\n *\n * @example\n * // Check if a bounding volume intersects the frustum.\n * const cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n * const intersect = cullingVolume.computeVisibility(boundingVolume);\n */\nOrthographicOffCenterFrustum.prototype.computeCullingVolume = function (position, direction, up) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(position)) {\n    throw new DeveloperError(\"position is required.\");\n  }\n  if (!defined(direction)) {\n    throw new DeveloperError(\"direction is required.\");\n  }\n  if (!defined(up)) {\n    throw new DeveloperError(\"up is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const planes = this._cullingVolume.planes;\n  const t = this.top;\n  const b = this.bottom;\n  const r = this.right;\n  const l = this.left;\n  const n = this.near;\n  const f = this.far;\n  const right = Cartesian3.cross(direction, up, getPlanesRight);\n  Cartesian3.normalize(right, right);\n  const nearCenter = getPlanesNearCenter;\n  Cartesian3.multiplyByScalar(direction, n, nearCenter);\n  Cartesian3.add(position, nearCenter, nearCenter);\n  const point = getPlanesPoint;\n\n  // Left plane\n  Cartesian3.multiplyByScalar(right, l, point);\n  Cartesian3.add(nearCenter, point, point);\n  let plane = planes[0];\n  if (!defined(plane)) {\n    plane = planes[0] = new Cartesian4();\n  }\n  plane.x = right.x;\n  plane.y = right.y;\n  plane.z = right.z;\n  plane.w = -Cartesian3.dot(right, point);\n\n  // Right plane\n  Cartesian3.multiplyByScalar(right, r, point);\n  Cartesian3.add(nearCenter, point, point);\n  plane = planes[1];\n  if (!defined(plane)) {\n    plane = planes[1] = new Cartesian4();\n  }\n  plane.x = -right.x;\n  plane.y = -right.y;\n  plane.z = -right.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(right, negateScratch), point);\n\n  // Bottom plane\n  Cartesian3.multiplyByScalar(up, b, point);\n  Cartesian3.add(nearCenter, point, point);\n  plane = planes[2];\n  if (!defined(plane)) {\n    plane = planes[2] = new Cartesian4();\n  }\n  plane.x = up.x;\n  plane.y = up.y;\n  plane.z = up.z;\n  plane.w = -Cartesian3.dot(up, point);\n\n  // Top plane\n  Cartesian3.multiplyByScalar(up, t, point);\n  Cartesian3.add(nearCenter, point, point);\n  plane = planes[3];\n  if (!defined(plane)) {\n    plane = planes[3] = new Cartesian4();\n  }\n  plane.x = -up.x;\n  plane.y = -up.y;\n  plane.z = -up.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(up, negateScratch), point);\n\n  // Near plane\n  plane = planes[4];\n  if (!defined(plane)) {\n    plane = planes[4] = new Cartesian4();\n  }\n  plane.x = direction.x;\n  plane.y = direction.y;\n  plane.z = direction.z;\n  plane.w = -Cartesian3.dot(direction, nearCenter);\n\n  // Far plane\n  Cartesian3.multiplyByScalar(direction, f, point);\n  Cartesian3.add(position, point, point);\n  plane = planes[5];\n  if (!defined(plane)) {\n    plane = planes[5] = new Cartesian4();\n  }\n  plane.x = -direction.x;\n  plane.y = -direction.y;\n  plane.z = -direction.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(direction, negateScratch), point);\n  return this._cullingVolume;\n};\n\n/**\n * Returns the pixel's width and height in meters.\n *\n * @param {number} drawingBufferWidth The width of the drawing buffer.\n * @param {number} drawingBufferHeight The height of the drawing buffer.\n * @param {number} distance The distance to the near plane in meters.\n * @param {number} pixelRatio The scaling factor from pixel space to coordinate space.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n *\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n * @exception {DeveloperError} pixelRatio must be greater than zero.\n *\n * @example\n * // Example 1\n * // Get the width and height of a pixel.\n * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\n */\nOrthographicOffCenterFrustum.prototype.getPixelDimensions = function (drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\n  update(this);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\n    throw new DeveloperError(\"Both drawingBufferWidth and drawingBufferHeight are required.\");\n  }\n  if (drawingBufferWidth <= 0) {\n    throw new DeveloperError(\"drawingBufferWidth must be greater than zero.\");\n  }\n  if (drawingBufferHeight <= 0) {\n    throw new DeveloperError(\"drawingBufferHeight must be greater than zero.\");\n  }\n  if (!defined(distance)) {\n    throw new DeveloperError(\"distance is required.\");\n  }\n  if (!defined(pixelRatio)) {\n    throw new DeveloperError(\"pixelRatio is required.\");\n  }\n  if (pixelRatio <= 0) {\n    throw new DeveloperError(\"pixelRatio must be greater than zero.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"A result object is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const frustumWidth = this.right - this.left;\n  const frustumHeight = this.top - this.bottom;\n  const pixelWidth = pixelRatio * frustumWidth / drawingBufferWidth;\n  const pixelHeight = pixelRatio * frustumHeight / drawingBufferHeight;\n  result.x = pixelWidth;\n  result.y = pixelHeight;\n  return result;\n};\n\n/**\n * Returns a duplicate of a OrthographicOffCenterFrustum instance.\n *\n * @param {OrthographicOffCenterFrustum} [result] The object onto which to store the result.\n * @returns {OrthographicOffCenterFrustum} The modified result parameter or a new OrthographicOffCenterFrustum instance if one was not provided.\n */\nOrthographicOffCenterFrustum.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new OrthographicOffCenterFrustum();\n  }\n  result.left = this.left;\n  result.right = this.right;\n  result.top = this.top;\n  result.bottom = this.bottom;\n  result.near = this.near;\n  result.far = this.far;\n\n  // force update of clone to compute matrices\n  result._left = undefined;\n  result._right = undefined;\n  result._top = undefined;\n  result._bottom = undefined;\n  result._near = undefined;\n  result._far = undefined;\n  return result;\n};\n\n/**\n * Compares the provided OrthographicOffCenterFrustum componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {OrthographicOffCenterFrustum} [other] The right hand side OrthographicOffCenterFrustum.\n * @returns {boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nOrthographicOffCenterFrustum.prototype.equals = function (other) {\n  return defined(other) && other instanceof OrthographicOffCenterFrustum && this.right === other.right && this.left === other.left && this.top === other.top && this.bottom === other.bottom && this.near === other.near && this.far === other.far;\n};\n\n/**\n * Compares the provided OrthographicOffCenterFrustum componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {OrthographicOffCenterFrustum} other The right hand side OrthographicOffCenterFrustum.\n * @param {number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n */\nOrthographicOffCenterFrustum.prototype.equalsEpsilon = function (other, relativeEpsilon, absoluteEpsilon) {\n  return other === this || defined(other) && other instanceof OrthographicOffCenterFrustum && CesiumMath.equalsEpsilon(this.right, other.right, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.left, other.left, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.top, other.top, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.bottom, other.bottom, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.near, other.near, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.far, other.far, relativeEpsilon, absoluteEpsilon);\n};\nexport default OrthographicOffCenterFrustum;","map":{"version":3,"names":["Cartesian3","Cartesian4","CullingVolume","defaultValue","defined","DeveloperError","CesiumMath","Matrix4","OrthographicOffCenterFrustum","options","EMPTY_OBJECT","left","_left","undefined","right","_right","top","_top","bottom","_bottom","near","_near","far","_far","_cullingVolume","_orthographicMatrix","update","frustum","computeOrthographicOffCenter","Object","defineProperties","prototype","projectionMatrix","get","getPlanesRight","getPlanesNearCenter","getPlanesPoint","negateScratch","computeCullingVolume","position","direction","up","planes","t","b","r","l","n","f","cross","normalize","nearCenter","multiplyByScalar","add","point","plane","x","y","z","w","dot","negate","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","pixelRatio","result","frustumWidth","frustumHeight","pixelWidth","pixelHeight","clone","equals","other","equalsEpsilon","relativeEpsilon","absoluteEpsilon"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/OrthographicOffCenterFrustum.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport CullingVolume from \"./CullingVolume.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix4 from \"./Matrix4.js\";\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias OrthographicOffCenterFrustum\n * @constructor\n *\n * @param {object} [options] An object with the following properties:\n * @param {number} [options.left] The left clipping plane distance.\n * @param {number} [options.right] The right clipping plane distance.\n * @param {number} [options.top] The top clipping plane distance.\n * @param {number} [options.bottom] The bottom clipping plane distance.\n * @param {number} [options.near=1.0] The near clipping plane distance.\n * @param {number} [options.far=500000000.0] The far clipping plane distance.\n *\n * @example\n * const maxRadii = ellipsoid.maximumRadius;\n *\n * const frustum = new Cesium.OrthographicOffCenterFrustum();\n * frustum.right = maxRadii * Cesium.Math.PI;\n * frustum.left = -c.frustum.right;\n * frustum.top = c.frustum.right * (canvas.clientHeight / canvas.clientWidth);\n * frustum.bottom = -c.frustum.top;\n * frustum.near = 0.01 * maxRadii;\n * frustum.far = 50.0 * maxRadii;\n */\nfunction OrthographicOffCenterFrustum(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The left clipping plane.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.left = options.left;\n  this._left = undefined;\n\n  /**\n   * The right clipping plane.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.right = options.right;\n  this._right = undefined;\n\n  /**\n   * The top clipping plane.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.top = options.top;\n  this._top = undefined;\n\n  /**\n   * The bottom clipping plane.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.bottom = options.bottom;\n  this._bottom = undefined;\n\n  /**\n   * The distance of the near plane.\n   * @type {number}\n   * @default 1.0\n   */\n  this.near = defaultValue(options.near, 1.0);\n  this._near = this.near;\n\n  /**\n   * The distance of the far plane.\n   * @type {number}\n   * @default 500000000.0;\n   */\n  this.far = defaultValue(options.far, 500000000.0);\n  this._far = this.far;\n\n  this._cullingVolume = new CullingVolume();\n  this._orthographicMatrix = new Matrix4();\n}\n\nfunction update(frustum) {\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    !defined(frustum.right) ||\n    !defined(frustum.left) ||\n    !defined(frustum.top) ||\n    !defined(frustum.bottom) ||\n    !defined(frustum.near) ||\n    !defined(frustum.far)\n  ) {\n    throw new DeveloperError(\n      \"right, left, top, bottom, near, or far parameters are not set.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  if (\n    frustum.top !== frustum._top ||\n    frustum.bottom !== frustum._bottom ||\n    frustum.left !== frustum._left ||\n    frustum.right !== frustum._right ||\n    frustum.near !== frustum._near ||\n    frustum.far !== frustum._far\n  ) {\n    //>>includeStart('debug', pragmas.debug);\n    if (frustum.left > frustum.right) {\n      throw new DeveloperError(\"right must be greater than left.\");\n    }\n    if (frustum.bottom > frustum.top) {\n      throw new DeveloperError(\"top must be greater than bottom.\");\n    }\n    if (frustum.near <= 0 || frustum.near > frustum.far) {\n      throw new DeveloperError(\n        \"near must be greater than zero and less than far.\",\n      );\n    }\n    //>>includeEnd('debug');\n\n    frustum._left = frustum.left;\n    frustum._right = frustum.right;\n    frustum._top = frustum.top;\n    frustum._bottom = frustum.bottom;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._orthographicMatrix = Matrix4.computeOrthographicOffCenter(\n      frustum.left,\n      frustum.right,\n      frustum.bottom,\n      frustum.top,\n      frustum.near,\n      frustum.far,\n      frustum._orthographicMatrix,\n    );\n  }\n}\n\nObject.defineProperties(OrthographicOffCenterFrustum.prototype, {\n  /**\n   * Gets the orthographic projection matrix computed from the view frustum.\n   * @memberof OrthographicOffCenterFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   */\n  projectionMatrix: {\n    get: function () {\n      update(this);\n      return this._orthographicMatrix;\n    },\n  },\n});\n\nconst getPlanesRight = new Cartesian3();\nconst getPlanesNearCenter = new Cartesian3();\nconst getPlanesPoint = new Cartesian3();\nconst negateScratch = new Cartesian3();\n\n/**\n * Creates a culling volume for this frustum.\n *\n * @param {Cartesian3} position The eye position.\n * @param {Cartesian3} direction The view direction.\n * @param {Cartesian3} up The up direction.\n * @returns {CullingVolume} A culling volume at the given position and orientation.\n *\n * @example\n * // Check if a bounding volume intersects the frustum.\n * const cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n * const intersect = cullingVolume.computeVisibility(boundingVolume);\n */\nOrthographicOffCenterFrustum.prototype.computeCullingVolume = function (\n  position,\n  direction,\n  up,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(position)) {\n    throw new DeveloperError(\"position is required.\");\n  }\n  if (!defined(direction)) {\n    throw new DeveloperError(\"direction is required.\");\n  }\n  if (!defined(up)) {\n    throw new DeveloperError(\"up is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const planes = this._cullingVolume.planes;\n  const t = this.top;\n  const b = this.bottom;\n  const r = this.right;\n  const l = this.left;\n  const n = this.near;\n  const f = this.far;\n\n  const right = Cartesian3.cross(direction, up, getPlanesRight);\n  Cartesian3.normalize(right, right);\n  const nearCenter = getPlanesNearCenter;\n  Cartesian3.multiplyByScalar(direction, n, nearCenter);\n  Cartesian3.add(position, nearCenter, nearCenter);\n\n  const point = getPlanesPoint;\n\n  // Left plane\n  Cartesian3.multiplyByScalar(right, l, point);\n  Cartesian3.add(nearCenter, point, point);\n\n  let plane = planes[0];\n  if (!defined(plane)) {\n    plane = planes[0] = new Cartesian4();\n  }\n  plane.x = right.x;\n  plane.y = right.y;\n  plane.z = right.z;\n  plane.w = -Cartesian3.dot(right, point);\n\n  // Right plane\n  Cartesian3.multiplyByScalar(right, r, point);\n  Cartesian3.add(nearCenter, point, point);\n\n  plane = planes[1];\n  if (!defined(plane)) {\n    plane = planes[1] = new Cartesian4();\n  }\n  plane.x = -right.x;\n  plane.y = -right.y;\n  plane.z = -right.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(right, negateScratch), point);\n\n  // Bottom plane\n  Cartesian3.multiplyByScalar(up, b, point);\n  Cartesian3.add(nearCenter, point, point);\n\n  plane = planes[2];\n  if (!defined(plane)) {\n    plane = planes[2] = new Cartesian4();\n  }\n  plane.x = up.x;\n  plane.y = up.y;\n  plane.z = up.z;\n  plane.w = -Cartesian3.dot(up, point);\n\n  // Top plane\n  Cartesian3.multiplyByScalar(up, t, point);\n  Cartesian3.add(nearCenter, point, point);\n\n  plane = planes[3];\n  if (!defined(plane)) {\n    plane = planes[3] = new Cartesian4();\n  }\n  plane.x = -up.x;\n  plane.y = -up.y;\n  plane.z = -up.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(up, negateScratch), point);\n\n  // Near plane\n  plane = planes[4];\n  if (!defined(plane)) {\n    plane = planes[4] = new Cartesian4();\n  }\n  plane.x = direction.x;\n  plane.y = direction.y;\n  plane.z = direction.z;\n  plane.w = -Cartesian3.dot(direction, nearCenter);\n\n  // Far plane\n  Cartesian3.multiplyByScalar(direction, f, point);\n  Cartesian3.add(position, point, point);\n\n  plane = planes[5];\n  if (!defined(plane)) {\n    plane = planes[5] = new Cartesian4();\n  }\n  plane.x = -direction.x;\n  plane.y = -direction.y;\n  plane.z = -direction.z;\n  plane.w = -Cartesian3.dot(Cartesian3.negate(direction, negateScratch), point);\n\n  return this._cullingVolume;\n};\n\n/**\n * Returns the pixel's width and height in meters.\n *\n * @param {number} drawingBufferWidth The width of the drawing buffer.\n * @param {number} drawingBufferHeight The height of the drawing buffer.\n * @param {number} distance The distance to the near plane in meters.\n * @param {number} pixelRatio The scaling factor from pixel space to coordinate space.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n *\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n * @exception {DeveloperError} pixelRatio must be greater than zero.\n *\n * @example\n * // Example 1\n * // Get the width and height of a pixel.\n * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\n */\nOrthographicOffCenterFrustum.prototype.getPixelDimensions = function (\n  drawingBufferWidth,\n  drawingBufferHeight,\n  distance,\n  pixelRatio,\n  result,\n) {\n  update(this);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\n    throw new DeveloperError(\n      \"Both drawingBufferWidth and drawingBufferHeight are required.\",\n    );\n  }\n  if (drawingBufferWidth <= 0) {\n    throw new DeveloperError(\"drawingBufferWidth must be greater than zero.\");\n  }\n  if (drawingBufferHeight <= 0) {\n    throw new DeveloperError(\"drawingBufferHeight must be greater than zero.\");\n  }\n  if (!defined(distance)) {\n    throw new DeveloperError(\"distance is required.\");\n  }\n  if (!defined(pixelRatio)) {\n    throw new DeveloperError(\"pixelRatio is required.\");\n  }\n  if (pixelRatio <= 0) {\n    throw new DeveloperError(\"pixelRatio must be greater than zero.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"A result object is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const frustumWidth = this.right - this.left;\n  const frustumHeight = this.top - this.bottom;\n  const pixelWidth = (pixelRatio * frustumWidth) / drawingBufferWidth;\n  const pixelHeight = (pixelRatio * frustumHeight) / drawingBufferHeight;\n\n  result.x = pixelWidth;\n  result.y = pixelHeight;\n  return result;\n};\n\n/**\n * Returns a duplicate of a OrthographicOffCenterFrustum instance.\n *\n * @param {OrthographicOffCenterFrustum} [result] The object onto which to store the result.\n * @returns {OrthographicOffCenterFrustum} The modified result parameter or a new OrthographicOffCenterFrustum instance if one was not provided.\n */\nOrthographicOffCenterFrustum.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new OrthographicOffCenterFrustum();\n  }\n\n  result.left = this.left;\n  result.right = this.right;\n  result.top = this.top;\n  result.bottom = this.bottom;\n  result.near = this.near;\n  result.far = this.far;\n\n  // force update of clone to compute matrices\n  result._left = undefined;\n  result._right = undefined;\n  result._top = undefined;\n  result._bottom = undefined;\n  result._near = undefined;\n  result._far = undefined;\n\n  return result;\n};\n\n/**\n * Compares the provided OrthographicOffCenterFrustum componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {OrthographicOffCenterFrustum} [other] The right hand side OrthographicOffCenterFrustum.\n * @returns {boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nOrthographicOffCenterFrustum.prototype.equals = function (other) {\n  return (\n    defined(other) &&\n    other instanceof OrthographicOffCenterFrustum &&\n    this.right === other.right &&\n    this.left === other.left &&\n    this.top === other.top &&\n    this.bottom === other.bottom &&\n    this.near === other.near &&\n    this.far === other.far\n  );\n};\n\n/**\n * Compares the provided OrthographicOffCenterFrustum componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {OrthographicOffCenterFrustum} other The right hand side OrthographicOffCenterFrustum.\n * @param {number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n */\nOrthographicOffCenterFrustum.prototype.equalsEpsilon = function (\n  other,\n  relativeEpsilon,\n  absoluteEpsilon,\n) {\n  return (\n    other === this ||\n    (defined(other) &&\n      other instanceof OrthographicOffCenterFrustum &&\n      CesiumMath.equalsEpsilon(\n        this.right,\n        other.right,\n        relativeEpsilon,\n        absoluteEpsilon,\n      ) &&\n      CesiumMath.equalsEpsilon(\n        this.left,\n        other.left,\n        relativeEpsilon,\n        absoluteEpsilon,\n      ) &&\n      CesiumMath.equalsEpsilon(\n        this.top,\n        other.top,\n        relativeEpsilon,\n        absoluteEpsilon,\n      ) &&\n      CesiumMath.equalsEpsilon(\n        this.bottom,\n        other.bottom,\n        relativeEpsilon,\n        absoluteEpsilon,\n      ) &&\n      CesiumMath.equalsEpsilon(\n        this.near,\n        other.near,\n        relativeEpsilon,\n        absoluteEpsilon,\n      ) &&\n      CesiumMath.equalsEpsilon(\n        this.far,\n        other.far,\n        relativeEpsilon,\n        absoluteEpsilon,\n      ))\n  );\n};\nexport default OrthographicOffCenterFrustum;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}