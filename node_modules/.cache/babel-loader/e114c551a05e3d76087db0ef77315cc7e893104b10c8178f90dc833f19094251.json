{"ast":null,"code":"import PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * The format of a pixel, i.e., the number of components it has and what they represent.\n *\n * @enum {number}\n */\nconst PixelFormat = {\n  /**\n   * A pixel format containing a depth value.\n   *\n   * @type {number}\n   * @constant\n   */\n  DEPTH_COMPONENT: WebGLConstants.DEPTH_COMPONENT,\n  /**\n   * A pixel format containing a depth and stencil value, most often used with {@link PixelDatatype.UNSIGNED_INT_24_8}.\n   *\n   * @type {number}\n   * @constant\n   */\n  DEPTH_STENCIL: WebGLConstants.DEPTH_STENCIL,\n  /**\n   * A pixel format containing an alpha channel.\n   *\n   * @type {number}\n   * @constant\n   */\n  ALPHA: WebGLConstants.ALPHA,\n  /**\n   * A pixel format containing a red channel\n   *\n   * @type {number}\n   * @constant\n   */\n  RED: WebGLConstants.RED,\n  /**\n   * A pixel format containing red and green channels.\n   *\n   * @type {number}\n   * @constant\n   */\n  RG: WebGLConstants.RG,\n  /**\n   * A pixel format containing red, green, and blue channels.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB: WebGLConstants.RGB,\n  /**\n   * A pixel format containing red, green, blue, and alpha channels.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA: WebGLConstants.RGBA,\n  /**\n   * A pixel format containing a luminance (intensity) channel.\n   *\n   * @type {number}\n   * @constant\n   */\n  LUMINANCE: WebGLConstants.LUMINANCE,\n  /**\n   * A pixel format containing luminance (intensity) and alpha channels.\n   *\n   * @type {number}\n   * @constant\n   */\n  LUMINANCE_ALPHA: WebGLConstants.LUMINANCE_ALPHA,\n  /**\n   * A pixel format containing red, green, and blue channels that is DXT1 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB_DXT1: WebGLConstants.COMPRESSED_RGB_S3TC_DXT1_EXT,\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT1 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_DXT1: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT3 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_DXT3: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT5 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_DXT5: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 4bpp compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 2bpp compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 4bpp compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 2bpp compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is ASTC compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_ASTC: WebGLConstants.COMPRESSED_RGBA_ASTC_4x4_WEBGL,\n  /**\n   * A pixel format containing red, green, and blue channels that is ETC1 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB_ETC1: WebGLConstants.COMPRESSED_RGB_ETC1_WEBGL,\n  /**\n   * A pixel format containing red, green, and blue channels that is ETC2 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB8_ETC2: WebGLConstants.COMPRESSED_RGB8_ETC2,\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is ETC2 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA8_ETC2_EAC: WebGLConstants.COMPRESSED_RGBA8_ETC2_EAC,\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is BC7 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_BC7: WebGLConstants.COMPRESSED_RGBA_BPTC_UNORM\n};\n\n/**\n * @private\n */\nPixelFormat.componentsLength = function (pixelFormat) {\n  switch (pixelFormat) {\n    case PixelFormat.RGB:\n      return 3;\n    case PixelFormat.RGBA:\n      return 4;\n    case PixelFormat.LUMINANCE_ALPHA:\n    case PixelFormat.RG:\n      return 2;\n    case PixelFormat.ALPHA:\n    case PixelFormat.RED:\n    case PixelFormat.LUMINANCE:\n      return 1;\n    default:\n      return 1;\n  }\n};\n\n/**\n * @private\n */\nPixelFormat.validate = function (pixelFormat) {\n  return pixelFormat === PixelFormat.DEPTH_COMPONENT || pixelFormat === PixelFormat.DEPTH_STENCIL || pixelFormat === PixelFormat.ALPHA || pixelFormat === PixelFormat.RED || pixelFormat === PixelFormat.RG || pixelFormat === PixelFormat.RGB || pixelFormat === PixelFormat.RGBA || pixelFormat === PixelFormat.LUMINANCE || pixelFormat === PixelFormat.LUMINANCE_ALPHA || pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5 || pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_ASTC || pixelFormat === PixelFormat.RGB_ETC1 || pixelFormat === PixelFormat.RGB8_ETC2 || pixelFormat === PixelFormat.RGBA8_ETC2_EAC || pixelFormat === PixelFormat.RGBA_BC7;\n};\n\n/**\n * @private\n */\nPixelFormat.isColorFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RED || pixelFormat === PixelFormat.ALPHA || pixelFormat === PixelFormat.RGB || pixelFormat === PixelFormat.RGBA || pixelFormat === PixelFormat.LUMINANCE || pixelFormat === PixelFormat.LUMINANCE_ALPHA;\n};\n\n/**\n * @private\n */\nPixelFormat.isDepthFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.DEPTH_COMPONENT || pixelFormat === PixelFormat.DEPTH_STENCIL;\n};\n\n/**\n * @private\n */\nPixelFormat.isCompressedFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5 || pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_ASTC || pixelFormat === PixelFormat.RGB_ETC1 || pixelFormat === PixelFormat.RGB8_ETC2 || pixelFormat === PixelFormat.RGBA8_ETC2_EAC || pixelFormat === PixelFormat.RGBA_BC7;\n};\n\n/**\n * @private\n */\nPixelFormat.isDXTFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5;\n};\n\n/**\n * @private\n */\nPixelFormat.isPVRTCFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1;\n};\n\n/**\n * @private\n */\nPixelFormat.isASTCFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGBA_ASTC;\n};\n\n/**\n * @private\n */\nPixelFormat.isETC1Format = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB_ETC1;\n};\n\n/**\n * @private\n */\nPixelFormat.isETC2Format = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB8_ETC2 || pixelFormat === PixelFormat.RGBA8_ETC2_EAC;\n};\n\n/**\n * @private\n */\nPixelFormat.isBC7Format = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGBA_BC7;\n};\n\n/**\n * @private\n */\nPixelFormat.compressedTextureSizeInBytes = function (pixelFormat, width, height) {\n  switch (pixelFormat) {\n    case PixelFormat.RGB_DXT1:\n    case PixelFormat.RGBA_DXT1:\n    case PixelFormat.RGB_ETC1:\n    case PixelFormat.RGB8_ETC2:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n    case PixelFormat.RGBA_DXT3:\n    case PixelFormat.RGBA_DXT5:\n    case PixelFormat.RGBA_ASTC:\n    case PixelFormat.RGBA8_ETC2_EAC:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n    case PixelFormat.RGB_PVRTC_4BPPV1:\n    case PixelFormat.RGBA_PVRTC_4BPPV1:\n      return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\n    case PixelFormat.RGB_PVRTC_2BPPV1:\n    case PixelFormat.RGBA_PVRTC_2BPPV1:\n      return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\n    case PixelFormat.RGBA_BC7:\n      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;\n    default:\n      return 0;\n  }\n};\n\n/**\n * @private\n */\nPixelFormat.textureSizeInBytes = function (pixelFormat, pixelDatatype, width, height) {\n  let componentsLength = PixelFormat.componentsLength(pixelFormat);\n  if (PixelDatatype.isPacked(pixelDatatype)) {\n    componentsLength = 1;\n  }\n  return componentsLength * PixelDatatype.sizeInBytes(pixelDatatype) * width * height;\n};\n\n/**\n * @private\n */\nPixelFormat.alignmentInBytes = function (pixelFormat, pixelDatatype, width) {\n  const mod = PixelFormat.textureSizeInBytes(pixelFormat, pixelDatatype, width, 1) % 4;\n  return mod === 0 ? 4 : mod === 2 ? 2 : 1;\n};\n\n/**\n * @private\n * @param {PixelFormat} pixelFormat The pixel format.\n * @param {PixelDatatype} pixelDatatype The pixel datatype.\n * @param {Number} width The width of the texture.\n * @param {Number} height The height of the texture.\n * @returns {TypedArray} The typed array.\n */\nPixelFormat.createTypedArray = function (pixelFormat, pixelDatatype, width, height) {\n  const constructor = PixelDatatype.getTypedArrayConstructor(pixelDatatype);\n  const size = PixelFormat.componentsLength(pixelFormat) * width * height;\n  return new constructor(size);\n};\n\n/**\n * @private\n */\nPixelFormat.flipY = function (bufferView, pixelFormat, pixelDatatype, width, height) {\n  if (height === 1) {\n    return bufferView;\n  }\n  const flipped = PixelFormat.createTypedArray(pixelFormat, pixelDatatype, width, height);\n  const numberOfComponents = PixelFormat.componentsLength(pixelFormat);\n  const textureWidth = width * numberOfComponents;\n  for (let i = 0; i < height; ++i) {\n    const row = i * width * numberOfComponents;\n    const flippedRow = (height - i - 1) * width * numberOfComponents;\n    for (let j = 0; j < textureWidth; ++j) {\n      flipped[flippedRow + j] = bufferView[row + j];\n    }\n  }\n  return flipped;\n};\n\n/**\n * @private\n */\nPixelFormat.toInternalFormat = function (pixelFormat, pixelDatatype, context) {\n  // WebGL 1 require internalFormat to be the same as PixelFormat\n  if (!context.webgl2) {\n    return pixelFormat;\n  }\n\n  // Convert pixelFormat to correct internalFormat for WebGL 2\n  if (pixelFormat === PixelFormat.DEPTH_STENCIL) {\n    return WebGLConstants.DEPTH24_STENCIL8;\n  }\n  if (pixelFormat === PixelFormat.DEPTH_COMPONENT) {\n    if (pixelDatatype === PixelDatatype.UNSIGNED_SHORT) {\n      return WebGLConstants.DEPTH_COMPONENT16;\n    } else if (pixelDatatype === PixelDatatype.UNSIGNED_INT) {\n      return WebGLConstants.DEPTH_COMPONENT24;\n    }\n  }\n  if (pixelDatatype === PixelDatatype.FLOAT) {\n    switch (pixelFormat) {\n      case PixelFormat.RGBA:\n        return WebGLConstants.RGBA32F;\n      case PixelFormat.RGB:\n        return WebGLConstants.RGB32F;\n      case PixelFormat.RG:\n        return WebGLConstants.RG32F;\n      case PixelFormat.RED:\n        return WebGLConstants.R32F;\n    }\n  }\n  if (pixelDatatype === PixelDatatype.HALF_FLOAT) {\n    switch (pixelFormat) {\n      case PixelFormat.RGBA:\n        return WebGLConstants.RGBA16F;\n      case PixelFormat.RGB:\n        return WebGLConstants.RGB16F;\n      case PixelFormat.RG:\n        return WebGLConstants.RG16F;\n      case PixelFormat.RED:\n        return WebGLConstants.R16F;\n    }\n  }\n  return pixelFormat;\n};\nexport default Object.freeze(PixelFormat);","map":{"version":3,"names":["PixelDatatype","WebGLConstants","PixelFormat","DEPTH_COMPONENT","DEPTH_STENCIL","ALPHA","RED","RG","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","RGB_DXT1","COMPRESSED_RGB_S3TC_DXT1_EXT","RGBA_DXT1","COMPRESSED_RGBA_S3TC_DXT1_EXT","RGBA_DXT3","COMPRESSED_RGBA_S3TC_DXT3_EXT","RGBA_DXT5","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","RGB_PVRTC_2BPPV1","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","RGBA_PVRTC_4BPPV1","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","RGBA_PVRTC_2BPPV1","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGBA_ASTC","COMPRESSED_RGBA_ASTC_4x4_WEBGL","RGB_ETC1","COMPRESSED_RGB_ETC1_WEBGL","RGB8_ETC2","COMPRESSED_RGB8_ETC2","RGBA8_ETC2_EAC","COMPRESSED_RGBA8_ETC2_EAC","RGBA_BC7","COMPRESSED_RGBA_BPTC_UNORM","componentsLength","pixelFormat","validate","isColorFormat","isDepthFormat","isCompressedFormat","isDXTFormat","isPVRTCFormat","isASTCFormat","isETC1Format","isETC2Format","isBC7Format","compressedTextureSizeInBytes","width","height","Math","floor","max","ceil","textureSizeInBytes","pixelDatatype","isPacked","sizeInBytes","alignmentInBytes","mod","createTypedArray","constructor","getTypedArrayConstructor","size","flipY","bufferView","flipped","numberOfComponents","textureWidth","i","row","flippedRow","j","toInternalFormat","context","webgl2","DEPTH24_STENCIL8","UNSIGNED_SHORT","DEPTH_COMPONENT16","UNSIGNED_INT","DEPTH_COMPONENT24","FLOAT","RGBA32F","RGB32F","RG32F","R32F","HALF_FLOAT","RGBA16F","RGB16F","RG16F","R16F","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/PixelFormat.js"],"sourcesContent":["import PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * The format of a pixel, i.e., the number of components it has and what they represent.\n *\n * @enum {number}\n */\nconst PixelFormat = {\n  /**\n   * A pixel format containing a depth value.\n   *\n   * @type {number}\n   * @constant\n   */\n  DEPTH_COMPONENT: WebGLConstants.DEPTH_COMPONENT,\n\n  /**\n   * A pixel format containing a depth and stencil value, most often used with {@link PixelDatatype.UNSIGNED_INT_24_8}.\n   *\n   * @type {number}\n   * @constant\n   */\n  DEPTH_STENCIL: WebGLConstants.DEPTH_STENCIL,\n\n  /**\n   * A pixel format containing an alpha channel.\n   *\n   * @type {number}\n   * @constant\n   */\n  ALPHA: WebGLConstants.ALPHA,\n\n  /**\n   * A pixel format containing a red channel\n   *\n   * @type {number}\n   * @constant\n   */\n  RED: WebGLConstants.RED,\n\n  /**\n   * A pixel format containing red and green channels.\n   *\n   * @type {number}\n   * @constant\n   */\n  RG: WebGLConstants.RG,\n\n  /**\n   * A pixel format containing red, green, and blue channels.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB: WebGLConstants.RGB,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA: WebGLConstants.RGBA,\n\n  /**\n   * A pixel format containing a luminance (intensity) channel.\n   *\n   * @type {number}\n   * @constant\n   */\n  LUMINANCE: WebGLConstants.LUMINANCE,\n\n  /**\n   * A pixel format containing luminance (intensity) and alpha channels.\n   *\n   * @type {number}\n   * @constant\n   */\n  LUMINANCE_ALPHA: WebGLConstants.LUMINANCE_ALPHA,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is DXT1 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB_DXT1: WebGLConstants.COMPRESSED_RGB_S3TC_DXT1_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT1 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_DXT1: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT3 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_DXT3: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT5 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_DXT5: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 4bpp compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 2bpp compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 4bpp compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 2bpp compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is ASTC compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_ASTC: WebGLConstants.COMPRESSED_RGBA_ASTC_4x4_WEBGL,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is ETC1 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB_ETC1: WebGLConstants.COMPRESSED_RGB_ETC1_WEBGL,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is ETC2 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGB8_ETC2: WebGLConstants.COMPRESSED_RGB8_ETC2,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is ETC2 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA8_ETC2_EAC: WebGLConstants.COMPRESSED_RGBA8_ETC2_EAC,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is BC7 compressed.\n   *\n   * @type {number}\n   * @constant\n   */\n  RGBA_BC7: WebGLConstants.COMPRESSED_RGBA_BPTC_UNORM,\n};\n\n/**\n * @private\n */\nPixelFormat.componentsLength = function (pixelFormat) {\n  switch (pixelFormat) {\n    case PixelFormat.RGB:\n      return 3;\n    case PixelFormat.RGBA:\n      return 4;\n    case PixelFormat.LUMINANCE_ALPHA:\n    case PixelFormat.RG:\n      return 2;\n    case PixelFormat.ALPHA:\n    case PixelFormat.RED:\n    case PixelFormat.LUMINANCE:\n      return 1;\n    default:\n      return 1;\n  }\n};\n\n/**\n * @private\n */\nPixelFormat.validate = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.DEPTH_COMPONENT ||\n    pixelFormat === PixelFormat.DEPTH_STENCIL ||\n    pixelFormat === PixelFormat.ALPHA ||\n    pixelFormat === PixelFormat.RED ||\n    pixelFormat === PixelFormat.RG ||\n    pixelFormat === PixelFormat.RGB ||\n    pixelFormat === PixelFormat.RGBA ||\n    pixelFormat === PixelFormat.LUMINANCE ||\n    pixelFormat === PixelFormat.LUMINANCE_ALPHA ||\n    pixelFormat === PixelFormat.RGB_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT3 ||\n    pixelFormat === PixelFormat.RGBA_DXT5 ||\n    pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_ASTC ||\n    pixelFormat === PixelFormat.RGB_ETC1 ||\n    pixelFormat === PixelFormat.RGB8_ETC2 ||\n    pixelFormat === PixelFormat.RGBA8_ETC2_EAC ||\n    pixelFormat === PixelFormat.RGBA_BC7\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isColorFormat = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.RED ||\n    pixelFormat === PixelFormat.ALPHA ||\n    pixelFormat === PixelFormat.RGB ||\n    pixelFormat === PixelFormat.RGBA ||\n    pixelFormat === PixelFormat.LUMINANCE ||\n    pixelFormat === PixelFormat.LUMINANCE_ALPHA\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isDepthFormat = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.DEPTH_COMPONENT ||\n    pixelFormat === PixelFormat.DEPTH_STENCIL\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isCompressedFormat = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.RGB_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT3 ||\n    pixelFormat === PixelFormat.RGBA_DXT5 ||\n    pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_ASTC ||\n    pixelFormat === PixelFormat.RGB_ETC1 ||\n    pixelFormat === PixelFormat.RGB8_ETC2 ||\n    pixelFormat === PixelFormat.RGBA8_ETC2_EAC ||\n    pixelFormat === PixelFormat.RGBA_BC7\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isDXTFormat = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.RGB_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT3 ||\n    pixelFormat === PixelFormat.RGBA_DXT5\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isPVRTCFormat = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isASTCFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGBA_ASTC;\n};\n\n/**\n * @private\n */\nPixelFormat.isETC1Format = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB_ETC1;\n};\n\n/**\n * @private\n */\nPixelFormat.isETC2Format = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.RGB8_ETC2 ||\n    pixelFormat === PixelFormat.RGBA8_ETC2_EAC\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isBC7Format = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGBA_BC7;\n};\n\n/**\n * @private\n */\nPixelFormat.compressedTextureSizeInBytes = function (\n  pixelFormat,\n  width,\n  height,\n) {\n  switch (pixelFormat) {\n    case PixelFormat.RGB_DXT1:\n    case PixelFormat.RGBA_DXT1:\n    case PixelFormat.RGB_ETC1:\n    case PixelFormat.RGB8_ETC2:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n\n    case PixelFormat.RGBA_DXT3:\n    case PixelFormat.RGBA_DXT5:\n    case PixelFormat.RGBA_ASTC:\n    case PixelFormat.RGBA8_ETC2_EAC:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n    case PixelFormat.RGB_PVRTC_4BPPV1:\n    case PixelFormat.RGBA_PVRTC_4BPPV1:\n      return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\n\n    case PixelFormat.RGB_PVRTC_2BPPV1:\n    case PixelFormat.RGBA_PVRTC_2BPPV1:\n      return Math.floor(\n        (Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8,\n      );\n\n    case PixelFormat.RGBA_BC7:\n      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;\n\n    default:\n      return 0;\n  }\n};\n\n/**\n * @private\n */\nPixelFormat.textureSizeInBytes = function (\n  pixelFormat,\n  pixelDatatype,\n  width,\n  height,\n) {\n  let componentsLength = PixelFormat.componentsLength(pixelFormat);\n  if (PixelDatatype.isPacked(pixelDatatype)) {\n    componentsLength = 1;\n  }\n  return (\n    componentsLength * PixelDatatype.sizeInBytes(pixelDatatype) * width * height\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.alignmentInBytes = function (pixelFormat, pixelDatatype, width) {\n  const mod =\n    PixelFormat.textureSizeInBytes(pixelFormat, pixelDatatype, width, 1) % 4;\n  return mod === 0 ? 4 : mod === 2 ? 2 : 1;\n};\n\n/**\n * @private\n * @param {PixelFormat} pixelFormat The pixel format.\n * @param {PixelDatatype} pixelDatatype The pixel datatype.\n * @param {Number} width The width of the texture.\n * @param {Number} height The height of the texture.\n * @returns {TypedArray} The typed array.\n */\nPixelFormat.createTypedArray = function (\n  pixelFormat,\n  pixelDatatype,\n  width,\n  height,\n) {\n  const constructor = PixelDatatype.getTypedArrayConstructor(pixelDatatype);\n  const size = PixelFormat.componentsLength(pixelFormat) * width * height;\n  return new constructor(size);\n};\n\n/**\n * @private\n */\nPixelFormat.flipY = function (\n  bufferView,\n  pixelFormat,\n  pixelDatatype,\n  width,\n  height,\n) {\n  if (height === 1) {\n    return bufferView;\n  }\n  const flipped = PixelFormat.createTypedArray(\n    pixelFormat,\n    pixelDatatype,\n    width,\n    height,\n  );\n  const numberOfComponents = PixelFormat.componentsLength(pixelFormat);\n  const textureWidth = width * numberOfComponents;\n  for (let i = 0; i < height; ++i) {\n    const row = i * width * numberOfComponents;\n    const flippedRow = (height - i - 1) * width * numberOfComponents;\n    for (let j = 0; j < textureWidth; ++j) {\n      flipped[flippedRow + j] = bufferView[row + j];\n    }\n  }\n  return flipped;\n};\n\n/**\n * @private\n */\nPixelFormat.toInternalFormat = function (pixelFormat, pixelDatatype, context) {\n  // WebGL 1 require internalFormat to be the same as PixelFormat\n  if (!context.webgl2) {\n    return pixelFormat;\n  }\n\n  // Convert pixelFormat to correct internalFormat for WebGL 2\n  if (pixelFormat === PixelFormat.DEPTH_STENCIL) {\n    return WebGLConstants.DEPTH24_STENCIL8;\n  }\n\n  if (pixelFormat === PixelFormat.DEPTH_COMPONENT) {\n    if (pixelDatatype === PixelDatatype.UNSIGNED_SHORT) {\n      return WebGLConstants.DEPTH_COMPONENT16;\n    } else if (pixelDatatype === PixelDatatype.UNSIGNED_INT) {\n      return WebGLConstants.DEPTH_COMPONENT24;\n    }\n  }\n\n  if (pixelDatatype === PixelDatatype.FLOAT) {\n    switch (pixelFormat) {\n      case PixelFormat.RGBA:\n        return WebGLConstants.RGBA32F;\n      case PixelFormat.RGB:\n        return WebGLConstants.RGB32F;\n      case PixelFormat.RG:\n        return WebGLConstants.RG32F;\n      case PixelFormat.RED:\n        return WebGLConstants.R32F;\n    }\n  }\n\n  if (pixelDatatype === PixelDatatype.HALF_FLOAT) {\n    switch (pixelFormat) {\n      case PixelFormat.RGBA:\n        return WebGLConstants.RGBA16F;\n      case PixelFormat.RGB:\n        return WebGLConstants.RGB16F;\n      case PixelFormat.RG:\n        return WebGLConstants.RG16F;\n      case PixelFormat.RED:\n        return WebGLConstants.R16F;\n    }\n  }\n\n  return pixelFormat;\n};\n\nexport default Object.freeze(PixelFormat);\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,8BAA8B;AACxD,OAAOC,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;AACA;AACA;EACEC,eAAe,EAAEF,cAAc,CAACE,eAAe;EAE/C;AACF;AACA;AACA;AACA;AACA;EACEC,aAAa,EAAEH,cAAc,CAACG,aAAa;EAE3C;AACF;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAEJ,cAAc,CAACI,KAAK;EAE3B;AACF;AACA;AACA;AACA;AACA;EACEC,GAAG,EAAEL,cAAc,CAACK,GAAG;EAEvB;AACF;AACA;AACA;AACA;AACA;EACEC,EAAE,EAAEN,cAAc,CAACM,EAAE;EAErB;AACF;AACA;AACA;AACA;AACA;EACEC,GAAG,EAAEP,cAAc,CAACO,GAAG;EAEvB;AACF;AACA;AACA;AACA;AACA;EACEC,IAAI,EAAER,cAAc,CAACQ,IAAI;EAEzB;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAET,cAAc,CAACS,SAAS;EAEnC;AACF;AACA;AACA;AACA;AACA;EACEC,eAAe,EAAEV,cAAc,CAACU,eAAe;EAE/C;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAEX,cAAc,CAACY,4BAA4B;EAErD;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAEb,cAAc,CAACc,6BAA6B;EAEvD;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAEf,cAAc,CAACgB,6BAA6B;EAEvD;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAEjB,cAAc,CAACkB,6BAA6B;EAEvD;AACF;AACA;AACA;AACA;AACA;EACEC,gBAAgB,EAAEnB,cAAc,CAACoB,+BAA+B;EAEhE;AACF;AACA;AACA;AACA;AACA;EACEC,gBAAgB,EAAErB,cAAc,CAACsB,+BAA+B;EAEhE;AACF;AACA;AACA;AACA;AACA;EACEC,iBAAiB,EAAEvB,cAAc,CAACwB,gCAAgC;EAElE;AACF;AACA;AACA;AACA;AACA;EACEC,iBAAi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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}