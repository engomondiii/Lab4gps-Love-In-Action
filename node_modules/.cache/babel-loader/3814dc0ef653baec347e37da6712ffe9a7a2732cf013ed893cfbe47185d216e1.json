{"ast":null,"code":"import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport Resource from \"../../Core/Resource.js\";\nimport PixelFormat from \"../../Core/PixelFormat.js\";\nimport PixelDatatype from \"../../Renderer/PixelDatatype.js\";\nimport Sampler from \"../../Renderer/Sampler.js\";\nimport TextureWrap from \"../../Renderer/TextureWrap.js\";\n\n/**\n * A simple struct that serves as a value of a <code>sampler2D</code>-valued\n * uniform. This is used with {@link CustomShader} and {@link TextureManager}\n *\n * @param {object} options An object with the following properties:\n * @param {Uint8Array} [options.typedArray] A typed array storing the contents of a texture. Values are stored in row-major order. Since WebGL uses a y-up convention for textures, rows are listed from bottom to top.\n * @param {number} [options.width] The width of the image. Required when options.typedArray is present\n * @param {number} [options.height] The height of the image. Required when options.typedArray is present.\n * @param {string|Resource} [options.url] A URL string or resource pointing to a texture image.\n * @param {boolean} [options.repeat=true] When defined, the texture sampler will be set to wrap in both directions\n * @param {PixelFormat} [options.pixelFormat=PixelFormat.RGBA] When options.typedArray is defined, this is used to determine the pixel format of the texture\n * @param {PixelDatatype} [options.pixelDatatype=PixelDatatype.UNSIGNED_BYTE] When options.typedArray is defined, this is the data type of pixel values in the typed array.\n * @param {TextureMinificationFilter} [options.minificationFilter=TextureMinificationFilter.LINEAR] The minification filter of the texture sampler.\n * @param {TextureMagnificationFilter} [options.magnificationFilter=TextureMagnificationFilter.LINEAR] The magnification filter of the texture sampler.\n * @param {number} [options.maximumAnisotropy=1.0] The maximum anisotropy of the texture sampler\n *\n * @alias TextureUniform\n * @constructor\n *\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction TextureUniform(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  //>>includeStart('debug', pragmas.debug);\n  const hasTypedArray = defined(options.typedArray);\n  const hasUrl = defined(options.url);\n  if (hasTypedArray === hasUrl) {\n    throw new DeveloperError(\"exactly one of options.typedArray, options.url must be defined\");\n  }\n  if (hasTypedArray && (!defined(options.width) || !defined(options.height))) {\n    throw new DeveloperError(\"options.width and options.height are required when options.typedArray is defined\");\n  }\n  //>>includeEnd('debug');\n\n  this.typedArray = options.typedArray;\n  this.width = options.width;\n  this.height = options.height;\n  this.pixelFormat = defaultValue(options.pixelFormat, PixelFormat.RGBA);\n  this.pixelDatatype = defaultValue(options.pixelDatatype, PixelDatatype.UNSIGNED_BYTE);\n  let resource = options.url;\n  if (typeof resource === \"string\") {\n    resource = Resource.createIfNeeded(resource);\n  }\n  this.resource = resource;\n  const repeat = defaultValue(options.repeat, true);\n  const wrap = repeat ? TextureWrap.REPEAT : TextureWrap.CLAMP_TO_EDGE;\n  this.sampler = new Sampler({\n    wrapS: wrap,\n    wrapT: wrap,\n    minificationFilter: options.minificationFilter,\n    magnificationFilter: options.magnificationFilter,\n    maximumAnisotropy: options.maximumAnisotropy\n  });\n}\nexport default TextureUniform;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","Resource","PixelFormat","PixelDatatype","Sampler","TextureWrap","TextureUniform","options","EMPTY_OBJECT","hasTypedArray","typedArray","hasUrl","url","width","height","pixelFormat","RGBA","pixelDatatype","UNSIGNED_BYTE","resource","createIfNeeded","repeat","wrap","REPEAT","CLAMP_TO_EDGE","sampler","wrapS","wrapT","minificationFilter","magnificationFilter","maximumAnisotropy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/TextureUniform.js"],"sourcesContent":["import defaultValue from \"../../Core/defaultValue.js\";\nimport defined from \"../../Core/defined.js\";\nimport DeveloperError from \"../../Core/DeveloperError.js\";\nimport Resource from \"../../Core/Resource.js\";\nimport PixelFormat from \"../../Core/PixelFormat.js\";\nimport PixelDatatype from \"../../Renderer/PixelDatatype.js\";\nimport Sampler from \"../../Renderer/Sampler.js\";\nimport TextureWrap from \"../../Renderer/TextureWrap.js\";\n\n/**\n * A simple struct that serves as a value of a <code>sampler2D</code>-valued\n * uniform. This is used with {@link CustomShader} and {@link TextureManager}\n *\n * @param {object} options An object with the following properties:\n * @param {Uint8Array} [options.typedArray] A typed array storing the contents of a texture. Values are stored in row-major order. Since WebGL uses a y-up convention for textures, rows are listed from bottom to top.\n * @param {number} [options.width] The width of the image. Required when options.typedArray is present\n * @param {number} [options.height] The height of the image. Required when options.typedArray is present.\n * @param {string|Resource} [options.url] A URL string or resource pointing to a texture image.\n * @param {boolean} [options.repeat=true] When defined, the texture sampler will be set to wrap in both directions\n * @param {PixelFormat} [options.pixelFormat=PixelFormat.RGBA] When options.typedArray is defined, this is used to determine the pixel format of the texture\n * @param {PixelDatatype} [options.pixelDatatype=PixelDatatype.UNSIGNED_BYTE] When options.typedArray is defined, this is the data type of pixel values in the typed array.\n * @param {TextureMinificationFilter} [options.minificationFilter=TextureMinificationFilter.LINEAR] The minification filter of the texture sampler.\n * @param {TextureMagnificationFilter} [options.magnificationFilter=TextureMagnificationFilter.LINEAR] The magnification filter of the texture sampler.\n * @param {number} [options.maximumAnisotropy=1.0] The maximum anisotropy of the texture sampler\n *\n * @alias TextureUniform\n * @constructor\n *\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction TextureUniform(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  //>>includeStart('debug', pragmas.debug);\n  const hasTypedArray = defined(options.typedArray);\n  const hasUrl = defined(options.url);\n  if (hasTypedArray === hasUrl) {\n    throw new DeveloperError(\n      \"exactly one of options.typedArray, options.url must be defined\",\n    );\n  }\n  if (hasTypedArray && (!defined(options.width) || !defined(options.height))) {\n    throw new DeveloperError(\n      \"options.width and options.height are required when options.typedArray is defined\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  this.typedArray = options.typedArray;\n  this.width = options.width;\n  this.height = options.height;\n  this.pixelFormat = defaultValue(options.pixelFormat, PixelFormat.RGBA);\n  this.pixelDatatype = defaultValue(\n    options.pixelDatatype,\n    PixelDatatype.UNSIGNED_BYTE,\n  );\n\n  let resource = options.url;\n  if (typeof resource === \"string\") {\n    resource = Resource.createIfNeeded(resource);\n  }\n  this.resource = resource;\n\n  const repeat = defaultValue(options.repeat, true);\n  const wrap = repeat ? TextureWrap.REPEAT : TextureWrap.CLAMP_TO_EDGE;\n  this.sampler = new Sampler({\n    wrapS: wrap,\n    wrapT: wrap,\n    minificationFilter: options.minificationFilter,\n    magnificationFilter: options.magnificationFilter,\n    maximumAnisotropy: options.maximumAnisotropy,\n  });\n}\n\nexport default TextureUniform;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,4BAA4B;AACrD,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,WAAW,MAAM,+BAA+B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,OAAO,EAAE;EAC/BA,OAAO,GAAGT,YAAY,CAACS,OAAO,EAAET,YAAY,CAACU,YAAY,CAAC;EAC1D;EACA,MAAMC,aAAa,GAAGV,OAAO,CAACQ,OAAO,CAACG,UAAU,CAAC;EACjD,MAAMC,MAAM,GAAGZ,OAAO,CAACQ,OAAO,CAACK,GAAG,CAAC;EACnC,IAAIH,aAAa,KAAKE,MAAM,EAAE;IAC5B,MAAM,IAAIX,cAAc,CACtB,gEACF,CAAC;EACH;EACA,IAAIS,aAAa,KAAK,CAACV,OAAO,CAACQ,OAAO,CAACM,KAAK,CAAC,IAAI,CAACd,OAAO,CAACQ,OAAO,CAACO,MAAM,CAAC,CAAC,EAAE;IAC1E,MAAM,IAAId,cAAc,CACtB,kFACF,CAAC;EACH;EACA;;EAEA,IAAI,CAACU,UAAU,GAAGH,OAAO,CAACG,UAAU;EACpC,IAAI,CAACG,KAAK,GAAGN,OAAO,CAACM,KAAK;EAC1B,IAAI,CAACC,MAAM,GAAGP,OAAO,CAACO,MAAM;EAC5B,IAAI,CAACC,WAAW,GAAGjB,YAAY,CAACS,OAAO,CAACQ,WAAW,EAAEb,WAAW,CAACc,IAAI,CAAC;EACtE,IAAI,CAACC,aAAa,GAAGnB,YAAY,CAC/BS,OAAO,CAACU,aAAa,EACrBd,aAAa,CAACe,aAChB,CAAC;EAED,IAAIC,QAAQ,GAAGZ,OAAO,CAACK,GAAG;EAC1B,IAAI,OAAOO,QAAQ,KAAK,QAAQ,EAAE;IAChCA,QAAQ,GAAGlB,QAAQ,CAACmB,cAAc,CAACD,QAAQ,CAAC;EAC9C;EACA,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAExB,MAAME,MAAM,GAAGvB,YAAY,CAACS,OAAO,CAACc,MAAM,EAAE,IAAI,CAAC;EACjD,MAAMC,IAAI,GAAGD,MAAM,GAAGhB,WAAW,CAACkB,MAAM,GAAGlB,WAAW,CAACmB,aAAa;EACpE,IAAI,CAACC,OAAO,GAAG,IAAIrB,OAAO,CAAC;IACzBsB,KAAK,EAAEJ,IAAI;IACXK,KAAK,EAAEL,IAAI;IACXM,kBAAkB,EAAErB,OAAO,CAACqB,kBAAkB;IAC9CC,mBAAmB,EAAEtB,OAAO,CAACsB,mBAAmB;IAChDC,iBAAiB,EAAEvB,OAAO,CAACuB;EAC7B,CAAC,CAAC;AACJ;AAEA,eAAexB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}