{"ast":null,"code":"import CesiumMath from \"./Math.js\";\n\n/**\n * @private\n */\nconst CylinderGeometryLibrary = {};\n\n/**\n * @private\n */\nCylinderGeometryLibrary.computePositions = function (length, topRadius, bottomRadius, slices, fill) {\n  const topZ = length * 0.5;\n  const bottomZ = -topZ;\n  const twoSlice = slices + slices;\n  const size = fill ? 2 * twoSlice : twoSlice;\n  const positions = new Float64Array(size * 3);\n  let i;\n  let index = 0;\n  let tbIndex = 0;\n  const bottomOffset = fill ? twoSlice * 3 : 0;\n  const topOffset = fill ? (twoSlice + slices) * 3 : slices * 3;\n  for (i = 0; i < slices; i++) {\n    const angle = i / slices * CesiumMath.TWO_PI;\n    const x = Math.cos(angle);\n    const y = Math.sin(angle);\n    const bottomX = x * bottomRadius;\n    const bottomY = y * bottomRadius;\n    const topX = x * topRadius;\n    const topY = y * topRadius;\n    positions[tbIndex + bottomOffset] = bottomX;\n    positions[tbIndex + bottomOffset + 1] = bottomY;\n    positions[tbIndex + bottomOffset + 2] = bottomZ;\n    positions[tbIndex + topOffset] = topX;\n    positions[tbIndex + topOffset + 1] = topY;\n    positions[tbIndex + topOffset + 2] = topZ;\n    tbIndex += 3;\n    if (fill) {\n      positions[index++] = bottomX;\n      positions[index++] = bottomY;\n      positions[index++] = bottomZ;\n      positions[index++] = topX;\n      positions[index++] = topY;\n      positions[index++] = topZ;\n    }\n  }\n  return positions;\n};\nexport default CylinderGeometryLibrary;","map":{"version":3,"names":["CesiumMath","CylinderGeometryLibrary","computePositions","length","topRadius","bottomRadius","slices","fill","topZ","bottomZ","twoSlice","size","positions","Float64Array","i","index","tbIndex","bottomOffset","topOffset","angle","TWO_PI","x","Math","cos","y","sin","bottomX","bottomY","topX","topY"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/CylinderGeometryLibrary.js"],"sourcesContent":["import CesiumMath from \"./Math.js\";\n\n/**\n * @private\n */\nconst CylinderGeometryLibrary = {};\n\n/**\n * @private\n */\nCylinderGeometryLibrary.computePositions = function (\n  length,\n  topRadius,\n  bottomRadius,\n  slices,\n  fill,\n) {\n  const topZ = length * 0.5;\n  const bottomZ = -topZ;\n\n  const twoSlice = slices + slices;\n  const size = fill ? 2 * twoSlice : twoSlice;\n  const positions = new Float64Array(size * 3);\n  let i;\n  let index = 0;\n  let tbIndex = 0;\n  const bottomOffset = fill ? twoSlice * 3 : 0;\n  const topOffset = fill ? (twoSlice + slices) * 3 : slices * 3;\n\n  for (i = 0; i < slices; i++) {\n    const angle = (i / slices) * CesiumMath.TWO_PI;\n    const x = Math.cos(angle);\n    const y = Math.sin(angle);\n    const bottomX = x * bottomRadius;\n    const bottomY = y * bottomRadius;\n    const topX = x * topRadius;\n    const topY = y * topRadius;\n\n    positions[tbIndex + bottomOffset] = bottomX;\n    positions[tbIndex + bottomOffset + 1] = bottomY;\n    positions[tbIndex + bottomOffset + 2] = bottomZ;\n\n    positions[tbIndex + topOffset] = topX;\n    positions[tbIndex + topOffset + 1] = topY;\n    positions[tbIndex + topOffset + 2] = topZ;\n    tbIndex += 3;\n    if (fill) {\n      positions[index++] = bottomX;\n      positions[index++] = bottomY;\n      positions[index++] = bottomZ;\n      positions[index++] = topX;\n      positions[index++] = topY;\n      positions[index++] = topZ;\n    }\n  }\n\n  return positions;\n};\nexport default CylinderGeometryLibrary;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,WAAW;;AAElC;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG,CAAC,CAAC;;AAElC;AACA;AACA;AACAA,uBAAuB,CAACC,gBAAgB,GAAG,UACzCC,MAAM,EACNC,SAAS,EACTC,YAAY,EACZC,MAAM,EACNC,IAAI,EACJ;EACA,MAAMC,IAAI,GAAGL,MAAM,GAAG,GAAG;EACzB,MAAMM,OAAO,GAAG,CAACD,IAAI;EAErB,MAAME,QAAQ,GAAGJ,MAAM,GAAGA,MAAM;EAChC,MAAMK,IAAI,GAAGJ,IAAI,GAAG,CAAC,GAAGG,QAAQ,GAAGA,QAAQ;EAC3C,MAAME,SAAS,GAAG,IAAIC,YAAY,CAACF,IAAI,GAAG,CAAC,CAAC;EAC5C,IAAIG,CAAC;EACL,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,OAAO,GAAG,CAAC;EACf,MAAMC,YAAY,GAAGV,IAAI,GAAGG,QAAQ,GAAG,CAAC,GAAG,CAAC;EAC5C,MAAMQ,SAAS,GAAGX,IAAI,GAAG,CAACG,QAAQ,GAAGJ,MAAM,IAAI,CAAC,GAAGA,MAAM,GAAG,CAAC;EAE7D,KAAKQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,EAAEQ,CAAC,EAAE,EAAE;IAC3B,MAAMK,KAAK,GAAIL,CAAC,GAAGR,MAAM,GAAIN,UAAU,CAACoB,MAAM;IAC9C,MAAMC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACJ,KAAK,CAAC;IACzB,MAAMK,CAAC,GAAGF,IAAI,CAACG,GAAG,CAACN,KAAK,CAAC;IACzB,MAAMO,OAAO,GAAGL,CAAC,GAAGhB,YAAY;IAChC,MAAMsB,OAAO,GAAGH,CAAC,GAAGnB,YAAY;IAChC,MAAMuB,IAAI,GAAGP,CAAC,GAAGjB,SAAS;IAC1B,MAAMyB,IAAI,GAAGL,CAAC,GAAGpB,SAAS;IAE1BQ,SAAS,CAACI,OAAO,GAAGC,YAAY,CAAC,GAAGS,OAAO;IAC3Cd,SAAS,CAACI,OAAO,GAAGC,YAAY,GAAG,CAAC,CAAC,GAAGU,OAAO;IAC/Cf,SAAS,CAACI,OAAO,GAAGC,YAAY,GAAG,CAAC,CAAC,GAAGR,OAAO;IAE/CG,SAAS,CAACI,OAAO,GAAGE,SAAS,CAAC,GAAGU,IAAI;IACrChB,SAAS,CAACI,OAAO,GAAGE,SAAS,GAAG,CAAC,CAAC,GAAGW,IAAI;IACzCjB,SAAS,CAACI,OAAO,GAAGE,SAAS,GAAG,CAAC,CAAC,GAAGV,IAAI;IACzCQ,OAAO,IAAI,CAAC;IACZ,IAAIT,IAAI,EAAE;MACRK,SAAS,CAACG,KAAK,EAAE,CAAC,GAAGW,OAAO;MAC5Bd,SAAS,CAACG,KAAK,EAAE,CAAC,GAAGY,OAAO;MAC5Bf,SAAS,CAACG,KAAK,EAAE,CAAC,GAAGN,OAAO;MAC5BG,SAAS,CAACG,KAAK,EAAE,CAAC,GAAGa,IAAI;MACzBhB,SAAS,CAACG,KAAK,EAAE,CAAC,GAAGc,IAAI;MACzBjB,SAAS,CAACG,KAAK,EAAE,CAAC,GAAGP,IAAI;IAC3B;EACF;EAEA,OAAOI,SAAS;AAClB,CAAC;AACD,eAAeX,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}