{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport MetadataEntity from \"./MetadataEntity.js\";\n\n/**\n * Metadata about a 3D Tile. This represents the tile metadata JSON (3D Tiles 1.1)\n * or the <code>3DTILES_metadata</code> extension on a single {@link Cesium3DTile}\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.tile Either the tile metadata JSON (3D Tiles 1.1), or the extension JSON attached to the tile.\n * @param {MetadataClass} options.class The class that the tile metadata conforms to.\n *\n * @alias TileMetadata\n * @constructor\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction TileMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const tile = options.tile;\n  const metadataClass = options.class;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.tile\", tile);\n  Check.typeOf.object(\"options.class\", metadataClass);\n  //>>includeEnd('debug');\n\n  this._class = metadataClass;\n  this._properties = tile.properties;\n  this._extensions = tile.extensions;\n  this._extras = tile.extras;\n}\nObject.defineProperties(TileMetadata.prototype, {\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof TileMetadata.prototype\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof TileMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof TileMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\n\n/**\n * Returns whether the tile has this property.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {boolean} Whether the tile has this property.\n * @private\n */\nTileMetadata.prototype.hasProperty = function (propertyId) {\n  return MetadataEntity.hasProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Returns whether the tile has a property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {boolean} Whether the tile has a property with the given semantic.\n * @private\n */\nTileMetadata.prototype.hasPropertyBySemantic = function (semantic) {\n  return MetadataEntity.hasPropertyBySemantic(semantic, this._properties, this._class);\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The property IDs.\n * @private\n */\nTileMetadata.prototype.getPropertyIds = function (results) {\n  return MetadataEntity.getPropertyIds(this._properties, this._class, results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n * <p>\n * If the property is normalized the normalized value is returned.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this property.\n * @private\n */\nTileMetadata.prototype.getProperty = function (propertyId) {\n  return MetadataEntity.getProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Sets the value of the property with the given ID.\n * <p>\n * If the property is normalized a normalized value must be provided to this function.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nTileMetadata.prototype.setProperty = function (propertyId, value) {\n  return MetadataEntity.setProperty(propertyId, value, this._properties, this._class);\n};\n\n/**\n * Returns a copy of the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this semantic.\n * @private\n */\nTileMetadata.prototype.getPropertyBySemantic = function (semantic) {\n  return MetadataEntity.getPropertyBySemantic(semantic, this._properties, this._class);\n};\n\n/**\n * Sets the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nTileMetadata.prototype.setPropertyBySemantic = function (semantic, value) {\n  return MetadataEntity.setPropertyBySemantic(semantic, value, this._properties, this._class);\n};\nexport default TileMetadata;","map":{"version":3,"names":["Check","defaultValue","MetadataEntity","TileMetadata","options","EMPTY_OBJECT","tile","metadataClass","class","typeOf","object","_class","_properties","properties","_extensions","extensions","_extras","extras","Object","defineProperties","prototype","get","hasProperty","propertyId","hasPropertyBySemantic","semantic","getPropertyIds","results","getProperty","setProperty","value","getPropertyBySemantic","setPropertyBySemantic"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/TileMetadata.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport MetadataEntity from \"./MetadataEntity.js\";\n\n/**\n * Metadata about a 3D Tile. This represents the tile metadata JSON (3D Tiles 1.1)\n * or the <code>3DTILES_metadata</code> extension on a single {@link Cesium3DTile}\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.tile Either the tile metadata JSON (3D Tiles 1.1), or the extension JSON attached to the tile.\n * @param {MetadataClass} options.class The class that the tile metadata conforms to.\n *\n * @alias TileMetadata\n * @constructor\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction TileMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const tile = options.tile;\n  const metadataClass = options.class;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.tile\", tile);\n  Check.typeOf.object(\"options.class\", metadataClass);\n  //>>includeEnd('debug');\n\n  this._class = metadataClass;\n  this._properties = tile.properties;\n  this._extensions = tile.extensions;\n  this._extras = tile.extras;\n}\n\nObject.defineProperties(TileMetadata.prototype, {\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof TileMetadata.prototype\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof TileMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof TileMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\n/**\n * Returns whether the tile has this property.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {boolean} Whether the tile has this property.\n * @private\n */\nTileMetadata.prototype.hasProperty = function (propertyId) {\n  return MetadataEntity.hasProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Returns whether the tile has a property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {boolean} Whether the tile has a property with the given semantic.\n * @private\n */\nTileMetadata.prototype.hasPropertyBySemantic = function (semantic) {\n  return MetadataEntity.hasPropertyBySemantic(\n    semantic,\n    this._properties,\n    this._class,\n  );\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The property IDs.\n * @private\n */\nTileMetadata.prototype.getPropertyIds = function (results) {\n  return MetadataEntity.getPropertyIds(this._properties, this._class, results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n * <p>\n * If the property is normalized the normalized value is returned.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this property.\n * @private\n */\nTileMetadata.prototype.getProperty = function (propertyId) {\n  return MetadataEntity.getProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Sets the value of the property with the given ID.\n * <p>\n * If the property is normalized a normalized value must be provided to this function.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nTileMetadata.prototype.setProperty = function (propertyId, value) {\n  return MetadataEntity.setProperty(\n    propertyId,\n    value,\n    this._properties,\n    this._class,\n  );\n};\n\n/**\n * Returns a copy of the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this semantic.\n * @private\n */\nTileMetadata.prototype.getPropertyBySemantic = function (semantic) {\n  return MetadataEntity.getPropertyBySemantic(\n    semantic,\n    this._properties,\n    this._class,\n  );\n};\n\n/**\n * Sets the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nTileMetadata.prototype.setPropertyBySemantic = function (semantic, value) {\n  return MetadataEntity.setPropertyBySemantic(\n    semantic,\n    value,\n    this._properties,\n    this._class,\n  );\n};\n\nexport default TileMetadata;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}