{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport loadKTX2 from \"../Core/loadKTX2.js\";\nimport Resource from \"../Core/Resource.js\";\n\n/**\n * @typedef {HTMLImageElement|HTMLCanvasElement|ImageBitmap} ImageryTypes\n *\n * The format in which {@link ImageryProvider} methods return an image may\n * vary by provider, configuration, or server settings.  Most common are\n * <code>HTMLImageElement</code>, <code>HTMLCanvasElement</code>, or on supported\n * browsers, <code>ImageBitmap</code>.\n *\n * See the documentation for each ImageryProvider class for more information about how they return images.\n */\n\n/**\n * Provides imagery to be displayed on the surface of an ellipsoid.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias ImageryProvider\n * @constructor\n * @abstract\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see OpenStreetMapImageryProvider\n * @see TileMapServiceImageryProvider\n * @see GoogleEarthEnterpriseImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see GridImageryProvider\n * @see IonImageryProvider\n * @see MapboxImageryProvider\n * @see MapboxStyleImageryProvider\n * @see SingleTileImageryProvider\n * @see TileCoordinatesImageryProvider\n * @see UrlTemplateImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers.html|Cesium Sandcastle Imagery Layers Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers%20Manipulation.html|Cesium Sandcastle Imagery Manipulation Demo}\n */\nfunction ImageryProvider() {\n  DeveloperError.throwInstantiationError();\n}\nObject.defineProperties(ImageryProvider.prototype, {\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.\n   * @memberof ImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof ImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof ImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof ImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested.  Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof ImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the tiling scheme used by the provider.\n   * @memberof ImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof ImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof ImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof ImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof ImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} Returns a promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n * @function\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {Promise<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n */\nImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  DeveloperError.throwInstantiationError();\n};\nconst ktx2Regex = /\\.ktx2$/i;\n\n/**\n * Loads an image from a given URL.  If the server referenced by the URL already has\n * too many requests pending, this function will instead return undefined, indicating\n * that the request should be retried later.\n *\n * @param {ImageryProvider} imageryProvider The imagery provider for the URL.\n * @param {Resource|string} url The URL of the image.\n * @returns {Promise<ImageryTypes|CompressedTextureBuffer>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nImageryProvider.loadImage = function (imageryProvider, url) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(url);\n  if (ktx2Regex.test(resource.url)) {\n    // Resolves with `CompressedTextureBuffer`\n    return loadKTX2(resource);\n  } else if (defined(imageryProvider) && defined(imageryProvider.tileDiscardPolicy)) {\n    // Resolves with `HTMLImageElement` or `ImageBitmap`\n    return resource.fetchImage({\n      preferBlob: true,\n      preferImageBitmap: true,\n      flipY: true\n    });\n  }\n  return resource.fetchImage({\n    preferImageBitmap: true,\n    flipY: true\n  });\n};\nexport default ImageryProvider;","map":{"version":3,"names":["Check","defined","DeveloperError","loadKTX2","Resource","ImageryProvider","throwInstantiationError","Object","defineProperties","prototype","rectangle","get","tileWidth","tileHeight","maximumLevel","minimumLevel","tilingScheme","tileDiscardPolicy","errorEvent","credit","proxy","hasAlphaChannel","getTileCredits","x","y","level","requestImage","request","pickFeatures","longitude","latitude","ktx2Regex","loadImage","imageryProvider","url","resource","createIfNeeded","test","fetchImage","preferBlob","preferImageBitmap","flipY"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ImageryProvider.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport loadKTX2 from \"../Core/loadKTX2.js\";\nimport Resource from \"../Core/Resource.js\";\n\n/**\n * @typedef {HTMLImageElement|HTMLCanvasElement|ImageBitmap} ImageryTypes\n *\n * The format in which {@link ImageryProvider} methods return an image may\n * vary by provider, configuration, or server settings.  Most common are\n * <code>HTMLImageElement</code>, <code>HTMLCanvasElement</code>, or on supported\n * browsers, <code>ImageBitmap</code>.\n *\n * See the documentation for each ImageryProvider class for more information about how they return images.\n */\n\n/**\n * Provides imagery to be displayed on the surface of an ellipsoid.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias ImageryProvider\n * @constructor\n * @abstract\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see OpenStreetMapImageryProvider\n * @see TileMapServiceImageryProvider\n * @see GoogleEarthEnterpriseImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see GridImageryProvider\n * @see IonImageryProvider\n * @see MapboxImageryProvider\n * @see MapboxStyleImageryProvider\n * @see SingleTileImageryProvider\n * @see TileCoordinatesImageryProvider\n * @see UrlTemplateImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers.html|Cesium Sandcastle Imagery Layers Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers%20Manipulation.html|Cesium Sandcastle Imagery Manipulation Demo}\n */\nfunction ImageryProvider() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(ImageryProvider.prototype, {\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.\n   * @memberof ImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof ImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof ImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof ImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof ImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.\n   * @memberof ImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof ImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof ImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof ImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof ImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} Returns a promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n * @function\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {Promise<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n */\nImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  DeveloperError.throwInstantiationError();\n};\n\nconst ktx2Regex = /\\.ktx2$/i;\n\n/**\n * Loads an image from a given URL.  If the server referenced by the URL already has\n * too many requests pending, this function will instead return undefined, indicating\n * that the request should be retried later.\n *\n * @param {ImageryProvider} imageryProvider The imagery provider for the URL.\n * @param {Resource|string} url The URL of the image.\n * @returns {Promise<ImageryTypes|CompressedTextureBuffer>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nImageryProvider.loadImage = function (imageryProvider, url) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(url);\n\n  if (ktx2Regex.test(resource.url)) {\n    // Resolves with `CompressedTextureBuffer`\n    return loadKTX2(resource);\n  } else if (\n    defined(imageryProvider) &&\n    defined(imageryProvider.tileDiscardPolicy)\n  ) {\n    // Resolves with `HTMLImageElement` or `ImageBitmap`\n    return resource.fetchImage({\n      preferBlob: true,\n      preferImageBitmap: true,\n      flipY: true,\n    });\n  }\n\n  return resource.fetchImage({\n    preferImageBitmap: true,\n    flipY: true,\n  });\n};\nexport default ImageryProvider;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,QAAQ,MAAM,qBAAqB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAAA,EAAG;EACzBH,cAAc,CAACI,uBAAuB,CAAC,CAAC;AAC1C;AAEAC,MAAM,CAACC,gBAAgB,CAACH,eAAe,CAACI,SAAS,EAAE;EACjD;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE;IACTC,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEM,SAAS,EAAE;IACTD,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEO,UAAU,EAAE;IACVF,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEQ,YAAY,EAAE;IACZH,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,YAAY,EAAE;IACZJ,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEU,YAAY,EAAE;IACZL,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEW,iBAAiB,EAAE;IACjBN,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEY,UAAU,EAAE;IACVP,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEa,MAAM,EAAE;IACNR,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEc,KAAK,EAAE;IACLT,GAAG,EAAET,cAAc,CAACI;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEe,eAAe,EAAE;IACfV,GAAG,EAAET,cAAc,CAACI;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,eAAe,CAACI,SAAS,CAACa,cAAc,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAE;EAChEvB,cAAc,CAACI,uBAAuB,CAAC,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,eAAe,CAACI,SAAS,CAACiB,YAAY,GAAG,UAAUH,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEE,OAAO,EAAE;EACvEzB,cAAc,CAACI,uBAAuB,CAAC,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,eAAe,CAACI,SAAS,CAACmB,YAAY,GAAG,UACvCL,CAAC,EACDC,CAAC,EACDC,KAAK,EACLI,SAAS,EACTC,QAAQ,EACR;EACA5B,cAAc,CAACI,uBAAuB,CAAC,CAAC;AAC1C,CAAC;AAED,MAAMyB,SAAS,GAAG,UAAU;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1B,eAAe,CAAC2B,SAAS,GAAG,UAAUC,eAAe,EAAEC,GAAG,EAAE;EAC1D;EACAlC,KAAK,CAACC,OAAO,CAAC,KAAK,EAAEiC,GAAG,CAAC;EACzB;;EAEA,MAAMC,QAAQ,GAAG/B,QAAQ,CAACgC,cAAc,CAACF,GAAG,CAAC;EAE7C,IAAIH,SAAS,CAACM,IAAI,CAACF,QAAQ,CAACD,GAAG,CAAC,EAAE;IAChC;IACA,OAAO/B,QAAQ,CAACgC,QAAQ,CAAC;EAC3B,CAAC,MAAM,IACLlC,OAAO,CAACgC,eAAe,CAAC,IACxBhC,OAAO,CAACgC,eAAe,CAAChB,iBAAiB,CAAC,EAC1C;IACA;IACA,OAAOkB,QAAQ,CAACG,UAAU,CAAC;MACzBC,UAAU,EAAE,IAAI;MAChBC,iBAAiB,EAAE,IAAI;MACvBC,KAAK,EAAE;IACT,CAAC,CAAC;EACJ;EAEA,OAAON,QAAQ,CAACG,UAAU,CAAC;IACzBE,iBAAiB,EAAE,IAAI;IACvBC,KAAK,EAAE;EACT,CAAC,CAAC;AACJ,CAAC;AACD,eAAepC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}