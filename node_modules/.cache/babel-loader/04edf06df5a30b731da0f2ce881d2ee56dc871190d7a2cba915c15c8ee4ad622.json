{"ast":null,"code":"import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Contains functions for checking that supplied arguments are of a specified type\n * or meet specified conditions\n */\nconst Check = {};\n\n/**\n * Contains type checking functions, all using the typeof operator\n */\nCheck.typeOf = {};\nfunction getUndefinedErrorMessage(name) {\n  return `${name} is required, actual value was undefined`;\n}\nfunction getFailedTypeErrorMessage(actual, expected, name) {\n  return `Expected ${name} to be typeof ${expected}, actual typeof was ${actual}`;\n}\n\n/**\n * Throws if test is not defined\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value that is to be checked\n * @exception {DeveloperError} test must be defined\n */\nCheck.defined = function (name, test) {\n  if (!defined(test)) {\n    throw new DeveloperError(getUndefinedErrorMessage(name));\n  }\n};\n\n/**\n * Throws if test is not typeof 'function'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'function'\n */\nCheck.typeOf.func = function (name, test) {\n  if (typeof test !== \"function\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"function\", name));\n  }\n};\n\n/**\n * Throws if test is not typeof 'string'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'string'\n */\nCheck.typeOf.string = function (name, test) {\n  if (typeof test !== \"string\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"string\", name));\n  }\n};\n\n/**\n * Throws if test is not typeof 'number'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'number'\n */\nCheck.typeOf.number = function (name, test) {\n  if (typeof test !== \"number\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"number\", name));\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and less than limit\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than limit\n */\nCheck.typeOf.number.lessThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test >= limit) {\n    throw new DeveloperError(`Expected ${name} to be less than ${limit}, actual value was ${test}`);\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and less than or equal to limit\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\n */\nCheck.typeOf.number.lessThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test > limit) {\n    throw new DeveloperError(`Expected ${name} to be less than or equal to ${limit}, actual value was ${test}`);\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and greater than limit\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than limit\n */\nCheck.typeOf.number.greaterThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test <= limit) {\n    throw new DeveloperError(`Expected ${name} to be greater than ${limit}, actual value was ${test}`);\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and greater than or equal to limit\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\n */\nCheck.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test < limit) {\n    throw new DeveloperError(`Expected ${name} to be greater than or equal to ${limit}, actual value was ${test}`);\n  }\n};\n\n/**\n * Throws if test is not typeof 'object'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'object'\n */\nCheck.typeOf.object = function (name, test) {\n  if (typeof test !== \"object\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"object\", name));\n  }\n};\n\n/**\n * Throws if test is not typeof 'boolean'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'boolean'\n */\nCheck.typeOf.bool = function (name, test) {\n  if (typeof test !== \"boolean\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"boolean\", name));\n  }\n};\n\n/**\n * Throws if test is not typeof 'bigint'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'bigint'\n */\nCheck.typeOf.bigint = function (name, test) {\n  if (typeof test !== \"bigint\") {\n    throw new DeveloperError(getFailedTypeErrorMessage(typeof test, \"bigint\", name));\n  }\n};\n\n/**\n * Throws if test1 and test2 is not typeof 'number' and not equal in value\n *\n * @param {string} name1 The name of the first variable being tested\n * @param {string} name2 The name of the second variable being tested against\n * @param {*} test1 The value to test\n * @param {*} test2 The value to test against\n * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\n */\nCheck.typeOf.number.equals = function (name1, name2, test1, test2) {\n  Check.typeOf.number(name1, test1);\n  Check.typeOf.number(name2, test2);\n  if (test1 !== test2) {\n    throw new DeveloperError(`${name1} must be equal to ${name2}, the actual values are ${test1} and ${test2}`);\n  }\n};\nexport default Check;","map":{"version":3,"names":["defined","DeveloperError","Check","typeOf","getUndefinedErrorMessage","name","getFailedTypeErrorMessage","actual","expected","test","func","string","number","lessThan","limit","lessThanOrEquals","greaterThan","greaterThanOrEquals","object","bool","bigint","equals","name1","name2","test1","test2"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/Check.js"],"sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Contains functions for checking that supplied arguments are of a specified type\n * or meet specified conditions\n */\nconst Check = {};\n\n/**\n * Contains type checking functions, all using the typeof operator\n */\nCheck.typeOf = {};\n\nfunction getUndefinedErrorMessage(name) {\n  return `${name} is required, actual value was undefined`;\n}\n\nfunction getFailedTypeErrorMessage(actual, expected, name) {\n  return `Expected ${name} to be typeof ${expected}, actual typeof was ${actual}`;\n}\n\n/**\n * Throws if test is not defined\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value that is to be checked\n * @exception {DeveloperError} test must be defined\n */\nCheck.defined = function (name, test) {\n  if (!defined(test)) {\n    throw new DeveloperError(getUndefinedErrorMessage(name));\n  }\n};\n\n/**\n * Throws if test is not typeof 'function'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'function'\n */\nCheck.typeOf.func = function (name, test) {\n  if (typeof test !== \"function\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"function\", name),\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'string'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'string'\n */\nCheck.typeOf.string = function (name, test) {\n  if (typeof test !== \"string\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"string\", name),\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'number'\n */\nCheck.typeOf.number = function (name, test) {\n  if (typeof test !== \"number\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"number\", name),\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and less than limit\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than limit\n */\nCheck.typeOf.number.lessThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test >= limit) {\n    throw new DeveloperError(\n      `Expected ${name} to be less than ${limit}, actual value was ${test}`,\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and less than or equal to limit\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\n */\nCheck.typeOf.number.lessThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test > limit) {\n    throw new DeveloperError(\n      `Expected ${name} to be less than or equal to ${limit}, actual value was ${test}`,\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and greater than limit\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than limit\n */\nCheck.typeOf.number.greaterThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test <= limit) {\n    throw new DeveloperError(\n      `Expected ${name} to be greater than ${limit}, actual value was ${test}`,\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and greater than or equal to limit\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\n */\nCheck.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test < limit) {\n    throw new DeveloperError(\n      `Expected ${name} to be greater than or equal to ${limit}, actual value was ${test}`,\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'object'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'object'\n */\nCheck.typeOf.object = function (name, test) {\n  if (typeof test !== \"object\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"object\", name),\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'boolean'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'boolean'\n */\nCheck.typeOf.bool = function (name, test) {\n  if (typeof test !== \"boolean\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"boolean\", name),\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'bigint'\n *\n * @param {string} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'bigint'\n */\nCheck.typeOf.bigint = function (name, test) {\n  if (typeof test !== \"bigint\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"bigint\", name),\n    );\n  }\n};\n\n/**\n * Throws if test1 and test2 is not typeof 'number' and not equal in value\n *\n * @param {string} name1 The name of the first variable being tested\n * @param {string} name2 The name of the second variable being tested against\n * @param {*} test1 The value to test\n * @param {*} test2 The value to test against\n * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\n */\nCheck.typeOf.number.equals = function (name1, name2, test1, test2) {\n  Check.typeOf.number(name1, test1);\n  Check.typeOf.number(name2, test2);\n  if (test1 !== test2) {\n    throw new DeveloperError(\n      `${name1} must be equal to ${name2}, the actual values are ${test1} and ${test2}`,\n    );\n  }\n};\nexport default Check;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}