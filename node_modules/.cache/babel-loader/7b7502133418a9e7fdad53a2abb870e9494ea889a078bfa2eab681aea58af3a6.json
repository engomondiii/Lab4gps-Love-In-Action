{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport PositionProperty from \"./PositionProperty.js\";\n\n/**\n * A {@link PositionProperty} whose value is lazily evaluated by a callback function.\n *\n * @alias CallbackPositionProperty\n * @constructor\n *\n * @param {CallbackPositionProperty.Callback} callback The function to be called when the position property is evaluated.\n * @param {boolean} isConstant <code>true</code> when the callback function returns the same value every time, <code>false</code> if the value will change.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Callback%20Position%20Property.html|Cesium Sandcastle Callback Position Property Demo}\n */\nfunction CallbackPositionProperty(callback, isConstant, referenceFrame) {\n  this._callback = undefined;\n  this._isConstant = undefined;\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n  this._definitionChanged = new Event();\n  this.setCallback(callback, isConstant);\n}\nObject.defineProperties(CallbackPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof CallbackPositionProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._isConstant;\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof CallbackPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof CallbackPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    }\n  }\n});\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCallbackPositionProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Sets the callback to be used.\n *\n * @param {CallbackPositionProperty.Callback} callback The function to be called when the property is evaluated.\n * @param {boolean} isConstant <code>true</code> when the callback function returns the same value every time, <code>false</code> if the value will change.\n */\nCallbackPositionProperty.prototype.setCallback = function (callback, isConstant) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(callback)) {\n    throw new DeveloperError(\"callback is required.\");\n  }\n  if (!defined(isConstant)) {\n    throw new DeveloperError(\"isConstant is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const changed = this._callback !== callback || this._isConstant !== isConstant;\n  this._callback = callback;\n  this._isConstant = isConstant;\n  if (changed) {\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCallbackPositionProperty.prototype.getValueInReferenceFrame = function (time, referenceFrame, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const value = this._callback(time, result);\n  return PositionProperty.convertToReferenceFrame(time, value, this._referenceFrame, referenceFrame, result);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCallbackPositionProperty.prototype.equals = function (other) {\n  return this === other || other instanceof CallbackPositionProperty && this._callback === other._callback && this._isConstant === other._isConstant && this._referenceFrame === other._referenceFrame;\n};\n\n/**\n * A function that returns the value of the position property.\n * @callback CallbackPositionProperty.Callback\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Cartesian3} [result] The object to store the value into. If omitted, the function must create and return a new instance.\n * @returns {Cartesian3 | undefined} The modified result parameter, or a new instance if the result parameter was not supplied or is unsupported.\n */\nexport default CallbackPositionProperty;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","Event","JulianDate","ReferenceFrame","PositionProperty","CallbackPositionProperty","callback","isConstant","referenceFrame","_callback","undefined","_isConstant","_referenceFrame","FIXED","_definitionChanged","setCallback","Object","defineProperties","prototype","get","definitionChanged","timeScratch","getValue","time","result","now","getValueInReferenceFrame","changed","raiseEvent","value","convertToReferenceFrame","equals","other"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/CallbackPositionProperty.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport PositionProperty from \"./PositionProperty.js\";\n\n/**\n * A {@link PositionProperty} whose value is lazily evaluated by a callback function.\n *\n * @alias CallbackPositionProperty\n * @constructor\n *\n * @param {CallbackPositionProperty.Callback} callback The function to be called when the position property is evaluated.\n * @param {boolean} isConstant <code>true</code> when the callback function returns the same value every time, <code>false</code> if the value will change.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Callback%20Position%20Property.html|Cesium Sandcastle Callback Position Property Demo}\n */\nfunction CallbackPositionProperty(callback, isConstant, referenceFrame) {\n  this._callback = undefined;\n  this._isConstant = undefined;\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n  this._definitionChanged = new Event();\n  this.setCallback(callback, isConstant);\n}\n\nObject.defineProperties(CallbackPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof CallbackPositionProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._isConstant;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof CallbackPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof CallbackPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n  },\n});\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCallbackPositionProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Sets the callback to be used.\n *\n * @param {CallbackPositionProperty.Callback} callback The function to be called when the property is evaluated.\n * @param {boolean} isConstant <code>true</code> when the callback function returns the same value every time, <code>false</code> if the value will change.\n */\nCallbackPositionProperty.prototype.setCallback = function (\n  callback,\n  isConstant,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(callback)) {\n    throw new DeveloperError(\"callback is required.\");\n  }\n  if (!defined(isConstant)) {\n    throw new DeveloperError(\"isConstant is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const changed =\n    this._callback !== callback || this._isConstant !== isConstant;\n\n  this._callback = callback;\n  this._isConstant = isConstant;\n\n  if (changed) {\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCallbackPositionProperty.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const value = this._callback(time, result);\n\n  return PositionProperty.convertToReferenceFrame(\n    time,\n    value,\n    this._referenceFrame,\n    referenceFrame,\n    result,\n  );\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCallbackPositionProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof CallbackPositionProperty &&\n      this._callback === other._callback &&\n      this._isConstant === other._isConstant &&\n      this._referenceFrame === other._referenceFrame)\n  );\n};\n\n/**\n * A function that returns the value of the position property.\n * @callback CallbackPositionProperty.Callback\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Cartesian3} [result] The object to store the value into. If omitted, the function must create and return a new instance.\n * @returns {Cartesian3 | undefined} The modified result parameter, or a new instance if the result parameter was not supplied or is unsupported.\n */\nexport default CallbackPositionProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}