{"ast":null,"code":"import Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TaskProcessor from \"../Core/TaskProcessor.js\";\n\n/**\n * Decode I3S using web workers.\n *\n * @private\n */\nfunction I3SDecoder() {}\n\n// Maximum concurrency to use when decoding draco models\nI3SDecoder._maxDecodingConcurrency = Math.max(FeatureDetection.hardwareConcurrency - 1, 1);\nI3SDecoder._decodeTaskProcessor = new TaskProcessor(\"decodeI3S\", I3SDecoder._maxDecodingConcurrency);\nI3SDecoder._promise = undefined;\nasync function initializeDecoder() {\n  const result = await I3SDecoder._decodeTaskProcessor.initWebAssemblyModule({\n    wasmBinaryFile: \"ThirdParty/draco_decoder.wasm\"\n  });\n  if (result) {\n    return I3SDecoder._decodeTaskProcessor;\n  }\n  throw new RuntimeError(\"I3S decoder could not be initialized.\");\n}\n\n/**\n * Transcodes I3S to glTF in a web worker\n * @param {String} url custom attributes source URL\n * @param {Object} defaultGeometrySchema Schema to use during decoding\n * @param {I3SGeometry} geometryData The draco encoded geometry data\n * @param {Array} [featureData] The draco encoded feature data\n * @param {Object} [symbologyData] The rendering symbology to apply\n * @returns Promise<undefined|object> Returns a promise which resolves to the glTF result, or undefined if the task cannot be scheduled this frame.\n *\n * @exception {RuntimeError} I3S decoder could not be initialized.\n */\nI3SDecoder.decode = async function (url, defaultGeometrySchema, geometryData, featureData, symbologyData) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"url\", url);\n  Check.defined(\"defaultGeometrySchema\", defaultGeometrySchema);\n  Check.defined(\"geometryData\", geometryData);\n  //>>includeEnd('debug');\n\n  if (!defined(I3SDecoder._promise)) {\n    I3SDecoder._promise = initializeDecoder();\n  }\n  return I3SDecoder._promise.then(function (taskProcessor) {\n    // Prepare the data to send to the worker\n    const parentData = geometryData._parent._data;\n    const parentRotationInverseMatrix = geometryData._parent._inverseRotationMatrix;\n    let longitude = 0.0;\n    let latitude = 0.0;\n    let height = 0.0;\n    if (defined(parentData.obb)) {\n      longitude = parentData.obb.center[0];\n      latitude = parentData.obb.center[1];\n      height = parentData.obb.center[2];\n    } else if (defined(parentData.mbs)) {\n      longitude = parentData.mbs[0];\n      latitude = parentData.mbs[1];\n      height = parentData.mbs[2];\n    }\n    const axisFlipRotation = Matrix3.fromRotationX(-CesiumMath.PI_OVER_TWO);\n    const parentRotation = new Matrix3();\n    Matrix3.multiply(axisFlipRotation, parentRotationInverseMatrix, parentRotation);\n    const cartographicCenter = Cartographic.fromDegrees(longitude, latitude, height);\n    const cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(cartographicCenter);\n    const payload = {\n      binaryData: geometryData._data,\n      featureData: defined(featureData) && defined(featureData[0]) ? featureData[0].data : undefined,\n      schema: defaultGeometrySchema,\n      bufferInfo: geometryData._geometryBufferInfo,\n      ellipsoidRadiiSquare: Ellipsoid.WGS84.radiiSquared,\n      url: url,\n      geoidDataList: geometryData._dataProvider._geoidDataList,\n      cartographicCenter: cartographicCenter,\n      cartesianCenter: cartesianCenter,\n      parentRotation: parentRotation,\n      enableFeatures: geometryData._dataProvider.showFeatures,\n      splitGeometryByColorTransparency: geometryData._dataProvider.adjustMaterialAlphaMode,\n      symbologyData: symbologyData,\n      calculateNormals: geometryData._dataProvider.calculateNormals\n    };\n    return taskProcessor.scheduleTask(payload);\n  });\n};\nexport default I3SDecoder;","map":{"version":3,"names":["Cartographic","Check","defined","Ellipsoid","FeatureDetection","CesiumMath","Matrix3","RuntimeError","TaskProcessor","I3SDecoder","_maxDecodingConcurrency","Math","max","hardwareConcurrency","_decodeTaskProcessor","_promise","undefined","initializeDecoder","result","initWebAssemblyModule","wasmBinaryFile","decode","url","defaultGeometrySchema","geometryData","featureData","symbologyData","typeOf","string","then","taskProcessor","parentData","_parent","_data","parentRotationInverseMatrix","_inverseRotationMatrix","longitude","latitude","height","obb","center","mbs","axisFlipRotation","fromRotationX","PI_OVER_TWO","parentRotation","multiply","cartographicCenter","fromDegrees","cartesianCenter","WGS84","cartographicToCartesian","payload","binaryData","data","schema","bufferInfo","_geometryBufferInfo","ellipsoidRadiiSquare","radiiSquared","geoidDataList","_dataProvider","_geoidDataList","enableFeatures","showFeatures","splitGeometryByColorTransparency","adjustMaterialAlphaMode","calculateNormals","scheduleTask"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/I3SDecoder.js"],"sourcesContent":["import Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TaskProcessor from \"../Core/TaskProcessor.js\";\n\n/**\n * Decode I3S using web workers.\n *\n * @private\n */\nfunction I3SDecoder() {}\n\n// Maximum concurrency to use when decoding draco models\nI3SDecoder._maxDecodingConcurrency = Math.max(\n  FeatureDetection.hardwareConcurrency - 1,\n  1,\n);\n\nI3SDecoder._decodeTaskProcessor = new TaskProcessor(\n  \"decodeI3S\",\n  I3SDecoder._maxDecodingConcurrency,\n);\n\nI3SDecoder._promise = undefined;\n\nasync function initializeDecoder() {\n  const result = await I3SDecoder._decodeTaskProcessor.initWebAssemblyModule({\n    wasmBinaryFile: \"ThirdParty/draco_decoder.wasm\",\n  });\n  if (result) {\n    return I3SDecoder._decodeTaskProcessor;\n  }\n\n  throw new RuntimeError(\"I3S decoder could not be initialized.\");\n}\n\n/**\n * Transcodes I3S to glTF in a web worker\n * @param {String} url custom attributes source URL\n * @param {Object} defaultGeometrySchema Schema to use during decoding\n * @param {I3SGeometry} geometryData The draco encoded geometry data\n * @param {Array} [featureData] The draco encoded feature data\n * @param {Object} [symbologyData] The rendering symbology to apply\n * @returns Promise<undefined|object> Returns a promise which resolves to the glTF result, or undefined if the task cannot be scheduled this frame.\n *\n * @exception {RuntimeError} I3S decoder could not be initialized.\n */\nI3SDecoder.decode = async function (\n  url,\n  defaultGeometrySchema,\n  geometryData,\n  featureData,\n  symbologyData,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"url\", url);\n  Check.defined(\"defaultGeometrySchema\", defaultGeometrySchema);\n  Check.defined(\"geometryData\", geometryData);\n  //>>includeEnd('debug');\n\n  if (!defined(I3SDecoder._promise)) {\n    I3SDecoder._promise = initializeDecoder();\n  }\n\n  return I3SDecoder._promise.then(function (taskProcessor) {\n    // Prepare the data to send to the worker\n    const parentData = geometryData._parent._data;\n    const parentRotationInverseMatrix =\n      geometryData._parent._inverseRotationMatrix;\n\n    let longitude = 0.0;\n    let latitude = 0.0;\n    let height = 0.0;\n\n    if (defined(parentData.obb)) {\n      longitude = parentData.obb.center[0];\n      latitude = parentData.obb.center[1];\n      height = parentData.obb.center[2];\n    } else if (defined(parentData.mbs)) {\n      longitude = parentData.mbs[0];\n      latitude = parentData.mbs[1];\n      height = parentData.mbs[2];\n    }\n\n    const axisFlipRotation = Matrix3.fromRotationX(-CesiumMath.PI_OVER_TWO);\n    const parentRotation = new Matrix3();\n\n    Matrix3.multiply(\n      axisFlipRotation,\n      parentRotationInverseMatrix,\n      parentRotation,\n    );\n\n    const cartographicCenter = Cartographic.fromDegrees(\n      longitude,\n      latitude,\n      height,\n    );\n\n    const cartesianCenter =\n      Ellipsoid.WGS84.cartographicToCartesian(cartographicCenter);\n\n    const payload = {\n      binaryData: geometryData._data,\n      featureData:\n        defined(featureData) && defined(featureData[0])\n          ? featureData[0].data\n          : undefined,\n      schema: defaultGeometrySchema,\n      bufferInfo: geometryData._geometryBufferInfo,\n      ellipsoidRadiiSquare: Ellipsoid.WGS84.radiiSquared,\n      url: url,\n      geoidDataList: geometryData._dataProvider._geoidDataList,\n      cartographicCenter: cartographicCenter,\n      cartesianCenter: cartesianCenter,\n      parentRotation: parentRotation,\n      enableFeatures: geometryData._dataProvider.showFeatures,\n      splitGeometryByColorTransparency:\n        geometryData._dataProvider.adjustMaterialAlphaMode,\n      symbologyData: symbologyData,\n      calculateNormals: geometryData._dataProvider.calculateNormals,\n    };\n\n    return taskProcessor.scheduleTask(payload);\n  });\n};\n\nexport default I3SDecoder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}