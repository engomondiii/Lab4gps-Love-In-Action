{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractMatch } from './abstract-match';\n/**\n * @class Autolinker.match.Mention\n * @extends Autolinker.match.AbstractMatch\n *\n * Represents a Mention match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nvar MentionMatch = /** @class */function (_super) {\n  __extends(MentionMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n  function MentionMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @public\n     * @property {'mention'} type\n     *\n     * A string name for the type of match that this class represents. Can be\n     * used in a TypeScript discriminating union to type-narrow from the\n     * `Match` type.\n     */\n    _this.type = 'mention';\n    /**\n     * @cfg {String} serviceName\n     *\n     * The service to point mention matches to. See {@link Autolinker#mention}\n     * for available values.\n     */\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {String} mention (required)\n     *\n     * The Mention that was matched, without the '@' character.\n     */\n    _this.mention = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    _this.mention = cfg.mention;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of MentionMatch, returns 'mention'.\n   *\n   * @return {String}\n   */\n  MentionMatch.prototype.getType = function () {\n    return 'mention';\n  };\n  /**\n   * Returns the mention, without the '@' character.\n   *\n   * @return {String}\n   */\n  MentionMatch.prototype.getMention = function () {\n    return this.mention;\n  };\n  /**\n   * Returns the configured {@link #serviceName} to point the mention to.\n   * Ex: 'instagram', 'twitter', 'soundcloud'.\n   *\n   * @return {String}\n   */\n  MentionMatch.prototype.getServiceName = function () {\n    return this.serviceName;\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n  MentionMatch.prototype.getAnchorHref = function () {\n    switch (this.serviceName) {\n      case 'twitter':\n        return 'https://twitter.com/' + this.mention;\n      case 'instagram':\n        return 'https://instagram.com/' + this.mention;\n      case 'soundcloud':\n        return 'https://soundcloud.com/' + this.mention;\n      case 'tiktok':\n        return 'https://www.tiktok.com/@' + this.mention;\n      default:\n        // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n        throw new Error('Unknown service name to point mention to: ' + this.serviceName);\n    }\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n  MentionMatch.prototype.getAnchorText = function () {\n    return '@' + this.mention;\n  };\n  /**\n   * Returns the CSS class suffixes that should be used on a tag built with\n   * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n   * details.\n   *\n   * @return {String[]}\n   */\n  MentionMatch.prototype.getCssClassSuffixes = function () {\n    var cssClassSuffixes = _super.prototype.getCssClassSuffixes.call(this),\n      serviceName = this.getServiceName();\n    if (serviceName) {\n      cssClassSuffixes.push(serviceName);\n    }\n    return cssClassSuffixes;\n  };\n  return MentionMatch;\n}(AbstractMatch);\nexport { MentionMatch };","map":{"version":3,"names":["AbstractMatch","MentionMatch","_super","__extends","cfg","_this","call","type","serviceName","mention","prototype","getType","getMention","getServiceName","getAnchorHref","Error","getAnchorText","getCssClassSuffixes","cssClassSuffixes","push"],"sources":["../../../src/match/mention-match.ts"],"sourcesContent":[null],"mappings":";AACA,SAASA,aAAa,QAA6B,kBAAkB;AAErE;;;;;;;;AAQA,IAAAC,YAAA,0BAAAC,MAAA;EAAkCC,SAAA,CAAAF,YAAA,EAAAC,MAAA;EA0B9B;;;;;EAKA,SAAAD,aAAYG,GAAuB;IAAnC,IAAAC,KAAA,GACIH,MAAA,CAAAI,IAAA,OAAMF,GAAG,CAAC;IA/Bd;;;;;;;;IAQgBC,KAAA,CAAAE,IAAI,GAAc,SAAS;IAE3C;;;;;;IAMiBF,KAAA,CAAAG,WAAW,GAAmB,SAAS,CAAC,CAAC;IAE1D;;;;;IAKiBH,KAAA,CAAAI,OAAO,GAAW,EAAE,CAAC,CAAC;IAUnCJ,KAAI,CAACI,OAAO,GAAGL,GAAG,CAACK,OAAO;IAC1BJ,KAAI,CAACG,WAAW,GAAGJ,GAAG,CAACI,WAAW;;EACtC;EAEA;;;;;;EAMAP,YAAA,CAAAS,SAAA,CAAAC,OAAO,GAAP;IACI,OAAO,SAAS;EACpB,CAAC;EAED;;;;;EAKAV,YAAA,CAAAS,SAAA,CAAAE,UAAU,GAAV;IACI,OAAO,IAAI,CAACH,OAAO;EACvB,CAAC;EAED;;;;;;EAMAR,YAAA,CAAAS,SAAA,CAAAG,cAAc,GAAd;IACI,OAAO,IAAI,CAACL,WAAW;EAC3B,CAAC;EAED;;;;;EAKAP,YAAA,CAAAS,SAAA,CAAAI,aAAa,GAAb;IACI,QAAQ,IAAI,CAACN,WAAW;MACpB,KAAK,SAAS;QACV,OAAO,sBAAsB,GAAG,IAAI,CAACC,OAAO;MAChD,KAAK,WAAW;QACZ,OAAO,wBAAwB,GAAG,IAAI,CAACA,OAAO;MAClD,KAAK,YAAY;QACb,OAAO,yBAAyB,GAAG,IAAI,CAACA,OAAO;MACnD,KAAK,QAAQ;QACT,OAAO,0BAA0B,GAAG,IAAI,CAACA,OAAO;MAEpD;QACI;QACA,MAAM,IAAIM,KAAK,CAAC,4CAA4C,GAAG,IAAI,CAACP,WAAW,CAAC;;EAE5F,CAAC;EAED;;;;;EAKAP,YAAA,CAAAS,SAAA,CAAAM,aAAa,GAAb;IACI,OAAO,GAAG,GAAG,IAAI,CAACP,OAAO;EAC7B,CAAC;EAED;;;;;;;EAOAR,YAAA,CAAAS,SAAA,CAAAO,mBAAmB,GAAnB;IACI,IAAIC,gBAAgB,GAAGhB,MAAA,CAAAQ,SAAA,CAAMO,mBAAmB,CAAAX,IAAA,MAAE;MAC9CE,WAAW,GAAG,IAAI,CAACK,cAAc,EAAE;IAEvC,IAAIL,WAAW,EAAE;MACbU,gBAAgB,CAACC,IAAI,CAACX,WAAW,CAAC;;IAEtC,OAAOU,gBAAgB;EAC3B,CAAC;EACL,OAAAjB,YAAC;AAAD,CAAC,CAlHiCD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}