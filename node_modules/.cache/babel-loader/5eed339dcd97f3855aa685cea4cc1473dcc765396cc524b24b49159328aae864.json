{"ast":null,"code":"import createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\n\n/**\n * A collection of primitives.  This is most often used with {@link Scene#primitives},\n * but <code>PrimitiveCollection</code> is also a primitive itself so collections can\n * be added to collections forming a hierarchy.\n *\n * @alias PrimitiveCollection\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.show=true] Determines if the primitives in the collection will be shown.\n * @param {boolean} [options.destroyPrimitives=true] Determines if primitives in the collection are destroyed when they are removed.\n *\n * @example\n * const billboards = new Cesium.BillboardCollection();\n * const labels = new Cesium.LabelCollection();\n *\n * const collection = new Cesium.PrimitiveCollection();\n * collection.add(billboards);\n *\n * scene.primitives.add(collection);  // Add collection\n * scene.primitives.add(labels);      // Add regular primitive\n */\nfunction PrimitiveCollection(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._primitives = [];\n  this._guid = createGuid();\n  this._primitiveAdded = new Event();\n  this._primitiveRemoved = new Event();\n\n  // Used by the OrderedGroundPrimitiveCollection\n  this._zIndex = undefined;\n\n  /**\n   * Determines if primitives in this collection will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * Determines if primitives in the collection are destroyed when they are removed by\n   * {@link PrimitiveCollection#destroy} or  {@link PrimitiveCollection#remove} or implicitly\n   * by {@link PrimitiveCollection#removeAll}.\n   *\n   * @type {boolean}\n   * @default true\n   *\n   * @example\n   * // Example 1. Primitives are destroyed by default.\n   * const primitives = new Cesium.PrimitiveCollection();\n   * const labels = primitives.add(new Cesium.LabelCollection());\n   * primitives = primitives.destroy();\n   * const b = labels.isDestroyed(); // true\n   *\n   * @example\n   * // Example 2. Do not destroy primitives in a collection.\n   * const primitives = new Cesium.PrimitiveCollection();\n   * primitives.destroyPrimitives = false;\n   * const labels = primitives.add(new Cesium.LabelCollection());\n   * primitives = primitives.destroy();\n   * const b = labels.isDestroyed(); // false\n   * labels = labels.destroy();    // explicitly destroy\n   */\n  this.destroyPrimitives = defaultValue(options.destroyPrimitives, true);\n}\nObject.defineProperties(PrimitiveCollection.prototype, {\n  /**\n   * Gets the number of primitives in the collection.\n   *\n   * @memberof PrimitiveCollection.prototype\n   *\n   * @type {number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._primitives.length;\n    }\n  },\n  /**\n   * An event that is raised when a primitive is added to the collection.\n   * Event handlers are passed the primitive that was added.\n   * @memberof PrimitiveCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  primitiveAdded: {\n    get: function () {\n      return this._primitiveAdded;\n    }\n  },\n  /**\n   * An event that is raised when a primitive is removed from the collection.\n   * Event handlers are passed the primitive that was removed.\n   * <p>\n   * Note: Depending on the destroyPrimitives constructor option, the primitive may already be destroyed.\n   * </p>\n   * @memberof PrimitiveCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  primitiveRemoved: {\n    get: function () {\n      return this._primitiveRemoved;\n    }\n  }\n});\n\n/**\n * Adds a primitive to the collection.\n *\n * @param {object} primitive The primitive to add.\n * @param {number} [index] The index to add the layer at.  If omitted, the primitive will be added at the bottom of all existing primitives.\n * @returns {object} The primitive added to the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * const billboards = scene.primitives.add(new Cesium.BillboardCollection());\n */\nPrimitiveCollection.prototype.add = function (primitive, index) {\n  const hasIndex = defined(index);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(primitive)) {\n    throw new DeveloperError(\"primitive is required.\");\n  }\n  if (hasIndex) {\n    if (index < 0) {\n      throw new DeveloperError(\"index must be greater than or equal to zero.\");\n    } else if (index > this._primitives.length) {\n      throw new DeveloperError(\"index must be less than or equal to the number of primitives.\");\n    }\n  }\n  //>>includeEnd('debug');\n\n  const external = primitive._external = primitive._external || {};\n  const composites = external._composites = external._composites || {};\n  composites[this._guid] = {\n    collection: this\n  };\n  if (!hasIndex) {\n    this._primitives.push(primitive);\n  } else {\n    this._primitives.splice(index, 0, primitive);\n  }\n  this._primitiveAdded.raiseEvent(primitive);\n  return primitive;\n};\n\n/**\n * Removes a primitive from the collection.\n *\n * @param {object} [primitive] The primitive to remove.\n * @returns {boolean} <code>true</code> if the primitive was removed; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * const billboards = scene.primitives.add(new Cesium.BillboardCollection());\n * scene.primitives.remove(billboards);  // Returns true\n *\n * @see PrimitiveCollection#destroyPrimitives\n */\nPrimitiveCollection.prototype.remove = function (primitive) {\n  // PERFORMANCE_IDEA:  We can obviously make this a lot faster.\n  if (this.contains(primitive)) {\n    const index = this._primitives.indexOf(primitive);\n    if (index !== -1) {\n      this._primitives.splice(index, 1);\n      delete primitive._external._composites[this._guid];\n      if (this.destroyPrimitives) {\n        primitive.destroy();\n      }\n      this._primitiveRemoved.raiseEvent(primitive);\n      return true;\n    }\n    // else ... this is not possible, I swear.\n  }\n  return false;\n};\n\n/**\n * Removes and destroys a primitive, regardless of destroyPrimitives setting.\n * @private\n */\nPrimitiveCollection.prototype.removeAndDestroy = function (primitive) {\n  const removed = this.remove(primitive);\n  if (removed && !this.destroyPrimitives) {\n    primitive.destroy();\n  }\n  return removed;\n};\n\n/**\n * Removes all primitives in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#destroyPrimitives\n */\nPrimitiveCollection.prototype.removeAll = function () {\n  const primitives = this._primitives;\n  const length = primitives.length;\n  for (let i = 0; i < length; ++i) {\n    delete primitives[i]._external._composites[this._guid];\n    if (this.destroyPrimitives) {\n      primitives[i].destroy();\n    }\n    this._primitiveRemoved.raiseEvent(primitives[i]);\n  }\n  this._primitives = [];\n};\n\n/**\n * Determines if this collection contains a primitive.\n *\n * @param {object} [primitive] The primitive to check for.\n * @returns {boolean} <code>true</code> if the primitive is in the collection; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#get\n */\nPrimitiveCollection.prototype.contains = function (primitive) {\n  return !!(defined(primitive) && primitive._external && primitive._external._composites && primitive._external._composites[this._guid]);\n};\nfunction getPrimitiveIndex(compositePrimitive, primitive) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!compositePrimitive.contains(primitive)) {\n    throw new DeveloperError(\"primitive is not in this collection.\");\n  }\n  //>>includeEnd('debug');\n\n  return compositePrimitive._primitives.indexOf(primitive);\n}\n\n/**\n * Raises a primitive \"up one\" in the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive up one.\n *\n * @param {object} [primitive] The primitive to raise.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#raiseToTop\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#lowerToBottom\n */\nPrimitiveCollection.prototype.raise = function (primitive) {\n  if (defined(primitive)) {\n    const index = getPrimitiveIndex(this, primitive);\n    const primitives = this._primitives;\n    if (index !== primitives.length - 1) {\n      const p = primitives[index];\n      primitives[index] = primitives[index + 1];\n      primitives[index + 1] = p;\n    }\n  }\n};\n\n/**\n * Raises a primitive to the \"top\" of the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive to the top.\n *\n * @param {object} [primitive] The primitive to raise the top.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#lowerToBottom\n */\nPrimitiveCollection.prototype.raiseToTop = function (primitive) {\n  if (defined(primitive)) {\n    const index = getPrimitiveIndex(this, primitive);\n    const primitives = this._primitives;\n    if (index !== primitives.length - 1) {\n      // PERFORMANCE_IDEA:  Could be faster\n      primitives.splice(index, 1);\n      primitives.push(primitive);\n    }\n  }\n};\n\n/**\n * Lowers a primitive \"down one\" in the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive down one.\n *\n * @param {object} [primitive] The primitive to lower.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#lowerToBottom\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#raiseToTop\n */\nPrimitiveCollection.prototype.lower = function (primitive) {\n  if (defined(primitive)) {\n    const index = getPrimitiveIndex(this, primitive);\n    const primitives = this._primitives;\n    if (index !== 0) {\n      const p = primitives[index];\n      primitives[index] = primitives[index - 1];\n      primitives[index - 1] = p;\n    }\n  }\n};\n\n/**\n * Lowers a primitive to the \"bottom\" of the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive to the bottom.\n *\n * @param {object} [primitive] The primitive to lower to the bottom.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#raiseToTop\n */\nPrimitiveCollection.prototype.lowerToBottom = function (primitive) {\n  if (defined(primitive)) {\n    const index = getPrimitiveIndex(this, primitive);\n    const primitives = this._primitives;\n    if (index !== 0) {\n      // PERFORMANCE_IDEA:  Could be faster\n      primitives.splice(index, 1);\n      primitives.unshift(primitive);\n    }\n  }\n};\n\n/**\n * Returns the primitive in the collection at the specified index.\n *\n * @param {number} index The zero-based index of the primitive to return.\n * @returns {object} The primitive at the <code>index</code>.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Toggle the show property of every primitive in the collection.\n * const primitives = scene.primitives;\n * const length = primitives.length;\n * for (let i = 0; i < length; ++i) {\n *   const p = primitives.get(i);\n *   p.show = !p.show;\n * }\n *\n * @see PrimitiveCollection#length\n */\nPrimitiveCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index)) {\n    throw new DeveloperError(\"index is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._primitives[index];\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n  const primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (let i = 0; i < primitives.length; ++i) {\n    primitives[i].update(frameState);\n  }\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.prePassesUpdate = function (frameState) {\n  const primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (let i = 0; i < primitives.length; ++i) {\n    const primitive = primitives[i];\n    if (defined(primitive.prePassesUpdate)) {\n      primitive.prePassesUpdate(frameState);\n    }\n  }\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.updateForPass = function (frameState, passState) {\n  const primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (let i = 0; i < primitives.length; ++i) {\n    const primitive = primitives[i];\n    if (defined(primitive.updateForPass)) {\n      primitive.updateForPass(frameState, passState);\n    }\n  }\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.postPassesUpdate = function (frameState) {\n  const primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (let i = 0; i < primitives.length; ++i) {\n    const primitive = primitives[i];\n    if (defined(primitive.postPassesUpdate)) {\n      primitive.postPassesUpdate(frameState);\n    }\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see PrimitiveCollection#destroy\n */\nPrimitiveCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by each primitive in this collection.  Explicitly destroying this\n * collection allows for deterministic release of WebGL resources, instead of relying on the garbage\n * collector to destroy this collection.\n * <br /><br />\n * Since destroying a collection destroys all the contained primitives, only destroy a collection\n * when you are sure no other code is still using any of the contained primitives.\n * <br /><br />\n * Once this collection is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * primitives = primitives && primitives.destroy();\n *\n * @see PrimitiveCollection#isDestroyed\n */\nPrimitiveCollection.prototype.destroy = function () {\n  this.removeAll();\n  return destroyObject(this);\n};\nexport default PrimitiveCollection;","map":{"version":3,"names":["createGuid","defaultValue","defined","destroyObject","DeveloperError","Event","PrimitiveCollection","options","EMPTY_OBJECT","_primitives","_guid","_primitiveAdded","_primitiveRemoved","_zIndex","undefined","show","destroyPrimitives","Object","defineProperties","prototype","length","get","primitiveAdded","primitiveRemoved","add","primitive","index","hasIndex","external","_external","composites","_composites","collection","push","splice","raiseEvent","remove","contains","indexOf","destroy","removeAndDestroy","removed","removeAll","primitives","i","getPrimitiveIndex","compositePrimitive","raise","p","raiseToTop","lower","lowerToBottom","unshift","update","frameState","prePassesUpdate","updateForPass","passState","postPassesUpdate","isDestroyed"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/PrimitiveCollection.js"],"sourcesContent":["import createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\n\n/**\n * A collection of primitives.  This is most often used with {@link Scene#primitives},\n * but <code>PrimitiveCollection</code> is also a primitive itself so collections can\n * be added to collections forming a hierarchy.\n *\n * @alias PrimitiveCollection\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.show=true] Determines if the primitives in the collection will be shown.\n * @param {boolean} [options.destroyPrimitives=true] Determines if primitives in the collection are destroyed when they are removed.\n *\n * @example\n * const billboards = new Cesium.BillboardCollection();\n * const labels = new Cesium.LabelCollection();\n *\n * const collection = new Cesium.PrimitiveCollection();\n * collection.add(billboards);\n *\n * scene.primitives.add(collection);  // Add collection\n * scene.primitives.add(labels);      // Add regular primitive\n */\nfunction PrimitiveCollection(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._primitives = [];\n  this._guid = createGuid();\n  this._primitiveAdded = new Event();\n  this._primitiveRemoved = new Event();\n\n  // Used by the OrderedGroundPrimitiveCollection\n  this._zIndex = undefined;\n\n  /**\n   * Determines if primitives in this collection will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * Determines if primitives in the collection are destroyed when they are removed by\n   * {@link PrimitiveCollection#destroy} or  {@link PrimitiveCollection#remove} or implicitly\n   * by {@link PrimitiveCollection#removeAll}.\n   *\n   * @type {boolean}\n   * @default true\n   *\n   * @example\n   * // Example 1. Primitives are destroyed by default.\n   * const primitives = new Cesium.PrimitiveCollection();\n   * const labels = primitives.add(new Cesium.LabelCollection());\n   * primitives = primitives.destroy();\n   * const b = labels.isDestroyed(); // true\n   *\n   * @example\n   * // Example 2. Do not destroy primitives in a collection.\n   * const primitives = new Cesium.PrimitiveCollection();\n   * primitives.destroyPrimitives = false;\n   * const labels = primitives.add(new Cesium.LabelCollection());\n   * primitives = primitives.destroy();\n   * const b = labels.isDestroyed(); // false\n   * labels = labels.destroy();    // explicitly destroy\n   */\n  this.destroyPrimitives = defaultValue(options.destroyPrimitives, true);\n}\n\nObject.defineProperties(PrimitiveCollection.prototype, {\n  /**\n   * Gets the number of primitives in the collection.\n   *\n   * @memberof PrimitiveCollection.prototype\n   *\n   * @type {number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._primitives.length;\n    },\n  },\n\n  /**\n   * An event that is raised when a primitive is added to the collection.\n   * Event handlers are passed the primitive that was added.\n   * @memberof PrimitiveCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  primitiveAdded: {\n    get: function () {\n      return this._primitiveAdded;\n    },\n  },\n\n  /**\n   * An event that is raised when a primitive is removed from the collection.\n   * Event handlers are passed the primitive that was removed.\n   * <p>\n   * Note: Depending on the destroyPrimitives constructor option, the primitive may already be destroyed.\n   * </p>\n   * @memberof PrimitiveCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  primitiveRemoved: {\n    get: function () {\n      return this._primitiveRemoved;\n    },\n  },\n});\n\n/**\n * Adds a primitive to the collection.\n *\n * @param {object} primitive The primitive to add.\n * @param {number} [index] The index to add the layer at.  If omitted, the primitive will be added at the bottom of all existing primitives.\n * @returns {object} The primitive added to the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * const billboards = scene.primitives.add(new Cesium.BillboardCollection());\n */\nPrimitiveCollection.prototype.add = function (primitive, index) {\n  const hasIndex = defined(index);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(primitive)) {\n    throw new DeveloperError(\"primitive is required.\");\n  }\n  if (hasIndex) {\n    if (index < 0) {\n      throw new DeveloperError(\"index must be greater than or equal to zero.\");\n    } else if (index > this._primitives.length) {\n      throw new DeveloperError(\n        \"index must be less than or equal to the number of primitives.\",\n      );\n    }\n  }\n  //>>includeEnd('debug');\n\n  const external = (primitive._external = primitive._external || {});\n  const composites = (external._composites = external._composites || {});\n  composites[this._guid] = {\n    collection: this,\n  };\n\n  if (!hasIndex) {\n    this._primitives.push(primitive);\n  } else {\n    this._primitives.splice(index, 0, primitive);\n  }\n\n  this._primitiveAdded.raiseEvent(primitive);\n\n  return primitive;\n};\n\n/**\n * Removes a primitive from the collection.\n *\n * @param {object} [primitive] The primitive to remove.\n * @returns {boolean} <code>true</code> if the primitive was removed; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * const billboards = scene.primitives.add(new Cesium.BillboardCollection());\n * scene.primitives.remove(billboards);  // Returns true\n *\n * @see PrimitiveCollection#destroyPrimitives\n */\nPrimitiveCollection.prototype.remove = function (primitive) {\n  // PERFORMANCE_IDEA:  We can obviously make this a lot faster.\n  if (this.contains(primitive)) {\n    const index = this._primitives.indexOf(primitive);\n    if (index !== -1) {\n      this._primitives.splice(index, 1);\n\n      delete primitive._external._composites[this._guid];\n\n      if (this.destroyPrimitives) {\n        primitive.destroy();\n      }\n\n      this._primitiveRemoved.raiseEvent(primitive);\n\n      return true;\n    }\n    // else ... this is not possible, I swear.\n  }\n\n  return false;\n};\n\n/**\n * Removes and destroys a primitive, regardless of destroyPrimitives setting.\n * @private\n */\nPrimitiveCollection.prototype.removeAndDestroy = function (primitive) {\n  const removed = this.remove(primitive);\n  if (removed && !this.destroyPrimitives) {\n    primitive.destroy();\n  }\n  return removed;\n};\n\n/**\n * Removes all primitives in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#destroyPrimitives\n */\nPrimitiveCollection.prototype.removeAll = function () {\n  const primitives = this._primitives;\n  const length = primitives.length;\n  for (let i = 0; i < length; ++i) {\n    delete primitives[i]._external._composites[this._guid];\n\n    if (this.destroyPrimitives) {\n      primitives[i].destroy();\n    }\n\n    this._primitiveRemoved.raiseEvent(primitives[i]);\n  }\n  this._primitives = [];\n};\n\n/**\n * Determines if this collection contains a primitive.\n *\n * @param {object} [primitive] The primitive to check for.\n * @returns {boolean} <code>true</code> if the primitive is in the collection; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#get\n */\nPrimitiveCollection.prototype.contains = function (primitive) {\n  return !!(\n    defined(primitive) &&\n    primitive._external &&\n    primitive._external._composites &&\n    primitive._external._composites[this._guid]\n  );\n};\n\nfunction getPrimitiveIndex(compositePrimitive, primitive) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!compositePrimitive.contains(primitive)) {\n    throw new DeveloperError(\"primitive is not in this collection.\");\n  }\n  //>>includeEnd('debug');\n\n  return compositePrimitive._primitives.indexOf(primitive);\n}\n\n/**\n * Raises a primitive \"up one\" in the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive up one.\n *\n * @param {object} [primitive] The primitive to raise.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#raiseToTop\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#lowerToBottom\n */\nPrimitiveCollection.prototype.raise = function (primitive) {\n  if (defined(primitive)) {\n    const index = getPrimitiveIndex(this, primitive);\n    const primitives = this._primitives;\n\n    if (index !== primitives.length - 1) {\n      const p = primitives[index];\n      primitives[index] = primitives[index + 1];\n      primitives[index + 1] = p;\n    }\n  }\n};\n\n/**\n * Raises a primitive to the \"top\" of the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive to the top.\n *\n * @param {object} [primitive] The primitive to raise the top.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#lowerToBottom\n */\nPrimitiveCollection.prototype.raiseToTop = function (primitive) {\n  if (defined(primitive)) {\n    const index = getPrimitiveIndex(this, primitive);\n    const primitives = this._primitives;\n\n    if (index !== primitives.length - 1) {\n      // PERFORMANCE_IDEA:  Could be faster\n      primitives.splice(index, 1);\n      primitives.push(primitive);\n    }\n  }\n};\n\n/**\n * Lowers a primitive \"down one\" in the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive down one.\n *\n * @param {object} [primitive] The primitive to lower.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#lowerToBottom\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#raiseToTop\n */\nPrimitiveCollection.prototype.lower = function (primitive) {\n  if (defined(primitive)) {\n    const index = getPrimitiveIndex(this, primitive);\n    const primitives = this._primitives;\n\n    if (index !== 0) {\n      const p = primitives[index];\n      primitives[index] = primitives[index - 1];\n      primitives[index - 1] = p;\n    }\n  }\n};\n\n/**\n * Lowers a primitive to the \"bottom\" of the collection.  If all primitives in the collection are drawn\n * on the globe surface, this visually moves the primitive to the bottom.\n *\n * @param {object} [primitive] The primitive to lower to the bottom.\n *\n * @exception {DeveloperError} primitive is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PrimitiveCollection#lower\n * @see PrimitiveCollection#raise\n * @see PrimitiveCollection#raiseToTop\n */\nPrimitiveCollection.prototype.lowerToBottom = function (primitive) {\n  if (defined(primitive)) {\n    const index = getPrimitiveIndex(this, primitive);\n    const primitives = this._primitives;\n\n    if (index !== 0) {\n      // PERFORMANCE_IDEA:  Could be faster\n      primitives.splice(index, 1);\n      primitives.unshift(primitive);\n    }\n  }\n};\n\n/**\n * Returns the primitive in the collection at the specified index.\n *\n * @param {number} index The zero-based index of the primitive to return.\n * @returns {object} The primitive at the <code>index</code>.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Toggle the show property of every primitive in the collection.\n * const primitives = scene.primitives;\n * const length = primitives.length;\n * for (let i = 0; i < length; ++i) {\n *   const p = primitives.get(i);\n *   p.show = !p.show;\n * }\n *\n * @see PrimitiveCollection#length\n */\nPrimitiveCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index)) {\n    throw new DeveloperError(\"index is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._primitives[index];\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  const primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (let i = 0; i < primitives.length; ++i) {\n    primitives[i].update(frameState);\n  }\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.prePassesUpdate = function (frameState) {\n  const primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (let i = 0; i < primitives.length; ++i) {\n    const primitive = primitives[i];\n    if (defined(primitive.prePassesUpdate)) {\n      primitive.prePassesUpdate(frameState);\n    }\n  }\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.updateForPass = function (frameState, passState) {\n  const primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (let i = 0; i < primitives.length; ++i) {\n    const primitive = primitives[i];\n    if (defined(primitive.updateForPass)) {\n      primitive.updateForPass(frameState, passState);\n    }\n  }\n};\n\n/**\n * @private\n */\nPrimitiveCollection.prototype.postPassesUpdate = function (frameState) {\n  const primitives = this._primitives;\n  // Using primitives.length in the loop is a temporary workaround\n  // to allow quadtree updates to add and remove primitives in\n  // update().  This will be changed to manage added and removed lists.\n  for (let i = 0; i < primitives.length; ++i) {\n    const primitive = primitives[i];\n    if (defined(primitive.postPassesUpdate)) {\n      primitive.postPassesUpdate(frameState);\n    }\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see PrimitiveCollection#destroy\n */\nPrimitiveCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by each primitive in this collection.  Explicitly destroying this\n * collection allows for deterministic release of WebGL resources, instead of relying on the garbage\n * collector to destroy this collection.\n * <br /><br />\n * Since destroying a collection destroys all the contained primitives, only destroy a collection\n * when you are sure no other code is still using any of the contained primitives.\n * <br /><br />\n * Once this collection is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * primitives = primitives && primitives.destroy();\n *\n * @see PrimitiveCollection#isDestroyed\n */\nPrimitiveCollection.prototype.destroy = function () {\n  this.removeAll();\n  return destroyObject(this);\n};\nexport default PrimitiveCollection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}