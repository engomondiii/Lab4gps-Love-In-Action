{"ast":null,"code":"import BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nimport Buffer from \"../Renderer/Buffer.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport ComputeCommand from \"../Renderer/ComputeCommand.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport VertexArray from \"../Renderer/VertexArray.js\";\nimport SunFS from \"../Shaders/SunFS.js\";\nimport SunTextureFS from \"../Shaders/SunTextureFS.js\";\nimport SunVS from \"../Shaders/SunVS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\n\n/**\n * Draws a sun billboard.\n * <p>This is only supported in 3D and Columbus view.</p>\n *\n * @alias Sun\n * @constructor\n *\n *\n * @example\n * scene.sun = new Cesium.Sun();\n *\n * @see Scene#sun\n */\nfunction Sun() {\n  /**\n   * Determines if the sun will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = true;\n  this._drawCommand = new DrawCommand({\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingVolume: new BoundingSphere(),\n    owner: this\n  });\n  this._commands = {\n    drawCommand: this._drawCommand,\n    computeCommand: undefined\n  };\n  this._boundingVolume = new BoundingSphere();\n  this._boundingVolume2D = new BoundingSphere();\n  this._texture = undefined;\n  this._drawingBufferWidth = undefined;\n  this._drawingBufferHeight = undefined;\n  this._radiusTS = undefined;\n  this._size = undefined;\n  this.glowFactor = 1.0;\n  this._glowFactorDirty = false;\n  this._useHdr = undefined;\n  const that = this;\n  this._uniformMap = {\n    u_texture: function () {\n      return that._texture;\n    },\n    u_size: function () {\n      return that._size;\n    }\n  };\n}\nObject.defineProperties(Sun.prototype, {\n  /**\n   * Gets or sets a number that controls how \"bright\" the Sun's lens flare appears\n   * to be.  Zero shows just the Sun's disc without any flare.\n   * Use larger values for a more pronounced flare around the Sun.\n   *\n   * @memberof Sun.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  glowFactor: {\n    get: function () {\n      return this._glowFactor;\n    },\n    set: function (glowFactor) {\n      glowFactor = Math.max(glowFactor, 0.0);\n      this._glowFactor = glowFactor;\n      this._glowFactorDirty = true;\n    }\n  }\n});\nconst scratchPositionWC = new Cartesian2();\nconst scratchLimbWC = new Cartesian2();\nconst scratchPositionEC = new Cartesian4();\nconst scratchCartesian4 = new Cartesian4();\n\n/**\n * @private\n */\nSun.prototype.update = function (frameState, passState, useHdr) {\n  if (!this.show) {\n    return undefined;\n  }\n  const mode = frameState.mode;\n  if (mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n    return undefined;\n  }\n  if (!frameState.passes.render) {\n    return undefined;\n  }\n  const context = frameState.context;\n  const drawingBufferWidth = passState.viewport.width;\n  const drawingBufferHeight = passState.viewport.height;\n  if (!defined(this._texture) || drawingBufferWidth !== this._drawingBufferWidth || drawingBufferHeight !== this._drawingBufferHeight || this._glowFactorDirty || useHdr !== this._useHdr) {\n    this._texture = this._texture && this._texture.destroy();\n    this._drawingBufferWidth = drawingBufferWidth;\n    this._drawingBufferHeight = drawingBufferHeight;\n    this._glowFactorDirty = false;\n    this._useHdr = useHdr;\n    let size = Math.max(drawingBufferWidth, drawingBufferHeight);\n    size = Math.pow(2.0, Math.ceil(Math.log(size) / Math.log(2.0)) - 2.0);\n\n    // The size computed above can be less than 1.0 if size < 4.0. This will probably\n    // never happen in practice, but does in the tests. Clamp to 1.0 to prevent WebGL\n    // errors in the tests.\n    size = Math.max(1.0, size);\n    const pixelDatatype = useHdr ? context.halfFloatingPointTexture ? PixelDatatype.HALF_FLOAT : PixelDatatype.FLOAT : PixelDatatype.UNSIGNED_BYTE;\n    this._texture = new Texture({\n      context: context,\n      width: size,\n      height: size,\n      pixelFormat: PixelFormat.RGBA,\n      pixelDatatype: pixelDatatype\n    });\n    this._glowLengthTS = this._glowFactor * 5.0;\n    this._radiusTS = 1.0 / (1.0 + 2.0 * this._glowLengthTS) * 0.5;\n    const that = this;\n    const uniformMap = {\n      u_radiusTS: function () {\n        return that._radiusTS;\n      }\n    };\n    this._commands.computeCommand = new ComputeCommand({\n      fragmentShaderSource: SunTextureFS,\n      outputTexture: this._texture,\n      uniformMap: uniformMap,\n      persists: false,\n      owner: this,\n      postExecute: function () {\n        that._commands.computeCommand = undefined;\n      }\n    });\n  }\n  const drawCommand = this._drawCommand;\n  if (!defined(drawCommand.vertexArray)) {\n    const attributeLocations = {\n      direction: 0\n    };\n    const directions = new Uint8Array(4 * 2);\n    directions[0] = 0;\n    directions[1] = 0;\n    directions[2] = 255;\n    directions[3] = 0.0;\n    directions[4] = 255;\n    directions[5] = 255;\n    directions[6] = 0.0;\n    directions[7] = 255;\n    const vertexBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: directions,\n      usage: BufferUsage.STATIC_DRAW\n    });\n    const attributes = [{\n      index: attributeLocations.direction,\n      vertexBuffer: vertexBuffer,\n      componentsPerAttribute: 2,\n      normalize: true,\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE\n    }];\n    // Workaround Internet Explorer 11.0.8 lack of TRIANGLE_FAN\n    const indexBuffer = Buffer.createIndexBuffer({\n      context: context,\n      typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),\n      usage: BufferUsage.STATIC_DRAW,\n      indexDatatype: IndexDatatype.UNSIGNED_SHORT\n    });\n    drawCommand.vertexArray = new VertexArray({\n      context: context,\n      attributes: attributes,\n      indexBuffer: indexBuffer\n    });\n    drawCommand.shaderProgram = ShaderProgram.fromCache({\n      context: context,\n      vertexShaderSource: SunVS,\n      fragmentShaderSource: SunFS,\n      attributeLocations: attributeLocations\n    });\n    drawCommand.renderState = RenderState.fromCache({\n      blending: BlendingState.ALPHA_BLEND\n    });\n    drawCommand.uniformMap = this._uniformMap;\n  }\n  const sunPosition = context.uniformState.sunPositionWC;\n  const sunPositionCV = context.uniformState.sunPositionColumbusView;\n  const boundingVolume = this._boundingVolume;\n  const boundingVolume2D = this._boundingVolume2D;\n  Cartesian3.clone(sunPosition, boundingVolume.center);\n  boundingVolume2D.center.x = sunPositionCV.z;\n  boundingVolume2D.center.y = sunPositionCV.x;\n  boundingVolume2D.center.z = sunPositionCV.y;\n  boundingVolume.radius = CesiumMath.SOLAR_RADIUS + CesiumMath.SOLAR_RADIUS * this._glowLengthTS;\n  boundingVolume2D.radius = boundingVolume.radius;\n  if (mode === SceneMode.SCENE3D) {\n    BoundingSphere.clone(boundingVolume, drawCommand.boundingVolume);\n  } else if (mode === SceneMode.COLUMBUS_VIEW) {\n    BoundingSphere.clone(boundingVolume2D, drawCommand.boundingVolume);\n  }\n  const position = SceneTransforms.computeActualEllipsoidPosition(frameState, sunPosition, scratchCartesian4);\n  const dist = Cartesian3.magnitude(Cartesian3.subtract(position, frameState.camera.position, scratchCartesian4));\n  const projMatrix = context.uniformState.projection;\n  const positionEC = scratchPositionEC;\n  positionEC.x = 0;\n  positionEC.y = 0;\n  positionEC.z = -dist;\n  positionEC.w = 1;\n  const positionCC = Matrix4.multiplyByVector(projMatrix, positionEC, scratchCartesian4);\n  const positionWC = SceneTransforms.clipToGLWindowCoordinates(passState.viewport, positionCC, scratchPositionWC);\n  positionEC.x = CesiumMath.SOLAR_RADIUS;\n  const limbCC = Matrix4.multiplyByVector(projMatrix, positionEC, scratchCartesian4);\n  const limbWC = SceneTransforms.clipToGLWindowCoordinates(passState.viewport, limbCC, scratchLimbWC);\n  this._size = Cartesian2.magnitude(Cartesian2.subtract(limbWC, positionWC, scratchCartesian4));\n  this._size = 2.0 * this._size * (1.0 + 2.0 * this._glowLengthTS);\n  this._size = Math.ceil(this._size);\n  return this._commands;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Sun#destroy\n */\nSun.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * sun = sun && sun.destroy();\n *\n *  @see Sun#isDestroyed\n */\nSun.prototype.destroy = function () {\n  const command = this._drawCommand;\n  command.vertexArray = command.vertexArray && command.vertexArray.destroy();\n  command.shaderProgram = command.shaderProgram && command.shaderProgram.destroy();\n  this._texture = this._texture && this._texture.destroy();\n  return destroyObject(this);\n};\nexport default Sun;","map":{"version":3,"names":["BoundingSphere","Cartesian2","Cartesian3","Cartesian4","ComponentDatatype","defined","destroyObject","IndexDatatype","CesiumMath","Matrix4","PixelFormat","PrimitiveType","Buffer","BufferUsage","ComputeCommand","DrawCommand","PixelDatatype","RenderState","ShaderProgram","Texture","VertexArray","SunFS","SunTextureFS","SunVS","BlendingState","SceneMode","SceneTransforms","Sun","show","_drawCommand","primitiveType","TRIANGLES","boundingVolume","owner","_commands","drawCommand","computeCommand","undefined","_boundingVolume","_boundingVolume2D","_texture","_drawingBufferWidth","_drawingBufferHeight","_radiusTS","_size","glowFactor","_glowFactorDirty","_useHdr","that","_uniformMap","u_texture","u_size","Object","defineProperties","prototype","get","_glowFactor","set","Math","max","scratchPositionWC","scratchLimbWC","scratchPositionEC","scratchCartesian4","update","frameState","passState","useHdr","mode","SCENE2D","MORPHING","passes","render","context","drawingBufferWidth","viewport","width","drawingBufferHeight","height","destroy","size","pow","ceil","log","pixelDatatype","halfFloatingPointTexture","HALF_FLOAT","FLOAT","UNSIGNED_BYTE","pixelFormat","RGBA","_glowLengthTS","uniformMap","u_radiusTS","fragmentShaderSource","outputTexture","persists","postExecute","vertexArray","attributeLocations","direction","directions","Uint8Array","vertexBuffer","createVertexBuffer","typedArray","usage","STATIC_DRAW","attributes","index","componentsPerAttribute","normalize","componentDatatype","indexBuffer","createIndexBuffer","Uint16Array","indexDatatype","UNSIGNED_SHORT","shaderProgram","fromCache","vertexShaderSource","renderState","blending","ALPHA_BLEND","sunPosition","uniformState","sunPositionWC","sunPositionCV","sunPositionColumbusView","boundingVolume2D","clone","center","x","z","y","radius","SOLAR_RADIUS","SCENE3D","COLUMBUS_VIEW","position","computeActualEllipsoidPosition","dist","magnitude","subtract","camera","projMatrix","projection","positionEC","w","positionCC","multiplyByVector","positionWC","clipToGLWindowCoordinates","limbCC","limbWC","isDestroyed","command"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Sun.js"],"sourcesContent":["import BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nimport Buffer from \"../Renderer/Buffer.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport ComputeCommand from \"../Renderer/ComputeCommand.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport VertexArray from \"../Renderer/VertexArray.js\";\nimport SunFS from \"../Shaders/SunFS.js\";\nimport SunTextureFS from \"../Shaders/SunTextureFS.js\";\nimport SunVS from \"../Shaders/SunVS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\n\n/**\n * Draws a sun billboard.\n * <p>This is only supported in 3D and Columbus view.</p>\n *\n * @alias Sun\n * @constructor\n *\n *\n * @example\n * scene.sun = new Cesium.Sun();\n *\n * @see Scene#sun\n */\nfunction Sun() {\n  /**\n   * Determines if the sun will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = true;\n\n  this._drawCommand = new DrawCommand({\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingVolume: new BoundingSphere(),\n    owner: this,\n  });\n  this._commands = {\n    drawCommand: this._drawCommand,\n    computeCommand: undefined,\n  };\n  this._boundingVolume = new BoundingSphere();\n  this._boundingVolume2D = new BoundingSphere();\n\n  this._texture = undefined;\n  this._drawingBufferWidth = undefined;\n  this._drawingBufferHeight = undefined;\n  this._radiusTS = undefined;\n  this._size = undefined;\n\n  this.glowFactor = 1.0;\n  this._glowFactorDirty = false;\n\n  this._useHdr = undefined;\n\n  const that = this;\n  this._uniformMap = {\n    u_texture: function () {\n      return that._texture;\n    },\n    u_size: function () {\n      return that._size;\n    },\n  };\n}\n\nObject.defineProperties(Sun.prototype, {\n  /**\n   * Gets or sets a number that controls how \"bright\" the Sun's lens flare appears\n   * to be.  Zero shows just the Sun's disc without any flare.\n   * Use larger values for a more pronounced flare around the Sun.\n   *\n   * @memberof Sun.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  glowFactor: {\n    get: function () {\n      return this._glowFactor;\n    },\n    set: function (glowFactor) {\n      glowFactor = Math.max(glowFactor, 0.0);\n      this._glowFactor = glowFactor;\n      this._glowFactorDirty = true;\n    },\n  },\n});\n\nconst scratchPositionWC = new Cartesian2();\nconst scratchLimbWC = new Cartesian2();\nconst scratchPositionEC = new Cartesian4();\nconst scratchCartesian4 = new Cartesian4();\n\n/**\n * @private\n */\nSun.prototype.update = function (frameState, passState, useHdr) {\n  if (!this.show) {\n    return undefined;\n  }\n\n  const mode = frameState.mode;\n  if (mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n    return undefined;\n  }\n\n  if (!frameState.passes.render) {\n    return undefined;\n  }\n\n  const context = frameState.context;\n  const drawingBufferWidth = passState.viewport.width;\n  const drawingBufferHeight = passState.viewport.height;\n\n  if (\n    !defined(this._texture) ||\n    drawingBufferWidth !== this._drawingBufferWidth ||\n    drawingBufferHeight !== this._drawingBufferHeight ||\n    this._glowFactorDirty ||\n    useHdr !== this._useHdr\n  ) {\n    this._texture = this._texture && this._texture.destroy();\n    this._drawingBufferWidth = drawingBufferWidth;\n    this._drawingBufferHeight = drawingBufferHeight;\n    this._glowFactorDirty = false;\n    this._useHdr = useHdr;\n\n    let size = Math.max(drawingBufferWidth, drawingBufferHeight);\n    size = Math.pow(2.0, Math.ceil(Math.log(size) / Math.log(2.0)) - 2.0);\n\n    // The size computed above can be less than 1.0 if size < 4.0. This will probably\n    // never happen in practice, but does in the tests. Clamp to 1.0 to prevent WebGL\n    // errors in the tests.\n    size = Math.max(1.0, size);\n\n    const pixelDatatype = useHdr\n      ? context.halfFloatingPointTexture\n        ? PixelDatatype.HALF_FLOAT\n        : PixelDatatype.FLOAT\n      : PixelDatatype.UNSIGNED_BYTE;\n    this._texture = new Texture({\n      context: context,\n      width: size,\n      height: size,\n      pixelFormat: PixelFormat.RGBA,\n      pixelDatatype: pixelDatatype,\n    });\n\n    this._glowLengthTS = this._glowFactor * 5.0;\n    this._radiusTS = (1.0 / (1.0 + 2.0 * this._glowLengthTS)) * 0.5;\n\n    const that = this;\n    const uniformMap = {\n      u_radiusTS: function () {\n        return that._radiusTS;\n      },\n    };\n\n    this._commands.computeCommand = new ComputeCommand({\n      fragmentShaderSource: SunTextureFS,\n      outputTexture: this._texture,\n      uniformMap: uniformMap,\n      persists: false,\n      owner: this,\n      postExecute: function () {\n        that._commands.computeCommand = undefined;\n      },\n    });\n  }\n\n  const drawCommand = this._drawCommand;\n\n  if (!defined(drawCommand.vertexArray)) {\n    const attributeLocations = {\n      direction: 0,\n    };\n\n    const directions = new Uint8Array(4 * 2);\n    directions[0] = 0;\n    directions[1] = 0;\n\n    directions[2] = 255;\n    directions[3] = 0.0;\n\n    directions[4] = 255;\n    directions[5] = 255;\n\n    directions[6] = 0.0;\n    directions[7] = 255;\n\n    const vertexBuffer = Buffer.createVertexBuffer({\n      context: context,\n      typedArray: directions,\n      usage: BufferUsage.STATIC_DRAW,\n    });\n    const attributes = [\n      {\n        index: attributeLocations.direction,\n        vertexBuffer: vertexBuffer,\n        componentsPerAttribute: 2,\n        normalize: true,\n        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      },\n    ];\n    // Workaround Internet Explorer 11.0.8 lack of TRIANGLE_FAN\n    const indexBuffer = Buffer.createIndexBuffer({\n      context: context,\n      typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),\n      usage: BufferUsage.STATIC_DRAW,\n      indexDatatype: IndexDatatype.UNSIGNED_SHORT,\n    });\n    drawCommand.vertexArray = new VertexArray({\n      context: context,\n      attributes: attributes,\n      indexBuffer: indexBuffer,\n    });\n\n    drawCommand.shaderProgram = ShaderProgram.fromCache({\n      context: context,\n      vertexShaderSource: SunVS,\n      fragmentShaderSource: SunFS,\n      attributeLocations: attributeLocations,\n    });\n\n    drawCommand.renderState = RenderState.fromCache({\n      blending: BlendingState.ALPHA_BLEND,\n    });\n    drawCommand.uniformMap = this._uniformMap;\n  }\n\n  const sunPosition = context.uniformState.sunPositionWC;\n  const sunPositionCV = context.uniformState.sunPositionColumbusView;\n\n  const boundingVolume = this._boundingVolume;\n  const boundingVolume2D = this._boundingVolume2D;\n\n  Cartesian3.clone(sunPosition, boundingVolume.center);\n  boundingVolume2D.center.x = sunPositionCV.z;\n  boundingVolume2D.center.y = sunPositionCV.x;\n  boundingVolume2D.center.z = sunPositionCV.y;\n\n  boundingVolume.radius =\n    CesiumMath.SOLAR_RADIUS + CesiumMath.SOLAR_RADIUS * this._glowLengthTS;\n  boundingVolume2D.radius = boundingVolume.radius;\n\n  if (mode === SceneMode.SCENE3D) {\n    BoundingSphere.clone(boundingVolume, drawCommand.boundingVolume);\n  } else if (mode === SceneMode.COLUMBUS_VIEW) {\n    BoundingSphere.clone(boundingVolume2D, drawCommand.boundingVolume);\n  }\n\n  const position = SceneTransforms.computeActualEllipsoidPosition(\n    frameState,\n    sunPosition,\n    scratchCartesian4,\n  );\n\n  const dist = Cartesian3.magnitude(\n    Cartesian3.subtract(\n      position,\n      frameState.camera.position,\n      scratchCartesian4,\n    ),\n  );\n  const projMatrix = context.uniformState.projection;\n\n  const positionEC = scratchPositionEC;\n  positionEC.x = 0;\n  positionEC.y = 0;\n  positionEC.z = -dist;\n  positionEC.w = 1;\n\n  const positionCC = Matrix4.multiplyByVector(\n    projMatrix,\n    positionEC,\n    scratchCartesian4,\n  );\n  const positionWC = SceneTransforms.clipToGLWindowCoordinates(\n    passState.viewport,\n    positionCC,\n    scratchPositionWC,\n  );\n\n  positionEC.x = CesiumMath.SOLAR_RADIUS;\n  const limbCC = Matrix4.multiplyByVector(\n    projMatrix,\n    positionEC,\n    scratchCartesian4,\n  );\n  const limbWC = SceneTransforms.clipToGLWindowCoordinates(\n    passState.viewport,\n    limbCC,\n    scratchLimbWC,\n  );\n\n  this._size = Cartesian2.magnitude(\n    Cartesian2.subtract(limbWC, positionWC, scratchCartesian4),\n  );\n  this._size = 2.0 * this._size * (1.0 + 2.0 * this._glowLengthTS);\n  this._size = Math.ceil(this._size);\n\n  return this._commands;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Sun#destroy\n */\nSun.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * sun = sun && sun.destroy();\n *\n *  @see Sun#isDestroyed\n */\nSun.prototype.destroy = function () {\n  const command = this._drawCommand;\n  command.vertexArray = command.vertexArray && command.vertexArray.destroy();\n  command.shaderProgram =\n    command.shaderProgram && command.shaderProgram.destroy();\n\n  this._texture = this._texture && this._texture.destroy();\n\n  return destroyObject(this);\n};\nexport default Sun;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}