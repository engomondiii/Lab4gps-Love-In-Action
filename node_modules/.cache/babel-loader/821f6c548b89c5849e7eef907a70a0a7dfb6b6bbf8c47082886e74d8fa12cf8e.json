{"ast":null,"code":"import { defined, destroyObject, DeveloperError, EventHelper, OrthographicFrustum, SceneMode } from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link ProjectionPicker}.\n * @alias ProjectionPickerViewModel\n * @constructor\n *\n * @param {Scene} scene The Scene to switch projections.\n */\nfunction ProjectionPickerViewModel(scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n  this._orthographic = scene.camera.frustum instanceof OrthographicFrustum;\n  this._flightInProgress = false;\n\n  /**\n   * Gets or sets whether the button drop-down is currently visible.  This property is observable.\n   * @type {boolean}\n   * @default false\n   */\n  this.dropDownVisible = false;\n\n  /**\n   * Gets or sets the perspective projection tooltip.  This property is observable.\n   * @type {string}\n   * @default 'Perspective Projection'\n   */\n  this.tooltipPerspective = \"Perspective Projection\";\n\n  /**\n   * Gets or sets the orthographic projection tooltip.  This property is observable.\n   * @type {string}\n   * @default 'Orthographic Projection'\n   */\n  this.tooltipOrthographic = \"Orthographic Projection\";\n\n  /**\n   * Gets the currently active tooltip.  This property is observable.\n   * @type {string}\n   */\n  this.selectedTooltip = undefined;\n\n  /**\n   * Gets or sets the current SceneMode.  This property is observable.\n   * @type {SceneMode}\n   */\n  this.sceneMode = scene.mode;\n  knockout.track(this, [\"_orthographic\", \"_flightInProgress\", \"sceneMode\", \"dropDownVisible\", \"tooltipPerspective\", \"tooltipOrthographic\"]);\n  const that = this;\n  knockout.defineProperty(this, \"selectedTooltip\", function () {\n    if (that._orthographic) {\n      return that.tooltipOrthographic;\n    }\n    return that.tooltipPerspective;\n  });\n  this._toggleDropDown = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D || that._flightInProgress) {\n      return;\n    }\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(scene.morphComplete, function (transitioner, oldMode, newMode, isMorphing) {\n    that.sceneMode = newMode;\n    that._orthographic = newMode === SceneMode.SCENE2D || that._scene.camera.frustum instanceof OrthographicFrustum;\n  });\n  this._eventHelper.add(scene.preRender, function () {\n    that._flightInProgress = defined(scene.camera._currentFlight);\n  });\n  this._switchToPerspective = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D) {\n      return;\n    }\n    that._scene.camera.switchToPerspectiveFrustum();\n    that._orthographic = false;\n    that.dropDownVisible = false;\n  });\n  this._switchToOrthographic = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D) {\n      return;\n    }\n    that._scene.camera.switchToOrthographicFrustum();\n    that._orthographic = true;\n    that.dropDownVisible = false;\n  });\n\n  //Used by knockout\n  this._sceneMode = SceneMode;\n}\nObject.defineProperties(ProjectionPickerViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof ProjectionPickerViewModel.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    }\n  },\n  /**\n   * Gets the command to toggle the drop down box.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function () {\n      return this._toggleDropDown;\n    }\n  },\n  /**\n   * Gets the command to switch to a perspective projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  switchToPerspective: {\n    get: function () {\n      return this._switchToPerspective;\n    }\n  },\n  /**\n   * Gets the command to switch to orthographic projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  switchToOrthographic: {\n    get: function () {\n      return this._switchToOrthographic;\n    }\n  },\n  /**\n   * Gets whether the scene is currently using an orthographic projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  isOrthographicProjection: {\n    get: function () {\n      return this._orthographic;\n    }\n  }\n});\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nProjectionPickerViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.\n */\nProjectionPickerViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n  destroyObject(this);\n};\nexport default ProjectionPickerViewModel;","map":{"version":3,"names":["defined","destroyObject","DeveloperError","EventHelper","OrthographicFrustum","SceneMode","knockout","createCommand","ProjectionPickerViewModel","scene","_scene","_orthographic","camera","frustum","_flightInProgress","dropDownVisible","tooltipPerspective","tooltipOrthographic","selectedTooltip","undefined","sceneMode","mode","track","that","defineProperty","_toggleDropDown","SCENE2D","_eventHelper","add","morphComplete","transitioner","oldMode","newMode","isMorphing","preRender","_currentFlight","_switchToPerspective","switchToPerspectiveFrustum","_switchToOrthographic","switchToOrthographicFrustum","_sceneMode","Object","defineProperties","prototype","get","toggleDropDown","switchToPerspective","switchToOrthographic","isOrthographicProjection","isDestroyed","destroy","removeAll"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/ProjectionPicker/ProjectionPickerViewModel.js"],"sourcesContent":["import {\n  defined,\n  destroyObject,\n  DeveloperError,\n  EventHelper,\n  OrthographicFrustum,\n  SceneMode,\n} from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link ProjectionPicker}.\n * @alias ProjectionPickerViewModel\n * @constructor\n *\n * @param {Scene} scene The Scene to switch projections.\n */\nfunction ProjectionPickerViewModel(scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n  this._orthographic = scene.camera.frustum instanceof OrthographicFrustum;\n  this._flightInProgress = false;\n\n  /**\n   * Gets or sets whether the button drop-down is currently visible.  This property is observable.\n   * @type {boolean}\n   * @default false\n   */\n  this.dropDownVisible = false;\n\n  /**\n   * Gets or sets the perspective projection tooltip.  This property is observable.\n   * @type {string}\n   * @default 'Perspective Projection'\n   */\n  this.tooltipPerspective = \"Perspective Projection\";\n\n  /**\n   * Gets or sets the orthographic projection tooltip.  This property is observable.\n   * @type {string}\n   * @default 'Orthographic Projection'\n   */\n  this.tooltipOrthographic = \"Orthographic Projection\";\n\n  /**\n   * Gets the currently active tooltip.  This property is observable.\n   * @type {string}\n   */\n  this.selectedTooltip = undefined;\n\n  /**\n   * Gets or sets the current SceneMode.  This property is observable.\n   * @type {SceneMode}\n   */\n  this.sceneMode = scene.mode;\n\n  knockout.track(this, [\n    \"_orthographic\",\n    \"_flightInProgress\",\n    \"sceneMode\",\n    \"dropDownVisible\",\n    \"tooltipPerspective\",\n    \"tooltipOrthographic\",\n  ]);\n\n  const that = this;\n  knockout.defineProperty(this, \"selectedTooltip\", function () {\n    if (that._orthographic) {\n      return that.tooltipOrthographic;\n    }\n    return that.tooltipPerspective;\n  });\n\n  this._toggleDropDown = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D || that._flightInProgress) {\n      return;\n    }\n\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(\n    scene.morphComplete,\n    function (transitioner, oldMode, newMode, isMorphing) {\n      that.sceneMode = newMode;\n      that._orthographic =\n        newMode === SceneMode.SCENE2D ||\n        that._scene.camera.frustum instanceof OrthographicFrustum;\n    },\n  );\n  this._eventHelper.add(scene.preRender, function () {\n    that._flightInProgress = defined(scene.camera._currentFlight);\n  });\n\n  this._switchToPerspective = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D) {\n      return;\n    }\n\n    that._scene.camera.switchToPerspectiveFrustum();\n    that._orthographic = false;\n    that.dropDownVisible = false;\n  });\n\n  this._switchToOrthographic = createCommand(function () {\n    if (that.sceneMode === SceneMode.SCENE2D) {\n      return;\n    }\n\n    that._scene.camera.switchToOrthographicFrustum();\n    that._orthographic = true;\n    that.dropDownVisible = false;\n  });\n\n  //Used by knockout\n  this._sceneMode = SceneMode;\n}\n\nObject.defineProperties(ProjectionPickerViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof ProjectionPickerViewModel.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n\n  /**\n   * Gets the command to toggle the drop down box.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function () {\n      return this._toggleDropDown;\n    },\n  },\n\n  /**\n   * Gets the command to switch to a perspective projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  switchToPerspective: {\n    get: function () {\n      return this._switchToPerspective;\n    },\n  },\n\n  /**\n   * Gets the command to switch to orthographic projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  switchToOrthographic: {\n    get: function () {\n      return this._switchToOrthographic;\n    },\n  },\n\n  /**\n   * Gets whether the scene is currently using an orthographic projection.\n   * @memberof ProjectionPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  isOrthographicProjection: {\n    get: function () {\n      return this._orthographic;\n    },\n  },\n});\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nProjectionPickerViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.\n */\nProjectionPickerViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n  destroyObject(this);\n};\nexport default ProjectionPickerViewModel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}