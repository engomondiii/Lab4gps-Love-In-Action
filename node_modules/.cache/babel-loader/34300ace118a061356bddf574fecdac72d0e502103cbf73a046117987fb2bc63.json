{"ast":null,"code":"/**\n * Parses the result of XMLHttpRequest's getAllResponseHeaders() method into\n * a dictionary.\n *\n * @function parseResponseHeaders\n *\n * @param {string} headerString The header string returned by getAllResponseHeaders().  The format is\n *                 described here: http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n * @returns {object} A dictionary of key/value pairs, where each key is the name of a header and the corresponding value\n *                   is that header's value.\n *\n * @private\n */\nfunction parseResponseHeaders(headerString) {\n  const headers = {};\n  if (!headerString) {\n    return headers;\n  }\n  const headerPairs = headerString.split(\"\\u000d\\u000a\");\n  for (let i = 0; i < headerPairs.length; ++i) {\n    const headerPair = headerPairs[i];\n    // Can't use split() here because it does the wrong thing\n    // if the header value has the string \": \" in it.\n    const index = headerPair.indexOf(\"\\u003a\\u0020\");\n    if (index > 0) {\n      const key = headerPair.substring(0, index);\n      const val = headerPair.substring(index + 2);\n      headers[key] = val;\n    }\n  }\n  return headers;\n}\nexport default parseResponseHeaders;","map":{"version":3,"names":["parseResponseHeaders","headerString","headers","headerPairs","split","i","length","headerPair","index","indexOf","key","substring","val"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/parseResponseHeaders.js"],"sourcesContent":["/**\n * Parses the result of XMLHttpRequest's getAllResponseHeaders() method into\n * a dictionary.\n *\n * @function parseResponseHeaders\n *\n * @param {string} headerString The header string returned by getAllResponseHeaders().  The format is\n *                 described here: http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n * @returns {object} A dictionary of key/value pairs, where each key is the name of a header and the corresponding value\n *                   is that header's value.\n *\n * @private\n */\nfunction parseResponseHeaders(headerString) {\n  const headers = {};\n\n  if (!headerString) {\n    return headers;\n  }\n\n  const headerPairs = headerString.split(\"\\u000d\\u000a\");\n\n  for (let i = 0; i < headerPairs.length; ++i) {\n    const headerPair = headerPairs[i];\n    // Can't use split() here because it does the wrong thing\n    // if the header value has the string \": \" in it.\n    const index = headerPair.indexOf(\"\\u003a\\u0020\");\n    if (index > 0) {\n      const key = headerPair.substring(0, index);\n      const val = headerPair.substring(index + 2);\n      headers[key] = val;\n    }\n  }\n\n  return headers;\n}\nexport default parseResponseHeaders;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAoBA,CAACC,YAAY,EAAE;EAC1C,MAAMC,OAAO,GAAG,CAAC,CAAC;EAElB,IAAI,CAACD,YAAY,EAAE;IACjB,OAAOC,OAAO;EAChB;EAEA,MAAMC,WAAW,GAAGF,YAAY,CAACG,KAAK,CAAC,cAAc,CAAC;EAEtD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;IAC3C,MAAME,UAAU,GAAGJ,WAAW,CAACE,CAAC,CAAC;IACjC;IACA;IACA,MAAMG,KAAK,GAAGD,UAAU,CAACE,OAAO,CAAC,cAAc,CAAC;IAChD,IAAID,KAAK,GAAG,CAAC,EAAE;MACb,MAAME,GAAG,GAAGH,UAAU,CAACI,SAAS,CAAC,CAAC,EAAEH,KAAK,CAAC;MAC1C,MAAMI,GAAG,GAAGL,UAAU,CAACI,SAAS,CAACH,KAAK,GAAG,CAAC,CAAC;MAC3CN,OAAO,CAACQ,GAAG,CAAC,GAAGE,GAAG;IACpB;EACF;EAEA,OAAOV,OAAO;AAChB;AACA,eAAeF,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}