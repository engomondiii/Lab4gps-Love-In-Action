{"ast":null,"code":"import AlphaMode from \"./AlphaMode.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\n\n/**\n * Components for building models.\n *\n * @namespace ModelComponents\n *\n * @private\n */\nconst ModelComponents = {};\n\n/**\n * Information about the quantized attribute.\n *\n * @alias ModelComponents.Quantization\n * @constructor\n *\n * @private\n */\nfunction Quantization() {\n  /**\n   * Whether the quantized attribute is oct-encoded.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.octEncoded = false;\n\n  /**\n   * Whether the oct-encoded values are stored as ZXY instead of XYZ. This is true when decoding from Draco.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.octEncodedZXY = false;\n\n  /**\n   * The range used to convert buffer values to normalized values [0.0, 1.0]\n   * This is typically computed as (1 << quantizationBits) - 1.\n   * For oct-encoded values this value is a single Number.\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.normalizationRange = undefined;\n\n  /**\n   * The bottom-left corner of the quantization volume. Not applicable for oct encoded attributes.\n   * The type should match the attribute type - e.g. if the attribute type\n   * is AttributeType.VEC4 the offset should be a Cartesian4.\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.quantizedVolumeOffset = undefined;\n\n  /**\n   * The dimensions of the quantization volume. Not applicable for oct encoded attributes.\n   * The type should match the attribute type - e.g. if the attribute type\n   * is AttributeType.VEC4 the dimensions should be a Cartesian4.\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.quantizedVolumeDimensions = undefined;\n\n  /**\n   * The step size of the quantization volume, equal to\n   * quantizedVolumeDimensions / normalizationRange (component-wise).\n   * Not applicable for oct encoded attributes.\n   * The type should match the attribute type - e.g. if the attribute type\n   * is AttributeType.VEC4 the dimensions should be a Cartesian4.\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.quantizedVolumeStepSize = undefined;\n\n  /**\n   * The component data type of the quantized attribute, e.g. ComponentDatatype.UNSIGNED_SHORT.\n   *\n   * <p>\n   * The following component datatypes are not supported:\n   * <ul>\n   *   <li>ComponentDatatype.INT</li>\n   *   <li>ComponentDatatype.UNSIGNED_INT</li>\n   *   <li>ComponentDatatype.DOUBLE</li>\n   * </ul>\n   * </p>\n   *\n   * @type {ComponentDatatype}\n   * @private\n   */\n  this.componentDatatype = undefined;\n\n  /**\n   * The type of the quantized attribute, e.g. AttributeType.VEC2 for oct-encoded normals.\n   *\n   * @type {AttributeType}\n   * @private\n   */\n  this.type = undefined;\n}\n\n/**\n * A per-vertex or per-instance attribute.\n *\n * @alias ModelComponents.Attribute\n * @constructor\n *\n * @private\n */\nfunction Attribute() {\n  /**\n   * The attribute name. Must be unique within the attributes array.\n   *\n   * @type {string}\n   * @private\n   */\n  this.name = undefined;\n\n  /**\n   * The attribute semantic. The combination of semantic and setIndex must be\n   * unique within the attributes array.\n   *\n   * @type {VertexAttributeSemantic|InstanceAttributeSemantic}\n   * @private\n   */\n  this.semantic = undefined;\n\n  /**\n   * The set index of the attribute. Only applicable when the attribute has one\n   * of the following semantics:\n   *\n   * <ul>\n   *   <li>{@link VertexAttributeSemantic.TEXCOORD}</li>\n   *   <li>{@link VertexAttributeSemantic.COLOR}</li>\n   *   <li>{@link VertexAttributeSemantic.JOINTS}</li>\n   *   <li>{@link VertexAttributeSemantic.WEIGHTS}</li>\n   *   <li>{@link VertexAttributeSemantic.FEATURE_ID}</li>\n   *   <li>{@link InstanceAttributeSemantic.FEATURE_ID}</li>\n   * </ul>\n   */\n  this.setIndex = undefined;\n\n  /**\n   * The component data type of the attribute.\n   * <p>\n   * When the data is quantized the componentDatatype should match the\n   * dequantized data, which is typically ComponentDatatype.FLOAT.\n   * </p>\n   * <p>\n   * The following component datatypes are not supported:\n   * <ul>\n   *   <li>ComponentDatatype.INT</li>\n   *   <li>ComponentDatatype.UNSIGNED_INT</li>\n   *   <li>ComponentDatatype.DOUBLE</li>\n   * </ul>\n   * </p>\n   *\n   * @type {ComponentDatatype}\n   * @private\n   */\n  this.componentDatatype = undefined;\n\n  /**\n   * The type of the attribute.\n   * <p>\n   * When the data is oct-encoded the type should match the decoded data, which\n   * is typically AttributeType.VEC3.\n   * </p>\n   *\n   * @type {AttributeType}\n   * @private\n   */\n  this.type = undefined;\n\n  /**\n   * Whether the attribute is normalized.\n   *\n   * @type {boolean}\n   * @default false\n   * @private\n   */\n  this.normalized = false;\n\n  /**\n   * The number of elements.\n   *\n   * @type {number}\n   * @private\n   */\n  this.count = undefined;\n\n  /**\n   * Minimum value of each component in the attribute.\n   * <p>\n   * When the data is quantized the min should match the dequantized data.\n   * The normalized property has no effect on these values.\n   * </p>\n   * <p>\n   * Must be defined for POSITION attributes.\n   * </p>\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.min = undefined;\n\n  /**\n   * Maximum value of each component in the attribute.\n   * <p>\n   * When the data is quantized the max should match the dequantized data.\n   * The normalized property has no effect on these values.\n   * </p>\n   * <p>\n   * Must be defined for POSITION attributes.\n   * </p>\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.max = undefined;\n\n  /**\n   * A constant value used for all elements when typed array and buffer are undefined.\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.constant = undefined;\n\n  /**\n   * Information about the quantized attribute.\n   *\n   * @type {ModelComponents.Quantization}\n   * @private\n   */\n  this.quantization = undefined;\n\n  /**\n   * A typed array containing tightly-packed attribute values, as they appear\n   * in the model file.\n   *\n   * @type {Uint8Array|Int8Array|Uint16Array|Int16Array|Uint32Array|Int32Array|Float32Array}\n   * @private\n   */\n  this.typedArray = undefined;\n\n  /**\n   * A vertex buffer. Attribute values are accessed using byteOffset and byteStride.\n   *\n   * @type {Buffer}\n   * @private\n   */\n  this.buffer = undefined;\n\n  /**\n   * The byte offset of elements in the buffer.\n   *\n   * @type {number}\n   * @default 0\n   * @private\n   */\n  this.byteOffset = 0;\n\n  /**\n   * The byte stride of elements in the buffer. When undefined the elements are tightly packed.\n   *\n   * @type {number}\n   * @private\n   */\n  this.byteStride = undefined;\n}\n\n/**\n * Indices used to select vertices for rendering.\n *\n * @alias ModelComponents.Indices\n * @constructor\n *\n * @private\n */\nfunction Indices() {\n  /**\n   * The index data type of the attribute, e.g. IndexDatatype.UNSIGNED_SHORT.\n   *\n   * @type {IndexDatatype}\n   * @private\n   */\n  this.indexDatatype = undefined;\n\n  /**\n   * The number of indices.\n   *\n   * @type {number}\n   * @private\n   */\n  this.count = undefined;\n\n  /**\n   * An index buffer containing indices.\n   *\n   * @type {Buffer}\n   * @private\n   */\n  this.buffer = undefined;\n\n  /**\n   * A typed array containing indices.\n   *\n   * @type {Uint8Array|Uint16Array|Uint32Array}\n   * @private\n   */\n  this.typedArray = undefined;\n}\n\n/**\n * Maps per-vertex or per-instance feature IDs to a property table. Feature\n * IDs are stored in an accessor.\n *\n * @alias ModelComponents.FeatureIdAttribute\n * @constructor\n *\n * @private\n */\nfunction FeatureIdAttribute() {\n  /**\n   * How many unique features are defined in this set of feature IDs\n   *\n   * @type {number}\n   * @private\n   */\n  this.featureCount = undefined;\n\n  /**\n   * This value indicates that no feature is indicated with this vertex\n   *\n   * @type {number}\n   * @private\n   */\n  this.nullFeatureId = undefined;\n\n  /**\n   * The ID of the property table that feature IDs index into. If undefined,\n   * feature IDs are used for classification, but no metadata is associated.\n   *\n   *\n   * @type {number}\n   * @private\n   */\n  this.propertyTableId = undefined;\n\n  /**\n   * The set index of feature ID attribute containing feature IDs.\n   *\n   * @type {number}\n   * @private\n   */\n  this.setIndex = undefined;\n\n  /**\n   * The label to identify this set of feature IDs. This is used in picking,\n   * styling and shaders.\n   *\n   * @type {string}\n   * @private\n   */\n  this.label = undefined;\n\n  /**\n   * Label to identify this set of feature IDs by its position in the array.\n   * This will always be either \"featureId_N\" for primitives or\n   * \"instanceFeatureId_N\" for instances.\n   *\n   * @type {string}\n   * @private\n   */\n  this.positionalLabel = undefined;\n}\n\n/**\n * Defines a range of implicitly-defined feature IDs, one for each vertex or\n * instance. Such feature IDs may optionally be associated with a property table\n * storing metadata\n *\n * @alias ModelComponents.FeatureIdImplicitRange\n * @constructor\n *\n * @private\n */\nfunction FeatureIdImplicitRange() {\n  /**\n   * How many unique features are defined in this set of feature IDs\n   *\n   * @type {number}\n   * @private\n   */\n  this.featureCount = undefined;\n\n  /**\n   * This value indicates that no feature is indicated with this vertex\n   *\n   * @type {number}\n   * @private\n   */\n  this.nullFeatureId = undefined;\n\n  /**\n   * The ID of the property table that feature IDs index into. If undefined,\n   * feature IDs are used for classification, but no metadata is associated.\n   *\n   * @type {number}\n   * @private\n   */\n  this.propertyTableId = undefined;\n\n  /**\n   * The first feature ID to use when setIndex is undefined\n   *\n   * @type {number}\n   * @default 0\n   * @private\n   */\n  this.offset = 0;\n\n  /**\n   * Number of times each feature ID is repeated before being incremented.\n   *\n   * @type {number}\n   * @private\n   */\n  this.repeat = undefined;\n\n  /**\n   * The label to identify this set of feature IDs. This is used in picking,\n   * styling and shaders.\n   *\n   * @type {string}\n   * @private\n   */\n  this.label = undefined;\n\n  /**\n   * Label to identify this set of feature IDs by its position in the array.\n   * This will always be either \"featureId_N\" for primitives or\n   * \"instanceFeatureId_N\" for instances.\n   *\n   * @type {string}\n   * @private\n   */\n  this.positionalLabel = undefined;\n}\n\n/**\n * A texture that contains per-texel feature IDs that index into a property table.\n *\n * @alias ModelComponents.FeatureIdTexture\n * @constructor\n *\n * @private\n */\nfunction FeatureIdTexture() {\n  /**\n   * How many unique features are defined in this set of feature IDs\n   *\n   * @type {number}\n   * @private\n   */\n  this.featureCount = undefined;\n\n  /**\n   * This value indicates that no feature is indicated with this texel\n   *\n   * @type {number}\n   * @private\n   */\n  this.nullFeatureId = undefined;\n\n  /**\n   * The ID of the property table that feature IDs index into. If undefined,\n   * feature IDs are used for classification, but no metadata is associated.\n   *\n   * @type {string}\n   * @private\n   */\n  this.propertyTableId = undefined;\n\n  /**\n   * The texture reader containing feature IDs.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.textureReader = undefined;\n\n  /**\n   * The label to identify this set of feature IDs. This is used in picking,\n   * styling and shaders.\n   *\n   * @type {string}\n   * @private\n   */\n  this.label = undefined;\n\n  /**\n   * Label to identify this set of feature IDs by its position in the array.\n   * This will always be either \"featureId_N\" for primitives or\n   * \"instanceFeatureId_N\" for instances.\n   *\n   * @type {string}\n   * @private\n   */\n  this.positionalLabel = undefined;\n}\n\n/**\n * A morph target where each attribute contains attribute displacement data.\n *\n * @alias ModelComponents.MorphTarget\n * @constructor\n *\n * @private\n */\nfunction MorphTarget() {\n  /**\n   * Attributes that are part of the morph target, e.g. positions, normals, and tangents.\n   *\n   * @type {ModelComponents.Attribute[]}\n   * @private\n   */\n  this.attributes = [];\n}\n\n/**\n * Geometry to be rendered with a material.\n *\n * @alias ModelComponents.Primitive\n * @constructor\n *\n * @private\n */\nfunction Primitive() {\n  /**\n   * The vertex attributes, e.g. positions, normals, etc.\n   *\n   * @type {ModelComponents.Attribute[]}\n   * @private\n   */\n  this.attributes = [];\n\n  /**\n   * The morph targets.\n   *\n   * @type {ModelComponents.MorphTarget[]}\n   * @private\n   */\n  this.morphTargets = [];\n\n  /**\n   * The indices.\n   *\n   * @type {ModelComponents.Indices}\n   * @private\n   */\n  this.indices = undefined;\n\n  /**\n   * The material.\n   *\n   * @type {ModelComponents.Material}\n   * @private\n   */\n  this.material = undefined;\n\n  /**\n   * The primitive type, e.g. PrimitiveType.TRIANGLES.\n   *\n   * @type {PrimitiveType}\n   * @private\n   */\n  this.primitiveType = undefined;\n\n  /**\n   * The feature IDs associated with this primitive. Feature ID types may\n   * be interleaved\n   *\n   * @type {Array<ModelComponents.FeatureIdAttribute|ModelComponents.FeatureIdImplicitRange|ModelComponents.FeatureIdTexture>}\n   * @private\n   */\n  this.featureIds = [];\n\n  /**\n   * The property texture IDs. These indices correspond to the array of\n   * property textures.\n   *\n   * @type {number[]}\n   * @private\n   */\n  this.propertyTextureIds = [];\n\n  /**\n   * The property attribute IDs. These indices correspond to the array of\n   * property attributes in the EXT_structural_metadata extension.\n   *\n   * @type {number[]}\n   * @private\n   */\n  this.propertyAttributeIds = [];\n\n  /**\n   * If the CESIUM_primitive_outline glTF extension is used, this property\n   * stores an additional attribute storing outline coordinates.\n   *\n   * @type {Attribute}\n   * @private\n   */\n  this.outlineCoordinates = undefined;\n}\n\n/**\n * Position and metadata information for instances of a node.\n *\n * @alias ModelComponents.Instances\n * @constructor\n *\n * @private\n */\nfunction Instances() {\n  /**\n   * The instance attributes, e.g. translation, rotation, scale, feature id, etc.\n   *\n   * @type {ModelComponents.Attribute[]}\n   * @private\n   */\n  this.attributes = [];\n\n  /**\n   * The feature ID attributes associated with this set of instances.\n   * Feature ID attribute types may be interleaved.\n   *\n   * @type {Array<ModelComponents.FeatureIdAttribute|ModelComponents.FeatureIdImplicitRange>}\n   * @private\n   */\n  this.featureIds = [];\n\n  /**\n   * Whether the instancing transforms are applied in world space. For glTF models that\n   * use EXT_mesh_gpu_instancing, the transform is applied in object space. For i3dm files,\n   * the instance transform is in world space.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.transformInWorldSpace = false;\n}\n\n/**\n * Joints and matrices defining a skin.\n *\n * @alias ModelComponents.Skin\n * @constructor\n *\n * @private\n */\nfunction Skin() {\n  /**\n   * The index of the skin in the glTF. This is useful for finding the skin\n   * that applies to a node after the skin is instantiated at runtime.\n   *\n   * @type {number}\n   * @private\n   */\n  this.index = undefined;\n\n  /**\n   * The joints.\n   *\n   * @type {ModelComponents.Node[]}\n   * @private\n   */\n  this.joints = [];\n\n  /**\n   * The inverse bind matrices of the joints.\n   *\n   * @type {Matrix4[]}\n   * @private\n   */\n  this.inverseBindMatrices = [];\n}\n\n/**\n * A node in the node hierarchy.\n *\n * @alias ModelComponents.Node\n * @constructor\n *\n * @private\n */\nfunction Node() {\n  /**\n   * The name of the node.\n   *\n   * @type {string}\n   * @private\n   */\n  this.name = undefined;\n\n  /**\n   * The index of the node in the glTF. This is useful for finding the nodes\n   * that belong to a skin after they have been instantiated at runtime.\n   *\n   * @type {number}\n   * @private\n   */\n  this.index = undefined;\n\n  /**\n   * The children nodes.\n   *\n   * @type {ModelComponents.Node[]}\n   * @private\n   */\n  this.children = [];\n\n  /**\n   * The mesh primitives.\n   *\n   * @type {ModelComponents.Primitive[]}\n   * @private\n   */\n  this.primitives = [];\n\n  /**\n   * Instances of this node.\n   *\n   * @type {ModelComponents.Instances}\n   * @private\n   */\n  this.instances = undefined;\n\n  /**\n   * The skin.\n   *\n   * @type {ModelComponents.Skin}\n   * @private\n   */\n  this.skin = undefined;\n\n  /**\n   * The local transformation matrix. When matrix is defined translation,\n   * rotation, and scale must be undefined. When matrix is undefined\n   * translation, rotation, and scale must all be defined.\n   *\n   * @type {Matrix4}\n   * @private\n   */\n  this.matrix = undefined;\n\n  /**\n   * The local translation.\n   *\n   * @type {Cartesian3}\n   * @private\n   */\n  this.translation = undefined;\n\n  /**\n   * The local rotation.\n   *\n   * @type {Quaternion}\n   * @private\n   */\n  this.rotation = undefined;\n\n  /**\n   * The local scale.\n   *\n   * @type {Cartesian3}\n   * @private\n   */\n  this.scale = undefined;\n\n  /**\n   * An array of weights to be applied to the primitives' morph targets.\n   * These are supplied by either the node or its mesh.\n   *\n   * @type {number[]}\n   * @private\n   */\n  this.morphWeights = [];\n\n  /**\n   * The name of the articulation affecting this node, as defined by the\n   * AGI_articulations extension.\n   *\n   * @type {string}\n   * @private\n   */\n  this.articulationName = undefined;\n}\n\n/**\n * A scene containing nodes.\n *\n * @alias ModelComponents.Scene\n * @constructor\n *\n * @private\n */\nfunction Scene() {\n  /**\n   * The nodes belonging to the scene.\n   *\n   * @type {ModelComponents.Node[]}\n   * @private\n   */\n  this.nodes = [];\n}\n\n/**\n * The property of the node that is targeted by an animation. The values of\n * this enum are used to look up the appropriate property on the runtime node.\n *\n * @alias {ModelComponents.AnimatedPropertyType}\n * @enum {string}\n *\n * @private\n */\nconst AnimatedPropertyType = {\n  TRANSLATION: \"translation\",\n  ROTATION: \"rotation\",\n  SCALE: \"scale\",\n  WEIGHTS: \"weights\"\n};\n\n/**\n * An animation sampler that describes the sources of animated keyframe data\n * and their interpolation.\n *\n * @alias {ModelComponents.AnimationSampler}\n * @constructor\n *\n * @private\n */\nfunction AnimationSampler() {\n  /**\n   * The timesteps of the animation.\n   *\n   * @type {number[]}\n   * @private\n   */\n  this.input = [];\n\n  /**\n   * The method used to interpolate between the animation's keyframe data.\n   *\n   * @type {InterpolationType}\n   * @private\n   */\n  this.interpolation = undefined;\n\n  /**\n   * The keyframe data of the animation.\n   *\n   * @type {number[]|Cartesian3[]|Quaternion[]}\n   * @private\n   */\n  this.output = [];\n}\n\n/**\n * An animation target, which specifies the node and property to animate.\n *\n * @alias {ModelComponents.AnimationTarget}\n * @constructor\n *\n * @private\n */\nfunction AnimationTarget() {\n  /**\n   * The node that will be affected by the animation.\n   *\n   * @type {ModelComponents.Node}\n   * @private\n   */\n  this.node = undefined;\n\n  /**\n   * The property of the node to be animated.\n   *\n   * @type {ModelComponents.AnimatedPropertyType}\n   * @private\n   */\n  this.path = undefined;\n}\n\n/**\n * An animation channel linking an animation sampler and the target it animates.\n *\n * @alias {ModelComponents.AnimationChannel}\n * @constructor\n *\n * @private\n */\nfunction AnimationChannel() {\n  /**\n   * The sampler used as the source of the animation data.\n   *\n   * @type {ModelComponents.AnimationSampler}\n   * @private\n   */\n  this.sampler = undefined;\n\n  /**\n   * The target of the animation.\n   *\n   * @type {ModelComponents.AnimationTarget}\n   * @private\n   */\n  this.target = undefined;\n}\n\n/**\n * An animation in the model.\n *\n * @alias {ModelComponents.Animation}\n * @constructor\n *\n * @private\n */\nfunction Animation() {\n  /**\n   * The name of the animation.\n   *\n   * @type {string}\n   * @private\n   */\n  this.name = undefined;\n\n  /**\n   * The samplers used in this animation.\n   *\n   * @type {ModelComponents.AnimationSampler[]}\n   * @private\n   */\n  this.samplers = [];\n\n  /**\n   * The channels used in this animation.\n   *\n   * @type {ModelComponents.AnimationChannel[]}\n   * @private\n   */\n  this.channels = [];\n}\n\n/**\n * An articulation stage belonging to an articulation from the\n * AGI_articulations extension.\n *\n * @alias {ModelComponents.ArticulationStage}\n * @constructor\n *\n * @private\n */\nfunction ArticulationStage() {\n  /**\n   * The name of the articulation stage.\n   *\n   * @type {string}\n   * @private\n   */\n  this.name = undefined;\n\n  /**\n   * The type of the articulation stage, defined by the type of motion it modifies.\n   *\n   * @type {ArticulationStageType}\n   * @private\n   */\n  this.type = undefined;\n\n  /**\n   * The minimum value for the range of motion of this articulation stage.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minimumValue = undefined;\n\n  /**\n   * The maximum value for the range of motion of this articulation stage.\n   *\n   * @type {number}\n   * @private\n   */\n  this.maximumValue = undefined;\n\n  /**\n   * The initial value for this articulation stage.\n   *\n   * @type {number}\n   * @private\n   */\n  this.initialValue = undefined;\n}\n\n/**\n * An articulation for the model, as defined by the AGI_articulations extension.\n *\n * @alias {ModelComponents.Articulation}\n * @constructor\n *\n * @private\n */\nfunction Articulation() {\n  /**\n   * The name of the articulation.\n   *\n   * @type {string}\n   * @private\n   */\n  this.name = undefined;\n\n  /**\n   * The stages belonging to this articulation. The stages are applied to\n   * the model in order of appearance.\n   *\n   * @type {ModelComponents.ArticulationStage[]}\n   * @private\n   */\n  this.stages = [];\n}\n\n/**\n * The asset of the model.\n *\n * @alias {ModelComponents.Asset}\n * @constructor\n *\n * @private\n */\nfunction Asset() {\n  /**\n   * The credits of the model.\n   *\n   * @type {Credit[]}\n   * @private\n   */\n  this.credits = [];\n}\n\n/**\n * The components that make up a model.\n *\n * @alias ModelComponents.Components\n * @constructor\n *\n * @private\n */\nfunction Components() {\n  /**\n   * The asset of the model.\n   *\n   * @type {ModelComponents.Asset}\n   * @private\n   */\n  this.asset = new Asset();\n\n  /**\n   * The default scene.\n   *\n   * @type {ModelComponents.Scene}\n   * @private\n   */\n  this.scene = undefined;\n\n  /**\n   * All nodes in the model.\n   *\n   * @type {ModelComponents.Node[]}\n   */\n  this.nodes = [];\n\n  /**\n   * All skins in the model.\n   *\n   * @type {ModelComponents.Skin[]}\n   */\n  this.skins = [];\n\n  /**\n   * All animations in the model.\n   *\n   * @type {ModelComponents.Animation[]}\n   */\n  this.animations = [];\n\n  /**\n   * All articulations in the model as defined by the AGI_articulations extension.\n   *\n   * @type {ModelComponents.Articulation[]}\n   */\n  this.articulations = [];\n\n  /**\n   * Structural metadata containing the schema, property tables, property\n   * textures and property mappings\n   *\n   * @type {StructuralMetadata}\n   * @private\n   */\n  this.structuralMetadata = undefined;\n\n  /**\n   * The model's up axis.\n   *\n   * @type {Axis}\n   * @private\n   */\n  this.upAxis = undefined;\n\n  /**\n   * The model's forward axis.\n   *\n   * @type {Axis}\n   * @private\n   */\n  this.forwardAxis = undefined;\n\n  /**\n   * A world-space transform to apply to the primitives.\n   *\n   * @type {Matrix4}\n   * @private\n   */\n  this.transform = Matrix4.clone(Matrix4.IDENTITY);\n\n  /**\n   * A mapping from extension names like `\"EXT_example_extension\"` to\n   * the object that was created from the extension input\n   *\n   * @type {object}\n   * @private\n   */\n  this.extensions = {};\n}\n\n/**\n * Information about a GPU texture, including the texture itself\n *\n * @alias ModelComponents.TextureReader\n * @constructor\n *\n * @private\n */\nfunction TextureReader() {\n  /**\n   * The underlying GPU texture. The {@link Texture} contains the sampler.\n   *\n   * @type {Texture}\n   * @private\n   */\n  this.texture = undefined;\n\n  /**\n   * The index of the texture in the glTF. This is useful for determining\n   * when textures are shared to avoid attaching a texture in multiple uniform\n   * slots in the shader.\n   *\n   * @type {number}\n   * @private\n   */\n  this.index = undefined;\n\n  /**\n   * The texture coordinate set.\n   *\n   * @type {number}\n   * @default 0\n   * @private\n   */\n  this.texCoord = 0;\n\n  /**\n   * Transformation matrix to apply to texture coordinates.\n   *\n   * @type {Matrix3}\n   * @default Matrix3.IDENTITY\n   */\n  this.transform = Matrix3.clone(Matrix3.IDENTITY);\n\n  /**\n   * Scale to apply to texture values.\n   *\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  this.scale = 1.0;\n\n  /**\n   * The texture channels to read from. When undefined all channels are read.\n   *\n   * @type {string}\n   */\n  this.channels = undefined;\n}\n\n/**\n * Material properties for the PBR metallic roughness shading model.\n *\n * @alias ModelComponents.MetallicRoughness\n * @constructor\n *\n * @private\n */\nfunction MetallicRoughness() {\n  /**\n   * The base color texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.baseColorTexture = undefined;\n\n  /**\n   * The metallic roughness texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.metallicRoughnessTexture = undefined;\n\n  /**\n   * The base color factor.\n   *\n   * @type {Cartesian4}\n   * @default new Cartesian4(1.0, 1.0, 1.0, 1.0)\n   * @private\n   */\n  this.baseColorFactor = Cartesian4.clone(MetallicRoughness.DEFAULT_BASE_COLOR_FACTOR);\n\n  /**\n   * The metallic factor.\n   *\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  this.metallicFactor = MetallicRoughness.DEFAULT_METALLIC_FACTOR;\n\n  /**\n   * The roughness factor.\n   *\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  this.roughnessFactor = MetallicRoughness.DEFAULT_ROUGHNESS_FACTOR;\n}\n\n/**\n * @private\n */\nMetallicRoughness.DEFAULT_BASE_COLOR_FACTOR = Cartesian4.ONE;\n\n/**\n * @private\n */\nMetallicRoughness.DEFAULT_METALLIC_FACTOR = 1.0;\n\n/**\n * @private\n */\nMetallicRoughness.DEFAULT_ROUGHNESS_FACTOR = 1.0;\n\n/**\n * Material properties for the PBR specular glossiness shading model.\n *\n * @alias ModelComponents.SpecularGlossiness\n * @constructor\n *\n * @private\n */\nfunction SpecularGlossiness() {\n  /**\n   * The diffuse texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.diffuseTexture = undefined;\n\n  /**\n   * The specular glossiness texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.specularGlossinessTexture = undefined;\n\n  /**\n   * The diffuse factor.\n   *\n   * @type {Cartesian4}\n   * @default new Cartesian4(1.0, 1.0, 1.0, 1.0)\n   * @private\n   */\n  this.diffuseFactor = Cartesian4.clone(SpecularGlossiness.DEFAULT_DIFFUSE_FACTOR);\n\n  /**\n   * The specular factor.\n   *\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   * @private\n   */\n  this.specularFactor = Cartesian3.clone(SpecularGlossiness.DEFAULT_SPECULAR_FACTOR);\n\n  /**\n   * The glossiness factor.\n   *\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  this.glossinessFactor = SpecularGlossiness.DEFAULT_GLOSSINESS_FACTOR;\n}\n\n/**\n * @private\n */\nSpecularGlossiness.DEFAULT_DIFFUSE_FACTOR = Cartesian4.ONE;\n\n/**\n * @private\n */\nSpecularGlossiness.DEFAULT_SPECULAR_FACTOR = Cartesian3.ONE;\n\n/**\n * @private\n */\nSpecularGlossiness.DEFAULT_GLOSSINESS_FACTOR = 1.0;\nfunction Specular() {\n  /**\n   * The specular factor.\n   *\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  this.specularFactor = Specular.DEFAULT_SPECULAR_FACTOR;\n\n  /**\n   * The specular texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.specularTexture = undefined;\n\n  /**\n   * The specular color factor.\n   *\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   * @private\n   */\n  this.specularColorFactor = Cartesian3.clone(Specular.DEFAULT_SPECULAR_COLOR_FACTOR);\n\n  /**\n   * The specular color texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.specularColorTexture = undefined;\n}\n\n/**\n * @private\n */\nSpecular.DEFAULT_SPECULAR_FACTOR = 1.0;\n\n/**\n * @private\n */\nSpecular.DEFAULT_SPECULAR_COLOR_FACTOR = Cartesian3.ONE;\nfunction Anisotropy() {\n  /**\n   * The anisotropy strength.\n   *\n   * @type {number}\n   * @default 0.0\n   * @private\n   */\n  this.anisotropyStrength = Anisotropy.DEFAULT_ANISOTROPY_STRENGTH;\n\n  /**\n   * The rotation of the anisotropy in tangent, bitangent space,\n   * measured in radians counter-clockwise from the tangent.\n   *\n   * @type {number}\n   * @default 0.0\n   * @private\n   */\n  this.anisotropyRotation = Anisotropy.DEFAULT_ANISOTROPY_ROTATION;\n\n  /**\n   * The anisotropy texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.anisotropyTexture = undefined;\n}\n\n/**\n * @private\n */\nAnisotropy.DEFAULT_ANISOTROPY_STRENGTH = 0.0;\n\n/**\n * @private\n */\nAnisotropy.DEFAULT_ANISOTROPY_ROTATION = 0.0;\nfunction Clearcoat() {\n  /**\n   * The clearcoat layer intensity.\n   *\n   * @type {number}\n   * @default 0.0\n   * @private\n   */\n  this.clearcoatFactor = Clearcoat.DEFAULT_CLEARCOAT_FACTOR;\n\n  /**\n   * The clearcoat layer intensity texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.clearcoatTexture = undefined;\n\n  /**\n   * The clearcoat layer roughness.\n   *\n   * @type {number}\n   * @default 0.0\n   * @private\n   */\n  this.clearcoatRoughnessFactor = Clearcoat.DEFAULT_CLEARCOAT_ROUGHNESS_FACTOR;\n\n  /**\n   * The clearcoat layer roughness texture.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.clearcoatRoughnessTexture = undefined;\n\n  /**\n   * The clearcoat normal map texture.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.clearcoatNormalTexture = undefined;\n}\n\n/**\n * @private\n */\nClearcoat.DEFAULT_CLEARCOAT_FACTOR = 0.0;\n\n/**\n * @private\n */\nClearcoat.DEFAULT_CLEARCOAT_ROUGHNESS_FACTOR = 0.0;\n\n/**\n * The material appearance of a primitive.\n *\n * @alias ModelComponents.Material\n * @constructor\n *\n * @private\n */\nfunction Material() {\n  /**\n   * Material properties for the PBR metallic roughness shading model.\n   *\n   * @type {ModelComponents.MetallicRoughness}\n   * @private\n   */\n  this.metallicRoughness = new MetallicRoughness();\n\n  /**\n   * Material properties for the PBR specular glossiness shading model.\n   *\n   * @type {ModelComponents.SpecularGlossiness}\n   * @private\n   */\n  this.specularGlossiness = undefined;\n\n  /**\n   * Material properties for the PBR specular shading model.\n   *\n   * @type {ModelComponents.Specular}\n   * @private\n   */\n  this.specular = undefined;\n\n  /**\n   * Material properties for the PBR anisotropy shading model.\n   *\n   * @type {ModelComponents.Anisotropy}\n   * @private\n   */\n  this.anisotropy = undefined;\n\n  /**\n   * Material properties for the PBR clearcoat shading model.\n   *\n   * @type {ModelComponents.Clearcoat}\n   * @private\n   */\n  this.clearcoat = undefined;\n\n  /**\n   * The emissive texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.emissiveTexture = undefined;\n\n  /**\n   * The normal texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.normalTexture = undefined;\n\n  /**\n   * The occlusion texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.occlusionTexture = undefined;\n\n  /**\n   * The emissive factor.\n   *\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   * @private\n   */\n  this.emissiveFactor = Cartesian3.clone(Material.DEFAULT_EMISSIVE_FACTOR);\n\n  /**\n   * The alpha mode.\n   *\n   * @type {AlphaMode}\n   * @default AlphaMode.OPAQUE\n   * @private\n   */\n  this.alphaMode = AlphaMode.OPAQUE;\n\n  /**\n   * The alpha cutoff value of the material for the MASK alpha mode.\n   *\n   * @type {number}\n   * @default 0.5\n   * @private\n   */\n  this.alphaCutoff = 0.5;\n\n  /**\n   * Specifies whether the material is double sided.\n   *\n   * @type {boolean}\n   * @default false\n   * @private\n   */\n  this.doubleSided = false;\n\n  /**\n   * Specifies whether the material is unlit.\n   *\n   * @type {boolean}\n   * @default false\n   * @private\n   */\n  this.unlit = false;\n}\n\n/**\n * @private\n */\nMaterial.DEFAULT_EMISSIVE_FACTOR = Cartesian3.ZERO;\nModelComponents.Quantization = Quantization;\nModelComponents.Attribute = Attribute;\nModelComponents.Indices = Indices;\nModelComponents.FeatureIdAttribute = FeatureIdAttribute;\nModelComponents.FeatureIdTexture = FeatureIdTexture;\nModelComponents.FeatureIdImplicitRange = FeatureIdImplicitRange;\nModelComponents.MorphTarget = MorphTarget;\nModelComponents.Primitive = Primitive;\nModelComponents.Instances = Instances;\nModelComponents.Skin = Skin;\nModelComponents.Node = Node;\nModelComponents.Scene = Scene;\nModelComponents.AnimatedPropertyType = Object.freeze(AnimatedPropertyType);\nModelComponents.AnimationSampler = AnimationSampler;\nModelComponents.AnimationTarget = AnimationTarget;\nModelComponents.AnimationChannel = AnimationChannel;\nModelComponents.Animation = Animation;\nModelComponents.ArticulationStage = ArticulationStage;\nModelComponents.Articulation = Articulation;\nModelComponents.Asset = Asset;\nModelComponents.Components = Components;\nModelComponents.TextureReader = TextureReader;\nModelComponents.MetallicRoughness = MetallicRoughness;\nModelComponents.SpecularGlossiness = SpecularGlossiness;\nModelComponents.Specular = Specular;\nModelComponents.Anisotropy = Anisotropy;\nModelComponents.Clearcoat = Clearcoat;\nModelComponents.Material = Material;\nexport default ModelComponents;","map":{"version":3,"names":["AlphaMode","Cartesian3","Cartesian4","Matrix3","Matrix4","ModelComponents","Quantization","octEncoded","octEncodedZXY","normalizationRange","undefined","quantizedVolumeOffset","quantizedVolumeDimensions","quantizedVolumeStepSize","componentDatatype","type","Attribute","name","semantic","setIndex","normalized","count","min","max","constant","quantization","typedArray","buffer","byteOffset","byteStride","Indices","indexDatatype","FeatureIdAttribute","featureCount","nullFeatureId","propertyTableId","label","positionalLabel","FeatureIdImplicitRange","offset","repeat","FeatureIdTexture","textureReader","MorphTarget","attributes","Primitive","morphTargets","indices","material","primitiveType","featureIds","propertyTextureIds","propertyAttributeIds","outlineCoordinates","Instances","transformInWorldSpace","Skin","index","joints","inverseBindMatrices","Node","children","primitives","instances","skin","matrix","translation","rotation","scale","morphWeights","articulationName","Scene","nodes","AnimatedPropertyType","TRANSLATION","ROTATION","SCALE","WEIGHTS","AnimationSampler","input","interpolation","output","AnimationTarget","node","path","AnimationChannel","sampler","target","Animation","samplers","channels","ArticulationStage","minimumValue","maximumValue","initialValue","Articulation","stages","Asset","credits","Components","asset","scene","skins","animations","articulations","structuralMetadata","upAxis","forwardAxis","transform","clone","IDENTITY","extensions","TextureReader","texture","texCoord","MetallicRoughness","baseColorTexture","metallicRoughnessTexture","baseColorFactor","DEFAULT_BASE_COLOR_FACTOR","metallicFactor","DEFAULT_METALLIC_FACTOR","roughnessFactor","DEFAULT_ROUGHNESS_FACTOR","ONE","SpecularGlossiness","diffuseTexture","specularGlossinessTexture","diffuseFactor","DEFAULT_DIFFUSE_FACTOR","specularFactor","DEFAULT_SPECULAR_FACTOR","glossinessFactor","DEFAULT_GLOSSINESS_FACTOR","Specular","specularTexture","specularColorFactor","DEFAULT_SPECULAR_COLOR_FACTOR","specularColorTexture","Anisotropy","anisotropyStrength","DEFAULT_ANISOTROPY_STRENGTH","anisotropyRotation","DEFAULT_ANISOTROPY_ROTATION","anisotropyTexture","Clearcoat","clearcoatFactor","DEFAULT_CLEARCOAT_FACTOR","clearcoatTexture","clearcoatRoughnessFactor","DEFAULT_CLEARCOAT_ROUGHNESS_FACTOR","clearcoatRoughnessTexture","clearcoatNormalTexture","Material","metallicRoughness","specularGlossiness","specular","anisotropy","clearcoat","emissiveTexture","normalTexture","occlusionTexture","emissiveFactor","DEFAULT_EMISSIVE_FACTOR","alphaMode","OPAQUE","alphaCutoff","doubleSided","unlit","ZERO","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ModelComponents.js"],"sourcesContent":["import AlphaMode from \"./AlphaMode.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\n\n/**\n * Components for building models.\n *\n * @namespace ModelComponents\n *\n * @private\n */\nconst ModelComponents = {};\n\n/**\n * Information about the quantized attribute.\n *\n * @alias ModelComponents.Quantization\n * @constructor\n *\n * @private\n */\nfunction Quantization() {\n  /**\n   * Whether the quantized attribute is oct-encoded.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.octEncoded = false;\n\n  /**\n   * Whether the oct-encoded values are stored as ZXY instead of XYZ. This is true when decoding from Draco.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.octEncodedZXY = false;\n\n  /**\n   * The range used to convert buffer values to normalized values [0.0, 1.0]\n   * This is typically computed as (1 << quantizationBits) - 1.\n   * For oct-encoded values this value is a single Number.\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.normalizationRange = undefined;\n\n  /**\n   * The bottom-left corner of the quantization volume. Not applicable for oct encoded attributes.\n   * The type should match the attribute type - e.g. if the attribute type\n   * is AttributeType.VEC4 the offset should be a Cartesian4.\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.quantizedVolumeOffset = undefined;\n\n  /**\n   * The dimensions of the quantization volume. Not applicable for oct encoded attributes.\n   * The type should match the attribute type - e.g. if the attribute type\n   * is AttributeType.VEC4 the dimensions should be a Cartesian4.\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.quantizedVolumeDimensions = undefined;\n\n  /**\n   * The step size of the quantization volume, equal to\n   * quantizedVolumeDimensions / normalizationRange (component-wise).\n   * Not applicable for oct encoded attributes.\n   * The type should match the attribute type - e.g. if the attribute type\n   * is AttributeType.VEC4 the dimensions should be a Cartesian4.\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.quantizedVolumeStepSize = undefined;\n\n  /**\n   * The component data type of the quantized attribute, e.g. ComponentDatatype.UNSIGNED_SHORT.\n   *\n   * <p>\n   * The following component datatypes are not supported:\n   * <ul>\n   *   <li>ComponentDatatype.INT</li>\n   *   <li>ComponentDatatype.UNSIGNED_INT</li>\n   *   <li>ComponentDatatype.DOUBLE</li>\n   * </ul>\n   * </p>\n   *\n   * @type {ComponentDatatype}\n   * @private\n   */\n  this.componentDatatype = undefined;\n\n  /**\n   * The type of the quantized attribute, e.g. AttributeType.VEC2 for oct-encoded normals.\n   *\n   * @type {AttributeType}\n   * @private\n   */\n  this.type = undefined;\n}\n\n/**\n * A per-vertex or per-instance attribute.\n *\n * @alias ModelComponents.Attribute\n * @constructor\n *\n * @private\n */\nfunction Attribute() {\n  /**\n   * The attribute name. Must be unique within the attributes array.\n   *\n   * @type {string}\n   * @private\n   */\n  this.name = undefined;\n\n  /**\n   * The attribute semantic. The combination of semantic and setIndex must be\n   * unique within the attributes array.\n   *\n   * @type {VertexAttributeSemantic|InstanceAttributeSemantic}\n   * @private\n   */\n  this.semantic = undefined;\n\n  /**\n   * The set index of the attribute. Only applicable when the attribute has one\n   * of the following semantics:\n   *\n   * <ul>\n   *   <li>{@link VertexAttributeSemantic.TEXCOORD}</li>\n   *   <li>{@link VertexAttributeSemantic.COLOR}</li>\n   *   <li>{@link VertexAttributeSemantic.JOINTS}</li>\n   *   <li>{@link VertexAttributeSemantic.WEIGHTS}</li>\n   *   <li>{@link VertexAttributeSemantic.FEATURE_ID}</li>\n   *   <li>{@link InstanceAttributeSemantic.FEATURE_ID}</li>\n   * </ul>\n   */\n  this.setIndex = undefined;\n\n  /**\n   * The component data type of the attribute.\n   * <p>\n   * When the data is quantized the componentDatatype should match the\n   * dequantized data, which is typically ComponentDatatype.FLOAT.\n   * </p>\n   * <p>\n   * The following component datatypes are not supported:\n   * <ul>\n   *   <li>ComponentDatatype.INT</li>\n   *   <li>ComponentDatatype.UNSIGNED_INT</li>\n   *   <li>ComponentDatatype.DOUBLE</li>\n   * </ul>\n   * </p>\n   *\n   * @type {ComponentDatatype}\n   * @private\n   */\n  this.componentDatatype = undefined;\n\n  /**\n   * The type of the attribute.\n   * <p>\n   * When the data is oct-encoded the type should match the decoded data, which\n   * is typically AttributeType.VEC3.\n   * </p>\n   *\n   * @type {AttributeType}\n   * @private\n   */\n  this.type = undefined;\n\n  /**\n   * Whether the attribute is normalized.\n   *\n   * @type {boolean}\n   * @default false\n   * @private\n   */\n  this.normalized = false;\n\n  /**\n   * The number of elements.\n   *\n   * @type {number}\n   * @private\n   */\n  this.count = undefined;\n\n  /**\n   * Minimum value of each component in the attribute.\n   * <p>\n   * When the data is quantized the min should match the dequantized data.\n   * The normalized property has no effect on these values.\n   * </p>\n   * <p>\n   * Must be defined for POSITION attributes.\n   * </p>\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.min = undefined;\n\n  /**\n   * Maximum value of each component in the attribute.\n   * <p>\n   * When the data is quantized the max should match the dequantized data.\n   * The normalized property has no effect on these values.\n   * </p>\n   * <p>\n   * Must be defined for POSITION attributes.\n   * </p>\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.max = undefined;\n\n  /**\n   * A constant value used for all elements when typed array and buffer are undefined.\n   *\n   * @type {number|Cartesian2|Cartesian3|Cartesian4|Matrix2|Matrix3|Matrix4}\n   * @private\n   */\n  this.constant = undefined;\n\n  /**\n   * Information about the quantized attribute.\n   *\n   * @type {ModelComponents.Quantization}\n   * @private\n   */\n  this.quantization = undefined;\n\n  /**\n   * A typed array containing tightly-packed attribute values, as they appear\n   * in the model file.\n   *\n   * @type {Uint8Array|Int8Array|Uint16Array|Int16Array|Uint32Array|Int32Array|Float32Array}\n   * @private\n   */\n  this.typedArray = undefined;\n\n  /**\n   * A vertex buffer. Attribute values are accessed using byteOffset and byteStride.\n   *\n   * @type {Buffer}\n   * @private\n   */\n  this.buffer = undefined;\n\n  /**\n   * The byte offset of elements in the buffer.\n   *\n   * @type {number}\n   * @default 0\n   * @private\n   */\n  this.byteOffset = 0;\n\n  /**\n   * The byte stride of elements in the buffer. When undefined the elements are tightly packed.\n   *\n   * @type {number}\n   * @private\n   */\n  this.byteStride = undefined;\n}\n\n/**\n * Indices used to select vertices for rendering.\n *\n * @alias ModelComponents.Indices\n * @constructor\n *\n * @private\n */\nfunction Indices() {\n  /**\n   * The index data type of the attribute, e.g. IndexDatatype.UNSIGNED_SHORT.\n   *\n   * @type {IndexDatatype}\n   * @private\n   */\n  this.indexDatatype = undefined;\n\n  /**\n   * The number of indices.\n   *\n   * @type {number}\n   * @private\n   */\n  this.count = undefined;\n\n  /**\n   * An index buffer containing indices.\n   *\n   * @type {Buffer}\n   * @private\n   */\n  this.buffer = undefined;\n\n  /**\n   * A typed array containing indices.\n   *\n   * @type {Uint8Array|Uint16Array|Uint32Array}\n   * @private\n   */\n  this.typedArray = undefined;\n}\n\n/**\n * Maps per-vertex or per-instance feature IDs to a property table. Feature\n * IDs are stored in an accessor.\n *\n * @alias ModelComponents.FeatureIdAttribute\n * @constructor\n *\n * @private\n */\nfunction FeatureIdAttribute() {\n  /**\n   * How many unique features are defined in this set of feature IDs\n   *\n   * @type {number}\n   * @private\n   */\n  this.featureCount = undefined;\n\n  /**\n   * This value indicates that no feature is indicated with this vertex\n   *\n   * @type {number}\n   * @private\n   */\n  this.nullFeatureId = undefined;\n\n  /**\n   * The ID of the property table that feature IDs index into. If undefined,\n   * feature IDs are used for classification, but no metadata is associated.\n   *\n   *\n   * @type {number}\n   * @private\n   */\n  this.propertyTableId = undefined;\n\n  /**\n   * The set index of feature ID attribute containing feature IDs.\n   *\n   * @type {number}\n   * @private\n   */\n  this.setIndex = undefined;\n\n  /**\n   * The label to identify this set of feature IDs. This is used in picking,\n   * styling and shaders.\n   *\n   * @type {string}\n   * @private\n   */\n  this.label = undefined;\n\n  /**\n   * Label to identify this set of feature IDs by its position in the array.\n   * This will always be either \"featureId_N\" for primitives or\n   * \"instanceFeatureId_N\" for instances.\n   *\n   * @type {string}\n   * @private\n   */\n  this.positionalLabel = undefined;\n}\n\n/**\n * Defines a range of implicitly-defined feature IDs, one for each vertex or\n * instance. Such feature IDs may optionally be associated with a property table\n * storing metadata\n *\n * @alias ModelComponents.FeatureIdImplicitRange\n * @constructor\n *\n * @private\n */\nfunction FeatureIdImplicitRange() {\n  /**\n   * How many unique features are defined in this set of feature IDs\n   *\n   * @type {number}\n   * @private\n   */\n  this.featureCount = undefined;\n\n  /**\n   * This value indicates that no feature is indicated with this vertex\n   *\n   * @type {number}\n   * @private\n   */\n  this.nullFeatureId = undefined;\n\n  /**\n   * The ID of the property table that feature IDs index into. If undefined,\n   * feature IDs are used for classification, but no metadata is associated.\n   *\n   * @type {number}\n   * @private\n   */\n  this.propertyTableId = undefined;\n\n  /**\n   * The first feature ID to use when setIndex is undefined\n   *\n   * @type {number}\n   * @default 0\n   * @private\n   */\n  this.offset = 0;\n\n  /**\n   * Number of times each feature ID is repeated before being incremented.\n   *\n   * @type {number}\n   * @private\n   */\n  this.repeat = undefined;\n\n  /**\n   * The label to identify this set of feature IDs. This is used in picking,\n   * styling and shaders.\n   *\n   * @type {string}\n   * @private\n   */\n  this.label = undefined;\n\n  /**\n   * Label to identify this set of feature IDs by its position in the array.\n   * This will always be either \"featureId_N\" for primitives or\n   * \"instanceFeatureId_N\" for instances.\n   *\n   * @type {string}\n   * @private\n   */\n  this.positionalLabel = undefined;\n}\n\n/**\n * A texture that contains per-texel feature IDs that index into a property table.\n *\n * @alias ModelComponents.FeatureIdTexture\n * @constructor\n *\n * @private\n */\nfunction FeatureIdTexture() {\n  /**\n   * How many unique features are defined in this set of feature IDs\n   *\n   * @type {number}\n   * @private\n   */\n  this.featureCount = undefined;\n\n  /**\n   * This value indicates that no feature is indicated with this texel\n   *\n   * @type {number}\n   * @private\n   */\n  this.nullFeatureId = undefined;\n\n  /**\n   * The ID of the property table that feature IDs index into. If undefined,\n   * feature IDs are used for classification, but no metadata is associated.\n   *\n   * @type {string}\n   * @private\n   */\n  this.propertyTableId = undefined;\n\n  /**\n   * The texture reader containing feature IDs.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.textureReader = undefined;\n\n  /**\n   * The label to identify this set of feature IDs. This is used in picking,\n   * styling and shaders.\n   *\n   * @type {string}\n   * @private\n   */\n  this.label = undefined;\n\n  /**\n   * Label to identify this set of feature IDs by its position in the array.\n   * This will always be either \"featureId_N\" for primitives or\n   * \"instanceFeatureId_N\" for instances.\n   *\n   * @type {string}\n   * @private\n   */\n  this.positionalLabel = undefined;\n}\n\n/**\n * A morph target where each attribute contains attribute displacement data.\n *\n * @alias ModelComponents.MorphTarget\n * @constructor\n *\n * @private\n */\nfunction MorphTarget() {\n  /**\n   * Attributes that are part of the morph target, e.g. positions, normals, and tangents.\n   *\n   * @type {ModelComponents.Attribute[]}\n   * @private\n   */\n  this.attributes = [];\n}\n\n/**\n * Geometry to be rendered with a material.\n *\n * @alias ModelComponents.Primitive\n * @constructor\n *\n * @private\n */\nfunction Primitive() {\n  /**\n   * The vertex attributes, e.g. positions, normals, etc.\n   *\n   * @type {ModelComponents.Attribute[]}\n   * @private\n   */\n  this.attributes = [];\n\n  /**\n   * The morph targets.\n   *\n   * @type {ModelComponents.MorphTarget[]}\n   * @private\n   */\n  this.morphTargets = [];\n\n  /**\n   * The indices.\n   *\n   * @type {ModelComponents.Indices}\n   * @private\n   */\n  this.indices = undefined;\n\n  /**\n   * The material.\n   *\n   * @type {ModelComponents.Material}\n   * @private\n   */\n  this.material = undefined;\n\n  /**\n   * The primitive type, e.g. PrimitiveType.TRIANGLES.\n   *\n   * @type {PrimitiveType}\n   * @private\n   */\n  this.primitiveType = undefined;\n\n  /**\n   * The feature IDs associated with this primitive. Feature ID types may\n   * be interleaved\n   *\n   * @type {Array<ModelComponents.FeatureIdAttribute|ModelComponents.FeatureIdImplicitRange|ModelComponents.FeatureIdTexture>}\n   * @private\n   */\n  this.featureIds = [];\n\n  /**\n   * The property texture IDs. These indices correspond to the array of\n   * property textures.\n   *\n   * @type {number[]}\n   * @private\n   */\n  this.propertyTextureIds = [];\n\n  /**\n   * The property attribute IDs. These indices correspond to the array of\n   * property attributes in the EXT_structural_metadata extension.\n   *\n   * @type {number[]}\n   * @private\n   */\n  this.propertyAttributeIds = [];\n\n  /**\n   * If the CESIUM_primitive_outline glTF extension is used, this property\n   * stores an additional attribute storing outline coordinates.\n   *\n   * @type {Attribute}\n   * @private\n   */\n  this.outlineCoordinates = undefined;\n}\n\n/**\n * Position and metadata information for instances of a node.\n *\n * @alias ModelComponents.Instances\n * @constructor\n *\n * @private\n */\nfunction Instances() {\n  /**\n   * The instance attributes, e.g. translation, rotation, scale, feature id, etc.\n   *\n   * @type {ModelComponents.Attribute[]}\n   * @private\n   */\n  this.attributes = [];\n\n  /**\n   * The feature ID attributes associated with this set of instances.\n   * Feature ID attribute types may be interleaved.\n   *\n   * @type {Array<ModelComponents.FeatureIdAttribute|ModelComponents.FeatureIdImplicitRange>}\n   * @private\n   */\n  this.featureIds = [];\n\n  /**\n   * Whether the instancing transforms are applied in world space. For glTF models that\n   * use EXT_mesh_gpu_instancing, the transform is applied in object space. For i3dm files,\n   * the instance transform is in world space.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.transformInWorldSpace = false;\n}\n\n/**\n * Joints and matrices defining a skin.\n *\n * @alias ModelComponents.Skin\n * @constructor\n *\n * @private\n */\nfunction Skin() {\n  /**\n   * The index of the skin in the glTF. This is useful for finding the skin\n   * that applies to a node after the skin is instantiated at runtime.\n   *\n   * @type {number}\n   * @private\n   */\n  this.index = undefined;\n\n  /**\n   * The joints.\n   *\n   * @type {ModelComponents.Node[]}\n   * @private\n   */\n  this.joints = [];\n\n  /**\n   * The inverse bind matrices of the joints.\n   *\n   * @type {Matrix4[]}\n   * @private\n   */\n  this.inverseBindMatrices = [];\n}\n\n/**\n * A node in the node hierarchy.\n *\n * @alias ModelComponents.Node\n * @constructor\n *\n * @private\n */\nfunction Node() {\n  /**\n   * The name of the node.\n   *\n   * @type {string}\n   * @private\n   */\n  this.name = undefined;\n\n  /**\n   * The index of the node in the glTF. This is useful for finding the nodes\n   * that belong to a skin after they have been instantiated at runtime.\n   *\n   * @type {number}\n   * @private\n   */\n  this.index = undefined;\n\n  /**\n   * The children nodes.\n   *\n   * @type {ModelComponents.Node[]}\n   * @private\n   */\n  this.children = [];\n\n  /**\n   * The mesh primitives.\n   *\n   * @type {ModelComponents.Primitive[]}\n   * @private\n   */\n  this.primitives = [];\n\n  /**\n   * Instances of this node.\n   *\n   * @type {ModelComponents.Instances}\n   * @private\n   */\n  this.instances = undefined;\n\n  /**\n   * The skin.\n   *\n   * @type {ModelComponents.Skin}\n   * @private\n   */\n  this.skin = undefined;\n\n  /**\n   * The local transformation matrix. When matrix is defined translation,\n   * rotation, and scale must be undefined. When matrix is undefined\n   * translation, rotation, and scale must all be defined.\n   *\n   * @type {Matrix4}\n   * @private\n   */\n  this.matrix = undefined;\n\n  /**\n   * The local translation.\n   *\n   * @type {Cartesian3}\n   * @private\n   */\n  this.translation = undefined;\n\n  /**\n   * The local rotation.\n   *\n   * @type {Quaternion}\n   * @private\n   */\n  this.rotation = undefined;\n\n  /**\n   * The local scale.\n   *\n   * @type {Cartesian3}\n   * @private\n   */\n  this.scale = undefined;\n\n  /**\n   * An array of weights to be applied to the primitives' morph targets.\n   * These are supplied by either the node or its mesh.\n   *\n   * @type {number[]}\n   * @private\n   */\n  this.morphWeights = [];\n\n  /**\n   * The name of the articulation affecting this node, as defined by the\n   * AGI_articulations extension.\n   *\n   * @type {string}\n   * @private\n   */\n  this.articulationName = undefined;\n}\n\n/**\n * A scene containing nodes.\n *\n * @alias ModelComponents.Scene\n * @constructor\n *\n * @private\n */\nfunction Scene() {\n  /**\n   * The nodes belonging to the scene.\n   *\n   * @type {ModelComponents.Node[]}\n   * @private\n   */\n  this.nodes = [];\n}\n\n/**\n * The property of the node that is targeted by an animation. The values of\n * this enum are used to look up the appropriate property on the runtime node.\n *\n * @alias {ModelComponents.AnimatedPropertyType}\n * @enum {string}\n *\n * @private\n */\nconst AnimatedPropertyType = {\n  TRANSLATION: \"translation\",\n  ROTATION: \"rotation\",\n  SCALE: \"scale\",\n  WEIGHTS: \"weights\",\n};\n\n/**\n * An animation sampler that describes the sources of animated keyframe data\n * and their interpolation.\n *\n * @alias {ModelComponents.AnimationSampler}\n * @constructor\n *\n * @private\n */\nfunction AnimationSampler() {\n  /**\n   * The timesteps of the animation.\n   *\n   * @type {number[]}\n   * @private\n   */\n  this.input = [];\n\n  /**\n   * The method used to interpolate between the animation's keyframe data.\n   *\n   * @type {InterpolationType}\n   * @private\n   */\n  this.interpolation = undefined;\n\n  /**\n   * The keyframe data of the animation.\n   *\n   * @type {number[]|Cartesian3[]|Quaternion[]}\n   * @private\n   */\n  this.output = [];\n}\n\n/**\n * An animation target, which specifies the node and property to animate.\n *\n * @alias {ModelComponents.AnimationTarget}\n * @constructor\n *\n * @private\n */\nfunction AnimationTarget() {\n  /**\n   * The node that will be affected by the animation.\n   *\n   * @type {ModelComponents.Node}\n   * @private\n   */\n  this.node = undefined;\n\n  /**\n   * The property of the node to be animated.\n   *\n   * @type {ModelComponents.AnimatedPropertyType}\n   * @private\n   */\n  this.path = undefined;\n}\n\n/**\n * An animation channel linking an animation sampler and the target it animates.\n *\n * @alias {ModelComponents.AnimationChannel}\n * @constructor\n *\n * @private\n */\nfunction AnimationChannel() {\n  /**\n   * The sampler used as the source of the animation data.\n   *\n   * @type {ModelComponents.AnimationSampler}\n   * @private\n   */\n  this.sampler = undefined;\n\n  /**\n   * The target of the animation.\n   *\n   * @type {ModelComponents.AnimationTarget}\n   * @private\n   */\n  this.target = undefined;\n}\n\n/**\n * An animation in the model.\n *\n * @alias {ModelComponents.Animation}\n * @constructor\n *\n * @private\n */\nfunction Animation() {\n  /**\n   * The name of the animation.\n   *\n   * @type {string}\n   * @private\n   */\n  this.name = undefined;\n\n  /**\n   * The samplers used in this animation.\n   *\n   * @type {ModelComponents.AnimationSampler[]}\n   * @private\n   */\n  this.samplers = [];\n\n  /**\n   * The channels used in this animation.\n   *\n   * @type {ModelComponents.AnimationChannel[]}\n   * @private\n   */\n  this.channels = [];\n}\n\n/**\n * An articulation stage belonging to an articulation from the\n * AGI_articulations extension.\n *\n * @alias {ModelComponents.ArticulationStage}\n * @constructor\n *\n * @private\n */\nfunction ArticulationStage() {\n  /**\n   * The name of the articulation stage.\n   *\n   * @type {string}\n   * @private\n   */\n  this.name = undefined;\n\n  /**\n   * The type of the articulation stage, defined by the type of motion it modifies.\n   *\n   * @type {ArticulationStageType}\n   * @private\n   */\n  this.type = undefined;\n\n  /**\n   * The minimum value for the range of motion of this articulation stage.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minimumValue = undefined;\n\n  /**\n   * The maximum value for the range of motion of this articulation stage.\n   *\n   * @type {number}\n   * @private\n   */\n  this.maximumValue = undefined;\n\n  /**\n   * The initial value for this articulation stage.\n   *\n   * @type {number}\n   * @private\n   */\n  this.initialValue = undefined;\n}\n\n/**\n * An articulation for the model, as defined by the AGI_articulations extension.\n *\n * @alias {ModelComponents.Articulation}\n * @constructor\n *\n * @private\n */\nfunction Articulation() {\n  /**\n   * The name of the articulation.\n   *\n   * @type {string}\n   * @private\n   */\n  this.name = undefined;\n\n  /**\n   * The stages belonging to this articulation. The stages are applied to\n   * the model in order of appearance.\n   *\n   * @type {ModelComponents.ArticulationStage[]}\n   * @private\n   */\n  this.stages = [];\n}\n\n/**\n * The asset of the model.\n *\n * @alias {ModelComponents.Asset}\n * @constructor\n *\n * @private\n */\nfunction Asset() {\n  /**\n   * The credits of the model.\n   *\n   * @type {Credit[]}\n   * @private\n   */\n  this.credits = [];\n}\n\n/**\n * The components that make up a model.\n *\n * @alias ModelComponents.Components\n * @constructor\n *\n * @private\n */\nfunction Components() {\n  /**\n   * The asset of the model.\n   *\n   * @type {ModelComponents.Asset}\n   * @private\n   */\n  this.asset = new Asset();\n\n  /**\n   * The default scene.\n   *\n   * @type {ModelComponents.Scene}\n   * @private\n   */\n  this.scene = undefined;\n\n  /**\n   * All nodes in the model.\n   *\n   * @type {ModelComponents.Node[]}\n   */\n  this.nodes = [];\n\n  /**\n   * All skins in the model.\n   *\n   * @type {ModelComponents.Skin[]}\n   */\n  this.skins = [];\n\n  /**\n   * All animations in the model.\n   *\n   * @type {ModelComponents.Animation[]}\n   */\n  this.animations = [];\n\n  /**\n   * All articulations in the model as defined by the AGI_articulations extension.\n   *\n   * @type {ModelComponents.Articulation[]}\n   */\n  this.articulations = [];\n\n  /**\n   * Structural metadata containing the schema, property tables, property\n   * textures and property mappings\n   *\n   * @type {StructuralMetadata}\n   * @private\n   */\n  this.structuralMetadata = undefined;\n\n  /**\n   * The model's up axis.\n   *\n   * @type {Axis}\n   * @private\n   */\n  this.upAxis = undefined;\n\n  /**\n   * The model's forward axis.\n   *\n   * @type {Axis}\n   * @private\n   */\n  this.forwardAxis = undefined;\n\n  /**\n   * A world-space transform to apply to the primitives.\n   *\n   * @type {Matrix4}\n   * @private\n   */\n  this.transform = Matrix4.clone(Matrix4.IDENTITY);\n\n  /**\n   * A mapping from extension names like `\"EXT_example_extension\"` to\n   * the object that was created from the extension input\n   *\n   * @type {object}\n   * @private\n   */\n  this.extensions = {};\n}\n\n/**\n * Information about a GPU texture, including the texture itself\n *\n * @alias ModelComponents.TextureReader\n * @constructor\n *\n * @private\n */\nfunction TextureReader() {\n  /**\n   * The underlying GPU texture. The {@link Texture} contains the sampler.\n   *\n   * @type {Texture}\n   * @private\n   */\n  this.texture = undefined;\n\n  /**\n   * The index of the texture in the glTF. This is useful for determining\n   * when textures are shared to avoid attaching a texture in multiple uniform\n   * slots in the shader.\n   *\n   * @type {number}\n   * @private\n   */\n  this.index = undefined;\n\n  /**\n   * The texture coordinate set.\n   *\n   * @type {number}\n   * @default 0\n   * @private\n   */\n  this.texCoord = 0;\n\n  /**\n   * Transformation matrix to apply to texture coordinates.\n   *\n   * @type {Matrix3}\n   * @default Matrix3.IDENTITY\n   */\n  this.transform = Matrix3.clone(Matrix3.IDENTITY);\n\n  /**\n   * Scale to apply to texture values.\n   *\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  this.scale = 1.0;\n\n  /**\n   * The texture channels to read from. When undefined all channels are read.\n   *\n   * @type {string}\n   */\n  this.channels = undefined;\n}\n\n/**\n * Material properties for the PBR metallic roughness shading model.\n *\n * @alias ModelComponents.MetallicRoughness\n * @constructor\n *\n * @private\n */\nfunction MetallicRoughness() {\n  /**\n   * The base color texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.baseColorTexture = undefined;\n\n  /**\n   * The metallic roughness texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.metallicRoughnessTexture = undefined;\n\n  /**\n   * The base color factor.\n   *\n   * @type {Cartesian4}\n   * @default new Cartesian4(1.0, 1.0, 1.0, 1.0)\n   * @private\n   */\n  this.baseColorFactor = Cartesian4.clone(\n    MetallicRoughness.DEFAULT_BASE_COLOR_FACTOR,\n  );\n\n  /**\n   * The metallic factor.\n   *\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  this.metallicFactor = MetallicRoughness.DEFAULT_METALLIC_FACTOR;\n\n  /**\n   * The roughness factor.\n   *\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  this.roughnessFactor = MetallicRoughness.DEFAULT_ROUGHNESS_FACTOR;\n}\n\n/**\n * @private\n */\nMetallicRoughness.DEFAULT_BASE_COLOR_FACTOR = Cartesian4.ONE;\n\n/**\n * @private\n */\nMetallicRoughness.DEFAULT_METALLIC_FACTOR = 1.0;\n\n/**\n * @private\n */\nMetallicRoughness.DEFAULT_ROUGHNESS_FACTOR = 1.0;\n\n/**\n * Material properties for the PBR specular glossiness shading model.\n *\n * @alias ModelComponents.SpecularGlossiness\n * @constructor\n *\n * @private\n */\nfunction SpecularGlossiness() {\n  /**\n   * The diffuse texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.diffuseTexture = undefined;\n\n  /**\n   * The specular glossiness texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.specularGlossinessTexture = undefined;\n\n  /**\n   * The diffuse factor.\n   *\n   * @type {Cartesian4}\n   * @default new Cartesian4(1.0, 1.0, 1.0, 1.0)\n   * @private\n   */\n  this.diffuseFactor = Cartesian4.clone(\n    SpecularGlossiness.DEFAULT_DIFFUSE_FACTOR,\n  );\n\n  /**\n   * The specular factor.\n   *\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   * @private\n   */\n  this.specularFactor = Cartesian3.clone(\n    SpecularGlossiness.DEFAULT_SPECULAR_FACTOR,\n  );\n\n  /**\n   * The glossiness factor.\n   *\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  this.glossinessFactor = SpecularGlossiness.DEFAULT_GLOSSINESS_FACTOR;\n}\n\n/**\n * @private\n */\nSpecularGlossiness.DEFAULT_DIFFUSE_FACTOR = Cartesian4.ONE;\n\n/**\n * @private\n */\nSpecularGlossiness.DEFAULT_SPECULAR_FACTOR = Cartesian3.ONE;\n\n/**\n * @private\n */\nSpecularGlossiness.DEFAULT_GLOSSINESS_FACTOR = 1.0;\n\nfunction Specular() {\n  /**\n   * The specular factor.\n   *\n   * @type {number}\n   * @default 1.0\n   * @private\n   */\n  this.specularFactor = Specular.DEFAULT_SPECULAR_FACTOR;\n\n  /**\n   * The specular texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.specularTexture = undefined;\n\n  /**\n   * The specular color factor.\n   *\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   * @private\n   */\n  this.specularColorFactor = Cartesian3.clone(\n    Specular.DEFAULT_SPECULAR_COLOR_FACTOR,\n  );\n\n  /**\n   * The specular color texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.specularColorTexture = undefined;\n}\n\n/**\n * @private\n */\nSpecular.DEFAULT_SPECULAR_FACTOR = 1.0;\n\n/**\n * @private\n */\nSpecular.DEFAULT_SPECULAR_COLOR_FACTOR = Cartesian3.ONE;\n\nfunction Anisotropy() {\n  /**\n   * The anisotropy strength.\n   *\n   * @type {number}\n   * @default 0.0\n   * @private\n   */\n  this.anisotropyStrength = Anisotropy.DEFAULT_ANISOTROPY_STRENGTH;\n\n  /**\n   * The rotation of the anisotropy in tangent, bitangent space,\n   * measured in radians counter-clockwise from the tangent.\n   *\n   * @type {number}\n   * @default 0.0\n   * @private\n   */\n  this.anisotropyRotation = Anisotropy.DEFAULT_ANISOTROPY_ROTATION;\n\n  /**\n   * The anisotropy texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.anisotropyTexture = undefined;\n}\n\n/**\n * @private\n */\nAnisotropy.DEFAULT_ANISOTROPY_STRENGTH = 0.0;\n\n/**\n * @private\n */\nAnisotropy.DEFAULT_ANISOTROPY_ROTATION = 0.0;\n\nfunction Clearcoat() {\n  /**\n   * The clearcoat layer intensity.\n   *\n   * @type {number}\n   * @default 0.0\n   * @private\n   */\n  this.clearcoatFactor = Clearcoat.DEFAULT_CLEARCOAT_FACTOR;\n\n  /**\n   * The clearcoat layer intensity texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.clearcoatTexture = undefined;\n\n  /**\n   * The clearcoat layer roughness.\n   *\n   * @type {number}\n   * @default 0.0\n   * @private\n   */\n  this.clearcoatRoughnessFactor = Clearcoat.DEFAULT_CLEARCOAT_ROUGHNESS_FACTOR;\n\n  /**\n   * The clearcoat layer roughness texture.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.clearcoatRoughnessTexture = undefined;\n\n  /**\n   * The clearcoat normal map texture.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.clearcoatNormalTexture = undefined;\n}\n\n/**\n * @private\n */\nClearcoat.DEFAULT_CLEARCOAT_FACTOR = 0.0;\n\n/**\n * @private\n */\nClearcoat.DEFAULT_CLEARCOAT_ROUGHNESS_FACTOR = 0.0;\n\n/**\n * The material appearance of a primitive.\n *\n * @alias ModelComponents.Material\n * @constructor\n *\n * @private\n */\nfunction Material() {\n  /**\n   * Material properties for the PBR metallic roughness shading model.\n   *\n   * @type {ModelComponents.MetallicRoughness}\n   * @private\n   */\n  this.metallicRoughness = new MetallicRoughness();\n\n  /**\n   * Material properties for the PBR specular glossiness shading model.\n   *\n   * @type {ModelComponents.SpecularGlossiness}\n   * @private\n   */\n  this.specularGlossiness = undefined;\n\n  /**\n   * Material properties for the PBR specular shading model.\n   *\n   * @type {ModelComponents.Specular}\n   * @private\n   */\n  this.specular = undefined;\n\n  /**\n   * Material properties for the PBR anisotropy shading model.\n   *\n   * @type {ModelComponents.Anisotropy}\n   * @private\n   */\n  this.anisotropy = undefined;\n\n  /**\n   * Material properties for the PBR clearcoat shading model.\n   *\n   * @type {ModelComponents.Clearcoat}\n   * @private\n   */\n  this.clearcoat = undefined;\n\n  /**\n   * The emissive texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.emissiveTexture = undefined;\n\n  /**\n   * The normal texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.normalTexture = undefined;\n\n  /**\n   * The occlusion texture reader.\n   *\n   * @type {ModelComponents.TextureReader}\n   * @private\n   */\n  this.occlusionTexture = undefined;\n\n  /**\n   * The emissive factor.\n   *\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   * @private\n   */\n  this.emissiveFactor = Cartesian3.clone(Material.DEFAULT_EMISSIVE_FACTOR);\n\n  /**\n   * The alpha mode.\n   *\n   * @type {AlphaMode}\n   * @default AlphaMode.OPAQUE\n   * @private\n   */\n  this.alphaMode = AlphaMode.OPAQUE;\n\n  /**\n   * The alpha cutoff value of the material for the MASK alpha mode.\n   *\n   * @type {number}\n   * @default 0.5\n   * @private\n   */\n  this.alphaCutoff = 0.5;\n\n  /**\n   * Specifies whether the material is double sided.\n   *\n   * @type {boolean}\n   * @default false\n   * @private\n   */\n  this.doubleSided = false;\n\n  /**\n   * Specifies whether the material is unlit.\n   *\n   * @type {boolean}\n   * @default false\n   * @private\n   */\n  this.unlit = false;\n}\n\n/**\n * @private\n */\nMaterial.DEFAULT_EMISSIVE_FACTOR = Cartesian3.ZERO;\n\nModelComponents.Quantization = Quantization;\nModelComponents.Attribute = Attribute;\nModelComponents.Indices = Indices;\nModelComponents.FeatureIdAttribute = FeatureIdAttribute;\nModelComponents.FeatureIdTexture = FeatureIdTexture;\nModelComponents.FeatureIdImplicitRange = FeatureIdImplicitRange;\nModelComponents.MorphTarget = MorphTarget;\nModelComponents.Primitive = Primitive;\nModelComponents.Instances = Instances;\nModelComponents.Skin = Skin;\nModelComponents.Node = Node;\nModelComponents.Scene = Scene;\nModelComponents.AnimatedPropertyType = Object.freeze(AnimatedPropertyType);\nModelComponents.AnimationSampler = AnimationSampler;\nModelComponents.AnimationTarget = AnimationTarget;\nModelComponents.AnimationChannel = AnimationChannel;\nModelComponents.Animation = Animation;\nModelComponents.ArticulationStage = ArticulationStage;\nModelComponents.Articulation = Articulation;\nModelComponents.Asset = Asset;\nModelComponents.Components = Components;\nModelComponents.TextureReader = TextureReader;\nModelComponents.MetallicRoughness = MetallicRoughness;\nModelComponents.SpecularGlossiness = SpecularGlossiness;\nModelComponents.Specular = Specular;\nModelComponents.Anisotropy = Anisotropy;\nModelComponents.Clearcoat = Clearcoat;\nModelComponents.Material = Material;\n\nexport default ModelComponents;\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,OAAO,MAAM,oBAAoB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,CAAC,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAAA,EAAG;EACtB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAG,KAAK;;EAEvB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAG,KAAK;;EAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kBAAkB,GAAGC,SAAS;;EAEnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,qBAAqB,GAAGD,SAAS;;EAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACE,yBAAyB,GAAGF,SAAS;;EAE1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACG,uBAAuB,GAAGH,SAAS;;EAExC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACI,iBAAiB,GAAGJ,SAAS;;EAElC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACK,IAAI,GAAGL,SAAS;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,SAASA,CAAA,EAAG;EACnB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,IAAI,GAAGP,SAAS;;EAErB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACQ,QAAQ,GAAGR,SAAS;;EAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACS,QAAQ,GAAGT,SAAS;;EAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACI,iBAAiB,GAAGJ,SAAS;;EAElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACK,IAAI,GAAGL,SAAS;;EAErB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACU,UAAU,GAAG,KAAK;;EAEvB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAGX,SAAS;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACY,GAAG,GAAGZ,SAAS;;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACa,GAAG,GAAGb,SAAS;;EAEpB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACc,QAAQ,GAAGd,SAAS;;EAEzB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACe,YAAY,GAAGf,SAAS;;EAE7B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACgB,UAAU,GAAGhB,SAAS;;EAE3B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACiB,MAAM,GAAGjB,SAAS;;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACkB,UAAU,GAAG,CAAC;;EAEnB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAGnB,SAAS;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoB,OAAOA,CAAA,EAAG;EACjB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAGrB,SAAS;;EAE9B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACW,KAAK,GAAGX,SAAS;;EAEtB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACiB,MAAM,GAAGjB,SAAS;;EAEvB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACgB,UAAU,GAAGhB,SAAS;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsB,kBAAkBA,CAAA,EAAG;EAC5B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,YAAY,GAAGvB,SAAS;;EAE7B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACwB,aAAa,GAAGxB,SAAS;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACyB,eAAe,GAAGzB,SAAS;;EAEhC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACS,QAAQ,GAAGT,SAAS;;EAEzB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC0B,KAAK,GAAG1B,SAAS;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC2B,eAAe,GAAG3B,SAAS;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4B,sBAAsBA,CAAA,EAAG;EAChC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACL,YAAY,GAAGvB,SAAS;;EAE7B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACwB,aAAa,GAAGxB,SAAS;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACyB,eAAe,GAAGzB,SAAS;;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC6B,MAAM,GAAG,CAAC;;EAEf;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,MAAM,GAAG9B,SAAS;;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC0B,KAAK,GAAG1B,SAAS;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC2B,eAAe,GAAG3B,SAAS;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+B,gBAAgBA,CAAA,EAAG;EAC1B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACR,YAAY,GAAGvB,SAAS;;EAE7B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACwB,aAAa,GAAGxB,SAAS;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACyB,eAAe,GAAGzB,SAAS;;EAEhC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACgC,aAAa,GAAGhC,SAAS;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC0B,KAAK,GAAG1B,SAAS;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC2B,eAAe,GAAG3B,SAAS;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiC,WAAWA,CAAA,EAAG;EACrB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAG,EAAE;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAA,EAAG;EACnB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACD,UAAU,GAAG,EAAE;;EAEpB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACE,YAAY,GAAG,EAAE;;EAEtB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,OAAO,GAAGrC,SAAS;;EAExB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACsC,QAAQ,GAAGtC,SAAS;;EAEzB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACuC,aAAa,GAAGvC,SAAS;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACwC,UAAU,GAAG,EAAE;;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kBAAkB,GAAG,EAAE;;EAE5B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,oBAAoB,GAAG,EAAE;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kBAAkB,GAAG3C,SAAS;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4C,SAASA,CAAA,EAAG;EACnB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACV,UAAU,GAAG,EAAE;;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACM,UAAU,GAAG,EAAE;;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACK,qBAAqB,GAAG,KAAK;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAAA,EAAG;EACd;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAG/C,SAAS;;EAEtB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACgD,MAAM,GAAG,EAAE;;EAEhB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,mBAAmB,GAAG,EAAE;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAAA,EAAG;EACd;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC3C,IAAI,GAAGP,SAAS;;EAErB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC+C,KAAK,GAAG/C,SAAS;;EAEtB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACmD,QAAQ,GAAG,EAAE;;EAElB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAG,EAAE;;EAEpB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,SAAS,GAAGrD,SAAS;;EAE1B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACsD,IAAI,GAAGtD,SAAS;;EAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACuD,MAAM,GAAGvD,SAAS;;EAEvB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACwD,WAAW,GAAGxD,SAAS;;EAE5B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACyD,QAAQ,GAAGzD,SAAS;;EAEzB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC0D,KAAK,GAAG1D,SAAS;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC2D,YAAY,GAAG,EAAE;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,gBAAgB,GAAG5D,SAAS;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS6D,KAAKA,CAAA,EAAG;EACf;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAG,EAAE;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG;EAC3BC,WAAW,EAAE,aAAa;EAC1BC,QAAQ,EAAE,UAAU;EACpBC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAAA,EAAG;EAC1B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAG,EAAE;;EAEf;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAGtE,SAAS;;EAE9B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACuE,MAAM,GAAG,EAAE;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAAA,EAAG;EACzB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,IAAI,GAAGzE,SAAS;;EAErB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC0E,IAAI,GAAG1E,SAAS;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2E,gBAAgBA,CAAA,EAAG;EAC1B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,OAAO,GAAG5E,SAAS;;EAExB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC6E,MAAM,GAAG7E,SAAS;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8E,SAASA,CAAA,EAAG;EACnB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACvE,IAAI,GAAGP,SAAS;;EAErB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC+E,QAAQ,GAAG,EAAE;;EAElB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,QAAQ,GAAG,EAAE;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAAA,EAAG;EAC3B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC1E,IAAI,GAAGP,SAAS;;EAErB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACK,IAAI,GAAGL,SAAS;;EAErB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACkF,YAAY,GAAGlF,SAAS;;EAE7B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACmF,YAAY,GAAGnF,SAAS;;EAE7B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACoF,YAAY,GAAGpF,SAAS;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqF,YAAYA,CAAA,EAAG;EACtB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC9E,IAAI,GAAGP,SAAS;;EAErB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACsF,MAAM,GAAG,EAAE;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAAA,EAAG;EACf;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,OAAO,GAAG,EAAE;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAA,EAAG;EACpB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAG,IAAIH,KAAK,CAAC,CAAC;;EAExB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACI,KAAK,GAAG3F,SAAS;;EAEtB;AACF;AACA;AACA;AACA;EACE,IAAI,CAAC8D,KAAK,GAAG,EAAE;;EAEf;AACF;AACA;AACA;AACA;EACE,IAAI,CAAC8B,KAAK,GAAG,EAAE;;EAEf;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAG,EAAE;;EAEpB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAG,EAAE;;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kBAAkB,GAAG/F,SAAS;;EAEnC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACgG,MAAM,GAAGhG,SAAS;;EAEvB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACiG,WAAW,GAAGjG,SAAS;;EAE5B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACkG,SAAS,GAAGxG,OAAO,CAACyG,KAAK,CAACzG,OAAO,CAAC0G,QAAQ,CAAC;;EAEhD;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAA,EAAG;EACvB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,OAAO,GAAGvG,SAAS;;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC+C,KAAK,GAAG/C,SAAS;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACwG,QAAQ,GAAG,CAAC;;EAEjB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACN,SAAS,GAAGzG,OAAO,CAAC0G,KAAK,CAAC1G,OAAO,CAAC2G,QAAQ,CAAC;;EAEhD;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC1C,KAAK,GAAG,GAAG;;EAEhB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACsB,QAAQ,GAAGhF,SAAS;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyG,iBAAiBA,CAAA,EAAG;EAC3B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,gBAAgB,GAAG1G,SAAS;;EAEjC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC2G,wBAAwB,GAAG3G,SAAS;;EAEzC;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC4G,eAAe,GAAGpH,UAAU,CAAC2G,KAAK,CACrCM,iBAAiB,CAACI,yBACpB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAGL,iBAAiB,CAACM,uBAAuB;;EAE/D;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,eAAe,GAAGP,iBAAiB,CAACQ,wBAAwB;AACnE;;AAEA;AACA;AACA;AACAR,iBAAiB,CAACI,yBAAyB,GAAGrH,UAAU,CAAC0H,GAAG;;AAE5D;AACA;AACA;AACAT,iBAAiB,CAACM,uBAAuB,GAAG,GAAG;;AAE/C;AACA;AACA;AACAN,iBAAiB,CAACQ,wBAAwB,GAAG,GAAG;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAAA,EAAG;EAC5B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAGpH,SAAS;;EAE/B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACqH,yBAAyB,GAAGrH,SAAS;;EAE1C;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACsH,aAAa,GAAG9H,UAAU,CAAC2G,KAAK,CACnCgB,kBAAkB,CAACI,sBACrB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAGjI,UAAU,CAAC4G,KAAK,CACpCgB,kBAAkB,CAACM,uBACrB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,gBAAgB,GAAGP,kBAAkB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}