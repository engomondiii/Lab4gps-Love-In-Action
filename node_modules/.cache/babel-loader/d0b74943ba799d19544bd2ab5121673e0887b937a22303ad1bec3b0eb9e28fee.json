{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Defines the interface for data sources, which turn arbitrary data into a\n * {@link EntityCollection} for generic consumption. This object is an interface\n * for documentation purposes and is not intended to be instantiated directly.\n * @alias DataSource\n * @constructor\n *\n * @see Entity\n * @see DataSourceDisplay\n */\nfunction DataSource() {\n  DeveloperError.throwInstantiationError();\n}\nObject.defineProperties(DataSource.prototype, {\n  /**\n   * Gets a human-readable name for this instance.\n   * @memberof DataSource.prototype\n   * @type {string}\n   */\n  name: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the preferred clock settings for this data source.\n   * @memberof DataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof DataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof DataSource.prototype\n   * @type {boolean}\n   */\n  isLoading: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof DataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof DataSource.prototype\n   * @type {Event<function(this, RequestErrorEvent)>}\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets an event that will be raised when the value of isLoading changes.\n   * @memberof DataSource.prototype\n   * @type {Event<function(this, boolean)>}\n   */\n  loadingEvent: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof DataSource.prototype\n   * @type {boolean}\n   */\n  show: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof DataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nDataSource.prototype.update = function (time) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * @private\n */\nDataSource.setLoading = function (dataSource, isLoading) {\n  if (dataSource._isLoading !== isLoading) {\n    if (isLoading) {\n      dataSource._entityCollection.suspendEvents();\n    } else {\n      dataSource._entityCollection.resumeEvents();\n    }\n    dataSource._isLoading = isLoading;\n    dataSource._loading.raiseEvent(dataSource, isLoading);\n  }\n};\nexport default DataSource;","map":{"version":3,"names":["DeveloperError","DataSource","throwInstantiationError","Object","defineProperties","prototype","name","get","clock","entities","isLoading","changedEvent","errorEvent","loadingEvent","show","clustering","update","time","setLoading","dataSource","_isLoading","_entityCollection","suspendEvents","resumeEvents","_loading","raiseEvent"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/DataSource.js"],"sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Defines the interface for data sources, which turn arbitrary data into a\n * {@link EntityCollection} for generic consumption. This object is an interface\n * for documentation purposes and is not intended to be instantiated directly.\n * @alias DataSource\n * @constructor\n *\n * @see Entity\n * @see DataSourceDisplay\n */\nfunction DataSource() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(DataSource.prototype, {\n  /**\n   * Gets a human-readable name for this instance.\n   * @memberof DataSource.prototype\n   * @type {string}\n   */\n  name: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the preferred clock settings for this data source.\n   * @memberof DataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof DataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof DataSource.prototype\n   * @type {boolean}\n   */\n  isLoading: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof DataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof DataSource.prototype\n   * @type {Event<function(this, RequestErrorEvent)>}\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets an event that will be raised when the value of isLoading changes.\n   * @memberof DataSource.prototype\n   * @type {Event<function(this, boolean)>}\n   */\n  loadingEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof DataSource.prototype\n   * @type {boolean}\n   */\n  show: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof DataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nDataSource.prototype.update = function (time) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * @private\n */\nDataSource.setLoading = function (dataSource, isLoading) {\n  if (dataSource._isLoading !== isLoading) {\n    if (isLoading) {\n      dataSource._entityCollection.suspendEvents();\n    } else {\n      dataSource._entityCollection.resumeEvents();\n    }\n    dataSource._isLoading = isLoading;\n    dataSource._loading.raiseEvent(dataSource, isLoading);\n  }\n};\nexport default DataSource;\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,2BAA2B;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAA,EAAG;EACpBD,cAAc,CAACE,uBAAuB,CAAC,CAAC;AAC1C;AAEAC,MAAM,CAACC,gBAAgB,CAACH,UAAU,CAACI,SAAS,EAAE;EAC5C;AACF;AACA;AACA;AACA;EACEC,IAAI,EAAE;IACJC,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;EACEM,KAAK,EAAE;IACLD,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;EACEO,QAAQ,EAAE;IACRF,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;EACEQ,SAAS,EAAE;IACTH,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;EACES,YAAY,EAAE;IACZJ,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;EACEU,UAAU,EAAE;IACVL,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;EACEW,YAAY,EAAE;IACZN,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;EACEY,IAAI,EAAE;IACJP,GAAG,EAAEP,cAAc,CAACE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEa,UAAU,EAAE;IACVR,GAAG,EAAEP,cAAc,CAACE;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,UAAU,CAACI,SAAS,CAACW,MAAM,GAAG,UAAUC,IAAI,EAAE;EAC5CjB,cAAc,CAACE,uBAAuB,CAAC,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACAD,UAAU,CAACiB,UAAU,GAAG,UAAUC,UAAU,EAAET,SAAS,EAAE;EACvD,IAAIS,UAAU,CAACC,UAAU,KAAKV,SAAS,EAAE;IACvC,IAAIA,SAAS,EAAE;MACbS,UAAU,CAACE,iBAAiB,CAACC,aAAa,CAAC,CAAC;IAC9C,CAAC,MAAM;MACLH,UAAU,CAACE,iBAAiB,CAACE,YAAY,CAAC,CAAC;IAC7C;IACAJ,UAAU,CAACC,UAAU,GAAGV,SAAS;IACjCS,UAAU,CAACK,QAAQ,CAACC,UAAU,CAACN,UAAU,EAAET,SAAS,CAAC;EACvD;AACF,CAAC;AACD,eAAeT,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}