{"ast":null,"code":"import defined from \"./defined.js\";\n\n/**\n * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\n * argument out of range, etc.  This exception should only be thrown during development;\n * it usually indicates a bug in the calling code.  This exception should never be\n * caught; instead the calling code should strive not to generate it.\n * <br /><br />\n * On the other hand, a {@link RuntimeError} indicates an exception that may\n * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\n * to catch.\n *\n * @alias DeveloperError\n * @constructor\n * @extends Error\n *\n * @param {string} [message] The error message for this exception.\n *\n * @see RuntimeError\n */\nfunction DeveloperError(message) {\n  /**\n   * 'DeveloperError' indicating that this exception was thrown due to a developer error.\n   * @type {string}\n   * @readonly\n   */\n  this.name = \"DeveloperError\";\n\n  /**\n   * The explanation for why this exception was thrown.\n   * @type {string}\n   * @readonly\n   */\n  this.message = message;\n\n  //Browsers such as IE don't have a stack property until you actually throw the error.\n  let stack;\n  try {\n    throw new Error();\n  } catch (e) {\n    stack = e.stack;\n  }\n\n  /**\n   * The stack trace of this exception, if available.\n   * @type {string}\n   * @readonly\n   */\n  this.stack = stack;\n}\nif (defined(Object.create)) {\n  DeveloperError.prototype = Object.create(Error.prototype);\n  DeveloperError.prototype.constructor = DeveloperError;\n}\nDeveloperError.prototype.toString = function () {\n  let str = `${this.name}: ${this.message}`;\n  if (defined(this.stack)) {\n    str += `\\n${this.stack.toString()}`;\n  }\n  return str;\n};\n\n/**\n * @private\n */\nDeveloperError.throwInstantiationError = function () {\n  throw new DeveloperError(\"This function defines an interface and should not be called directly.\");\n};\nexport default DeveloperError;","map":{"version":3,"names":["defined","DeveloperError","message","name","stack","Error","e","Object","create","prototype","constructor","toString","str","throwInstantiationError"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/DeveloperError.js"],"sourcesContent":["import defined from \"./defined.js\";\n\n/**\n * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\n * argument out of range, etc.  This exception should only be thrown during development;\n * it usually indicates a bug in the calling code.  This exception should never be\n * caught; instead the calling code should strive not to generate it.\n * <br /><br />\n * On the other hand, a {@link RuntimeError} indicates an exception that may\n * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\n * to catch.\n *\n * @alias DeveloperError\n * @constructor\n * @extends Error\n *\n * @param {string} [message] The error message for this exception.\n *\n * @see RuntimeError\n */\nfunction DeveloperError(message) {\n  /**\n   * 'DeveloperError' indicating that this exception was thrown due to a developer error.\n   * @type {string}\n   * @readonly\n   */\n  this.name = \"DeveloperError\";\n\n  /**\n   * The explanation for why this exception was thrown.\n   * @type {string}\n   * @readonly\n   */\n  this.message = message;\n\n  //Browsers such as IE don't have a stack property until you actually throw the error.\n  let stack;\n  try {\n    throw new Error();\n  } catch (e) {\n    stack = e.stack;\n  }\n\n  /**\n   * The stack trace of this exception, if available.\n   * @type {string}\n   * @readonly\n   */\n  this.stack = stack;\n}\n\nif (defined(Object.create)) {\n  DeveloperError.prototype = Object.create(Error.prototype);\n  DeveloperError.prototype.constructor = DeveloperError;\n}\n\nDeveloperError.prototype.toString = function () {\n  let str = `${this.name}: ${this.message}`;\n\n  if (defined(this.stack)) {\n    str += `\\n${this.stack.toString()}`;\n  }\n\n  return str;\n};\n\n/**\n * @private\n */\nDeveloperError.throwInstantiationError = function () {\n  throw new DeveloperError(\n    \"This function defines an interface and should not be called directly.\",\n  );\n};\nexport default DeveloperError;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,OAAO,EAAE;EAC/B;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,IAAI,GAAG,gBAAgB;;EAE5B;AACF;AACA;AACA;AACA;EACE,IAAI,CAACD,OAAO,GAAGA,OAAO;;EAEtB;EACA,IAAIE,KAAK;EACT,IAAI;IACF,MAAM,IAAIC,KAAK,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVF,KAAK,GAAGE,CAAC,CAACF,KAAK;EACjB;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAI,CAACA,KAAK,GAAGA,KAAK;AACpB;AAEA,IAAIJ,OAAO,CAACO,MAAM,CAACC,MAAM,CAAC,EAAE;EAC1BP,cAAc,CAACQ,SAAS,GAAGF,MAAM,CAACC,MAAM,CAACH,KAAK,CAACI,SAAS,CAAC;EACzDR,cAAc,CAACQ,SAAS,CAACC,WAAW,GAAGT,cAAc;AACvD;AAEAA,cAAc,CAACQ,SAAS,CAACE,QAAQ,GAAG,YAAY;EAC9C,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACT,IAAI,KAAK,IAAI,CAACD,OAAO,EAAE;EAEzC,IAAIF,OAAO,CAAC,IAAI,CAACI,KAAK,CAAC,EAAE;IACvBQ,GAAG,IAAI,KAAK,IAAI,CAACR,KAAK,CAACO,QAAQ,CAAC,CAAC,EAAE;EACrC;EAEA,OAAOC,GAAG;AACZ,CAAC;;AAED;AACA;AACA;AACAX,cAAc,CAACY,uBAAuB,GAAG,YAAY;EACnD,MAAM,IAAIZ,cAAc,CACtB,uEACF,CAAC;AACH,CAAC;AACD,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}