{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport ClassificationType from \"../Scene/ClassificationType.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport Entity from \"./Entity.js\";\nimport Property from \"./Property.js\";\nconst defaultMaterial = new ColorMaterialProperty(Color.WHITE);\nconst defaultShow = new ConstantProperty(true);\nconst defaultFill = new ConstantProperty(true);\nconst defaultOutline = new ConstantProperty(false);\nconst defaultOutlineColor = new ConstantProperty(Color.BLACK);\nconst defaultShadows = new ConstantProperty(ShadowMode.DISABLED);\nconst defaultDistanceDisplayCondition = new ConstantProperty(new DistanceDisplayCondition());\nconst defaultClassificationType = new ConstantProperty(ClassificationType.BOTH);\n\n/**\n * An abstract class for updating geometry entities.\n * @alias GeometryUpdater\n * @constructor\n *\n * @param {object} options An object with the following properties:\n * @param {Entity} options.entity The entity containing the geometry to be visualized.\n * @param {Scene} options.scene The scene where visualization is taking place.\n * @param {object} options.geometryOptions Options for the geometry\n * @param {string} options.geometryPropertyName The geometry property name\n * @param {string[]} options.observedPropertyNames The entity properties this geometry cares about\n */\nfunction GeometryUpdater(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.entity\", options.entity);\n  Check.defined(\"options.scene\", options.scene);\n  Check.defined(\"options.geometryOptions\", options.geometryOptions);\n  Check.defined(\"options.geometryPropertyName\", options.geometryPropertyName);\n  Check.defined(\"options.observedPropertyNames\", options.observedPropertyNames);\n  //>>includeEnd('debug');\n\n  const entity = options.entity;\n  const geometryPropertyName = options.geometryPropertyName;\n  this._entity = entity;\n  this._scene = options.scene;\n  this._fillEnabled = false;\n  this._isClosed = false;\n  this._onTerrain = false;\n  this._dynamic = false;\n  this._outlineEnabled = false;\n  this._geometryChanged = new Event();\n  this._showProperty = undefined;\n  this._materialProperty = undefined;\n  this._showOutlineProperty = undefined;\n  this._outlineColorProperty = undefined;\n  this._outlineWidth = 1.0;\n  this._shadowsProperty = undefined;\n  this._distanceDisplayConditionProperty = undefined;\n  this._classificationTypeProperty = undefined;\n  this._options = options.geometryOptions;\n  this._geometryPropertyName = geometryPropertyName;\n  this._id = `${geometryPropertyName}-${entity.id}`;\n  this._observedPropertyNames = options.observedPropertyNames;\n  this._supportsMaterialsforEntitiesOnTerrain = Entity.supportsMaterialsforEntitiesOnTerrain(options.scene);\n}\nObject.defineProperties(GeometryUpdater.prototype, {\n  /**\n   * Gets the unique ID associated with this updater\n   * @memberof GeometryUpdater.prototype\n   * @type {string}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n  /**\n   * Gets the entity associated with this geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Entity}\n   * @readonly\n   */\n  entity: {\n    get: function () {\n      return this._entity;\n    }\n  },\n  /**\n   * Gets a value indicating if the geometry has a fill component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  fillEnabled: {\n    get: function () {\n      return this._fillEnabled;\n    }\n  },\n  /**\n   * Gets a value indicating if fill visibility varies with simulation time.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  hasConstantFill: {\n    get: function () {\n      return !this._fillEnabled || !defined(this._entity.availability) && Property.isConstant(this._showProperty) && Property.isConstant(this._fillProperty);\n    }\n  },\n  /**\n   * Gets the material property used to fill the geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {MaterialProperty}\n   * @readonly\n   */\n  fillMaterialProperty: {\n    get: function () {\n      return this._materialProperty;\n    }\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  outlineEnabled: {\n    get: function () {\n      return this._outlineEnabled;\n    }\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  hasConstantOutline: {\n    get: function () {\n      return !this._outlineEnabled || !defined(this._entity.availability) && Property.isConstant(this._showProperty) && Property.isConstant(this._showOutlineProperty);\n    }\n  },\n  /**\n   * Gets the {@link Color} property for the geometry outline.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  outlineColorProperty: {\n    get: function () {\n      return this._outlineColorProperty;\n    }\n  },\n  /**\n   * Gets the constant with of the geometry outline, in pixels.\n   * This value is only valid if isDynamic is false.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {number}\n   * @readonly\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    }\n  },\n  /**\n   * Gets the property specifying whether the geometry\n   * casts or receives shadows from light sources.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  shadowsProperty: {\n    get: function () {\n      return this._shadowsProperty;\n    }\n  },\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  distanceDisplayConditionProperty: {\n    get: function () {\n      return this._distanceDisplayConditionProperty;\n    }\n  },\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  classificationTypeProperty: {\n    get: function () {\n      return this._classificationTypeProperty;\n    }\n  },\n  /**\n   * Gets a value indicating if the geometry is time-varying.\n   *\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isDynamic: {\n    get: function () {\n      return this._dynamic;\n    }\n  },\n  /**\n   * Gets a value indicating if the geometry is closed.\n   * This property is only valid for static geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isClosed: {\n    get: function () {\n      return this._isClosed;\n    }\n  },\n  /**\n   * Gets a value indicating if the geometry should be drawn on terrain.\n   * @memberof EllipseGeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  onTerrain: {\n    get: function () {\n      return this._onTerrain;\n    }\n  },\n  /**\n   * Gets an event that is raised whenever the public properties\n   * of this updater change.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  geometryChanged: {\n    get: function () {\n      return this._geometryChanged;\n    }\n  }\n});\n\n/**\n * Checks if the geometry is outlined at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {boolean} true if geometry is outlined at the provided time, false otherwise.\n */\nGeometryUpdater.prototype.isOutlineVisible = function (time) {\n  const entity = this._entity;\n  const visible = this._outlineEnabled && entity.isAvailable(time) && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time);\n  return defaultValue(visible, false);\n};\n\n/**\n * Checks if the geometry is filled at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {boolean} true if geometry is filled at the provided time, false otherwise.\n */\nGeometryUpdater.prototype.isFilled = function (time) {\n  const entity = this._entity;\n  const visible = this._fillEnabled && entity.isAvailable(time) && this._showProperty.getValue(time) && this._fillProperty.getValue(time);\n  return defaultValue(visible, false);\n};\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nGeometryUpdater.prototype.createFillGeometryInstance = DeveloperError.throwInstantiationError;\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nGeometryUpdater.prototype.createOutlineGeometryInstance = DeveloperError.throwInstantiationError;\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n */\nGeometryUpdater.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nGeometryUpdater.prototype.destroy = function () {\n  destroyObject(this);\n};\n/**\n * @param {Entity} entity\n * @param {object} geometry\n * @private\n */\nGeometryUpdater.prototype._isHidden = function (entity, geometry) {\n  const show = geometry.show;\n  return defined(show) && show.isConstant && !show.getValue(Iso8601.MINIMUM_VALUE);\n};\n\n/**\n * @param {Entity} entity\n * @param {object} geometry\n * @private\n */\nGeometryUpdater.prototype._isOnTerrain = function (entity, geometry) {\n  return false;\n};\n\n/**\n * @param {GeometryOptions} options\n * @private\n */\nGeometryUpdater.prototype._getIsClosed = function (options) {\n  return true;\n};\n\n/**\n * @param {Entity} entity\n * @param {object} geometry\n * @private\n */\nGeometryUpdater.prototype._isDynamic = DeveloperError.throwInstantiationError;\n\n/**\n * @param {Entity} entity\n * @param {object} geometry\n * @private\n */\nGeometryUpdater.prototype._setStaticOptions = DeveloperError.throwInstantiationError;\n\n/**\n * @param {Entity} entity\n * @param {string} propertyName\n * @param {*} newValue\n * @param {*} oldValue\n * @private\n */\nGeometryUpdater.prototype._onEntityPropertyChanged = function (entity, propertyName, newValue, oldValue) {\n  if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n    return;\n  }\n  const geometry = this._entity[this._geometryPropertyName];\n  if (!defined(geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n  const fillProperty = geometry.fill;\n  const fillEnabled = defined(fillProperty) && fillProperty.isConstant ? fillProperty.getValue(Iso8601.MINIMUM_VALUE) : true;\n  const outlineProperty = geometry.outline;\n  let outlineEnabled = defined(outlineProperty);\n  if (outlineEnabled && outlineProperty.isConstant) {\n    outlineEnabled = outlineProperty.getValue(Iso8601.MINIMUM_VALUE);\n  }\n  if (!fillEnabled && !outlineEnabled) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n  const show = geometry.show;\n  if (this._isHidden(entity, geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n  this._materialProperty = defaultValue(geometry.material, defaultMaterial);\n  this._fillProperty = defaultValue(fillProperty, defaultFill);\n  this._showProperty = defaultValue(show, defaultShow);\n  this._showOutlineProperty = defaultValue(geometry.outline, defaultOutline);\n  this._outlineColorProperty = outlineEnabled ? defaultValue(geometry.outlineColor, defaultOutlineColor) : undefined;\n  this._shadowsProperty = defaultValue(geometry.shadows, defaultShadows);\n  this._distanceDisplayConditionProperty = defaultValue(geometry.distanceDisplayCondition, defaultDistanceDisplayCondition);\n  this._classificationTypeProperty = defaultValue(geometry.classificationType, defaultClassificationType);\n  this._fillEnabled = fillEnabled;\n  const onTerrain = this._isOnTerrain(entity, geometry) && (this._supportsMaterialsforEntitiesOnTerrain || this._materialProperty instanceof ColorMaterialProperty);\n  if (outlineEnabled && onTerrain) {\n    oneTimeWarning(oneTimeWarning.geometryOutlines);\n    outlineEnabled = false;\n  }\n  this._onTerrain = onTerrain;\n  this._outlineEnabled = outlineEnabled;\n  if (this._isDynamic(entity, geometry)) {\n    if (!this._dynamic) {\n      this._dynamic = true;\n      this._geometryChanged.raiseEvent(this);\n    }\n  } else {\n    this._setStaticOptions(entity, geometry);\n    this._isClosed = this._getIsClosed(this._options);\n    const outlineWidth = geometry.outlineWidth;\n    this._outlineWidth = defined(outlineWidth) ? outlineWidth.getValue(Iso8601.MINIMUM_VALUE) : 1.0;\n    this._dynamic = false;\n    this._geometryChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n *\n * @param {PrimitiveCollection} primitives The primitive collection to use.\n * @param {PrimitiveCollection} [groundPrimitives] The primitive collection to use for ground primitives.\n *\n * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n *\n * @exception {DeveloperError} This instance does not represent dynamic geometry.\n * @private\n */\nGeometryUpdater.prototype.createDynamicUpdater = function (primitives, groundPrimitives) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"primitives\", primitives);\n  Check.defined(\"groundPrimitives\", groundPrimitives);\n  if (!this._dynamic) {\n    throw new DeveloperError(\"This instance does not represent dynamic geometry.\");\n  }\n  //>>includeEnd('debug');\n\n  return new this.constructor.DynamicGeometryUpdater(this, primitives, groundPrimitives);\n};\nexport default GeometryUpdater;","map":{"version":3,"names":["Check","Color","defaultValue","defined","destroyObject","DeveloperError","DistanceDisplayCondition","Event","Iso8601","oneTimeWarning","ClassificationType","ShadowMode","ColorMaterialProperty","ConstantProperty","Entity","Property","defaultMaterial","WHITE","defaultShow","defaultFill","defaultOutline","defaultOutlineColor","BLACK","defaultShadows","DISABLED","defaultDistanceDisplayCondition","defaultClassificationType","BOTH","GeometryUpdater","options","entity","scene","geometryOptions","geometryPropertyName","observedPropertyNames","_entity","_scene","_fillEnabled","_isClosed","_onTerrain","_dynamic","_outlineEnabled","_geometryChanged","_showProperty","undefined","_materialProperty","_showOutlineProperty","_outlineColorProperty","_outlineWidth","_shadowsProperty","_distanceDisplayConditionProperty","_classificationTypeProperty","_options","_geometryPropertyName","_id","id","_observedPropertyNames","_supportsMaterialsforEntitiesOnTerrain","supportsMaterialsforEntitiesOnTerrain","Object","defineProperties","prototype","get","fillEnabled","hasConstantFill","availability","isConstant","_fillProperty","fillMaterialProperty","outlineEnabled","hasConstantOutline","outlineColorProperty","outlineWidth","shadowsProperty","distanceDisplayConditionProperty","classificationTypeProperty","isDynamic","isClosed","onTerrain","geometryChanged","isOutlineVisible","time","visible","isAvailable","getValue","isFilled","createFillGeometryInstance","throwInstantiationError","createOutlineGeometryInstance","isDestroyed","destroy","_isHidden","geometry","show","MINIMUM_VALUE","_isOnTerrain","_getIsClosed","_isDynamic","_setStaticOptions","_onEntityPropertyChanged","propertyName","newValue","oldValue","indexOf","raiseEvent","fillProperty","fill","outlineProperty","outline","material","outlineColor","shadows","distanceDisplayCondition","classificationType","geometryOutlines","createDynamicUpdater","primitives","groundPrimitives","constructor","DynamicGeometryUpdater"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/GeometryUpdater.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport ClassificationType from \"../Scene/ClassificationType.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport Entity from \"./Entity.js\";\nimport Property from \"./Property.js\";\n\nconst defaultMaterial = new ColorMaterialProperty(Color.WHITE);\nconst defaultShow = new ConstantProperty(true);\nconst defaultFill = new ConstantProperty(true);\nconst defaultOutline = new ConstantProperty(false);\nconst defaultOutlineColor = new ConstantProperty(Color.BLACK);\nconst defaultShadows = new ConstantProperty(ShadowMode.DISABLED);\nconst defaultDistanceDisplayCondition = new ConstantProperty(\n  new DistanceDisplayCondition(),\n);\nconst defaultClassificationType = new ConstantProperty(ClassificationType.BOTH);\n\n/**\n * An abstract class for updating geometry entities.\n * @alias GeometryUpdater\n * @constructor\n *\n * @param {object} options An object with the following properties:\n * @param {Entity} options.entity The entity containing the geometry to be visualized.\n * @param {Scene} options.scene The scene where visualization is taking place.\n * @param {object} options.geometryOptions Options for the geometry\n * @param {string} options.geometryPropertyName The geometry property name\n * @param {string[]} options.observedPropertyNames The entity properties this geometry cares about\n */\nfunction GeometryUpdater(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.entity\", options.entity);\n  Check.defined(\"options.scene\", options.scene);\n  Check.defined(\"options.geometryOptions\", options.geometryOptions);\n  Check.defined(\"options.geometryPropertyName\", options.geometryPropertyName);\n  Check.defined(\"options.observedPropertyNames\", options.observedPropertyNames);\n  //>>includeEnd('debug');\n\n  const entity = options.entity;\n  const geometryPropertyName = options.geometryPropertyName;\n\n  this._entity = entity;\n  this._scene = options.scene;\n  this._fillEnabled = false;\n  this._isClosed = false;\n  this._onTerrain = false;\n  this._dynamic = false;\n  this._outlineEnabled = false;\n  this._geometryChanged = new Event();\n  this._showProperty = undefined;\n  this._materialProperty = undefined;\n  this._showOutlineProperty = undefined;\n  this._outlineColorProperty = undefined;\n  this._outlineWidth = 1.0;\n  this._shadowsProperty = undefined;\n  this._distanceDisplayConditionProperty = undefined;\n  this._classificationTypeProperty = undefined;\n  this._options = options.geometryOptions;\n  this._geometryPropertyName = geometryPropertyName;\n  this._id = `${geometryPropertyName}-${entity.id}`;\n  this._observedPropertyNames = options.observedPropertyNames;\n  this._supportsMaterialsforEntitiesOnTerrain =\n    Entity.supportsMaterialsforEntitiesOnTerrain(options.scene);\n}\n\nObject.defineProperties(GeometryUpdater.prototype, {\n  /**\n   * Gets the unique ID associated with this updater\n   * @memberof GeometryUpdater.prototype\n   * @type {string}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the entity associated with this geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Entity}\n   * @readonly\n   */\n  entity: {\n    get: function () {\n      return this._entity;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has a fill component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  fillEnabled: {\n    get: function () {\n      return this._fillEnabled;\n    },\n  },\n  /**\n   * Gets a value indicating if fill visibility varies with simulation time.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  hasConstantFill: {\n    get: function () {\n      return (\n        !this._fillEnabled ||\n        (!defined(this._entity.availability) &&\n          Property.isConstant(this._showProperty) &&\n          Property.isConstant(this._fillProperty))\n      );\n    },\n  },\n  /**\n   * Gets the material property used to fill the geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {MaterialProperty}\n   * @readonly\n   */\n  fillMaterialProperty: {\n    get: function () {\n      return this._materialProperty;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  outlineEnabled: {\n    get: function () {\n      return this._outlineEnabled;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  hasConstantOutline: {\n    get: function () {\n      return (\n        !this._outlineEnabled ||\n        (!defined(this._entity.availability) &&\n          Property.isConstant(this._showProperty) &&\n          Property.isConstant(this._showOutlineProperty))\n      );\n    },\n  },\n  /**\n   * Gets the {@link Color} property for the geometry outline.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  outlineColorProperty: {\n    get: function () {\n      return this._outlineColorProperty;\n    },\n  },\n  /**\n   * Gets the constant with of the geometry outline, in pixels.\n   * This value is only valid if isDynamic is false.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {number}\n   * @readonly\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n  },\n  /**\n   * Gets the property specifying whether the geometry\n   * casts or receives shadows from light sources.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  shadowsProperty: {\n    get: function () {\n      return this._shadowsProperty;\n    },\n  },\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  distanceDisplayConditionProperty: {\n    get: function () {\n      return this._distanceDisplayConditionProperty;\n    },\n  },\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  classificationTypeProperty: {\n    get: function () {\n      return this._classificationTypeProperty;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry is time-varying.\n   *\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isDynamic: {\n    get: function () {\n      return this._dynamic;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry is closed.\n   * This property is only valid for static geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isClosed: {\n    get: function () {\n      return this._isClosed;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry should be drawn on terrain.\n   * @memberof EllipseGeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  onTerrain: {\n    get: function () {\n      return this._onTerrain;\n    },\n  },\n  /**\n   * Gets an event that is raised whenever the public properties\n   * of this updater change.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  geometryChanged: {\n    get: function () {\n      return this._geometryChanged;\n    },\n  },\n});\n\n/**\n * Checks if the geometry is outlined at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {boolean} true if geometry is outlined at the provided time, false otherwise.\n */\nGeometryUpdater.prototype.isOutlineVisible = function (time) {\n  const entity = this._entity;\n  const visible =\n    this._outlineEnabled &&\n    entity.isAvailable(time) &&\n    this._showProperty.getValue(time) &&\n    this._showOutlineProperty.getValue(time);\n  return defaultValue(visible, false);\n};\n\n/**\n * Checks if the geometry is filled at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {boolean} true if geometry is filled at the provided time, false otherwise.\n */\nGeometryUpdater.prototype.isFilled = function (time) {\n  const entity = this._entity;\n  const visible =\n    this._fillEnabled &&\n    entity.isAvailable(time) &&\n    this._showProperty.getValue(time) &&\n    this._fillProperty.getValue(time);\n  return defaultValue(visible, false);\n};\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nGeometryUpdater.prototype.createFillGeometryInstance =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nGeometryUpdater.prototype.createOutlineGeometryInstance =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n */\nGeometryUpdater.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nGeometryUpdater.prototype.destroy = function () {\n  destroyObject(this);\n};\n/**\n * @param {Entity} entity\n * @param {object} geometry\n * @private\n */\nGeometryUpdater.prototype._isHidden = function (entity, geometry) {\n  const show = geometry.show;\n  return (\n    defined(show) && show.isConstant && !show.getValue(Iso8601.MINIMUM_VALUE)\n  );\n};\n\n/**\n * @param {Entity} entity\n * @param {object} geometry\n * @private\n */\nGeometryUpdater.prototype._isOnTerrain = function (entity, geometry) {\n  return false;\n};\n\n/**\n * @param {GeometryOptions} options\n * @private\n */\nGeometryUpdater.prototype._getIsClosed = function (options) {\n  return true;\n};\n\n/**\n * @param {Entity} entity\n * @param {object} geometry\n * @private\n */\nGeometryUpdater.prototype._isDynamic = DeveloperError.throwInstantiationError;\n\n/**\n * @param {Entity} entity\n * @param {object} geometry\n * @private\n */\nGeometryUpdater.prototype._setStaticOptions =\n  DeveloperError.throwInstantiationError;\n\n/**\n * @param {Entity} entity\n * @param {string} propertyName\n * @param {*} newValue\n * @param {*} oldValue\n * @private\n */\nGeometryUpdater.prototype._onEntityPropertyChanged = function (\n  entity,\n  propertyName,\n  newValue,\n  oldValue,\n) {\n  if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n    return;\n  }\n\n  const geometry = this._entity[this._geometryPropertyName];\n\n  if (!defined(geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  const fillProperty = geometry.fill;\n  const fillEnabled =\n    defined(fillProperty) && fillProperty.isConstant\n      ? fillProperty.getValue(Iso8601.MINIMUM_VALUE)\n      : true;\n\n  const outlineProperty = geometry.outline;\n  let outlineEnabled = defined(outlineProperty);\n  if (outlineEnabled && outlineProperty.isConstant) {\n    outlineEnabled = outlineProperty.getValue(Iso8601.MINIMUM_VALUE);\n  }\n\n  if (!fillEnabled && !outlineEnabled) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  const show = geometry.show;\n  if (this._isHidden(entity, geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  this._materialProperty = defaultValue(geometry.material, defaultMaterial);\n  this._fillProperty = defaultValue(fillProperty, defaultFill);\n  this._showProperty = defaultValue(show, defaultShow);\n  this._showOutlineProperty = defaultValue(geometry.outline, defaultOutline);\n  this._outlineColorProperty = outlineEnabled\n    ? defaultValue(geometry.outlineColor, defaultOutlineColor)\n    : undefined;\n  this._shadowsProperty = defaultValue(geometry.shadows, defaultShadows);\n  this._distanceDisplayConditionProperty = defaultValue(\n    geometry.distanceDisplayCondition,\n    defaultDistanceDisplayCondition,\n  );\n  this._classificationTypeProperty = defaultValue(\n    geometry.classificationType,\n    defaultClassificationType,\n  );\n\n  this._fillEnabled = fillEnabled;\n\n  const onTerrain =\n    this._isOnTerrain(entity, geometry) &&\n    (this._supportsMaterialsforEntitiesOnTerrain ||\n      this._materialProperty instanceof ColorMaterialProperty);\n\n  if (outlineEnabled && onTerrain) {\n    oneTimeWarning(oneTimeWarning.geometryOutlines);\n    outlineEnabled = false;\n  }\n\n  this._onTerrain = onTerrain;\n  this._outlineEnabled = outlineEnabled;\n\n  if (this._isDynamic(entity, geometry)) {\n    if (!this._dynamic) {\n      this._dynamic = true;\n      this._geometryChanged.raiseEvent(this);\n    }\n  } else {\n    this._setStaticOptions(entity, geometry);\n    this._isClosed = this._getIsClosed(this._options);\n    const outlineWidth = geometry.outlineWidth;\n    this._outlineWidth = defined(outlineWidth)\n      ? outlineWidth.getValue(Iso8601.MINIMUM_VALUE)\n      : 1.0;\n    this._dynamic = false;\n    this._geometryChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n *\n * @param {PrimitiveCollection} primitives The primitive collection to use.\n * @param {PrimitiveCollection} [groundPrimitives] The primitive collection to use for ground primitives.\n *\n * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n *\n * @exception {DeveloperError} This instance does not represent dynamic geometry.\n * @private\n */\nGeometryUpdater.prototype.createDynamicUpdater = function (\n  primitives,\n  groundPrimitives,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"primitives\", primitives);\n  Check.defined(\"groundPrimitives\", groundPrimitives);\n\n  if (!this._dynamic) {\n    throw new DeveloperError(\n      \"This instance does not represent dynamic geometry.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  return new this.constructor.DynamicGeometryUpdater(\n    this,\n    primitives,\n    groundPrimitives,\n  );\n};\nexport default GeometryUpdater;\n"],"mappings":"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A;AACA;AACA;AACA;AACA;EACEyB,oBAAoB,EAAE;IACpBT,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACf,qBAAqB;IACnC;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEyB,YAAY,EAAE;IACZV,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACd,aAAa;IAC3B;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEyB,eAAe,EAAE;IACfX,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACb,gBAAgB;IAC9B;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEyB,gCAAgC,EAAE;IAChCZ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACZ,iCAAiC;IAC/C;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEyB,0BAA0B,EAAE;IAC1Bb,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACX,2BAA2B;IACzC;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEyB,SAAS,EAAE;IACTd,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACtB,QAAQ;IACtB;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEqC,QAAQ,EAAE;IACRf,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACxB,SAAS;IACvB;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEwC,SAAS,EAAE;IACThB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACvB,UAAU;IACxB;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEwC,eAAe,EAAE;IACfjB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACpB,gBAAgB;IAC9B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}