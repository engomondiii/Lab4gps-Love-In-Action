{"ast":null,"code":"import defined from \"../Core/defined.js\";\n\n/**\n * Return the `MetadataClassProperty` from the given schema that\n * matches the given description.\n *\n * If the given schema is `undefined`, then `undefined` is returned.\n * If the given `schemaId` is defined but does not match the ID\n * of the given schema, then `undefined` is returned.\n * If the given schema does not have a class with the given name,\n * or the class does not have a property with the given name,\n * then `undefined` is returned.\n *\n * Otherwise, the `MetadataClassProperty` is returned.\n *\n * @param {object} schema The schema object\n * @param {string|undefined} schemaId The ID of the metadata schema\n * @param {string} className The name of the metadata class\n * @param {string} propertyName The name of the metadata property\n * @returns {MetadataClassProperty|undefined}\n * @private\n */\nfunction getMetadataClassProperty(schema, schemaId, className, propertyName) {\n  if (!defined(schema)) {\n    return undefined;\n  }\n  if (defined(schemaId) && schema.id !== schemaId) {\n    return undefined;\n  }\n  const classes = schema.classes || {};\n  const metadataClass = classes[className];\n  if (!defined(metadataClass)) {\n    return undefined;\n  }\n  const properties = metadataClass.properties || {};\n  const metadataProperty = properties[propertyName];\n  if (!defined(metadataProperty)) {\n    return undefined;\n  }\n  return metadataProperty;\n}\nexport default getMetadataClassProperty;","map":{"version":3,"names":["defined","getMetadataClassProperty","schema","schemaId","className","propertyName","undefined","id","classes","metadataClass","properties","metadataProperty"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/getMetadataClassProperty.js"],"sourcesContent":["import defined from \"../Core/defined.js\";\n\n/**\n * Return the `MetadataClassProperty` from the given schema that\n * matches the given description.\n *\n * If the given schema is `undefined`, then `undefined` is returned.\n * If the given `schemaId` is defined but does not match the ID\n * of the given schema, then `undefined` is returned.\n * If the given schema does not have a class with the given name,\n * or the class does not have a property with the given name,\n * then `undefined` is returned.\n *\n * Otherwise, the `MetadataClassProperty` is returned.\n *\n * @param {object} schema The schema object\n * @param {string|undefined} schemaId The ID of the metadata schema\n * @param {string} className The name of the metadata class\n * @param {string} propertyName The name of the metadata property\n * @returns {MetadataClassProperty|undefined}\n * @private\n */\nfunction getMetadataClassProperty(schema, schemaId, className, propertyName) {\n  if (!defined(schema)) {\n    return undefined;\n  }\n  if (defined(schemaId) && schema.id !== schemaId) {\n    return undefined;\n  }\n  const classes = schema.classes || {};\n  const metadataClass = classes[className];\n  if (!defined(metadataClass)) {\n    return undefined;\n  }\n  const properties = metadataClass.properties || {};\n  const metadataProperty = properties[propertyName];\n  if (!defined(metadataProperty)) {\n    return undefined;\n  }\n  return metadataProperty;\n}\n\nexport default getMetadataClassProperty;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,oBAAoB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,YAAY,EAAE;EAC3E,IAAI,CAACL,OAAO,CAACE,MAAM,CAAC,EAAE;IACpB,OAAOI,SAAS;EAClB;EACA,IAAIN,OAAO,CAACG,QAAQ,CAAC,IAAID,MAAM,CAACK,EAAE,KAAKJ,QAAQ,EAAE;IAC/C,OAAOG,SAAS;EAClB;EACA,MAAME,OAAO,GAAGN,MAAM,CAACM,OAAO,IAAI,CAAC,CAAC;EACpC,MAAMC,aAAa,GAAGD,OAAO,CAACJ,SAAS,CAAC;EACxC,IAAI,CAACJ,OAAO,CAACS,aAAa,CAAC,EAAE;IAC3B,OAAOH,SAAS;EAClB;EACA,MAAMI,UAAU,GAAGD,aAAa,CAACC,UAAU,IAAI,CAAC,CAAC;EACjD,MAAMC,gBAAgB,GAAGD,UAAU,CAACL,YAAY,CAAC;EACjD,IAAI,CAACL,OAAO,CAACW,gBAAgB,CAAC,EAAE;IAC9B,OAAOL,SAAS;EAClB;EACA,OAAOK,gBAAgB;AACzB;AAEA,eAAeV,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}