{"ast":null,"code":"import * as protobuf from \"protobufjs/dist/minimal/protobuf.js\";\nimport buildModuleUrl from \"./buildModuleUrl.js\";\nimport Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport GoogleEarthEnterpriseTileInformation from \"./GoogleEarthEnterpriseTileInformation.js\";\nimport isBitSet from \"./isBitSet.js\";\nimport loadAndExecuteScript from \"./loadAndExecuteScript.js\";\nimport CesiumMath from \"./Math.js\";\nimport Request from \"./Request.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nimport TaskProcessor from \"./TaskProcessor.js\";\nfunction stringToBuffer(str) {\n  const len = str.length;\n  const buffer = new ArrayBuffer(len);\n  const ui8 = new Uint8Array(buffer);\n  for (let i = 0; i < len; ++i) {\n    ui8[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\n// Decodes packet with a key that has been around since the beginning of Google Earth Enterprise\nconst defaultKey = stringToBuffer(\"\\x45\\xf4\\xbd\\x0b\\x79\\xe2\\x6a\\x45\\x22\\x05\\x92\\x2c\\x17\\xcd\\x06\\x71\\xf8\\x49\\x10\\x46\\x67\\x51\\x00\\x42\\x25\\xc6\\xe8\\x61\\x2c\\x66\\x29\\x08\\xc6\\x34\\xdc\\x6a\\x62\\x25\\x79\\x0a\\x77\\x1d\\x6d\\x69\\xd6\\xf0\\x9c\\x6b\\x93\\xa1\\xbd\\x4e\\x75\\xe0\\x41\\x04\\x5b\\xdf\\x40\\x56\\x0c\\xd9\\xbb\\x72\\x9b\\x81\\x7c\\x10\\x33\\x53\\xee\\x4f\\x6c\\xd4\\x71\\x05\\xb0\\x7b\\xc0\\x7f\\x45\\x03\\x56\\x5a\\xad\\x77\\x55\\x65\\x0b\\x33\\x92\\x2a\\xac\\x19\\x6c\\x35\\x14\\xc5\\x1d\\x30\\x73\\xf8\\x33\\x3e\\x6d\\x46\\x38\\x4a\\xb4\\xdd\\xf0\\x2e\\xdd\\x17\\x75\\x16\\xda\\x8c\\x44\\x74\\x22\\x06\\xfa\\x61\\x22\\x0c\\x33\\x22\\x53\\x6f\\xaf\\x39\\x44\\x0b\\x8c\\x0e\\x39\\xd9\\x39\\x13\\x4c\\xb9\\xbf\\x7f\\xab\\x5c\\x8c\\x50\\x5f\\x9f\\x22\\x75\\x78\\x1f\\xe9\\x07\\x71\\x91\\x68\\x3b\\xc1\\xc4\\x9b\\x7f\\xf0\\x3c\\x56\\x71\\x48\\x82\\x05\\x27\\x55\\x66\\x59\\x4e\\x65\\x1d\\x98\\x75\\xa3\\x61\\x46\\x7d\\x61\\x3f\\x15\\x41\\x00\\x9f\\x14\\x06\\xd7\\xb4\\x34\\x4d\\xce\\x13\\x87\\x46\\xb0\\x1a\\xd5\\x05\\x1c\\xb8\\x8a\\x27\\x7b\\x8b\\xdc\\x2b\\xbb\\x4d\\x67\\x30\\xc8\\xd1\\xf6\\x5c\\x8f\\x50\\xfa\\x5b\\x2f\\x46\\x9b\\x6e\\x35\\x18\\x2f\\x27\\x43\\x2e\\xeb\\x0a\\x0c\\x5e\\x10\\x05\\x10\\xa5\\x73\\x1b\\x65\\x34\\xe5\\x6c\\x2e\\x6a\\x43\\x27\\x63\\x14\\x23\\x55\\xa9\\x3f\\x71\\x7b\\x67\\x43\\x7d\\x3a\\xaf\\xcd\\xe2\\x54\\x55\\x9c\\xfd\\x4b\\xc6\\xe2\\x9f\\x2f\\x28\\xed\\xcb\\x5c\\xc6\\x2d\\x66\\x07\\x88\\xa7\\x3b\\x2f\\x18\\x2a\\x22\\x4e\\x0e\\xb0\\x6b\\x2e\\xdd\\x0d\\x95\\x7d\\x7d\\x47\\xba\\x43\\xb2\\x11\\xb2\\x2b\\x3e\\x4d\\xaa\\x3e\\x7d\\xe6\\xce\\x49\\x89\\xc6\\xe6\\x78\\x0c\\x61\\x31\\x05\\x2d\\x01\\xa4\\x4f\\xa5\\x7e\\x71\\x20\\x88\\xec\\x0d\\x31\\xe8\\x4e\\x0b\\x00\\x6e\\x50\\x68\\x7d\\x17\\x3d\\x08\\x0d\\x17\\x95\\xa6\\x6e\\xa3\\x68\\x97\\x24\\x5b\\x6b\\xf3\\x17\\x23\\xf3\\xb6\\x73\\xb3\\x0d\\x0b\\x40\\xc0\\x9f\\xd8\\x04\\x51\\x5d\\xfa\\x1a\\x17\\x22\\x2e\\x15\\x6a\\xdf\\x49\\x00\\xb9\\xa0\\x77\\x55\\xc6\\xef\\x10\\x6a\\xbf\\x7b\\x47\\x4c\\x7f\\x83\\x17\\x05\\xee\\xdc\\xdc\\x46\\x85\\xa9\\xad\\x53\\x07\\x2b\\x53\\x34\\x06\\x07\\xff\\x14\\x94\\x59\\x19\\x02\\xe4\\x38\\xe8\\x31\\x83\\x4e\\xb9\\x58\\x46\\x6b\\xcb\\x2d\\x23\\x86\\x92\\x70\\x00\\x35\\x88\\x22\\xcf\\x31\\xb2\\x26\\x2f\\xe7\\xc3\\x75\\x2d\\x36\\x2c\\x72\\x74\\xb0\\x23\\x47\\xb7\\xd3\\xd1\\x26\\x16\\x85\\x37\\x72\\xe2\\x00\\x8c\\x44\\xcf\\x10\\xda\\x33\\x2d\\x1a\\xde\\x60\\x86\\x69\\x23\\x69\\x2a\\x7c\\xcd\\x4b\\x51\\x0d\\x95\\x54\\x39\\x77\\x2e\\x29\\xea\\x1b\\xa6\\x50\\xa2\\x6a\\x8f\\x6f\\x50\\x99\\x5c\\x3e\\x54\\xfb\\xef\\x50\\x5b\\x0b\\x07\\x45\\x17\\x89\\x6d\\x28\\x13\\x77\\x37\\x1d\\xdb\\x8e\\x1e\\x4a\\x05\\x66\\x4a\\x6f\\x99\\x20\\xe5\\x70\\xe2\\xb9\\x71\\x7e\\x0c\\x6d\\x49\\x04\\x2d\\x7a\\xfe\\x72\\xc7\\xf2\\x59\\x30\\x8f\\xbb\\x02\\x5d\\x73\\xe5\\xc9\\x20\\xea\\x78\\xec\\x20\\x90\\xf0\\x8a\\x7f\\x42\\x17\\x7c\\x47\\x19\\x60\\xb0\\x16\\xbd\\x26\\xb7\\x71\\xb6\\xc7\\x9f\\x0e\\xd1\\x33\\x82\\x3d\\xd3\\xab\\xee\\x63\\x99\\xc8\\x2b\\x53\\xa0\\x44\\x5c\\x71\\x01\\xc6\\xcc\\x44\\x1f\\x32\\x4f\\x3c\\xca\\xc0\\x29\\x3d\\x52\\xd3\\x61\\x19\\x58\\xa9\\x7d\\x65\\xb4\\xdc\\xcf\\x0d\\xf4\\x3d\\xf1\\x08\\xa9\\x42\\xda\\x23\\x09\\xd8\\xbf\\x5e\\x50\\x49\\xf8\\x4d\\xc0\\xcb\\x47\\x4c\\x1c\\x4f\\xf7\\x7b\\x2b\\xd8\\x16\\x18\\xc5\\x31\\x92\\x3b\\xb5\\x6f\\xdc\\x6c\\x0d\\x92\\x88\\x16\\xd1\\x9e\\xdb\\x3f\\xe2\\xe9\\xda\\x5f\\xd4\\x84\\xe2\\x46\\x61\\x5a\\xde\\x1c\\x55\\xcf\\xa4\\x00\\xbe\\xfd\\xce\\x67\\xf1\\x4a\\x69\\x1c\\x97\\xe6\\x20\\x48\\xd8\\x5d\\x7f\\x7e\\xae\\x71\\x20\\x0e\\x4e\\xae\\xc0\\x56\\xa9\\x91\\x01\\x3c\\x82\\x1d\\x0f\\x72\\xe7\\x76\\xec\\x29\\x49\\xd6\\x5d\\x2d\\x83\\xe3\\xdb\\x36\\x06\\xa9\\x3b\\x66\\x13\\x97\\x87\\x6a\\xd5\\xb6\\x3d\\x50\\x5e\\x52\\xb9\\x4b\\xc7\\x73\\x57\\x78\\xc9\\xf4\\x2e\\x59\\x07\\x95\\x93\\x6f\\xd0\\x4b\\x17\\x57\\x19\\x3e\\x27\\x27\\xc7\\x60\\xdb\\x3b\\xed\\x9a\\x0e\\x53\\x44\\x16\\x3e\\x3f\\x8d\\x92\\x6d\\x77\\xa2\\x0a\\xeb\\x3f\\x52\\xa8\\xc6\\x55\\x5e\\x31\\x49\\x37\\x85\\xf4\\xc5\\x1f\\x26\\x2d\\xa9\\x1c\\xbf\\x8b\\x27\\x54\\xda\\xc3\\x6a\\x20\\xe5\\x2a\\x78\\x04\\xb0\\xd6\\x90\\x70\\x72\\xaa\\x8b\\x68\\xbd\\x88\\xf7\\x02\\x5f\\x48\\xb1\\x7e\\xc0\\x58\\x4c\\x3f\\x66\\x1a\\xf9\\x3e\\xe1\\x65\\xc0\\x70\\xa7\\xcf\\x38\\x69\\xaf\\xf0\\x56\\x6c\\x64\\x49\\x9c\\x27\\xad\\x78\\x74\\x4f\\xc2\\x87\\xde\\x56\\x39\\x00\\xda\\x77\\x0b\\xcb\\x2d\\x1b\\x89\\xfb\\x35\\x4f\\x02\\xf5\\x08\\x51\\x13\\x60\\xc1\\x0a\\x5a\\x47\\x4d\\x26\\x1c\\x33\\x30\\x78\\xda\\xc0\\x9c\\x46\\x47\\xe2\\x5b\\x79\\x60\\x49\\x6e\\x37\\x67\\x53\\x0a\\x3e\\xe9\\xec\\x46\\x39\\xb2\\xf1\\x34\\x0d\\xc6\\x84\\x53\\x75\\x6e\\xe1\\x0c\\x59\\xd9\\x1e\\xde\\x29\\x85\\x10\\x7b\\x49\\x49\\xa5\\x77\\x79\\xbe\\x49\\x56\\x2e\\x36\\xe7\\x0b\\x3a\\xbb\\x4f\\x03\\x62\\x7b\\xd2\\x4d\\x31\\x95\\x2f\\xbd\\x38\\x7b\\xa8\\x4f\\x21\\xe1\\xec\\x46\\x70\\x76\\x95\\x7d\\x29\\x22\\x78\\x88\\x0a\\x90\\xdd\\x9d\\x5c\\xda\\xde\\x19\\x51\\xcf\\xf0\\xfc\\x59\\x52\\x65\\x7c\\x33\\x13\\xdf\\xf3\\x48\\xda\\xbb\\x2a\\x75\\xdb\\x60\\xb2\\x02\\x15\\xd4\\xfc\\x19\\xed\\x1b\\xec\\x7f\\x35\\xa8\\xff\\x28\\x31\\x07\\x2d\\x12\\xc8\\xdc\\x88\\x46\\x7c\\x8a\\x5b\\x22\");\n\n/**\n * <div class=\"notice\">\n * To construct GoogleEarthEnterpriseMetadata, call {@link GoogleEarthEnterpriseMetadata.fromUrl}. Do not call the constructor directly.\n * </div>\n *\n * Provides metadata using the Google Earth Enterprise REST API. This is used by the GoogleEarthEnterpriseImageryProvider\n *  and GoogleEarthEnterpriseTerrainProvider to share metadata requests.\n *\n * @alias GoogleEarthEnterpriseMetadata\n * @constructor\n *\n * @see GoogleEarthEnterpriseImageryProvider\n * @see GoogleEarthEnterpriseTerrainProvider\n *\n */\nfunction GoogleEarthEnterpriseMetadata(resourceOrUrl) {\n  /**\n   * True if imagery is available.\n   * @type {boolean}\n   * @default true\n   */\n  this.imageryPresent = true;\n\n  /**\n   * True if imagery is sent as a protocol buffer, false if sent as plain images. If undefined we will try both.\n   * @type {boolean|undefined}\n   * @default undefined\n   */\n  this.protoImagery = undefined;\n\n  /**\n   * True if terrain is available.\n   * @type {boolean}\n   * @default true\n   */\n  this.terrainPresent = true;\n\n  /**\n   * Exponent used to compute constant to calculate negative height values.\n   * @type {number}\n   * @default 32\n   */\n  this.negativeAltitudeExponentBias = 32;\n\n  /**\n   * Threshold where any numbers smaller are actually negative values. They are multiplied by -2^negativeAltitudeExponentBias.\n   * @type {number}\n   * @default EPSILON12\n   */\n  this.negativeAltitudeThreshold = CesiumMath.EPSILON12;\n\n  /**\n   * Dictionary of provider id to copyright strings.\n   * @type {object}\n   * @default {}\n   */\n  this.providers = {};\n\n  /**\n   * Key used to decode packets\n   * @type {ArrayBuffer}\n   */\n  this.key = undefined;\n  this._resource = undefined;\n  this._quadPacketVersion = 1;\n  this._tileInfo = {};\n  this._subtreePromises = {};\n}\nObject.defineProperties(GoogleEarthEnterpriseMetadata.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    }\n  },\n  /**\n   * Gets the proxy used for metadata requests.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n  /**\n   * Gets the resource used for metadata requests.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Resource}\n   * @readonly\n   */\n  resource: {\n    get: function () {\n      return this._resource;\n    }\n  }\n});\n\n/**\n * Creates a metadata object using the Google Earth Enterprise REST API. This is used by the GoogleEarthEnterpriseImageryProvider\n * and GoogleEarthEnterpriseTerrainProvider to share metadata requests.\n *\n * @param {Resource|String} resourceOrUrl The url of the Google Earth Enterprise server hosting the imagery.\n *\n * @returns {Promise<GoogleEarthEnterpriseMetadata>} A promise which resolves to the created GoogleEarthEnterpriseMetadata instance/\n */\nGoogleEarthEnterpriseMetadata.fromUrl = async function (resourceOrUrl) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"resourceOrUrl\", resourceOrUrl);\n  //>>includeEnd('debug');\n  let url = resourceOrUrl;\n  if (typeof url !== \"string\" && !(url instanceof Resource)) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.string(\"resourceOrUrl.url\", resourceOrUrl.url);\n    //>>includeEnd('debug');\n\n    url = resourceOrUrl.url;\n  }\n  const resource = Resource.createIfNeeded(url);\n  resource.appendForwardSlash();\n  const metadata = new GoogleEarthEnterpriseMetadata();\n  metadata._resource = resource;\n  try {\n    await requestDbRoot(metadata);\n    await metadata.getQuadTreePacket(\"\", metadata._quadPacketVersion);\n  } catch (error) {\n    const message = `An error occurred while accessing ${getMetadataResource(metadata, \"\", 1).url}: ${error}`;\n    throw new RuntimeError(message);\n  }\n  return metadata;\n};\n\n/**\n * Converts a tiles (x, y, level) position into a quadkey used to request an image\n * from a Google Earth Enterprise server.\n *\n * @param {number} x The tile's x coordinate.\n * @param {number} y The tile's y coordinate.\n * @param {number} level The tile's zoom level.\n *\n * @see GoogleEarthEnterpriseMetadata#quadKeyToTileXY\n */\nGoogleEarthEnterpriseMetadata.tileXYToQuadKey = function (x, y, level) {\n  let quadkey = \"\";\n  for (let i = level; i >= 0; --i) {\n    const bitmask = 1 << i;\n    let digit = 0;\n\n    // Tile Layout\n    // ___ ___\n    //|   |   |\n    //| 3 | 2 |\n    //|-------|\n    //| 0 | 1 |\n    //|___|___|\n    //\n\n    if (!isBitSet(y, bitmask)) {\n      // Top Row\n      digit |= 2;\n      if (!isBitSet(x, bitmask)) {\n        // Right to left\n        digit |= 1;\n      }\n    } else if (isBitSet(x, bitmask)) {\n      // Left to right\n      digit |= 1;\n    }\n    quadkey += digit;\n  }\n  return quadkey;\n};\n\n/**\n * Converts a tile's quadkey used to request an image from a Google Earth Enterprise server into the\n * (x, y, level) position.\n *\n * @param {string} quadkey The tile's quad key\n *\n * @see GoogleEarthEnterpriseMetadata#tileXYToQuadKey\n */\nGoogleEarthEnterpriseMetadata.quadKeyToTileXY = function (quadkey) {\n  let x = 0;\n  let y = 0;\n  const level = quadkey.length - 1;\n  for (let i = level; i >= 0; --i) {\n    const bitmask = 1 << i;\n    const digit = +quadkey[level - i];\n    if (isBitSet(digit, 2)) {\n      // Top Row\n      if (!isBitSet(digit, 1)) {\n        // // Right to left\n        x |= bitmask;\n      }\n    } else {\n      y |= bitmask;\n      if (isBitSet(digit, 1)) {\n        // Left to right\n        x |= bitmask;\n      }\n    }\n  }\n  return {\n    x: x,\n    y: y,\n    level: level\n  };\n};\nGoogleEarthEnterpriseMetadata.prototype.isValid = function (quadKey) {\n  let info = this.getTileInformationFromQuadKey(quadKey);\n  if (defined(info)) {\n    return info !== null;\n  }\n  let valid = true;\n  let q = quadKey;\n  let last;\n  while (q.length > 1) {\n    last = q.substring(q.length - 1);\n    q = q.substring(0, q.length - 1);\n    info = this.getTileInformationFromQuadKey(q);\n    if (defined(info)) {\n      if (!info.hasSubtree() && !info.hasChild(parseInt(last))) {\n        // We have no subtree or child available at some point in this node's ancestry\n        valid = false;\n      }\n      break;\n    } else if (info === null) {\n      // Some node in the ancestry was loaded and said there wasn't a subtree\n      valid = false;\n      break;\n    }\n  }\n  return valid;\n};\nconst taskProcessor = new TaskProcessor(\"decodeGoogleEarthEnterprisePacket\");\n\n/**\n * Retrieves a Google Earth Enterprise quadtree packet.\n *\n * @param {string} [quadKey=''] The quadkey to retrieve the packet for.\n * @param {number} [version=1] The cnode version to be used in the request.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getQuadTreePacket = function (quadKey, version, request) {\n  version = defaultValue(version, 1);\n  quadKey = defaultValue(quadKey, \"\");\n  const resource = getMetadataResource(this, quadKey, version, request);\n  const promise = resource.fetchArrayBuffer();\n  if (!defined(promise)) {\n    return undefined; // Throttled\n  }\n  const tileInfo = this._tileInfo;\n  const key = this.key;\n  return promise.then(function (metadata) {\n    const decodePromise = taskProcessor.scheduleTask({\n      buffer: metadata,\n      quadKey: quadKey,\n      type: \"Metadata\",\n      key: key\n    }, [metadata]);\n    return decodePromise.then(function (result) {\n      let root;\n      let topLevelKeyLength = -1;\n      if (quadKey !== \"\") {\n        // Root tile has no data except children bits, so put them into the tile info\n        topLevelKeyLength = quadKey.length + 1;\n        const top = result[quadKey];\n        root = tileInfo[quadKey];\n        root._bits |= top._bits;\n        delete result[quadKey];\n      }\n\n      // Copy the resulting objects into tileInfo\n      // Make sure we start with shorter quadkeys first, so we know the parents have\n      //  already been processed. Otherwise we can lose ancestorHasTerrain along the way.\n      const keys = Object.keys(result);\n      keys.sort(function (a, b) {\n        return a.length - b.length;\n      });\n      const keysLength = keys.length;\n      for (let i = 0; i < keysLength; ++i) {\n        const key = keys[i];\n        const r = result[key];\n        if (r !== null) {\n          const info = GoogleEarthEnterpriseTileInformation.clone(result[key]);\n          const keyLength = key.length;\n          if (keyLength === topLevelKeyLength) {\n            info.setParent(root);\n          } else if (keyLength > 1) {\n            const parent = tileInfo[key.substring(0, key.length - 1)];\n            info.setParent(parent);\n          }\n          tileInfo[key] = info;\n        } else {\n          tileInfo[key] = null;\n        }\n      }\n    });\n  });\n};\n\n/**\n * Populates the metadata subtree down to the specified tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise<GoogleEarthEnterpriseTileInformation>} A promise that resolves to the tile info for the requested quad key\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.populateSubtree = function (x, y, level, request) {\n  const quadkey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  return populateSubtree(this, quadkey, request);\n};\nfunction populateSubtree(that, quadKey, request) {\n  const tileInfo = that._tileInfo;\n  let q = quadKey;\n  let t = tileInfo[q];\n  // If we have tileInfo make sure sure it is not a node with a subtree that's not loaded\n  if (defined(t) && (!t.hasSubtree() || t.hasChildren())) {\n    return t;\n  }\n  while (t === undefined && q.length > 1) {\n    q = q.substring(0, q.length - 1);\n    t = tileInfo[q];\n  }\n  let subtreeRequest;\n  const subtreePromises = that._subtreePromises;\n  let promise = subtreePromises[q];\n  if (defined(promise)) {\n    return promise.then(function () {\n      // Recursively call this in case we need multiple subtree requests\n      subtreeRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction\n      });\n      return populateSubtree(that, quadKey, subtreeRequest);\n    });\n  }\n\n  // t is either\n  //   null so one of its parents was a leaf node, so this tile doesn't exist\n  //   exists but doesn't have a subtree to request\n  //   undefined so no parent exists - this shouldn't ever happen once the provider is ready\n  if (!defined(t) || !t.hasSubtree()) {\n    return Promise.reject(new RuntimeError(`Couldn't load metadata for tile ${quadKey}`));\n  }\n\n  // We need to split up the promise here because when will execute syncronously if getQuadTreePacket\n  //  is already resolved (like in the tests), so subtreePromises will never get cleared out.\n  //  Only the initial request will also remove the promise from subtreePromises.\n  promise = that.getQuadTreePacket(q, t.cnodeVersion, request);\n  if (!defined(promise)) {\n    return undefined;\n  }\n  subtreePromises[q] = promise;\n  return promise.then(function () {\n    // Recursively call this in case we need multiple subtree requests\n    subtreeRequest = new Request({\n      throttle: request.throttle,\n      throttleByServer: request.throttleByServer,\n      type: request.type,\n      priorityFunction: request.priorityFunction\n    });\n    return populateSubtree(that, quadKey, subtreeRequest);\n  }).finally(function () {\n    delete subtreePromises[q];\n  });\n}\n\n/**\n * Gets information about a tile\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @returns {GoogleEarthEnterpriseTileInformation|undefined} Information about the tile or undefined if it isn't loaded.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getTileInformation = function (x, y, level) {\n  const quadkey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  return this._tileInfo[quadkey];\n};\n\n/**\n * Gets information about a tile from a quadKey\n *\n * @param {string} quadkey The quadkey for the tile\n * @returns {GoogleEarthEnterpriseTileInformation|undefined} Information about the tile or undefined if it isn't loaded.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getTileInformationFromQuadKey = function (quadkey) {\n  return this._tileInfo[quadkey];\n};\nfunction getMetadataResource(that, quadKey, version, request) {\n  return that._resource.getDerivedResource({\n    url: `flatfile?q2-0${quadKey}-q.${version.toString()}`,\n    request: request\n  });\n}\nlet dbrootParser;\nlet dbrootParserPromise;\nfunction requestDbRoot(that) {\n  const resource = that._resource.getDerivedResource({\n    url: \"dbRoot.v5\",\n    queryParameters: {\n      output: \"proto\"\n    }\n  });\n  if (!defined(dbrootParserPromise)) {\n    const url = buildModuleUrl(\"ThirdParty/google-earth-dbroot-parser.js\");\n    const oldValue = window.cesiumGoogleEarthDbRootParser;\n    dbrootParserPromise = loadAndExecuteScript(url).then(function () {\n      dbrootParser = window.cesiumGoogleEarthDbRootParser(protobuf);\n      if (defined(oldValue)) {\n        window.cesiumGoogleEarthDbRootParser = oldValue;\n      } else {\n        delete window.cesiumGoogleEarthDbRootParser;\n      }\n    });\n  }\n  return dbrootParserPromise.then(function () {\n    return resource.fetchArrayBuffer();\n  }).then(function (buf) {\n    const encryptedDbRootProto = dbrootParser.EncryptedDbRootProto.decode(new Uint8Array(buf));\n    let byteArray = encryptedDbRootProto.encryptionData;\n    let offset = byteArray.byteOffset;\n    let end = offset + byteArray.byteLength;\n    const key = that.key = byteArray.buffer.slice(offset, end);\n    byteArray = encryptedDbRootProto.dbrootData;\n    offset = byteArray.byteOffset;\n    end = offset + byteArray.byteLength;\n    const dbRootCompressed = byteArray.buffer.slice(offset, end);\n    return taskProcessor.scheduleTask({\n      buffer: dbRootCompressed,\n      type: \"DbRoot\",\n      key: key\n    }, [dbRootCompressed]);\n  }).then(function (result) {\n    const dbRoot = dbrootParser.DbRootProto.decode(new Uint8Array(result.buffer));\n    that.imageryPresent = defaultValue(dbRoot.imageryPresent, that.imageryPresent);\n    that.protoImagery = dbRoot.protoImagery;\n    that.terrainPresent = defaultValue(dbRoot.terrainPresent, that.terrainPresent);\n    if (defined(dbRoot.endSnippet) && defined(dbRoot.endSnippet.model)) {\n      const model = dbRoot.endSnippet.model;\n      that.negativeAltitudeExponentBias = defaultValue(model.negativeAltitudeExponentBias, that.negativeAltitudeExponentBias);\n      that.negativeAltitudeThreshold = defaultValue(model.compressedNegativeAltitudeThreshold, that.negativeAltitudeThreshold);\n    }\n    if (defined(dbRoot.databaseVersion)) {\n      that._quadPacketVersion = defaultValue(dbRoot.databaseVersion.quadtreeVersion, that._quadPacketVersion);\n    }\n    const providers = that.providers;\n    const providerInfo = defaultValue(dbRoot.providerInfo, []);\n    const count = providerInfo.length;\n    for (let i = 0; i < count; ++i) {\n      const provider = providerInfo[i];\n      const copyrightString = provider.copyrightString;\n      if (defined(copyrightString)) {\n        providers[provider.providerId] = new Credit(copyrightString.value);\n      }\n    }\n  }).catch(function () {\n    // Just eat the error and use the default values.\n    console.log(`Failed to retrieve ${resource.url}. Using defaults.`);\n    that.key = defaultKey;\n  });\n}\nexport default GoogleEarthEnterpriseMetadata;","map":{"version":3,"names":["protobuf","buildModuleUrl","Check","Credit","defaultValue","defined","GoogleEarthEnterpriseTileInformation","isBitSet","loadAndExecuteScript","CesiumMath","Request","Resource","RuntimeError","TaskProcessor","stringToBuffer","str","len","length","buffer","ArrayBuffer","ui8","Uint8Array","i","charCodeAt","defaultKey","GoogleEarthEnterpriseMetadata","resourceOrUrl","imageryPresent","protoImagery","undefined","terrainPresent","negativeAltitudeExponentBias","negativeAltitudeThreshold","EPSILON12","providers","key","_resource","_quadPacketVersion","_tileInfo","_subtreePromises","Object","defineProperties","prototype","url","get","proxy","resource","fromUrl","typeOf","string","createIfNeeded","appendForwardSlash","metadata","requestDbRoot","getQuadTreePacket","error","message","getMetadataResource","tileXYToQuadKey","x","y","level","quadkey","bitmask","digit","quadKeyToTileXY","isValid","quadKey","info","getTileInformationFromQuadKey","valid","q","last","substring","hasSubtree","hasChild","parseInt","taskProcessor","version","request","promise","fetchArrayBuffer","tileInfo","then","decodePromise","scheduleTask","type","result","root","topLevelKeyLength","top","_bits","keys","sort","a","b","keysLength","r","clone","keyLength","setParent","parent","populateSubtree","that","t","hasChildren","subtreeRequest","subtreePromises","throttle","throttleByServer","priorityFunction","Promise","reject","cnodeVersion","finally","getTileInformation","getDerivedResource","toString","dbrootParser","dbrootParserPromise","queryParameters","output","oldValue","window","cesiumGoogleEarthDbRootParser","buf","encryptedDbRootProto","EncryptedDbRootProto","decode","byteArray","encryptionData","offset","byteOffset","end","byteLength","slice","dbrootData","dbRootCompressed","dbRoot","DbRootProto","endSnippet","model","compressedNegativeAltitudeThreshold","databaseVersion","quadtreeVersion","providerInfo","count","provider","copyrightString","providerId","value","catch","console","log"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/GoogleEarthEnterpriseMetadata.js"],"sourcesContent":["import * as protobuf from \"protobufjs/dist/minimal/protobuf.js\";\nimport buildModuleUrl from \"./buildModuleUrl.js\";\nimport Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport GoogleEarthEnterpriseTileInformation from \"./GoogleEarthEnterpriseTileInformation.js\";\nimport isBitSet from \"./isBitSet.js\";\nimport loadAndExecuteScript from \"./loadAndExecuteScript.js\";\nimport CesiumMath from \"./Math.js\";\nimport Request from \"./Request.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nimport TaskProcessor from \"./TaskProcessor.js\";\n\nfunction stringToBuffer(str) {\n  const len = str.length;\n  const buffer = new ArrayBuffer(len);\n  const ui8 = new Uint8Array(buffer);\n  for (let i = 0; i < len; ++i) {\n    ui8[i] = str.charCodeAt(i);\n  }\n\n  return buffer;\n}\n\n// Decodes packet with a key that has been around since the beginning of Google Earth Enterprise\nconst defaultKey = stringToBuffer(\n  \"\\x45\\xf4\\xbd\\x0b\\x79\\xe2\\x6a\\x45\\x22\\x05\\x92\\x2c\\x17\\xcd\\x06\\x71\\xf8\\x49\\x10\\x46\\x67\\x51\\x00\\x42\\x25\\xc6\\xe8\\x61\\x2c\\x66\\x29\\x08\\xc6\\x34\\xdc\\x6a\\x62\\x25\\x79\\x0a\\x77\\x1d\\x6d\\x69\\xd6\\xf0\\x9c\\x6b\\x93\\xa1\\xbd\\x4e\\x75\\xe0\\x41\\x04\\x5b\\xdf\\x40\\x56\\x0c\\xd9\\xbb\\x72\\x9b\\x81\\x7c\\x10\\x33\\x53\\xee\\x4f\\x6c\\xd4\\x71\\x05\\xb0\\x7b\\xc0\\x7f\\x45\\x03\\x56\\x5a\\xad\\x77\\x55\\x65\\x0b\\x33\\x92\\x2a\\xac\\x19\\x6c\\x35\\x14\\xc5\\x1d\\x30\\x73\\xf8\\x33\\x3e\\x6d\\x46\\x38\\x4a\\xb4\\xdd\\xf0\\x2e\\xdd\\x17\\x75\\x16\\xda\\x8c\\x44\\x74\\x22\\x06\\xfa\\x61\\x22\\x0c\\x33\\x22\\x53\\x6f\\xaf\\x39\\x44\\x0b\\x8c\\x0e\\x39\\xd9\\x39\\x13\\x4c\\xb9\\xbf\\x7f\\xab\\x5c\\x8c\\x50\\x5f\\x9f\\x22\\x75\\x78\\x1f\\xe9\\x07\\x71\\x91\\x68\\x3b\\xc1\\xc4\\x9b\\x7f\\xf0\\x3c\\x56\\x71\\x48\\x82\\x05\\x27\\x55\\x66\\x59\\x4e\\x65\\x1d\\x98\\x75\\xa3\\x61\\x46\\x7d\\x61\\x3f\\x15\\x41\\x00\\x9f\\x14\\x06\\xd7\\xb4\\x34\\x4d\\xce\\x13\\x87\\x46\\xb0\\x1a\\xd5\\x05\\x1c\\xb8\\x8a\\x27\\x7b\\x8b\\xdc\\x2b\\xbb\\x4d\\x67\\x30\\xc8\\xd1\\xf6\\x5c\\x8f\\x50\\xfa\\x5b\\x2f\\x46\\x9b\\x6e\\x35\\x18\\x2f\\x27\\x43\\x2e\\xeb\\x0a\\x0c\\x5e\\x10\\x05\\x10\\xa5\\x73\\x1b\\x65\\x34\\xe5\\x6c\\x2e\\x6a\\x43\\x27\\x63\\x14\\x23\\x55\\xa9\\x3f\\x71\\x7b\\x67\\x43\\x7d\\x3a\\xaf\\xcd\\xe2\\x54\\x55\\x9c\\xfd\\x4b\\xc6\\xe2\\x9f\\x2f\\x28\\xed\\xcb\\x5c\\xc6\\x2d\\x66\\x07\\x88\\xa7\\x3b\\x2f\\x18\\x2a\\x22\\x4e\\x0e\\xb0\\x6b\\x2e\\xdd\\x0d\\x95\\x7d\\x7d\\x47\\xba\\x43\\xb2\\x11\\xb2\\x2b\\x3e\\x4d\\xaa\\x3e\\x7d\\xe6\\xce\\x49\\x89\\xc6\\xe6\\x78\\x0c\\x61\\x31\\x05\\x2d\\x01\\xa4\\x4f\\xa5\\x7e\\x71\\x20\\x88\\xec\\x0d\\x31\\xe8\\x4e\\x0b\\x00\\x6e\\x50\\x68\\x7d\\x17\\x3d\\x08\\x0d\\x17\\x95\\xa6\\x6e\\xa3\\x68\\x97\\x24\\x5b\\x6b\\xf3\\x17\\x23\\xf3\\xb6\\x73\\xb3\\x0d\\x0b\\x40\\xc0\\x9f\\xd8\\x04\\x51\\x5d\\xfa\\x1a\\x17\\x22\\x2e\\x15\\x6a\\xdf\\x49\\x00\\xb9\\xa0\\x77\\x55\\xc6\\xef\\x10\\x6a\\xbf\\x7b\\x47\\x4c\\x7f\\x83\\x17\\x05\\xee\\xdc\\xdc\\x46\\x85\\xa9\\xad\\x53\\x07\\x2b\\x53\\x34\\x06\\x07\\xff\\x14\\x94\\x59\\x19\\x02\\xe4\\x38\\xe8\\x31\\x83\\x4e\\xb9\\x58\\x46\\x6b\\xcb\\x2d\\x23\\x86\\x92\\x70\\x00\\x35\\x88\\x22\\xcf\\x31\\xb2\\x26\\x2f\\xe7\\xc3\\x75\\x2d\\x36\\x2c\\x72\\x74\\xb0\\x23\\x47\\xb7\\xd3\\xd1\\x26\\x16\\x85\\x37\\x72\\xe2\\x00\\x8c\\x44\\xcf\\x10\\xda\\x33\\x2d\\x1a\\xde\\x60\\x86\\x69\\x23\\x69\\x2a\\x7c\\xcd\\x4b\\x51\\x0d\\x95\\x54\\x39\\x77\\x2e\\x29\\xea\\x1b\\xa6\\x50\\xa2\\x6a\\x8f\\x6f\\x50\\x99\\x5c\\x3e\\x54\\xfb\\xef\\x50\\x5b\\x0b\\x07\\x45\\x17\\x89\\x6d\\x28\\x13\\x77\\x37\\x1d\\xdb\\x8e\\x1e\\x4a\\x05\\x66\\x4a\\x6f\\x99\\x20\\xe5\\x70\\xe2\\xb9\\x71\\x7e\\x0c\\x6d\\x49\\x04\\x2d\\x7a\\xfe\\x72\\xc7\\xf2\\x59\\x30\\x8f\\xbb\\x02\\x5d\\x73\\xe5\\xc9\\x20\\xea\\x78\\xec\\x20\\x90\\xf0\\x8a\\x7f\\x42\\x17\\x7c\\x47\\x19\\x60\\xb0\\x16\\xbd\\x26\\xb7\\x71\\xb6\\xc7\\x9f\\x0e\\xd1\\x33\\x82\\x3d\\xd3\\xab\\xee\\x63\\x99\\xc8\\x2b\\x53\\xa0\\x44\\x5c\\x71\\x01\\xc6\\xcc\\x44\\x1f\\x32\\x4f\\x3c\\xca\\xc0\\x29\\x3d\\x52\\xd3\\x61\\x19\\x58\\xa9\\x7d\\x65\\xb4\\xdc\\xcf\\x0d\\xf4\\x3d\\xf1\\x08\\xa9\\x42\\xda\\x23\\x09\\xd8\\xbf\\x5e\\x50\\x49\\xf8\\x4d\\xc0\\xcb\\x47\\x4c\\x1c\\x4f\\xf7\\x7b\\x2b\\xd8\\x16\\x18\\xc5\\x31\\x92\\x3b\\xb5\\x6f\\xdc\\x6c\\x0d\\x92\\x88\\x16\\xd1\\x9e\\xdb\\x3f\\xe2\\xe9\\xda\\x5f\\xd4\\x84\\xe2\\x46\\x61\\x5a\\xde\\x1c\\x55\\xcf\\xa4\\x00\\xbe\\xfd\\xce\\x67\\xf1\\x4a\\x69\\x1c\\x97\\xe6\\x20\\x48\\xd8\\x5d\\x7f\\x7e\\xae\\x71\\x20\\x0e\\x4e\\xae\\xc0\\x56\\xa9\\x91\\x01\\x3c\\x82\\x1d\\x0f\\x72\\xe7\\x76\\xec\\x29\\x49\\xd6\\x5d\\x2d\\x83\\xe3\\xdb\\x36\\x06\\xa9\\x3b\\x66\\x13\\x97\\x87\\x6a\\xd5\\xb6\\x3d\\x50\\x5e\\x52\\xb9\\x4b\\xc7\\x73\\x57\\x78\\xc9\\xf4\\x2e\\x59\\x07\\x95\\x93\\x6f\\xd0\\x4b\\x17\\x57\\x19\\x3e\\x27\\x27\\xc7\\x60\\xdb\\x3b\\xed\\x9a\\x0e\\x53\\x44\\x16\\x3e\\x3f\\x8d\\x92\\x6d\\x77\\xa2\\x0a\\xeb\\x3f\\x52\\xa8\\xc6\\x55\\x5e\\x31\\x49\\x37\\x85\\xf4\\xc5\\x1f\\x26\\x2d\\xa9\\x1c\\xbf\\x8b\\x27\\x54\\xda\\xc3\\x6a\\x20\\xe5\\x2a\\x78\\x04\\xb0\\xd6\\x90\\x70\\x72\\xaa\\x8b\\x68\\xbd\\x88\\xf7\\x02\\x5f\\x48\\xb1\\x7e\\xc0\\x58\\x4c\\x3f\\x66\\x1a\\xf9\\x3e\\xe1\\x65\\xc0\\x70\\xa7\\xcf\\x38\\x69\\xaf\\xf0\\x56\\x6c\\x64\\x49\\x9c\\x27\\xad\\x78\\x74\\x4f\\xc2\\x87\\xde\\x56\\x39\\x00\\xda\\x77\\x0b\\xcb\\x2d\\x1b\\x89\\xfb\\x35\\x4f\\x02\\xf5\\x08\\x51\\x13\\x60\\xc1\\x0a\\x5a\\x47\\x4d\\x26\\x1c\\x33\\x30\\x78\\xda\\xc0\\x9c\\x46\\x47\\xe2\\x5b\\x79\\x60\\x49\\x6e\\x37\\x67\\x53\\x0a\\x3e\\xe9\\xec\\x46\\x39\\xb2\\xf1\\x34\\x0d\\xc6\\x84\\x53\\x75\\x6e\\xe1\\x0c\\x59\\xd9\\x1e\\xde\\x29\\x85\\x10\\x7b\\x49\\x49\\xa5\\x77\\x79\\xbe\\x49\\x56\\x2e\\x36\\xe7\\x0b\\x3a\\xbb\\x4f\\x03\\x62\\x7b\\xd2\\x4d\\x31\\x95\\x2f\\xbd\\x38\\x7b\\xa8\\x4f\\x21\\xe1\\xec\\x46\\x70\\x76\\x95\\x7d\\x29\\x22\\x78\\x88\\x0a\\x90\\xdd\\x9d\\x5c\\xda\\xde\\x19\\x51\\xcf\\xf0\\xfc\\x59\\x52\\x65\\x7c\\x33\\x13\\xdf\\xf3\\x48\\xda\\xbb\\x2a\\x75\\xdb\\x60\\xb2\\x02\\x15\\xd4\\xfc\\x19\\xed\\x1b\\xec\\x7f\\x35\\xa8\\xff\\x28\\x31\\x07\\x2d\\x12\\xc8\\xdc\\x88\\x46\\x7c\\x8a\\x5b\\x22\",\n);\n\n/**\n * <div class=\"notice\">\n * To construct GoogleEarthEnterpriseMetadata, call {@link GoogleEarthEnterpriseMetadata.fromUrl}. Do not call the constructor directly.\n * </div>\n *\n * Provides metadata using the Google Earth Enterprise REST API. This is used by the GoogleEarthEnterpriseImageryProvider\n *  and GoogleEarthEnterpriseTerrainProvider to share metadata requests.\n *\n * @alias GoogleEarthEnterpriseMetadata\n * @constructor\n *\n * @see GoogleEarthEnterpriseImageryProvider\n * @see GoogleEarthEnterpriseTerrainProvider\n *\n */\nfunction GoogleEarthEnterpriseMetadata(resourceOrUrl) {\n  /**\n   * True if imagery is available.\n   * @type {boolean}\n   * @default true\n   */\n  this.imageryPresent = true;\n\n  /**\n   * True if imagery is sent as a protocol buffer, false if sent as plain images. If undefined we will try both.\n   * @type {boolean|undefined}\n   * @default undefined\n   */\n  this.protoImagery = undefined;\n\n  /**\n   * True if terrain is available.\n   * @type {boolean}\n   * @default true\n   */\n  this.terrainPresent = true;\n\n  /**\n   * Exponent used to compute constant to calculate negative height values.\n   * @type {number}\n   * @default 32\n   */\n  this.negativeAltitudeExponentBias = 32;\n\n  /**\n   * Threshold where any numbers smaller are actually negative values. They are multiplied by -2^negativeAltitudeExponentBias.\n   * @type {number}\n   * @default EPSILON12\n   */\n  this.negativeAltitudeThreshold = CesiumMath.EPSILON12;\n\n  /**\n   * Dictionary of provider id to copyright strings.\n   * @type {object}\n   * @default {}\n   */\n  this.providers = {};\n\n  /**\n   * Key used to decode packets\n   * @type {ArrayBuffer}\n   */\n  this.key = undefined;\n\n  this._resource = undefined;\n  this._quadPacketVersion = 1;\n  this._tileInfo = {};\n  this._subtreePromises = {};\n}\n\nObject.defineProperties(GoogleEarthEnterpriseMetadata.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used for metadata requests.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the resource used for metadata requests.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Resource}\n   * @readonly\n   */\n  resource: {\n    get: function () {\n      return this._resource;\n    },\n  },\n});\n\n/**\n * Creates a metadata object using the Google Earth Enterprise REST API. This is used by the GoogleEarthEnterpriseImageryProvider\n * and GoogleEarthEnterpriseTerrainProvider to share metadata requests.\n *\n * @param {Resource|String} resourceOrUrl The url of the Google Earth Enterprise server hosting the imagery.\n *\n * @returns {Promise<GoogleEarthEnterpriseMetadata>} A promise which resolves to the created GoogleEarthEnterpriseMetadata instance/\n */\nGoogleEarthEnterpriseMetadata.fromUrl = async function (resourceOrUrl) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"resourceOrUrl\", resourceOrUrl);\n  //>>includeEnd('debug');\n  let url = resourceOrUrl;\n\n  if (typeof url !== \"string\" && !(url instanceof Resource)) {\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.string(\"resourceOrUrl.url\", resourceOrUrl.url);\n    //>>includeEnd('debug');\n\n    url = resourceOrUrl.url;\n  }\n\n  const resource = Resource.createIfNeeded(url);\n  resource.appendForwardSlash();\n\n  const metadata = new GoogleEarthEnterpriseMetadata();\n  metadata._resource = resource;\n\n  try {\n    await requestDbRoot(metadata);\n    await metadata.getQuadTreePacket(\"\", metadata._quadPacketVersion);\n  } catch (error) {\n    const message = `An error occurred while accessing ${\n      getMetadataResource(metadata, \"\", 1).url\n    }: ${error}`;\n\n    throw new RuntimeError(message);\n  }\n\n  return metadata;\n};\n\n/**\n * Converts a tiles (x, y, level) position into a quadkey used to request an image\n * from a Google Earth Enterprise server.\n *\n * @param {number} x The tile's x coordinate.\n * @param {number} y The tile's y coordinate.\n * @param {number} level The tile's zoom level.\n *\n * @see GoogleEarthEnterpriseMetadata#quadKeyToTileXY\n */\nGoogleEarthEnterpriseMetadata.tileXYToQuadKey = function (x, y, level) {\n  let quadkey = \"\";\n  for (let i = level; i >= 0; --i) {\n    const bitmask = 1 << i;\n    let digit = 0;\n\n    // Tile Layout\n    // ___ ___\n    //|   |   |\n    //| 3 | 2 |\n    //|-------|\n    //| 0 | 1 |\n    //|___|___|\n    //\n\n    if (!isBitSet(y, bitmask)) {\n      // Top Row\n      digit |= 2;\n      if (!isBitSet(x, bitmask)) {\n        // Right to left\n        digit |= 1;\n      }\n    } else if (isBitSet(x, bitmask)) {\n      // Left to right\n      digit |= 1;\n    }\n\n    quadkey += digit;\n  }\n  return quadkey;\n};\n\n/**\n * Converts a tile's quadkey used to request an image from a Google Earth Enterprise server into the\n * (x, y, level) position.\n *\n * @param {string} quadkey The tile's quad key\n *\n * @see GoogleEarthEnterpriseMetadata#tileXYToQuadKey\n */\nGoogleEarthEnterpriseMetadata.quadKeyToTileXY = function (quadkey) {\n  let x = 0;\n  let y = 0;\n  const level = quadkey.length - 1;\n  for (let i = level; i >= 0; --i) {\n    const bitmask = 1 << i;\n    const digit = +quadkey[level - i];\n\n    if (isBitSet(digit, 2)) {\n      // Top Row\n      if (!isBitSet(digit, 1)) {\n        // // Right to left\n        x |= bitmask;\n      }\n    } else {\n      y |= bitmask;\n      if (isBitSet(digit, 1)) {\n        // Left to right\n        x |= bitmask;\n      }\n    }\n  }\n  return {\n    x: x,\n    y: y,\n    level: level,\n  };\n};\n\nGoogleEarthEnterpriseMetadata.prototype.isValid = function (quadKey) {\n  let info = this.getTileInformationFromQuadKey(quadKey);\n  if (defined(info)) {\n    return info !== null;\n  }\n\n  let valid = true;\n  let q = quadKey;\n  let last;\n  while (q.length > 1) {\n    last = q.substring(q.length - 1);\n    q = q.substring(0, q.length - 1);\n    info = this.getTileInformationFromQuadKey(q);\n    if (defined(info)) {\n      if (!info.hasSubtree() && !info.hasChild(parseInt(last))) {\n        // We have no subtree or child available at some point in this node's ancestry\n        valid = false;\n      }\n\n      break;\n    } else if (info === null) {\n      // Some node in the ancestry was loaded and said there wasn't a subtree\n      valid = false;\n      break;\n    }\n  }\n\n  return valid;\n};\n\nconst taskProcessor = new TaskProcessor(\"decodeGoogleEarthEnterprisePacket\");\n\n/**\n * Retrieves a Google Earth Enterprise quadtree packet.\n *\n * @param {string} [quadKey=''] The quadkey to retrieve the packet for.\n * @param {number} [version=1] The cnode version to be used in the request.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getQuadTreePacket = function (\n  quadKey,\n  version,\n  request,\n) {\n  version = defaultValue(version, 1);\n  quadKey = defaultValue(quadKey, \"\");\n  const resource = getMetadataResource(this, quadKey, version, request);\n\n  const promise = resource.fetchArrayBuffer();\n\n  if (!defined(promise)) {\n    return undefined; // Throttled\n  }\n\n  const tileInfo = this._tileInfo;\n  const key = this.key;\n  return promise.then(function (metadata) {\n    const decodePromise = taskProcessor.scheduleTask(\n      {\n        buffer: metadata,\n        quadKey: quadKey,\n        type: \"Metadata\",\n        key: key,\n      },\n      [metadata],\n    );\n\n    return decodePromise.then(function (result) {\n      let root;\n      let topLevelKeyLength = -1;\n      if (quadKey !== \"\") {\n        // Root tile has no data except children bits, so put them into the tile info\n        topLevelKeyLength = quadKey.length + 1;\n        const top = result[quadKey];\n        root = tileInfo[quadKey];\n        root._bits |= top._bits;\n\n        delete result[quadKey];\n      }\n\n      // Copy the resulting objects into tileInfo\n      // Make sure we start with shorter quadkeys first, so we know the parents have\n      //  already been processed. Otherwise we can lose ancestorHasTerrain along the way.\n      const keys = Object.keys(result);\n      keys.sort(function (a, b) {\n        return a.length - b.length;\n      });\n      const keysLength = keys.length;\n      for (let i = 0; i < keysLength; ++i) {\n        const key = keys[i];\n        const r = result[key];\n        if (r !== null) {\n          const info = GoogleEarthEnterpriseTileInformation.clone(result[key]);\n          const keyLength = key.length;\n          if (keyLength === topLevelKeyLength) {\n            info.setParent(root);\n          } else if (keyLength > 1) {\n            const parent = tileInfo[key.substring(0, key.length - 1)];\n            info.setParent(parent);\n          }\n          tileInfo[key] = info;\n        } else {\n          tileInfo[key] = null;\n        }\n      }\n    });\n  });\n};\n\n/**\n * Populates the metadata subtree down to the specified tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise<GoogleEarthEnterpriseTileInformation>} A promise that resolves to the tile info for the requested quad key\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.populateSubtree = function (\n  x,\n  y,\n  level,\n  request,\n) {\n  const quadkey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  return populateSubtree(this, quadkey, request);\n};\n\nfunction populateSubtree(that, quadKey, request) {\n  const tileInfo = that._tileInfo;\n  let q = quadKey;\n  let t = tileInfo[q];\n  // If we have tileInfo make sure sure it is not a node with a subtree that's not loaded\n  if (defined(t) && (!t.hasSubtree() || t.hasChildren())) {\n    return t;\n  }\n\n  while (t === undefined && q.length > 1) {\n    q = q.substring(0, q.length - 1);\n    t = tileInfo[q];\n  }\n\n  let subtreeRequest;\n  const subtreePromises = that._subtreePromises;\n  let promise = subtreePromises[q];\n  if (defined(promise)) {\n    return promise.then(function () {\n      // Recursively call this in case we need multiple subtree requests\n      subtreeRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction,\n      });\n      return populateSubtree(that, quadKey, subtreeRequest);\n    });\n  }\n\n  // t is either\n  //   null so one of its parents was a leaf node, so this tile doesn't exist\n  //   exists but doesn't have a subtree to request\n  //   undefined so no parent exists - this shouldn't ever happen once the provider is ready\n  if (!defined(t) || !t.hasSubtree()) {\n    return Promise.reject(\n      new RuntimeError(`Couldn't load metadata for tile ${quadKey}`),\n    );\n  }\n\n  // We need to split up the promise here because when will execute syncronously if getQuadTreePacket\n  //  is already resolved (like in the tests), so subtreePromises will never get cleared out.\n  //  Only the initial request will also remove the promise from subtreePromises.\n  promise = that.getQuadTreePacket(q, t.cnodeVersion, request);\n  if (!defined(promise)) {\n    return undefined;\n  }\n  subtreePromises[q] = promise;\n\n  return promise\n    .then(function () {\n      // Recursively call this in case we need multiple subtree requests\n      subtreeRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction,\n      });\n      return populateSubtree(that, quadKey, subtreeRequest);\n    })\n    .finally(function () {\n      delete subtreePromises[q];\n    });\n}\n\n/**\n * Gets information about a tile\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @returns {GoogleEarthEnterpriseTileInformation|undefined} Information about the tile or undefined if it isn't loaded.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getTileInformation = function (\n  x,\n  y,\n  level,\n) {\n  const quadkey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  return this._tileInfo[quadkey];\n};\n\n/**\n * Gets information about a tile from a quadKey\n *\n * @param {string} quadkey The quadkey for the tile\n * @returns {GoogleEarthEnterpriseTileInformation|undefined} Information about the tile or undefined if it isn't loaded.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getTileInformationFromQuadKey =\n  function (quadkey) {\n    return this._tileInfo[quadkey];\n  };\n\nfunction getMetadataResource(that, quadKey, version, request) {\n  return that._resource.getDerivedResource({\n    url: `flatfile?q2-0${quadKey}-q.${version.toString()}`,\n    request: request,\n  });\n}\n\nlet dbrootParser;\nlet dbrootParserPromise;\nfunction requestDbRoot(that) {\n  const resource = that._resource.getDerivedResource({\n    url: \"dbRoot.v5\",\n    queryParameters: {\n      output: \"proto\",\n    },\n  });\n\n  if (!defined(dbrootParserPromise)) {\n    const url = buildModuleUrl(\"ThirdParty/google-earth-dbroot-parser.js\");\n    const oldValue = window.cesiumGoogleEarthDbRootParser;\n    dbrootParserPromise = loadAndExecuteScript(url).then(function () {\n      dbrootParser = window.cesiumGoogleEarthDbRootParser(protobuf);\n      if (defined(oldValue)) {\n        window.cesiumGoogleEarthDbRootParser = oldValue;\n      } else {\n        delete window.cesiumGoogleEarthDbRootParser;\n      }\n    });\n  }\n\n  return dbrootParserPromise\n    .then(function () {\n      return resource.fetchArrayBuffer();\n    })\n    .then(function (buf) {\n      const encryptedDbRootProto = dbrootParser.EncryptedDbRootProto.decode(\n        new Uint8Array(buf),\n      );\n\n      let byteArray = encryptedDbRootProto.encryptionData;\n      let offset = byteArray.byteOffset;\n      let end = offset + byteArray.byteLength;\n      const key = (that.key = byteArray.buffer.slice(offset, end));\n\n      byteArray = encryptedDbRootProto.dbrootData;\n      offset = byteArray.byteOffset;\n      end = offset + byteArray.byteLength;\n      const dbRootCompressed = byteArray.buffer.slice(offset, end);\n      return taskProcessor.scheduleTask(\n        {\n          buffer: dbRootCompressed,\n          type: \"DbRoot\",\n          key: key,\n        },\n        [dbRootCompressed],\n      );\n    })\n    .then(function (result) {\n      const dbRoot = dbrootParser.DbRootProto.decode(\n        new Uint8Array(result.buffer),\n      );\n      that.imageryPresent = defaultValue(\n        dbRoot.imageryPresent,\n        that.imageryPresent,\n      );\n      that.protoImagery = dbRoot.protoImagery;\n      that.terrainPresent = defaultValue(\n        dbRoot.terrainPresent,\n        that.terrainPresent,\n      );\n      if (defined(dbRoot.endSnippet) && defined(dbRoot.endSnippet.model)) {\n        const model = dbRoot.endSnippet.model;\n        that.negativeAltitudeExponentBias = defaultValue(\n          model.negativeAltitudeExponentBias,\n          that.negativeAltitudeExponentBias,\n        );\n        that.negativeAltitudeThreshold = defaultValue(\n          model.compressedNegativeAltitudeThreshold,\n          that.negativeAltitudeThreshold,\n        );\n      }\n      if (defined(dbRoot.databaseVersion)) {\n        that._quadPacketVersion = defaultValue(\n          dbRoot.databaseVersion.quadtreeVersion,\n          that._quadPacketVersion,\n        );\n      }\n      const providers = that.providers;\n      const providerInfo = defaultValue(dbRoot.providerInfo, []);\n      const count = providerInfo.length;\n      for (let i = 0; i < count; ++i) {\n        const provider = providerInfo[i];\n        const copyrightString = provider.copyrightString;\n        if (defined(copyrightString)) {\n          providers[provider.providerId] = new Credit(copyrightString.value);\n        }\n      }\n    })\n    .catch(function () {\n      // Just eat the error and use the default values.\n      console.log(`Failed to retrieve ${resource.url}. Using defaults.`);\n      that.key = defaultKey;\n    });\n}\nexport default GoogleEarthEnterpriseMetadata;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}