{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport deprecationWarning from \"../Core/deprecationWarning.js\";\nimport getJsonFromTypedArray from \"../Core/getJsonFromTypedArray.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\n\n/**\n * Handles parsing of an Instanced 3D Model.\n *\n * @namespace I3dmParser\n * @private\n */\nconst I3dmParser = {};\nI3dmParser._deprecationWarning = deprecationWarning;\nconst sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\n/**\n * Parses the contents of a {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/TileFormats/Instanced3DModel|Instanced 3D Model}.\n *\n * @private\n *\n * @param {ArrayBuffer} arrayBuffer The array buffer containing the i3dm.\n * @param {number} [byteOffset=0] The byte offset of the beginning of the i3dm in the array buffer.\n * @returns {object} Returns an object with the glTF format, feature table (binary and json), batch table (binary and json) and glTF parts of the i3dm.\n */\nI3dmParser.parse = function (arrayBuffer, byteOffset) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"arrayBuffer\", arrayBuffer);\n  //>>includeEnd('debug');\n\n  const byteStart = defaultValue(byteOffset, 0);\n  byteOffset = byteStart;\n  const uint8Array = new Uint8Array(arrayBuffer);\n  const view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic\n\n  const version = view.getUint32(byteOffset, true);\n  if (version !== 1) {\n    throw new RuntimeError(`Only Instanced 3D Model version 1 is supported. Version ${version} is not.`);\n  }\n  byteOffset += sizeOfUint32;\n  const byteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  const featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  if (featureTableJsonByteLength === 0) {\n    throw new RuntimeError(\"featureTableJsonByteLength is zero, the feature table must be defined.\");\n  }\n  byteOffset += sizeOfUint32;\n  const featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  const batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  const batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  const gltfFormat = view.getUint32(byteOffset, true);\n  if (gltfFormat !== 1 && gltfFormat !== 0) {\n    throw new RuntimeError(`Only glTF format 0 (uri) or 1 (embedded) are supported. Format ${gltfFormat} is not.`);\n  }\n  byteOffset += sizeOfUint32;\n  const featureTableJson = getJsonFromTypedArray(uint8Array, byteOffset, featureTableJsonByteLength);\n  byteOffset += featureTableJsonByteLength;\n  const featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n  let batchTableJson;\n  let batchTableBinary;\n  if (batchTableJsonByteLength > 0) {\n    batchTableJson = getJsonFromTypedArray(uint8Array, byteOffset, batchTableJsonByteLength);\n    byteOffset += batchTableJsonByteLength;\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n  const gltfByteLength = byteStart + byteLength - byteOffset;\n  if (gltfByteLength === 0) {\n    throw new RuntimeError(\"glTF byte length must be greater than 0.\");\n  }\n  let gltfView;\n  if (byteOffset % 4 === 0) {\n    gltfView = new Uint8Array(arrayBuffer, byteOffset, gltfByteLength);\n  } else {\n    // Create a copy of the glb so that it is 4-byte aligned\n    I3dmParser._deprecationWarning(\"i3dm-glb-unaligned\", \"The embedded glb is not aligned to a 4-byte boundary.\");\n    gltfView = new Uint8Array(uint8Array.subarray(byteOffset, byteOffset + gltfByteLength));\n  }\n  return {\n    gltfFormat: gltfFormat,\n    featureTableJson: featureTableJson,\n    featureTableBinary: featureTableBinary,\n    batchTableJson: batchTableJson,\n    batchTableBinary: batchTableBinary,\n    gltf: gltfView\n  };\n};\nexport default I3dmParser;","map":{"version":3,"names":["Check","defaultValue","deprecationWarning","getJsonFromTypedArray","RuntimeError","I3dmParser","_deprecationWarning","sizeOfUint32","Uint32Array","BYTES_PER_ELEMENT","parse","arrayBuffer","byteOffset","defined","byteStart","uint8Array","Uint8Array","view","DataView","version","getUint32","byteLength","featureTableJsonByteLength","featureTableBinaryByteLength","batchTableJsonByteLength","batchTableBinaryByteLength","gltfFormat","featureTableJson","featureTableBinary","batchTableJson","batchTableBinary","gltfByteLength","gltfView","subarray","gltf"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/I3dmParser.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport deprecationWarning from \"../Core/deprecationWarning.js\";\nimport getJsonFromTypedArray from \"../Core/getJsonFromTypedArray.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\n\n/**\n * Handles parsing of an Instanced 3D Model.\n *\n * @namespace I3dmParser\n * @private\n */\nconst I3dmParser = {};\nI3dmParser._deprecationWarning = deprecationWarning;\n\nconst sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\n/**\n * Parses the contents of a {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/TileFormats/Instanced3DModel|Instanced 3D Model}.\n *\n * @private\n *\n * @param {ArrayBuffer} arrayBuffer The array buffer containing the i3dm.\n * @param {number} [byteOffset=0] The byte offset of the beginning of the i3dm in the array buffer.\n * @returns {object} Returns an object with the glTF format, feature table (binary and json), batch table (binary and json) and glTF parts of the i3dm.\n */\nI3dmParser.parse = function (arrayBuffer, byteOffset) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"arrayBuffer\", arrayBuffer);\n  //>>includeEnd('debug');\n\n  const byteStart = defaultValue(byteOffset, 0);\n  byteOffset = byteStart;\n\n  const uint8Array = new Uint8Array(arrayBuffer);\n  const view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic\n\n  const version = view.getUint32(byteOffset, true);\n  if (version !== 1) {\n    throw new RuntimeError(\n      `Only Instanced 3D Model version 1 is supported. Version ${version} is not.`,\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  const byteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  const featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  if (featureTableJsonByteLength === 0) {\n    throw new RuntimeError(\n      \"featureTableJsonByteLength is zero, the feature table must be defined.\",\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  const featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  const batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  const batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  const gltfFormat = view.getUint32(byteOffset, true);\n  if (gltfFormat !== 1 && gltfFormat !== 0) {\n    throw new RuntimeError(\n      `Only glTF format 0 (uri) or 1 (embedded) are supported. Format ${gltfFormat} is not.`,\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  const featureTableJson = getJsonFromTypedArray(\n    uint8Array,\n    byteOffset,\n    featureTableJsonByteLength,\n  );\n  byteOffset += featureTableJsonByteLength;\n\n  const featureTableBinary = new Uint8Array(\n    arrayBuffer,\n    byteOffset,\n    featureTableBinaryByteLength,\n  );\n  byteOffset += featureTableBinaryByteLength;\n\n  let batchTableJson;\n  let batchTableBinary;\n  if (batchTableJsonByteLength > 0) {\n    batchTableJson = getJsonFromTypedArray(\n      uint8Array,\n      byteOffset,\n      batchTableJsonByteLength,\n    );\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      batchTableBinary = new Uint8Array(\n        arrayBuffer,\n        byteOffset,\n        batchTableBinaryByteLength,\n      );\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  const gltfByteLength = byteStart + byteLength - byteOffset;\n  if (gltfByteLength === 0) {\n    throw new RuntimeError(\"glTF byte length must be greater than 0.\");\n  }\n\n  let gltfView;\n  if (byteOffset % 4 === 0) {\n    gltfView = new Uint8Array(arrayBuffer, byteOffset, gltfByteLength);\n  } else {\n    // Create a copy of the glb so that it is 4-byte aligned\n    I3dmParser._deprecationWarning(\n      \"i3dm-glb-unaligned\",\n      \"The embedded glb is not aligned to a 4-byte boundary.\",\n    );\n    gltfView = new Uint8Array(\n      uint8Array.subarray(byteOffset, byteOffset + gltfByteLength),\n    );\n  }\n\n  return {\n    gltfFormat: gltfFormat,\n    featureTableJson: featureTableJson,\n    featureTableBinary: featureTableBinary,\n    batchTableJson: batchTableJson,\n    batchTableBinary: batchTableBinary,\n    gltf: gltfView,\n  };\n};\n\nexport default I3dmParser;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}