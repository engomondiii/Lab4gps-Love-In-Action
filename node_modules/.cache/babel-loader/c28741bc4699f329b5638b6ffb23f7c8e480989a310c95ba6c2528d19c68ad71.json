{"ast":null,"code":"import { Check, Color, defined, destroyObject, Cesium3DTileColorBlendMode, Cesium3DTileFeature, Cesium3DTilePass, Cesium3DTileset, Cesium3DTileStyle, PerformanceDisplay, ResourceCache, ScreenSpaceEventHandler, ScreenSpaceEventType } from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nfunction getPickTileset(viewModel) {\n  return function (e) {\n    const pick = viewModel._scene.pick(e.position);\n    if (defined(pick) && pick.primitive instanceof Cesium3DTileset) {\n      viewModel.tileset = pick.primitive;\n    }\n    viewModel.pickActive = false;\n  };\n}\nfunction selectTilesetOnHover(viewModel, value) {\n  if (value) {\n    viewModel._eventHandler.setInputAction(function (e) {\n      const pick = viewModel._scene.pick(e.endPosition);\n      if (defined(pick) && pick.primitive instanceof Cesium3DTileset) {\n        viewModel.tileset = pick.primitive;\n      }\n    }, ScreenSpaceEventType.MOUSE_MOVE);\n  } else {\n    viewModel._eventHandler.removeInputAction(ScreenSpaceEventType.MOUSE_MOVE);\n\n    // Restore hover-over selection to its current value\n    // eslint-disable-next-line no-self-assign\n    viewModel.picking = viewModel.picking;\n  }\n}\nconst stringOptions = {\n  maximumFractionDigits: 3\n};\nfunction formatMemoryString(memorySizeInBytes) {\n  const memoryInMegabytes = memorySizeInBytes / 1048576;\n  if (memoryInMegabytes < 1.0) {\n    return memoryInMegabytes.toLocaleString(undefined, stringOptions);\n  }\n  return Math.round(memoryInMegabytes).toLocaleString();\n}\nfunction getStatistics(tileset, isPick) {\n  if (!defined(tileset)) {\n    return \"\";\n  }\n  const statistics = isPick ? tileset._statisticsPerPass[Cesium3DTilePass.PICK] : tileset._statisticsPerPass[Cesium3DTilePass.RENDER];\n\n  // Since the pick pass uses a smaller frustum around the pixel of interest,\n  // the statistics will be different than the normal render pass.\n  let s = '<ul class=\"cesium-cesiumInspector-statistics\">';\n  s +=\n  // --- Rendering statistics\n  `<li><strong>Visited: </strong>${statistics.visited.toLocaleString()}</li>` +\n  // Number of commands returned is likely to be higher than the number of tiles selected\n  // because of tiles that create multiple commands.\n  `<li><strong>Selected: </strong>${statistics.selected.toLocaleString()}</li>` +\n  // Number of commands executed is likely to be higher because of commands overlapping\n  // multiple frustums.\n  `<li><strong>Commands: </strong>${statistics.numberOfCommands.toLocaleString()}</li>`;\n  s += \"</ul>\";\n  if (!isPick) {\n    s += '<ul class=\"cesium-cesiumInspector-statistics\">';\n    s +=\n    // --- Cache/loading statistics\n    `<li><strong>Requests: </strong>${statistics.numberOfPendingRequests.toLocaleString()}</li>` + `<li><strong>Attempted: </strong>${statistics.numberOfAttemptedRequests.toLocaleString()}</li>` + `<li><strong>Processing: </strong>${statistics.numberOfTilesProcessing.toLocaleString()}</li>` + `<li><strong>Content Ready: </strong>${statistics.numberOfTilesWithContentReady.toLocaleString()}</li>` +\n    // Total number of tiles includes tiles without content, so \"Ready\" may never reach\n    // \"Total.\"  Total also will increase when a tile with a tileset JSON content is loaded.\n    `<li><strong>Total: </strong>${statistics.numberOfTilesTotal.toLocaleString()}</li>`;\n    s += \"</ul>\";\n    s += '<ul class=\"cesium-cesiumInspector-statistics\">';\n    s +=\n    // --- Features statistics\n    `<li><strong>Features Selected: </strong>${statistics.numberOfFeaturesSelected.toLocaleString()}</li>` + `<li><strong>Features Loaded: </strong>${statistics.numberOfFeaturesLoaded.toLocaleString()}</li>` + `<li><strong>Points Selected: </strong>${statistics.numberOfPointsSelected.toLocaleString()}</li>` + `<li><strong>Points Loaded: </strong>${statistics.numberOfPointsLoaded.toLocaleString()}</li>` + `<li><strong>Triangles Selected: </strong>${statistics.numberOfTrianglesSelected.toLocaleString()}</li>`;\n    s += \"</ul>\";\n    s += '<ul class=\"cesium-cesiumInspector-statistics\">';\n    s +=\n    // --- Styling statistics\n    `<li><strong>Tiles styled: </strong>${statistics.numberOfTilesStyled.toLocaleString()}</li>` + `<li><strong>Features styled: </strong>${statistics.numberOfFeaturesStyled.toLocaleString()}</li>`;\n    s += \"</ul>\";\n    s += '<ul class=\"cesium-cesiumInspector-statistics\">';\n    s +=\n    // --- Optimization statistics\n    `<li><strong>Children Union Culled: </strong>${statistics.numberOfTilesCulledWithChildrenUnion.toLocaleString()}</li>`;\n    s += \"</ul>\";\n    s += '<ul class=\"cesium-cesiumInspector-statistics\">';\n    s +=\n    // --- Memory statistics\n    `<li><strong>Geometry Memory (MB): </strong>${formatMemoryString(statistics.geometryByteLength)}</li>` + `<li><strong>Texture Memory (MB): </strong>${formatMemoryString(statistics.texturesByteLength)}</li>` + `<li><strong>Batch Table Memory (MB): </strong>${formatMemoryString(statistics.batchTableByteLength)}</li>`;\n    s += \"</ul>\";\n  }\n  return s;\n}\nfunction getResourceCacheStatistics() {\n  const statistics = ResourceCache.statistics;\n  return `\n  <ul class=\"cesium-cesiumInspector-statistics\">\n    <li><strong>Geometry Memory (MB): </strong>${formatMemoryString(statistics.geometryByteLength)}</li>\n    <li><strong>Texture Memory (MB): </strong>${formatMemoryString(statistics.texturesByteLength)}</li>\n  </ul>\n  `;\n}\nconst colorBlendModes = [{\n  text: \"Highlight\",\n  value: Cesium3DTileColorBlendMode.HIGHLIGHT\n}, {\n  text: \"Replace\",\n  value: Cesium3DTileColorBlendMode.REPLACE\n}, {\n  text: \"Mix\",\n  value: Cesium3DTileColorBlendMode.MIX\n}];\nconst highlightColor = new Color(1.0, 1.0, 0.0, 0.4);\nconst scratchColor = new Color();\nconst oldColor = new Color();\n\n/**\n * The view model for {@link Cesium3DTilesInspector}.\n * @alias Cesium3DTilesInspectorViewModel\n * @constructor\n *\n * @param {Scene} scene The scene instance to use.\n * @param {HTMLElement} performanceContainer The container for the performance display\n */\nfunction Cesium3DTilesInspectorViewModel(scene, performanceContainer) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"scene\", scene);\n  Check.typeOf.object(\"performanceContainer\", performanceContainer);\n  //>>includeEnd('debug');\n\n  const that = this;\n  const canvas = scene.canvas;\n  this._eventHandler = new ScreenSpaceEventHandler(canvas);\n  this._scene = scene;\n  this._performanceContainer = performanceContainer;\n  this._canvas = canvas;\n  this._performanceDisplay = new PerformanceDisplay({\n    container: performanceContainer\n  });\n  this._statisticsText = \"\";\n  this._pickStatisticsText = \"\";\n  this._resourceCacheStatisticsText = \"\";\n  this._editorError = \"\";\n\n  /**\n   * Gets or sets the flag to enable performance display.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.performance = false;\n\n  /**\n   * Gets or sets the flag to show statistics.  This property is observable.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.showStatistics = true;\n\n  /**\n   * Gets or sets the flag to show pick statistics.  This property is observable.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.showPickStatistics = true;\n\n  /**\n   * Gets or sets the flag to show resource cache statistics. This property is\n   * observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showResourceCacheStatistics = false;\n\n  /**\n   * Gets or sets the flag to show the inspector.  This property is observable.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.inspectorVisible = true;\n\n  /**\n   * Gets or sets the flag to show the tileset section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.tilesetVisible = false;\n\n  /**\n   * Gets or sets the flag to show the display section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.displayVisible = false;\n\n  /**\n   * Gets or sets the flag to show the update section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.updateVisible = false;\n\n  /**\n   * Gets or sets the flag to show the logging section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.loggingVisible = false;\n\n  /**\n   * Gets or sets the flag to show the style section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.styleVisible = false;\n\n  /**\n   * Gets or sets the flag to show the tile info section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.tileDebugLabelsVisible = false;\n\n  /**\n   * Gets or sets the flag to show the optimization info section. This property is observable.\n   *\n   * @type {boolean}\n   * @default false;\n   */\n  this.optimizationVisible = false;\n\n  /**\n   * Gets or sets the JSON for the tileset style.  This property is observable.\n   *\n   * @type {string}\n   * @default '{}'\n   */\n  this.styleString = \"{}\";\n\n  /**\n   * Gets or sets the JSON for the tileset enableDebugWireframe attribute.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.hasEnabledWireframe = false;\n  this._tileset = undefined;\n  this._feature = undefined;\n  this._tile = undefined;\n  knockout.track(this, [\"performance\", \"inspectorVisible\", \"_statisticsText\", \"_pickStatisticsText\", \"_resourceCacheStatisticsText\", \"_editorError\", \"showPickStatistics\", \"showStatistics\", \"showResourceCacheStatistics\", \"tilesetVisible\", \"displayVisible\", \"updateVisible\", \"loggingVisible\", \"styleVisible\", \"optimizationVisible\", \"tileDebugLabelsVisible\", \"styleString\", \"_feature\", \"_tile\", \"_tileset\", \"hasEnabledWireframe\"]);\n  this._properties = knockout.observable({});\n  /**\n   * Gets the names of the properties in the tileset.  This property is observable.\n   * @type {string[]}\n   * @readonly\n   */\n  this.properties = [];\n  knockout.defineProperty(this, \"properties\", function () {\n    const names = [];\n    const properties = that._properties();\n    for (const prop in properties) {\n      if (properties.hasOwnProperty(prop)) {\n        names.push(prop);\n      }\n    }\n    return names;\n  });\n  const dynamicScreenSpaceError = knockout.observable();\n  knockout.defineProperty(this, \"dynamicScreenSpaceError\", {\n    get: function () {\n      return dynamicScreenSpaceError();\n    },\n    set: function (value) {\n      dynamicScreenSpaceError(value);\n      if (defined(that._tileset)) {\n        that._tileset.dynamicScreenSpaceError = value;\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to enable dynamic screen space error.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.dynamicScreenSpaceError = false;\n  const colorBlendMode = knockout.observable();\n  knockout.defineProperty(this, \"colorBlendMode\", {\n    get: function () {\n      return colorBlendMode();\n    },\n    set: function (value) {\n      colorBlendMode(value);\n      if (defined(that._tileset)) {\n        that._tileset.colorBlendMode = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Gets or sets the color blend mode.  This property is observable.\n   *\n   * @type {Cesium3DTileColorBlendMode}\n   * @default Cesium3DTileColorBlendMode.HIGHLIGHT\n   */\n  this.colorBlendMode = Cesium3DTileColorBlendMode.HIGHLIGHT;\n  const showOnlyPickedTileDebugLabel = knockout.observable();\n  const picking = knockout.observable();\n  knockout.defineProperty(this, \"picking\", {\n    get: function () {\n      return picking();\n    },\n    set: function (value) {\n      picking(value);\n      if (value) {\n        that._eventHandler.setInputAction(function (e) {\n          const picked = scene.pick(e.endPosition);\n          if (picked instanceof Cesium3DTileFeature) {\n            // Picked a feature\n            that.feature = picked;\n            that.tile = picked.content.tile;\n          } else if (defined(picked) && defined(picked.content)) {\n            // Picked a tile\n            that.feature = undefined;\n            that.tile = picked.content.tile;\n          } else {\n            // Picked nothing\n            that.feature = undefined;\n            that.tile = undefined;\n          }\n          if (!defined(that._tileset)) {\n            return;\n          }\n          if (showOnlyPickedTileDebugLabel && defined(picked) && defined(picked.content)) {\n            let position;\n            if (scene.pickPositionSupported) {\n              position = scene.pickPosition(e.endPosition);\n              if (defined(position)) {\n                that._tileset.debugPickPosition = position;\n              }\n            }\n            that._tileset.debugPickedTile = picked.content.tile;\n          } else {\n            that._tileset.debugPickedTile = undefined;\n          }\n          that._scene.requestRender();\n        }, ScreenSpaceEventType.MOUSE_MOVE);\n      } else {\n        that.feature = undefined;\n        that.tile = undefined;\n        that._eventHandler.removeInputAction(ScreenSpaceEventType.MOUSE_MOVE);\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to enable picking.  This property is observable.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.picking = true;\n  const colorize = knockout.observable();\n  knockout.defineProperty(this, \"colorize\", {\n    get: function () {\n      return colorize();\n    },\n    set: function (value) {\n      colorize(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugColorizeTiles = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to colorize tiles.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.colorize = false;\n  const wireframe = knockout.observable();\n  knockout.defineProperty(this, \"wireframe\", {\n    get: function () {\n      return wireframe();\n    },\n    set: function (value) {\n      wireframe(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugWireframe = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to draw with wireframe.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.wireframe = false;\n  const showBoundingVolumes = knockout.observable();\n  knockout.defineProperty(this, \"showBoundingVolumes\", {\n    get: function () {\n      return showBoundingVolumes();\n    },\n    set: function (value) {\n      showBoundingVolumes(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowBoundingVolume = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to show bounding volumes.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showBoundingVolumes = false;\n  const showContentBoundingVolumes = knockout.observable();\n  knockout.defineProperty(this, \"showContentBoundingVolumes\", {\n    get: function () {\n      return showContentBoundingVolumes();\n    },\n    set: function (value) {\n      showContentBoundingVolumes(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowContentBoundingVolume = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to show content volumes.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showContentBoundingVolumes = false;\n  const showRequestVolumes = knockout.observable();\n  knockout.defineProperty(this, \"showRequestVolumes\", {\n    get: function () {\n      return showRequestVolumes();\n    },\n    set: function (value) {\n      showRequestVolumes(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowViewerRequestVolume = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to show request volumes.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showRequestVolumes = false;\n  const freezeFrame = knockout.observable();\n  knockout.defineProperty(this, \"freezeFrame\", {\n    get: function () {\n      return freezeFrame();\n    },\n    set: function (value) {\n      freezeFrame(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugFreezeFrame = value;\n        that._scene.debugShowFrustumPlanes = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to suspend updates.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.freezeFrame = false;\n  knockout.defineProperty(this, \"showOnlyPickedTileDebugLabel\", {\n    get: function () {\n      return showOnlyPickedTileDebugLabel();\n    },\n    set: function (value) {\n      showOnlyPickedTileDebugLabel(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugPickedTileLabelOnly = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to show debug labels only for the currently picked tile.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showOnlyPickedTileDebugLabel = false;\n  const showGeometricError = knockout.observable();\n  knockout.defineProperty(this, \"showGeometricError\", {\n    get: function () {\n      return showGeometricError();\n    },\n    set: function (value) {\n      showGeometricError(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowGeometricError = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to show tile geometric error.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showGeometricError = false;\n  const showRenderingStatistics = knockout.observable();\n  knockout.defineProperty(this, \"showRenderingStatistics\", {\n    get: function () {\n      return showRenderingStatistics();\n    },\n    set: function (value) {\n      showRenderingStatistics(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowRenderingStatistics = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Displays the number of commands, points, triangles and features used per tile.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showRenderingStatistics = false;\n  const showMemoryUsage = knockout.observable();\n  knockout.defineProperty(this, \"showMemoryUsage\", {\n    get: function () {\n      return showMemoryUsage();\n    },\n    set: function (value) {\n      showMemoryUsage(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowMemoryUsage = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Displays the memory used per tile.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showMemoryUsage = false;\n  const showUrl = knockout.observable();\n  knockout.defineProperty(this, \"showUrl\", {\n    get: function () {\n      return showUrl();\n    },\n    set: function (value) {\n      showUrl(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowUrl = value;\n        that._scene.requestRender();\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to show the tile url.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showUrl = false;\n  const maximumScreenSpaceError = knockout.observable();\n  knockout.defineProperty(this, \"maximumScreenSpaceError\", {\n    get: function () {\n      return maximumScreenSpaceError();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        maximumScreenSpaceError(value);\n        if (defined(that._tileset)) {\n          that._tileset.maximumScreenSpaceError = value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the maximum screen space error.  This property is observable.\n   *\n   * @type {number}\n   * @default 16\n   */\n  this.maximumScreenSpaceError = 16;\n  const dynamicScreenSpaceErrorDensity = knockout.observable();\n  knockout.defineProperty(this, \"dynamicScreenSpaceErrorDensity\", {\n    get: function () {\n      return dynamicScreenSpaceErrorDensity();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        dynamicScreenSpaceErrorDensity(value);\n        if (defined(that._tileset)) {\n          that._tileset.dynamicScreenSpaceErrorDensity = value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the dynamic screen space error density.  This property is observable.\n   *\n   * @type {number}\n   * @default 2.0e-4\n   */\n  this.dynamicScreenSpaceErrorDensity = 2.0e-4;\n\n  /**\n   * Gets or sets the dynamic screen space error density slider value.\n   * This allows the slider to be exponential because values tend to be closer to 0 than 1.\n   * This property is observable.\n   *\n   * @type {number}\n   * @default 2.0e-4\n   */\n  this.dynamicScreenSpaceErrorDensitySliderValue = undefined;\n  knockout.defineProperty(this, \"dynamicScreenSpaceErrorDensitySliderValue\", {\n    get: function () {\n      return Math.pow(dynamicScreenSpaceErrorDensity(), 1 / 6);\n    },\n    set: function (value) {\n      const scaledValue = Math.pow(value, 6);\n      dynamicScreenSpaceErrorDensity(scaledValue);\n      if (defined(that._tileset)) {\n        that._tileset.dynamicScreenSpaceErrorDensity = scaledValue;\n      }\n    }\n  });\n  const dynamicScreenSpaceErrorFactor = knockout.observable();\n  knockout.defineProperty(this, \"dynamicScreenSpaceErrorFactor\", {\n    get: function () {\n      return dynamicScreenSpaceErrorFactor();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        dynamicScreenSpaceErrorFactor(value);\n        if (defined(that._tileset)) {\n          that._tileset.dynamicScreenSpaceErrorFactor = value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the dynamic screen space error factor.  This property is observable.\n   *\n   * @type {number}\n   * @default 24.0\n   */\n  this.dynamicScreenSpaceErrorFactor = 24.0;\n  const pickTileset = getPickTileset(this);\n  const pickActive = knockout.observable();\n  knockout.defineProperty(this, \"pickActive\", {\n    get: function () {\n      return pickActive();\n    },\n    set: function (value) {\n      pickActive(value);\n      if (value) {\n        that._eventHandler.setInputAction(pickTileset, ScreenSpaceEventType.LEFT_CLICK);\n      } else {\n        that._eventHandler.removeInputAction(ScreenSpaceEventType.LEFT_CLICK);\n      }\n    }\n  });\n  const pointCloudShading = knockout.observable();\n  knockout.defineProperty(this, \"pointCloudShading\", {\n    get: function () {\n      return pointCloudShading();\n    },\n    set: function (value) {\n      pointCloudShading(value);\n      if (defined(that._tileset)) {\n        that._tileset.pointCloudShading.attenuation = value;\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to enable point cloud shading. This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.pointCloudShading = false;\n  const geometricErrorScale = knockout.observable();\n  knockout.defineProperty(this, \"geometricErrorScale\", {\n    get: function () {\n      return geometricErrorScale();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        geometricErrorScale(value);\n        if (defined(that._tileset)) {\n          that._tileset.pointCloudShading.geometricErrorScale = value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the geometric error scale.  This property is observable.\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  this.geometricErrorScale = 1.0;\n  const maximumAttenuation = knockout.observable();\n  knockout.defineProperty(this, \"maximumAttenuation\", {\n    get: function () {\n      return maximumAttenuation();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        maximumAttenuation(value);\n        if (defined(that._tileset)) {\n          that._tileset.pointCloudShading.maximumAttenuation = value === 0 ? undefined : value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the maximum attenuation.  This property is observable.\n   *\n   * @type {number}\n   * @default 0\n   */\n  this.maximumAttenuation = 0;\n  const baseResolution = knockout.observable();\n  knockout.defineProperty(this, \"baseResolution\", {\n    get: function () {\n      return baseResolution();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        baseResolution(value);\n        if (defined(that._tileset)) {\n          that._tileset.pointCloudShading.baseResolution = value === 0 ? undefined : value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the base resolution.  This property is observable.\n   *\n   * @type {number}\n   * @default 0\n   */\n  this.baseResolution = 0;\n  const eyeDomeLighting = knockout.observable();\n  knockout.defineProperty(this, \"eyeDomeLighting\", {\n    get: function () {\n      return eyeDomeLighting();\n    },\n    set: function (value) {\n      eyeDomeLighting(value);\n      if (defined(that._tileset)) {\n        that._tileset.pointCloudShading.eyeDomeLighting = value;\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to enable eye dome lighting. This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.eyeDomeLighting = false;\n  const eyeDomeLightingStrength = knockout.observable();\n  knockout.defineProperty(this, \"eyeDomeLightingStrength\", {\n    get: function () {\n      return eyeDomeLightingStrength();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        eyeDomeLightingStrength(value);\n        if (defined(that._tileset)) {\n          that._tileset.pointCloudShading.eyeDomeLightingStrength = value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the eye dome lighting strength.  This property is observable.\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  this.eyeDomeLightingStrength = 1.0;\n  const eyeDomeLightingRadius = knockout.observable();\n  knockout.defineProperty(this, \"eyeDomeLightingRadius\", {\n    get: function () {\n      return eyeDomeLightingRadius();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        eyeDomeLightingRadius(value);\n        if (defined(that._tileset)) {\n          that._tileset.pointCloudShading.eyeDomeLightingRadius = value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the eye dome lighting radius.  This property is observable.\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  this.eyeDomeLightingRadius = 1.0;\n\n  /**\n   * Gets or sets the pick state\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.pickActive = false;\n  const skipLevelOfDetail = knockout.observable();\n  knockout.defineProperty(this, \"skipLevelOfDetail\", {\n    get: function () {\n      return skipLevelOfDetail();\n    },\n    set: function (value) {\n      skipLevelOfDetail(value);\n      if (defined(that._tileset)) {\n        that._tileset.skipLevelOfDetail = value;\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag to determine if level of detail skipping should be applied during the traversal.\n   * This property is observable.\n   * @type {boolean}\n   * @default true\n   */\n  this.skipLevelOfDetail = true;\n  const skipScreenSpaceErrorFactor = knockout.observable();\n  knockout.defineProperty(this, \"skipScreenSpaceErrorFactor\", {\n    get: function () {\n      return skipScreenSpaceErrorFactor();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        skipScreenSpaceErrorFactor(value);\n        if (defined(that._tileset)) {\n          that._tileset.skipScreenSpaceErrorFactor = value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the multiplier defining the minimum screen space error to skip. This property is observable.\n   * @type {number}\n   * @default 16\n   */\n  this.skipScreenSpaceErrorFactor = 16;\n  const baseScreenSpaceError = knockout.observable();\n  knockout.defineProperty(this, \"baseScreenSpaceError\", {\n    get: function () {\n      return baseScreenSpaceError();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        baseScreenSpaceError(value);\n        if (defined(that._tileset)) {\n          that._tileset.baseScreenSpaceError = value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the screen space error that must be reached before skipping levels of detail. This property is observable.\n   * @type {number}\n   * @default 1024\n   */\n  this.baseScreenSpaceError = 1024;\n  const skipLevels = knockout.observable();\n  knockout.defineProperty(this, \"skipLevels\", {\n    get: function () {\n      return skipLevels();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        skipLevels(value);\n        if (defined(that._tileset)) {\n          that._tileset.skipLevels = value;\n        }\n      }\n    }\n  });\n  /**\n   * Gets or sets the constant defining the minimum number of levels to skip when loading tiles. This property is observable.\n   * @type {number}\n   * @default 1\n   */\n  this.skipLevels = 1;\n  const immediatelyLoadDesiredLevelOfDetail = knockout.observable();\n  knockout.defineProperty(this, \"immediatelyLoadDesiredLevelOfDetail\", {\n    get: function () {\n      return immediatelyLoadDesiredLevelOfDetail();\n    },\n    set: function (value) {\n      immediatelyLoadDesiredLevelOfDetail(value);\n      if (defined(that._tileset)) {\n        that._tileset.immediatelyLoadDesiredLevelOfDetail = value;\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag which, when true, only tiles that meet the maximum screen space error will ever be downloaded.\n   * This property is observable.\n   * @type {boolean}\n   * @default false\n   */\n  this.immediatelyLoadDesiredLevelOfDetail = false;\n  const loadSiblings = knockout.observable();\n  knockout.defineProperty(this, \"loadSiblings\", {\n    get: function () {\n      return loadSiblings();\n    },\n    set: function (value) {\n      loadSiblings(value);\n      if (defined(that._tileset)) {\n        that._tileset.loadSiblings = value;\n      }\n    }\n  });\n  /**\n   * Gets or sets the flag which determines whether siblings of visible tiles are always downloaded during traversal.\n   * This property is observable\n   * @type {boolean}\n   * @default false\n   */\n  this.loadSiblings = false;\n  this._style = undefined;\n  this._shouldStyle = false;\n  this._definedProperties = [\"properties\", \"dynamicScreenSpaceError\", \"colorBlendMode\", \"picking\", \"colorize\", \"wireframe\", \"showBoundingVolumes\", \"showContentBoundingVolumes\", \"showRequestVolumes\", \"freezeFrame\", \"maximumScreenSpaceError\", \"dynamicScreenSpaceErrorDensity\", \"baseScreenSpaceError\", \"skipScreenSpaceErrorFactor\", \"skipLevelOfDetail\", \"skipLevels\", \"immediatelyLoadDesiredLevelOfDetail\", \"loadSiblings\", \"dynamicScreenSpaceErrorDensitySliderValue\", \"dynamicScreenSpaceErrorFactor\", \"pickActive\", \"showOnlyPickedTileDebugLabel\", \"showGeometricError\", \"showRenderingStatistics\", \"showMemoryUsage\", \"showUrl\", \"pointCloudShading\", \"geometricErrorScale\", \"maximumAttenuation\", \"baseResolution\", \"eyeDomeLighting\", \"eyeDomeLightingStrength\", \"eyeDomeLightingRadius\"];\n  this._removePostRenderEvent = scene.postRender.addEventListener(function () {\n    that._update();\n  });\n  if (!defined(this._tileset)) {\n    selectTilesetOnHover(this, true);\n  }\n}\nObject.defineProperties(Cesium3DTilesInspectorViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {Scene}\n   * @readonly\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    }\n  },\n  /**\n   * Gets the performance container\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {HTMLElement}\n   * @readonly\n   */\n  performanceContainer: {\n    get: function () {\n      return this._performanceContainer;\n    }\n  },\n  /**\n   * Gets the statistics text.  This property is observable.\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {string}\n   * @readonly\n   */\n  statisticsText: {\n    get: function () {\n      return this._statisticsText;\n    }\n  },\n  /**\n   * Gets the pick statistics text.  This property is observable.\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {string}\n   * @readonly\n   */\n  pickStatisticsText: {\n    get: function () {\n      return this._pickStatisticsText;\n    }\n  },\n  /**\n   * Gets the resource cache statistics text. This property is observable.\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {string}\n   * @readonly\n   */\n  resourceCacheStatisticsText: {\n    get: function () {\n      return this._resourceCacheStatisticsText;\n    }\n  },\n  /**\n   * Gets the available blend modes\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {Object[]}\n   * @readonly\n   */\n  colorBlendModes: {\n    get: function () {\n      return colorBlendModes;\n    }\n  },\n  /**\n   * Gets the editor error message\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {string}\n   * @readonly\n   */\n  editorError: {\n    get: function () {\n      return this._editorError;\n    }\n  },\n  /**\n   * Gets or sets the tileset of the view model.\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {Cesium3DTileset}\n   */\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n    set: function (tileset) {\n      this._tileset = tileset;\n      this._style = undefined;\n      this.styleString = \"{}\";\n      this.feature = undefined;\n      this.tile = undefined;\n      if (defined(tileset)) {\n        this._properties(tileset.properties);\n\n        // update tileset with existing settings\n        const settings = [\"colorize\", \"wireframe\", \"showBoundingVolumes\", \"showContentBoundingVolumes\", \"showRequestVolumes\", \"freezeFrame\", \"showOnlyPickedTileDebugLabel\", \"showGeometricError\", \"showRenderingStatistics\", \"showMemoryUsage\", \"showUrl\"];\n        const length = settings.length;\n        for (let i = 0; i < length; ++i) {\n          const setting = settings[i];\n          //eslint-disable-next-line no-self-assign\n          this[setting] = this[setting];\n        }\n\n        // update view model with existing tileset settings\n        this.maximumScreenSpaceError = tileset.maximumScreenSpaceError;\n        this.dynamicScreenSpaceError = tileset.dynamicScreenSpaceError;\n        this.dynamicScreenSpaceErrorDensity = tileset.dynamicScreenSpaceErrorDensity;\n        this.dynamicScreenSpaceErrorFactor = tileset.dynamicScreenSpaceErrorFactor;\n        this.colorBlendMode = tileset.colorBlendMode;\n        this.skipLevelOfDetail = tileset.skipLevelOfDetail;\n        this.skipScreenSpaceErrorFactor = tileset.skipScreenSpaceErrorFactor;\n        this.baseScreenSpaceError = tileset.baseScreenSpaceError;\n        this.skipLevels = tileset.skipLevels;\n        this.immediatelyLoadDesiredLevelOfDetail = tileset.immediatelyLoadDesiredLevelOfDetail;\n        this.loadSiblings = tileset.loadSiblings;\n        this.hasEnabledWireframe = tileset._enableDebugWireframe;\n        const pointCloudShading = tileset.pointCloudShading;\n        this.pointCloudShading = pointCloudShading.attenuation;\n        this.geometricErrorScale = pointCloudShading.geometricErrorScale;\n        this.maximumAttenuation = pointCloudShading.maximumAttenuation ? pointCloudShading.maximumAttenuation : 0.0;\n        this.baseResolution = pointCloudShading.baseResolution ? pointCloudShading.baseResolution : 0.0;\n        this.eyeDomeLighting = pointCloudShading.eyeDomeLighting;\n        this.eyeDomeLightingStrength = pointCloudShading.eyeDomeLightingStrength;\n        this.eyeDomeLightingRadius = pointCloudShading.eyeDomeLightingRadius;\n        this._scene.requestRender();\n      } else {\n        this._properties({});\n      }\n      this._statisticsText = getStatistics(tileset, false);\n      this._pickStatisticsText = getStatistics(tileset, true);\n      this._resourceCacheStatisticsText = getResourceCacheStatistics();\n      selectTilesetOnHover(this, false);\n    }\n  },\n  /**\n   * Gets the current feature of the view model.\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {Cesium3DTileFeature}\n   */\n  feature: {\n    get: function () {\n      return this._feature;\n    },\n    set: function (feature) {\n      if (this._feature === feature) {\n        return;\n      }\n      const currentFeature = this._feature;\n      if (defined(currentFeature) && !currentFeature.content.isDestroyed()) {\n        // Restore original color to feature that is no longer selected\n        if (!this.colorize && defined(this._style)) {\n          currentFeature.color = defined(this._style.color) ? this._style.color.evaluateColor(currentFeature, scratchColor) : Color.WHITE;\n        } else {\n          currentFeature.color = oldColor;\n        }\n        this._scene.requestRender();\n      }\n      if (defined(feature)) {\n        // Highlight new feature\n        Color.clone(feature.color, oldColor);\n        feature.color = highlightColor;\n        this._scene.requestRender();\n      }\n      this._feature = feature;\n    }\n  },\n  /**\n   * Gets the current tile of the view model\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {Cesium3DTile}\n   */\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n    set: function (tile) {\n      if (this._tile === tile) {\n        return;\n      }\n      const currentTile = this._tile;\n      if (defined(currentTile) && !currentTile.isDestroyed() && !hasFeatures(currentTile.content)) {\n        // Restore original color to tile that is no longer selected\n        currentTile.color = oldColor;\n        this._scene.requestRender();\n      }\n      if (defined(tile) && !hasFeatures(tile.content)) {\n        // Highlight new tile\n        Color.clone(tile.color, oldColor);\n        tile.color = highlightColor;\n        this._scene.requestRender();\n      }\n      this._tile = tile;\n    }\n  }\n});\nfunction hasFeatures(content) {\n  if (!defined(content)) {\n    return false;\n  }\n  if (content.featuresLength > 0) {\n    return true;\n  }\n  const innerContents = content.innerContents;\n  if (defined(innerContents)) {\n    const length = innerContents.length;\n    for (let i = 0; i < length; ++i) {\n      if (!hasFeatures(innerContents[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * Toggles the pick tileset mode\n */\nCesium3DTilesInspectorViewModel.prototype.togglePickTileset = function () {\n  this.pickActive = !this.pickActive;\n};\n\n/**\n * Toggles the inspector visibility\n */\nCesium3DTilesInspectorViewModel.prototype.toggleInspector = function () {\n  this.inspectorVisible = !this.inspectorVisible;\n};\n\n/**\n * Toggles the visibility of the tileset section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleTileset = function () {\n  this.tilesetVisible = !this.tilesetVisible;\n};\n\n/**\n * Toggles the visibility of the display section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleDisplay = function () {\n  this.displayVisible = !this.displayVisible;\n};\n\n/**\n * Toggles the visibility of the update section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleUpdate = function () {\n  this.updateVisible = !this.updateVisible;\n};\n\n/**\n * Toggles the visibility of the logging section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleLogging = function () {\n  this.loggingVisible = !this.loggingVisible;\n};\n\n/**\n * Toggles the visibility of the style section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleStyle = function () {\n  this.styleVisible = !this.styleVisible;\n};\n\n/**\n * Toggles the visibility of the tile Debug Info section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleTileDebugLabels = function () {\n  this.tileDebugLabelsVisible = !this.tileDebugLabelsVisible;\n};\n\n/**\n * Toggles the visibility of the optimization section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleOptimization = function () {\n  this.optimizationVisible = !this.optimizationVisible;\n};\n\n/**\n * Trims tile cache\n */\nCesium3DTilesInspectorViewModel.prototype.trimTilesCache = function () {\n  if (defined(this._tileset)) {\n    this._tileset.trimLoadedTiles();\n  }\n};\n\n/**\n * Compiles the style in the style editor.\n */\nCesium3DTilesInspectorViewModel.prototype.compileStyle = function () {\n  const tileset = this._tileset;\n  if (!defined(tileset) || this.styleString === JSON.stringify(tileset.style)) {\n    return;\n  }\n  this._editorError = \"\";\n  try {\n    if (this.styleString.length === 0) {\n      this.styleString = \"{}\";\n    }\n    this._style = new Cesium3DTileStyle(JSON.parse(this.styleString));\n    this._shouldStyle = true;\n    this._scene.requestRender();\n  } catch (err) {\n    this._editorError = err.toString();\n  }\n\n  // set feature again so pick coloring is set\n  this.feature = this._feature;\n  this.tile = this._tile;\n};\n\n/**\n * Handles key press events on the style editor.\n */\nCesium3DTilesInspectorViewModel.prototype.styleEditorKeyPress = function (sender, event) {\n  if (event.keyCode === 9) {\n    //tab\n    event.preventDefault();\n    const textArea = event.target;\n    const start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    let newEnd = end;\n    const selected = textArea.value.slice(start, end);\n    const lines = selected.split(\"\\n\");\n    const length = lines.length;\n    let i;\n    if (!event.shiftKey) {\n      for (i = 0; i < length; ++i) {\n        lines[i] = `  ${lines[i]}`;\n        newEnd += 2;\n      }\n    } else {\n      for (i = 0; i < length; ++i) {\n        if (lines[i][0] === \" \") {\n          if (lines[i][1] === \" \") {\n            lines[i] = lines[i].substr(2);\n            newEnd -= 2;\n          } else {\n            lines[i] = lines[i].substr(1);\n            newEnd -= 1;\n          }\n        }\n      }\n    }\n    const newText = lines.join(\"\\n\");\n    textArea.value = textArea.value.slice(0, start) + newText + textArea.value.slice(end);\n    textArea.selectionStart = start !== end ? start : newEnd;\n    textArea.selectionEnd = newEnd;\n  } else if (event.ctrlKey && (event.keyCode === 10 || event.keyCode === 13)) {\n    //ctrl + enter\n    this.compileStyle();\n  }\n  return true;\n};\n\n/**\n * Updates the values of view model\n * @private\n */\nCesium3DTilesInspectorViewModel.prototype._update = function () {\n  const tileset = this._tileset;\n  if (this.performance) {\n    this._performanceDisplay.update();\n  }\n  if (defined(tileset)) {\n    if (tileset.isDestroyed()) {\n      this.tile = undefined;\n      this.feature = undefined;\n      this.tileset = undefined;\n      return;\n    }\n    const style = tileset.style;\n    if (this._style !== tileset.style) {\n      if (this._shouldStyle) {\n        tileset.style = this._style;\n        this._shouldStyle = false;\n      } else {\n        this._style = style;\n        this.styleString = JSON.stringify(style.style, null, \"  \");\n      }\n    }\n  }\n  if (this.showStatistics) {\n    this._statisticsText = getStatistics(tileset, false);\n    this._pickStatisticsText = getStatistics(tileset, true);\n    this._resourceCacheStatisticsText = getResourceCacheStatistics();\n  }\n};\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nCesium3DTilesInspectorViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the widget.  Should be called if permanently\n * removing the widget from layout.\n */\nCesium3DTilesInspectorViewModel.prototype.destroy = function () {\n  this._eventHandler.destroy();\n  this._removePostRenderEvent();\n  const that = this;\n  this._definedProperties.forEach(function (property) {\n    knockout.getObservable(that, property).dispose();\n  });\n  return destroyObject(this);\n};\n\n/**\n * Generates an HTML string of the statistics\n *\n * @function\n * @param {Cesium3DTileset} tileset The tileset\n * @param {boolean} isPick Whether this is getting the statistics for the pick pass\n * @returns {string} The formatted statistics\n */\nCesium3DTilesInspectorViewModel.getStatistics = getStatistics;\nexport default Cesium3DTilesInspectorViewModel;","map":{"version":3,"names":["Check","Color","defined","destroyObject","Cesium3DTileColorBlendMode","Cesium3DTileFeature","Cesium3DTilePass","Cesium3DTileset","Cesium3DTileStyle","PerformanceDisplay","ResourceCache","ScreenSpaceEventHandler","ScreenSpaceEventType","knockout","getPickTileset","viewModel","e","pick","_scene","position","primitive","tileset","pickActive","selectTilesetOnHover","value","_eventHandler","setInputAction","endPosition","MOUSE_MOVE","removeInputAction","picking","stringOptions","maximumFractionDigits","formatMemoryString","memorySizeInBytes","memoryInMegabytes","toLocaleString","undefined","Math","round","getStatistics","isPick","statistics","_statisticsPerPass","PICK","RENDER","s","visited","selected","numberOfCommands","numberOfPendingRequests","numberOfAttemptedRequests","numberOfTilesProcessing","numberOfTilesWithContentReady","numberOfTilesTotal","numberOfFeaturesSelected","numberOfFeaturesLoaded","numberOfPointsSelected","numberOfPointsLoaded","numberOfTrianglesSelected","numberOfTilesStyled","numberOfFeaturesStyled","numberOfTilesCulledWithChildrenUnion","geometryByteLength","texturesByteLength","batchTableByteLength","getResourceCacheStatistics","colorBlendModes","text","HIGHLIGHT","REPLACE","MIX","highlightColor","scratchColor","oldColor","Cesium3DTilesInspectorViewModel","scene","performanceContainer","typeOf","object","that","canvas","_performanceContainer","_canvas","_performanceDisplay","container","_statisticsText","_pickStatisticsText","_resourceCacheStatisticsText","_editorError","performance","showStatistics","showPickStatistics","showResourceCacheStatistics","inspectorVisible","tilesetVisible","displayVisible","updateVisible","loggingVisible","styleVisible","tileDebugLabelsVisible","optimizationVisible","styleString","hasEnabledWireframe","_tileset","_feature","_tile","track","_properties","observable","properties","defineProperty","names","prop","hasOwnProperty","push","dynamicScreenSpaceError","get","set","colorBlendMode","requestRender","showOnlyPickedTileDebugLabel","picked","feature","tile","content","pickPositionSupported","pickPosition","debugPickPosition","debugPickedTile","colorize","debugColorizeTiles","wireframe","debugWireframe","showBoundingVolumes","debugShowBoundingVolume","showContentBoundingVolumes","debugShowContentBoundingVolume","showRequestVolumes","debugShowViewerRequestVolume","freezeFrame","debugFreezeFrame","debugShowFrustumPlanes","debugPickedTileLabelOnly","showGeometricError","debugShowGeometricError","showRenderingStatistics","debugShowRenderingStatistics","showMemoryUsage","debugShowMemoryUsage","showUrl","debugShowUrl","maximumScreenSpaceError","Number","isNaN","dynamicScreenSpaceErrorDensity","dynamicScreenSpaceErrorDensitySliderValue","pow","scaledValue","dynamicScreenSpaceErrorFactor","pickTileset","LEFT_CLICK","pointCloudShading","attenuation","geometricErrorScale","maximumAttenuation","baseResolution","eyeDomeLighting","eyeDomeLightingStrength","eyeDomeLightingRadius","skipLevelOfDetail","skipScreenSpaceErrorFactor","baseScreenSpaceError","skipLevels","immediatelyLoadDesiredLevelOfDetail","loadSiblings","_style","_shouldStyle","_definedProperties","_removePostRenderEvent","postRender","addEventListener","_update","Object","defineProperties","prototype","statisticsText","pickStatisticsText","resourceCacheStatisticsText","editorError","settings","length","i","setting","_enableDebugWireframe","currentFeature","isDestroyed","color","evaluateColor","WHITE","clone","currentTile","hasFeatures","featuresLength","innerContents","togglePickTileset","toggleInspector","toggleTileset","toggleDisplay","toggleUpdate","toggleLogging","toggleStyle","toggleTileDebugLabels","toggleOptimization","trimTilesCache","trimLoadedTiles","compileStyle","JSON","stringify","style","parse","err","toString","styleEditorKeyPress","sender","event","keyCode","preventDefault","textArea","target","start","selectionStart","end","selectionEnd","newEnd","slice","lines","split","shiftKey","substr","newText","join","ctrlKey","update","destroy","forEach","property","getObservable","dispose"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/Cesium3DTilesInspector/Cesium3DTilesInspectorViewModel.js"],"sourcesContent":["import {\n  Check,\n  Color,\n  defined,\n  destroyObject,\n  Cesium3DTileColorBlendMode,\n  Cesium3DTileFeature,\n  Cesium3DTilePass,\n  Cesium3DTileset,\n  Cesium3DTileStyle,\n  PerformanceDisplay,\n  ResourceCache,\n  ScreenSpaceEventHandler,\n  ScreenSpaceEventType,\n} from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\n\nfunction getPickTileset(viewModel) {\n  return function (e) {\n    const pick = viewModel._scene.pick(e.position);\n    if (defined(pick) && pick.primitive instanceof Cesium3DTileset) {\n      viewModel.tileset = pick.primitive;\n    }\n    viewModel.pickActive = false;\n  };\n}\n\nfunction selectTilesetOnHover(viewModel, value) {\n  if (value) {\n    viewModel._eventHandler.setInputAction(function (e) {\n      const pick = viewModel._scene.pick(e.endPosition);\n      if (defined(pick) && pick.primitive instanceof Cesium3DTileset) {\n        viewModel.tileset = pick.primitive;\n      }\n    }, ScreenSpaceEventType.MOUSE_MOVE);\n  } else {\n    viewModel._eventHandler.removeInputAction(ScreenSpaceEventType.MOUSE_MOVE);\n\n    // Restore hover-over selection to its current value\n    // eslint-disable-next-line no-self-assign\n    viewModel.picking = viewModel.picking;\n  }\n}\n\nconst stringOptions = {\n  maximumFractionDigits: 3,\n};\n\nfunction formatMemoryString(memorySizeInBytes) {\n  const memoryInMegabytes = memorySizeInBytes / 1048576;\n  if (memoryInMegabytes < 1.0) {\n    return memoryInMegabytes.toLocaleString(undefined, stringOptions);\n  }\n  return Math.round(memoryInMegabytes).toLocaleString();\n}\n\nfunction getStatistics(tileset, isPick) {\n  if (!defined(tileset)) {\n    return \"\";\n  }\n\n  const statistics = isPick\n    ? tileset._statisticsPerPass[Cesium3DTilePass.PICK]\n    : tileset._statisticsPerPass[Cesium3DTilePass.RENDER];\n\n  // Since the pick pass uses a smaller frustum around the pixel of interest,\n  // the statistics will be different than the normal render pass.\n  let s = '<ul class=\"cesium-cesiumInspector-statistics\">';\n  s +=\n    // --- Rendering statistics\n    `<li><strong>Visited: </strong>${statistics.visited.toLocaleString()}</li>` +\n    // Number of commands returned is likely to be higher than the number of tiles selected\n    // because of tiles that create multiple commands.\n    `<li><strong>Selected: </strong>${statistics.selected.toLocaleString()}</li>` +\n    // Number of commands executed is likely to be higher because of commands overlapping\n    // multiple frustums.\n    `<li><strong>Commands: </strong>${statistics.numberOfCommands.toLocaleString()}</li>`;\n  s += \"</ul>\";\n  if (!isPick) {\n    s += '<ul class=\"cesium-cesiumInspector-statistics\">';\n    s +=\n      // --- Cache/loading statistics\n      `<li><strong>Requests: </strong>${statistics.numberOfPendingRequests.toLocaleString()}</li>` +\n      `<li><strong>Attempted: </strong>${statistics.numberOfAttemptedRequests.toLocaleString()}</li>` +\n      `<li><strong>Processing: </strong>${statistics.numberOfTilesProcessing.toLocaleString()}</li>` +\n      `<li><strong>Content Ready: </strong>${statistics.numberOfTilesWithContentReady.toLocaleString()}</li>` +\n      // Total number of tiles includes tiles without content, so \"Ready\" may never reach\n      // \"Total.\"  Total also will increase when a tile with a tileset JSON content is loaded.\n      `<li><strong>Total: </strong>${statistics.numberOfTilesTotal.toLocaleString()}</li>`;\n    s += \"</ul>\";\n    s += '<ul class=\"cesium-cesiumInspector-statistics\">';\n    s +=\n      // --- Features statistics\n      `<li><strong>Features Selected: </strong>${statistics.numberOfFeaturesSelected.toLocaleString()}</li>` +\n      `<li><strong>Features Loaded: </strong>${statistics.numberOfFeaturesLoaded.toLocaleString()}</li>` +\n      `<li><strong>Points Selected: </strong>${statistics.numberOfPointsSelected.toLocaleString()}</li>` +\n      `<li><strong>Points Loaded: </strong>${statistics.numberOfPointsLoaded.toLocaleString()}</li>` +\n      `<li><strong>Triangles Selected: </strong>${statistics.numberOfTrianglesSelected.toLocaleString()}</li>`;\n    s += \"</ul>\";\n    s += '<ul class=\"cesium-cesiumInspector-statistics\">';\n    s +=\n      // --- Styling statistics\n      `<li><strong>Tiles styled: </strong>${statistics.numberOfTilesStyled.toLocaleString()}</li>` +\n      `<li><strong>Features styled: </strong>${statistics.numberOfFeaturesStyled.toLocaleString()}</li>`;\n    s += \"</ul>\";\n    s += '<ul class=\"cesium-cesiumInspector-statistics\">';\n    s +=\n      // --- Optimization statistics\n      `<li><strong>Children Union Culled: </strong>${statistics.numberOfTilesCulledWithChildrenUnion.toLocaleString()}</li>`;\n    s += \"</ul>\";\n    s += '<ul class=\"cesium-cesiumInspector-statistics\">';\n    s +=\n      // --- Memory statistics\n      `<li><strong>Geometry Memory (MB): </strong>${formatMemoryString(\n        statistics.geometryByteLength,\n      )}</li>` +\n      `<li><strong>Texture Memory (MB): </strong>${formatMemoryString(\n        statistics.texturesByteLength,\n      )}</li>` +\n      `<li><strong>Batch Table Memory (MB): </strong>${formatMemoryString(\n        statistics.batchTableByteLength,\n      )}</li>`;\n    s += \"</ul>\";\n  }\n  return s;\n}\n\nfunction getResourceCacheStatistics() {\n  const statistics = ResourceCache.statistics;\n\n  return `\n  <ul class=\"cesium-cesiumInspector-statistics\">\n    <li><strong>Geometry Memory (MB): </strong>${formatMemoryString(\n      statistics.geometryByteLength,\n    )}</li>\n    <li><strong>Texture Memory (MB): </strong>${formatMemoryString(\n      statistics.texturesByteLength,\n    )}</li>\n  </ul>\n  `;\n}\n\nconst colorBlendModes = [\n  {\n    text: \"Highlight\",\n    value: Cesium3DTileColorBlendMode.HIGHLIGHT,\n  },\n  {\n    text: \"Replace\",\n    value: Cesium3DTileColorBlendMode.REPLACE,\n  },\n  {\n    text: \"Mix\",\n    value: Cesium3DTileColorBlendMode.MIX,\n  },\n];\n\nconst highlightColor = new Color(1.0, 1.0, 0.0, 0.4);\nconst scratchColor = new Color();\nconst oldColor = new Color();\n\n/**\n * The view model for {@link Cesium3DTilesInspector}.\n * @alias Cesium3DTilesInspectorViewModel\n * @constructor\n *\n * @param {Scene} scene The scene instance to use.\n * @param {HTMLElement} performanceContainer The container for the performance display\n */\nfunction Cesium3DTilesInspectorViewModel(scene, performanceContainer) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"scene\", scene);\n  Check.typeOf.object(\"performanceContainer\", performanceContainer);\n  //>>includeEnd('debug');\n\n  const that = this;\n  const canvas = scene.canvas;\n  this._eventHandler = new ScreenSpaceEventHandler(canvas);\n  this._scene = scene;\n  this._performanceContainer = performanceContainer;\n  this._canvas = canvas;\n\n  this._performanceDisplay = new PerformanceDisplay({\n    container: performanceContainer,\n  });\n\n  this._statisticsText = \"\";\n  this._pickStatisticsText = \"\";\n  this._resourceCacheStatisticsText = \"\";\n  this._editorError = \"\";\n\n  /**\n   * Gets or sets the flag to enable performance display.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.performance = false;\n\n  /**\n   * Gets or sets the flag to show statistics.  This property is observable.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.showStatistics = true;\n\n  /**\n   * Gets or sets the flag to show pick statistics.  This property is observable.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.showPickStatistics = true;\n\n  /**\n   * Gets or sets the flag to show resource cache statistics. This property is\n   * observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showResourceCacheStatistics = false;\n\n  /**\n   * Gets or sets the flag to show the inspector.  This property is observable.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.inspectorVisible = true;\n\n  /**\n   * Gets or sets the flag to show the tileset section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.tilesetVisible = false;\n\n  /**\n   * Gets or sets the flag to show the display section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.displayVisible = false;\n\n  /**\n   * Gets or sets the flag to show the update section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.updateVisible = false;\n\n  /**\n   * Gets or sets the flag to show the logging section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.loggingVisible = false;\n\n  /**\n   * Gets or sets the flag to show the style section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.styleVisible = false;\n\n  /**\n   * Gets or sets the flag to show the tile info section.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.tileDebugLabelsVisible = false;\n\n  /**\n   * Gets or sets the flag to show the optimization info section. This property is observable.\n   *\n   * @type {boolean}\n   * @default false;\n   */\n  this.optimizationVisible = false;\n\n  /**\n   * Gets or sets the JSON for the tileset style.  This property is observable.\n   *\n   * @type {string}\n   * @default '{}'\n   */\n  this.styleString = \"{}\";\n\n  /**\n   * Gets or sets the JSON for the tileset enableDebugWireframe attribute.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.hasEnabledWireframe = false;\n\n  this._tileset = undefined;\n  this._feature = undefined;\n  this._tile = undefined;\n\n  knockout.track(this, [\n    \"performance\",\n    \"inspectorVisible\",\n    \"_statisticsText\",\n    \"_pickStatisticsText\",\n    \"_resourceCacheStatisticsText\",\n    \"_editorError\",\n    \"showPickStatistics\",\n    \"showStatistics\",\n    \"showResourceCacheStatistics\",\n    \"tilesetVisible\",\n    \"displayVisible\",\n    \"updateVisible\",\n    \"loggingVisible\",\n    \"styleVisible\",\n    \"optimizationVisible\",\n    \"tileDebugLabelsVisible\",\n    \"styleString\",\n    \"_feature\",\n    \"_tile\",\n    \"_tileset\",\n    \"hasEnabledWireframe\",\n  ]);\n\n  this._properties = knockout.observable({});\n  /**\n   * Gets the names of the properties in the tileset.  This property is observable.\n   * @type {string[]}\n   * @readonly\n   */\n  this.properties = [];\n  knockout.defineProperty(this, \"properties\", function () {\n    const names = [];\n    const properties = that._properties();\n    for (const prop in properties) {\n      if (properties.hasOwnProperty(prop)) {\n        names.push(prop);\n      }\n    }\n    return names;\n  });\n\n  const dynamicScreenSpaceError = knockout.observable();\n  knockout.defineProperty(this, \"dynamicScreenSpaceError\", {\n    get: function () {\n      return dynamicScreenSpaceError();\n    },\n    set: function (value) {\n      dynamicScreenSpaceError(value);\n      if (defined(that._tileset)) {\n        that._tileset.dynamicScreenSpaceError = value;\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to enable dynamic screen space error.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.dynamicScreenSpaceError = false;\n\n  const colorBlendMode = knockout.observable();\n  knockout.defineProperty(this, \"colorBlendMode\", {\n    get: function () {\n      return colorBlendMode();\n    },\n    set: function (value) {\n      colorBlendMode(value);\n      if (defined(that._tileset)) {\n        that._tileset.colorBlendMode = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Gets or sets the color blend mode.  This property is observable.\n   *\n   * @type {Cesium3DTileColorBlendMode}\n   * @default Cesium3DTileColorBlendMode.HIGHLIGHT\n   */\n  this.colorBlendMode = Cesium3DTileColorBlendMode.HIGHLIGHT;\n\n  const showOnlyPickedTileDebugLabel = knockout.observable();\n  const picking = knockout.observable();\n  knockout.defineProperty(this, \"picking\", {\n    get: function () {\n      return picking();\n    },\n    set: function (value) {\n      picking(value);\n      if (value) {\n        that._eventHandler.setInputAction(function (e) {\n          const picked = scene.pick(e.endPosition);\n          if (picked instanceof Cesium3DTileFeature) {\n            // Picked a feature\n            that.feature = picked;\n            that.tile = picked.content.tile;\n          } else if (defined(picked) && defined(picked.content)) {\n            // Picked a tile\n            that.feature = undefined;\n            that.tile = picked.content.tile;\n          } else {\n            // Picked nothing\n            that.feature = undefined;\n            that.tile = undefined;\n          }\n          if (!defined(that._tileset)) {\n            return;\n          }\n          if (\n            showOnlyPickedTileDebugLabel &&\n            defined(picked) &&\n            defined(picked.content)\n          ) {\n            let position;\n            if (scene.pickPositionSupported) {\n              position = scene.pickPosition(e.endPosition);\n              if (defined(position)) {\n                that._tileset.debugPickPosition = position;\n              }\n            }\n            that._tileset.debugPickedTile = picked.content.tile;\n          } else {\n            that._tileset.debugPickedTile = undefined;\n          }\n          that._scene.requestRender();\n        }, ScreenSpaceEventType.MOUSE_MOVE);\n      } else {\n        that.feature = undefined;\n        that.tile = undefined;\n        that._eventHandler.removeInputAction(ScreenSpaceEventType.MOUSE_MOVE);\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to enable picking.  This property is observable.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.picking = true;\n\n  const colorize = knockout.observable();\n  knockout.defineProperty(this, \"colorize\", {\n    get: function () {\n      return colorize();\n    },\n    set: function (value) {\n      colorize(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugColorizeTiles = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to colorize tiles.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.colorize = false;\n\n  const wireframe = knockout.observable();\n  knockout.defineProperty(this, \"wireframe\", {\n    get: function () {\n      return wireframe();\n    },\n    set: function (value) {\n      wireframe(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugWireframe = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to draw with wireframe.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.wireframe = false;\n\n  const showBoundingVolumes = knockout.observable();\n  knockout.defineProperty(this, \"showBoundingVolumes\", {\n    get: function () {\n      return showBoundingVolumes();\n    },\n    set: function (value) {\n      showBoundingVolumes(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowBoundingVolume = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to show bounding volumes.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showBoundingVolumes = false;\n\n  const showContentBoundingVolumes = knockout.observable();\n  knockout.defineProperty(this, \"showContentBoundingVolumes\", {\n    get: function () {\n      return showContentBoundingVolumes();\n    },\n    set: function (value) {\n      showContentBoundingVolumes(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowContentBoundingVolume = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to show content volumes.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showContentBoundingVolumes = false;\n\n  const showRequestVolumes = knockout.observable();\n  knockout.defineProperty(this, \"showRequestVolumes\", {\n    get: function () {\n      return showRequestVolumes();\n    },\n    set: function (value) {\n      showRequestVolumes(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowViewerRequestVolume = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to show request volumes.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showRequestVolumes = false;\n\n  const freezeFrame = knockout.observable();\n  knockout.defineProperty(this, \"freezeFrame\", {\n    get: function () {\n      return freezeFrame();\n    },\n    set: function (value) {\n      freezeFrame(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugFreezeFrame = value;\n        that._scene.debugShowFrustumPlanes = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to suspend updates.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.freezeFrame = false;\n\n  knockout.defineProperty(this, \"showOnlyPickedTileDebugLabel\", {\n    get: function () {\n      return showOnlyPickedTileDebugLabel();\n    },\n    set: function (value) {\n      showOnlyPickedTileDebugLabel(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugPickedTileLabelOnly = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to show debug labels only for the currently picked tile.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showOnlyPickedTileDebugLabel = false;\n\n  const showGeometricError = knockout.observable();\n  knockout.defineProperty(this, \"showGeometricError\", {\n    get: function () {\n      return showGeometricError();\n    },\n    set: function (value) {\n      showGeometricError(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowGeometricError = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to show tile geometric error.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showGeometricError = false;\n\n  const showRenderingStatistics = knockout.observable();\n  knockout.defineProperty(this, \"showRenderingStatistics\", {\n    get: function () {\n      return showRenderingStatistics();\n    },\n    set: function (value) {\n      showRenderingStatistics(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowRenderingStatistics = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Displays the number of commands, points, triangles and features used per tile.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showRenderingStatistics = false;\n\n  const showMemoryUsage = knockout.observable();\n  knockout.defineProperty(this, \"showMemoryUsage\", {\n    get: function () {\n      return showMemoryUsage();\n    },\n    set: function (value) {\n      showMemoryUsage(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowMemoryUsage = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Displays the memory used per tile.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showMemoryUsage = false;\n\n  const showUrl = knockout.observable();\n  knockout.defineProperty(this, \"showUrl\", {\n    get: function () {\n      return showUrl();\n    },\n    set: function (value) {\n      showUrl(value);\n      if (defined(that._tileset)) {\n        that._tileset.debugShowUrl = value;\n        that._scene.requestRender();\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to show the tile url.  This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.showUrl = false;\n\n  const maximumScreenSpaceError = knockout.observable();\n  knockout.defineProperty(this, \"maximumScreenSpaceError\", {\n    get: function () {\n      return maximumScreenSpaceError();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        maximumScreenSpaceError(value);\n        if (defined(that._tileset)) {\n          that._tileset.maximumScreenSpaceError = value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the maximum screen space error.  This property is observable.\n   *\n   * @type {number}\n   * @default 16\n   */\n  this.maximumScreenSpaceError = 16;\n\n  const dynamicScreenSpaceErrorDensity = knockout.observable();\n  knockout.defineProperty(this, \"dynamicScreenSpaceErrorDensity\", {\n    get: function () {\n      return dynamicScreenSpaceErrorDensity();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        dynamicScreenSpaceErrorDensity(value);\n        if (defined(that._tileset)) {\n          that._tileset.dynamicScreenSpaceErrorDensity = value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the dynamic screen space error density.  This property is observable.\n   *\n   * @type {number}\n   * @default 2.0e-4\n   */\n  this.dynamicScreenSpaceErrorDensity = 2.0e-4;\n\n  /**\n   * Gets or sets the dynamic screen space error density slider value.\n   * This allows the slider to be exponential because values tend to be closer to 0 than 1.\n   * This property is observable.\n   *\n   * @type {number}\n   * @default 2.0e-4\n   */\n  this.dynamicScreenSpaceErrorDensitySliderValue = undefined;\n  knockout.defineProperty(this, \"dynamicScreenSpaceErrorDensitySliderValue\", {\n    get: function () {\n      return Math.pow(dynamicScreenSpaceErrorDensity(), 1 / 6);\n    },\n    set: function (value) {\n      const scaledValue = Math.pow(value, 6);\n      dynamicScreenSpaceErrorDensity(scaledValue);\n      if (defined(that._tileset)) {\n        that._tileset.dynamicScreenSpaceErrorDensity = scaledValue;\n      }\n    },\n  });\n\n  const dynamicScreenSpaceErrorFactor = knockout.observable();\n  knockout.defineProperty(this, \"dynamicScreenSpaceErrorFactor\", {\n    get: function () {\n      return dynamicScreenSpaceErrorFactor();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        dynamicScreenSpaceErrorFactor(value);\n        if (defined(that._tileset)) {\n          that._tileset.dynamicScreenSpaceErrorFactor = value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the dynamic screen space error factor.  This property is observable.\n   *\n   * @type {number}\n   * @default 24.0\n   */\n  this.dynamicScreenSpaceErrorFactor = 24.0;\n\n  const pickTileset = getPickTileset(this);\n  const pickActive = knockout.observable();\n  knockout.defineProperty(this, \"pickActive\", {\n    get: function () {\n      return pickActive();\n    },\n    set: function (value) {\n      pickActive(value);\n      if (value) {\n        that._eventHandler.setInputAction(\n          pickTileset,\n          ScreenSpaceEventType.LEFT_CLICK,\n        );\n      } else {\n        that._eventHandler.removeInputAction(ScreenSpaceEventType.LEFT_CLICK);\n      }\n    },\n  });\n\n  const pointCloudShading = knockout.observable();\n  knockout.defineProperty(this, \"pointCloudShading\", {\n    get: function () {\n      return pointCloudShading();\n    },\n    set: function (value) {\n      pointCloudShading(value);\n      if (defined(that._tileset)) {\n        that._tileset.pointCloudShading.attenuation = value;\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to enable point cloud shading. This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.pointCloudShading = false;\n\n  const geometricErrorScale = knockout.observable();\n  knockout.defineProperty(this, \"geometricErrorScale\", {\n    get: function () {\n      return geometricErrorScale();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        geometricErrorScale(value);\n        if (defined(that._tileset)) {\n          that._tileset.pointCloudShading.geometricErrorScale = value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the geometric error scale.  This property is observable.\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  this.geometricErrorScale = 1.0;\n\n  const maximumAttenuation = knockout.observable();\n  knockout.defineProperty(this, \"maximumAttenuation\", {\n    get: function () {\n      return maximumAttenuation();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        maximumAttenuation(value);\n        if (defined(that._tileset)) {\n          that._tileset.pointCloudShading.maximumAttenuation =\n            value === 0 ? undefined : value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the maximum attenuation.  This property is observable.\n   *\n   * @type {number}\n   * @default 0\n   */\n  this.maximumAttenuation = 0;\n\n  const baseResolution = knockout.observable();\n  knockout.defineProperty(this, \"baseResolution\", {\n    get: function () {\n      return baseResolution();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        baseResolution(value);\n        if (defined(that._tileset)) {\n          that._tileset.pointCloudShading.baseResolution =\n            value === 0 ? undefined : value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the base resolution.  This property is observable.\n   *\n   * @type {number}\n   * @default 0\n   */\n  this.baseResolution = 0;\n\n  const eyeDomeLighting = knockout.observable();\n  knockout.defineProperty(this, \"eyeDomeLighting\", {\n    get: function () {\n      return eyeDomeLighting();\n    },\n    set: function (value) {\n      eyeDomeLighting(value);\n      if (defined(that._tileset)) {\n        that._tileset.pointCloudShading.eyeDomeLighting = value;\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to enable eye dome lighting. This property is observable.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.eyeDomeLighting = false;\n\n  const eyeDomeLightingStrength = knockout.observable();\n  knockout.defineProperty(this, \"eyeDomeLightingStrength\", {\n    get: function () {\n      return eyeDomeLightingStrength();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        eyeDomeLightingStrength(value);\n        if (defined(that._tileset)) {\n          that._tileset.pointCloudShading.eyeDomeLightingStrength = value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the eye dome lighting strength.  This property is observable.\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  this.eyeDomeLightingStrength = 1.0;\n\n  const eyeDomeLightingRadius = knockout.observable();\n  knockout.defineProperty(this, \"eyeDomeLightingRadius\", {\n    get: function () {\n      return eyeDomeLightingRadius();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        eyeDomeLightingRadius(value);\n        if (defined(that._tileset)) {\n          that._tileset.pointCloudShading.eyeDomeLightingRadius = value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the eye dome lighting radius.  This property is observable.\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  this.eyeDomeLightingRadius = 1.0;\n\n  /**\n   * Gets or sets the pick state\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.pickActive = false;\n\n  const skipLevelOfDetail = knockout.observable();\n  knockout.defineProperty(this, \"skipLevelOfDetail\", {\n    get: function () {\n      return skipLevelOfDetail();\n    },\n    set: function (value) {\n      skipLevelOfDetail(value);\n      if (defined(that._tileset)) {\n        that._tileset.skipLevelOfDetail = value;\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag to determine if level of detail skipping should be applied during the traversal.\n   * This property is observable.\n   * @type {boolean}\n   * @default true\n   */\n  this.skipLevelOfDetail = true;\n\n  const skipScreenSpaceErrorFactor = knockout.observable();\n  knockout.defineProperty(this, \"skipScreenSpaceErrorFactor\", {\n    get: function () {\n      return skipScreenSpaceErrorFactor();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        skipScreenSpaceErrorFactor(value);\n        if (defined(that._tileset)) {\n          that._tileset.skipScreenSpaceErrorFactor = value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the multiplier defining the minimum screen space error to skip. This property is observable.\n   * @type {number}\n   * @default 16\n   */\n  this.skipScreenSpaceErrorFactor = 16;\n\n  const baseScreenSpaceError = knockout.observable();\n  knockout.defineProperty(this, \"baseScreenSpaceError\", {\n    get: function () {\n      return baseScreenSpaceError();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        baseScreenSpaceError(value);\n        if (defined(that._tileset)) {\n          that._tileset.baseScreenSpaceError = value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the screen space error that must be reached before skipping levels of detail. This property is observable.\n   * @type {number}\n   * @default 1024\n   */\n  this.baseScreenSpaceError = 1024;\n\n  const skipLevels = knockout.observable();\n  knockout.defineProperty(this, \"skipLevels\", {\n    get: function () {\n      return skipLevels();\n    },\n    set: function (value) {\n      value = Number(value);\n      if (!isNaN(value)) {\n        skipLevels(value);\n        if (defined(that._tileset)) {\n          that._tileset.skipLevels = value;\n        }\n      }\n    },\n  });\n  /**\n   * Gets or sets the constant defining the minimum number of levels to skip when loading tiles. This property is observable.\n   * @type {number}\n   * @default 1\n   */\n  this.skipLevels = 1;\n\n  const immediatelyLoadDesiredLevelOfDetail = knockout.observable();\n  knockout.defineProperty(this, \"immediatelyLoadDesiredLevelOfDetail\", {\n    get: function () {\n      return immediatelyLoadDesiredLevelOfDetail();\n    },\n    set: function (value) {\n      immediatelyLoadDesiredLevelOfDetail(value);\n      if (defined(that._tileset)) {\n        that._tileset.immediatelyLoadDesiredLevelOfDetail = value;\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag which, when true, only tiles that meet the maximum screen space error will ever be downloaded.\n   * This property is observable.\n   * @type {boolean}\n   * @default false\n   */\n  this.immediatelyLoadDesiredLevelOfDetail = false;\n\n  const loadSiblings = knockout.observable();\n  knockout.defineProperty(this, \"loadSiblings\", {\n    get: function () {\n      return loadSiblings();\n    },\n    set: function (value) {\n      loadSiblings(value);\n      if (defined(that._tileset)) {\n        that._tileset.loadSiblings = value;\n      }\n    },\n  });\n  /**\n   * Gets or sets the flag which determines whether siblings of visible tiles are always downloaded during traversal.\n   * This property is observable\n   * @type {boolean}\n   * @default false\n   */\n  this.loadSiblings = false;\n\n  this._style = undefined;\n  this._shouldStyle = false;\n  this._definedProperties = [\n    \"properties\",\n    \"dynamicScreenSpaceError\",\n    \"colorBlendMode\",\n    \"picking\",\n    \"colorize\",\n    \"wireframe\",\n    \"showBoundingVolumes\",\n    \"showContentBoundingVolumes\",\n    \"showRequestVolumes\",\n    \"freezeFrame\",\n    \"maximumScreenSpaceError\",\n    \"dynamicScreenSpaceErrorDensity\",\n    \"baseScreenSpaceError\",\n    \"skipScreenSpaceErrorFactor\",\n    \"skipLevelOfDetail\",\n    \"skipLevels\",\n    \"immediatelyLoadDesiredLevelOfDetail\",\n    \"loadSiblings\",\n    \"dynamicScreenSpaceErrorDensitySliderValue\",\n    \"dynamicScreenSpaceErrorFactor\",\n    \"pickActive\",\n    \"showOnlyPickedTileDebugLabel\",\n    \"showGeometricError\",\n    \"showRenderingStatistics\",\n    \"showMemoryUsage\",\n    \"showUrl\",\n    \"pointCloudShading\",\n    \"geometricErrorScale\",\n    \"maximumAttenuation\",\n    \"baseResolution\",\n    \"eyeDomeLighting\",\n    \"eyeDomeLightingStrength\",\n    \"eyeDomeLightingRadius\",\n  ];\n  this._removePostRenderEvent = scene.postRender.addEventListener(function () {\n    that._update();\n  });\n\n  if (!defined(this._tileset)) {\n    selectTilesetOnHover(this, true);\n  }\n}\n\nObject.defineProperties(Cesium3DTilesInspectorViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {Scene}\n   * @readonly\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n  /**\n   * Gets the performance container\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {HTMLElement}\n   * @readonly\n   */\n  performanceContainer: {\n    get: function () {\n      return this._performanceContainer;\n    },\n  },\n\n  /**\n   * Gets the statistics text.  This property is observable.\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {string}\n   * @readonly\n   */\n  statisticsText: {\n    get: function () {\n      return this._statisticsText;\n    },\n  },\n  /**\n   * Gets the pick statistics text.  This property is observable.\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {string}\n   * @readonly\n   */\n  pickStatisticsText: {\n    get: function () {\n      return this._pickStatisticsText;\n    },\n  },\n\n  /**\n   * Gets the resource cache statistics text. This property is observable.\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {string}\n   * @readonly\n   */\n  resourceCacheStatisticsText: {\n    get: function () {\n      return this._resourceCacheStatisticsText;\n    },\n  },\n\n  /**\n   * Gets the available blend modes\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {Object[]}\n   * @readonly\n   */\n  colorBlendModes: {\n    get: function () {\n      return colorBlendModes;\n    },\n  },\n\n  /**\n   * Gets the editor error message\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {string}\n   * @readonly\n   */\n  editorError: {\n    get: function () {\n      return this._editorError;\n    },\n  },\n\n  /**\n   * Gets or sets the tileset of the view model.\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {Cesium3DTileset}\n   */\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n    set: function (tileset) {\n      this._tileset = tileset;\n      this._style = undefined;\n      this.styleString = \"{}\";\n      this.feature = undefined;\n      this.tile = undefined;\n\n      if (defined(tileset)) {\n        this._properties(tileset.properties);\n\n        // update tileset with existing settings\n        const settings = [\n          \"colorize\",\n          \"wireframe\",\n          \"showBoundingVolumes\",\n          \"showContentBoundingVolumes\",\n          \"showRequestVolumes\",\n          \"freezeFrame\",\n          \"showOnlyPickedTileDebugLabel\",\n          \"showGeometricError\",\n          \"showRenderingStatistics\",\n          \"showMemoryUsage\",\n          \"showUrl\",\n        ];\n        const length = settings.length;\n        for (let i = 0; i < length; ++i) {\n          const setting = settings[i];\n          //eslint-disable-next-line no-self-assign\n          this[setting] = this[setting];\n        }\n\n        // update view model with existing tileset settings\n        this.maximumScreenSpaceError = tileset.maximumScreenSpaceError;\n        this.dynamicScreenSpaceError = tileset.dynamicScreenSpaceError;\n        this.dynamicScreenSpaceErrorDensity =\n          tileset.dynamicScreenSpaceErrorDensity;\n        this.dynamicScreenSpaceErrorFactor =\n          tileset.dynamicScreenSpaceErrorFactor;\n        this.colorBlendMode = tileset.colorBlendMode;\n        this.skipLevelOfDetail = tileset.skipLevelOfDetail;\n        this.skipScreenSpaceErrorFactor = tileset.skipScreenSpaceErrorFactor;\n        this.baseScreenSpaceError = tileset.baseScreenSpaceError;\n        this.skipLevels = tileset.skipLevels;\n        this.immediatelyLoadDesiredLevelOfDetail =\n          tileset.immediatelyLoadDesiredLevelOfDetail;\n        this.loadSiblings = tileset.loadSiblings;\n        this.hasEnabledWireframe = tileset._enableDebugWireframe;\n\n        const pointCloudShading = tileset.pointCloudShading;\n        this.pointCloudShading = pointCloudShading.attenuation;\n        this.geometricErrorScale = pointCloudShading.geometricErrorScale;\n        this.maximumAttenuation = pointCloudShading.maximumAttenuation\n          ? pointCloudShading.maximumAttenuation\n          : 0.0;\n        this.baseResolution = pointCloudShading.baseResolution\n          ? pointCloudShading.baseResolution\n          : 0.0;\n        this.eyeDomeLighting = pointCloudShading.eyeDomeLighting;\n        this.eyeDomeLightingStrength =\n          pointCloudShading.eyeDomeLightingStrength;\n        this.eyeDomeLightingRadius = pointCloudShading.eyeDomeLightingRadius;\n\n        this._scene.requestRender();\n      } else {\n        this._properties({});\n      }\n\n      this._statisticsText = getStatistics(tileset, false);\n      this._pickStatisticsText = getStatistics(tileset, true);\n      this._resourceCacheStatisticsText = getResourceCacheStatistics();\n      selectTilesetOnHover(this, false);\n    },\n  },\n\n  /**\n   * Gets the current feature of the view model.\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {Cesium3DTileFeature}\n   */\n  feature: {\n    get: function () {\n      return this._feature;\n    },\n    set: function (feature) {\n      if (this._feature === feature) {\n        return;\n      }\n      const currentFeature = this._feature;\n      if (defined(currentFeature) && !currentFeature.content.isDestroyed()) {\n        // Restore original color to feature that is no longer selected\n        if (!this.colorize && defined(this._style)) {\n          currentFeature.color = defined(this._style.color)\n            ? this._style.color.evaluateColor(currentFeature, scratchColor)\n            : Color.WHITE;\n        } else {\n          currentFeature.color = oldColor;\n        }\n        this._scene.requestRender();\n      }\n      if (defined(feature)) {\n        // Highlight new feature\n        Color.clone(feature.color, oldColor);\n        feature.color = highlightColor;\n        this._scene.requestRender();\n      }\n      this._feature = feature;\n    },\n  },\n\n  /**\n   * Gets the current tile of the view model\n   * @memberof Cesium3DTilesInspectorViewModel.prototype\n   * @type {Cesium3DTile}\n   */\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n    set: function (tile) {\n      if (this._tile === tile) {\n        return;\n      }\n      const currentTile = this._tile;\n\n      if (\n        defined(currentTile) &&\n        !currentTile.isDestroyed() &&\n        !hasFeatures(currentTile.content)\n      ) {\n        // Restore original color to tile that is no longer selected\n        currentTile.color = oldColor;\n        this._scene.requestRender();\n      }\n\n      if (defined(tile) && !hasFeatures(tile.content)) {\n        // Highlight new tile\n        Color.clone(tile.color, oldColor);\n        tile.color = highlightColor;\n        this._scene.requestRender();\n      }\n      this._tile = tile;\n    },\n  },\n});\n\nfunction hasFeatures(content) {\n  if (!defined(content)) {\n    return false;\n  }\n\n  if (content.featuresLength > 0) {\n    return true;\n  }\n  const innerContents = content.innerContents;\n  if (defined(innerContents)) {\n    const length = innerContents.length;\n    for (let i = 0; i < length; ++i) {\n      if (!hasFeatures(innerContents[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * Toggles the pick tileset mode\n */\nCesium3DTilesInspectorViewModel.prototype.togglePickTileset = function () {\n  this.pickActive = !this.pickActive;\n};\n\n/**\n * Toggles the inspector visibility\n */\nCesium3DTilesInspectorViewModel.prototype.toggleInspector = function () {\n  this.inspectorVisible = !this.inspectorVisible;\n};\n\n/**\n * Toggles the visibility of the tileset section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleTileset = function () {\n  this.tilesetVisible = !this.tilesetVisible;\n};\n\n/**\n * Toggles the visibility of the display section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleDisplay = function () {\n  this.displayVisible = !this.displayVisible;\n};\n\n/**\n * Toggles the visibility of the update section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleUpdate = function () {\n  this.updateVisible = !this.updateVisible;\n};\n\n/**\n * Toggles the visibility of the logging section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleLogging = function () {\n  this.loggingVisible = !this.loggingVisible;\n};\n\n/**\n * Toggles the visibility of the style section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleStyle = function () {\n  this.styleVisible = !this.styleVisible;\n};\n\n/**\n * Toggles the visibility of the tile Debug Info section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleTileDebugLabels = function () {\n  this.tileDebugLabelsVisible = !this.tileDebugLabelsVisible;\n};\n\n/**\n * Toggles the visibility of the optimization section\n */\nCesium3DTilesInspectorViewModel.prototype.toggleOptimization = function () {\n  this.optimizationVisible = !this.optimizationVisible;\n};\n\n/**\n * Trims tile cache\n */\nCesium3DTilesInspectorViewModel.prototype.trimTilesCache = function () {\n  if (defined(this._tileset)) {\n    this._tileset.trimLoadedTiles();\n  }\n};\n\n/**\n * Compiles the style in the style editor.\n */\nCesium3DTilesInspectorViewModel.prototype.compileStyle = function () {\n  const tileset = this._tileset;\n  if (!defined(tileset) || this.styleString === JSON.stringify(tileset.style)) {\n    return;\n  }\n  this._editorError = \"\";\n  try {\n    if (this.styleString.length === 0) {\n      this.styleString = \"{}\";\n    }\n    this._style = new Cesium3DTileStyle(JSON.parse(this.styleString));\n    this._shouldStyle = true;\n    this._scene.requestRender();\n  } catch (err) {\n    this._editorError = err.toString();\n  }\n\n  // set feature again so pick coloring is set\n  this.feature = this._feature;\n  this.tile = this._tile;\n};\n\n/**\n * Handles key press events on the style editor.\n */\nCesium3DTilesInspectorViewModel.prototype.styleEditorKeyPress = function (\n  sender,\n  event,\n) {\n  if (event.keyCode === 9) {\n    //tab\n    event.preventDefault();\n    const textArea = event.target;\n    const start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    let newEnd = end;\n    const selected = textArea.value.slice(start, end);\n    const lines = selected.split(\"\\n\");\n    const length = lines.length;\n    let i;\n    if (!event.shiftKey) {\n      for (i = 0; i < length; ++i) {\n        lines[i] = `  ${lines[i]}`;\n        newEnd += 2;\n      }\n    } else {\n      for (i = 0; i < length; ++i) {\n        if (lines[i][0] === \" \") {\n          if (lines[i][1] === \" \") {\n            lines[i] = lines[i].substr(2);\n            newEnd -= 2;\n          } else {\n            lines[i] = lines[i].substr(1);\n            newEnd -= 1;\n          }\n        }\n      }\n    }\n    const newText = lines.join(\"\\n\");\n    textArea.value =\n      textArea.value.slice(0, start) + newText + textArea.value.slice(end);\n    textArea.selectionStart = start !== end ? start : newEnd;\n    textArea.selectionEnd = newEnd;\n  } else if (event.ctrlKey && (event.keyCode === 10 || event.keyCode === 13)) {\n    //ctrl + enter\n    this.compileStyle();\n  }\n  return true;\n};\n\n/**\n * Updates the values of view model\n * @private\n */\nCesium3DTilesInspectorViewModel.prototype._update = function () {\n  const tileset = this._tileset;\n\n  if (this.performance) {\n    this._performanceDisplay.update();\n  }\n\n  if (defined(tileset)) {\n    if (tileset.isDestroyed()) {\n      this.tile = undefined;\n      this.feature = undefined;\n      this.tileset = undefined;\n      return;\n    }\n\n    const style = tileset.style;\n    if (this._style !== tileset.style) {\n      if (this._shouldStyle) {\n        tileset.style = this._style;\n        this._shouldStyle = false;\n      } else {\n        this._style = style;\n        this.styleString = JSON.stringify(style.style, null, \"  \");\n      }\n    }\n  }\n  if (this.showStatistics) {\n    this._statisticsText = getStatistics(tileset, false);\n    this._pickStatisticsText = getStatistics(tileset, true);\n    this._resourceCacheStatisticsText = getResourceCacheStatistics();\n  }\n};\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nCesium3DTilesInspectorViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the widget.  Should be called if permanently\n * removing the widget from layout.\n */\nCesium3DTilesInspectorViewModel.prototype.destroy = function () {\n  this._eventHandler.destroy();\n  this._removePostRenderEvent();\n\n  const that = this;\n  this._definedProperties.forEach(function (property) {\n    knockout.getObservable(that, property).dispose();\n  });\n\n  return destroyObject(this);\n};\n\n/**\n * Generates an HTML string of the statistics\n *\n * @function\n * @param {Cesium3DTileset} tileset The tileset\n * @param {boolean} isPick Whether this is getting the statistics for the pick pass\n * @returns {string} The formatted statistics\n */\nCesium3DTilesInspectorViewModel.getStatistics = getStatistics;\nexport default Cesium3DTilesInspectorViewModel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}