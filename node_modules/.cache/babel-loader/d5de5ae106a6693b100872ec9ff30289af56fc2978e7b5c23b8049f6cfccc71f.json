{"ast":null,"code":"import { defaultValue, defined, destroyObject, DeveloperError, EventHelper, SceneMode } from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link SceneModePicker}.\n * @alias SceneModePickerViewModel\n * @constructor\n *\n * @param {Scene} scene The Scene to morph\n * @param {number} [duration=2.0] The duration of scene morph animations, in seconds\n */\nfunction SceneModePickerViewModel(scene, duration) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n  const that = this;\n  const morphStart = function (transitioner, oldMode, newMode, isMorphing) {\n    that.sceneMode = newMode;\n    that.dropDownVisible = false;\n  };\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(scene.morphStart, morphStart);\n  this._duration = defaultValue(duration, 2.0);\n\n  /**\n   * Gets or sets the current SceneMode.  This property is observable.\n   * @type {SceneMode}\n   */\n  this.sceneMode = scene.mode;\n\n  /**\n   * Gets or sets whether the button drop-down is currently visible.  This property is observable.\n   * @type {boolean}\n   * @default false\n   */\n  this.dropDownVisible = false;\n\n  /**\n   * Gets or sets the 2D tooltip.  This property is observable.\n   * @type {string}\n   * @default '2D'\n   */\n  this.tooltip2D = \"2D\";\n\n  /**\n   * Gets or sets the 3D tooltip.  This property is observable.\n   * @type {string}\n   * @default '3D'\n   */\n  this.tooltip3D = \"3D\";\n\n  /**\n   * Gets or sets the Columbus View tooltip.  This property is observable.\n   * @type {string}\n   * @default 'Columbus View'\n   */\n  this.tooltipColumbusView = \"Columbus View\";\n  knockout.track(this, [\"sceneMode\", \"dropDownVisible\", \"tooltip2D\", \"tooltip3D\", \"tooltipColumbusView\"]);\n\n  /**\n   * Gets the currently active tooltip.  This property is observable.\n   * @type {string}\n   */\n  this.selectedTooltip = undefined;\n  knockout.defineProperty(this, \"selectedTooltip\", function () {\n    const mode = that.sceneMode;\n    if (mode === SceneMode.SCENE2D) {\n      return that.tooltip2D;\n    }\n    if (mode === SceneMode.SCENE3D) {\n      return that.tooltip3D;\n    }\n    return that.tooltipColumbusView;\n  });\n  this._toggleDropDown = createCommand(function () {\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n  this._morphTo2D = createCommand(function () {\n    scene.morphTo2D(that._duration);\n  });\n  this._morphTo3D = createCommand(function () {\n    scene.morphTo3D(that._duration);\n  });\n  this._morphToColumbusView = createCommand(function () {\n    scene.morphToColumbusView(that._duration);\n  });\n\n  //Used by knockout\n  this._sceneMode = SceneMode;\n}\nObject.defineProperties(SceneModePickerViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof SceneModePickerViewModel.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    }\n  },\n  /**\n   * Gets or sets the the duration of scene mode transition animations in seconds.\n   * A value of zero causes the scene to instantly change modes.\n   * @memberof SceneModePickerViewModel.prototype\n   * @type {number}\n   */\n  duration: {\n    get: function () {\n      return this._duration;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (value < 0.0) {\n        throw new DeveloperError(\"duration value must be positive.\");\n      }\n      //>>includeEnd('debug');\n\n      this._duration = value;\n    }\n  },\n  /**\n   * Gets the command to toggle the drop down box.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function () {\n      return this._toggleDropDown;\n    }\n  },\n  /**\n   * Gets the command to morph to 2D.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphTo2D: {\n    get: function () {\n      return this._morphTo2D;\n    }\n  },\n  /**\n   * Gets the command to morph to 3D.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphTo3D: {\n    get: function () {\n      return this._morphTo3D;\n    }\n  },\n  /**\n   * Gets the command to morph to Columbus View.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphToColumbusView: {\n    get: function () {\n      return this._morphToColumbusView;\n    }\n  }\n});\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nSceneModePickerViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.\n */\nSceneModePickerViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n  destroyObject(this);\n};\nexport default SceneModePickerViewModel;","map":{"version":3,"names":["defaultValue","defined","destroyObject","DeveloperError","EventHelper","SceneMode","knockout","createCommand","SceneModePickerViewModel","scene","duration","_scene","that","morphStart","transitioner","oldMode","newMode","isMorphing","sceneMode","dropDownVisible","_eventHelper","add","_duration","mode","tooltip2D","tooltip3D","tooltipColumbusView","track","selectedTooltip","undefined","defineProperty","SCENE2D","SCENE3D","_toggleDropDown","_morphTo2D","morphTo2D","_morphTo3D","morphTo3D","_morphToColumbusView","morphToColumbusView","_sceneMode","Object","defineProperties","prototype","get","set","value","toggleDropDown","isDestroyed","destroy","removeAll"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/SceneModePicker/SceneModePickerViewModel.js"],"sourcesContent":["import {\n  defaultValue,\n  defined,\n  destroyObject,\n  DeveloperError,\n  EventHelper,\n  SceneMode,\n} from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link SceneModePicker}.\n * @alias SceneModePickerViewModel\n * @constructor\n *\n * @param {Scene} scene The Scene to morph\n * @param {number} [duration=2.0] The duration of scene morph animations, in seconds\n */\nfunction SceneModePickerViewModel(scene, duration) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n\n  const that = this;\n\n  const morphStart = function (transitioner, oldMode, newMode, isMorphing) {\n    that.sceneMode = newMode;\n    that.dropDownVisible = false;\n  };\n\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(scene.morphStart, morphStart);\n\n  this._duration = defaultValue(duration, 2.0);\n\n  /**\n   * Gets or sets the current SceneMode.  This property is observable.\n   * @type {SceneMode}\n   */\n  this.sceneMode = scene.mode;\n\n  /**\n   * Gets or sets whether the button drop-down is currently visible.  This property is observable.\n   * @type {boolean}\n   * @default false\n   */\n  this.dropDownVisible = false;\n\n  /**\n   * Gets or sets the 2D tooltip.  This property is observable.\n   * @type {string}\n   * @default '2D'\n   */\n  this.tooltip2D = \"2D\";\n\n  /**\n   * Gets or sets the 3D tooltip.  This property is observable.\n   * @type {string}\n   * @default '3D'\n   */\n  this.tooltip3D = \"3D\";\n\n  /**\n   * Gets or sets the Columbus View tooltip.  This property is observable.\n   * @type {string}\n   * @default 'Columbus View'\n   */\n  this.tooltipColumbusView = \"Columbus View\";\n\n  knockout.track(this, [\n    \"sceneMode\",\n    \"dropDownVisible\",\n    \"tooltip2D\",\n    \"tooltip3D\",\n    \"tooltipColumbusView\",\n  ]);\n\n  /**\n   * Gets the currently active tooltip.  This property is observable.\n   * @type {string}\n   */\n  this.selectedTooltip = undefined;\n  knockout.defineProperty(this, \"selectedTooltip\", function () {\n    const mode = that.sceneMode;\n    if (mode === SceneMode.SCENE2D) {\n      return that.tooltip2D;\n    }\n    if (mode === SceneMode.SCENE3D) {\n      return that.tooltip3D;\n    }\n    return that.tooltipColumbusView;\n  });\n\n  this._toggleDropDown = createCommand(function () {\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n\n  this._morphTo2D = createCommand(function () {\n    scene.morphTo2D(that._duration);\n  });\n\n  this._morphTo3D = createCommand(function () {\n    scene.morphTo3D(that._duration);\n  });\n\n  this._morphToColumbusView = createCommand(function () {\n    scene.morphToColumbusView(that._duration);\n  });\n\n  //Used by knockout\n  this._sceneMode = SceneMode;\n}\n\nObject.defineProperties(SceneModePickerViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof SceneModePickerViewModel.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n\n  /**\n   * Gets or sets the the duration of scene mode transition animations in seconds.\n   * A value of zero causes the scene to instantly change modes.\n   * @memberof SceneModePickerViewModel.prototype\n   * @type {number}\n   */\n  duration: {\n    get: function () {\n      return this._duration;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (value < 0.0) {\n        throw new DeveloperError(\"duration value must be positive.\");\n      }\n      //>>includeEnd('debug');\n\n      this._duration = value;\n    },\n  },\n\n  /**\n   * Gets the command to toggle the drop down box.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function () {\n      return this._toggleDropDown;\n    },\n  },\n\n  /**\n   * Gets the command to morph to 2D.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphTo2D: {\n    get: function () {\n      return this._morphTo2D;\n    },\n  },\n\n  /**\n   * Gets the command to morph to 3D.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphTo3D: {\n    get: function () {\n      return this._morphTo3D;\n    },\n  },\n\n  /**\n   * Gets the command to morph to Columbus View.\n   * @memberof SceneModePickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  morphToColumbusView: {\n    get: function () {\n      return this._morphToColumbusView;\n    },\n  },\n});\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nSceneModePickerViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.\n */\nSceneModePickerViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  destroyObject(this);\n};\nexport default SceneModePickerViewModel;\n"],"mappings":"AAAA,SACEA,YAAY,EACZC,OAAO,EACPC,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,SAAS,QACJ,gBAAgB;AACvB,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,aAAa,MAAM,qBAAqB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACjD;EACA,IAAI,CAACT,OAAO,CAACQ,KAAK,CAAC,EAAE;IACnB,MAAM,IAAIN,cAAc,CAAC,oBAAoB,CAAC;EAChD;EACA;;EAEA,IAAI,CAACQ,MAAM,GAAGF,KAAK;EAEnB,MAAMG,IAAI,GAAG,IAAI;EAEjB,MAAMC,UAAU,GAAG,SAAAA,CAAUC,YAAY,EAAEC,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAE;IACvEL,IAAI,CAACM,SAAS,GAAGF,OAAO;IACxBJ,IAAI,CAACO,eAAe,GAAG,KAAK;EAC9B,CAAC;EAED,IAAI,CAACC,YAAY,GAAG,IAAIhB,WAAW,CAAC,CAAC;EACrC,IAAI,CAACgB,YAAY,CAACC,GAAG,CAACZ,KAAK,CAACI,UAAU,EAAEA,UAAU,CAAC;EAEnD,IAAI,CAACS,SAAS,GAAGtB,YAAY,CAACU,QAAQ,EAAE,GAAG,CAAC;;EAE5C;AACF;AACA;AACA;EACE,IAAI,CAACQ,SAAS,GAAGT,KAAK,CAACc,IAAI;;EAE3B;AACF;AACA;AACA;AACA;EACE,IAAI,CAACJ,eAAe,GAAG,KAAK;;EAE5B;AACF;AACA;AACA;AACA;EACE,IAAI,CAACK,SAAS,GAAG,IAAI;;EAErB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,SAAS,GAAG,IAAI;;EAErB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,mBAAmB,GAAG,eAAe;EAE1CpB,QAAQ,CAACqB,KAAK,CAAC,IAAI,EAAE,CACnB,WAAW,EACX,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,qBAAqB,CACtB,CAAC;;EAEF;AACF;AACA;AACA;EACE,IAAI,CAACC,eAAe,GAAGC,SAAS;EAChCvB,QAAQ,CAACwB,cAAc,CAAC,IAAI,EAAE,iBAAiB,EAAE,YAAY;IAC3D,MAAMP,IAAI,GAAGX,IAAI,CAACM,SAAS;IAC3B,IAAIK,IAAI,KAAKlB,SAAS,CAAC0B,OAAO,EAAE;MAC9B,OAAOnB,IAAI,CAACY,SAAS;IACvB;IACA,IAAID,IAAI,KAAKlB,SAAS,CAAC2B,OAAO,EAAE;MAC9B,OAAOpB,IAAI,CAACa,SAAS;IACvB;IACA,OAAOb,IAAI,CAACc,mBAAmB;EACjC,CAAC,CAAC;EAEF,IAAI,CAACO,eAAe,GAAG1B,aAAa,CAAC,YAAY;IAC/CK,IAAI,CAACO,eAAe,GAAG,CAACP,IAAI,CAACO,eAAe;EAC9C,CAAC,CAAC;EAEF,IAAI,CAACe,UAAU,GAAG3B,aAAa,CAAC,YAAY;IAC1CE,KAAK,CAAC0B,SAAS,CAACvB,IAAI,CAACU,SAAS,CAAC;EACjC,CAAC,CAAC;EAEF,IAAI,CAACc,UAAU,GAAG7B,aAAa,CAAC,YAAY;IAC1CE,KAAK,CAAC4B,SAAS,CAACzB,IAAI,CAACU,SAAS,CAAC;EACjC,CAAC,CAAC;EAEF,IAAI,CAACgB,oBAAoB,GAAG/B,aAAa,CAAC,YAAY;IACpDE,KAAK,CAAC8B,mBAAmB,CAAC3B,IAAI,CAACU,SAAS,CAAC;EAC3C,CAAC,CAAC;;EAEF;EACA,IAAI,CAACkB,UAAU,GAAGnC,SAAS;AAC7B;AAEAoC,MAAM,CAACC,gBAAgB,CAAClC,wBAAwB,CAACmC,SAAS,EAAE;EAC1D;AACF;AACA;AACA;AACA;EACElC,KAAK,EAAE;IACLmC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACjC,MAAM;IACpB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACED,QAAQ,EAAE;IACRkC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACtB,SAAS;IACvB,CAAC;IACDuB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAIA,KAAK,GAAG,GAAG,EAAE;QACf,MAAM,IAAI3C,cAAc,CAAC,kCAAkC,CAAC;MAC9D;MACA;;MAEA,IAAI,CAACmB,SAAS,GAAGwB,KAAK;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,cAAc,EAAE;IACdH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACX,eAAe;IAC7B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEE,SAAS,EAAE;IACTS,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACV,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEG,SAAS,EAAE;IACTO,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACR,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEG,mBAAmB,EAAE;IACnBK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACN,oBAAoB;IAClC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA9B,wBAAwB,CAACmC,SAAS,CAACK,WAAW,GAAG,YAAY;EAC3D,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACAxC,wBAAwB,CAACmC,SAAS,CAACM,OAAO,GAAG,YAAY;EACvD,IAAI,CAAC7B,YAAY,CAAC8B,SAAS,CAAC,CAAC;EAE7BhD,aAAa,CAAC,IAAI,CAAC;AACrB,CAAC;AACD,eAAeM,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}