{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\n/**\n * @typedef {object} SingleTileImageryProvider.ConstructorOptions\n *\n * Initialization options for the SingleTileImageryProvider constructor\n *\n * @property {Resource|string} url The url for the tile.\n * @property {number} [tileWidth] The width of the tile, in pixels.\n * @property {number} [tileHeight] The height of the tile, in pixels.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n */\n\n/**\n * Provides a single, top-level imagery tile.  The single image is assumed to be in\n * the Geographic projection (i.e. WGS84 / EPSG:4326),\n * and will be rendered using a {@link GeographicTilingScheme}.\n *\n * @alias SingleTileImageryProvider\n * @constructor\n *\n * @param {SingleTileImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n */\nfunction SingleTileImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n  const rectangle = defaultValue(options.rectangle, Rectangle.MAX_VALUE);\n  const tilingScheme = new GeographicTilingScheme({\n    rectangle: rectangle,\n    numberOfLevelZeroTilesX: 1,\n    numberOfLevelZeroTilesY: 1,\n    ellipsoid: options.ellipsoid\n  });\n  this._tilingScheme = tilingScheme;\n  this._image = undefined;\n  this._texture = undefined;\n  this._hasError = false;\n  this._errorEvent = new Event();\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.url\", options.url);\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(options.url);\n  this._resource = resource;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"options.tileWidth\", options.tileWidth);\n  Check.typeOf.number(\"options.tileHeight\", options.tileHeight);\n  //>>includeEnd('debug');\n\n  this._tileWidth = options.tileWidth;\n  this._tileHeight = options.tileHeight;\n}\nObject.defineProperties(SingleTileImageryProvider.prototype, {\n  /**\n   * Gets the URL of the single, top-level imagery tile.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    }\n  },\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    }\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    }\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    }\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    }\n  }\n});\nfunction failure(resource, error, provider, previousError) {\n  let message = `Failed to load image ${resource.url}`;\n  if (defined(error) && defined(error.message)) {\n    message += `: ${error.message}`;\n  }\n  const reportedError = TileProviderError.reportError(previousError, provider, defined(provider) ? provider._errorEvent : undefined, message, 0, 0, 0, error);\n  if (reportedError.retry) {\n    return doRequest(resource, provider, reportedError);\n  }\n  if (defined(provider)) {\n    provider._hasError = true;\n  }\n  throw new RuntimeError(message);\n}\nasync function doRequest(resource, provider, previousError) {\n  try {\n    const image = await ImageryProvider.loadImage(null, resource);\n    return image;\n  } catch (error) {\n    return failure(resource, error, provider, previousError);\n  }\n}\n\n/**\n * @typedef {Object} SingleTileImageryProvider.fromUrlOptions\n *\n * Initialization options for the SingleTileImageryProvider constructor when using SingleTileImageryProvider.fromUrl\n *\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n */\n\n/**\n * Creates a provider for a single, top-level imagery tile.  The single image is assumed to use a\n * @param {Resource|String} url The url for the tile\n * @param {SingleTileImageryProvider.fromUrlOptions} [options] Object describing initialization options.\n * @returns {Promise.<SingleTileImageryProvider>} The resolved SingleTileImageryProvider.\n *\n * @example\n * const provider = await SingleTileImageryProvider.fromUrl(\"https://yoururl.com/image.png\");\n */\nSingleTileImageryProvider.fromUrl = async function (url, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(url);\n  const image = await doRequest(resource);\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const provider = new SingleTileImageryProvider({\n    ...options,\n    url: url,\n    tileWidth: image.width,\n    tileHeight: image.height\n  });\n  provider._image = image;\n  return provider;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nSingleTileImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<ImageryTypes>|undefined} The resolved image\n */\nSingleTileImageryProvider.prototype.requestImage = async function (x, y, level, request) {\n  if (!this._hasError && !defined(this._image)) {\n    const image = await doRequest(this._resource, this);\n    this._image = image;\n    TileProviderError.reportSuccess(this._errorEvent);\n    return image;\n  }\n  return this._image;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nSingleTileImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n};\nexport default SingleTileImageryProvider;","map":{"version":3,"names":["Check","Credit","defaultValue","defined","Event","GeographicTilingScheme","Rectangle","Resource","RuntimeError","TileProviderError","ImageryProvider","SingleTileImageryProvider","options","EMPTY_OBJECT","_defaultAlpha","undefined","_defaultNightAlpha","_defaultDayAlpha","_defaultBrightness","_defaultContrast","_defaultHue","_defaultSaturation","_defaultGamma","_defaultMinificationFilter","_defaultMagnificationFilter","rectangle","MAX_VALUE","tilingScheme","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","ellipsoid","_tilingScheme","_image","_texture","_hasError","_errorEvent","credit","_credit","url","resource","createIfNeeded","_resource","typeOf","number","tileWidth","tileHeight","_tileWidth","_tileHeight","Object","defineProperties","prototype","get","proxy","maximumLevel","minimumLevel","tileDiscardPolicy","errorEvent","hasAlphaChannel","failure","error","provider","previousError","message","reportedError","reportError","retry","doRequest","image","loadImage","fromUrl","width","height","getTileCredits","x","y","level","requestImage","request","reportSuccess","pickFeatures","longitude","latitude"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/SingleTileImageryProvider.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\n/**\n * @typedef {object} SingleTileImageryProvider.ConstructorOptions\n *\n * Initialization options for the SingleTileImageryProvider constructor\n *\n * @property {Resource|string} url The url for the tile.\n * @property {number} [tileWidth] The width of the tile, in pixels.\n * @property {number} [tileHeight] The height of the tile, in pixels.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n */\n\n/**\n * Provides a single, top-level imagery tile.  The single image is assumed to be in\n * the Geographic projection (i.e. WGS84 / EPSG:4326),\n * and will be rendered using a {@link GeographicTilingScheme}.\n *\n * @alias SingleTileImageryProvider\n * @constructor\n *\n * @param {SingleTileImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n */\nfunction SingleTileImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  const rectangle = defaultValue(options.rectangle, Rectangle.MAX_VALUE);\n  const tilingScheme = new GeographicTilingScheme({\n    rectangle: rectangle,\n    numberOfLevelZeroTilesX: 1,\n    numberOfLevelZeroTilesY: 1,\n    ellipsoid: options.ellipsoid,\n  });\n  this._tilingScheme = tilingScheme;\n  this._image = undefined;\n  this._texture = undefined;\n\n  this._hasError = false;\n  this._errorEvent = new Event();\n\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.url\", options.url);\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(options.url);\n  this._resource = resource;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"options.tileWidth\", options.tileWidth);\n  Check.typeOf.number(\"options.tileHeight\", options.tileHeight);\n  //>>includeEnd('debug');\n\n  this._tileWidth = options.tileWidth;\n  this._tileHeight = options.tileHeight;\n}\n\nObject.defineProperties(SingleTileImageryProvider.prototype, {\n  /**\n   * Gets the URL of the single, top-level imagery tile.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof SingleTileImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n});\n\nfunction failure(resource, error, provider, previousError) {\n  let message = `Failed to load image ${resource.url}`;\n  if (defined(error) && defined(error.message)) {\n    message += `: ${error.message}`;\n  }\n\n  const reportedError = TileProviderError.reportError(\n    previousError,\n    provider,\n    defined(provider) ? provider._errorEvent : undefined,\n    message,\n    0,\n    0,\n    0,\n    error,\n  );\n  if (reportedError.retry) {\n    return doRequest(resource, provider, reportedError);\n  }\n\n  if (defined(provider)) {\n    provider._hasError = true;\n  }\n  throw new RuntimeError(message);\n}\n\nasync function doRequest(resource, provider, previousError) {\n  try {\n    const image = await ImageryProvider.loadImage(null, resource);\n    return image;\n  } catch (error) {\n    return failure(resource, error, provider, previousError);\n  }\n}\n\n/**\n * @typedef {Object} SingleTileImageryProvider.fromUrlOptions\n *\n * Initialization options for the SingleTileImageryProvider constructor when using SingleTileImageryProvider.fromUrl\n *\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n */\n\n/**\n * Creates a provider for a single, top-level imagery tile.  The single image is assumed to use a\n * @param {Resource|String} url The url for the tile\n * @param {SingleTileImageryProvider.fromUrlOptions} [options] Object describing initialization options.\n * @returns {Promise.<SingleTileImageryProvider>} The resolved SingleTileImageryProvider.\n *\n * @example\n * const provider = await SingleTileImageryProvider.fromUrl(\"https://yoururl.com/image.png\");\n */\nSingleTileImageryProvider.fromUrl = async function (url, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(url);\n  const image = await doRequest(resource);\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const provider = new SingleTileImageryProvider({\n    ...options,\n    url: url,\n    tileWidth: image.width,\n    tileHeight: image.height,\n  });\n  provider._image = image;\n  return provider;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nSingleTileImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<ImageryTypes>|undefined} The resolved image\n */\nSingleTileImageryProvider.prototype.requestImage = async function (\n  x,\n  y,\n  level,\n  request,\n) {\n  if (!this._hasError && !defined(this._image)) {\n    const image = await doRequest(this._resource, this);\n    this._image = image;\n    TileProviderError.reportSuccess(this._errorEvent);\n    return image;\n  }\n\n  return this._image;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nSingleTileImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  return undefined;\n};\nexport default SingleTileImageryProvider;\n"],"mappings":"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AACA;AACA;AACA;EACED,UAAU,EAAE;IACVM,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACJ,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEM,YAAY,EAAE;IACZF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,CAAC;IACV;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEG,YAAY,EAAE;IACZH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,CAAC;IACV;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACExB,YAAY,EAAE;IACZwB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACpB,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEN,SAAS,EAAE;IACT0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACpB,aAAa,CAACN,SAAS;IACrC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE8B,iBAAiB,EAAE;IACjBJ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAOpC,SAAS;IAClB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEyC,UAAU,EAAE;IACVL,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAChB,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,MAAM,EAAE;IACNe,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACd,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,eAAe,EAAE;IACfN,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI;IACb;EACF;AACF,CAAC,CAAC;AAEF,SAASO,OAAOA,CAACnB,QAAQ,EAAEoB,KAAK,EAAEC,QAAQ,EAAEC,aAAa,EAAE;EACzD,IAAIC,OAAO,GAAG,wBAAwBvB,QAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}