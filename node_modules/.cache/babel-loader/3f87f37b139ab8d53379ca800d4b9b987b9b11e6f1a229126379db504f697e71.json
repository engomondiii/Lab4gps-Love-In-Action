{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\nimport SplitDirection from \"./SplitDirection.js\";\n\n/**\n * <div class=\"notice\">\n * A point is created and its initial properties are set by calling {@link PointPrimitiveCollection#add}. Do not call the constructor directly.\n * </div>\n * A graphical point positioned in the 3D scene, that is created\n * and rendered using a {@link PointPrimitiveCollection}.\n *\n * @alias PointPrimitive\n *\n * @performance Reading a property, e.g., {@link PointPrimitive#show}, is constant time.\n * Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link PointPrimitiveCollection#update} is called.  The per-pointPrimitive traffic is\n * the same regardless of how many properties were updated.  If most pointPrimitives in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link PointPrimitiveCollection#removeAll}\n * and add new pointPrimitives instead of modifying each one.\n *\n * @exception {DeveloperError} scaleByDistance.far must be greater than scaleByDistance.near\n * @exception {DeveloperError} translucencyByDistance.far must be greater than translucencyByDistance.near\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @see PointPrimitiveCollection\n * @see PointPrimitiveCollection#add\n *\n * @internalConstructor\n * @class\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Points.html|Cesium Sandcastle Points Demo}\n */\nfunction PointPrimitive(options, pointPrimitiveCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(options.disableDepthTestDistance) && options.disableDepthTestDistance < 0.0) {\n    throw new DeveloperError(\"disableDepthTestDistance must be greater than or equal to 0.0.\");\n  }\n  //>>includeEnd('debug');\n\n  let translucencyByDistance = options.translucencyByDistance;\n  let scaleByDistance = options.scaleByDistance;\n  let distanceDisplayCondition = options.distanceDisplayCondition;\n  if (defined(translucencyByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (translucencyByDistance.far <= translucencyByDistance.near) {\n      throw new DeveloperError(\"translucencyByDistance.far must be greater than translucencyByDistance.near.\");\n    }\n    //>>includeEnd('debug');\n    translucencyByDistance = NearFarScalar.clone(translucencyByDistance);\n  }\n  if (defined(scaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (scaleByDistance.far <= scaleByDistance.near) {\n      throw new DeveloperError(\"scaleByDistance.far must be greater than scaleByDistance.near.\");\n    }\n    //>>includeEnd('debug');\n    scaleByDistance = NearFarScalar.clone(scaleByDistance);\n  }\n  if (defined(distanceDisplayCondition)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n      throw new DeveloperError(\"distanceDisplayCondition.far must be greater than distanceDisplayCondition.near.\");\n    }\n    //>>includeEnd('debug');\n    distanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition);\n  }\n  this._show = defaultValue(options.show, true);\n  this._position = Cartesian3.clone(defaultValue(options.position, Cartesian3.ZERO));\n  this._actualPosition = Cartesian3.clone(this._position); // For columbus view and 2D\n  this._color = Color.clone(defaultValue(options.color, Color.WHITE));\n  this._outlineColor = Color.clone(defaultValue(options.outlineColor, Color.TRANSPARENT));\n  this._outlineWidth = defaultValue(options.outlineWidth, 0.0);\n  this._pixelSize = defaultValue(options.pixelSize, 10.0);\n  this._scaleByDistance = scaleByDistance;\n  this._translucencyByDistance = translucencyByDistance;\n  this._distanceDisplayCondition = distanceDisplayCondition;\n  this._disableDepthTestDistance = defaultValue(options.disableDepthTestDistance, 0.0);\n  this._id = options.id;\n  this._collection = defaultValue(options.collection, pointPrimitiveCollection);\n  this._clusterShow = true;\n  this._pickId = undefined;\n  this._pointPrimitiveCollection = pointPrimitiveCollection;\n  this._dirty = false;\n  this._index = -1; //Used only by PointPrimitiveCollection\n\n  this._splitDirection = defaultValue(options.splitDirection, SplitDirection.NONE);\n}\nconst SHOW_INDEX = PointPrimitive.SHOW_INDEX = 0;\nconst POSITION_INDEX = PointPrimitive.POSITION_INDEX = 1;\nconst COLOR_INDEX = PointPrimitive.COLOR_INDEX = 2;\nconst OUTLINE_COLOR_INDEX = PointPrimitive.OUTLINE_COLOR_INDEX = 3;\nconst OUTLINE_WIDTH_INDEX = PointPrimitive.OUTLINE_WIDTH_INDEX = 4;\nconst PIXEL_SIZE_INDEX = PointPrimitive.PIXEL_SIZE_INDEX = 5;\nconst SCALE_BY_DISTANCE_INDEX = PointPrimitive.SCALE_BY_DISTANCE_INDEX = 6;\nconst TRANSLUCENCY_BY_DISTANCE_INDEX = PointPrimitive.TRANSLUCENCY_BY_DISTANCE_INDEX = 7;\nconst DISTANCE_DISPLAY_CONDITION_INDEX = PointPrimitive.DISTANCE_DISPLAY_CONDITION_INDEX = 8;\nconst DISABLE_DEPTH_DISTANCE_INDEX = PointPrimitive.DISABLE_DEPTH_DISTANCE_INDEX = 9;\nconst SPLIT_DIRECTION_INDEX = PointPrimitive.SPLIT_DIRECTION_INDEX = 10;\nPointPrimitive.NUMBER_OF_PROPERTIES = 11;\nfunction makeDirty(pointPrimitive, propertyChanged) {\n  const pointPrimitiveCollection = pointPrimitive._pointPrimitiveCollection;\n  if (defined(pointPrimitiveCollection)) {\n    pointPrimitiveCollection._updatePointPrimitive(pointPrimitive, propertyChanged);\n    pointPrimitive._dirty = true;\n  }\n}\nObject.defineProperties(PointPrimitive.prototype, {\n  /**\n   * Determines if this point will be shown.  Use this to hide or show a point, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof PointPrimitive.prototype\n   * @type {boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the Cartesian position of this point.\n   * @memberof PointPrimitive.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      const position = this._position;\n      if (!Cartesian3.equals(position, value)) {\n        Cartesian3.clone(value, position);\n        Cartesian3.clone(value, this._actualPosition);\n        makeDirty(this, POSITION_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets near and far scaling properties of a point based on the point's distance from the camera.\n   * A point's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the point's scale remains clamped to the nearest bound.  This scale\n   * multiplies the pixelSize and outlineWidth to affect the total size of the point.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof PointPrimitive.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a pointPrimitive's scaleByDistance to scale to 15 when the\n   * // camera is 1500 meters from the pointPrimitive and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * p.scaleByDistance = new Cesium.NearFarScalar(1.5e2, 15, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable scaling by distance\n   * p.scaleByDistance = undefined;\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      }\n      //>>includeEnd('debug');\n\n      const scaleByDistance = this._scaleByDistance;\n      if (!NearFarScalar.equals(scaleByDistance, value)) {\n        this._scaleByDistance = NearFarScalar.clone(value, scaleByDistance);\n        makeDirty(this, SCALE_BY_DISTANCE_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets near and far translucency properties of a point based on the point's distance from the camera.\n   * A point's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the point's translucency remains clamped to the nearest bound.  If undefined,\n   * translucencyByDistance will be disabled.\n   * @memberof PointPrimitive.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a point's translucency to 1.0 when the\n   * // camera is 1500 meters from the point and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * p.translucencyByDistance = new Cesium.NearFarScalar(1.5e2, 1.0, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable translucency by distance\n   * p.translucencyByDistance = undefined;\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      }\n      //>>includeEnd('debug');\n\n      const translucencyByDistance = this._translucencyByDistance;\n      if (!NearFarScalar.equals(translucencyByDistance, value)) {\n        this._translucencyByDistance = NearFarScalar.clone(value, translucencyByDistance);\n        makeDirty(this, TRANSLUCENCY_BY_DISTANCE_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the inner size of the point in pixels.\n   * @memberof PointPrimitive.prototype\n   * @type {number}\n   */\n  pixelSize: {\n    get: function () {\n      return this._pixelSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._pixelSize !== value) {\n        this._pixelSize = value;\n        makeDirty(this, PIXEL_SIZE_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the inner color of the point.\n   * The red, green, blue, and alpha values are indicated by <code>value</code>'s <code>red</code>, <code>green</code>,\n   * <code>blue</code>, and <code>alpha</code> properties as shown in Example 1.  These components range from <code>0.0</code>\n   * (no intensity) to <code>1.0</code> (full intensity).\n   * @memberof PointPrimitive.prototype\n   * @type {Color}\n   *\n   * @example\n   * // Example 1. Assign yellow.\n   * p.color = Cesium.Color.YELLOW;\n   *\n   * @example\n   * // Example 2. Make a pointPrimitive 50% translucent.\n   * p.color = new Cesium.Color(1.0, 1.0, 1.0, 0.5);\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      const color = this._color;\n      if (!Color.equals(color, value)) {\n        Color.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the outline color of the point.\n   * @memberof PointPrimitive.prototype\n   * @type {Color}\n   */\n  outlineColor: {\n    get: function () {\n      return this._outlineColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      const outlineColor = this._outlineColor;\n      if (!Color.equals(outlineColor, value)) {\n        Color.clone(value, outlineColor);\n        makeDirty(this, OUTLINE_COLOR_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the outline width in pixels.  This width adds to pixelSize,\n   * increasing the total size of the point.\n   * @memberof PointPrimitive.prototype\n   * @type {number}\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._outlineWidth !== value) {\n        this._outlineWidth = value;\n        makeDirty(this, OUTLINE_WIDTH_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this point will be displayed.\n   * @memberof PointPrimitive.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far must be greater than near\");\n      }\n      //>>includeEnd('debug');\n      if (!DistanceDisplayCondition.equals(this._distanceDisplayCondition, value)) {\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(value, this._distanceDisplayCondition);\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof PointPrimitive.prototype\n   * @type {number}\n   * @default 0.0\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      if (this._disableDepthTestDistance !== value) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value) || value < 0.0) {\n          throw new DeveloperError(\"disableDepthTestDistance must be greater than or equal to 0.0.\");\n        }\n        //>>includeEnd('debug');\n        this._disableDepthTestDistance = value;\n        makeDirty(this, DISABLE_DEPTH_DISTANCE_INDEX);\n      }\n    }\n  },\n  /**\n   * Gets or sets the user-defined value returned when the point is picked.\n   * @memberof PointPrimitive.prototype\n   * @type {*}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    }\n  },\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    }\n  },\n  /**\n   * Determines whether or not this point will be shown or hidden because it was clustered.\n   * @memberof PointPrimitive.prototype\n   * @type {boolean}\n   * @private\n   */\n  clusterShow: {\n    get: function () {\n      return this._clusterShow;\n    },\n    set: function (value) {\n      if (this._clusterShow !== value) {\n        this._clusterShow = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    }\n  },\n  /**\n   * The {@link SplitDirection} to apply to this point.\n   * @memberof PointPrimitive.prototype\n   * @type {SplitDirection}\n   * @default {@link SplitDirection.NONE}\n   */\n  splitDirection: {\n    get: function () {\n      return this._splitDirection;\n    },\n    set: function (value) {\n      if (this._splitDirection !== value) {\n        this._splitDirection = value;\n        makeDirty(this, SPLIT_DIRECTION_INDEX);\n      }\n    }\n  }\n});\nPointPrimitive.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this,\n      collection: this._collection,\n      id: this._id\n    });\n  }\n  return this._pickId;\n};\nPointPrimitive.prototype._getActualPosition = function () {\n  return this._actualPosition;\n};\nPointPrimitive.prototype._setActualPosition = function (value) {\n  Cartesian3.clone(value, this._actualPosition);\n  makeDirty(this, POSITION_INDEX);\n};\nconst tempCartesian3 = new Cartesian4();\nPointPrimitive._computeActualPosition = function (position, frameState, modelMatrix) {\n  if (frameState.mode === SceneMode.SCENE3D) {\n    return position;\n  }\n  Matrix4.multiplyByPoint(modelMatrix, position, tempCartesian3);\n  return SceneTransforms.computeActualEllipsoidPosition(frameState, tempCartesian3);\n};\nconst scratchCartesian4 = new Cartesian4();\n\n// This function is basically a stripped-down JavaScript version of PointPrimitiveCollectionVS.glsl\nPointPrimitive._computeScreenSpacePosition = function (modelMatrix, position, scene, result) {\n  // Model to world coordinates\n  const positionWorld = Matrix4.multiplyByVector(modelMatrix, Cartesian4.fromElements(position.x, position.y, position.z, 1, scratchCartesian4), scratchCartesian4);\n  const positionWC = SceneTransforms.worldToWindowCoordinates(scene, positionWorld, result);\n  return positionWC;\n};\n\n/**\n * Computes the screen-space position of the point's origin.\n * The screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n * left to right, and <code>y</code> increases from top to bottom.\n *\n * @param {Scene} scene The scene.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The screen-space position of the point.\n *\n * @exception {DeveloperError} PointPrimitive must be in a collection.\n *\n * @example\n * console.log(p.computeScreenSpacePosition(scene).toString());\n */\nPointPrimitive.prototype.computeScreenSpacePosition = function (scene, result) {\n  const pointPrimitiveCollection = this._pointPrimitiveCollection;\n  if (!defined(result)) {\n    result = new Cartesian2();\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(pointPrimitiveCollection)) {\n    throw new DeveloperError(\"PointPrimitive must be in a collection.\");\n  }\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const modelMatrix = pointPrimitiveCollection.modelMatrix;\n  const windowCoordinates = PointPrimitive._computeScreenSpacePosition(modelMatrix, this._actualPosition, scene, result);\n  if (!defined(windowCoordinates)) {\n    return undefined;\n  }\n  windowCoordinates.y = scene.canvas.clientHeight - windowCoordinates.y;\n  return windowCoordinates;\n};\n\n/**\n * Gets a point's screen space bounding box centered around screenSpacePosition.\n * @param {PointPrimitive} point The point to get the screen space bounding box for.\n * @param {Cartesian2} screenSpacePosition The screen space center of the label.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The screen space bounding box.\n *\n * @private\n */\nPointPrimitive.getScreenSpaceBoundingBox = function (point, screenSpacePosition, result) {\n  const size = point.pixelSize;\n  const halfSize = size * 0.5;\n  const x = screenSpacePosition.x - halfSize;\n  const y = screenSpacePosition.y - halfSize;\n  const width = size;\n  const height = size;\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n  return result;\n};\n\n/**\n * Determines if this point equals another point.  Points are equal if all their properties\n * are equal.  Points in different collections can be equal.\n *\n * @param {PointPrimitive} other The point to compare for equality.\n * @returns {boolean} <code>true</code> if the points are equal; otherwise, <code>false</code>.\n */\nPointPrimitive.prototype.equals = function (other) {\n  return this === other || defined(other) && this._id === other._id && Cartesian3.equals(this._position, other._position) && Color.equals(this._color, other._color) && this._pixelSize === other._pixelSize && this._outlineWidth === other._outlineWidth && this._show === other._show && Color.equals(this._outlineColor, other._outlineColor) && NearFarScalar.equals(this._scaleByDistance, other._scaleByDistance) && NearFarScalar.equals(this._translucencyByDistance, other._translucencyByDistance) && DistanceDisplayCondition.equals(this._distanceDisplayCondition, other._distanceDisplayCondition) && this._disableDepthTestDistance === other._disableDepthTestDistance && this._splitDirection === other._splitDirection;\n};\nPointPrimitive.prototype._destroy = function () {\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._pointPrimitiveCollection = undefined;\n};\nexport default PointPrimitive;","map":{"version":3,"names":["BoundingRectangle","Cartesian2","Cartesian3","Cartesian4","Color","defaultValue","defined","DeveloperError","DistanceDisplayCondition","Matrix4","NearFarScalar","SceneMode","SceneTransforms","SplitDirection","PointPrimitive","options","pointPrimitiveCollection","EMPTY_OBJECT","disableDepthTestDistance","translucencyByDistance","scaleByDistance","distanceDisplayCondition","far","near","clone","_show","show","_position","position","ZERO","_actualPosition","_color","color","WHITE","_outlineColor","outlineColor","TRANSPARENT","_outlineWidth","outlineWidth","_pixelSize","pixelSize","_scaleByDistance","_translucencyByDistance","_distanceDisplayCondition","_disableDepthTestDistance","_id","id","_collection","collection","_clusterShow","_pickId","undefined","_pointPrimitiveCollection","_dirty","_index","_splitDirection","splitDirection","NONE","SHOW_INDEX","POSITION_INDEX","COLOR_INDEX","OUTLINE_COLOR_INDEX","OUTLINE_WIDTH_INDEX","PIXEL_SIZE_INDEX","SCALE_BY_DISTANCE_INDEX","TRANSLUCENCY_BY_DISTANCE_INDEX","DISTANCE_DISPLAY_CONDITION_INDEX","DISABLE_DEPTH_DISTANCE_INDEX","SPLIT_DIRECTION_INDEX","NUMBER_OF_PROPERTIES","makeDirty","pointPrimitive","propertyChanged","_updatePointPrimitive","Object","defineProperties","prototype","get","set","value","equals","object","pickId","clusterShow","getPickId","context","createPickId","primitive","_getActualPosition","_setActualPosition","tempCartesian3","_computeActualPosition","frameState","modelMatrix","mode","SCENE3D","multiplyByPoint","computeActualEllipsoidPosition","scratchCartesian4","_computeScreenSpacePosition","scene","result","positionWorld","multiplyByVector","fromElements","x","y","z","positionWC","worldToWindowCoordinates","computeScreenSpacePosition","windowCoordinates","canvas","clientHeight","getScreenSpaceBoundingBox","point","screenSpacePosition","size","halfSize","width","height","other","_destroy","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/PointPrimitive.js"],"sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\nimport SplitDirection from \"./SplitDirection.js\";\n\n/**\n * <div class=\"notice\">\n * A point is created and its initial properties are set by calling {@link PointPrimitiveCollection#add}. Do not call the constructor directly.\n * </div>\n * A graphical point positioned in the 3D scene, that is created\n * and rendered using a {@link PointPrimitiveCollection}.\n *\n * @alias PointPrimitive\n *\n * @performance Reading a property, e.g., {@link PointPrimitive#show}, is constant time.\n * Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link PointPrimitiveCollection#update} is called.  The per-pointPrimitive traffic is\n * the same regardless of how many properties were updated.  If most pointPrimitives in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link PointPrimitiveCollection#removeAll}\n * and add new pointPrimitives instead of modifying each one.\n *\n * @exception {DeveloperError} scaleByDistance.far must be greater than scaleByDistance.near\n * @exception {DeveloperError} translucencyByDistance.far must be greater than translucencyByDistance.near\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @see PointPrimitiveCollection\n * @see PointPrimitiveCollection#add\n *\n * @internalConstructor\n * @class\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Points.html|Cesium Sandcastle Points Demo}\n */\nfunction PointPrimitive(options, pointPrimitiveCollection) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    defined(options.disableDepthTestDistance) &&\n    options.disableDepthTestDistance < 0.0\n  ) {\n    throw new DeveloperError(\n      \"disableDepthTestDistance must be greater than or equal to 0.0.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  let translucencyByDistance = options.translucencyByDistance;\n  let scaleByDistance = options.scaleByDistance;\n  let distanceDisplayCondition = options.distanceDisplayCondition;\n  if (defined(translucencyByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (translucencyByDistance.far <= translucencyByDistance.near) {\n      throw new DeveloperError(\n        \"translucencyByDistance.far must be greater than translucencyByDistance.near.\",\n      );\n    }\n    //>>includeEnd('debug');\n    translucencyByDistance = NearFarScalar.clone(translucencyByDistance);\n  }\n  if (defined(scaleByDistance)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (scaleByDistance.far <= scaleByDistance.near) {\n      throw new DeveloperError(\n        \"scaleByDistance.far must be greater than scaleByDistance.near.\",\n      );\n    }\n    //>>includeEnd('debug');\n    scaleByDistance = NearFarScalar.clone(scaleByDistance);\n  }\n  if (defined(distanceDisplayCondition)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n      throw new DeveloperError(\n        \"distanceDisplayCondition.far must be greater than distanceDisplayCondition.near.\",\n      );\n    }\n    //>>includeEnd('debug');\n    distanceDisplayCondition = DistanceDisplayCondition.clone(\n      distanceDisplayCondition,\n    );\n  }\n\n  this._show = defaultValue(options.show, true);\n  this._position = Cartesian3.clone(\n    defaultValue(options.position, Cartesian3.ZERO),\n  );\n  this._actualPosition = Cartesian3.clone(this._position); // For columbus view and 2D\n  this._color = Color.clone(defaultValue(options.color, Color.WHITE));\n  this._outlineColor = Color.clone(\n    defaultValue(options.outlineColor, Color.TRANSPARENT),\n  );\n  this._outlineWidth = defaultValue(options.outlineWidth, 0.0);\n  this._pixelSize = defaultValue(options.pixelSize, 10.0);\n  this._scaleByDistance = scaleByDistance;\n  this._translucencyByDistance = translucencyByDistance;\n  this._distanceDisplayCondition = distanceDisplayCondition;\n  this._disableDepthTestDistance = defaultValue(\n    options.disableDepthTestDistance,\n    0.0,\n  );\n  this._id = options.id;\n  this._collection = defaultValue(options.collection, pointPrimitiveCollection);\n\n  this._clusterShow = true;\n\n  this._pickId = undefined;\n  this._pointPrimitiveCollection = pointPrimitiveCollection;\n  this._dirty = false;\n  this._index = -1; //Used only by PointPrimitiveCollection\n\n  this._splitDirection = defaultValue(\n    options.splitDirection,\n    SplitDirection.NONE,\n  );\n}\n\nconst SHOW_INDEX = (PointPrimitive.SHOW_INDEX = 0);\nconst POSITION_INDEX = (PointPrimitive.POSITION_INDEX = 1);\nconst COLOR_INDEX = (PointPrimitive.COLOR_INDEX = 2);\nconst OUTLINE_COLOR_INDEX = (PointPrimitive.OUTLINE_COLOR_INDEX = 3);\nconst OUTLINE_WIDTH_INDEX = (PointPrimitive.OUTLINE_WIDTH_INDEX = 4);\nconst PIXEL_SIZE_INDEX = (PointPrimitive.PIXEL_SIZE_INDEX = 5);\nconst SCALE_BY_DISTANCE_INDEX = (PointPrimitive.SCALE_BY_DISTANCE_INDEX = 6);\nconst TRANSLUCENCY_BY_DISTANCE_INDEX =\n  (PointPrimitive.TRANSLUCENCY_BY_DISTANCE_INDEX = 7);\nconst DISTANCE_DISPLAY_CONDITION_INDEX =\n  (PointPrimitive.DISTANCE_DISPLAY_CONDITION_INDEX = 8);\nconst DISABLE_DEPTH_DISTANCE_INDEX =\n  (PointPrimitive.DISABLE_DEPTH_DISTANCE_INDEX = 9);\nconst SPLIT_DIRECTION_INDEX = (PointPrimitive.SPLIT_DIRECTION_INDEX = 10);\nPointPrimitive.NUMBER_OF_PROPERTIES = 11;\n\nfunction makeDirty(pointPrimitive, propertyChanged) {\n  const pointPrimitiveCollection = pointPrimitive._pointPrimitiveCollection;\n  if (defined(pointPrimitiveCollection)) {\n    pointPrimitiveCollection._updatePointPrimitive(\n      pointPrimitive,\n      propertyChanged,\n    );\n    pointPrimitive._dirty = true;\n  }\n}\n\nObject.defineProperties(PointPrimitive.prototype, {\n  /**\n   * Determines if this point will be shown.  Use this to hide or show a point, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof PointPrimitive.prototype\n   * @type {boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the Cartesian position of this point.\n   * @memberof PointPrimitive.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug)\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      const position = this._position;\n      if (!Cartesian3.equals(position, value)) {\n        Cartesian3.clone(value, position);\n        Cartesian3.clone(value, this._actualPosition);\n\n        makeDirty(this, POSITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far scaling properties of a point based on the point's distance from the camera.\n   * A point's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the point's scale remains clamped to the nearest bound.  This scale\n   * multiplies the pixelSize and outlineWidth to affect the total size of the point.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof PointPrimitive.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a pointPrimitive's scaleByDistance to scale to 15 when the\n   * // camera is 1500 meters from the pointPrimitive and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * p.scaleByDistance = new Cesium.NearFarScalar(1.5e2, 15, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable scaling by distance\n   * p.scaleByDistance = undefined;\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\",\n        );\n      }\n      //>>includeEnd('debug');\n\n      const scaleByDistance = this._scaleByDistance;\n      if (!NearFarScalar.equals(scaleByDistance, value)) {\n        this._scaleByDistance = NearFarScalar.clone(value, scaleByDistance);\n        makeDirty(this, SCALE_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far translucency properties of a point based on the point's distance from the camera.\n   * A point's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the point's translucency remains clamped to the nearest bound.  If undefined,\n   * translucencyByDistance will be disabled.\n   * @memberof PointPrimitive.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a point's translucency to 1.0 when the\n   * // camera is 1500 meters from the point and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * p.translucencyByDistance = new Cesium.NearFarScalar(1.5e2, 1.0, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable translucency by distance\n   * p.translucencyByDistance = undefined;\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\",\n        );\n      }\n      //>>includeEnd('debug');\n\n      const translucencyByDistance = this._translucencyByDistance;\n      if (!NearFarScalar.equals(translucencyByDistance, value)) {\n        this._translucencyByDistance = NearFarScalar.clone(\n          value,\n          translucencyByDistance,\n        );\n        makeDirty(this, TRANSLUCENCY_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the inner size of the point in pixels.\n   * @memberof PointPrimitive.prototype\n   * @type {number}\n   */\n  pixelSize: {\n    get: function () {\n      return this._pixelSize;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._pixelSize !== value) {\n        this._pixelSize = value;\n        makeDirty(this, PIXEL_SIZE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the inner color of the point.\n   * The red, green, blue, and alpha values are indicated by <code>value</code>'s <code>red</code>, <code>green</code>,\n   * <code>blue</code>, and <code>alpha</code> properties as shown in Example 1.  These components range from <code>0.0</code>\n   * (no intensity) to <code>1.0</code> (full intensity).\n   * @memberof PointPrimitive.prototype\n   * @type {Color}\n   *\n   * @example\n   * // Example 1. Assign yellow.\n   * p.color = Cesium.Color.YELLOW;\n   *\n   * @example\n   * // Example 2. Make a pointPrimitive 50% translucent.\n   * p.color = new Cesium.Color(1.0, 1.0, 1.0, 0.5);\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      const color = this._color;\n      if (!Color.equals(color, value)) {\n        Color.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the outline color of the point.\n   * @memberof PointPrimitive.prototype\n   * @type {Color}\n   */\n  outlineColor: {\n    get: function () {\n      return this._outlineColor;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      const outlineColor = this._outlineColor;\n      if (!Color.equals(outlineColor, value)) {\n        Color.clone(value, outlineColor);\n        makeDirty(this, OUTLINE_COLOR_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the outline width in pixels.  This width adds to pixelSize,\n   * increasing the total size of the point.\n   * @memberof PointPrimitive.prototype\n   * @type {number}\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (this._outlineWidth !== value) {\n        this._outlineWidth = value;\n        makeDirty(this, OUTLINE_WIDTH_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this point will be displayed.\n   * @memberof PointPrimitive.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far <= value.near) {\n        throw new DeveloperError(\"far must be greater than near\");\n      }\n      //>>includeEnd('debug');\n      if (\n        !DistanceDisplayCondition.equals(this._distanceDisplayCondition, value)\n      ) {\n        this._distanceDisplayCondition = DistanceDisplayCondition.clone(\n          value,\n          this._distanceDisplayCondition,\n        );\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof PointPrimitive.prototype\n   * @type {number}\n   * @default 0.0\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      if (this._disableDepthTestDistance !== value) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value) || value < 0.0) {\n          throw new DeveloperError(\n            \"disableDepthTestDistance must be greater than or equal to 0.0.\",\n          );\n        }\n        //>>includeEnd('debug');\n        this._disableDepthTestDistance = value;\n        makeDirty(this, DISABLE_DEPTH_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the user-defined value returned when the point is picked.\n   * @memberof PointPrimitive.prototype\n   * @type {*}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n      if (defined(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n  },\n\n  /**\n   * Determines whether or not this point will be shown or hidden because it was clustered.\n   * @memberof PointPrimitive.prototype\n   * @type {boolean}\n   * @private\n   */\n  clusterShow: {\n    get: function () {\n      return this._clusterShow;\n    },\n    set: function (value) {\n      if (this._clusterShow !== value) {\n        this._clusterShow = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * The {@link SplitDirection} to apply to this point.\n   * @memberof PointPrimitive.prototype\n   * @type {SplitDirection}\n   * @default {@link SplitDirection.NONE}\n   */\n  splitDirection: {\n    get: function () {\n      return this._splitDirection;\n    },\n    set: function (value) {\n      if (this._splitDirection !== value) {\n        this._splitDirection = value;\n        makeDirty(this, SPLIT_DIRECTION_INDEX);\n      }\n    },\n  },\n});\n\nPointPrimitive.prototype.getPickId = function (context) {\n  if (!defined(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this,\n      collection: this._collection,\n      id: this._id,\n    });\n  }\n\n  return this._pickId;\n};\n\nPointPrimitive.prototype._getActualPosition = function () {\n  return this._actualPosition;\n};\n\nPointPrimitive.prototype._setActualPosition = function (value) {\n  Cartesian3.clone(value, this._actualPosition);\n  makeDirty(this, POSITION_INDEX);\n};\n\nconst tempCartesian3 = new Cartesian4();\nPointPrimitive._computeActualPosition = function (\n  position,\n  frameState,\n  modelMatrix,\n) {\n  if (frameState.mode === SceneMode.SCENE3D) {\n    return position;\n  }\n\n  Matrix4.multiplyByPoint(modelMatrix, position, tempCartesian3);\n  return SceneTransforms.computeActualEllipsoidPosition(\n    frameState,\n    tempCartesian3,\n  );\n};\n\nconst scratchCartesian4 = new Cartesian4();\n\n// This function is basically a stripped-down JavaScript version of PointPrimitiveCollectionVS.glsl\nPointPrimitive._computeScreenSpacePosition = function (\n  modelMatrix,\n  position,\n  scene,\n  result,\n) {\n  // Model to world coordinates\n  const positionWorld = Matrix4.multiplyByVector(\n    modelMatrix,\n    Cartesian4.fromElements(\n      position.x,\n      position.y,\n      position.z,\n      1,\n      scratchCartesian4,\n    ),\n    scratchCartesian4,\n  );\n  const positionWC = SceneTransforms.worldToWindowCoordinates(\n    scene,\n    positionWorld,\n    result,\n  );\n  return positionWC;\n};\n\n/**\n * Computes the screen-space position of the point's origin.\n * The screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n * left to right, and <code>y</code> increases from top to bottom.\n *\n * @param {Scene} scene The scene.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The screen-space position of the point.\n *\n * @exception {DeveloperError} PointPrimitive must be in a collection.\n *\n * @example\n * console.log(p.computeScreenSpacePosition(scene).toString());\n */\nPointPrimitive.prototype.computeScreenSpacePosition = function (scene, result) {\n  const pointPrimitiveCollection = this._pointPrimitiveCollection;\n  if (!defined(result)) {\n    result = new Cartesian2();\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(pointPrimitiveCollection)) {\n    throw new DeveloperError(\"PointPrimitive must be in a collection.\");\n  }\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const modelMatrix = pointPrimitiveCollection.modelMatrix;\n  const windowCoordinates = PointPrimitive._computeScreenSpacePosition(\n    modelMatrix,\n    this._actualPosition,\n    scene,\n    result,\n  );\n  if (!defined(windowCoordinates)) {\n    return undefined;\n  }\n\n  windowCoordinates.y = scene.canvas.clientHeight - windowCoordinates.y;\n  return windowCoordinates;\n};\n\n/**\n * Gets a point's screen space bounding box centered around screenSpacePosition.\n * @param {PointPrimitive} point The point to get the screen space bounding box for.\n * @param {Cartesian2} screenSpacePosition The screen space center of the label.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The screen space bounding box.\n *\n * @private\n */\nPointPrimitive.getScreenSpaceBoundingBox = function (\n  point,\n  screenSpacePosition,\n  result,\n) {\n  const size = point.pixelSize;\n  const halfSize = size * 0.5;\n\n  const x = screenSpacePosition.x - halfSize;\n  const y = screenSpacePosition.y - halfSize;\n  const width = size;\n  const height = size;\n\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n\n  return result;\n};\n\n/**\n * Determines if this point equals another point.  Points are equal if all their properties\n * are equal.  Points in different collections can be equal.\n *\n * @param {PointPrimitive} other The point to compare for equality.\n * @returns {boolean} <code>true</code> if the points are equal; otherwise, <code>false</code>.\n */\nPointPrimitive.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (defined(other) &&\n      this._id === other._id &&\n      Cartesian3.equals(this._position, other._position) &&\n      Color.equals(this._color, other._color) &&\n      this._pixelSize === other._pixelSize &&\n      this._outlineWidth === other._outlineWidth &&\n      this._show === other._show &&\n      Color.equals(this._outlineColor, other._outlineColor) &&\n      NearFarScalar.equals(this._scaleByDistance, other._scaleByDistance) &&\n      NearFarScalar.equals(\n        this._translucencyByDistance,\n        other._translucencyByDistance,\n      ) &&\n      DistanceDisplayCondition.equals(\n        this._distanceDisplayCondition,\n        other._distanceDisplayCondition,\n      ) &&\n      this._disableDepthTestDistance === other._disableDepthTestDistance &&\n      this._splitDirection === other._splitDirection)\n  );\n};\n\nPointPrimitive.prototype._destroy = function () {\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._pointPrimitiveCollection = undefined;\n};\nexport default PointPrimitive;\n"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,wBAAwB,MAAM,qCAAqC;AAC1E,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,OAAO,EAAEC,wBAAwB,EAAE;EACzDD,OAAO,GAAGV,YAAY,CAACU,OAAO,EAAEV,YAAY,CAACY,YAAY,CAAC;;EAE1D;EACA,IACEX,OAAO,CAACS,OAAO,CAACG,wBAAwB,CAAC,IACzCH,OAAO,CAACG,wBAAwB,GAAG,GAAG,EACtC;IACA,MAAM,IAAIX,cAAc,CACtB,gEACF,CAAC;EACH;EACA;;EAEA,IAAIY,sBAAsB,GAAGJ,OAAO,CAACI,sBAAsB;EAC3D,IAAIC,eAAe,GAAGL,OAAO,CAACK,eAAe;EAC7C,IAAIC,wBAAwB,GAAGN,OAAO,CAACM,wBAAwB;EAC/D,IAAIf,OAAO,CAACa,sBAAsB,CAAC,EAAE;IACnC;IACA,IAAIA,sBAAsB,CAACG,GAAG,IAAIH,sBAAsB,CAACI,IAAI,EAAE;MAC7D,MAAM,IAAIhB,cAAc,CACtB,8EACF,CAAC;IACH;IACA;IACAY,sBAAsB,GAAGT,aAAa,CAACc,KAAK,CAACL,sBAAsB,CAAC;EACtE;EACA,IAAIb,OAAO,CAACc,eAAe,CAAC,EAAE;IAC5B;IACA,IAAIA,eAAe,CAACE,GAAG,IAAIF,eAAe,CAACG,IAAI,EAAE;MAC/C,MAAM,IAAIhB,cAAc,CACtB,gEACF,CAAC;IACH;IACA;IACAa,eAAe,GAAGV,aAAa,CAACc,KAAK,CAACJ,eAAe,CAAC;EACxD;EACA,IAAId,OAAO,CAACe,wBAAwB,CAAC,EAAE;IACrC;IACA,IAAIA,wBAAwB,CAACC,GAAG,IAAID,wBAAwB,CAACE,IAAI,EAAE;MACjE,MAAM,IAAIhB,cAAc,CACtB,kFACF,CAAC;IACH;IACA;IACAc,wBAAwB,GAAGb,wBAAwB,CAACgB,KAAK,CACvDH,wBACF,CAAC;EACH;EAEA,IAAI,CAACI,KAAK,GAAGpB,YAAY,CAACU,OAAO,CAACW,IAAI,EAAE,IAAI,CAAC;EAC7C,IAAI,CAACC,SAAS,GAAGzB,UAAU,CAACsB,KAAK,CAC/BnB,YAAY,CAACU,OAAO,CAACa,QAAQ,EAAE1B,UAAU,CAAC2B,IAAI,CAChD,CAAC;EACD,IAAI,CAACC,eAAe,GAAG5B,UAAU,CAACsB,KAAK,CAAC,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC;EACzD,IAAI,CAACI,MAAM,GAAG3B,KAAK,CAACoB,KAAK,CAACnB,YAAY,CAACU,OAAO,CAACiB,KAAK,EAAE5B,KAAK,CAAC6B,KAAK,CAAC,CAAC;EACnE,IAAI,CAACC,aAAa,GAAG9B,KAAK,CAACoB,KAAK,CAC9BnB,YAAY,CAACU,OAAO,CAACoB,YAAY,EAAE/B,KAAK,CAACgC,WAAW,CACtD,CAAC;EACD,IAAI,CAACC,aAAa,GAAGhC,YAAY,CAACU,OAAO,CAACuB,YAAY,EAAE,GAAG,CAAC;EAC5D,IAAI,CAACC,UAAU,GAAGlC,YAAY,CAACU,OAAO,CAACyB,SAAS,EAAE,IAAI,CAAC;EACvD,IAAI,CAACC,gBAAgB,GAAGrB,eAAe;EACvC,IAAI,CAACsB,uBAAuB,GAAGvB,sBAAsB;EACrD,IAAI,CAACwB,yBAAyB,GAAGtB,wBAAwB;EACzD,IAAI,CAACuB,yBAAyB,GAAGvC,YAAY,CAC3CU,OAAO,CAACG,wBAAwB,EAChC,GACF,CAAC;EACD,IAAI,CAAC2B,GAAG,GAAG9B,OAAO,CAAC+B,EAAE;EACrB,IAAI,CAACC,WAAW,GAAG1C,YAAY,CAACU,OAAO,CAACiC,UAAU,EAAEhC,wBAAwB,CAAC;EAE7E,IAAI,CAACiC,YAAY,GAAG,IAAI;EAExB,IAAI,CAACC,OAAO,GAAGC,SAAS;EACxB,IAAI,CAACC,yBAAyB,GAAGpC,wBAAwB;EACzD,IAAI,CAACqC,MAAM,GAAG,KAAK;EACnB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;;EAElB,IAAI,CAACC,eAAe,GAAGlD,YAAY,CACjCU,OAAO,CAACyC,cAAc,EACtB3C,cAAc,CAAC4C,IACjB,CAAC;AACH;AAEA,MAAMC,UAAU,GAAI5C,cAAc,CAAC4C,UAAU,GAAG,CAAE;AAClD,MAAMC,cAAc,GAAI7C,cAAc,CAAC6C,cAAc,GAAG,CAAE;AAC1D,MAAMC,WAAW,GAAI9C,cAAc,CAAC8C,WAAW,GAAG,CAAE;AACpD,MAAMC,mBAAmB,GAAI/C,cAAc,CAAC+C,mBAAmB,GAAG,CAAE;AACpE,MAAMC,mBAAmB,GAAIhD,cAAc,CAACgD,mBAAmB,GAAG,CAAE;AACpE,MAAMC,gBAAgB,GAAIjD,cAAc,CAACiD,gBAAgB,GAAG,CAAE;AAC9D,MAAMC,uBAAuB,GAAIlD,cAAc,CAACkD,uBAAuB,GAAG,CAAE;AAC5E,MAAMC,8BAA8B,GACjCnD,cAAc,CAACmD,8BAA8B,GAAG,CAAE;AACrD,MAAMC,gCAAgC,GACnCpD,cAAc,CAACoD,gCAAgC,GAAG,CAAE;AACvD,MAAMC,4BAA4B,GAC/BrD,cAAc,CAACqD,4BAA4B,GAAG,CAAE;AACnD,MAAMC,qBAAqB,GAAItD,cAAc,CAACsD,qBAAqB,GAAG,EAAG;AACzEtD,cAAc,CAACuD,oBAAoB,GAAG,EAAE;AAExC,SAASC,SAASA,CAACC,cAAc,EAAEC,eAAe,EAAE;EAClD,MAAMxD,wBAAwB,GAAGuD,cAAc,CAACnB,yBAAyB;EACzE,IAAI9C,OAAO,CAACU,wBAAwB,CAAC,EAAE;IACrCA,wBAAwB,CAACyD,qBAAqB,CAC5CF,cAAc,EACdC,eACF,CAAC;IACDD,cAAc,CAAClB,MAAM,GAAG,IAAI;EAC9B;AACF;AAEAqB,MAAM,CAACC,gBAAgB,CAAC7D,cAAc,CAAC8D,SAAS,EAAE;EAChD;AACF;AACA;AACA;AACA;AACA;EACElD,IAAI,EAAE;IACJmD,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACpD,KAAK;IACnB,CAAC;IACDqD,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAI,CAACzE,OAAO,CAACyE,KAAK,CAAC,EAAE;QACnB,MAAM,IAAIxE,cAAc,CAAC,oBAAoB,CAAC;MAChD;MACA;;MAEA,IAAI,IAAI,CAACkB,KAAK,KAAKsD,KAAK,EAAE;QACxB,IAAI,CAACtD,KAAK,GAAGsD,KAAK;QAClBT,SAAS,CAAC,IAAI,EAAEZ,UAAU,CAAC;MAC7B;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACE9B,QAAQ,EAAE;IACRiD,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAClD,SAAS;IACvB,CAAC;IACDmD,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAI,CAACzE,OAAO,CAACyE,KAAK,CAAC,EAAE;QACnB,MAAM,IAAIxE,cAAc,CAAC,oBAAoB,CAAC;MAChD;MACA;;MAEA,MAAMqB,QAAQ,GAAG,IAAI,CAACD,SAAS;MAC/B,IAAI,CAACzB,UAAU,CAAC8E,MAAM,CAACpD,QAAQ,EAAEmD,KAAK,CAAC,EAAE;QACvC7E,UAAU,CAACsB,KAAK,CAACuD,KAAK,EAAEnD,QAAQ,CAAC;QACjC1B,UAAU,CAACsB,KAAK,CAACuD,KAAK,EAAE,IAAI,CAACjD,eAAe,CAAC;QAE7CwC,SAAS,CAAC,IAAI,EAAEX,cAAc,CAAC;MACjC;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEvC,eAAe,EAAE;IACfyD,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACpC,gBAAgB;IAC9B,CAAC;IACDqC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAIzE,OAAO,CAACyE,KAAK,CAAC,IAAIA,KAAK,CAACzD,GAAG,IAAIyD,KAAK,CAACxD,IAAI,EAAE;QAC7C,MAAM,IAAIhB,cAAc,CACtB,kDACF,CAAC;MACH;MACA;;MAEA,MAAMa,eAAe,GAAG,IAAI,CAACqB,gBAAgB;MAC7C,IAAI,CAAC/B,aAAa,CAACsE,MAAM,CAAC5D,eAAe,EAAE2D,KAAK,CAAC,EAAE;QACjD,IAAI,CAACtC,gBAAgB,GAAG/B,aAAa,CAACc,KAAK,CAACuD,KAAK,EAAE3D,eAAe,CAAC;QACnEkD,SAAS,CAAC,IAAI,EAAEN,uBAAuB,CAAC;MAC1C;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE7C,sBAAsB,EAAE;IACtB0D,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnC,uBAAuB;IACrC,CAAC;IACDoC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAIzE,OAAO,CAACyE,KAAK,CAAC,IAAIA,KAAK,CAACzD,GAAG,IAAIyD,KAAK,CAACxD,IAAI,EAAE;QAC7C,MAAM,IAAIhB,cAAc,CACtB,kDACF,CAAC;MACH;MACA;;MAEA,MAAMY,sBAAsB,GAAG,IAAI,CAACuB,uBAAuB;MAC3D,IAAI,CAAChC,aAAa,CAACsE,MAAM,CAAC7D,sBAAsB,EAAE4D,KAAK,CAAC,EAAE;QACxD,IAAI,CAACrC,uBAAuB,GAAGhC,aAAa,CAACc,KAAK,CAChDuD,KAAK,EACL5D,sBACF,CAAC;QACDmD,SAAS,CAAC,IAAI,EAAEL,8BAA8B,CAAC;MACjD;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEzB,SAAS,EAAE;IACTqC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACtC,UAAU;IACxB,CAAC;IACDuC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAI,CAACzE,OAAO,CAACyE,KAAK,CAAC,EAAE;QACnB,MAAM,IAAIxE,cAAc,CAAC,oBAAoB,CAAC;MAChD;MACA;;MAEA,IAAI,IAAI,CAACgC,UAAU,KAAKwC,KAAK,EAAE;QAC7B,IAAI,CAACxC,UAAU,GAAGwC,KAAK;QACvBT,SAAS,CAAC,IAAI,EAAEP,gBAAgB,CAAC;MACnC;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE/B,KAAK,EAAE;IACL6C,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC9C,MAAM;IACpB,CAAC;IACD+C,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAI,CAACzE,OAAO,CAACyE,KAAK,CAAC,EAAE;QACnB,MAAM,IAAIxE,cAAc,CAAC,oBAAoB,CAAC;MAChD;MACA;;MAEA,MAAMyB,KAAK,GAAG,IAAI,CAACD,MAAM;MACzB,IAAI,CAAC3B,KAAK,CAAC4E,MAAM,CAAChD,KAAK,EAAE+C,KAAK,CAAC,EAAE;QAC/B3E,KAAK,CAACoB,KAAK,CAACuD,KAAK,EAAE/C,KAAK,CAAC;QACzBsC,SAAS,CAAC,IAAI,EAAEV,WAAW,CAAC;MAC9B;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEzB,YAAY,EAAE;IACZ0C,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC3C,aAAa;IAC3B,CAAC;IACD4C,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAI,CAACzE,OAAO,CAACyE,KAAK,CAAC,EAAE;QACnB,MAAM,IAAIxE,cAAc,CAAC,oBAAoB,CAAC;MAChD;MACA;;MAEA,MAAM4B,YAAY,GAAG,IAAI,CAACD,aAAa;MACvC,IAAI,CAAC9B,KAAK,CAAC4E,MAAM,CAAC7C,YAAY,EAAE4C,KAAK,CAAC,EAAE;QACtC3E,KAAK,CAACoB,KAAK,CAACuD,KAAK,EAAE5C,YAAY,CAAC;QAChCmC,SAAS,CAAC,IAAI,EAAET,mBAAmB,CAAC;MACtC;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEvB,YAAY,EAAE;IACZuC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACxC,aAAa;IAC3B,CAAC;IACDyC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAI,CAACzE,OAAO,CAACyE,KAAK,CAAC,EAAE;QACnB,MAAM,IAAIxE,cAAc,CAAC,oBAAoB,CAAC;MAChD;MACA;;MAEA,IAAI,IAAI,CAAC8B,aAAa,KAAK0C,KAAK,EAAE;QAChC,IAAI,CAAC1C,aAAa,GAAG0C,KAAK;QAC1BT,SAAS,CAAC,IAAI,EAAER,mBAAmB,CAAC;MACtC;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEzC,wBAAwB,EAAE;IACxBwD,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAClC,yBAAyB;IACvC,CAAC;IACDmC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACA,IAAIzE,OAAO,CAACyE,KAAK,CAAC,IAAIA,KAAK,CAACzD,GAAG,IAAIyD,KAAK,CAACxD,IAAI,EAAE;QAC7C,MAAM,IAAIhB,cAAc,CAAC,+BAA+B,CAAC;MAC3D;MACA;MACA,IACE,CAACC,wBAAwB,CAACwE,MAAM,CAAC,IAAI,CAACrC,yBAAyB,EAAEoC,KAAK,CAAC,EACvE;QACA,IAAI,CAACpC,yBAAyB,GAAGnC,wBAAwB,CAACgB,KAAK,CAC7DuD,KAAK,EACL,IAAI,CAACpC,yBACP,CAAC;QACD2B,SAAS,CAAC,IAAI,EAAEJ,gCAAgC,CAAC;MACnD;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEhD,wBAAwB,EAAE;IACxB2D,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACjC,yBAAyB;IACvC,CAAC;IACDkC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB,IAAI,IAAI,CAACnC,yBAAyB,KAAKmC,KAAK,EAAE;QAC5C;QACA,IAAI,CAACzE,OAAO,CAACyE,KAAK,CAAC,IAAIA,KAAK,GAAG,GAAG,EAAE;UAClC,MAAM,IAAIxE,cAAc,CACtB,gEACF,CAAC;QACH;QACA;QACA,IAAI,CAACqC,yBAAyB,GAAGmC,KAAK;QACtCT,SAAS,CAAC,IAAI,EAAEH,4BAA4B,CAAC;MAC/C;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACErB,EAAE,EAAE;IACF+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAChC,GAAG;IACjB,CAAC;IACDiC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB,IAAI,CAAClC,GAAG,GAAGkC,KAAK;MAChB,IAAIzE,OAAO,CAAC,IAAI,CAAC4C,OAAO,CAAC,EAAE;QACzB,IAAI,CAACA,OAAO,CAAC+B,MAAM,CAACnC,EAAE,GAAGiC,KAAK;MAChC;IACF;EACF,CAAC;EAED;AACF;AACA;EACEG,MAAM,EAAE;IACNL,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC3B,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEiC,WAAW,EAAE;IACXN,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC5B,YAAY;IAC1B,CAAC;IACD6B,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB,IAAI,IAAI,CAAC9B,YAAY,KAAK8B,KAAK,EAAE;QAC/B,IAAI,CAAC9B,YAAY,GAAG8B,KAAK;QACzBT,SAAS,CAAC,IAAI,EAAEZ,UAAU,CAAC;MAC7B;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEF,cAAc,EAAE;IACdqB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACtB,eAAe;IAC7B,CAAC;IACDuB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB,IAAI,IAAI,CAACxB,eAAe,KAAKwB,KAAK,EAAE;QAClC,IAAI,CAACxB,eAAe,GAAGwB,KAAK;QAC5BT,SAAS,CAAC,IAAI,EAAEF,qBAAqB,CAAC;MACxC;IACF;EACF;AACF,CAAC,CAAC;AAEFtD,cAAc,CAAC8D,SAAS,CAACQ,SAAS,GAAG,UAAUC,OAAO,EAAE;EACtD,IAAI,CAAC/E,OAAO,CAAC,IAAI,CAAC4C,OAAO,CAAC,EAAE;IAC1B,IAAI,CAACA,OAAO,GAAGmC,OAAO,CAACC,YAAY,CAAC;MAClCC,SAAS,EAAE,IAAI;MACfvC,UAAU,EAAE,IAAI,CAACD,WAAW;MAC5BD,EAAE,EAAE,IAAI,CAACD;IACX,CAAC,CAAC;EACJ;EAEA,OAAO,IAAI,CAACK,OAAO;AACrB,CAAC;AAEDpC,cAAc,CAAC8D,SAAS,CAACY,kBAAkB,GAAG,YAAY;EACxD,OAAO,IAAI,CAAC1D,eAAe;AAC7B,CAAC;AAEDhB,cAAc,CAAC8D,SAAS,CAACa,kBAAkB,GAAG,UAAUV,KAAK,EAAE;EAC7D7E,UAAU,CAACsB,KAAK,CAACuD,KAAK,EAAE,IAAI,CAACjD,eAAe,CAAC;EAC7CwC,SAAS,CAAC,IAAI,EAAEX,cAAc,CAAC;AACjC,CAAC;AAED,MAAM+B,cAAc,GAAG,IAAIvF,UAAU,CAAC,CAAC;AACvCW,cAAc,CAAC6E,sBAAsB,GAAG,UACtC/D,QAAQ,EACRgE,UAAU,EACVC,WAAW,EACX;EACA,IAAID,UAAU,CAACE,IAAI,KAAKnF,SAAS,CAACoF,OAAO,EAAE;IACzC,OAAOnE,QAAQ;EACjB;EAEAnB,OAAO,CAACuF,eAAe,CAACH,WAAW,EAAEjE,QAAQ,EAAE8D,cAAc,CAAC;EAC9D,OAAO9E,eAAe,CAACqF,8BAA8B,CACnDL,UAAU,EACVF,cACF,CAAC;AACH,CAAC;AAED,MAAMQ,iBAAiB,GAAG,IAAI/F,UAAU,CAAC,CAAC;;AAE1C;AACAW,cAAc,CAACqF,2BAA2B,GAAG,UAC3CN,WAAW,EACXjE,QAAQ,EACRwE,KAAK,EACLC,MAAM,EACN;EACA;EACA,MAAMC,aAAa,GAAG7F,OAAO,CAAC8F,gBAAgB,CAC5CV,WAAW,EACX1F,UAAU,CAACqG,YAAY,CACrB5E,QAAQ,CAAC6E,CAAC,EACV7E,QAAQ,CAAC8E,CAAC,EACV9E,QAAQ,CAAC+E,CAAC,EACV,CAAC,EACDT,iBACF,CAAC,EACDA,iBACF,CAAC;EACD,MAAMU,UAAU,GAAGhG,eAAe,CAACiG,wBAAwB,CACzDT,KAAK,EACLE,aAAa,EACbD,MACF,CAAC;EACD,OAAOO,UAAU;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9F,cAAc,CAAC8D,SAAS,CAACkC,0BAA0B,GAAG,UAAUV,KAAK,EAAEC,MAAM,EAAE;EAC7E,MAAMrF,wBAAwB,GAAG,IAAI,CAACoC,yBAAyB;EAC/D,IAAI,CAAC9C,OAAO,CAAC+F,MAAM,CAAC,EAAE;IACpBA,MAAM,GAAG,IAAIpG,UAAU,CAAC,CAAC;EAC3B;;EAEA;EACA,IAAI,CAACK,OAAO,CAACU,wBAAwB,CAAC,EAAE;IACtC,MAAM,IAAIT,cAAc,CAAC,yCAAyC,CAAC;EACrE;EACA,IAAI,CAACD,OAAO,CAAC8F,KAAK,CAAC,EAAE;IACnB,MAAM,IAAI7F,cAAc,CAAC,oBAAoB,CAAC;EAChD;EACA;;EAEA,MAAMsF,WAAW,GAAG7E,wBAAwB,CAAC6E,WAAW;EACxD,MAAMkB,iBAAiB,GAAGjG,cAAc,CAACqF,2BAA2B,CAClEN,WAAW,EACX,IAAI,CAAC/D,eAAe,EACpBsE,KAAK,EACLC,MACF,CAAC;EACD,IAAI,CAAC/F,OAAO,CAACyG,iBAAiB,CAAC,EAAE;IAC/B,OAAO5D,SAAS;EAClB;EAEA4D,iBAAiB,CAACL,CAAC,GAAGN,KAAK,CAACY,MAAM,CAACC,YAAY,GAAGF,iBAAiB,CAACL,CAAC;EACrE,OAAOK,iBAAiB;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjG,cAAc,CAACoG,yBAAyB,GAAG,UACzCC,KAAK,EACLC,mBAAmB,EACnBf,MAAM,EACN;EACA,MAAMgB,IAAI,GAAGF,KAAK,CAAC3E,SAAS;EAC5B,MAAM8E,QAAQ,GAAGD,IAAI,GAAG,GAAG;EAE3B,MAAMZ,CAAC,GAAGW,mBAAmB,CAACX,CAAC,GAAGa,QAAQ;EAC1C,MAAMZ,CAAC,GAAGU,mBAAmB,CAACV,CAAC,GAAGY,QAAQ;EAC1C,MAAMC,KAAK,GAAGF,IAAI;EAClB,MAAMG,MAAM,GAAGH,IAAI;EAEnB,IAAI,CAAC/G,OAAO,CAAC+F,MAAM,CAAC,EAAE;IACpBA,MAAM,GAAG,IAAIrG,iBAAiB,CAAC,CAAC;EAClC;EAEAqG,MAAM,CAACI,CAAC,GAAGA,CAAC;EACZJ,MAAM,CAACK,CAAC,GAAGA,CAAC;EACZL,MAAM,CAACkB,KAAK,GAAGA,KAAK;EACpBlB,MAAM,CAACmB,MAAM,GAAGA,MAAM;EAEtB,OAAOnB,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAvF,cAAc,CAAC8D,SAAS,CAACI,MAAM,GAAG,UAAUyC,KAAK,EAAE;EACjD,OACE,IAAI,KAAKA,KAAK,IACbnH,OAAO,CAACmH,KAAK,CAAC,IACb,IAAI,CAAC5E,GAAG,KAAK4E,KAAK,CAAC5E,GAAG,IACtB3C,UAAU,CAAC8E,MAAM,CAAC,IAAI,CAACrD,SAAS,EAAE8F,KAAK,CAAC9F,SAAS,CAAC,IAClDvB,KAAK,CAAC4E,MAAM,CAAC,IAAI,CAACjD,MAAM,EAAE0F,KAAK,CAAC1F,MAAM,CAAC,IACvC,IAAI,CAACQ,UAAU,KAAKkF,KAAK,CAAClF,UAAU,IACpC,IAAI,CAACF,aAAa,KAAKoF,KAAK,CAACpF,aAAa,IAC1C,IAAI,CAACZ,KAAK,KAAKgG,KAAK,CAAChG,KAAK,IAC1BrB,KAAK,CAAC4E,MAAM,CAAC,IAAI,CAAC9C,aAAa,EAAEuF,KAAK,CAACvF,aAAa,CAAC,IACrDxB,aAAa,CAACsE,MAAM,CAAC,IAAI,CAACvC,gBAAgB,EAAEgF,KAAK,CAAChF,gBAAgB,CAAC,IACnE/B,aAAa,CAACsE,MAAM,CAClB,IAAI,CAACtC,uBAAuB,EAC5B+E,KAAK,CAAC/E,uBACR,CAAC,IACDlC,wBAAwB,CAACwE,MAAM,CAC7B,IAAI,CAACrC,yBAAyB,EAC9B8E,KAAK,CAAC9E,yBACR,CAAC,IACD,IAAI,CAACC,yBAAyB,KAAK6E,KAAK,CAAC7E,yBAAyB,IAClE,IAAI,CAACW,eAAe,KAAKkE,KAAK,CAAClE,eAAgB;AAErD,CAAC;AAEDzC,cAAc,CAAC8D,SAAS,CAAC8C,QAAQ,GAAG,YAAY;EAC9C,IAAI,CAACxE,OAAO,GAAG,IAAI,CAACA,OAAO,IAAI,IAAI,CAACA,OAAO,CAACyE,OAAO,CAAC,CAAC;EACrD,IAAI,CAACvE,yBAAyB,GAAGD,SAAS;AAC5C,CAAC;AACD,eAAerC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}