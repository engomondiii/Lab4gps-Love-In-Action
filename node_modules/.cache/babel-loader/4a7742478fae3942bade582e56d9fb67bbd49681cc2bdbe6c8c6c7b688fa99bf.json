{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport CubeMap from \"./CubeMap.js\";\n\n/**\n * Asynchronously loads six images and creates a cube map.  Returns a promise that\n * will resolve to a {@link CubeMap} once loaded, or reject if any image fails to load.\n *\n * @function loadCubeMap\n *\n * @param {Context} context The context to use to create the cube map.\n * @param {object} urls The source URL of each image.  See the example below.\n * @param {boolean} [skipColorSpaceConversion=false] If true, any custom gamma or color profiles in the images will be ignored.\n * @returns {Promise<CubeMap>} a promise that will resolve to the requested {@link CubeMap} when loaded.\n *\n * @exception {DeveloperError} context is required.\n * @exception {DeveloperError} urls is required and must have positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ properties.\n *\n *\n * @example\n * Cesium.loadCubeMap(context, {\n *     positiveX : 'skybox_px.png',\n *     negativeX : 'skybox_nx.png',\n *     positiveY : 'skybox_py.png',\n *     negativeY : 'skybox_ny.png',\n *     positiveZ : 'skybox_pz.png',\n *     negativeZ : 'skybox_nz.png'\n * }).then(function(cubeMap) {\n *     // use the cubemap\n * }).catch(function(error) {\n *     // an error occurred\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n *\n * @private\n */\nfunction loadCubeMap(context, urls, skipColorSpaceConversion) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"context\", context);\n  Check.defined(\"urls\", urls);\n  if (Object.values(CubeMap.FaceName).some(faceName => !defined(urls[faceName]))) {\n    throw new DeveloperError(\"urls must have positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ properties.\");\n  }\n  //>>includeEnd('debug');\n\n  // PERFORMANCE_IDEA: Given the size of some cube maps, we should consider tiling them, which\n  // would prevent hiccups when uploading, for example, six 4096x4096 textures to the GPU.\n  //\n  // Also, it is perhaps acceptable to use the context here in the callbacks, but\n  // ideally, we would do it in the primitive's update function.\n  const flipOptions = {\n    flipY: true,\n    skipColorSpaceConversion: skipColorSpaceConversion,\n    preferImageBitmap: true\n  };\n  const facePromises = [Resource.createIfNeeded(urls.positiveX).fetchImage(flipOptions), Resource.createIfNeeded(urls.negativeX).fetchImage(flipOptions), Resource.createIfNeeded(urls.positiveY).fetchImage(flipOptions), Resource.createIfNeeded(urls.negativeY).fetchImage(flipOptions), Resource.createIfNeeded(urls.positiveZ).fetchImage(flipOptions), Resource.createIfNeeded(urls.negativeZ).fetchImage(flipOptions)];\n  return Promise.all(facePromises).then(function (images) {\n    return new CubeMap({\n      context: context,\n      source: {\n        positiveX: images[0],\n        negativeX: images[1],\n        positiveY: images[2],\n        negativeY: images[3],\n        positiveZ: images[4],\n        negativeZ: images[5]\n      }\n    });\n  });\n}\nexport default loadCubeMap;","map":{"version":3,"names":["Check","defined","DeveloperError","Resource","CubeMap","loadCubeMap","context","urls","skipColorSpaceConversion","Object","values","FaceName","some","faceName","flipOptions","flipY","preferImageBitmap","facePromises","createIfNeeded","positiveX","fetchImage","negativeX","positiveY","negativeY","positiveZ","negativeZ","Promise","all","then","images","source"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/loadCubeMap.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport CubeMap from \"./CubeMap.js\";\n\n/**\n * Asynchronously loads six images and creates a cube map.  Returns a promise that\n * will resolve to a {@link CubeMap} once loaded, or reject if any image fails to load.\n *\n * @function loadCubeMap\n *\n * @param {Context} context The context to use to create the cube map.\n * @param {object} urls The source URL of each image.  See the example below.\n * @param {boolean} [skipColorSpaceConversion=false] If true, any custom gamma or color profiles in the images will be ignored.\n * @returns {Promise<CubeMap>} a promise that will resolve to the requested {@link CubeMap} when loaded.\n *\n * @exception {DeveloperError} context is required.\n * @exception {DeveloperError} urls is required and must have positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ properties.\n *\n *\n * @example\n * Cesium.loadCubeMap(context, {\n *     positiveX : 'skybox_px.png',\n *     negativeX : 'skybox_nx.png',\n *     positiveY : 'skybox_py.png',\n *     negativeY : 'skybox_ny.png',\n *     positiveZ : 'skybox_pz.png',\n *     negativeZ : 'skybox_nz.png'\n * }).then(function(cubeMap) {\n *     // use the cubemap\n * }).catch(function(error) {\n *     // an error occurred\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n *\n * @private\n */\nfunction loadCubeMap(context, urls, skipColorSpaceConversion) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"context\", context);\n  Check.defined(\"urls\", urls);\n  if (\n    Object.values(CubeMap.FaceName).some((faceName) => !defined(urls[faceName]))\n  ) {\n    throw new DeveloperError(\n      \"urls must have positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ properties.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  // PERFORMANCE_IDEA: Given the size of some cube maps, we should consider tiling them, which\n  // would prevent hiccups when uploading, for example, six 4096x4096 textures to the GPU.\n  //\n  // Also, it is perhaps acceptable to use the context here in the callbacks, but\n  // ideally, we would do it in the primitive's update function.\n  const flipOptions = {\n    flipY: true,\n    skipColorSpaceConversion: skipColorSpaceConversion,\n    preferImageBitmap: true,\n  };\n\n  const facePromises = [\n    Resource.createIfNeeded(urls.positiveX).fetchImage(flipOptions),\n    Resource.createIfNeeded(urls.negativeX).fetchImage(flipOptions),\n    Resource.createIfNeeded(urls.positiveY).fetchImage(flipOptions),\n    Resource.createIfNeeded(urls.negativeY).fetchImage(flipOptions),\n    Resource.createIfNeeded(urls.positiveZ).fetchImage(flipOptions),\n    Resource.createIfNeeded(urls.negativeZ).fetchImage(flipOptions),\n  ];\n\n  return Promise.all(facePromises).then(function (images) {\n    return new CubeMap({\n      context: context,\n      source: {\n        positiveX: images[0],\n        negativeX: images[1],\n        positiveY: images[2],\n        negativeY: images[3],\n        positiveZ: images[4],\n        negativeZ: images[5],\n      },\n    });\n  });\n}\nexport default loadCubeMap;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,OAAO,EAAEC,IAAI,EAAEC,wBAAwB,EAAE;EAC5D;EACAR,KAAK,CAACC,OAAO,CAAC,SAAS,EAAEK,OAAO,CAAC;EACjCN,KAAK,CAACC,OAAO,CAAC,MAAM,EAAEM,IAAI,CAAC;EAC3B,IACEE,MAAM,CAACC,MAAM,CAACN,OAAO,CAACO,QAAQ,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK,CAACZ,OAAO,CAACM,IAAI,CAACM,QAAQ,CAAC,CAAC,CAAC,EAC5E;IACA,MAAM,IAAIX,cAAc,CACtB,iGACF,CAAC;EACH;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA,MAAMY,WAAW,GAAG;IAClBC,KAAK,EAAE,IAAI;IACXP,wBAAwB,EAAEA,wBAAwB;IAClDQ,iBAAiB,EAAE;EACrB,CAAC;EAED,MAAMC,YAAY,GAAG,CACnBd,QAAQ,CAACe,cAAc,CAACX,IAAI,CAACY,SAAS,CAAC,CAACC,UAAU,CAACN,WAAW,CAAC,EAC/DX,QAAQ,CAACe,cAAc,CAACX,IAAI,CAACc,SAAS,CAAC,CAACD,UAAU,CAACN,WAAW,CAAC,EAC/DX,QAAQ,CAACe,cAAc,CAACX,IAAI,CAACe,SAAS,CAAC,CAACF,UAAU,CAACN,WAAW,CAAC,EAC/DX,QAAQ,CAACe,cAAc,CAACX,IAAI,CAACgB,SAAS,CAAC,CAACH,UAAU,CAACN,WAAW,CAAC,EAC/DX,QAAQ,CAACe,cAAc,CAACX,IAAI,CAACiB,SAAS,CAAC,CAACJ,UAAU,CAACN,WAAW,CAAC,EAC/DX,QAAQ,CAACe,cAAc,CAACX,IAAI,CAACkB,SAAS,CAAC,CAACL,UAAU,CAACN,WAAW,CAAC,CAChE;EAED,OAAOY,OAAO,CAACC,GAAG,CAACV,YAAY,CAAC,CAACW,IAAI,CAAC,UAAUC,MAAM,EAAE;IACtD,OAAO,IAAIzB,OAAO,CAAC;MACjBE,OAAO,EAAEA,OAAO;MAChBwB,MAAM,EAAE;QACNX,SAAS,EAAEU,MAAM,CAAC,CAAC,CAAC;QACpBR,SAAS,EAAEQ,MAAM,CAAC,CAAC,CAAC;QACpBP,SAAS,EAAEO,MAAM,CAAC,CAAC,CAAC;QACpBN,SAAS,EAAEM,MAAM,CAAC,CAAC,CAAC;QACpBL,SAAS,EAAEK,MAAM,CAAC,CAAC,CAAC;QACpBJ,SAAS,EAAEI,MAAM,CAAC,CAAC;MACrB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AACA,eAAexB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}