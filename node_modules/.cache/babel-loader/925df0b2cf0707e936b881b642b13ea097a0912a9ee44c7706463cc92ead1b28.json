{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Transform metadata values following the EXT_structural_metadata spec\\n\\\n * by multiplying by scale and adding the offset. Operations are always\\n\\\n * performed component-wise, even for matrices.\\n\\\n * \\n\\\n * @param {float|vec2|vec3|vec4|mat2|mat3|mat4} offset The offset to add\\n\\\n * @param {float|vec2|vec3|vec4|mat2|mat3|mat4} scale The scale factor to multiply\\n\\\n * @param {float|vec2|vec3|vec4|mat2|mat3|mat4} value The original value.\\n\\\n *\\n\\\n * @return {float|vec2|vec3|vec4|mat2|mat3|mat4} The transformed value of the same scalar/vector/matrix type as the input.\\n\\\n */\\n\\\nfloat czm_valueTransform(float offset, float scale, float value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nvec2 czm_valueTransform(vec2 offset, vec2 scale, vec2 value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nvec3 czm_valueTransform(vec3 offset, vec3 scale, vec3 value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nvec4 czm_valueTransform(vec4 offset, vec4 scale, vec4 value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nmat2 czm_valueTransform(mat2 offset, mat2 scale, mat2 value) {\\n\\\n  return matrixCompMult(scale, value) + offset;\\n\\\n}\\n\\\n\\n\\\nmat3 czm_valueTransform(mat3 offset, mat3 scale, mat3 value) {\\n\\\n  return matrixCompMult(scale, value) + offset;\\n\\\n}\\n\\\n\\n\\\nmat4 czm_valueTransform(mat4 offset, mat4 scale, mat4 value) {\\n\\\n  return matrixCompMult(scale, value) + offset;\\n\\\n}\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Builtin/Functions/valueTransform.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Transform metadata values following the EXT_structural_metadata spec\\n\\\n * by multiplying by scale and adding the offset. Operations are always\\n\\\n * performed component-wise, even for matrices.\\n\\\n * \\n\\\n * @param {float|vec2|vec3|vec4|mat2|mat3|mat4} offset The offset to add\\n\\\n * @param {float|vec2|vec3|vec4|mat2|mat3|mat4} scale The scale factor to multiply\\n\\\n * @param {float|vec2|vec3|vec4|mat2|mat3|mat4} value The original value.\\n\\\n *\\n\\\n * @return {float|vec2|vec3|vec4|mat2|mat3|mat4} The transformed value of the same scalar/vector/matrix type as the input.\\n\\\n */\\n\\\nfloat czm_valueTransform(float offset, float scale, float value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nvec2 czm_valueTransform(vec2 offset, vec2 scale, vec2 value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nvec3 czm_valueTransform(vec3 offset, vec3 scale, vec3 value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nvec4 czm_valueTransform(vec4 offset, vec4 scale, vec4 value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nmat2 czm_valueTransform(mat2 offset, mat2 scale, mat2 value) {\\n\\\n  return matrixCompMult(scale, value) + offset;\\n\\\n}\\n\\\n\\n\\\nmat3 czm_valueTransform(mat3 offset, mat3 scale, mat3 value) {\\n\\\n  return matrixCompMult(scale, value) + offset;\\n\\\n}\\n\\\n\\n\\\nmat4 czm_valueTransform(mat4 offset, mat4 scale, mat4 value) {\\n\\\n  return matrixCompMult(scale, value) + offset;\\n\\\n}\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}