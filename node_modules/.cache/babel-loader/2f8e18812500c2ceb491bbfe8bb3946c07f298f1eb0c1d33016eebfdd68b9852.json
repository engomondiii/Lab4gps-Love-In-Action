{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * An object containing structural metadata.\n * <p>\n * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension} as well as the\n * previous {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata|EXT_feature_metadata Extension} for glTF.\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {MetadataSchema} options.schema The parsed schema.\n * @param {PropertyTable[]} [options.propertyTables] An array of property table objects. For the legacy <code>EXT_feature_metadata</code> extension, this is sorted by the key in the propertyTables dictionary\n * @param {PropertyTexture[]} [options.propertyTextures] An array of property texture objects. For the legacy <code>EXT_feature_metadata</code> extension, this is sorted by the key in the propertyTextures dictionary\n * @param {PropertyAttribute[]} [options.propertyAttributes] An array of property attribute objects. This is new in <code>EXT_structural_metadata</code>\n * @param {object} [options.statistics] Statistics about metadata\n * @param {object} [options.extras] Extra user-defined properties\n * @param {object} [options.extensions] An object containing extensions\n *\n * @alias StructuralMetadata\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction StructuralMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.schema\", options.schema);\n  //>>includeEnd('debug');\n\n  this._schema = options.schema;\n  const propertyTables = options.propertyTables;\n  this._propertyTableCount = defined(propertyTables) ? propertyTables.length : 0;\n  this._propertyTables = propertyTables;\n  this._propertyTextures = options.propertyTextures;\n  this._propertyAttributes = options.propertyAttributes;\n  this._statistics = options.statistics;\n  this._extras = options.extras;\n  this._extensions = options.extensions;\n}\nObject.defineProperties(StructuralMetadata.prototype, {\n  /**\n   * Schema containing classes and enums.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {MetadataSchema}\n   * @readonly\n   * @private\n   */\n  schema: {\n    get: function () {\n      return this._schema;\n    }\n  },\n  /**\n   * Statistics about the metadata.\n   * <p>\n   * See the {@link https://github.com/CesiumGS/glTF/blob/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata/schema/statistics.schema.json|statistics schema reference} for the full set of properties.\n   * </p>\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  statistics: {\n    get: function () {\n      return this._statistics;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  },\n  /**\n   * Number of property tables in the metadata.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  propertyTableCount: {\n    get: function () {\n      return this._propertyTableCount;\n    }\n  },\n  /**\n   * The property tables in the metadata.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {PropertyTable[]}\n   * @readonly\n   * @private\n   */\n  propertyTables: {\n    get: function () {\n      return this._propertyTables;\n    }\n  },\n  /**\n   * The property textures in the metadata.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {PropertyTexture[]}\n   * @readonly\n   * @private\n   */\n  propertyTextures: {\n    get: function () {\n      return this._propertyTextures;\n    }\n  },\n  /**\n   * The property attributes from the structural metadata extension\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {PropertyAttribute[]}\n   * @readonly\n   * @private\n   */\n  propertyAttributes: {\n    get: function () {\n      return this._propertyAttributes;\n    }\n  },\n  /**\n   * Total size in bytes across all property tables\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  propertyTablesByteLength: {\n    get: function () {\n      if (!defined(this._propertyTables)) {\n        return 0;\n      }\n      let totalByteLength = 0;\n      const length = this._propertyTables.length;\n      for (let i = 0; i < length; i++) {\n        totalByteLength += this._propertyTables[i].byteLength;\n      }\n      return totalByteLength;\n    }\n  }\n});\n\n/**\n * Gets the property table with the given ID.\n * <p>\n * For the legacy <code>EXT_feature_metadata</code>, textures are stored in an array sorted\n * by the key in the propertyTables dictionary.\n * </p>\n *\n * @param {number} propertyTableId The property table ID.\n * @returns {PropertyTable} The property table.\n * @private\n */\nStructuralMetadata.prototype.getPropertyTable = function (propertyTableId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"propertyTableId\", propertyTableId);\n  //>>includeEnd('debug');\n\n  return this._propertyTables[propertyTableId];\n};\n\n/**\n * Gets the property texture with the given ID.\n * <p>\n * For the legacy <code>EXT_feature_metadata</code>, textures are stored in an array sorted\n * by the key in the propertyTextures dictionary.\n * </p>\n *\n * @param {number} propertyTextureId The index into the property textures array.\n * @returns {PropertyTexture} The property texture\n * @private\n */\nStructuralMetadata.prototype.getPropertyTexture = function (propertyTextureId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"propertyTextureId\", propertyTextureId);\n  //>>includeEnd('debug');\n\n  return this._propertyTextures[propertyTextureId];\n};\n\n/**\n * Gets the property attribute with the given ID. This concept is new in\n * EXT_structural_metadata\n *\n * @param {number} propertyAttributeId The index into the property attributes array.\n * @returns {PropertyAttribute} The property attribute\n * @private\n */\nStructuralMetadata.prototype.getPropertyAttribute = function (propertyAttributeId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"propertyAttributeId\", propertyAttributeId);\n  //>>includeEnd('debug');\n\n  return this._propertyAttributes[propertyAttributeId];\n};\nexport default StructuralMetadata;","map":{"version":3,"names":["Check","defaultValue","defined","StructuralMetadata","options","EMPTY_OBJECT","typeOf","object","schema","_schema","propertyTables","_propertyTableCount","length","_propertyTables","_propertyTextures","propertyTextures","_propertyAttributes","propertyAttributes","_statistics","statistics","_extras","extras","_extensions","extensions","Object","defineProperties","prototype","get","propertyTableCount","propertyTablesByteLength","totalByteLength","i","byteLength","getPropertyTable","propertyTableId","number","getPropertyTexture","propertyTextureId","getPropertyAttribute","propertyAttributeId"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/StructuralMetadata.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * An object containing structural metadata.\n * <p>\n * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension} as well as the\n * previous {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata|EXT_feature_metadata Extension} for glTF.\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {MetadataSchema} options.schema The parsed schema.\n * @param {PropertyTable[]} [options.propertyTables] An array of property table objects. For the legacy <code>EXT_feature_metadata</code> extension, this is sorted by the key in the propertyTables dictionary\n * @param {PropertyTexture[]} [options.propertyTextures] An array of property texture objects. For the legacy <code>EXT_feature_metadata</code> extension, this is sorted by the key in the propertyTextures dictionary\n * @param {PropertyAttribute[]} [options.propertyAttributes] An array of property attribute objects. This is new in <code>EXT_structural_metadata</code>\n * @param {object} [options.statistics] Statistics about metadata\n * @param {object} [options.extras] Extra user-defined properties\n * @param {object} [options.extensions] An object containing extensions\n *\n * @alias StructuralMetadata\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction StructuralMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.schema\", options.schema);\n  //>>includeEnd('debug');\n\n  this._schema = options.schema;\n  const propertyTables = options.propertyTables;\n  this._propertyTableCount = defined(propertyTables)\n    ? propertyTables.length\n    : 0;\n  this._propertyTables = propertyTables;\n  this._propertyTextures = options.propertyTextures;\n  this._propertyAttributes = options.propertyAttributes;\n  this._statistics = options.statistics;\n  this._extras = options.extras;\n  this._extensions = options.extensions;\n}\n\nObject.defineProperties(StructuralMetadata.prototype, {\n  /**\n   * Schema containing classes and enums.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {MetadataSchema}\n   * @readonly\n   * @private\n   */\n  schema: {\n    get: function () {\n      return this._schema;\n    },\n  },\n\n  /**\n   * Statistics about the metadata.\n   * <p>\n   * See the {@link https://github.com/CesiumGS/glTF/blob/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata/schema/statistics.schema.json|statistics schema reference} for the full set of properties.\n   * </p>\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  statistics: {\n    get: function () {\n      return this._statistics;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n\n  /**\n   * Number of property tables in the metadata.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  propertyTableCount: {\n    get: function () {\n      return this._propertyTableCount;\n    },\n  },\n\n  /**\n   * The property tables in the metadata.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {PropertyTable[]}\n   * @readonly\n   * @private\n   */\n  propertyTables: {\n    get: function () {\n      return this._propertyTables;\n    },\n  },\n\n  /**\n   * The property textures in the metadata.\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {PropertyTexture[]}\n   * @readonly\n   * @private\n   */\n  propertyTextures: {\n    get: function () {\n      return this._propertyTextures;\n    },\n  },\n\n  /**\n   * The property attributes from the structural metadata extension\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {PropertyAttribute[]}\n   * @readonly\n   * @private\n   */\n  propertyAttributes: {\n    get: function () {\n      return this._propertyAttributes;\n    },\n  },\n\n  /**\n   * Total size in bytes across all property tables\n   *\n   * @memberof StructuralMetadata.prototype\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  propertyTablesByteLength: {\n    get: function () {\n      if (!defined(this._propertyTables)) {\n        return 0;\n      }\n\n      let totalByteLength = 0;\n      const length = this._propertyTables.length;\n      for (let i = 0; i < length; i++) {\n        totalByteLength += this._propertyTables[i].byteLength;\n      }\n\n      return totalByteLength;\n    },\n  },\n});\n\n/**\n * Gets the property table with the given ID.\n * <p>\n * For the legacy <code>EXT_feature_metadata</code>, textures are stored in an array sorted\n * by the key in the propertyTables dictionary.\n * </p>\n *\n * @param {number} propertyTableId The property table ID.\n * @returns {PropertyTable} The property table.\n * @private\n */\nStructuralMetadata.prototype.getPropertyTable = function (propertyTableId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"propertyTableId\", propertyTableId);\n  //>>includeEnd('debug');\n\n  return this._propertyTables[propertyTableId];\n};\n\n/**\n * Gets the property texture with the given ID.\n * <p>\n * For the legacy <code>EXT_feature_metadata</code>, textures are stored in an array sorted\n * by the key in the propertyTextures dictionary.\n * </p>\n *\n * @param {number} propertyTextureId The index into the property textures array.\n * @returns {PropertyTexture} The property texture\n * @private\n */\nStructuralMetadata.prototype.getPropertyTexture = function (propertyTextureId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"propertyTextureId\", propertyTextureId);\n  //>>includeEnd('debug');\n\n  return this._propertyTextures[propertyTextureId];\n};\n\n/**\n * Gets the property attribute with the given ID. This concept is new in\n * EXT_structural_metadata\n *\n * @param {number} propertyAttributeId The index into the property attributes array.\n * @returns {PropertyAttribute} The property attribute\n * @private\n */\nStructuralMetadata.prototype.getPropertyAttribute = function (\n  propertyAttributeId,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"propertyAttributeId\", propertyAttributeId);\n  //>>includeEnd('debug');\n\n  return this._propertyAttributes[propertyAttributeId];\n};\n\nexport default StructuralMetadata;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}