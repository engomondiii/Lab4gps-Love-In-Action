{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Globe/Globe.js\",\n  _s = $RefreshSig$();\n/* global window */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLang } from '../Context/LangContext'; // Adjust the path based on your project structure\nimport '../styles/Globe.css'; // Import the separate style file\nimport useLocationInfo from '../hooks/useLocationInfo'; // Adjust the path based on your project structure\nimport LocationInfoPanel from './LocationInfoPanel'; // Import the LocationInfoPanel component\nimport PropTypes from 'prop-types';\n\n/**\n * Function to perform reverse geocoding using OpenCage Geocoding API.\n * In production, it's recommended to handle this on the backend to secure the API key.\n *\n * @param {string} latitude\n * @param {string} longitude\n * @param {string} language - Language code ('en' for English, 'ko' for Korean)\n * @returns {Promise<string>} - Returns the formatted address in the desired language.\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst reverseGeocode = async (latitude, longitude, language = 'en') => {\n  const apiKey = process.env.REACT_APP_OPENCAGE_API_KEY; // Ensure this is set in .env\n  const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}&language=${language}`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.results && data.results.length > 0) {\n      return data.results[0].formatted;\n    } else {\n      return 'Address not found';\n    }\n  } catch (error) {\n    console.error('Error in reverse geocoding:', error);\n    throw error;\n  }\n};\nconst Globe = () => {\n  _s();\n  const globeRef = useRef(null); // Reference to the Cesium container div\n  const viewerRef = useRef(null); // Reference to the Cesium Viewer instance\n  const animationIdRef = useRef(null); // Reference to the animation frame ID\n  const markerRef = useRef(null); // Reference to the marker entity\n\n  // State to manage rotation status\n  const [isRotating, setIsRotating] = useState(true);\n\n  // Use the global language context to determine if text should be English or Korean\n  const {\n    language\n  } = useLang();\n\n  // Inline dictionary for multi-language support\n  const text = {\n    en: {\n      stopRotation: \"Stop Rotation\",\n      startRotation: \"Start Rotation\",\n      locationDetails: \"Location Details\",\n      address: \"Address\",\n      latitude: \"Latitude\",\n      longitude: \"Longitude\",\n      height: \"Height\",\n      zoomLevel: \"Zoom Level\",\n      unknown: \"Unknown\",\n      loading: \"Loading...\",\n      error: \"Error\",\n      here: \"Here\" // Label for the marker\n    },\n    ko: {\n      stopRotation: \"회전 중지\",\n      startRotation: \"회전 시작\",\n      locationDetails: \"위치 정보\",\n      address: \"주소\",\n      latitude: \"위도\",\n      longitude: \"경도\",\n      height: \"높이\",\n      zoomLevel: \"확대 수준\",\n      unknown: \"알 수 없음\",\n      loading: \"로딩 중...\",\n      error: \"오류\",\n      here: \"여기\" // Label for the marker\n    }\n  };\n\n  // Helper function to return the correct text based on the current language\n  const t = key => text[language][key];\n\n  /**\n   * Function to handle rotation toggle.\n   * Starts or stops the Earth's rotation based on current state.\n   */\n  const handleRotationToggle = () => {\n    if (isRotating) {\n      // Stop rotation\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n      setIsRotating(false);\n    } else {\n      // Start rotation\n      if (!animationIdRef.current && viewerRef.current) {\n        const rotateEarth = () => {\n          const spinRate = 0.01;\n          const delta = spinRate / 60; // Assuming 60 FPS\n          // Correctly reference Cesium via window.Cesium\n          viewerRef.current.scene.camera.rotate(window.Cesium.Cartesian3.UNIT_Z, -delta);\n          animationIdRef.current = requestAnimationFrame(rotateEarth);\n        };\n        rotateEarth();\n      }\n      setIsRotating(true);\n    }\n  };\n\n  /**\n   * Function to start the globe's rotation.\n   *\n   * @param {Cesium.Viewer} viewerInstance - The Cesium Viewer instance.\n   */\n  const startRotation = viewerInstance => {\n    if (!viewerInstance) return;\n    const rotateEarth = () => {\n      const spinRate = 0.01;\n      const delta = spinRate / 60; // 60 FPS assumption\n      viewerInstance.scene.camera.rotate(window.Cesium.Cartesian3.UNIT_Z, -delta);\n      animationIdRef.current = requestAnimationFrame(rotateEarth);\n    };\n    rotateEarth(); // Start rotation loop\n    setIsRotating(true);\n  };\n\n  /**\n   * Function to stop the globe's rotation.\n   */\n  const stopRotation = () => {\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n      setIsRotating(false);\n    }\n  };\n\n  /**\n   * Hide or show other site elements (Navbar, Footer, Home text, etc.)\n   * based on whether we're in fullscreen mode.\n   */\n  const toggleElementsVisibility = hide => {\n    // List any CSS selectors you want hidden in fullscreen\n    const selectors = ['.navbar',\n    // Navbar\n    '.footer',\n    // Footer\n    '.intro',\n    // Intro section in Home.js\n    '.features' // Features section in Home.js\n    ];\n    selectors.forEach(selector => {\n      document.querySelectorAll(selector).forEach(elem => {\n        // If hide === true => display: 'none'\n        // If hide === false => display: ''\n        elem.style.display = hide ? 'none' : '';\n      });\n    });\n  };\n\n  /**\n   * Handler for 'fullscreenchange' events.\n   */\n  const handleFullScreenChange = () => {\n    const isFullScreen = !!document.fullscreenElement;\n    toggleElementsVisibility(isFullScreen);\n  };\n\n  // Attach fullscreenchange event listener\n  useEffect(() => {\n    document.addEventListener('fullscreenchange', handleFullScreenChange);\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullScreenChange);\n      stopRotation(); // Ensure rotation is stopped on unmount\n    };\n  }, []);\n\n  // Initialize Cesium Viewer and handle rotation controls\n  useEffect(() => {\n    // Ensure Cesium is loaded\n    if (!window.Cesium) {\n      console.error('Cesium.js is not loaded. Please check your script tags.');\n      return;\n    }\n\n    // Set your Cesium Ion access token from environment variables\n    window.Cesium.Ion.defaultAccessToken = process.env.REACT_APP_CESIUM_ION_ACCESS_TOKEN;\n\n    // Initialize Cesium Viewer if it doesn't exist yet\n    if (globeRef.current && !viewerRef.current) {\n      try {\n        viewerRef.current = new window.Cesium.Viewer(globeRef.current, {\n          terrainProvider: window.Cesium.createWorldTerrain(),\n          // High-resolution terrain\n          imageryProvider: new window.Cesium.IonImageryProvider({\n            assetId: 2\n          }),\n          // Example asset ID\n          baseLayerPicker: false,\n          geocoder: false,\n          homeButton: false,\n          infoBox: false,\n          // We'll handle info boxes manually\n          navigationHelpButton: false,\n          sceneModePicker: false,\n          timeline: false,\n          animation: false,\n          fullscreenButton: true,\n          // Enable fullscreen\n          requestRenderMode: true,\n          maximumRenderTimeChange: Infinity\n        });\n\n        // Check if the Viewer was successfully created\n        if (!viewerRef.current || !viewerRef.current.scene) {\n          console.error('Cesium Viewer was not initialized correctly.');\n          return;\n        }\n\n        // Set initial camera view (New York coordinates as example)\n        viewerRef.current.camera.setView({\n          destination: window.Cesium.Cartesian3.fromDegrees(-74.0707383, 40.7117244, 10000000),\n          orientation: {\n            heading: window.Cesium.Math.toRadians(0),\n            pitch: window.Cesium.Math.toRadians(-90),\n            roll: 0.0\n          }\n        });\n\n        // Continuous rotation\n        const rotateEarth = () => {\n          const spinRate = 0.01;\n          const delta = spinRate / 60; // 60 FPS assumption\n          viewerRef.current.scene.camera.rotate(window.Cesium.Cartesian3.UNIT_Z, -delta);\n          animationIdRef.current = requestAnimationFrame(rotateEarth);\n        };\n        rotateEarth(); // Start rotation immediately\n\n        // Scene interactions to stop/start rotation on user actions\n        viewerRef.current.scene.screenSpaceCameraController.inertiaSpin = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaTranslate = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaZoom = 0;\n        const stopRotationHandler = () => {\n          stopRotation();\n        };\n        const startRotationHandler = () => {\n          if (viewerRef.current) {\n            startRotation(viewerRef.current);\n          }\n        };\n\n        // Stop rotation on pointer down/wheel\n        viewerRef.current.canvas.addEventListener('pointerdown', stopRotationHandler);\n        viewerRef.current.canvas.addEventListener('wheel', stopRotationHandler, {\n          passive: true\n        });\n\n        // Resume rotation on pointer up/wheel end\n        viewerRef.current.canvas.addEventListener('pointerup', startRotationHandler);\n        viewerRef.current.canvas.addEventListener('wheel', startRotationHandler, {\n          passive: true,\n          capture: true\n        });\n      } catch (error) {\n        console.error('Failed to initialize Cesium viewer:', error);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (viewerRef.current) {\n        viewerRef.current.destroy();\n        viewerRef.current = null;\n      }\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n    };\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  // Log to verify Cesium and viewer initialization\n  useEffect(() => {\n    console.log('Viewer:', viewerRef.current);\n    console.log('Cesium:', window.Cesium);\n  }, []);\n\n  // Use the custom hook to manage location info, passing the current language\n  const {\n    locationInfo,\n    loading,\n    error\n  } = useLocationInfo(viewerRef.current, window.Cesium,\n  // Explicitly reference the global Cesium object\n  reverseGeocode, language // Pass the selected language\n  );\n\n  /**\n   * Effect to handle marker placement based on locationInfo\n   */\n  useEffect(() => {\n    if (!viewerRef.current || !locationInfo) return;\n    const {\n      longitude,\n      latitude,\n      height\n    } = locationInfo;\n\n    // Convert longitude, latitude, height to Cesium Cartesian3\n    const position = window.Cesium.Cartesian3.fromDegrees(parseFloat(longitude), parseFloat(latitude), parseFloat(height));\n    if (!markerRef.current) {\n      // Create a new marker entity\n      markerRef.current = viewerRef.current.entities.add({\n        position: position,\n        billboard: {\n          image: '/marker.png',\n          // Ensure marker.png is in the public folder\n          verticalOrigin: window.Cesium.VerticalOrigin.BOTTOM,\n          scale: 0.5 // Adjust the scale as needed\n        },\n        label: {\n          text: t('here'),\n          font: '14pt monospace',\n          style: window.Cesium.LabelStyle.FILL_AND_OUTLINE,\n          outlineWidth: 2,\n          verticalOrigin: window.Cesium.VerticalOrigin.BOTTOM,\n          pixelOffset: new window.Cesium.Cartesian2(0, -30)\n        }\n      });\n    } else {\n      // Update existing marker's position\n      markerRef.current.position = position;\n      markerRef.current.label.text = t('here'); // Update label text if language changes\n    }\n\n    // Optionally, fly to the marker\n    viewerRef.current.flyTo(markerRef.current, {\n      duration: 1.5,\n      offset: new window.Cesium.HeadingPitchRange(0, -30, 2000000)\n    });\n  }, [locationInfo, t]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef,\n      id: \"cesiumContainer\",\n      style: {\n        height: '100vh',\n        width: '100vw'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tabs\",\n          role: \"tablist\",\n          \"aria-label\": \"Rotation Controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `tab-button ${isRotating ? 'active' : ''}`,\n            onClick: handleRotationToggle,\n            \"aria-selected\": isRotating,\n            role: \"tab\",\n            \"aria-controls\": \"start-rotation-panel\",\n            id: \"start-rotation-tab\",\n            children: isRotating ? t(\"stopRotation\") : t(\"startRotation\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `tab-button ${!isRotating ? 'active' : ''}`,\n            onClick: handleRotationToggle,\n            \"aria-selected\": !isRotating,\n            role: \"tab\",\n            \"aria-controls\": \"stop-rotation-panel\",\n            id: \"stop-rotation-tab\",\n            children: isRotating ? t(\"stopRotation\") : t(\"startRotation\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LocationInfoPanel, {\n        locationInfo: locationInfo,\n        loading: loading,\n        error: error,\n        translate: t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Globe, \"dD+nLRb3Zj3AEb9gVLFwpawY2B4=\", false, function () {\n  return [useLang, useLocationInfo];\n});\n_c = Globe;\nGlobe.propTypes = {\n  // Define prop types if necessary\n};\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLang","useLocationInfo","LocationInfoPanel","PropTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","reverseGeocode","latitude","longitude","language","apiKey","process","env","REACT_APP_OPENCAGE_API_KEY","url","response","fetch","data","json","results","length","formatted","error","console","Globe","_s","globeRef","viewerRef","animationIdRef","markerRef","isRotating","setIsRotating","text","en","stopRotation","startRotation","locationDetails","address","height","zoomLevel","unknown","loading","here","ko","t","key","handleRotationToggle","current","cancelAnimationFrame","rotateEarth","spinRate","delta","scene","camera","rotate","window","Cesium","Cartesian3","UNIT_Z","requestAnimationFrame","viewerInstance","toggleElementsVisibility","hide","selectors","forEach","selector","document","querySelectorAll","elem","style","display","handleFullScreenChange","isFullScreen","fullscreenElement","addEventListener","removeEventListener","Ion","defaultAccessToken","REACT_APP_CESIUM_ION_ACCESS_TOKEN","Viewer","terrainProvider","createWorldTerrain","imageryProvider","IonImageryProvider","assetId","baseLayerPicker","geocoder","homeButton","infoBox","navigationHelpButton","sceneModePicker","timeline","animation","fullscreenButton","requestRenderMode","maximumRenderTimeChange","Infinity","setView","destination","fromDegrees","orientation","heading","Math","toRadians","pitch","roll","screenSpaceCameraController","inertiaSpin","inertiaTranslate","inertiaZoom","stopRotationHandler","startRotationHandler","canvas","passive","capture","destroy","log","locationInfo","position","parseFloat","entities","add","billboard","image","verticalOrigin","VerticalOrigin","BOTTOM","scale","label","font","LabelStyle","FILL_AND_OUTLINE","outlineWidth","pixelOffset","Cartesian2","flyTo","duration","offset","HeadingPitchRange","children","ref","id","width","className","role","onClick","fileName","_jsxFileName","lineNumber","columnNumber","translate","_c","propTypes","$RefreshReg$"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/src/components/Globe/Globe.js"],"sourcesContent":["/* global window */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLang } from '../Context/LangContext'; // Adjust the path based on your project structure\nimport '../styles/Globe.css'; // Import the separate style file\nimport useLocationInfo from '../hooks/useLocationInfo'; // Adjust the path based on your project structure\nimport LocationInfoPanel from './LocationInfoPanel'; // Import the LocationInfoPanel component\nimport PropTypes from 'prop-types';\n\n/**\n * Function to perform reverse geocoding using OpenCage Geocoding API.\n * In production, it's recommended to handle this on the backend to secure the API key.\n *\n * @param {string} latitude\n * @param {string} longitude\n * @param {string} language - Language code ('en' for English, 'ko' for Korean)\n * @returns {Promise<string>} - Returns the formatted address in the desired language.\n */\nconst reverseGeocode = async (latitude, longitude, language = 'en') => {\n  const apiKey = process.env.REACT_APP_OPENCAGE_API_KEY; // Ensure this is set in .env\n  const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}&language=${language}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.results && data.results.length > 0) {\n      return data.results[0].formatted;\n    } else {\n      return 'Address not found';\n    }\n  } catch (error) {\n    console.error('Error in reverse geocoding:', error);\n    throw error;\n  }\n};\n\nconst Globe = () => {\n  const globeRef = useRef(null); // Reference to the Cesium container div\n  const viewerRef = useRef(null); // Reference to the Cesium Viewer instance\n  const animationIdRef = useRef(null); // Reference to the animation frame ID\n  const markerRef = useRef(null); // Reference to the marker entity\n\n  // State to manage rotation status\n  const [isRotating, setIsRotating] = useState(true);\n\n  // Use the global language context to determine if text should be English or Korean\n  const { language } = useLang();\n\n  // Inline dictionary for multi-language support\n  const text = {\n    en: {\n      stopRotation: \"Stop Rotation\",\n      startRotation: \"Start Rotation\",\n      locationDetails: \"Location Details\",\n      address: \"Address\",\n      latitude: \"Latitude\",\n      longitude: \"Longitude\",\n      height: \"Height\",\n      zoomLevel: \"Zoom Level\",\n      unknown: \"Unknown\",\n      loading: \"Loading...\",\n      error: \"Error\",\n      here: \"Here\", // Label for the marker\n    },\n    ko: {\n      stopRotation: \"회전 중지\",\n      startRotation: \"회전 시작\",\n      locationDetails: \"위치 정보\",\n      address: \"주소\",\n      latitude: \"위도\",\n      longitude: \"경도\",\n      height: \"높이\",\n      zoomLevel: \"확대 수준\",\n      unknown: \"알 수 없음\",\n      loading: \"로딩 중...\",\n      error: \"오류\",\n      here: \"여기\", // Label for the marker\n    },\n  };\n\n  // Helper function to return the correct text based on the current language\n  const t = (key) => text[language][key];\n\n  /**\n   * Function to handle rotation toggle.\n   * Starts or stops the Earth's rotation based on current state.\n   */\n  const handleRotationToggle = () => {\n    if (isRotating) {\n      // Stop rotation\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n      setIsRotating(false);\n    } else {\n      // Start rotation\n      if (!animationIdRef.current && viewerRef.current) {\n        const rotateEarth = () => {\n          const spinRate = 0.01;\n          const delta = spinRate / 60; // Assuming 60 FPS\n          // Correctly reference Cesium via window.Cesium\n          viewerRef.current.scene.camera.rotate(window.Cesium.Cartesian3.UNIT_Z, -delta);\n          animationIdRef.current = requestAnimationFrame(rotateEarth);\n        };\n        rotateEarth();\n      }\n      setIsRotating(true);\n    }\n  };\n\n  /**\n   * Function to start the globe's rotation.\n   *\n   * @param {Cesium.Viewer} viewerInstance - The Cesium Viewer instance.\n   */\n  const startRotation = (viewerInstance) => {\n    if (!viewerInstance) return;\n\n    const rotateEarth = () => {\n      const spinRate = 0.01;\n      const delta = spinRate / 60; // 60 FPS assumption\n      viewerInstance.scene.camera.rotate(window.Cesium.Cartesian3.UNIT_Z, -delta);\n      animationIdRef.current = requestAnimationFrame(rotateEarth);\n    };\n\n    rotateEarth(); // Start rotation loop\n    setIsRotating(true);\n  };\n\n  /**\n   * Function to stop the globe's rotation.\n   */\n  const stopRotation = () => {\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n      setIsRotating(false);\n    }\n  };\n\n  /**\n   * Hide or show other site elements (Navbar, Footer, Home text, etc.)\n   * based on whether we're in fullscreen mode.\n   */\n  const toggleElementsVisibility = (hide) => {\n    // List any CSS selectors you want hidden in fullscreen\n    const selectors = [\n      '.navbar',    // Navbar\n      '.footer',    // Footer\n      '.intro',     // Intro section in Home.js\n      '.features'   // Features section in Home.js\n    ];\n\n    selectors.forEach((selector) => {\n      document.querySelectorAll(selector).forEach((elem) => {\n        // If hide === true => display: 'none'\n        // If hide === false => display: ''\n        elem.style.display = hide ? 'none' : '';\n      });\n    });\n  };\n\n  /**\n   * Handler for 'fullscreenchange' events.\n   */\n  const handleFullScreenChange = () => {\n    const isFullScreen = !!document.fullscreenElement;\n    toggleElementsVisibility(isFullScreen);\n  };\n\n  // Attach fullscreenchange event listener\n  useEffect(() => {\n    document.addEventListener('fullscreenchange', handleFullScreenChange);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullScreenChange);\n      stopRotation(); // Ensure rotation is stopped on unmount\n    };\n  }, []);\n\n  // Initialize Cesium Viewer and handle rotation controls\n  useEffect(() => {\n    // Ensure Cesium is loaded\n    if (!window.Cesium) {\n      console.error('Cesium.js is not loaded. Please check your script tags.');\n      return;\n    }\n\n    // Set your Cesium Ion access token from environment variables\n    window.Cesium.Ion.defaultAccessToken = process.env.REACT_APP_CESIUM_ION_ACCESS_TOKEN;\n\n    // Initialize Cesium Viewer if it doesn't exist yet\n    if (globeRef.current && !viewerRef.current) {\n      try {\n        viewerRef.current = new window.Cesium.Viewer(globeRef.current, {\n          terrainProvider: window.Cesium.createWorldTerrain(), // High-resolution terrain\n          imageryProvider: new window.Cesium.IonImageryProvider({ assetId: 2 }), // Example asset ID\n          baseLayerPicker: false,\n          geocoder: false,\n          homeButton: false,\n          infoBox: false, // We'll handle info boxes manually\n          navigationHelpButton: false,\n          sceneModePicker: false,\n          timeline: false,\n          animation: false,\n          fullscreenButton: true, // Enable fullscreen\n          requestRenderMode: true,\n          maximumRenderTimeChange: Infinity,\n        });\n\n        // Check if the Viewer was successfully created\n        if (!viewerRef.current || !viewerRef.current.scene) {\n          console.error('Cesium Viewer was not initialized correctly.');\n          return;\n        }\n\n        // Set initial camera view (New York coordinates as example)\n        viewerRef.current.camera.setView({\n          destination: window.Cesium.Cartesian3.fromDegrees(\n            -74.0707383,\n            40.7117244,\n            10000000\n          ),\n          orientation: {\n            heading: window.Cesium.Math.toRadians(0),\n            pitch: window.Cesium.Math.toRadians(-90),\n            roll: 0.0,\n          },\n        });\n\n        // Continuous rotation\n        const rotateEarth = () => {\n          const spinRate = 0.01;\n          const delta = spinRate / 60; // 60 FPS assumption\n          viewerRef.current.scene.camera.rotate(window.Cesium.Cartesian3.UNIT_Z, -delta);\n          animationIdRef.current = requestAnimationFrame(rotateEarth);\n        };\n\n        rotateEarth(); // Start rotation immediately\n\n        // Scene interactions to stop/start rotation on user actions\n        viewerRef.current.scene.screenSpaceCameraController.inertiaSpin = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaTranslate = 0;\n        viewerRef.current.scene.screenSpaceCameraController.inertiaZoom = 0;\n\n        const stopRotationHandler = () => {\n          stopRotation();\n        };\n\n        const startRotationHandler = () => {\n          if (viewerRef.current) {\n            startRotation(viewerRef.current);\n          }\n        };\n\n        // Stop rotation on pointer down/wheel\n        viewerRef.current.canvas.addEventListener('pointerdown', stopRotationHandler);\n        viewerRef.current.canvas.addEventListener('wheel', stopRotationHandler, { passive: true });\n\n        // Resume rotation on pointer up/wheel end\n        viewerRef.current.canvas.addEventListener('pointerup', startRotationHandler);\n        viewerRef.current.canvas.addEventListener('wheel', startRotationHandler, {\n          passive: true,\n          capture: true,\n        });\n      } catch (error) {\n        console.error('Failed to initialize Cesium viewer:', error);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (viewerRef.current) {\n        viewerRef.current.destroy();\n        viewerRef.current = null;\n      }\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n        animationIdRef.current = null;\n      }\n    };\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  // Log to verify Cesium and viewer initialization\n  useEffect(() => {\n    console.log('Viewer:', viewerRef.current);\n    console.log('Cesium:', window.Cesium);\n  }, []);\n\n  // Use the custom hook to manage location info, passing the current language\n  const { locationInfo, loading, error } = useLocationInfo(\n    viewerRef.current,\n    window.Cesium, // Explicitly reference the global Cesium object\n    reverseGeocode,\n    language // Pass the selected language\n  );\n\n  /**\n   * Effect to handle marker placement based on locationInfo\n   */\n  useEffect(() => {\n    if (!viewerRef.current || !locationInfo) return;\n\n    const { longitude, latitude, height } = locationInfo;\n\n    // Convert longitude, latitude, height to Cesium Cartesian3\n    const position = window.Cesium.Cartesian3.fromDegrees(\n      parseFloat(longitude),\n      parseFloat(latitude),\n      parseFloat(height)\n    );\n\n    if (!markerRef.current) {\n      // Create a new marker entity\n      markerRef.current = viewerRef.current.entities.add({\n        position: position,\n        billboard: {\n          image: '/marker.png', // Ensure marker.png is in the public folder\n          verticalOrigin: window.Cesium.VerticalOrigin.BOTTOM,\n          scale: 0.5, // Adjust the scale as needed\n        },\n        label: {\n          text: t('here'),\n          font: '14pt monospace',\n          style: window.Cesium.LabelStyle.FILL_AND_OUTLINE,\n          outlineWidth: 2,\n          verticalOrigin: window.Cesium.VerticalOrigin.BOTTOM,\n          pixelOffset: new window.Cesium.Cartesian2(0, -30),\n        },\n      });\n    } else {\n      // Update existing marker's position\n      markerRef.current.position = position;\n      markerRef.current.label.text = t('here'); // Update label text if language changes\n    }\n\n    // Optionally, fly to the marker\n    viewerRef.current.flyTo(markerRef.current, {\n      duration: 1.5,\n      offset: new window.Cesium.HeadingPitchRange(0, -30, 2000000),\n    });\n  }, [locationInfo, t]);\n\n  return (\n    <>\n      {/* Cesium Globe Container */}\n      <div\n        ref={globeRef}\n        id=\"cesiumContainer\"\n        style={{ height: '100vh', width: '100vw' }}\n      >\n        {/* Controls */}\n        <div className=\"controls-container\">\n          <div className=\"tabs\" role=\"tablist\" aria-label=\"Rotation Controls\">\n            <button\n              className={`tab-button ${isRotating ? 'active' : ''}`}\n              onClick={handleRotationToggle}\n              aria-selected={isRotating}\n              role=\"tab\"\n              aria-controls=\"start-rotation-panel\"\n              id=\"start-rotation-tab\"\n            >\n              {isRotating ? t(\"stopRotation\") : t(\"startRotation\")}\n            </button>\n            <button\n              className={`tab-button ${!isRotating ? 'active' : ''}`}\n              onClick={handleRotationToggle}\n              aria-selected={!isRotating}\n              role=\"tab\"\n              aria-controls=\"stop-rotation-panel\"\n              id=\"stop-rotation-tab\"\n            >\n              {isRotating ? t(\"stopRotation\") : t(\"startRotation\")}\n            </button>\n          </div>\n        </div>\n\n        {/* Location Details Panel */}\n        <LocationInfoPanel\n          locationInfo={locationInfo}\n          loading={loading}\n          error={error}\n          translate={t}\n        />\n      </div>\n    </>\n  );\n};\n\nGlobe.propTypes = {\n  // Define prop types if necessary\n};\n\nexport default Globe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}