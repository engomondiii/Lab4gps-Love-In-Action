{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\nconst defaultRepeat = new Cartesian2(1, 1);\nconst defaultTransparent = false;\nconst defaultColor = Color.WHITE;\n\n/**\n * A {@link MaterialProperty} that maps to image {@link Material} uniforms.\n * @alias ImageMaterialProperty\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Property|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [options.image] A Property specifying the Image, URL, Canvas, or Video.\n * @param {Property|Cartesian2} [options.repeat=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n * @param {Property|Color} [options.color=Color.WHITE] The color applied to the image\n * @param {Property|boolean} [options.transparent=false] Set to true when the image has transparency (for example, when a png has transparent sections)\n */\nfunction ImageMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._definitionChanged = new Event();\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._transparent = undefined;\n  this._transparentSubscription = undefined;\n  this.image = options.image;\n  this.repeat = options.repeat;\n  this.color = options.color;\n  this.transparent = options.transparent;\n}\nObject.defineProperties(ImageMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._image) && Property.isConstant(this._repeat);\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the Property specifying Image, URL, Canvas, or Video to use.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  image: createPropertyDescriptor(\"image\"),\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(1, 1)\n   */\n  repeat: createPropertyDescriptor(\"repeat\"),\n  /**\n   * Gets or sets the Color Property specifying the desired color applied to the image.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  color: createPropertyDescriptor(\"color\"),\n  /**\n   * Gets or sets the Boolean Property specifying whether the image has transparency\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  transparent: createPropertyDescriptor(\"transparent\")\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nImageMaterialProperty.prototype.getType = function (time) {\n  return \"Image\";\n};\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nImageMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  if (!defined(result)) {\n    result = {};\n  }\n  result.image = Property.getValueOrUndefined(this._image, time);\n  result.repeat = Property.getValueOrClonedDefault(this._repeat, time, defaultRepeat, result.repeat);\n  result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\n  if (Property.getValueOrDefault(this._transparent, time, defaultTransparent)) {\n    result.color.alpha = Math.min(0.99, result.color.alpha);\n  }\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nImageMaterialProperty.prototype.equals = function (other) {\n  return this === other || other instanceof ImageMaterialProperty && Property.equals(this._image, other._image) && Property.equals(this._repeat, other._repeat) && Property.equals(this._color, other._color) && Property.equals(this._transparent, other._transparent);\n};\nexport default ImageMaterialProperty;","map":{"version":3,"names":["Cartesian2","Color","defaultValue","defined","Event","JulianDate","createPropertyDescriptor","Property","defaultRepeat","defaultTransparent","defaultColor","WHITE","ImageMaterialProperty","options","EMPTY_OBJECT","_definitionChanged","_image","undefined","_imageSubscription","_repeat","_repeatSubscription","_color","_colorSubscription","_transparent","_transparentSubscription","image","repeat","color","transparent","Object","defineProperties","prototype","isConstant","get","definitionChanged","getType","time","timeScratch","getValue","result","now","getValueOrUndefined","getValueOrClonedDefault","getValueOrDefault","alpha","Math","min","equals","other"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/ImageMaterialProperty.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultRepeat = new Cartesian2(1, 1);\nconst defaultTransparent = false;\nconst defaultColor = Color.WHITE;\n\n/**\n * A {@link MaterialProperty} that maps to image {@link Material} uniforms.\n * @alias ImageMaterialProperty\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Property|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [options.image] A Property specifying the Image, URL, Canvas, or Video.\n * @param {Property|Cartesian2} [options.repeat=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n * @param {Property|Color} [options.color=Color.WHITE] The color applied to the image\n * @param {Property|boolean} [options.transparent=false] Set to true when the image has transparency (for example, when a png has transparent sections)\n */\nfunction ImageMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._transparent = undefined;\n  this._transparentSubscription = undefined;\n\n  this.image = options.image;\n  this.repeat = options.repeat;\n  this.color = options.color;\n  this.transparent = options.transparent;\n}\n\nObject.defineProperties(ImageMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._image) && Property.isConstant(this._repeat)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying Image, URL, Canvas, or Video to use.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  image: createPropertyDescriptor(\"image\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(1, 1)\n   */\n  repeat: createPropertyDescriptor(\"repeat\"),\n\n  /**\n   * Gets or sets the Color Property specifying the desired color applied to the image.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Boolean Property specifying whether the image has transparency\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  transparent: createPropertyDescriptor(\"transparent\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nImageMaterialProperty.prototype.getType = function (time) {\n  return \"Image\";\n};\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nImageMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.image = Property.getValueOrUndefined(this._image, time);\n  result.repeat = Property.getValueOrClonedDefault(\n    this._repeat,\n    time,\n    defaultRepeat,\n    result.repeat,\n  );\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color,\n  );\n  if (Property.getValueOrDefault(this._transparent, time, defaultTransparent)) {\n    result.color.alpha = Math.min(0.99, result.color.alpha);\n  }\n\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nImageMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof ImageMaterialProperty &&\n      Property.equals(this._image, other._image) &&\n      Property.equals(this._repeat, other._repeat) &&\n      Property.equals(this._color, other._color) &&\n      Property.equals(this._transparent, other._transparent))\n  );\n};\nexport default ImageMaterialProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}