{"ast":null,"code":"import Cartesian2 from \"../../Core/Cartesian2.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\nimport VerticalExaggerationStageVS from \"../../Shaders/Model/VerticalExaggerationStageVS.js\";\n\n/**\n * The vertical exaggeration pipeline stage transforms the vertex\n * positions based on the values of {@link Scene#verticalExaggeration} and\n * {@link Scene#verticalExaggerationRelativeHeight}\n *\n * @namespace VerticalExaggerationPipelineStage\n *\n * @private\n */\nconst VerticalExaggerationPipelineStage = {\n  name: \"VerticalExaggerationPipelineStage\" // Helps with debugging\n};\nconst scratchExaggerationUniform = new Cartesian2();\n\n/**\n * Add defines and uniforms for vertical exaggeration calculations in the vertex shader\n *\n * @param {PrimitiveRenderResources} renderResources The render resources for the primitive\n * @param {ModelComponents.Primitive} primitive The primitive to be rendered\n * @param {FrameState} frameState The frame state.\n * @private\n */\nVerticalExaggerationPipelineStage.process = function (renderResources, primitive, frameState) {\n  const {\n    shaderBuilder,\n    uniformMap\n  } = renderResources;\n  shaderBuilder.addVertexLines(VerticalExaggerationStageVS);\n  shaderBuilder.addDefine(\"HAS_VERTICAL_EXAGGERATION\", undefined, ShaderDestination.VERTEX);\n  shaderBuilder.addUniform(\"vec2\", \"u_verticalExaggerationAndRelativeHeight\", ShaderDestination.VERTEX);\n  uniformMap.u_verticalExaggerationAndRelativeHeight = function () {\n    return Cartesian2.fromElements(frameState.verticalExaggeration, frameState.verticalExaggerationRelativeHeight, scratchExaggerationUniform);\n  };\n};\nexport default VerticalExaggerationPipelineStage;","map":{"version":3,"names":["Cartesian2","ShaderDestination","VerticalExaggerationStageVS","VerticalExaggerationPipelineStage","name","scratchExaggerationUniform","process","renderResources","primitive","frameState","shaderBuilder","uniformMap","addVertexLines","addDefine","undefined","VERTEX","addUniform","u_verticalExaggerationAndRelativeHeight","fromElements","verticalExaggeration","verticalExaggerationRelativeHeight"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/VerticalExaggerationPipelineStage.js"],"sourcesContent":["import Cartesian2 from \"../../Core/Cartesian2.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\nimport VerticalExaggerationStageVS from \"../../Shaders/Model/VerticalExaggerationStageVS.js\";\n\n/**\n * The vertical exaggeration pipeline stage transforms the vertex\n * positions based on the values of {@link Scene#verticalExaggeration} and\n * {@link Scene#verticalExaggerationRelativeHeight}\n *\n * @namespace VerticalExaggerationPipelineStage\n *\n * @private\n */\nconst VerticalExaggerationPipelineStage = {\n  name: \"VerticalExaggerationPipelineStage\", // Helps with debugging\n};\n\nconst scratchExaggerationUniform = new Cartesian2();\n\n/**\n * Add defines and uniforms for vertical exaggeration calculations in the vertex shader\n *\n * @param {PrimitiveRenderResources} renderResources The render resources for the primitive\n * @param {ModelComponents.Primitive} primitive The primitive to be rendered\n * @param {FrameState} frameState The frame state.\n * @private\n */\nVerticalExaggerationPipelineStage.process = function (\n  renderResources,\n  primitive,\n  frameState,\n) {\n  const { shaderBuilder, uniformMap } = renderResources;\n\n  shaderBuilder.addVertexLines(VerticalExaggerationStageVS);\n\n  shaderBuilder.addDefine(\n    \"HAS_VERTICAL_EXAGGERATION\",\n    undefined,\n    ShaderDestination.VERTEX,\n  );\n\n  shaderBuilder.addUniform(\n    \"vec2\",\n    \"u_verticalExaggerationAndRelativeHeight\",\n    ShaderDestination.VERTEX,\n  );\n\n  uniformMap.u_verticalExaggerationAndRelativeHeight = function () {\n    return Cartesian2.fromElements(\n      frameState.verticalExaggeration,\n      frameState.verticalExaggerationRelativeHeight,\n      scratchExaggerationUniform,\n    );\n  };\n};\n\nexport default VerticalExaggerationPipelineStage;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,OAAOC,iBAAiB,MAAM,qCAAqC;AACnE,OAAOC,2BAA2B,MAAM,oDAAoD;;AAE5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iCAAiC,GAAG;EACxCC,IAAI,EAAE,mCAAmC,CAAE;AAC7C,CAAC;AAED,MAAMC,0BAA0B,GAAG,IAAIL,UAAU,CAAC,CAAC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,iCAAiC,CAACG,OAAO,GAAG,UAC1CC,eAAe,EACfC,SAAS,EACTC,UAAU,EACV;EACA,MAAM;IAAEC,aAAa;IAAEC;EAAW,CAAC,GAAGJ,eAAe;EAErDG,aAAa,CAACE,cAAc,CAACV,2BAA2B,CAAC;EAEzDQ,aAAa,CAACG,SAAS,CACrB,2BAA2B,EAC3BC,SAAS,EACTb,iBAAiB,CAACc,MACpB,CAAC;EAEDL,aAAa,CAACM,UAAU,CACtB,MAAM,EACN,yCAAyC,EACzCf,iBAAiB,CAACc,MACpB,CAAC;EAEDJ,UAAU,CAACM,uCAAuC,GAAG,YAAY;IAC/D,OAAOjB,UAAU,CAACkB,YAAY,CAC5BT,UAAU,CAACU,oBAAoB,EAC/BV,UAAU,CAACW,kCAAkC,EAC7Cf,0BACF,CAAC;EACH,CAAC;AACH,CAAC;AAED,eAAeF,iCAAiC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}