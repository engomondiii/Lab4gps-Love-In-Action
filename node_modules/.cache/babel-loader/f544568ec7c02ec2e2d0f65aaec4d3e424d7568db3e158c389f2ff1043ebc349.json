{"ast":null,"code":"import WebGLConstants from \"../Core/WebGLConstants.js\";\n\n/**\n * Enumerates all possible filters used when minifying WebGL textures.\n *\n * @enum {number}\n *\n * @see TextureMagnificationFilter\n */\nconst TextureMinificationFilter = {\n  /**\n   * Samples the texture by returning the closest pixel.\n   *\n   * @type {number}\n   * @constant\n   */\n  NEAREST: WebGLConstants.NEAREST,\n  /**\n   * Samples the texture through bi-linear interpolation of the four nearest pixels. This produces smoother results than <code>NEAREST</code> filtering.\n   *\n   * @type {number}\n   * @constant\n   */\n  LINEAR: WebGLConstants.LINEAR,\n  /**\n   * Selects the nearest mip level and applies nearest sampling within that level.\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {number}\n   * @constant\n   */\n  NEAREST_MIPMAP_NEAREST: WebGLConstants.NEAREST_MIPMAP_NEAREST,\n  /**\n   * Selects the nearest mip level and applies linear sampling within that level.\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {number}\n   * @constant\n   */\n  LINEAR_MIPMAP_NEAREST: WebGLConstants.LINEAR_MIPMAP_NEAREST,\n  /**\n   * Read texture values with nearest sampling from two adjacent mip levels and linearly interpolate the results.\n   * <p>\n   * This option provides a good balance of visual quality and speed when sampling from a mipmapped texture.\n   * </p>\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {number}\n   * @constant\n   */\n  NEAREST_MIPMAP_LINEAR: WebGLConstants.NEAREST_MIPMAP_LINEAR,\n  /**\n   * Read texture values with linear sampling from two adjacent mip levels and linearly interpolate the results.\n   * <p>\n   * This option provides a good balance of visual quality and speed when sampling from a mipmapped texture.\n   * </p>\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   * @type {number}\n   * @constant\n   */\n  LINEAR_MIPMAP_LINEAR: WebGLConstants.LINEAR_MIPMAP_LINEAR\n};\n\n/**\n * Validates the given <code>textureMinificationFilter</code> with respect to the possible enum values.\n *\n * @private\n *\n * @param textureMinificationFilter\n * @returns {boolean} <code>true</code> if <code>textureMinificationFilter</code> is valid.\n */\nTextureMinificationFilter.validate = function (textureMinificationFilter) {\n  return textureMinificationFilter === TextureMinificationFilter.NEAREST || textureMinificationFilter === TextureMinificationFilter.LINEAR || textureMinificationFilter === TextureMinificationFilter.NEAREST_MIPMAP_NEAREST || textureMinificationFilter === TextureMinificationFilter.LINEAR_MIPMAP_NEAREST || textureMinificationFilter === TextureMinificationFilter.NEAREST_MIPMAP_LINEAR || textureMinificationFilter === TextureMinificationFilter.LINEAR_MIPMAP_LINEAR;\n};\nexport default Object.freeze(TextureMinificationFilter);","map":{"version":3,"names":["WebGLConstants","TextureMinificationFilter","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","validate","textureMinificationFilter","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/TextureMinificationFilter.js"],"sourcesContent":["import WebGLConstants from \"../Core/WebGLConstants.js\";\n\n/**\n * Enumerates all possible filters used when minifying WebGL textures.\n *\n * @enum {number}\n *\n * @see TextureMagnificationFilter\n */\nconst TextureMinificationFilter = {\n  /**\n   * Samples the texture by returning the closest pixel.\n   *\n   * @type {number}\n   * @constant\n   */\n  NEAREST: WebGLConstants.NEAREST,\n  /**\n   * Samples the texture through bi-linear interpolation of the four nearest pixels. This produces smoother results than <code>NEAREST</code> filtering.\n   *\n   * @type {number}\n   * @constant\n   */\n  LINEAR: WebGLConstants.LINEAR,\n  /**\n   * Selects the nearest mip level and applies nearest sampling within that level.\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {number}\n   * @constant\n   */\n  NEAREST_MIPMAP_NEAREST: WebGLConstants.NEAREST_MIPMAP_NEAREST,\n  /**\n   * Selects the nearest mip level and applies linear sampling within that level.\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {number}\n   * @constant\n   */\n  LINEAR_MIPMAP_NEAREST: WebGLConstants.LINEAR_MIPMAP_NEAREST,\n  /**\n   * Read texture values with nearest sampling from two adjacent mip levels and linearly interpolate the results.\n   * <p>\n   * This option provides a good balance of visual quality and speed when sampling from a mipmapped texture.\n   * </p>\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   *\n   * @type {number}\n   * @constant\n   */\n  NEAREST_MIPMAP_LINEAR: WebGLConstants.NEAREST_MIPMAP_LINEAR,\n  /**\n   * Read texture values with linear sampling from two adjacent mip levels and linearly interpolate the results.\n   * <p>\n   * This option provides a good balance of visual quality and speed when sampling from a mipmapped texture.\n   * </p>\n   * <p>\n   * Requires that the texture has a mipmap. The mip level is chosen by the view angle and screen-space size of the texture.\n   * </p>\n   * @type {number}\n   * @constant\n   */\n  LINEAR_MIPMAP_LINEAR: WebGLConstants.LINEAR_MIPMAP_LINEAR,\n};\n\n/**\n * Validates the given <code>textureMinificationFilter</code> with respect to the possible enum values.\n *\n * @private\n *\n * @param textureMinificationFilter\n * @returns {boolean} <code>true</code> if <code>textureMinificationFilter</code> is valid.\n */\nTextureMinificationFilter.validate = function (textureMinificationFilter) {\n  return (\n    textureMinificationFilter === TextureMinificationFilter.NEAREST ||\n    textureMinificationFilter === TextureMinificationFilter.LINEAR ||\n    textureMinificationFilter ===\n      TextureMinificationFilter.NEAREST_MIPMAP_NEAREST ||\n    textureMinificationFilter ===\n      TextureMinificationFilter.LINEAR_MIPMAP_NEAREST ||\n    textureMinificationFilter ===\n      TextureMinificationFilter.NEAREST_MIPMAP_LINEAR ||\n    textureMinificationFilter === TextureMinificationFilter.LINEAR_MIPMAP_LINEAR\n  );\n};\n\nexport default Object.freeze(TextureMinificationFilter);\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,2BAA2B;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,yBAAyB,GAAG;EAChC;AACF;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAEF,cAAc,CAACE,OAAO;EAC/B;AACF;AACA;AACA;AACA;AACA;EACEC,MAAM,EAAEH,cAAc,CAACG,MAAM;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,sBAAsB,EAAEJ,cAAc,CAACI,sBAAsB;EAC7D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,qBAAqB,EAAEL,cAAc,CAACK,qBAAqB;EAC3D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,qBAAqB,EAAEN,cAAc,CAACM,qBAAqB;EAC3D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,oBAAoB,EAAEP,cAAc,CAACO;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,yBAAyB,CAACO,QAAQ,GAAG,UAAUC,yBAAyB,EAAE;EACxE,OACEA,yBAAyB,KAAKR,yBAAyB,CAACC,OAAO,IAC/DO,yBAAyB,KAAKR,yBAAyB,CAACE,MAAM,IAC9DM,yBAAyB,KACvBR,yBAAyB,CAACG,sBAAsB,IAClDK,yBAAyB,KACvBR,yBAAyB,CAACI,qBAAqB,IACjDI,yBAAyB,KACvBR,yBAAyB,CAACK,qBAAqB,IACjDG,yBAAyB,KAAKR,yBAAyB,CAACM,oBAAoB;AAEhF,CAAC;AAED,eAAeG,MAAM,CAACC,MAAM,CAACV,yBAAyB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}