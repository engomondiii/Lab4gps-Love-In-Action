{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * WebGL component datatypes.  Components are intrinsics,\n * which form attributes, which form vertices.\n *\n * @enum {number}\n */\nconst ComponentDatatype = {\n  /**\n   * 8-bit signed byte corresponding to <code>gl.BYTE</code> and the type\n   * of an element in <code>Int8Array</code>.\n   *\n   * @type {number}\n   * @constant\n   */\n  BYTE: WebGLConstants.BYTE,\n  /**\n   * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\n   * of an element in <code>Uint8Array</code>.\n   *\n   * @type {number}\n   * @constant\n   */\n  UNSIGNED_BYTE: WebGLConstants.UNSIGNED_BYTE,\n  /**\n   * 16-bit signed short corresponding to <code>SHORT</code> and the type\n   * of an element in <code>Int16Array</code>.\n   *\n   * @type {number}\n   * @constant\n   */\n  SHORT: WebGLConstants.SHORT,\n  /**\n   * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\n   * of an element in <code>Uint16Array</code>.\n   *\n   * @type {number}\n   * @constant\n   */\n  UNSIGNED_SHORT: WebGLConstants.UNSIGNED_SHORT,\n  /**\n   * 32-bit signed int corresponding to <code>INT</code> and the type\n   * of an element in <code>Int32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {number}\n   * @constant\n   */\n  INT: WebGLConstants.INT,\n  /**\n   * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\n   * of an element in <code>Uint32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {number}\n   * @constant\n   */\n  UNSIGNED_INT: WebGLConstants.UNSIGNED_INT,\n  /**\n   * 32-bit floating-point corresponding to <code>FLOAT</code> and the type\n   * of an element in <code>Float32Array</code>.\n   *\n   * @type {number}\n   * @constant\n   */\n  FLOAT: WebGLConstants.FLOAT,\n  /**\n   * 64-bit floating-point corresponding to <code>gl.DOUBLE</code> (in Desktop OpenGL;\n   * this is not supported in WebGL, and is emulated in Cesium via {@link GeometryPipeline.encodeAttribute})\n   * and the type of an element in <code>Float64Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {number}\n   * @constant\n   * @default 0x140A\n   */\n  DOUBLE: WebGLConstants.DOUBLE\n};\n\n/**\n * Returns the size, in bytes, of the corresponding datatype.\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to get the size of.\n * @returns {number} The size in bytes.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // Returns Int8Array.BYTES_PER_ELEMENT\n * const size = Cesium.ComponentDatatype.getSizeInBytes(Cesium.ComponentDatatype.BYTE);\n */\nComponentDatatype.getSizeInBytes = function (componentDatatype) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"value is required.\");\n  }\n  //>>includeEnd('debug');\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return Int8Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.SHORT:\n      return Int16Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.INT:\n      return Int32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.FLOAT:\n      return Float32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.DOUBLE:\n      return Float64Array.BYTES_PER_ELEMENT;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the {@link ComponentDatatype} for the provided TypedArray instance.\n *\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} array The typed array.\n * @returns {ComponentDatatype} The ComponentDatatype for the provided array, or undefined if the array is not a TypedArray.\n */\nComponentDatatype.fromTypedArray = function (array) {\n  if (array instanceof Int8Array) {\n    return ComponentDatatype.BYTE;\n  }\n  if (array instanceof Uint8Array) {\n    return ComponentDatatype.UNSIGNED_BYTE;\n  }\n  if (array instanceof Int16Array) {\n    return ComponentDatatype.SHORT;\n  }\n  if (array instanceof Uint16Array) {\n    return ComponentDatatype.UNSIGNED_SHORT;\n  }\n  if (array instanceof Int32Array) {\n    return ComponentDatatype.INT;\n  }\n  if (array instanceof Uint32Array) {\n    return ComponentDatatype.UNSIGNED_INT;\n  }\n  if (array instanceof Float32Array) {\n    return ComponentDatatype.FLOAT;\n  }\n  if (array instanceof Float64Array) {\n    return ComponentDatatype.DOUBLE;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\"array must be an Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, or Float64Array.\");\n  //>>includeEnd('debug');\n};\n\n/**\n * Validates that the provided component datatype is a valid {@link ComponentDatatype}\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to validate.\n * @returns {boolean} <code>true</code> if the provided component datatype is a valid value; otherwise, <code>false</code>.\n *\n * @example\n * if (!Cesium.ComponentDatatype.validate(componentDatatype)) {\n *   throw new Cesium.DeveloperError('componentDatatype must be a valid value.');\n * }\n */\nComponentDatatype.validate = function (componentDatatype) {\n  return defined(componentDatatype) && (componentDatatype === ComponentDatatype.BYTE || componentDatatype === ComponentDatatype.UNSIGNED_BYTE || componentDatatype === ComponentDatatype.SHORT || componentDatatype === ComponentDatatype.UNSIGNED_SHORT || componentDatatype === ComponentDatatype.INT || componentDatatype === ComponentDatatype.UNSIGNED_INT || componentDatatype === ComponentDatatype.FLOAT || componentDatatype === ComponentDatatype.DOUBLE);\n};\n\n/**\n * Creates a typed array corresponding to component data type.\n *\n * @param {ComponentDatatype} componentDatatype The component data type.\n * @param {number|Array} valuesOrLength The length of the array to create or an array.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // creates a Float32Array with length of 100\n * const typedArray = Cesium.ComponentDatatype.createTypedArray(Cesium.ComponentDatatype.FLOAT, 100);\n */\nComponentDatatype.createTypedArray = function (componentDatatype, valuesOrLength) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n  if (!defined(valuesOrLength)) {\n    throw new DeveloperError(\"valuesOrLength is required.\");\n  }\n  //>>includeEnd('debug');\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(valuesOrLength);\n    case ComponentDatatype.SHORT:\n      return new Int16Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(valuesOrLength);\n    case ComponentDatatype.INT:\n      return new Int32Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(valuesOrLength);\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(valuesOrLength);\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(valuesOrLength);\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Creates a typed view of an array of bytes.\n *\n * @param {ComponentDatatype} componentDatatype The type of the view to create.\n * @param {ArrayBuffer} buffer The buffer storage to use for the view.\n * @param {number} [byteOffset] The offset, in bytes, to the first element in the view.\n * @param {number} [length] The number of elements in the view.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array view of the buffer.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n */\nComponentDatatype.createArrayBufferView = function (componentDatatype, buffer, byteOffset, length) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n  if (!defined(buffer)) {\n    throw new DeveloperError(\"buffer is required.\");\n  }\n  //>>includeEnd('debug');\n\n  byteOffset = defaultValue(byteOffset, 0);\n  length = defaultValue(length, (buffer.byteLength - byteOffset) / ComponentDatatype.getSizeInBytes(componentDatatype));\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(buffer, byteOffset, length);\n    case ComponentDatatype.SHORT:\n      return new Int16Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(buffer, byteOffset, length);\n    case ComponentDatatype.INT:\n      return new Int32Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(buffer, byteOffset, length);\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(buffer, byteOffset, length);\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(buffer, byteOffset, length);\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Get the ComponentDatatype from its name.\n *\n * @param {string} name The name of the ComponentDatatype.\n * @returns {ComponentDatatype} The ComponentDatatype.\n *\n * @exception {DeveloperError} name is not a valid value.\n */\nComponentDatatype.fromName = function (name) {\n  switch (name) {\n    case \"BYTE\":\n      return ComponentDatatype.BYTE;\n    case \"UNSIGNED_BYTE\":\n      return ComponentDatatype.UNSIGNED_BYTE;\n    case \"SHORT\":\n      return ComponentDatatype.SHORT;\n    case \"UNSIGNED_SHORT\":\n      return ComponentDatatype.UNSIGNED_SHORT;\n    case \"INT\":\n      return ComponentDatatype.INT;\n    case \"UNSIGNED_INT\":\n      return ComponentDatatype.UNSIGNED_INT;\n    case \"FLOAT\":\n      return ComponentDatatype.FLOAT;\n    case \"DOUBLE\":\n      return ComponentDatatype.DOUBLE;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"name is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\nexport default Object.freeze(ComponentDatatype);","map":{"version":3,"names":["defaultValue","defined","DeveloperError","WebGLConstants","ComponentDatatype","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DOUBLE","getSizeInBytes","componentDatatype","Int8Array","BYTES_PER_ELEMENT","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","fromTypedArray","array","validate","createTypedArray","valuesOrLength","createArrayBufferView","buffer","byteOffset","length","byteLength","fromName","name","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/ComponentDatatype.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * WebGL component datatypes.  Components are intrinsics,\n * which form attributes, which form vertices.\n *\n * @enum {number}\n */\nconst ComponentDatatype = {\n  /**\n   * 8-bit signed byte corresponding to <code>gl.BYTE</code> and the type\n   * of an element in <code>Int8Array</code>.\n   *\n   * @type {number}\n   * @constant\n   */\n  BYTE: WebGLConstants.BYTE,\n\n  /**\n   * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\n   * of an element in <code>Uint8Array</code>.\n   *\n   * @type {number}\n   * @constant\n   */\n  UNSIGNED_BYTE: WebGLConstants.UNSIGNED_BYTE,\n\n  /**\n   * 16-bit signed short corresponding to <code>SHORT</code> and the type\n   * of an element in <code>Int16Array</code>.\n   *\n   * @type {number}\n   * @constant\n   */\n  SHORT: WebGLConstants.SHORT,\n\n  /**\n   * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\n   * of an element in <code>Uint16Array</code>.\n   *\n   * @type {number}\n   * @constant\n   */\n  UNSIGNED_SHORT: WebGLConstants.UNSIGNED_SHORT,\n\n  /**\n   * 32-bit signed int corresponding to <code>INT</code> and the type\n   * of an element in <code>Int32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {number}\n   * @constant\n   */\n  INT: WebGLConstants.INT,\n\n  /**\n   * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\n   * of an element in <code>Uint32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {number}\n   * @constant\n   */\n  UNSIGNED_INT: WebGLConstants.UNSIGNED_INT,\n\n  /**\n   * 32-bit floating-point corresponding to <code>FLOAT</code> and the type\n   * of an element in <code>Float32Array</code>.\n   *\n   * @type {number}\n   * @constant\n   */\n  FLOAT: WebGLConstants.FLOAT,\n\n  /**\n   * 64-bit floating-point corresponding to <code>gl.DOUBLE</code> (in Desktop OpenGL;\n   * this is not supported in WebGL, and is emulated in Cesium via {@link GeometryPipeline.encodeAttribute})\n   * and the type of an element in <code>Float64Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {number}\n   * @constant\n   * @default 0x140A\n   */\n  DOUBLE: WebGLConstants.DOUBLE,\n};\n\n/**\n * Returns the size, in bytes, of the corresponding datatype.\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to get the size of.\n * @returns {number} The size in bytes.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // Returns Int8Array.BYTES_PER_ELEMENT\n * const size = Cesium.ComponentDatatype.getSizeInBytes(Cesium.ComponentDatatype.BYTE);\n */\nComponentDatatype.getSizeInBytes = function (componentDatatype) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"value is required.\");\n  }\n  //>>includeEnd('debug');\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return Int8Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.SHORT:\n      return Int16Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.INT:\n      return Int32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.FLOAT:\n      return Float32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.DOUBLE:\n      return Float64Array.BYTES_PER_ELEMENT;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the {@link ComponentDatatype} for the provided TypedArray instance.\n *\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} array The typed array.\n * @returns {ComponentDatatype} The ComponentDatatype for the provided array, or undefined if the array is not a TypedArray.\n */\nComponentDatatype.fromTypedArray = function (array) {\n  if (array instanceof Int8Array) {\n    return ComponentDatatype.BYTE;\n  }\n  if (array instanceof Uint8Array) {\n    return ComponentDatatype.UNSIGNED_BYTE;\n  }\n  if (array instanceof Int16Array) {\n    return ComponentDatatype.SHORT;\n  }\n  if (array instanceof Uint16Array) {\n    return ComponentDatatype.UNSIGNED_SHORT;\n  }\n  if (array instanceof Int32Array) {\n    return ComponentDatatype.INT;\n  }\n  if (array instanceof Uint32Array) {\n    return ComponentDatatype.UNSIGNED_INT;\n  }\n  if (array instanceof Float32Array) {\n    return ComponentDatatype.FLOAT;\n  }\n  if (array instanceof Float64Array) {\n    return ComponentDatatype.DOUBLE;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\n    \"array must be an Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, or Float64Array.\",\n  );\n  //>>includeEnd('debug');\n};\n\n/**\n * Validates that the provided component datatype is a valid {@link ComponentDatatype}\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to validate.\n * @returns {boolean} <code>true</code> if the provided component datatype is a valid value; otherwise, <code>false</code>.\n *\n * @example\n * if (!Cesium.ComponentDatatype.validate(componentDatatype)) {\n *   throw new Cesium.DeveloperError('componentDatatype must be a valid value.');\n * }\n */\nComponentDatatype.validate = function (componentDatatype) {\n  return (\n    defined(componentDatatype) &&\n    (componentDatatype === ComponentDatatype.BYTE ||\n      componentDatatype === ComponentDatatype.UNSIGNED_BYTE ||\n      componentDatatype === ComponentDatatype.SHORT ||\n      componentDatatype === ComponentDatatype.UNSIGNED_SHORT ||\n      componentDatatype === ComponentDatatype.INT ||\n      componentDatatype === ComponentDatatype.UNSIGNED_INT ||\n      componentDatatype === ComponentDatatype.FLOAT ||\n      componentDatatype === ComponentDatatype.DOUBLE)\n  );\n};\n\n/**\n * Creates a typed array corresponding to component data type.\n *\n * @param {ComponentDatatype} componentDatatype The component data type.\n * @param {number|Array} valuesOrLength The length of the array to create or an array.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // creates a Float32Array with length of 100\n * const typedArray = Cesium.ComponentDatatype.createTypedArray(Cesium.ComponentDatatype.FLOAT, 100);\n */\nComponentDatatype.createTypedArray = function (\n  componentDatatype,\n  valuesOrLength,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n  if (!defined(valuesOrLength)) {\n    throw new DeveloperError(\"valuesOrLength is required.\");\n  }\n  //>>includeEnd('debug');\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(valuesOrLength);\n    case ComponentDatatype.SHORT:\n      return new Int16Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(valuesOrLength);\n    case ComponentDatatype.INT:\n      return new Int32Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(valuesOrLength);\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(valuesOrLength);\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(valuesOrLength);\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Creates a typed view of an array of bytes.\n *\n * @param {ComponentDatatype} componentDatatype The type of the view to create.\n * @param {ArrayBuffer} buffer The buffer storage to use for the view.\n * @param {number} [byteOffset] The offset, in bytes, to the first element in the view.\n * @param {number} [length] The number of elements in the view.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array view of the buffer.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n */\nComponentDatatype.createArrayBufferView = function (\n  componentDatatype,\n  buffer,\n  byteOffset,\n  length,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n  if (!defined(buffer)) {\n    throw new DeveloperError(\"buffer is required.\");\n  }\n  //>>includeEnd('debug');\n\n  byteOffset = defaultValue(byteOffset, 0);\n  length = defaultValue(\n    length,\n    (buffer.byteLength - byteOffset) /\n      ComponentDatatype.getSizeInBytes(componentDatatype),\n  );\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(buffer, byteOffset, length);\n    case ComponentDatatype.SHORT:\n      return new Int16Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(buffer, byteOffset, length);\n    case ComponentDatatype.INT:\n      return new Int32Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(buffer, byteOffset, length);\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(buffer, byteOffset, length);\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(buffer, byteOffset, length);\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Get the ComponentDatatype from its name.\n *\n * @param {string} name The name of the ComponentDatatype.\n * @returns {ComponentDatatype} The ComponentDatatype.\n *\n * @exception {DeveloperError} name is not a valid value.\n */\nComponentDatatype.fromName = function (name) {\n  switch (name) {\n    case \"BYTE\":\n      return ComponentDatatype.BYTE;\n    case \"UNSIGNED_BYTE\":\n      return ComponentDatatype.UNSIGNED_BYTE;\n    case \"SHORT\":\n      return ComponentDatatype.SHORT;\n    case \"UNSIGNED_SHORT\":\n      return ComponentDatatype.UNSIGNED_SHORT;\n    case \"INT\":\n      return ComponentDatatype.INT;\n    case \"UNSIGNED_INT\":\n      return ComponentDatatype.UNSIGNED_INT;\n    case \"FLOAT\":\n      return ComponentDatatype.FLOAT;\n    case \"DOUBLE\":\n      return ComponentDatatype.DOUBLE;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"name is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\nexport default Object.freeze(ComponentDatatype);\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,cAAc,MAAM,qBAAqB;AAChD,OAAOC,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,IAAI,EAAEF,cAAc,CAACE,IAAI;EAEzB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,aAAa,EAAEH,cAAc,CAACG,aAAa;EAE3C;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAEJ,cAAc,CAACI,KAAK;EAE3B;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,cAAc,EAAEL,cAAc,CAACK,cAAc;EAE7C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,GAAG,EAAEN,cAAc,CAACM,GAAG;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,YAAY,EAAEP,cAAc,CAACO,YAAY;EAEzC;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAER,cAAc,CAACQ,KAAK;EAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAM,EAAET,cAAc,CAACS;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,iBAAiB,CAACS,cAAc,GAAG,UAAUC,iBAAiB,EAAE;EAC9D;EACA,IAAI,CAACb,OAAO,CAACa,iBAAiB,CAAC,EAAE;IAC/B,MAAM,IAAIZ,cAAc,CAAC,oBAAoB,CAAC;EAChD;EACA;;EAEA,QAAQY,iBAAiB;IACvB,KAAKV,iBAAiB,CAACC,IAAI;MACzB,OAAOU,SAAS,CAACC,iBAAiB;IACpC,KAAKZ,iBAAiB,CAACE,aAAa;MAClC,OAAOW,UAAU,CAACD,iBAAiB;IACrC,KAAKZ,iBAAiB,CAACG,KAAK;MAC1B,OAAOW,UAAU,CAACF,iBAAiB;IACrC,KAAKZ,iBAAiB,CAACI,cA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}