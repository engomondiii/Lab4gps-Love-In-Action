{"ast":null,"code":"import { BoundingSphere, BoundingSphereState, Cartesian3, CesiumWidget, Cesium3DTileFeature, Clock, ConstantPositionProperty, defaultValue, defined, destroyObject, DeveloperError, Entity, Event, EventHelper, getElement, JulianDate, Math as CesiumMath, Property, ScreenSpaceEventType, IonGeocoderService } from \"@cesium/engine\";\nimport Animation from \"../Animation/Animation.js\";\nimport AnimationViewModel from \"../Animation/AnimationViewModel.js\";\nimport BaseLayerPicker from \"../BaseLayerPicker/BaseLayerPicker.js\";\nimport createDefaultImageryProviderViewModels from \"../BaseLayerPicker/createDefaultImageryProviderViewModels.js\";\nimport createDefaultTerrainProviderViewModels from \"../BaseLayerPicker/createDefaultTerrainProviderViewModels.js\";\nimport ClockViewModel from \"../ClockViewModel.js\";\nimport FullscreenButton from \"../FullscreenButton/FullscreenButton.js\";\nimport Geocoder from \"../Geocoder/Geocoder.js\";\nimport HomeButton from \"../HomeButton/HomeButton.js\";\nimport InfoBox from \"../InfoBox/InfoBox.js\";\nimport NavigationHelpButton from \"../NavigationHelpButton/NavigationHelpButton.js\";\nimport ProjectionPicker from \"../ProjectionPicker/ProjectionPicker.js\";\nimport SceneModePicker from \"../SceneModePicker/SceneModePicker.js\";\nimport SelectionIndicator from \"../SelectionIndicator/SelectionIndicator.js\";\nimport subscribeAndEvaluate from \"../subscribeAndEvaluate.js\";\nimport Timeline from \"../Timeline/Timeline.js\";\nimport VRButton from \"../VRButton/VRButton.js\";\nconst boundingSphereScratch = new BoundingSphere();\nfunction onTimelineScrubfunction(e) {\n  const clock = e.clock;\n  clock.currentTime = e.timeJulian;\n  clock.shouldAnimate = false;\n}\nfunction getCesium3DTileFeatureDescription(feature) {\n  const propertyIds = feature.getPropertyIds();\n  let html = \"\";\n  propertyIds.forEach(function (propertyId) {\n    const value = feature.getProperty(propertyId);\n    if (defined(value)) {\n      html += `<tr><th>${propertyId}</th><td>${value}</td></tr>`;\n    }\n  });\n  if (html.length > 0) {\n    html = `<table class=\"cesium-infoBox-defaultTable\"><tbody>${html}</tbody></table>`;\n  }\n  return html;\n}\nfunction getCesium3DTileFeatureName(feature) {\n  // We need to iterate all property IDs to find potential\n  // candidates, but since we prefer some property IDs\n  // over others, we store them in an indexed array\n  // and then use the first defined element in the array\n  // as the preferred choice.\n\n  let i;\n  const possibleIds = [];\n  const propertyIds = feature.getPropertyIds();\n  for (i = 0; i < propertyIds.length; i++) {\n    const propertyId = propertyIds[i];\n    if (/^name$/i.test(propertyId)) {\n      possibleIds[0] = feature.getProperty(propertyId);\n    } else if (/name/i.test(propertyId)) {\n      possibleIds[1] = feature.getProperty(propertyId);\n    } else if (/^title$/i.test(propertyId)) {\n      possibleIds[2] = feature.getProperty(propertyId);\n    } else if (/^(id|identifier)$/i.test(propertyId)) {\n      possibleIds[3] = feature.getProperty(propertyId);\n    } else if (/element/i.test(propertyId)) {\n      possibleIds[4] = feature.getProperty(propertyId);\n    } else if (/(id|identifier)$/i.test(propertyId)) {\n      possibleIds[5] = feature.getProperty(propertyId);\n    }\n  }\n  const length = possibleIds.length;\n  for (i = 0; i < length; i++) {\n    const item = possibleIds[i];\n    if (defined(item) && item !== \"\") {\n      return item;\n    }\n  }\n  return \"Unnamed Feature\";\n}\nfunction pickEntity(viewer, e) {\n  const picked = viewer.scene.pick(e.position);\n  if (defined(picked)) {\n    const id = defaultValue(picked.id, picked.primitive.id);\n    if (id instanceof Entity) {\n      return id;\n    }\n    if (picked instanceof Cesium3DTileFeature) {\n      return new Entity({\n        name: getCesium3DTileFeatureName(picked),\n        description: getCesium3DTileFeatureDescription(picked),\n        feature: picked\n      });\n    }\n  }\n\n  // No regular entity picked.  Try picking features from imagery layers.\n  if (defined(viewer.scene.globe)) {\n    return pickImageryLayerFeature(viewer, e.position);\n  }\n}\nconst scratchStopTime = new JulianDate();\nfunction linkTimelineToDataSourceClock(timeline, dataSource) {\n  if (defined(dataSource)) {\n    const dataSourceClock = dataSource.clock;\n    if (defined(dataSourceClock) && defined(timeline)) {\n      const startTime = dataSourceClock.startTime;\n      let stopTime = dataSourceClock.stopTime;\n      // When the start and stop times are equal, set the timeline to the shortest interval\n      // starting at the start time. This prevents an invalid timeline configuration.\n      if (JulianDate.equals(startTime, stopTime)) {\n        stopTime = JulianDate.addSeconds(startTime, CesiumMath.EPSILON2, scratchStopTime);\n      }\n      timeline.updateFromClock();\n      timeline.zoomTo(startTime, stopTime);\n    }\n  }\n}\nconst cartesian3Scratch = new Cartesian3();\nfunction pickImageryLayerFeature(viewer, windowPosition) {\n  const scene = viewer.scene;\n  const pickRay = scene.camera.getPickRay(windowPosition);\n  const imageryLayerFeaturePromise = scene.imageryLayers.pickImageryLayerFeatures(pickRay, scene);\n  if (!defined(imageryLayerFeaturePromise)) {\n    return;\n  }\n\n  // Imagery layer feature picking is asynchronous, so put up a message while loading.\n  const loadingMessage = new Entity({\n    id: \"Loading...\",\n    description: \"Loading feature information...\"\n  });\n  imageryLayerFeaturePromise.then(function (features) {\n    // Has this async pick been superseded by a later one?\n    if (viewer.selectedEntity !== loadingMessage) {\n      return;\n    }\n    if (!defined(features) || features.length === 0) {\n      viewer.selectedEntity = createNoFeaturesEntity();\n      return;\n    }\n\n    // Select the first feature.\n    const feature = features[0];\n    const entity = new Entity({\n      id: feature.name,\n      description: feature.description\n    });\n    if (defined(feature.position)) {\n      const ecfPosition = viewer.scene.ellipsoid.cartographicToCartesian(feature.position, cartesian3Scratch);\n      entity.position = new ConstantPositionProperty(ecfPosition);\n    }\n    viewer.selectedEntity = entity;\n  }, function () {\n    // Has this async pick been superseded by a later one?\n    if (viewer.selectedEntity !== loadingMessage) {\n      return;\n    }\n    viewer.selectedEntity = createNoFeaturesEntity();\n  });\n  return loadingMessage;\n}\nfunction createNoFeaturesEntity() {\n  return new Entity({\n    id: \"None\",\n    description: \"No features found.\"\n  });\n}\nfunction enableVRUI(viewer, enabled) {\n  const geocoder = viewer._geocoder;\n  const homeButton = viewer._homeButton;\n  const sceneModePicker = viewer._sceneModePicker;\n  const projectionPicker = viewer._projectionPicker;\n  const baseLayerPicker = viewer._baseLayerPicker;\n  const animation = viewer._animation;\n  const timeline = viewer._timeline;\n  const fullscreenButton = viewer._fullscreenButton;\n  const infoBox = viewer._infoBox;\n  const selectionIndicator = viewer._selectionIndicator;\n  const visibility = enabled ? \"hidden\" : \"visible\";\n  if (defined(geocoder)) {\n    geocoder.container.style.visibility = visibility;\n  }\n  if (defined(homeButton)) {\n    homeButton.container.style.visibility = visibility;\n  }\n  if (defined(sceneModePicker)) {\n    sceneModePicker.container.style.visibility = visibility;\n  }\n  if (defined(projectionPicker)) {\n    projectionPicker.container.style.visibility = visibility;\n  }\n  if (defined(baseLayerPicker)) {\n    baseLayerPicker.container.style.visibility = visibility;\n  }\n  if (defined(animation)) {\n    animation.container.style.visibility = visibility;\n  }\n  if (defined(timeline)) {\n    timeline.container.style.visibility = visibility;\n  }\n  if (defined(fullscreenButton) && fullscreenButton.viewModel.isFullscreenEnabled) {\n    fullscreenButton.container.style.visibility = visibility;\n  }\n  if (defined(infoBox)) {\n    infoBox.container.style.visibility = visibility;\n  }\n  if (defined(selectionIndicator)) {\n    selectionIndicator.container.style.visibility = visibility;\n  }\n  if (viewer._container) {\n    const right = enabled || !defined(fullscreenButton) ? 0 : fullscreenButton.container.clientWidth;\n    viewer._vrButton.container.style.right = `${right}px`;\n    viewer.forceResize();\n  }\n}\n\n/**\n * @typedef {object} Viewer.ConstructorOptions\n *\n * Initialization options for the Viewer constructor\n *\n * @property {boolean} [animation=true] If set to false, the Animation widget will not be created.\n * @property {boolean} [baseLayerPicker=true] If set to false, the BaseLayerPicker widget will not be created.\n * @property {boolean} [fullscreenButton=true] If set to false, the FullscreenButton widget will not be created.\n * @property {boolean} [vrButton=false] If set to true, the VRButton widget will be created.\n * @property {boolean|IonGeocodeProviderType|GeocoderService[]} [geocoder=IonGeocodeProviderType.DEFAULT] The geocoding service or services to use when searching with the Geocoder widget. If set to false, the Geocoder widget will not be created.\n * @property {boolean} [homeButton=true] If set to false, the HomeButton widget will not be created.\n * @property {boolean} [infoBox=true] If set to false, the InfoBox widget will not be created.\n * @property {boolean} [sceneModePicker=true] If set to false, the SceneModePicker widget will not be created.\n * @property {boolean} [selectionIndicator=true] If set to false, the SelectionIndicator widget will not be created.\n * @property {boolean} [timeline=true] If set to false, the Timeline widget will not be created.\n * @property {boolean} [navigationHelpButton=true] If set to false, the navigation help button will not be created.\n * @property {boolean} [navigationInstructionsInitiallyVisible=true] True if the navigation instructions should initially be visible, or false if the should not be shown until the user explicitly clicks the button.\n * @property {boolean} [scene3DOnly=false] When <code>true</code>, each geometry instance will only be rendered in 3D to save GPU memory.\n * @property {boolean} [shouldAnimate=false] <code>true</code> if the clock should attempt to advance simulation time by default, <code>false</code> otherwise.  This option takes precedence over setting {@link Viewer#clockViewModel}.\n * @property {ClockViewModel} [clockViewModel=new ClockViewModel(clock)] The clock view model to use to control current time.\n * @property {ProviderViewModel} [selectedImageryProviderViewModel] The view model for the current base imagery layer, if not supplied the first available base layer is used.  This value is only valid if `baseLayerPicker` is set to true.\n * @property {ProviderViewModel[]} [imageryProviderViewModels=createDefaultImageryProviderViewModels()] The array of ProviderViewModels to be selectable from the BaseLayerPicker.  This value is only valid if `baseLayerPicker` is set to true.\n * @property {ProviderViewModel} [selectedTerrainProviderViewModel] The view model for the current base terrain layer, if not supplied the first available base layer is used.  This value is only valid if `baseLayerPicker` is set to true.\n * @property {ProviderViewModel[]} [terrainProviderViewModels=createDefaultTerrainProviderViewModels()] The array of ProviderViewModels to be selectable from the BaseLayerPicker.  This value is only valid if `baseLayerPicker` is set to true.\n * @property {ImageryLayer|false} [baseLayer=ImageryLayer.fromWorldImagery()] The bottommost imagery layer applied to the globe. If set to <code>false</code>, no imagery provider will be added. This value is only valid if `baseLayerPicker` is set to false. Cannot be used when `globe` is set to false.\n * @property {Ellipsoid} [ellipsoid = Ellipsoid.default] The default ellipsoid.\n * @property {TerrainProvider} [terrainProvider=new EllipsoidTerrainProvider()] The terrain provider to use\n * @property {Terrain} [terrain] A terrain object which handles asynchronous terrain provider. Can only specify if options.terrainProvider is undefined.\n * @property {SkyBox|false} [skyBox] The skybox used to render the stars. When <code>undefined</code> and the WGS84 ellipsoid used, the default stars are used. If set to <code>false</code>, no skyBox, Sun, or Moon will be added.\n * @property {SkyAtmosphere|false} [skyAtmosphere] Blue sky, and the glow around the Earth's limb. Enabled when the WGS84 ellipsoid used. Set to <code>false</code> to turn it off.\n * @property {Element|string} [fullscreenElement=document.body] The element or id to be placed into fullscreen mode when the full screen button is pressed.\n * @property {boolean} [useDefaultRenderLoop=true] True if this widget should control the render loop, false otherwise.\n * @property {number} [targetFrameRate] The target frame rate when using the default render loop.\n * @property {boolean} [showRenderLoopErrors=true] If true, this widget will automatically display an HTML panel to the user containing the error, if a render loop error occurs.\n * @property {boolean} [useBrowserRecommendedResolution=true] If true, render at the browser's recommended resolution and ignore <code>window.devicePixelRatio</code>.\n * @property {boolean} [automaticallyTrackDataSourceClocks=true] If true, this widget will automatically track the clock settings of newly added DataSources, updating if the DataSource's clock changes.  Set this to false if you want to configure the clock independently.\n * @property {ContextOptions} [contextOptions] Context and WebGL creation properties passed to {@link Scene}.\n * @property {SceneMode} [sceneMode=SceneMode.SCENE3D] The initial scene mode.\n * @property {MapProjection} [mapProjection=new GeographicProjection(options.ellipsoid)] The map projection to use in 2D and Columbus View modes.\n * @property {Globe|false} [globe=new Globe(options.ellipsoid)] The globe to use in the scene.  If set to <code>false</code>, no globe will be added and the sky atmosphere will be hidden by default.\n * @property {boolean} [orderIndependentTranslucency=true] If true and the configuration supports it, use order independent translucency.\n * @property {Element|string} [creditContainer] The DOM element or ID that will contain the {@link CreditDisplay}.  If not specified, the credits are added to the bottom of the widget itself.\n * @property {Element|string} [creditViewport] The DOM element or ID that will contain the credit pop up created by the {@link CreditDisplay}.  If not specified, it will appear over the widget itself.\n * @property {DataSourceCollection} [dataSources=new DataSourceCollection()] The collection of data sources visualized by the widget.  If this parameter is provided,\n *                               the instance is assumed to be owned by the caller and will not be destroyed when the viewer is destroyed.\n * @property {boolean} [shadows=false] Determines if shadows are cast by light sources.\n * @property {ShadowMode} [terrainShadows=ShadowMode.RECEIVE_ONLY] Determines if the terrain casts or receives shadows from light sources.\n * @property {MapMode2D} [mapMode2D=MapMode2D.INFINITE_SCROLL] Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n * @property {boolean} [projectionPicker=false] If set to true, the ProjectionPicker widget will be created.\n * @property {boolean} [blurActiveElementOnCanvasFocus=true] If true, the active element will blur when the viewer's canvas is clicked. Setting this to false is useful for cases when the canvas is clicked only for retrieving position or an entity data without actually meaning to set the canvas to be the active element.\n * @property {boolean} [requestRenderMode=false] If true, rendering a frame will only occur when needed as determined by changes within the scene. Enabling reduces the CPU/GPU usage of your application and uses less battery on mobile, but requires using {@link Scene#requestRender} to render a new frame explicitly in this mode. This will be necessary in many cases after making changes to the scene in other parts of the API. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @property {number} [maximumRenderTimeChange=0.0] If requestRenderMode is true, this value defines the maximum change in simulation time allowed before a render is requested. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @property {number} [depthPlaneEllipsoidOffset=0.0] Adjust the DepthPlane to address rendering artefacts below ellipsoid zero elevation.\n * @property {number} [msaaSamples=4] If provided, this value controls the rate of multisample antialiasing. Typical multisampling rates are 2, 4, and sometimes 8 samples per pixel. Higher sampling rates of MSAA may impact performance in exchange for improved visual quality. This value only applies to WebGL2 contexts that support multisample render targets. Set to 1 to disable MSAA.\n */\n\n/**\n * A base widget for building applications.  It composites all of the standard Cesium widgets into one reusable package.\n * The widget can always be extended by using mixins, which add functionality useful for a variety of applications.\n *\n * @alias Viewer\n * @constructor\n *\n * @param {Element|string} container The DOM element or ID that will contain the widget.\n * @param {Viewer.ConstructorOptions} [options] Object describing initialization options\n *\n * @exception {DeveloperError} Element with id \"container\" does not exist in the document.\n * @exception {DeveloperError} options.selectedImageryProviderViewModel is not available when not using the BaseLayerPicker widget, specify options.baseLayer instead.\n * @exception {DeveloperError} options.selectedTerrainProviderViewModel is not available when not using the BaseLayerPicker widget, specify options.terrainProvider instead.\n *\n * @see Animation\n * @see BaseLayerPicker\n * @see CesiumWidget\n * @see FullscreenButton\n * @see HomeButton\n * @see SceneModePicker\n * @see Timeline\n * @see viewerDragDropMixin\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Hello%20World.html|Cesium Sandcastle Hello World Demo}\n *\n * @example\n * // Initialize the viewer widget with several custom options and mixins.\n * try {\n *   const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *     // Start in Columbus Viewer\n *     sceneMode: Cesium.SceneMode.COLUMBUS_VIEW,\n *     // Use Cesium World Terrain\n *     terrain: Cesium.Terrain.fromWorldTerrain(),\n *     // Hide the base layer picker\n *     baseLayerPicker: false,\n *     // Use OpenStreetMaps\n *     baseLayer: new Cesium.ImageryLayer(new Cesium.OpenStreetMapImageryProvider({\n *       url: \"https://tile.openstreetmap.org/\"\n *     })),\n *     skyBox: new Cesium.SkyBox({\n *       sources: {\n *         positiveX: \"stars/TychoSkymapII.t3_08192x04096_80_px.jpg\",\n *         negativeX: \"stars/TychoSkymapII.t3_08192x04096_80_mx.jpg\",\n *         positiveY: \"stars/TychoSkymapII.t3_08192x04096_80_py.jpg\",\n *         negativeY: \"stars/TychoSkymapII.t3_08192x04096_80_my.jpg\",\n *         positiveZ: \"stars/TychoSkymapII.t3_08192x04096_80_pz.jpg\",\n *         negativeZ: \"stars/TychoSkymapII.t3_08192x04096_80_mz.jpg\"\n *       }\n *     }),\n *     // Show Columbus View map with Web Mercator projection\n *     mapProjection: new Cesium.WebMercatorProjection()\n *   });\n * } catch (error) {\n *   console.log(error);\n * }\n *\n * // Add basic drag and drop functionality\n * viewer.extend(Cesium.viewerDragDropMixin);\n *\n * // Show a pop-up alert if we encounter an error when processing a dropped file\n * viewer.dropError.addEventListener(function(dropHandler, name, error) {\n *   console.log(error);\n *   window.alert(error);\n * });\n */\nfunction Viewer(container, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required.\");\n  }\n  //>>includeEnd('debug');\n\n  container = getElement(container);\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (options.globe === false && defined(options.baseLayer) && options.baseLayer !== false) {\n    throw new DeveloperError(\"Cannot use baseLayer when globe is disabled.\");\n  }\n  //>>includeEnd('debug')\n\n  const createBaseLayerPicker = (!defined(options.globe) || options.globe !== false) && (!defined(options.baseLayerPicker) || options.baseLayerPicker !== false);\n\n  //>>includeStart('debug', pragmas.debug);\n  // If not using BaseLayerPicker, selectedImageryProviderViewModel is an invalid option\n  if (!createBaseLayerPicker && defined(options.selectedImageryProviderViewModel)) {\n    throw new DeveloperError(\"options.selectedImageryProviderViewModel is not available when not using the BaseLayerPicker widget. \\\nEither specify options.baseLayer instead or set options.baseLayerPicker to true.\");\n  }\n\n  // If not using BaseLayerPicker, selectedTerrainProviderViewModel is an invalid option\n  if (!createBaseLayerPicker && defined(options.selectedTerrainProviderViewModel)) {\n    throw new DeveloperError(\"options.selectedTerrainProviderViewModel is not available when not using the BaseLayerPicker widget. \\\nEither specify options.terrainProvider instead or set options.baseLayerPicker to true.\");\n  }\n  //>>includeEnd('debug')\n\n  const that = this;\n  const viewerContainer = document.createElement(\"div\");\n  viewerContainer.className = \"cesium-viewer\";\n  container.appendChild(viewerContainer);\n\n  // Cesium widget container\n  const cesiumWidgetContainer = document.createElement(\"div\");\n  cesiumWidgetContainer.className = \"cesium-viewer-cesiumWidgetContainer\";\n  viewerContainer.appendChild(cesiumWidgetContainer);\n\n  // Bottom container\n  const bottomContainer = document.createElement(\"div\");\n  bottomContainer.className = \"cesium-viewer-bottom\";\n  viewerContainer.appendChild(bottomContainer);\n  const scene3DOnly = defaultValue(options.scene3DOnly, false);\n  let clock;\n  let clockViewModel;\n  let destroyClockViewModel = false;\n  if (defined(options.clockViewModel)) {\n    clockViewModel = options.clockViewModel;\n    clock = clockViewModel.clock;\n  } else {\n    clock = new Clock();\n    clockViewModel = new ClockViewModel(clock);\n    destroyClockViewModel = true;\n  }\n\n  // Cesium widget\n  const cesiumWidget = new CesiumWidget(cesiumWidgetContainer, {\n    baseLayer: createBaseLayerPicker && defined(options.selectedImageryProviderViewModel) || defined(options.baseLayer) || defined(options.imageryProvider) ? false : undefined,\n    clock: clock,\n    shouldAnimate: options.shouldAnimate,\n    skyBox: options.skyBox,\n    skyAtmosphere: options.skyAtmosphere,\n    sceneMode: options.sceneMode,\n    ellipsoid: options.ellipsoid,\n    mapProjection: options.mapProjection,\n    globe: options.globe,\n    orderIndependentTranslucency: options.orderIndependentTranslucency,\n    automaticallyTrackDataSourceClocks: options.automaticallyTrackDataSourceClocks,\n    contextOptions: options.contextOptions,\n    useDefaultRenderLoop: options.useDefaultRenderLoop,\n    targetFrameRate: options.targetFrameRate,\n    showRenderLoopErrors: options.showRenderLoopErrors,\n    useBrowserRecommendedResolution: options.useBrowserRecommendedResolution,\n    creditContainer: defined(options.creditContainer) ? options.creditContainer : bottomContainer,\n    creditViewport: options.creditViewport,\n    dataSources: options.dataSources,\n    scene3DOnly: scene3DOnly,\n    shadows: options.shadows,\n    terrainShadows: options.terrainShadows,\n    mapMode2D: options.mapMode2D,\n    blurActiveElementOnCanvasFocus: options.blurActiveElementOnCanvasFocus,\n    requestRenderMode: options.requestRenderMode,\n    maximumRenderTimeChange: options.maximumRenderTimeChange,\n    depthPlaneEllipsoidOffset: options.depthPlaneEllipsoidOffset,\n    msaaSamples: options.msaaSamples\n  });\n  const scene = cesiumWidget.scene;\n  const eventHelper = new EventHelper();\n  eventHelper.add(clock.onTick, Viewer.prototype._onTick, this);\n\n  // Selection Indicator\n  let selectionIndicator;\n  if (!defined(options.selectionIndicator) || options.selectionIndicator !== false) {\n    const selectionIndicatorContainer = document.createElement(\"div\");\n    selectionIndicatorContainer.className = \"cesium-viewer-selectionIndicatorContainer\";\n    viewerContainer.appendChild(selectionIndicatorContainer);\n    selectionIndicator = new SelectionIndicator(selectionIndicatorContainer, scene);\n  }\n\n  // Info Box\n  let infoBox;\n  if (!defined(options.infoBox) || options.infoBox !== false) {\n    const infoBoxContainer = document.createElement(\"div\");\n    infoBoxContainer.className = \"cesium-viewer-infoBoxContainer\";\n    viewerContainer.appendChild(infoBoxContainer);\n    infoBox = new InfoBox(infoBoxContainer);\n    const infoBoxViewModel = infoBox.viewModel;\n    eventHelper.add(infoBoxViewModel.cameraClicked, Viewer.prototype._onInfoBoxCameraClicked, this);\n    eventHelper.add(infoBoxViewModel.closeClicked, Viewer.prototype._onInfoBoxClockClicked, this);\n  }\n\n  // Main Toolbar\n  const toolbar = document.createElement(\"div\");\n  toolbar.className = \"cesium-viewer-toolbar\";\n  viewerContainer.appendChild(toolbar);\n\n  // Geocoder\n  let geocoder;\n  if (!defined(options.geocoder) || options.geocoder !== false) {\n    const geocoderContainer = document.createElement(\"div\");\n    geocoderContainer.className = \"cesium-viewer-geocoderContainer\";\n    toolbar.appendChild(geocoderContainer);\n    let geocoderService;\n    if (typeof options.geocoder === \"string\") {\n      geocoderService = [new IonGeocoderService({\n        scene,\n        geocodeProviderType: options.geocoder\n      })];\n    } else if (defined(options.geocoder) && typeof options.geocoder !== \"boolean\") {\n      geocoderService = Array.isArray(options.geocoder) ? options.geocoder : [options.geocoder];\n    }\n    geocoder = new Geocoder({\n      container: geocoderContainer,\n      geocoderServices: geocoderService,\n      scene: scene\n    });\n    // Subscribe to search so that we can clear the trackedEntity when it is clicked.\n    eventHelper.add(geocoder.viewModel.search.beforeExecute, Viewer.prototype._clearObjects, this);\n  }\n\n  // HomeButton\n  let homeButton;\n  if (!defined(options.homeButton) || options.homeButton !== false) {\n    homeButton = new HomeButton(toolbar, scene);\n    if (defined(geocoder)) {\n      eventHelper.add(homeButton.viewModel.command.afterExecute, function () {\n        const viewModel = geocoder.viewModel;\n        viewModel.searchText = \"\";\n        if (viewModel.isSearchInProgress) {\n          viewModel.search();\n        }\n      });\n    }\n    // Subscribe to the home button beforeExecute event so that we can clear the trackedEntity.\n    eventHelper.add(homeButton.viewModel.command.beforeExecute, Viewer.prototype._clearTrackedObject, this);\n  }\n\n  // SceneModePicker\n  // By default, we silently disable the scene mode picker if scene3DOnly is true,\n  // but if sceneModePicker is explicitly set to true, throw an error.\n  //>>includeStart('debug', pragmas.debug);\n  if (options.sceneModePicker === true && scene3DOnly) {\n    throw new DeveloperError(\"options.sceneModePicker is not available when options.scene3DOnly is set to true.\");\n  }\n  //>>includeEnd('debug');\n\n  let sceneModePicker;\n  if (!scene3DOnly && (!defined(options.sceneModePicker) || options.sceneModePicker !== false)) {\n    sceneModePicker = new SceneModePicker(toolbar, scene);\n  }\n  let projectionPicker;\n  if (options.projectionPicker) {\n    projectionPicker = new ProjectionPicker(toolbar, scene);\n  }\n\n  // BaseLayerPicker\n  let baseLayerPicker;\n  let baseLayerPickerDropDown;\n  if (createBaseLayerPicker) {\n    const imageryProviderViewModels = defaultValue(options.imageryProviderViewModels, createDefaultImageryProviderViewModels());\n    const terrainProviderViewModels = defaultValue(options.terrainProviderViewModels, createDefaultTerrainProviderViewModels());\n    baseLayerPicker = new BaseLayerPicker(toolbar, {\n      globe: scene.globe,\n      imageryProviderViewModels: imageryProviderViewModels,\n      selectedImageryProviderViewModel: options.selectedImageryProviderViewModel,\n      terrainProviderViewModels: terrainProviderViewModels,\n      selectedTerrainProviderViewModel: options.selectedTerrainProviderViewModel\n    });\n\n    //Grab the dropdown for resize code.\n    const elements = toolbar.getElementsByClassName(\"cesium-baseLayerPicker-dropDown\");\n    baseLayerPickerDropDown = elements[0];\n  }\n\n  // These need to be set after the BaseLayerPicker is created in order to take effect\n  if (defined(options.baseLayer) && options.baseLayer !== false) {\n    if (createBaseLayerPicker) {\n      baseLayerPicker.viewModel.selectedImagery = undefined;\n    }\n    scene.imageryLayers.removeAll();\n    scene.imageryLayers.add(options.baseLayer);\n  }\n  if (defined(options.terrainProvider)) {\n    if (createBaseLayerPicker) {\n      baseLayerPicker.viewModel.selectedTerrain = undefined;\n    }\n    scene.terrainProvider = options.terrainProvider;\n  }\n  if (defined(options.terrain)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (defined(options.terrainProvider)) {\n      throw new DeveloperError(\"Specify either options.terrainProvider or options.terrain.\");\n    }\n    //>>includeEnd('debug')\n\n    if (createBaseLayerPicker) {\n      // Required as this is otherwise set by the baseLayerPicker\n      scene.globe.depthTestAgainstTerrain = true;\n    }\n    scene.setTerrain(options.terrain);\n  }\n\n  // Navigation Help Button\n  let navigationHelpButton;\n  if (!defined(options.navigationHelpButton) || options.navigationHelpButton !== false) {\n    let showNavHelp = true;\n    try {\n      //window.localStorage is null if disabled in Firefox or undefined in browsers with implementation\n      if (defined(window.localStorage)) {\n        const hasSeenNavHelp = window.localStorage.getItem(\"cesium-hasSeenNavHelp\");\n        if (defined(hasSeenNavHelp) && Boolean(hasSeenNavHelp)) {\n          showNavHelp = false;\n        } else {\n          window.localStorage.setItem(\"cesium-hasSeenNavHelp\", \"true\");\n        }\n      }\n    } catch (e) {\n      //Accessing window.localStorage throws if disabled in Chrome\n      //window.localStorage.setItem throws if in Safari private browsing mode or in any browser if we are over quota.\n    }\n    navigationHelpButton = new NavigationHelpButton({\n      container: toolbar,\n      instructionsInitiallyVisible: defaultValue(options.navigationInstructionsInitiallyVisible, showNavHelp)\n    });\n  }\n\n  // Animation\n  let animation;\n  if (!defined(options.animation) || options.animation !== false) {\n    const animationContainer = document.createElement(\"div\");\n    animationContainer.className = \"cesium-viewer-animationContainer\";\n    viewerContainer.appendChild(animationContainer);\n    animation = new Animation(animationContainer, new AnimationViewModel(clockViewModel));\n  }\n\n  // Timeline\n  let timeline;\n  if (!defined(options.timeline) || options.timeline !== false) {\n    const timelineContainer = document.createElement(\"div\");\n    timelineContainer.className = \"cesium-viewer-timelineContainer\";\n    viewerContainer.appendChild(timelineContainer);\n    timeline = new Timeline(timelineContainer, clock);\n    timeline.addEventListener(\"settime\", onTimelineScrubfunction, false);\n    timeline.zoomTo(clock.startTime, clock.stopTime);\n  }\n\n  // Fullscreen\n  let fullscreenButton;\n  let fullscreenSubscription;\n  let fullscreenContainer;\n  if (!defined(options.fullscreenButton) || options.fullscreenButton !== false) {\n    fullscreenContainer = document.createElement(\"div\");\n    fullscreenContainer.className = \"cesium-viewer-fullscreenContainer\";\n    viewerContainer.appendChild(fullscreenContainer);\n    fullscreenButton = new FullscreenButton(fullscreenContainer, options.fullscreenElement);\n\n    //Subscribe to fullscreenButton.viewModel.isFullscreenEnabled so\n    //that we can hide/show the button as well as size the timeline.\n    fullscreenSubscription = subscribeAndEvaluate(fullscreenButton.viewModel, \"isFullscreenEnabled\", function (isFullscreenEnabled) {\n      fullscreenContainer.style.display = isFullscreenEnabled ? \"block\" : \"none\";\n      if (defined(timeline)) {\n        timeline.container.style.right = `${fullscreenContainer.clientWidth}px`;\n        timeline.resize();\n      }\n    });\n  }\n\n  // VR\n  let vrButton;\n  let vrSubscription;\n  let vrModeSubscription;\n  if (options.vrButton) {\n    const vrContainer = document.createElement(\"div\");\n    vrContainer.className = \"cesium-viewer-vrContainer\";\n    viewerContainer.appendChild(vrContainer);\n    vrButton = new VRButton(vrContainer, scene, options.fullScreenElement);\n    vrSubscription = subscribeAndEvaluate(vrButton.viewModel, \"isVREnabled\", function (isVREnabled) {\n      vrContainer.style.display = isVREnabled ? \"block\" : \"none\";\n      if (defined(fullscreenButton)) {\n        vrContainer.style.right = `${fullscreenContainer.clientWidth}px`;\n      }\n      if (defined(timeline)) {\n        timeline.container.style.right = `${vrContainer.clientWidth}px`;\n        timeline.resize();\n      }\n    });\n    vrModeSubscription = subscribeAndEvaluate(vrButton.viewModel, \"isVRMode\", function (isVRMode) {\n      enableVRUI(that, isVRMode);\n    });\n  }\n\n  //Assign all properties to this instance.  No \"this\" assignments should\n  //take place above this line.\n  this._baseLayerPickerDropDown = baseLayerPickerDropDown;\n  this._fullscreenSubscription = fullscreenSubscription;\n  this._vrSubscription = vrSubscription;\n  this._vrModeSubscription = vrModeSubscription;\n  this._dataSourceChangedListeners = {};\n  this._container = container;\n  this._bottomContainer = bottomContainer;\n  this._element = viewerContainer;\n  this._cesiumWidget = cesiumWidget;\n  this._selectionIndicator = selectionIndicator;\n  this._infoBox = infoBox;\n  this._clockViewModel = clockViewModel;\n  this._destroyClockViewModel = destroyClockViewModel;\n  this._toolbar = toolbar;\n  this._homeButton = homeButton;\n  this._sceneModePicker = sceneModePicker;\n  this._projectionPicker = projectionPicker;\n  this._baseLayerPicker = baseLayerPicker;\n  this._navigationHelpButton = navigationHelpButton;\n  this._animation = animation;\n  this._timeline = timeline;\n  this._fullscreenButton = fullscreenButton;\n  this._vrButton = vrButton;\n  this._geocoder = geocoder;\n  this._eventHelper = eventHelper;\n  this._lastWidth = 0;\n  this._lastHeight = 0;\n  this._enableInfoOrSelection = defined(infoBox) || defined(selectionIndicator);\n  this._selectedEntity = undefined;\n  this._selectedEntityChanged = new Event();\n  const dataSourceCollection = this._cesiumWidget.dataSources;\n  const dataSourceDisplay = this._cesiumWidget.dataSourceDisplay;\n\n  //Listen to data source events in order to track clock changes.\n  eventHelper.add(dataSourceCollection.dataSourceAdded, Viewer.prototype._onDataSourceAdded, this);\n  eventHelper.add(dataSourceCollection.dataSourceRemoved, Viewer.prototype._onDataSourceRemoved, this);\n\n  // Prior to each render, check if anything needs to be resized.\n  eventHelper.add(scene.postUpdate, Viewer.prototype.resize, this);\n\n  // We need to subscribe to the data sources and collections so that we can clear the\n  // tracked object when it is removed from the scene.\n  // Subscribe to current data sources\n  const dataSourceLength = dataSourceCollection.length;\n  for (let i = 0; i < dataSourceLength; i++) {\n    this._dataSourceAdded(dataSourceCollection, dataSourceCollection.get(i));\n  }\n  this._dataSourceAdded(undefined, dataSourceDisplay.defaultDataSource);\n\n  // Hook up events so that we can subscribe to future sources.\n  eventHelper.add(dataSourceCollection.dataSourceAdded, Viewer.prototype._dataSourceAdded, this);\n  eventHelper.add(dataSourceCollection.dataSourceRemoved, Viewer.prototype._dataSourceRemoved, this);\n\n  // Subscribe to left clicks and zoom to the picked object.\n  function pickAndTrackObject(e) {\n    const entity = pickEntity(that, e);\n    if (defined(entity)) {\n      //Only track the entity if it has a valid position at the current time.\n      if (Property.getValueOrUndefined(entity.position, that.clock.currentTime)) {\n        that.trackedEntity = entity;\n      } else {\n        that.zoomTo(entity);\n      }\n    } else if (defined(that.trackedEntity)) {\n      that.trackedEntity = undefined;\n    }\n  }\n  function pickAndSelectObject(e) {\n    that.selectedEntity = pickEntity(that, e);\n  }\n  cesiumWidget.screenSpaceEventHandler.setInputAction(pickAndSelectObject, ScreenSpaceEventType.LEFT_CLICK);\n  cesiumWidget.screenSpaceEventHandler.setInputAction(pickAndTrackObject, ScreenSpaceEventType.LEFT_DOUBLE_CLICK);\n\n  // This allows to update the Viewer's _clockViewModel instead of the CesiumWidget's _clock\n  // when CesiumWidget is created from the Viewer.\n  cesiumWidget._canAnimateUpdateCallback = this._updateCanAnimate(this);\n}\nObject.defineProperties(Viewer.prototype, {\n  /**\n   * Gets the parent container.\n   * @memberof Viewer.prototype\n   * @type {Element}\n   * @readonly\n   */\n  container: {\n    get: function () {\n      return this._container;\n    }\n  },\n  /**\n   * Manages the list of credits to display on screen and in the lightbox.\n   * @memberof Viewer.prototype\n   *\n   * @type {CreditDisplay}\n   */\n  creditDisplay: {\n    get: function () {\n      return this._cesiumWidget.creditDisplay;\n    }\n  },\n  /**\n   * Gets the DOM element for the area at the bottom of the window containing the\n   * {@link CreditDisplay} and potentially other things.\n   * @memberof Viewer.prototype\n   * @type {Element}\n   * @readonly\n   */\n  bottomContainer: {\n    get: function () {\n      return this._bottomContainer;\n    }\n  },\n  /**\n   * Gets the CesiumWidget.\n   * @memberof Viewer.prototype\n   * @type {CesiumWidget}\n   * @readonly\n   */\n  cesiumWidget: {\n    get: function () {\n      return this._cesiumWidget;\n    }\n  },\n  /**\n   * Gets the selection indicator.\n   * @memberof Viewer.prototype\n   * @type {SelectionIndicator}\n   * @readonly\n   */\n  selectionIndicator: {\n    get: function () {\n      return this._selectionIndicator;\n    }\n  },\n  /**\n   * Gets the info box.\n   * @memberof Viewer.prototype\n   * @type {InfoBox}\n   * @readonly\n   */\n  infoBox: {\n    get: function () {\n      return this._infoBox;\n    }\n  },\n  /**\n   * Gets the Geocoder.\n   * @memberof Viewer.prototype\n   * @type {Geocoder}\n   * @readonly\n   */\n  geocoder: {\n    get: function () {\n      return this._geocoder;\n    }\n  },\n  /**\n   * Gets the HomeButton.\n   * @memberof Viewer.prototype\n   * @type {HomeButton}\n   * @readonly\n   */\n  homeButton: {\n    get: function () {\n      return this._homeButton;\n    }\n  },\n  /**\n   * Gets the SceneModePicker.\n   * @memberof Viewer.prototype\n   * @type {SceneModePicker}\n   * @readonly\n   */\n  sceneModePicker: {\n    get: function () {\n      return this._sceneModePicker;\n    }\n  },\n  /**\n   * Gets the ProjectionPicker.\n   * @memberof Viewer.prototype\n   * @type {ProjectionPicker}\n   * @readonly\n   */\n  projectionPicker: {\n    get: function () {\n      return this._projectionPicker;\n    }\n  },\n  /**\n   * Gets the BaseLayerPicker.\n   * @memberof Viewer.prototype\n   * @type {BaseLayerPicker}\n   * @readonly\n   */\n  baseLayerPicker: {\n    get: function () {\n      return this._baseLayerPicker;\n    }\n  },\n  /**\n   * Gets the NavigationHelpButton.\n   * @memberof Viewer.prototype\n   * @type {NavigationHelpButton}\n   * @readonly\n   */\n  navigationHelpButton: {\n    get: function () {\n      return this._navigationHelpButton;\n    }\n  },\n  /**\n   * Gets the Animation widget.\n   * @memberof Viewer.prototype\n   * @type {Animation}\n   * @readonly\n   */\n  animation: {\n    get: function () {\n      return this._animation;\n    }\n  },\n  /**\n   * Gets the Timeline widget.\n   * @memberof Viewer.prototype\n   * @type {Timeline}\n   * @readonly\n   */\n  timeline: {\n    get: function () {\n      return this._timeline;\n    }\n  },\n  /**\n   * Gets the FullscreenButton.\n   * @memberof Viewer.prototype\n   * @type {FullscreenButton}\n   * @readonly\n   */\n  fullscreenButton: {\n    get: function () {\n      return this._fullscreenButton;\n    }\n  },\n  /**\n   * Gets the VRButton.\n   * @memberof Viewer.prototype\n   * @type {VRButton}\n   * @readonly\n   */\n  vrButton: {\n    get: function () {\n      return this._vrButton;\n    }\n  },\n  /**\n   * Gets the display used for {@link DataSource} visualization.\n   * @memberof Viewer.prototype\n   * @type {DataSourceDisplay}\n   * @readonly\n   */\n  dataSourceDisplay: {\n    get: function () {\n      return this._cesiumWidget.dataSourceDisplay;\n    }\n  },\n  /**\n   * Gets the collection of entities not tied to a particular data source.\n   * This is a shortcut to [dataSourceDisplay.defaultDataSource.entities]{@link Viewer#dataSourceDisplay}.\n   * @memberof Viewer.prototype\n   * @type {EntityCollection}\n   * @readonly\n   */\n  entities: {\n    get: function () {\n      return this._cesiumWidget.entities;\n    }\n  },\n  /**\n   * Gets the set of {@link DataSource} instances to be visualized.\n   * @memberof Viewer.prototype\n   * @type {DataSourceCollection}\n   * @readonly\n   */\n  dataSources: {\n    get: function () {\n      return this._cesiumWidget.dataSources;\n    }\n  },\n  /**\n   * Gets the canvas.\n   * @memberof Viewer.prototype\n   * @type {HTMLCanvasElement}\n   * @readonly\n   */\n  canvas: {\n    get: function () {\n      return this._cesiumWidget.canvas;\n    }\n  },\n  /**\n   * Gets the scene.\n   * @memberof Viewer.prototype\n   * @type {Scene}\n   * @readonly\n   */\n  scene: {\n    get: function () {\n      return this._cesiumWidget.scene;\n    }\n  },\n  /**\n   * Determines if shadows are cast by light sources.\n   * @memberof Viewer.prototype\n   * @type {boolean}\n   */\n  shadows: {\n    get: function () {\n      return this.scene.shadowMap.enabled;\n    },\n    set: function (value) {\n      this.scene.shadowMap.enabled = value;\n    }\n  },\n  /**\n   * Determines if the terrain casts or shadows from light sources.\n   * @memberof Viewer.prototype\n   * @type {ShadowMode}\n   */\n  terrainShadows: {\n    get: function () {\n      return this.scene.globe.shadows;\n    },\n    set: function (value) {\n      this.scene.globe.shadows = value;\n    }\n  },\n  /**\n   * Get the scene's shadow map\n   * @memberof Viewer.prototype\n   * @type {ShadowMap}\n   * @readonly\n   */\n  shadowMap: {\n    get: function () {\n      return this.scene.shadowMap;\n    }\n  },\n  /**\n   * Gets the collection of image layers that will be rendered on the globe.\n   * @memberof Viewer.prototype\n   *\n   * @type {ImageryLayerCollection}\n   * @readonly\n   */\n  imageryLayers: {\n    get: function () {\n      return this.scene.imageryLayers;\n    }\n  },\n  /**\n   * The terrain provider providing surface geometry for the globe.\n   * @memberof Viewer.prototype\n   *\n   * @type {TerrainProvider}\n   */\n  terrainProvider: {\n    get: function () {\n      return this.scene.terrainProvider;\n    },\n    set: function (terrainProvider) {\n      this.scene.terrainProvider = terrainProvider;\n    }\n  },\n  /**\n   * Gets the camera.\n   * @memberof Viewer.prototype\n   *\n   * @type {Camera}\n   * @readonly\n   */\n  camera: {\n    get: function () {\n      return this.scene.camera;\n    }\n  },\n  /**\n   * Gets the default ellipsoid for the scene.\n   * @memberof Viewer.prototype\n   *\n   * @type {Ellipsoid}\n   * @default Ellipsoid.default\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._scene.ellipsoid;\n    }\n  },\n  /**\n   * Gets the post-process stages.\n   * @memberof Viewer.prototype\n   *\n   * @type {PostProcessStageCollection}\n   * @readonly\n   */\n  postProcessStages: {\n    get: function () {\n      return this.scene.postProcessStages;\n    }\n  },\n  /**\n   * Gets the clock.\n   * @memberof Viewer.prototype\n   * @type {Clock}\n   * @readonly\n   */\n  clock: {\n    get: function () {\n      return this._clockViewModel.clock;\n    }\n  },\n  /**\n   * Gets the clock view model.\n   * @memberof Viewer.prototype\n   * @type {ClockViewModel}\n   * @readonly\n   */\n  clockViewModel: {\n    get: function () {\n      return this._clockViewModel;\n    }\n  },\n  /**\n   * Gets the screen space event handler.\n   * @memberof Viewer.prototype\n   * @type {ScreenSpaceEventHandler}\n   * @readonly\n   */\n  screenSpaceEventHandler: {\n    get: function () {\n      return this._cesiumWidget.screenSpaceEventHandler;\n    }\n  },\n  /**\n   * Gets or sets the target frame rate of the widget when <code>useDefaultRenderLoop</code>\n   * is true. If undefined, the browser's requestAnimationFrame implementation\n   * determines the frame rate.  If defined, this value must be greater than 0.  A value higher\n   * than the underlying requestAnimationFrame implementation will have no effect.\n   * @memberof Viewer.prototype\n   *\n   * @type {number}\n   */\n  targetFrameRate: {\n    get: function () {\n      return this._cesiumWidget.targetFrameRate;\n    },\n    set: function (value) {\n      this._cesiumWidget.targetFrameRate = value;\n    }\n  },\n  /**\n   * Gets or sets whether or not this widget should control the render loop.\n   * If true the widget will use requestAnimationFrame to\n   * perform rendering and resizing of the widget, as well as drive the\n   * simulation clock. If set to false, you must manually call the\n   * <code>resize</code>, <code>render</code> methods\n   * as part of a custom render loop.  If an error occurs during rendering, {@link Scene}'s\n   * <code>renderError</code> event will be raised and this property\n   * will be set to false.  It must be set back to true to continue rendering\n   * after the error.\n   * @memberof Viewer.prototype\n   *\n   * @type {boolean}\n   */\n  useDefaultRenderLoop: {\n    get: function () {\n      return this._cesiumWidget.useDefaultRenderLoop;\n    },\n    set: function (value) {\n      this._cesiumWidget.useDefaultRenderLoop = value;\n    }\n  },\n  /**\n   * Gets or sets a scaling factor for rendering resolution.  Values less than 1.0 can improve\n   * performance on less powerful devices while values greater than 1.0 will render at a higher\n   * resolution and then scale down, resulting in improved visual fidelity.\n   * For example, if the widget is laid out at a size of 640x480, setting this value to 0.5\n   * will cause the scene to be rendered at 320x240 and then scaled up while setting\n   * it to 2.0 will cause the scene to be rendered at 1280x960 and then scaled down.\n   * @memberof Viewer.prototype\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  resolutionScale: {\n    get: function () {\n      return this._cesiumWidget.resolutionScale;\n    },\n    set: function (value) {\n      this._cesiumWidget.resolutionScale = value;\n    }\n  },\n  /**\n   * Boolean flag indicating if the browser's recommended resolution is used.\n   * If true, the browser's device pixel ratio is ignored and 1.0 is used instead,\n   * effectively rendering based on CSS pixels instead of device pixels. This can improve\n   * performance on less powerful devices that have high pixel density. When false, rendering\n   * will be in device pixels. {@link Viewer#resolutionScale} will still take effect whether\n   * this flag is true or false.\n   * @memberof Viewer.prototype\n   *\n   * @type {boolean}\n   * @default true\n   */\n  useBrowserRecommendedResolution: {\n    get: function () {\n      return this._cesiumWidget.useBrowserRecommendedResolution;\n    },\n    set: function (value) {\n      this._cesiumWidget.useBrowserRecommendedResolution = value;\n    }\n  },\n  /**\n   * Gets or sets whether or not data sources can temporarily pause\n   * animation in order to avoid showing an incomplete picture to the user.\n   * For example, if asynchronous primitives are being processed in the\n   * background, the clock will not advance until the geometry is ready.\n   *\n   * @memberof Viewer.prototype\n   *\n   * @type {boolean}\n   */\n  allowDataSourcesToSuspendAnimation: {\n    get: function () {\n      return this._cesiumWidget.allowDataSourcesToSuspendAnimation;\n    },\n    set: function (value) {\n      this._cesiumWidget.allowDataSourcesToSuspendAnimation = value;\n    }\n  },\n  /**\n   * Gets or sets the Entity instance currently being tracked by the camera.\n   * @memberof Viewer.prototype\n   * @type {Entity | undefined}\n   */\n  trackedEntity: {\n    get: function () {\n      return this._cesiumWidget.trackedEntity;\n    },\n    set: function (value) {\n      this._cesiumWidget.trackedEntity = value;\n    }\n  },\n  /**\n   * Gets or sets the object instance for which to display a selection indicator.\n   *\n   * If a user interactively picks a Cesium3DTilesFeature instance, then this property\n   * will contain a transient Entity instance with a property named \"feature\" that is\n   * the instance that was picked.\n   * @memberof Viewer.prototype\n   * @type {Entity | undefined}\n   */\n  selectedEntity: {\n    get: function () {\n      return this._selectedEntity;\n    },\n    set: function (value) {\n      if (this._selectedEntity !== value) {\n        this._selectedEntity = value;\n        const selectionIndicatorViewModel = defined(this._selectionIndicator) ? this._selectionIndicator.viewModel : undefined;\n        if (defined(value)) {\n          if (defined(selectionIndicatorViewModel)) {\n            selectionIndicatorViewModel.animateAppear();\n          }\n        } else if (defined(selectionIndicatorViewModel)) {\n          // Leave the info text in place here, it is needed during the exit animation.\n          selectionIndicatorViewModel.animateDepart();\n        }\n        this._selectedEntityChanged.raiseEvent(value);\n      }\n    }\n  },\n  /**\n   * Gets the event that is raised when the selected entity changes.\n   * @memberof Viewer.prototype\n   * @type {Event}\n   * @readonly\n   */\n  selectedEntityChanged: {\n    get: function () {\n      return this._selectedEntityChanged;\n    }\n  },\n  /**\n   * Gets the event that is raised when the tracked entity changes.\n   * @memberof Viewer.prototype\n   * @type {Event}\n   * @readonly\n   */\n  trackedEntityChanged: {\n    get: function () {\n      return this._cesiumWidget.trackedEntityChanged;\n    }\n  },\n  /**\n   * Gets or sets the data source to track with the viewer's clock.\n   * @memberof Viewer.prototype\n   * @type {DataSource}\n   */\n  clockTrackedDataSource: {\n    get: function () {\n      return this._cesiumWidget.clockTrackedDataSource;\n    },\n    set: function (value) {\n      if (this._cesiumWidget.clockTrackedDataSource !== value) {\n        this._cesiumWidget.clockTrackedDataSource = value;\n        linkTimelineToDataSourceClock(this._timeline, value);\n      }\n    }\n  }\n});\n\n/**\n * Extends the base viewer functionality with the provided mixin.\n * A mixin may add additional properties, functions, or other behavior\n * to the provided viewer instance.\n *\n * @param {Viewer.ViewerMixin} mixin The Viewer mixin to add to this instance.\n * @param {object} [options] The options object to be passed to the mixin function.\n *\n * @see viewerDragDropMixin\n */\nViewer.prototype.extend = function (mixin, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(mixin)) {\n    throw new DeveloperError(\"mixin is required.\");\n  }\n  //>>includeEnd('debug')\n\n  mixin(this, options);\n};\n\n/**\n * Resizes the widget to match the container size.\n * This function is called automatically as needed unless\n * <code>useDefaultRenderLoop</code> is set to false.\n */\nViewer.prototype.resize = function () {\n  const cesiumWidget = this._cesiumWidget;\n  const container = this._container;\n  const width = container.clientWidth;\n  const height = container.clientHeight;\n  const animationExists = defined(this._animation);\n  const timelineExists = defined(this._timeline);\n  cesiumWidget.resize();\n  if (width === this._lastWidth && height === this._lastHeight) {\n    return;\n  }\n  const panelMaxHeight = height - 125;\n  const baseLayerPickerDropDown = this._baseLayerPickerDropDown;\n  if (defined(baseLayerPickerDropDown)) {\n    baseLayerPickerDropDown.style.maxHeight = `${panelMaxHeight}px`;\n  }\n  if (defined(this._geocoder)) {\n    const geocoderSuggestions = this._geocoder.searchSuggestionsContainer;\n    geocoderSuggestions.style.maxHeight = `${panelMaxHeight}px`;\n  }\n  if (defined(this._infoBox)) {\n    this._infoBox.viewModel.maxHeight = panelMaxHeight;\n  }\n  const timeline = this._timeline;\n  let animationContainer;\n  let animationWidth = 0;\n  let creditLeft = 5;\n  let creditBottom = 3;\n  let creditRight = 0;\n  if (animationExists && window.getComputedStyle(this._animation.container).visibility !== \"hidden\") {\n    const lastWidth = this._lastWidth;\n    animationContainer = this._animation.container;\n    if (width > 900) {\n      animationWidth = 169;\n      if (lastWidth <= 900) {\n        animationContainer.style.width = \"169px\";\n        animationContainer.style.height = \"112px\";\n        this._animation.resize();\n      }\n    } else if (width >= 600) {\n      animationWidth = 136;\n      if (lastWidth < 600 || lastWidth > 900) {\n        animationContainer.style.width = \"136px\";\n        animationContainer.style.height = \"90px\";\n        this._animation.resize();\n      }\n    } else {\n      animationWidth = 106;\n      if (lastWidth > 600 || lastWidth === 0) {\n        animationContainer.style.width = \"106px\";\n        animationContainer.style.height = \"70px\";\n        this._animation.resize();\n      }\n    }\n    creditLeft = animationWidth + 5;\n  }\n  if (timelineExists && window.getComputedStyle(this._timeline.container).visibility !== \"hidden\") {\n    const fullscreenButton = this._fullscreenButton;\n    const vrButton = this._vrButton;\n    const timelineContainer = timeline.container;\n    const timelineStyle = timelineContainer.style;\n    creditBottom = timelineContainer.clientHeight + 3;\n    timelineStyle.left = `${animationWidth}px`;\n    let pixels = 0;\n    if (defined(fullscreenButton)) {\n      pixels += fullscreenButton.container.clientWidth;\n    }\n    if (defined(vrButton)) {\n      pixels += vrButton.container.clientWidth;\n    }\n    timelineStyle.right = `${pixels}px`;\n    timeline.resize();\n  }\n  if (!timelineExists && defined(this._fullscreenButton)) {\n    // don't let long credits (like the default ion token) go behind the fullscreen button\n    creditRight = this._fullscreenButton.container.clientWidth;\n  }\n  this._bottomContainer.style.left = `${creditLeft}px`;\n  this._bottomContainer.style.bottom = `${creditBottom}px`;\n  this._bottomContainer.style.right = `${creditRight}px`;\n  this._lastWidth = width;\n  this._lastHeight = height;\n};\n\n/**\n * This forces the widget to re-think its layout, including\n * widget sizes and credit placement.\n */\nViewer.prototype.forceResize = function () {\n  this._lastWidth = 0;\n  this.resize();\n};\n\n/**\n * Renders the scene.  This function is called automatically\n * unless <code>useDefaultRenderLoop</code> is set to false;\n */\nViewer.prototype.render = function () {\n  this._cesiumWidget.render();\n};\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nViewer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the widget.  Should be called if permanently\n * removing the widget from layout.\n */\nViewer.prototype.destroy = function () {\n  if (defined(this.screenSpaceEventHandler) && !this.screenSpaceEventHandler.isDestroyed()) {\n    this.screenSpaceEventHandler.removeInputAction(ScreenSpaceEventType.LEFT_CLICK);\n    this.screenSpaceEventHandler.removeInputAction(ScreenSpaceEventType.LEFT_DOUBLE_CLICK);\n  }\n  this._container.removeChild(this._element);\n  this._element.removeChild(this._toolbar);\n  this._eventHelper.removeAll();\n  if (defined(this._geocoder)) {\n    this._geocoder = this._geocoder.destroy();\n  }\n  if (defined(this._homeButton)) {\n    this._homeButton = this._homeButton.destroy();\n  }\n  if (defined(this._sceneModePicker)) {\n    this._sceneModePicker = this._sceneModePicker.destroy();\n  }\n  if (defined(this._projectionPicker)) {\n    this._projectionPicker = this._projectionPicker.destroy();\n  }\n  if (defined(this._baseLayerPicker)) {\n    this._baseLayerPicker = this._baseLayerPicker.destroy();\n  }\n  if (defined(this._animation)) {\n    this._element.removeChild(this._animation.container);\n    this._animation = this._animation.destroy();\n  }\n  if (defined(this._timeline)) {\n    this._timeline.removeEventListener(\"settime\", onTimelineScrubfunction, false);\n    this._element.removeChild(this._timeline.container);\n    this._timeline = this._timeline.destroy();\n  }\n  if (defined(this._fullscreenButton)) {\n    this._fullscreenSubscription.dispose();\n    this._element.removeChild(this._fullscreenButton.container);\n    this._fullscreenButton = this._fullscreenButton.destroy();\n  }\n  if (defined(this._vrButton)) {\n    this._vrSubscription.dispose();\n    this._vrModeSubscription.dispose();\n    this._element.removeChild(this._vrButton.container);\n    this._vrButton = this._vrButton.destroy();\n  }\n  if (defined(this._infoBox)) {\n    this._element.removeChild(this._infoBox.container);\n    this._infoBox = this._infoBox.destroy();\n  }\n  if (defined(this._selectionIndicator)) {\n    this._element.removeChild(this._selectionIndicator.container);\n    this._selectionIndicator = this._selectionIndicator.destroy();\n  }\n  if (this._destroyClockViewModel) {\n    this._clockViewModel = this._clockViewModel.destroy();\n  }\n  this._cesiumWidget = this._cesiumWidget.destroy();\n  return destroyObject(this);\n};\n\n/**\n * @private\n */\nViewer.prototype._dataSourceAdded = function (dataSourceCollection, dataSource) {\n  const entityCollection = dataSource.entities;\n  entityCollection.collectionChanged.addEventListener(Viewer.prototype._onEntityCollectionChanged, this);\n};\n\n/**\n * @private\n */\nViewer.prototype._dataSourceRemoved = function (dataSourceCollection, dataSource) {\n  const entityCollection = dataSource.entities;\n  entityCollection.collectionChanged.removeEventListener(Viewer.prototype._onEntityCollectionChanged, this);\n  if (defined(this.selectedEntity)) {\n    if (entityCollection.getById(this.selectedEntity.id) === this.selectedEntity) {\n      this.selectedEntity = undefined;\n    }\n  }\n};\n\n/**\n * @private\n */\nViewer.prototype._updateCanAnimate = function (that) {\n  return function (isUpdated) {\n    that._clockViewModel.canAnimate = isUpdated;\n  };\n};\n\n/**\n * @private\n */\nViewer.prototype._onTick = function (clock) {\n  const time = clock.currentTime;\n  let position;\n  let enableCamera = false;\n  const selectedEntity = this.selectedEntity;\n  const showSelection = defined(selectedEntity) && this._enableInfoOrSelection;\n  if (showSelection && selectedEntity.isShowing && selectedEntity.isAvailable(time)) {\n    const state = this._cesiumWidget.dataSourceDisplay.getBoundingSphere(selectedEntity, true, boundingSphereScratch);\n    if (state !== BoundingSphereState.FAILED) {\n      position = boundingSphereScratch.center;\n    } else if (defined(selectedEntity.position)) {\n      position = selectedEntity.position.getValue(time, position);\n    }\n    enableCamera = defined(position);\n  }\n  const selectionIndicatorViewModel = defined(this._selectionIndicator) ? this._selectionIndicator.viewModel : undefined;\n  if (defined(selectionIndicatorViewModel)) {\n    selectionIndicatorViewModel.position = Cartesian3.clone(position, selectionIndicatorViewModel.position);\n    selectionIndicatorViewModel.showSelection = showSelection && enableCamera;\n    selectionIndicatorViewModel.update();\n  }\n  const infoBoxViewModel = defined(this._infoBox) ? this._infoBox.viewModel : undefined;\n  if (defined(infoBoxViewModel)) {\n    infoBoxViewModel.showInfo = showSelection;\n    infoBoxViewModel.enableCamera = enableCamera;\n    infoBoxViewModel.isCameraTracking = this.trackedEntity === this.selectedEntity;\n    if (showSelection) {\n      infoBoxViewModel.titleText = defaultValue(selectedEntity.name, selectedEntity.id);\n      infoBoxViewModel.description = Property.getValueOrDefault(selectedEntity.description, time, \"\");\n    } else {\n      infoBoxViewModel.titleText = \"\";\n      infoBoxViewModel.description = \"\";\n    }\n  }\n};\n\n/**\n * @private\n */\nViewer.prototype._onEntityCollectionChanged = function (collection, added, removed) {\n  const length = removed.length;\n  for (let i = 0; i < length; i++) {\n    const removedObject = removed[i];\n    if (this.selectedEntity === removedObject) {\n      this.selectedEntity = undefined;\n    }\n  }\n};\n\n/**\n * @private\n */\nViewer.prototype._onInfoBoxCameraClicked = function (infoBoxViewModel) {\n  if (infoBoxViewModel.isCameraTracking && this.trackedEntity === this.selectedEntity) {\n    this.trackedEntity = undefined;\n  } else {\n    const selectedEntity = this.selectedEntity;\n    const position = selectedEntity.position;\n    if (defined(position)) {\n      this.trackedEntity = this.selectedEntity;\n    } else {\n      this.zoomTo(this.selectedEntity);\n    }\n  }\n};\n\n/**\n * @private\n */\nViewer.prototype._clearTrackedObject = function () {\n  this.trackedEntity = undefined;\n};\n\n/**\n * @private\n */\nViewer.prototype._onInfoBoxClockClicked = function (infoBoxViewModel) {\n  this.selectedEntity = undefined;\n};\n\n/**\n * @private\n */\nViewer.prototype._clearObjects = function () {\n  this.trackedEntity = undefined;\n  this.selectedEntity = undefined;\n};\n\n/**\n * @private\n */\nViewer.prototype._onDataSourceChanged = function (dataSource) {\n  if (this.clockTrackedDataSource === dataSource) {\n    linkTimelineToDataSourceClock(this.timeline, dataSource);\n  }\n};\n\n/**\n * @private\n */\nViewer.prototype._onDataSourceAdded = function (dataSourceCollection, dataSource) {\n  if (this._cesiumWidget._automaticallyTrackDataSourceClocks && dataSource === this.clockTrackedDataSource) {\n    // When data sources are added to the CesiumWidget they may be automatically\n    // tracked in that class but we also need to update the timeline in this class\n    linkTimelineToDataSourceClock(this._timeline, dataSource);\n  }\n  const id = dataSource.entities.id;\n  const removalFunc = this._eventHelper.add(dataSource.changedEvent, Viewer.prototype._onDataSourceChanged, this);\n  this._dataSourceChangedListeners[id] = removalFunc;\n};\n\n/**\n * @private\n */\nViewer.prototype._onDataSourceRemoved = function (dataSourceCollection, dataSource) {\n  const id = dataSource.entities.id;\n  this._dataSourceChangedListeners[id]();\n  this._dataSourceChangedListeners[id] = undefined;\n};\n\n/**\n * Asynchronously sets the camera to view the provided entity, entities, or data source.\n * If the data source is still in the process of loading or the visualization is otherwise still loading,\n * this method waits for the data to be ready before performing the zoom.\n *\n * <p>The offset is heading/pitch/range in the local east-north-up reference frame centered at the center of the bounding sphere.\n * The heading and the pitch angles are defined in the local east-north-up reference frame.\n * The heading is the angle from y axis and increasing towards the x axis. Pitch is the rotation from the xy-plane. Positive pitch\n * angles are above the plane. Negative pitch angles are below the plane. The range is the distance from the center. If the range is\n * zero, a range will be computed such that the whole bounding sphere is visible.</p>\n *\n * <p>In 2D, there must be a top down view. The camera will be placed above the target looking down. The height above the\n * target will be the range. The heading will be determined from the offset. If the heading cannot be\n * determined from the offset, the heading will be north.</p>\n *\n * @param {Entity|Entity[]|EntityCollection|DataSource|ImageryLayer|Cesium3DTileset|TimeDynamicPointCloud|Promise<Entity|Entity[]|EntityCollection|DataSource|ImageryLayer|Cesium3DTileset|TimeDynamicPointCloud|VoxelPrimitive>} target The entity, array of entities, entity collection, data source, Cesium3DTileset, point cloud, or imagery layer to view. You can also pass a promise that resolves to one of the previously mentioned types.\n * @param {HeadingPitchRange} [offset] The offset from the center of the entity in the local east-north-up reference frame.\n * @returns {Promise<boolean>} A Promise that resolves to true if the zoom was successful or false if the target is not currently visualized in the scene or the zoom was cancelled.\n */\nViewer.prototype.zoomTo = function (target, offset) {\n  return this._cesiumWidget.zoomTo(target, offset);\n};\n\n/**\n * Flies the camera to the provided entity, entities, or data source.\n * If the data source is still in the process of loading or the visualization is otherwise still loading,\n * this method waits for the data to be ready before performing the flight.\n *\n * <p>The offset is heading/pitch/range in the local east-north-up reference frame centered at the center of the bounding sphere.\n * The heading and the pitch angles are defined in the local east-north-up reference frame.\n * The heading is the angle from y axis and increasing towards the x axis. Pitch is the rotation from the xy-plane. Positive pitch\n * angles are above the plane. Negative pitch angles are below the plane. The range is the distance from the center. If the range is\n * zero, a range will be computed such that the whole bounding sphere is visible.</p>\n *\n * <p>In 2D, there must be a top down view. The camera will be placed above the target looking down. The height above the\n * target will be the range. The heading will be determined from the offset. If the heading cannot be\n * determined from the offset, the heading will be north.</p>\n *\n * @param {Entity|Entity[]|EntityCollection|DataSource|ImageryLayer|Cesium3DTileset|TimeDynamicPointCloud|Promise<Entity|Entity[]|EntityCollection|DataSource|ImageryLayer|Cesium3DTileset|TimeDynamicPointCloud|VoxelPrimitive>} target The entity, array of entities, entity collection, data source, Cesium3DTileset, point cloud, or imagery layer to view. You can also pass a promise that resolves to one of the previously mentioned types.\n * @param {object} [options] Object with the following properties:\n * @param {number} [options.duration=3.0] The duration of the flight in seconds.\n * @param {number} [options.maximumHeight] The maximum height at the peak of the flight.\n * @param {HeadingPitchRange} [options.offset] The offset from the target in the local east-north-up reference frame centered at the target.\n * @returns {Promise<boolean>} A Promise that resolves to true if the flight was successful or false if the target is not currently visualized in the scene or the flight was cancelled. //TODO: Cleanup entity mentions\n */\nViewer.prototype.flyTo = function (target, options) {\n  return this._cesiumWidget.flyTo(target, options);\n};\n\n/**\n * A function that augments a Viewer instance with additional functionality.\n * @callback Viewer.ViewerMixin\n * @param {Viewer} viewer The viewer instance.\n * @param {object} options Options object to be passed to the mixin function.\n *\n * @see Viewer#extend\n */\nexport default Viewer;","map":{"version":3,"names":["BoundingSphere","BoundingSphereState","Cartesian3","CesiumWidget","Cesium3DTileFeature","Clock","ConstantPositionProperty","defaultValue","defined","destroyObject","DeveloperError","Entity","Event","EventHelper","getElement","JulianDate","Math","CesiumMath","Property","ScreenSpaceEventType","IonGeocoderService","Animation","AnimationViewModel","BaseLayerPicker","createDefaultImageryProviderViewModels","createDefaultTerrainProviderViewModels","ClockViewModel","FullscreenButton","Geocoder","HomeButton","InfoBox","NavigationHelpButton","ProjectionPicker","SceneModePicker","SelectionIndicator","subscribeAndEvaluate","Timeline","VRButton","boundingSphereScratch","onTimelineScrubfunction","e","clock","currentTime","timeJulian","shouldAnimate","getCesium3DTileFeatureDescription","feature","propertyIds","getPropertyIds","html","forEach","propertyId","value","getProperty","length","getCesium3DTileFeatureName","i","possibleIds","test","item","pickEntity","viewer","picked","scene","pick","position","id","primitive","name","description","globe","pickImageryLayerFeature","scratchStopTime","linkTimelineToDataSourceClock","timeline","dataSource","dataSourceClock","startTime","stopTime","equals","addSeconds","EPSILON2","updateFromClock","zoomTo","cartesian3Scratch","windowPosition","pickRay","camera","getPickRay","imageryLayerFeaturePromise","imageryLayers","pickImageryLayerFeatures","loadingMessage","then","features","selectedEntity","createNoFeaturesEntity","entity","ecfPosition","ellipsoid","cartographicToCartesian","enableVRUI","enabled","geocoder","_geocoder","homeButton","_homeButton","sceneModePicker","_sceneModePicker","projectionPicker","_projectionPicker","baseLayerPicker","_baseLayerPicker","animation","_animation","_timeline","fullscreenButton","_fullscreenButton","infoBox","_infoBox","selectionIndicator","_selectionIndicator","visibility","container","style","viewModel","isFullscreenEnabled","_container","right","clientWidth","_vrButton","forceResize","Viewer","options","EMPTY_OBJECT","baseLayer","createBaseLayerPicker","selectedImageryProviderViewModel","selectedTerrainProviderViewModel","that","viewerContainer","document","createElement","className","appendChild","cesiumWidgetContainer","bottomContainer","scene3DOnly","clockViewModel","destroyClockViewModel","cesiumWidget","imageryProvider","undefined","skyBox","skyAtmosphere","sceneMode","mapProjection","orderIndependentTranslucency","automaticallyTrackDataSourceClocks","contextOptions","useDefaultRenderLoop","targetFrameRate","showRenderLoopErrors","useBrowserRecommendedResolution","creditContainer","creditViewport","dataSources","shadows","terrainShadows","mapMode2D","blurActiveElementOnCanvasFocus","requestRenderMode","maximumRenderTimeChange","depthPlaneEllipsoidOffset","msaaSamples","eventHelper","add","onTick","prototype","_onTick","selectionIndicatorContainer","infoBoxContainer","infoBoxViewModel","cameraClicked","_onInfoBoxCameraClicked","closeClicked","_onInfoBoxClockClicked","toolbar","geocoderContainer","geocoderService","geocodeProviderType","Array","isArray","geocoderServices","search","beforeExecute","_clearObjects","command","afterExecute","searchText","isSearchInProgress","_clearTrackedObject","baseLayerPickerDropDown","imageryProviderViewModels","terrainProviderViewModels","elements","getElementsByClassName","selectedImagery","removeAll","terrainProvider","selectedTerrain","terrain","depthTestAgainstTerrain","setTerrain","navigationHelpButton","showNavHelp","window","localStorage","hasSeenNavHelp","getItem","Boolean","setItem","instructionsInitiallyVisible","navigationInstructionsInitiallyVisible","animationContainer","timelineContainer","addEventListener","fullscreenSubscription","fullscreenContainer","fullscreenElement","display","resize","vrButton","vrSubscription","vrModeSubscription","vrContainer","fullScreenElement","isVREnabled","isVRMode","_baseLayerPickerDropDown","_fullscreenSubscription","_vrSubscription","_vrModeSubscription","_dataSourceChangedListeners","_bottomContainer","_element","_cesiumWidget","_clockViewModel","_destroyClockViewModel","_toolbar","_navigationHelpButton","_eventHelper","_lastWidth","_lastHeight","_enableInfoOrSelection","_selectedEntity","_selectedEntityChanged","dataSourceCollection","dataSourceDisplay","dataSourceAdded","_onDataSourceAdded","dataSourceRemoved","_onDataSourceRemoved","postUpdate","dataSourceLength","_dataSourceAdded","get","defaultDataSource","_dataSourceRemoved","pickAndTrackObject","getValueOrUndefined","trackedEntity","pickAndSelectObject","screenSpaceEventHandler","setInputAction","LEFT_CLICK","LEFT_DOUBLE_CLICK","_canAnimateUpdateCallback","_updateCanAnimate","Object","defineProperties","creditDisplay","entities","canvas","shadowMap","set","_scene","postProcessStages","resolutionScale","allowDataSourcesToSuspendAnimation","selectionIndicatorViewModel","animateAppear","animateDepart","raiseEvent","selectedEntityChanged","trackedEntityChanged","clockTrackedDataSource","extend","mixin","width","height","clientHeight","animationExists","timelineExists","panelMaxHeight","maxHeight","geocoderSuggestions","searchSuggestionsContainer","animationWidth","creditLeft","creditBottom","creditRight","getComputedStyle","lastWidth","timelineStyle","left","pixels","bottom","render","isDestroyed","destroy","removeInputAction","removeChild","removeEventListener","dispose","entityCollection","collectionChanged","_onEntityCollectionChanged","getById","isUpdated","canAnimate","time","enableCamera","showSelection","isShowing","isAvailable","state","getBoundingSphere","FAILED","center","getValue","clone","update","showInfo","isCameraTracking","titleText","getValueOrDefault","collection","added","removed","removedObject","_onDataSourceChanged","_automaticallyTrackDataSourceClocks","removalFunc","changedEvent","target","offset","flyTo"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/Viewer/Viewer.js"],"sourcesContent":["import {\n  BoundingSphere,\n  BoundingSphereState,\n  Cartesian3,\n  CesiumWidget,\n  Cesium3DTileFeature,\n  Clock,\n  ConstantPositionProperty,\n  defaultValue,\n  defined,\n  destroyObject,\n  DeveloperError,\n  Entity,\n  Event,\n  EventHelper,\n  getElement,\n  JulianDate,\n  Math as CesiumMath,\n  Property,\n  ScreenSpaceEventType,\n  IonGeocoderService,\n} from \"@cesium/engine\";\nimport Animation from \"../Animation/Animation.js\";\nimport AnimationViewModel from \"../Animation/AnimationViewModel.js\";\nimport BaseLayerPicker from \"../BaseLayerPicker/BaseLayerPicker.js\";\nimport createDefaultImageryProviderViewModels from \"../BaseLayerPicker/createDefaultImageryProviderViewModels.js\";\nimport createDefaultTerrainProviderViewModels from \"../BaseLayerPicker/createDefaultTerrainProviderViewModels.js\";\nimport ClockViewModel from \"../ClockViewModel.js\";\nimport FullscreenButton from \"../FullscreenButton/FullscreenButton.js\";\nimport Geocoder from \"../Geocoder/Geocoder.js\";\nimport HomeButton from \"../HomeButton/HomeButton.js\";\nimport InfoBox from \"../InfoBox/InfoBox.js\";\nimport NavigationHelpButton from \"../NavigationHelpButton/NavigationHelpButton.js\";\nimport ProjectionPicker from \"../ProjectionPicker/ProjectionPicker.js\";\nimport SceneModePicker from \"../SceneModePicker/SceneModePicker.js\";\nimport SelectionIndicator from \"../SelectionIndicator/SelectionIndicator.js\";\nimport subscribeAndEvaluate from \"../subscribeAndEvaluate.js\";\nimport Timeline from \"../Timeline/Timeline.js\";\nimport VRButton from \"../VRButton/VRButton.js\";\n\nconst boundingSphereScratch = new BoundingSphere();\n\nfunction onTimelineScrubfunction(e) {\n  const clock = e.clock;\n  clock.currentTime = e.timeJulian;\n  clock.shouldAnimate = false;\n}\n\nfunction getCesium3DTileFeatureDescription(feature) {\n  const propertyIds = feature.getPropertyIds();\n\n  let html = \"\";\n  propertyIds.forEach(function (propertyId) {\n    const value = feature.getProperty(propertyId);\n    if (defined(value)) {\n      html += `<tr><th>${propertyId}</th><td>${value}</td></tr>`;\n    }\n  });\n\n  if (html.length > 0) {\n    html = `<table class=\"cesium-infoBox-defaultTable\"><tbody>${html}</tbody></table>`;\n  }\n\n  return html;\n}\n\nfunction getCesium3DTileFeatureName(feature) {\n  // We need to iterate all property IDs to find potential\n  // candidates, but since we prefer some property IDs\n  // over others, we store them in an indexed array\n  // and then use the first defined element in the array\n  // as the preferred choice.\n\n  let i;\n  const possibleIds = [];\n  const propertyIds = feature.getPropertyIds();\n  for (i = 0; i < propertyIds.length; i++) {\n    const propertyId = propertyIds[i];\n    if (/^name$/i.test(propertyId)) {\n      possibleIds[0] = feature.getProperty(propertyId);\n    } else if (/name/i.test(propertyId)) {\n      possibleIds[1] = feature.getProperty(propertyId);\n    } else if (/^title$/i.test(propertyId)) {\n      possibleIds[2] = feature.getProperty(propertyId);\n    } else if (/^(id|identifier)$/i.test(propertyId)) {\n      possibleIds[3] = feature.getProperty(propertyId);\n    } else if (/element/i.test(propertyId)) {\n      possibleIds[4] = feature.getProperty(propertyId);\n    } else if (/(id|identifier)$/i.test(propertyId)) {\n      possibleIds[5] = feature.getProperty(propertyId);\n    }\n  }\n\n  const length = possibleIds.length;\n  for (i = 0; i < length; i++) {\n    const item = possibleIds[i];\n    if (defined(item) && item !== \"\") {\n      return item;\n    }\n  }\n  return \"Unnamed Feature\";\n}\n\nfunction pickEntity(viewer, e) {\n  const picked = viewer.scene.pick(e.position);\n  if (defined(picked)) {\n    const id = defaultValue(picked.id, picked.primitive.id);\n    if (id instanceof Entity) {\n      return id;\n    }\n\n    if (picked instanceof Cesium3DTileFeature) {\n      return new Entity({\n        name: getCesium3DTileFeatureName(picked),\n        description: getCesium3DTileFeatureDescription(picked),\n        feature: picked,\n      });\n    }\n  }\n\n  // No regular entity picked.  Try picking features from imagery layers.\n  if (defined(viewer.scene.globe)) {\n    return pickImageryLayerFeature(viewer, e.position);\n  }\n}\n\nconst scratchStopTime = new JulianDate();\n\nfunction linkTimelineToDataSourceClock(timeline, dataSource) {\n  if (defined(dataSource)) {\n    const dataSourceClock = dataSource.clock;\n    if (defined(dataSourceClock) && defined(timeline)) {\n      const startTime = dataSourceClock.startTime;\n      let stopTime = dataSourceClock.stopTime;\n      // When the start and stop times are equal, set the timeline to the shortest interval\n      // starting at the start time. This prevents an invalid timeline configuration.\n      if (JulianDate.equals(startTime, stopTime)) {\n        stopTime = JulianDate.addSeconds(\n          startTime,\n          CesiumMath.EPSILON2,\n          scratchStopTime,\n        );\n      }\n      timeline.updateFromClock();\n      timeline.zoomTo(startTime, stopTime);\n    }\n  }\n}\n\nconst cartesian3Scratch = new Cartesian3();\n\nfunction pickImageryLayerFeature(viewer, windowPosition) {\n  const scene = viewer.scene;\n  const pickRay = scene.camera.getPickRay(windowPosition);\n  const imageryLayerFeaturePromise =\n    scene.imageryLayers.pickImageryLayerFeatures(pickRay, scene);\n  if (!defined(imageryLayerFeaturePromise)) {\n    return;\n  }\n\n  // Imagery layer feature picking is asynchronous, so put up a message while loading.\n  const loadingMessage = new Entity({\n    id: \"Loading...\",\n    description: \"Loading feature information...\",\n  });\n\n  imageryLayerFeaturePromise.then(\n    function (features) {\n      // Has this async pick been superseded by a later one?\n      if (viewer.selectedEntity !== loadingMessage) {\n        return;\n      }\n\n      if (!defined(features) || features.length === 0) {\n        viewer.selectedEntity = createNoFeaturesEntity();\n        return;\n      }\n\n      // Select the first feature.\n      const feature = features[0];\n\n      const entity = new Entity({\n        id: feature.name,\n        description: feature.description,\n      });\n\n      if (defined(feature.position)) {\n        const ecfPosition = viewer.scene.ellipsoid.cartographicToCartesian(\n          feature.position,\n          cartesian3Scratch,\n        );\n        entity.position = new ConstantPositionProperty(ecfPosition);\n      }\n\n      viewer.selectedEntity = entity;\n    },\n    function () {\n      // Has this async pick been superseded by a later one?\n      if (viewer.selectedEntity !== loadingMessage) {\n        return;\n      }\n      viewer.selectedEntity = createNoFeaturesEntity();\n    },\n  );\n\n  return loadingMessage;\n}\n\nfunction createNoFeaturesEntity() {\n  return new Entity({\n    id: \"None\",\n    description: \"No features found.\",\n  });\n}\n\nfunction enableVRUI(viewer, enabled) {\n  const geocoder = viewer._geocoder;\n  const homeButton = viewer._homeButton;\n  const sceneModePicker = viewer._sceneModePicker;\n  const projectionPicker = viewer._projectionPicker;\n  const baseLayerPicker = viewer._baseLayerPicker;\n  const animation = viewer._animation;\n  const timeline = viewer._timeline;\n  const fullscreenButton = viewer._fullscreenButton;\n  const infoBox = viewer._infoBox;\n  const selectionIndicator = viewer._selectionIndicator;\n\n  const visibility = enabled ? \"hidden\" : \"visible\";\n\n  if (defined(geocoder)) {\n    geocoder.container.style.visibility = visibility;\n  }\n  if (defined(homeButton)) {\n    homeButton.container.style.visibility = visibility;\n  }\n  if (defined(sceneModePicker)) {\n    sceneModePicker.container.style.visibility = visibility;\n  }\n  if (defined(projectionPicker)) {\n    projectionPicker.container.style.visibility = visibility;\n  }\n  if (defined(baseLayerPicker)) {\n    baseLayerPicker.container.style.visibility = visibility;\n  }\n  if (defined(animation)) {\n    animation.container.style.visibility = visibility;\n  }\n  if (defined(timeline)) {\n    timeline.container.style.visibility = visibility;\n  }\n  if (\n    defined(fullscreenButton) &&\n    fullscreenButton.viewModel.isFullscreenEnabled\n  ) {\n    fullscreenButton.container.style.visibility = visibility;\n  }\n  if (defined(infoBox)) {\n    infoBox.container.style.visibility = visibility;\n  }\n  if (defined(selectionIndicator)) {\n    selectionIndicator.container.style.visibility = visibility;\n  }\n\n  if (viewer._container) {\n    const right =\n      enabled || !defined(fullscreenButton)\n        ? 0\n        : fullscreenButton.container.clientWidth;\n    viewer._vrButton.container.style.right = `${right}px`;\n\n    viewer.forceResize();\n  }\n}\n\n/**\n * @typedef {object} Viewer.ConstructorOptions\n *\n * Initialization options for the Viewer constructor\n *\n * @property {boolean} [animation=true] If set to false, the Animation widget will not be created.\n * @property {boolean} [baseLayerPicker=true] If set to false, the BaseLayerPicker widget will not be created.\n * @property {boolean} [fullscreenButton=true] If set to false, the FullscreenButton widget will not be created.\n * @property {boolean} [vrButton=false] If set to true, the VRButton widget will be created.\n * @property {boolean|IonGeocodeProviderType|GeocoderService[]} [geocoder=IonGeocodeProviderType.DEFAULT] The geocoding service or services to use when searching with the Geocoder widget. If set to false, the Geocoder widget will not be created.\n * @property {boolean} [homeButton=true] If set to false, the HomeButton widget will not be created.\n * @property {boolean} [infoBox=true] If set to false, the InfoBox widget will not be created.\n * @property {boolean} [sceneModePicker=true] If set to false, the SceneModePicker widget will not be created.\n * @property {boolean} [selectionIndicator=true] If set to false, the SelectionIndicator widget will not be created.\n * @property {boolean} [timeline=true] If set to false, the Timeline widget will not be created.\n * @property {boolean} [navigationHelpButton=true] If set to false, the navigation help button will not be created.\n * @property {boolean} [navigationInstructionsInitiallyVisible=true] True if the navigation instructions should initially be visible, or false if the should not be shown until the user explicitly clicks the button.\n * @property {boolean} [scene3DOnly=false] When <code>true</code>, each geometry instance will only be rendered in 3D to save GPU memory.\n * @property {boolean} [shouldAnimate=false] <code>true</code> if the clock should attempt to advance simulation time by default, <code>false</code> otherwise.  This option takes precedence over setting {@link Viewer#clockViewModel}.\n * @property {ClockViewModel} [clockViewModel=new ClockViewModel(clock)] The clock view model to use to control current time.\n * @property {ProviderViewModel} [selectedImageryProviderViewModel] The view model for the current base imagery layer, if not supplied the first available base layer is used.  This value is only valid if `baseLayerPicker` is set to true.\n * @property {ProviderViewModel[]} [imageryProviderViewModels=createDefaultImageryProviderViewModels()] The array of ProviderViewModels to be selectable from the BaseLayerPicker.  This value is only valid if `baseLayerPicker` is set to true.\n * @property {ProviderViewModel} [selectedTerrainProviderViewModel] The view model for the current base terrain layer, if not supplied the first available base layer is used.  This value is only valid if `baseLayerPicker` is set to true.\n * @property {ProviderViewModel[]} [terrainProviderViewModels=createDefaultTerrainProviderViewModels()] The array of ProviderViewModels to be selectable from the BaseLayerPicker.  This value is only valid if `baseLayerPicker` is set to true.\n * @property {ImageryLayer|false} [baseLayer=ImageryLayer.fromWorldImagery()] The bottommost imagery layer applied to the globe. If set to <code>false</code>, no imagery provider will be added. This value is only valid if `baseLayerPicker` is set to false. Cannot be used when `globe` is set to false.\n * @property {Ellipsoid} [ellipsoid = Ellipsoid.default] The default ellipsoid.\n * @property {TerrainProvider} [terrainProvider=new EllipsoidTerrainProvider()] The terrain provider to use\n * @property {Terrain} [terrain] A terrain object which handles asynchronous terrain provider. Can only specify if options.terrainProvider is undefined.\n * @property {SkyBox|false} [skyBox] The skybox used to render the stars. When <code>undefined</code> and the WGS84 ellipsoid used, the default stars are used. If set to <code>false</code>, no skyBox, Sun, or Moon will be added.\n * @property {SkyAtmosphere|false} [skyAtmosphere] Blue sky, and the glow around the Earth's limb. Enabled when the WGS84 ellipsoid used. Set to <code>false</code> to turn it off.\n * @property {Element|string} [fullscreenElement=document.body] The element or id to be placed into fullscreen mode when the full screen button is pressed.\n * @property {boolean} [useDefaultRenderLoop=true] True if this widget should control the render loop, false otherwise.\n * @property {number} [targetFrameRate] The target frame rate when using the default render loop.\n * @property {boolean} [showRenderLoopErrors=true] If true, this widget will automatically display an HTML panel to the user containing the error, if a render loop error occurs.\n * @property {boolean} [useBrowserRecommendedResolution=true] If true, render at the browser's recommended resolution and ignore <code>window.devicePixelRatio</code>.\n * @property {boolean} [automaticallyTrackDataSourceClocks=true] If true, this widget will automatically track the clock settings of newly added DataSources, updating if the DataSource's clock changes.  Set this to false if you want to configure the clock independently.\n * @property {ContextOptions} [contextOptions] Context and WebGL creation properties passed to {@link Scene}.\n * @property {SceneMode} [sceneMode=SceneMode.SCENE3D] The initial scene mode.\n * @property {MapProjection} [mapProjection=new GeographicProjection(options.ellipsoid)] The map projection to use in 2D and Columbus View modes.\n * @property {Globe|false} [globe=new Globe(options.ellipsoid)] The globe to use in the scene.  If set to <code>false</code>, no globe will be added and the sky atmosphere will be hidden by default.\n * @property {boolean} [orderIndependentTranslucency=true] If true and the configuration supports it, use order independent translucency.\n * @property {Element|string} [creditContainer] The DOM element or ID that will contain the {@link CreditDisplay}.  If not specified, the credits are added to the bottom of the widget itself.\n * @property {Element|string} [creditViewport] The DOM element or ID that will contain the credit pop up created by the {@link CreditDisplay}.  If not specified, it will appear over the widget itself.\n * @property {DataSourceCollection} [dataSources=new DataSourceCollection()] The collection of data sources visualized by the widget.  If this parameter is provided,\n *                               the instance is assumed to be owned by the caller and will not be destroyed when the viewer is destroyed.\n * @property {boolean} [shadows=false] Determines if shadows are cast by light sources.\n * @property {ShadowMode} [terrainShadows=ShadowMode.RECEIVE_ONLY] Determines if the terrain casts or receives shadows from light sources.\n * @property {MapMode2D} [mapMode2D=MapMode2D.INFINITE_SCROLL] Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n * @property {boolean} [projectionPicker=false] If set to true, the ProjectionPicker widget will be created.\n * @property {boolean} [blurActiveElementOnCanvasFocus=true] If true, the active element will blur when the viewer's canvas is clicked. Setting this to false is useful for cases when the canvas is clicked only for retrieving position or an entity data without actually meaning to set the canvas to be the active element.\n * @property {boolean} [requestRenderMode=false] If true, rendering a frame will only occur when needed as determined by changes within the scene. Enabling reduces the CPU/GPU usage of your application and uses less battery on mobile, but requires using {@link Scene#requestRender} to render a new frame explicitly in this mode. This will be necessary in many cases after making changes to the scene in other parts of the API. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @property {number} [maximumRenderTimeChange=0.0] If requestRenderMode is true, this value defines the maximum change in simulation time allowed before a render is requested. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @property {number} [depthPlaneEllipsoidOffset=0.0] Adjust the DepthPlane to address rendering artefacts below ellipsoid zero elevation.\n * @property {number} [msaaSamples=4] If provided, this value controls the rate of multisample antialiasing. Typical multisampling rates are 2, 4, and sometimes 8 samples per pixel. Higher sampling rates of MSAA may impact performance in exchange for improved visual quality. This value only applies to WebGL2 contexts that support multisample render targets. Set to 1 to disable MSAA.\n */\n\n/**\n * A base widget for building applications.  It composites all of the standard Cesium widgets into one reusable package.\n * The widget can always be extended by using mixins, which add functionality useful for a variety of applications.\n *\n * @alias Viewer\n * @constructor\n *\n * @param {Element|string} container The DOM element or ID that will contain the widget.\n * @param {Viewer.ConstructorOptions} [options] Object describing initialization options\n *\n * @exception {DeveloperError} Element with id \"container\" does not exist in the document.\n * @exception {DeveloperError} options.selectedImageryProviderViewModel is not available when not using the BaseLayerPicker widget, specify options.baseLayer instead.\n * @exception {DeveloperError} options.selectedTerrainProviderViewModel is not available when not using the BaseLayerPicker widget, specify options.terrainProvider instead.\n *\n * @see Animation\n * @see BaseLayerPicker\n * @see CesiumWidget\n * @see FullscreenButton\n * @see HomeButton\n * @see SceneModePicker\n * @see Timeline\n * @see viewerDragDropMixin\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Hello%20World.html|Cesium Sandcastle Hello World Demo}\n *\n * @example\n * // Initialize the viewer widget with several custom options and mixins.\n * try {\n *   const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *     // Start in Columbus Viewer\n *     sceneMode: Cesium.SceneMode.COLUMBUS_VIEW,\n *     // Use Cesium World Terrain\n *     terrain: Cesium.Terrain.fromWorldTerrain(),\n *     // Hide the base layer picker\n *     baseLayerPicker: false,\n *     // Use OpenStreetMaps\n *     baseLayer: new Cesium.ImageryLayer(new Cesium.OpenStreetMapImageryProvider({\n *       url: \"https://tile.openstreetmap.org/\"\n *     })),\n *     skyBox: new Cesium.SkyBox({\n *       sources: {\n *         positiveX: \"stars/TychoSkymapII.t3_08192x04096_80_px.jpg\",\n *         negativeX: \"stars/TychoSkymapII.t3_08192x04096_80_mx.jpg\",\n *         positiveY: \"stars/TychoSkymapII.t3_08192x04096_80_py.jpg\",\n *         negativeY: \"stars/TychoSkymapII.t3_08192x04096_80_my.jpg\",\n *         positiveZ: \"stars/TychoSkymapII.t3_08192x04096_80_pz.jpg\",\n *         negativeZ: \"stars/TychoSkymapII.t3_08192x04096_80_mz.jpg\"\n *       }\n *     }),\n *     // Show Columbus View map with Web Mercator projection\n *     mapProjection: new Cesium.WebMercatorProjection()\n *   });\n * } catch (error) {\n *   console.log(error);\n * }\n *\n * // Add basic drag and drop functionality\n * viewer.extend(Cesium.viewerDragDropMixin);\n *\n * // Show a pop-up alert if we encounter an error when processing a dropped file\n * viewer.dropError.addEventListener(function(dropHandler, name, error) {\n *   console.log(error);\n *   window.alert(error);\n * });\n */\nfunction Viewer(container, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required.\");\n  }\n  //>>includeEnd('debug');\n\n  container = getElement(container);\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    options.globe === false &&\n    defined(options.baseLayer) &&\n    options.baseLayer !== false\n  ) {\n    throw new DeveloperError(\"Cannot use baseLayer when globe is disabled.\");\n  }\n  //>>includeEnd('debug')\n\n  const createBaseLayerPicker =\n    (!defined(options.globe) || options.globe !== false) &&\n    (!defined(options.baseLayerPicker) || options.baseLayerPicker !== false);\n\n  //>>includeStart('debug', pragmas.debug);\n  // If not using BaseLayerPicker, selectedImageryProviderViewModel is an invalid option\n  if (\n    !createBaseLayerPicker &&\n    defined(options.selectedImageryProviderViewModel)\n  ) {\n    throw new DeveloperError(\n      \"options.selectedImageryProviderViewModel is not available when not using the BaseLayerPicker widget. \\\nEither specify options.baseLayer instead or set options.baseLayerPicker to true.\",\n    );\n  }\n\n  // If not using BaseLayerPicker, selectedTerrainProviderViewModel is an invalid option\n  if (\n    !createBaseLayerPicker &&\n    defined(options.selectedTerrainProviderViewModel)\n  ) {\n    throw new DeveloperError(\n      \"options.selectedTerrainProviderViewModel is not available when not using the BaseLayerPicker widget. \\\nEither specify options.terrainProvider instead or set options.baseLayerPicker to true.\",\n    );\n  }\n  //>>includeEnd('debug')\n\n  const that = this;\n\n  const viewerContainer = document.createElement(\"div\");\n  viewerContainer.className = \"cesium-viewer\";\n  container.appendChild(viewerContainer);\n\n  // Cesium widget container\n  const cesiumWidgetContainer = document.createElement(\"div\");\n  cesiumWidgetContainer.className = \"cesium-viewer-cesiumWidgetContainer\";\n  viewerContainer.appendChild(cesiumWidgetContainer);\n\n  // Bottom container\n  const bottomContainer = document.createElement(\"div\");\n  bottomContainer.className = \"cesium-viewer-bottom\";\n\n  viewerContainer.appendChild(bottomContainer);\n\n  const scene3DOnly = defaultValue(options.scene3DOnly, false);\n\n  let clock;\n  let clockViewModel;\n  let destroyClockViewModel = false;\n  if (defined(options.clockViewModel)) {\n    clockViewModel = options.clockViewModel;\n    clock = clockViewModel.clock;\n  } else {\n    clock = new Clock();\n    clockViewModel = new ClockViewModel(clock);\n    destroyClockViewModel = true;\n  }\n\n  // Cesium widget\n  const cesiumWidget = new CesiumWidget(cesiumWidgetContainer, {\n    baseLayer:\n      (createBaseLayerPicker &&\n        defined(options.selectedImageryProviderViewModel)) ||\n      defined(options.baseLayer) ||\n      defined(options.imageryProvider)\n        ? false\n        : undefined,\n    clock: clock,\n    shouldAnimate: options.shouldAnimate,\n    skyBox: options.skyBox,\n    skyAtmosphere: options.skyAtmosphere,\n    sceneMode: options.sceneMode,\n    ellipsoid: options.ellipsoid,\n    mapProjection: options.mapProjection,\n    globe: options.globe,\n    orderIndependentTranslucency: options.orderIndependentTranslucency,\n    automaticallyTrackDataSourceClocks:\n      options.automaticallyTrackDataSourceClocks,\n    contextOptions: options.contextOptions,\n    useDefaultRenderLoop: options.useDefaultRenderLoop,\n    targetFrameRate: options.targetFrameRate,\n    showRenderLoopErrors: options.showRenderLoopErrors,\n    useBrowserRecommendedResolution: options.useBrowserRecommendedResolution,\n    creditContainer: defined(options.creditContainer)\n      ? options.creditContainer\n      : bottomContainer,\n    creditViewport: options.creditViewport,\n    dataSources: options.dataSources,\n    scene3DOnly: scene3DOnly,\n    shadows: options.shadows,\n    terrainShadows: options.terrainShadows,\n    mapMode2D: options.mapMode2D,\n    blurActiveElementOnCanvasFocus: options.blurActiveElementOnCanvasFocus,\n    requestRenderMode: options.requestRenderMode,\n    maximumRenderTimeChange: options.maximumRenderTimeChange,\n    depthPlaneEllipsoidOffset: options.depthPlaneEllipsoidOffset,\n    msaaSamples: options.msaaSamples,\n  });\n\n  const scene = cesiumWidget.scene;\n\n  const eventHelper = new EventHelper();\n\n  eventHelper.add(clock.onTick, Viewer.prototype._onTick, this);\n\n  // Selection Indicator\n  let selectionIndicator;\n  if (\n    !defined(options.selectionIndicator) ||\n    options.selectionIndicator !== false\n  ) {\n    const selectionIndicatorContainer = document.createElement(\"div\");\n    selectionIndicatorContainer.className =\n      \"cesium-viewer-selectionIndicatorContainer\";\n    viewerContainer.appendChild(selectionIndicatorContainer);\n    selectionIndicator = new SelectionIndicator(\n      selectionIndicatorContainer,\n      scene,\n    );\n  }\n\n  // Info Box\n  let infoBox;\n  if (!defined(options.infoBox) || options.infoBox !== false) {\n    const infoBoxContainer = document.createElement(\"div\");\n    infoBoxContainer.className = \"cesium-viewer-infoBoxContainer\";\n    viewerContainer.appendChild(infoBoxContainer);\n    infoBox = new InfoBox(infoBoxContainer);\n\n    const infoBoxViewModel = infoBox.viewModel;\n    eventHelper.add(\n      infoBoxViewModel.cameraClicked,\n      Viewer.prototype._onInfoBoxCameraClicked,\n      this,\n    );\n    eventHelper.add(\n      infoBoxViewModel.closeClicked,\n      Viewer.prototype._onInfoBoxClockClicked,\n      this,\n    );\n  }\n\n  // Main Toolbar\n  const toolbar = document.createElement(\"div\");\n  toolbar.className = \"cesium-viewer-toolbar\";\n  viewerContainer.appendChild(toolbar);\n\n  // Geocoder\n  let geocoder;\n  if (!defined(options.geocoder) || options.geocoder !== false) {\n    const geocoderContainer = document.createElement(\"div\");\n    geocoderContainer.className = \"cesium-viewer-geocoderContainer\";\n    toolbar.appendChild(geocoderContainer);\n    let geocoderService;\n    if (typeof options.geocoder === \"string\") {\n      geocoderService = [\n        new IonGeocoderService({\n          scene,\n          geocodeProviderType: options.geocoder,\n        }),\n      ];\n    } else if (\n      defined(options.geocoder) &&\n      typeof options.geocoder !== \"boolean\"\n    ) {\n      geocoderService = Array.isArray(options.geocoder)\n        ? options.geocoder\n        : [options.geocoder];\n    }\n    geocoder = new Geocoder({\n      container: geocoderContainer,\n      geocoderServices: geocoderService,\n      scene: scene,\n    });\n    // Subscribe to search so that we can clear the trackedEntity when it is clicked.\n    eventHelper.add(\n      geocoder.viewModel.search.beforeExecute,\n      Viewer.prototype._clearObjects,\n      this,\n    );\n  }\n\n  // HomeButton\n  let homeButton;\n  if (!defined(options.homeButton) || options.homeButton !== false) {\n    homeButton = new HomeButton(toolbar, scene);\n    if (defined(geocoder)) {\n      eventHelper.add(homeButton.viewModel.command.afterExecute, function () {\n        const viewModel = geocoder.viewModel;\n        viewModel.searchText = \"\";\n        if (viewModel.isSearchInProgress) {\n          viewModel.search();\n        }\n      });\n    }\n    // Subscribe to the home button beforeExecute event so that we can clear the trackedEntity.\n    eventHelper.add(\n      homeButton.viewModel.command.beforeExecute,\n      Viewer.prototype._clearTrackedObject,\n      this,\n    );\n  }\n\n  // SceneModePicker\n  // By default, we silently disable the scene mode picker if scene3DOnly is true,\n  // but if sceneModePicker is explicitly set to true, throw an error.\n  //>>includeStart('debug', pragmas.debug);\n  if (options.sceneModePicker === true && scene3DOnly) {\n    throw new DeveloperError(\n      \"options.sceneModePicker is not available when options.scene3DOnly is set to true.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  let sceneModePicker;\n  if (\n    !scene3DOnly &&\n    (!defined(options.sceneModePicker) || options.sceneModePicker !== false)\n  ) {\n    sceneModePicker = new SceneModePicker(toolbar, scene);\n  }\n\n  let projectionPicker;\n  if (options.projectionPicker) {\n    projectionPicker = new ProjectionPicker(toolbar, scene);\n  }\n\n  // BaseLayerPicker\n  let baseLayerPicker;\n  let baseLayerPickerDropDown;\n  if (createBaseLayerPicker) {\n    const imageryProviderViewModels = defaultValue(\n      options.imageryProviderViewModels,\n      createDefaultImageryProviderViewModels(),\n    );\n    const terrainProviderViewModels = defaultValue(\n      options.terrainProviderViewModels,\n      createDefaultTerrainProviderViewModels(),\n    );\n\n    baseLayerPicker = new BaseLayerPicker(toolbar, {\n      globe: scene.globe,\n      imageryProviderViewModels: imageryProviderViewModels,\n      selectedImageryProviderViewModel:\n        options.selectedImageryProviderViewModel,\n      terrainProviderViewModels: terrainProviderViewModels,\n      selectedTerrainProviderViewModel:\n        options.selectedTerrainProviderViewModel,\n    });\n\n    //Grab the dropdown for resize code.\n    const elements = toolbar.getElementsByClassName(\n      \"cesium-baseLayerPicker-dropDown\",\n    );\n    baseLayerPickerDropDown = elements[0];\n  }\n\n  // These need to be set after the BaseLayerPicker is created in order to take effect\n  if (defined(options.baseLayer) && options.baseLayer !== false) {\n    if (createBaseLayerPicker) {\n      baseLayerPicker.viewModel.selectedImagery = undefined;\n    }\n    scene.imageryLayers.removeAll();\n    scene.imageryLayers.add(options.baseLayer);\n  }\n\n  if (defined(options.terrainProvider)) {\n    if (createBaseLayerPicker) {\n      baseLayerPicker.viewModel.selectedTerrain = undefined;\n    }\n    scene.terrainProvider = options.terrainProvider;\n  }\n\n  if (defined(options.terrain)) {\n    //>>includeStart('debug', pragmas.debug);\n    if (defined(options.terrainProvider)) {\n      throw new DeveloperError(\n        \"Specify either options.terrainProvider or options.terrain.\",\n      );\n    }\n    //>>includeEnd('debug')\n\n    if (createBaseLayerPicker) {\n      // Required as this is otherwise set by the baseLayerPicker\n      scene.globe.depthTestAgainstTerrain = true;\n    }\n\n    scene.setTerrain(options.terrain);\n  }\n\n  // Navigation Help Button\n  let navigationHelpButton;\n  if (\n    !defined(options.navigationHelpButton) ||\n    options.navigationHelpButton !== false\n  ) {\n    let showNavHelp = true;\n    try {\n      //window.localStorage is null if disabled in Firefox or undefined in browsers with implementation\n      if (defined(window.localStorage)) {\n        const hasSeenNavHelp = window.localStorage.getItem(\n          \"cesium-hasSeenNavHelp\",\n        );\n        if (defined(hasSeenNavHelp) && Boolean(hasSeenNavHelp)) {\n          showNavHelp = false;\n        } else {\n          window.localStorage.setItem(\"cesium-hasSeenNavHelp\", \"true\");\n        }\n      }\n    } catch (e) {\n      //Accessing window.localStorage throws if disabled in Chrome\n      //window.localStorage.setItem throws if in Safari private browsing mode or in any browser if we are over quota.\n    }\n    navigationHelpButton = new NavigationHelpButton({\n      container: toolbar,\n      instructionsInitiallyVisible: defaultValue(\n        options.navigationInstructionsInitiallyVisible,\n        showNavHelp,\n      ),\n    });\n  }\n\n  // Animation\n  let animation;\n  if (!defined(options.animation) || options.animation !== false) {\n    const animationContainer = document.createElement(\"div\");\n    animationContainer.className = \"cesium-viewer-animationContainer\";\n    viewerContainer.appendChild(animationContainer);\n    animation = new Animation(\n      animationContainer,\n      new AnimationViewModel(clockViewModel),\n    );\n  }\n\n  // Timeline\n  let timeline;\n  if (!defined(options.timeline) || options.timeline !== false) {\n    const timelineContainer = document.createElement(\"div\");\n    timelineContainer.className = \"cesium-viewer-timelineContainer\";\n    viewerContainer.appendChild(timelineContainer);\n    timeline = new Timeline(timelineContainer, clock);\n    timeline.addEventListener(\"settime\", onTimelineScrubfunction, false);\n    timeline.zoomTo(clock.startTime, clock.stopTime);\n  }\n\n  // Fullscreen\n  let fullscreenButton;\n  let fullscreenSubscription;\n  let fullscreenContainer;\n  if (\n    !defined(options.fullscreenButton) ||\n    options.fullscreenButton !== false\n  ) {\n    fullscreenContainer = document.createElement(\"div\");\n    fullscreenContainer.className = \"cesium-viewer-fullscreenContainer\";\n    viewerContainer.appendChild(fullscreenContainer);\n    fullscreenButton = new FullscreenButton(\n      fullscreenContainer,\n      options.fullscreenElement,\n    );\n\n    //Subscribe to fullscreenButton.viewModel.isFullscreenEnabled so\n    //that we can hide/show the button as well as size the timeline.\n    fullscreenSubscription = subscribeAndEvaluate(\n      fullscreenButton.viewModel,\n      \"isFullscreenEnabled\",\n      function (isFullscreenEnabled) {\n        fullscreenContainer.style.display = isFullscreenEnabled\n          ? \"block\"\n          : \"none\";\n        if (defined(timeline)) {\n          timeline.container.style.right = `${fullscreenContainer.clientWidth}px`;\n          timeline.resize();\n        }\n      },\n    );\n  }\n\n  // VR\n  let vrButton;\n  let vrSubscription;\n  let vrModeSubscription;\n  if (options.vrButton) {\n    const vrContainer = document.createElement(\"div\");\n    vrContainer.className = \"cesium-viewer-vrContainer\";\n    viewerContainer.appendChild(vrContainer);\n    vrButton = new VRButton(vrContainer, scene, options.fullScreenElement);\n\n    vrSubscription = subscribeAndEvaluate(\n      vrButton.viewModel,\n      \"isVREnabled\",\n      function (isVREnabled) {\n        vrContainer.style.display = isVREnabled ? \"block\" : \"none\";\n        if (defined(fullscreenButton)) {\n          vrContainer.style.right = `${fullscreenContainer.clientWidth}px`;\n        }\n        if (defined(timeline)) {\n          timeline.container.style.right = `${vrContainer.clientWidth}px`;\n          timeline.resize();\n        }\n      },\n    );\n\n    vrModeSubscription = subscribeAndEvaluate(\n      vrButton.viewModel,\n      \"isVRMode\",\n      function (isVRMode) {\n        enableVRUI(that, isVRMode);\n      },\n    );\n  }\n\n  //Assign all properties to this instance.  No \"this\" assignments should\n  //take place above this line.\n  this._baseLayerPickerDropDown = baseLayerPickerDropDown;\n  this._fullscreenSubscription = fullscreenSubscription;\n  this._vrSubscription = vrSubscription;\n  this._vrModeSubscription = vrModeSubscription;\n  this._dataSourceChangedListeners = {};\n  this._container = container;\n  this._bottomContainer = bottomContainer;\n  this._element = viewerContainer;\n  this._cesiumWidget = cesiumWidget;\n  this._selectionIndicator = selectionIndicator;\n  this._infoBox = infoBox;\n  this._clockViewModel = clockViewModel;\n  this._destroyClockViewModel = destroyClockViewModel;\n  this._toolbar = toolbar;\n  this._homeButton = homeButton;\n  this._sceneModePicker = sceneModePicker;\n  this._projectionPicker = projectionPicker;\n  this._baseLayerPicker = baseLayerPicker;\n  this._navigationHelpButton = navigationHelpButton;\n  this._animation = animation;\n  this._timeline = timeline;\n  this._fullscreenButton = fullscreenButton;\n  this._vrButton = vrButton;\n  this._geocoder = geocoder;\n  this._eventHelper = eventHelper;\n  this._lastWidth = 0;\n  this._lastHeight = 0;\n  this._enableInfoOrSelection = defined(infoBox) || defined(selectionIndicator);\n  this._selectedEntity = undefined;\n  this._selectedEntityChanged = new Event();\n\n  const dataSourceCollection = this._cesiumWidget.dataSources;\n  const dataSourceDisplay = this._cesiumWidget.dataSourceDisplay;\n\n  //Listen to data source events in order to track clock changes.\n  eventHelper.add(\n    dataSourceCollection.dataSourceAdded,\n    Viewer.prototype._onDataSourceAdded,\n    this,\n  );\n  eventHelper.add(\n    dataSourceCollection.dataSourceRemoved,\n    Viewer.prototype._onDataSourceRemoved,\n    this,\n  );\n\n  // Prior to each render, check if anything needs to be resized.\n  eventHelper.add(scene.postUpdate, Viewer.prototype.resize, this);\n\n  // We need to subscribe to the data sources and collections so that we can clear the\n  // tracked object when it is removed from the scene.\n  // Subscribe to current data sources\n  const dataSourceLength = dataSourceCollection.length;\n  for (let i = 0; i < dataSourceLength; i++) {\n    this._dataSourceAdded(dataSourceCollection, dataSourceCollection.get(i));\n  }\n  this._dataSourceAdded(undefined, dataSourceDisplay.defaultDataSource);\n\n  // Hook up events so that we can subscribe to future sources.\n  eventHelper.add(\n    dataSourceCollection.dataSourceAdded,\n    Viewer.prototype._dataSourceAdded,\n    this,\n  );\n  eventHelper.add(\n    dataSourceCollection.dataSourceRemoved,\n    Viewer.prototype._dataSourceRemoved,\n    this,\n  );\n\n  // Subscribe to left clicks and zoom to the picked object.\n  function pickAndTrackObject(e) {\n    const entity = pickEntity(that, e);\n    if (defined(entity)) {\n      //Only track the entity if it has a valid position at the current time.\n      if (\n        Property.getValueOrUndefined(entity.position, that.clock.currentTime)\n      ) {\n        that.trackedEntity = entity;\n      } else {\n        that.zoomTo(entity);\n      }\n    } else if (defined(that.trackedEntity)) {\n      that.trackedEntity = undefined;\n    }\n  }\n\n  function pickAndSelectObject(e) {\n    that.selectedEntity = pickEntity(that, e);\n  }\n\n  cesiumWidget.screenSpaceEventHandler.setInputAction(\n    pickAndSelectObject,\n    ScreenSpaceEventType.LEFT_CLICK,\n  );\n  cesiumWidget.screenSpaceEventHandler.setInputAction(\n    pickAndTrackObject,\n    ScreenSpaceEventType.LEFT_DOUBLE_CLICK,\n  );\n\n  // This allows to update the Viewer's _clockViewModel instead of the CesiumWidget's _clock\n  // when CesiumWidget is created from the Viewer.\n  cesiumWidget._canAnimateUpdateCallback = this._updateCanAnimate(this);\n}\n\nObject.defineProperties(Viewer.prototype, {\n  /**\n   * Gets the parent container.\n   * @memberof Viewer.prototype\n   * @type {Element}\n   * @readonly\n   */\n  container: {\n    get: function () {\n      return this._container;\n    },\n  },\n\n  /**\n   * Manages the list of credits to display on screen and in the lightbox.\n   * @memberof Viewer.prototype\n   *\n   * @type {CreditDisplay}\n   */\n  creditDisplay: {\n    get: function () {\n      return this._cesiumWidget.creditDisplay;\n    },\n  },\n\n  /**\n   * Gets the DOM element for the area at the bottom of the window containing the\n   * {@link CreditDisplay} and potentially other things.\n   * @memberof Viewer.prototype\n   * @type {Element}\n   * @readonly\n   */\n  bottomContainer: {\n    get: function () {\n      return this._bottomContainer;\n    },\n  },\n\n  /**\n   * Gets the CesiumWidget.\n   * @memberof Viewer.prototype\n   * @type {CesiumWidget}\n   * @readonly\n   */\n  cesiumWidget: {\n    get: function () {\n      return this._cesiumWidget;\n    },\n  },\n\n  /**\n   * Gets the selection indicator.\n   * @memberof Viewer.prototype\n   * @type {SelectionIndicator}\n   * @readonly\n   */\n  selectionIndicator: {\n    get: function () {\n      return this._selectionIndicator;\n    },\n  },\n\n  /**\n   * Gets the info box.\n   * @memberof Viewer.prototype\n   * @type {InfoBox}\n   * @readonly\n   */\n  infoBox: {\n    get: function () {\n      return this._infoBox;\n    },\n  },\n\n  /**\n   * Gets the Geocoder.\n   * @memberof Viewer.prototype\n   * @type {Geocoder}\n   * @readonly\n   */\n  geocoder: {\n    get: function () {\n      return this._geocoder;\n    },\n  },\n\n  /**\n   * Gets the HomeButton.\n   * @memberof Viewer.prototype\n   * @type {HomeButton}\n   * @readonly\n   */\n  homeButton: {\n    get: function () {\n      return this._homeButton;\n    },\n  },\n\n  /**\n   * Gets the SceneModePicker.\n   * @memberof Viewer.prototype\n   * @type {SceneModePicker}\n   * @readonly\n   */\n  sceneModePicker: {\n    get: function () {\n      return this._sceneModePicker;\n    },\n  },\n\n  /**\n   * Gets the ProjectionPicker.\n   * @memberof Viewer.prototype\n   * @type {ProjectionPicker}\n   * @readonly\n   */\n  projectionPicker: {\n    get: function () {\n      return this._projectionPicker;\n    },\n  },\n\n  /**\n   * Gets the BaseLayerPicker.\n   * @memberof Viewer.prototype\n   * @type {BaseLayerPicker}\n   * @readonly\n   */\n  baseLayerPicker: {\n    get: function () {\n      return this._baseLayerPicker;\n    },\n  },\n\n  /**\n   * Gets the NavigationHelpButton.\n   * @memberof Viewer.prototype\n   * @type {NavigationHelpButton}\n   * @readonly\n   */\n  navigationHelpButton: {\n    get: function () {\n      return this._navigationHelpButton;\n    },\n  },\n\n  /**\n   * Gets the Animation widget.\n   * @memberof Viewer.prototype\n   * @type {Animation}\n   * @readonly\n   */\n  animation: {\n    get: function () {\n      return this._animation;\n    },\n  },\n\n  /**\n   * Gets the Timeline widget.\n   * @memberof Viewer.prototype\n   * @type {Timeline}\n   * @readonly\n   */\n  timeline: {\n    get: function () {\n      return this._timeline;\n    },\n  },\n\n  /**\n   * Gets the FullscreenButton.\n   * @memberof Viewer.prototype\n   * @type {FullscreenButton}\n   * @readonly\n   */\n  fullscreenButton: {\n    get: function () {\n      return this._fullscreenButton;\n    },\n  },\n\n  /**\n   * Gets the VRButton.\n   * @memberof Viewer.prototype\n   * @type {VRButton}\n   * @readonly\n   */\n  vrButton: {\n    get: function () {\n      return this._vrButton;\n    },\n  },\n\n  /**\n   * Gets the display used for {@link DataSource} visualization.\n   * @memberof Viewer.prototype\n   * @type {DataSourceDisplay}\n   * @readonly\n   */\n  dataSourceDisplay: {\n    get: function () {\n      return this._cesiumWidget.dataSourceDisplay;\n    },\n  },\n\n  /**\n   * Gets the collection of entities not tied to a particular data source.\n   * This is a shortcut to [dataSourceDisplay.defaultDataSource.entities]{@link Viewer#dataSourceDisplay}.\n   * @memberof Viewer.prototype\n   * @type {EntityCollection}\n   * @readonly\n   */\n  entities: {\n    get: function () {\n      return this._cesiumWidget.entities;\n    },\n  },\n\n  /**\n   * Gets the set of {@link DataSource} instances to be visualized.\n   * @memberof Viewer.prototype\n   * @type {DataSourceCollection}\n   * @readonly\n   */\n  dataSources: {\n    get: function () {\n      return this._cesiumWidget.dataSources;\n    },\n  },\n\n  /**\n   * Gets the canvas.\n   * @memberof Viewer.prototype\n   * @type {HTMLCanvasElement}\n   * @readonly\n   */\n  canvas: {\n    get: function () {\n      return this._cesiumWidget.canvas;\n    },\n  },\n\n  /**\n   * Gets the scene.\n   * @memberof Viewer.prototype\n   * @type {Scene}\n   * @readonly\n   */\n  scene: {\n    get: function () {\n      return this._cesiumWidget.scene;\n    },\n  },\n\n  /**\n   * Determines if shadows are cast by light sources.\n   * @memberof Viewer.prototype\n   * @type {boolean}\n   */\n  shadows: {\n    get: function () {\n      return this.scene.shadowMap.enabled;\n    },\n    set: function (value) {\n      this.scene.shadowMap.enabled = value;\n    },\n  },\n\n  /**\n   * Determines if the terrain casts or shadows from light sources.\n   * @memberof Viewer.prototype\n   * @type {ShadowMode}\n   */\n  terrainShadows: {\n    get: function () {\n      return this.scene.globe.shadows;\n    },\n    set: function (value) {\n      this.scene.globe.shadows = value;\n    },\n  },\n\n  /**\n   * Get the scene's shadow map\n   * @memberof Viewer.prototype\n   * @type {ShadowMap}\n   * @readonly\n   */\n  shadowMap: {\n    get: function () {\n      return this.scene.shadowMap;\n    },\n  },\n\n  /**\n   * Gets the collection of image layers that will be rendered on the globe.\n   * @memberof Viewer.prototype\n   *\n   * @type {ImageryLayerCollection}\n   * @readonly\n   */\n  imageryLayers: {\n    get: function () {\n      return this.scene.imageryLayers;\n    },\n  },\n\n  /**\n   * The terrain provider providing surface geometry for the globe.\n   * @memberof Viewer.prototype\n   *\n   * @type {TerrainProvider}\n   */\n  terrainProvider: {\n    get: function () {\n      return this.scene.terrainProvider;\n    },\n    set: function (terrainProvider) {\n      this.scene.terrainProvider = terrainProvider;\n    },\n  },\n\n  /**\n   * Gets the camera.\n   * @memberof Viewer.prototype\n   *\n   * @type {Camera}\n   * @readonly\n   */\n  camera: {\n    get: function () {\n      return this.scene.camera;\n    },\n  },\n\n  /**\n   * Gets the default ellipsoid for the scene.\n   * @memberof Viewer.prototype\n   *\n   * @type {Ellipsoid}\n   * @default Ellipsoid.default\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._scene.ellipsoid;\n    },\n  },\n\n  /**\n   * Gets the post-process stages.\n   * @memberof Viewer.prototype\n   *\n   * @type {PostProcessStageCollection}\n   * @readonly\n   */\n  postProcessStages: {\n    get: function () {\n      return this.scene.postProcessStages;\n    },\n  },\n\n  /**\n   * Gets the clock.\n   * @memberof Viewer.prototype\n   * @type {Clock}\n   * @readonly\n   */\n  clock: {\n    get: function () {\n      return this._clockViewModel.clock;\n    },\n  },\n\n  /**\n   * Gets the clock view model.\n   * @memberof Viewer.prototype\n   * @type {ClockViewModel}\n   * @readonly\n   */\n  clockViewModel: {\n    get: function () {\n      return this._clockViewModel;\n    },\n  },\n\n  /**\n   * Gets the screen space event handler.\n   * @memberof Viewer.prototype\n   * @type {ScreenSpaceEventHandler}\n   * @readonly\n   */\n  screenSpaceEventHandler: {\n    get: function () {\n      return this._cesiumWidget.screenSpaceEventHandler;\n    },\n  },\n\n  /**\n   * Gets or sets the target frame rate of the widget when <code>useDefaultRenderLoop</code>\n   * is true. If undefined, the browser's requestAnimationFrame implementation\n   * determines the frame rate.  If defined, this value must be greater than 0.  A value higher\n   * than the underlying requestAnimationFrame implementation will have no effect.\n   * @memberof Viewer.prototype\n   *\n   * @type {number}\n   */\n  targetFrameRate: {\n    get: function () {\n      return this._cesiumWidget.targetFrameRate;\n    },\n    set: function (value) {\n      this._cesiumWidget.targetFrameRate = value;\n    },\n  },\n\n  /**\n   * Gets or sets whether or not this widget should control the render loop.\n   * If true the widget will use requestAnimationFrame to\n   * perform rendering and resizing of the widget, as well as drive the\n   * simulation clock. If set to false, you must manually call the\n   * <code>resize</code>, <code>render</code> methods\n   * as part of a custom render loop.  If an error occurs during rendering, {@link Scene}'s\n   * <code>renderError</code> event will be raised and this property\n   * will be set to false.  It must be set back to true to continue rendering\n   * after the error.\n   * @memberof Viewer.prototype\n   *\n   * @type {boolean}\n   */\n  useDefaultRenderLoop: {\n    get: function () {\n      return this._cesiumWidget.useDefaultRenderLoop;\n    },\n    set: function (value) {\n      this._cesiumWidget.useDefaultRenderLoop = value;\n    },\n  },\n\n  /**\n   * Gets or sets a scaling factor for rendering resolution.  Values less than 1.0 can improve\n   * performance on less powerful devices while values greater than 1.0 will render at a higher\n   * resolution and then scale down, resulting in improved visual fidelity.\n   * For example, if the widget is laid out at a size of 640x480, setting this value to 0.5\n   * will cause the scene to be rendered at 320x240 and then scaled up while setting\n   * it to 2.0 will cause the scene to be rendered at 1280x960 and then scaled down.\n   * @memberof Viewer.prototype\n   *\n   * @type {number}\n   * @default 1.0\n   */\n  resolutionScale: {\n    get: function () {\n      return this._cesiumWidget.resolutionScale;\n    },\n    set: function (value) {\n      this._cesiumWidget.resolutionScale = value;\n    },\n  },\n\n  /**\n   * Boolean flag indicating if the browser's recommended resolution is used.\n   * If true, the browser's device pixel ratio is ignored and 1.0 is used instead,\n   * effectively rendering based on CSS pixels instead of device pixels. This can improve\n   * performance on less powerful devices that have high pixel density. When false, rendering\n   * will be in device pixels. {@link Viewer#resolutionScale} will still take effect whether\n   * this flag is true or false.\n   * @memberof Viewer.prototype\n   *\n   * @type {boolean}\n   * @default true\n   */\n  useBrowserRecommendedResolution: {\n    get: function () {\n      return this._cesiumWidget.useBrowserRecommendedResolution;\n    },\n    set: function (value) {\n      this._cesiumWidget.useBrowserRecommendedResolution = value;\n    },\n  },\n\n  /**\n   * Gets or sets whether or not data sources can temporarily pause\n   * animation in order to avoid showing an incomplete picture to the user.\n   * For example, if asynchronous primitives are being processed in the\n   * background, the clock will not advance until the geometry is ready.\n   *\n   * @memberof Viewer.prototype\n   *\n   * @type {boolean}\n   */\n  allowDataSourcesToSuspendAnimation: {\n    get: function () {\n      return this._cesiumWidget.allowDataSourcesToSuspendAnimation;\n    },\n    set: function (value) {\n      this._cesiumWidget.allowDataSourcesToSuspendAnimation = value;\n    },\n  },\n\n  /**\n   * Gets or sets the Entity instance currently being tracked by the camera.\n   * @memberof Viewer.prototype\n   * @type {Entity | undefined}\n   */\n  trackedEntity: {\n    get: function () {\n      return this._cesiumWidget.trackedEntity;\n    },\n    set: function (value) {\n      this._cesiumWidget.trackedEntity = value;\n    },\n  },\n  /**\n   * Gets or sets the object instance for which to display a selection indicator.\n   *\n   * If a user interactively picks a Cesium3DTilesFeature instance, then this property\n   * will contain a transient Entity instance with a property named \"feature\" that is\n   * the instance that was picked.\n   * @memberof Viewer.prototype\n   * @type {Entity | undefined}\n   */\n  selectedEntity: {\n    get: function () {\n      return this._selectedEntity;\n    },\n    set: function (value) {\n      if (this._selectedEntity !== value) {\n        this._selectedEntity = value;\n        const selectionIndicatorViewModel = defined(this._selectionIndicator)\n          ? this._selectionIndicator.viewModel\n          : undefined;\n        if (defined(value)) {\n          if (defined(selectionIndicatorViewModel)) {\n            selectionIndicatorViewModel.animateAppear();\n          }\n        } else if (defined(selectionIndicatorViewModel)) {\n          // Leave the info text in place here, it is needed during the exit animation.\n          selectionIndicatorViewModel.animateDepart();\n        }\n        this._selectedEntityChanged.raiseEvent(value);\n      }\n    },\n  },\n  /**\n   * Gets the event that is raised when the selected entity changes.\n   * @memberof Viewer.prototype\n   * @type {Event}\n   * @readonly\n   */\n  selectedEntityChanged: {\n    get: function () {\n      return this._selectedEntityChanged;\n    },\n  },\n  /**\n   * Gets the event that is raised when the tracked entity changes.\n   * @memberof Viewer.prototype\n   * @type {Event}\n   * @readonly\n   */\n  trackedEntityChanged: {\n    get: function () {\n      return this._cesiumWidget.trackedEntityChanged;\n    },\n  },\n  /**\n   * Gets or sets the data source to track with the viewer's clock.\n   * @memberof Viewer.prototype\n   * @type {DataSource}\n   */\n  clockTrackedDataSource: {\n    get: function () {\n      return this._cesiumWidget.clockTrackedDataSource;\n    },\n    set: function (value) {\n      if (this._cesiumWidget.clockTrackedDataSource !== value) {\n        this._cesiumWidget.clockTrackedDataSource = value;\n        linkTimelineToDataSourceClock(this._timeline, value);\n      }\n    },\n  },\n});\n\n/**\n * Extends the base viewer functionality with the provided mixin.\n * A mixin may add additional properties, functions, or other behavior\n * to the provided viewer instance.\n *\n * @param {Viewer.ViewerMixin} mixin The Viewer mixin to add to this instance.\n * @param {object} [options] The options object to be passed to the mixin function.\n *\n * @see viewerDragDropMixin\n */\nViewer.prototype.extend = function (mixin, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(mixin)) {\n    throw new DeveloperError(\"mixin is required.\");\n  }\n  //>>includeEnd('debug')\n\n  mixin(this, options);\n};\n\n/**\n * Resizes the widget to match the container size.\n * This function is called automatically as needed unless\n * <code>useDefaultRenderLoop</code> is set to false.\n */\nViewer.prototype.resize = function () {\n  const cesiumWidget = this._cesiumWidget;\n  const container = this._container;\n  const width = container.clientWidth;\n  const height = container.clientHeight;\n  const animationExists = defined(this._animation);\n  const timelineExists = defined(this._timeline);\n\n  cesiumWidget.resize();\n\n  if (width === this._lastWidth && height === this._lastHeight) {\n    return;\n  }\n\n  const panelMaxHeight = height - 125;\n  const baseLayerPickerDropDown = this._baseLayerPickerDropDown;\n\n  if (defined(baseLayerPickerDropDown)) {\n    baseLayerPickerDropDown.style.maxHeight = `${panelMaxHeight}px`;\n  }\n\n  if (defined(this._geocoder)) {\n    const geocoderSuggestions = this._geocoder.searchSuggestionsContainer;\n    geocoderSuggestions.style.maxHeight = `${panelMaxHeight}px`;\n  }\n\n  if (defined(this._infoBox)) {\n    this._infoBox.viewModel.maxHeight = panelMaxHeight;\n  }\n\n  const timeline = this._timeline;\n  let animationContainer;\n  let animationWidth = 0;\n  let creditLeft = 5;\n  let creditBottom = 3;\n  let creditRight = 0;\n\n  if (\n    animationExists &&\n    window.getComputedStyle(this._animation.container).visibility !== \"hidden\"\n  ) {\n    const lastWidth = this._lastWidth;\n    animationContainer = this._animation.container;\n    if (width > 900) {\n      animationWidth = 169;\n      if (lastWidth <= 900) {\n        animationContainer.style.width = \"169px\";\n        animationContainer.style.height = \"112px\";\n        this._animation.resize();\n      }\n    } else if (width >= 600) {\n      animationWidth = 136;\n      if (lastWidth < 600 || lastWidth > 900) {\n        animationContainer.style.width = \"136px\";\n        animationContainer.style.height = \"90px\";\n        this._animation.resize();\n      }\n    } else {\n      animationWidth = 106;\n      if (lastWidth > 600 || lastWidth === 0) {\n        animationContainer.style.width = \"106px\";\n        animationContainer.style.height = \"70px\";\n        this._animation.resize();\n      }\n    }\n    creditLeft = animationWidth + 5;\n  }\n\n  if (\n    timelineExists &&\n    window.getComputedStyle(this._timeline.container).visibility !== \"hidden\"\n  ) {\n    const fullscreenButton = this._fullscreenButton;\n    const vrButton = this._vrButton;\n    const timelineContainer = timeline.container;\n    const timelineStyle = timelineContainer.style;\n\n    creditBottom = timelineContainer.clientHeight + 3;\n    timelineStyle.left = `${animationWidth}px`;\n\n    let pixels = 0;\n    if (defined(fullscreenButton)) {\n      pixels += fullscreenButton.container.clientWidth;\n    }\n    if (defined(vrButton)) {\n      pixels += vrButton.container.clientWidth;\n    }\n\n    timelineStyle.right = `${pixels}px`;\n    timeline.resize();\n  }\n\n  if (!timelineExists && defined(this._fullscreenButton)) {\n    // don't let long credits (like the default ion token) go behind the fullscreen button\n    creditRight = this._fullscreenButton.container.clientWidth;\n  }\n\n  this._bottomContainer.style.left = `${creditLeft}px`;\n  this._bottomContainer.style.bottom = `${creditBottom}px`;\n  this._bottomContainer.style.right = `${creditRight}px`;\n\n  this._lastWidth = width;\n  this._lastHeight = height;\n};\n\n/**\n * This forces the widget to re-think its layout, including\n * widget sizes and credit placement.\n */\nViewer.prototype.forceResize = function () {\n  this._lastWidth = 0;\n  this.resize();\n};\n\n/**\n * Renders the scene.  This function is called automatically\n * unless <code>useDefaultRenderLoop</code> is set to false;\n */\nViewer.prototype.render = function () {\n  this._cesiumWidget.render();\n};\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nViewer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the widget.  Should be called if permanently\n * removing the widget from layout.\n */\nViewer.prototype.destroy = function () {\n  if (\n    defined(this.screenSpaceEventHandler) &&\n    !this.screenSpaceEventHandler.isDestroyed()\n  ) {\n    this.screenSpaceEventHandler.removeInputAction(\n      ScreenSpaceEventType.LEFT_CLICK,\n    );\n    this.screenSpaceEventHandler.removeInputAction(\n      ScreenSpaceEventType.LEFT_DOUBLE_CLICK,\n    );\n  }\n\n  this._container.removeChild(this._element);\n  this._element.removeChild(this._toolbar);\n\n  this._eventHelper.removeAll();\n\n  if (defined(this._geocoder)) {\n    this._geocoder = this._geocoder.destroy();\n  }\n\n  if (defined(this._homeButton)) {\n    this._homeButton = this._homeButton.destroy();\n  }\n\n  if (defined(this._sceneModePicker)) {\n    this._sceneModePicker = this._sceneModePicker.destroy();\n  }\n\n  if (defined(this._projectionPicker)) {\n    this._projectionPicker = this._projectionPicker.destroy();\n  }\n\n  if (defined(this._baseLayerPicker)) {\n    this._baseLayerPicker = this._baseLayerPicker.destroy();\n  }\n\n  if (defined(this._animation)) {\n    this._element.removeChild(this._animation.container);\n    this._animation = this._animation.destroy();\n  }\n\n  if (defined(this._timeline)) {\n    this._timeline.removeEventListener(\n      \"settime\",\n      onTimelineScrubfunction,\n      false,\n    );\n    this._element.removeChild(this._timeline.container);\n    this._timeline = this._timeline.destroy();\n  }\n\n  if (defined(this._fullscreenButton)) {\n    this._fullscreenSubscription.dispose();\n    this._element.removeChild(this._fullscreenButton.container);\n    this._fullscreenButton = this._fullscreenButton.destroy();\n  }\n\n  if (defined(this._vrButton)) {\n    this._vrSubscription.dispose();\n    this._vrModeSubscription.dispose();\n    this._element.removeChild(this._vrButton.container);\n    this._vrButton = this._vrButton.destroy();\n  }\n\n  if (defined(this._infoBox)) {\n    this._element.removeChild(this._infoBox.container);\n    this._infoBox = this._infoBox.destroy();\n  }\n\n  if (defined(this._selectionIndicator)) {\n    this._element.removeChild(this._selectionIndicator.container);\n    this._selectionIndicator = this._selectionIndicator.destroy();\n  }\n\n  if (this._destroyClockViewModel) {\n    this._clockViewModel = this._clockViewModel.destroy();\n  }\n  this._cesiumWidget = this._cesiumWidget.destroy();\n\n  return destroyObject(this);\n};\n\n/**\n * @private\n */\nViewer.prototype._dataSourceAdded = function (\n  dataSourceCollection,\n  dataSource,\n) {\n  const entityCollection = dataSource.entities;\n  entityCollection.collectionChanged.addEventListener(\n    Viewer.prototype._onEntityCollectionChanged,\n    this,\n  );\n};\n\n/**\n * @private\n */\nViewer.prototype._dataSourceRemoved = function (\n  dataSourceCollection,\n  dataSource,\n) {\n  const entityCollection = dataSource.entities;\n  entityCollection.collectionChanged.removeEventListener(\n    Viewer.prototype._onEntityCollectionChanged,\n    this,\n  );\n\n  if (defined(this.selectedEntity)) {\n    if (\n      entityCollection.getById(this.selectedEntity.id) === this.selectedEntity\n    ) {\n      this.selectedEntity = undefined;\n    }\n  }\n};\n\n/**\n * @private\n */\nViewer.prototype._updateCanAnimate = function (that) {\n  return function (isUpdated) {\n    that._clockViewModel.canAnimate = isUpdated;\n  };\n};\n\n/**\n * @private\n */\nViewer.prototype._onTick = function (clock) {\n  const time = clock.currentTime;\n\n  let position;\n  let enableCamera = false;\n  const selectedEntity = this.selectedEntity;\n  const showSelection = defined(selectedEntity) && this._enableInfoOrSelection;\n\n  if (\n    showSelection &&\n    selectedEntity.isShowing &&\n    selectedEntity.isAvailable(time)\n  ) {\n    const state = this._cesiumWidget.dataSourceDisplay.getBoundingSphere(\n      selectedEntity,\n      true,\n      boundingSphereScratch,\n    );\n    if (state !== BoundingSphereState.FAILED) {\n      position = boundingSphereScratch.center;\n    } else if (defined(selectedEntity.position)) {\n      position = selectedEntity.position.getValue(time, position);\n    }\n    enableCamera = defined(position);\n  }\n\n  const selectionIndicatorViewModel = defined(this._selectionIndicator)\n    ? this._selectionIndicator.viewModel\n    : undefined;\n  if (defined(selectionIndicatorViewModel)) {\n    selectionIndicatorViewModel.position = Cartesian3.clone(\n      position,\n      selectionIndicatorViewModel.position,\n    );\n    selectionIndicatorViewModel.showSelection = showSelection && enableCamera;\n    selectionIndicatorViewModel.update();\n  }\n\n  const infoBoxViewModel = defined(this._infoBox)\n    ? this._infoBox.viewModel\n    : undefined;\n  if (defined(infoBoxViewModel)) {\n    infoBoxViewModel.showInfo = showSelection;\n    infoBoxViewModel.enableCamera = enableCamera;\n    infoBoxViewModel.isCameraTracking =\n      this.trackedEntity === this.selectedEntity;\n\n    if (showSelection) {\n      infoBoxViewModel.titleText = defaultValue(\n        selectedEntity.name,\n        selectedEntity.id,\n      );\n      infoBoxViewModel.description = Property.getValueOrDefault(\n        selectedEntity.description,\n        time,\n        \"\",\n      );\n    } else {\n      infoBoxViewModel.titleText = \"\";\n      infoBoxViewModel.description = \"\";\n    }\n  }\n};\n\n/**\n * @private\n */\nViewer.prototype._onEntityCollectionChanged = function (\n  collection,\n  added,\n  removed,\n) {\n  const length = removed.length;\n  for (let i = 0; i < length; i++) {\n    const removedObject = removed[i];\n    if (this.selectedEntity === removedObject) {\n      this.selectedEntity = undefined;\n    }\n  }\n};\n\n/**\n * @private\n */\nViewer.prototype._onInfoBoxCameraClicked = function (infoBoxViewModel) {\n  if (\n    infoBoxViewModel.isCameraTracking &&\n    this.trackedEntity === this.selectedEntity\n  ) {\n    this.trackedEntity = undefined;\n  } else {\n    const selectedEntity = this.selectedEntity;\n    const position = selectedEntity.position;\n    if (defined(position)) {\n      this.trackedEntity = this.selectedEntity;\n    } else {\n      this.zoomTo(this.selectedEntity);\n    }\n  }\n};\n\n/**\n * @private\n */\nViewer.prototype._clearTrackedObject = function () {\n  this.trackedEntity = undefined;\n};\n\n/**\n * @private\n */\nViewer.prototype._onInfoBoxClockClicked = function (infoBoxViewModel) {\n  this.selectedEntity = undefined;\n};\n\n/**\n * @private\n */\nViewer.prototype._clearObjects = function () {\n  this.trackedEntity = undefined;\n  this.selectedEntity = undefined;\n};\n\n/**\n * @private\n */\nViewer.prototype._onDataSourceChanged = function (dataSource) {\n  if (this.clockTrackedDataSource === dataSource) {\n    linkTimelineToDataSourceClock(this.timeline, dataSource);\n  }\n};\n\n/**\n * @private\n */\nViewer.prototype._onDataSourceAdded = function (\n  dataSourceCollection,\n  dataSource,\n) {\n  if (\n    this._cesiumWidget._automaticallyTrackDataSourceClocks &&\n    dataSource === this.clockTrackedDataSource\n  ) {\n    // When data sources are added to the CesiumWidget they may be automatically\n    // tracked in that class but we also need to update the timeline in this class\n    linkTimelineToDataSourceClock(this._timeline, dataSource);\n  }\n  const id = dataSource.entities.id;\n  const removalFunc = this._eventHelper.add(\n    dataSource.changedEvent,\n    Viewer.prototype._onDataSourceChanged,\n    this,\n  );\n  this._dataSourceChangedListeners[id] = removalFunc;\n};\n\n/**\n * @private\n */\nViewer.prototype._onDataSourceRemoved = function (\n  dataSourceCollection,\n  dataSource,\n) {\n  const id = dataSource.entities.id;\n  this._dataSourceChangedListeners[id]();\n  this._dataSourceChangedListeners[id] = undefined;\n};\n\n/**\n * Asynchronously sets the camera to view the provided entity, entities, or data source.\n * If the data source is still in the process of loading or the visualization is otherwise still loading,\n * this method waits for the data to be ready before performing the zoom.\n *\n * <p>The offset is heading/pitch/range in the local east-north-up reference frame centered at the center of the bounding sphere.\n * The heading and the pitch angles are defined in the local east-north-up reference frame.\n * The heading is the angle from y axis and increasing towards the x axis. Pitch is the rotation from the xy-plane. Positive pitch\n * angles are above the plane. Negative pitch angles are below the plane. The range is the distance from the center. If the range is\n * zero, a range will be computed such that the whole bounding sphere is visible.</p>\n *\n * <p>In 2D, there must be a top down view. The camera will be placed above the target looking down. The height above the\n * target will be the range. The heading will be determined from the offset. If the heading cannot be\n * determined from the offset, the heading will be north.</p>\n *\n * @param {Entity|Entity[]|EntityCollection|DataSource|ImageryLayer|Cesium3DTileset|TimeDynamicPointCloud|Promise<Entity|Entity[]|EntityCollection|DataSource|ImageryLayer|Cesium3DTileset|TimeDynamicPointCloud|VoxelPrimitive>} target The entity, array of entities, entity collection, data source, Cesium3DTileset, point cloud, or imagery layer to view. You can also pass a promise that resolves to one of the previously mentioned types.\n * @param {HeadingPitchRange} [offset] The offset from the center of the entity in the local east-north-up reference frame.\n * @returns {Promise<boolean>} A Promise that resolves to true if the zoom was successful or false if the target is not currently visualized in the scene or the zoom was cancelled.\n */\nViewer.prototype.zoomTo = function (target, offset) {\n  return this._cesiumWidget.zoomTo(target, offset);\n};\n\n/**\n * Flies the camera to the provided entity, entities, or data source.\n * If the data source is still in the process of loading or the visualization is otherwise still loading,\n * this method waits for the data to be ready before performing the flight.\n *\n * <p>The offset is heading/pitch/range in the local east-north-up reference frame centered at the center of the bounding sphere.\n * The heading and the pitch angles are defined in the local east-north-up reference frame.\n * The heading is the angle from y axis and increasing towards the x axis. Pitch is the rotation from the xy-plane. Positive pitch\n * angles are above the plane. Negative pitch angles are below the plane. The range is the distance from the center. If the range is\n * zero, a range will be computed such that the whole bounding sphere is visible.</p>\n *\n * <p>In 2D, there must be a top down view. The camera will be placed above the target looking down. The height above the\n * target will be the range. The heading will be determined from the offset. If the heading cannot be\n * determined from the offset, the heading will be north.</p>\n *\n * @param {Entity|Entity[]|EntityCollection|DataSource|ImageryLayer|Cesium3DTileset|TimeDynamicPointCloud|Promise<Entity|Entity[]|EntityCollection|DataSource|ImageryLayer|Cesium3DTileset|TimeDynamicPointCloud|VoxelPrimitive>} target The entity, array of entities, entity collection, data source, Cesium3DTileset, point cloud, or imagery layer to view. You can also pass a promise that resolves to one of the previously mentioned types.\n * @param {object} [options] Object with the following properties:\n * @param {number} [options.duration=3.0] The duration of the flight in seconds.\n * @param {number} [options.maximumHeight] The maximum height at the peak of the flight.\n * @param {HeadingPitchRange} [options.offset] The offset from the target in the local east-north-up reference frame centered at the target.\n * @returns {Promise<boolean>} A Promise that resolves to true if the flight was successful or false if the target is not currently visualized in the scene or the flight was cancelled. //TODO: Cleanup entity mentions\n */\nViewer.prototype.flyTo = function (target, options) {\n  return this._cesiumWidget.flyTo(target, options);\n};\n\n/**\n * A function that augments a Viewer instance with additional functionality.\n * @callback Viewer.ViewerMixin\n * @param {Viewer} viewer The viewer instance.\n * @param {object} options Options object to be passed to the mixin function.\n *\n * @see Viewer#extend\n */\nexport default Viewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}