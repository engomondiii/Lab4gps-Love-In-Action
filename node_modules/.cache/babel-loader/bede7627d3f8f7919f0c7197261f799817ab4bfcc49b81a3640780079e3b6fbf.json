{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Quaternion from \"./Quaternion.js\";\nconst defaultScale = new Cartesian3(1.0, 1.0, 1.0);\nconst defaultTranslation = Cartesian3.ZERO;\nconst defaultRotation = Quaternion.IDENTITY;\n\n/**\n * An affine transformation defined by a translation, rotation, and scale.\n * @alias TranslationRotationScale\n * @constructor\n *\n * @param {Cartesian3} [translation=Cartesian3.ZERO] A {@link Cartesian3} specifying the (x, y, z) translation to apply to the node.\n * @param {Quaternion} [rotation=Quaternion.IDENTITY] A {@link Quaternion} specifying the (x, y, z, w) rotation to apply to the node.\n * @param {Cartesian3} [scale=new Cartesian3(1.0, 1.0, 1.0)] A {@link Cartesian3} specifying the (x, y, z) scaling to apply to the node.\n */\nfunction TranslationRotationScale(translation, rotation, scale) {\n  /**\n   * Gets or sets the (x, y, z) translation to apply to the node.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.translation = Cartesian3.clone(defaultValue(translation, defaultTranslation));\n\n  /**\n   * Gets or sets the (x, y, z, w) rotation to apply to the node.\n   * @type {Quaternion}\n   * @default Quaternion.IDENTITY\n   */\n  this.rotation = Quaternion.clone(defaultValue(rotation, defaultRotation));\n\n  /**\n   * Gets or sets the (x, y, z) scaling to apply to the node.\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   */\n  this.scale = Cartesian3.clone(defaultValue(scale, defaultScale));\n}\n\n/**\n * Compares this instance against the provided instance and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {TranslationRotationScale} [right] The right hand side TranslationRotationScale.\n * @returns {boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nTranslationRotationScale.prototype.equals = function (right) {\n  return this === right || defined(right) && Cartesian3.equals(this.translation, right.translation) && Quaternion.equals(this.rotation, right.rotation) && Cartesian3.equals(this.scale, right.scale);\n};\nexport default TranslationRotationScale;","map":{"version":3,"names":["Cartesian3","defaultValue","defined","Quaternion","defaultScale","defaultTranslation","ZERO","defaultRotation","IDENTITY","TranslationRotationScale","translation","rotation","scale","clone","prototype","equals","right"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/TranslationRotationScale.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Quaternion from \"./Quaternion.js\";\n\nconst defaultScale = new Cartesian3(1.0, 1.0, 1.0);\nconst defaultTranslation = Cartesian3.ZERO;\nconst defaultRotation = Quaternion.IDENTITY;\n\n/**\n * An affine transformation defined by a translation, rotation, and scale.\n * @alias TranslationRotationScale\n * @constructor\n *\n * @param {Cartesian3} [translation=Cartesian3.ZERO] A {@link Cartesian3} specifying the (x, y, z) translation to apply to the node.\n * @param {Quaternion} [rotation=Quaternion.IDENTITY] A {@link Quaternion} specifying the (x, y, z, w) rotation to apply to the node.\n * @param {Cartesian3} [scale=new Cartesian3(1.0, 1.0, 1.0)] A {@link Cartesian3} specifying the (x, y, z) scaling to apply to the node.\n */\nfunction TranslationRotationScale(translation, rotation, scale) {\n  /**\n   * Gets or sets the (x, y, z) translation to apply to the node.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.translation = Cartesian3.clone(\n    defaultValue(translation, defaultTranslation),\n  );\n\n  /**\n   * Gets or sets the (x, y, z, w) rotation to apply to the node.\n   * @type {Quaternion}\n   * @default Quaternion.IDENTITY\n   */\n  this.rotation = Quaternion.clone(defaultValue(rotation, defaultRotation));\n\n  /**\n   * Gets or sets the (x, y, z) scaling to apply to the node.\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   */\n  this.scale = Cartesian3.clone(defaultValue(scale, defaultScale));\n}\n\n/**\n * Compares this instance against the provided instance and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {TranslationRotationScale} [right] The right hand side TranslationRotationScale.\n * @returns {boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nTranslationRotationScale.prototype.equals = function (right) {\n  return (\n    this === right ||\n    (defined(right) &&\n      Cartesian3.equals(this.translation, right.translation) &&\n      Quaternion.equals(this.rotation, right.rotation) &&\n      Cartesian3.equals(this.scale, right.scale))\n  );\n};\nexport default TranslationRotationScale;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,iBAAiB;AACxC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,UAAU,MAAM,iBAAiB;AAExC,MAAMC,YAAY,GAAG,IAAIJ,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAClD,MAAMK,kBAAkB,GAAGL,UAAU,CAACM,IAAI;AAC1C,MAAMC,eAAe,GAAGJ,UAAU,CAACK,QAAQ;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAACC,WAAW,EAAEC,QAAQ,EAAEC,KAAK,EAAE;EAC9D;AACF;AACA;AACA;AACA;EACE,IAAI,CAACF,WAAW,GAAGV,UAAU,CAACa,KAAK,CACjCZ,YAAY,CAACS,WAAW,EAAEL,kBAAkB,CAC9C,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,IAAI,CAACM,QAAQ,GAAGR,UAAU,CAACU,KAAK,CAACZ,YAAY,CAACU,QAAQ,EAAEJ,eAAe,CAAC,CAAC;;EAEzE;AACF;AACA;AACA;AACA;EACE,IAAI,CAACK,KAAK,GAAGZ,UAAU,CAACa,KAAK,CAACZ,YAAY,CAACW,KAAK,EAAER,YAAY,CAAC,CAAC;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAK,wBAAwB,CAACK,SAAS,CAACC,MAAM,GAAG,UAAUC,KAAK,EAAE;EAC3D,OACE,IAAI,KAAKA,KAAK,IACbd,OAAO,CAACc,KAAK,CAAC,IACbhB,UAAU,CAACe,MAAM,CAAC,IAAI,CAACL,WAAW,EAAEM,KAAK,CAACN,WAAW,CAAC,IACtDP,UAAU,CAACY,MAAM,CAAC,IAAI,CAACJ,QAAQ,EAAEK,KAAK,CAACL,QAAQ,CAAC,IAChDX,UAAU,CAACe,MAAM,CAAC,IAAI,CAACH,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAAE;AAEjD,CAAC;AACD,eAAeH,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}