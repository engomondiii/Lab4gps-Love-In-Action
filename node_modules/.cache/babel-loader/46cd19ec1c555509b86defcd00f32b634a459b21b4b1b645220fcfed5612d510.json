{"ast":null,"code":"import Check from \"../Core/Check.js\";\n\n/**\n * An enum describing whether a variable should be added to the\n * vertex shader, the fragment shader, or both.\n *\n * @private\n */\nconst ShaderDestination = {\n  VERTEX: 0,\n  FRAGMENT: 1,\n  BOTH: 2\n};\n\n/**\n * Check if a variable should be included in the vertex shader.\n *\n * @param {ShaderDestination} destination The ShaderDestination to check\n * @return {boolean} <code>true</code> if the variable appears in the vertex shader, or <code>false</code> otherwise\n * @private\n */\nShaderDestination.includesVertexShader = function (destination) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"destination\", destination);\n  //>>includeEnd('debug');\n\n  return destination === ShaderDestination.VERTEX || destination === ShaderDestination.BOTH;\n};\n\n/**\n * Check if a variable should be included in the vertex shader.\n *\n * @param {ShaderDestination} destination The ShaderDestination to check\n * @return {boolean} <code>true</code> if the variable appears in the vertex shader, or <code>false</code> otherwise\n * @private\n */\nShaderDestination.includesFragmentShader = function (destination) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"destination\", destination);\n  //>>includeEnd('debug');\n  //\n  return destination === ShaderDestination.FRAGMENT || destination === ShaderDestination.BOTH;\n};\nexport default Object.freeze(ShaderDestination);","map":{"version":3,"names":["Check","ShaderDestination","VERTEX","FRAGMENT","BOTH","includesVertexShader","destination","typeOf","number","includesFragmentShader","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/ShaderDestination.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\n\n/**\n * An enum describing whether a variable should be added to the\n * vertex shader, the fragment shader, or both.\n *\n * @private\n */\nconst ShaderDestination = {\n  VERTEX: 0,\n  FRAGMENT: 1,\n  BOTH: 2,\n};\n\n/**\n * Check if a variable should be included in the vertex shader.\n *\n * @param {ShaderDestination} destination The ShaderDestination to check\n * @return {boolean} <code>true</code> if the variable appears in the vertex shader, or <code>false</code> otherwise\n * @private\n */\nShaderDestination.includesVertexShader = function (destination) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"destination\", destination);\n  //>>includeEnd('debug');\n\n  return (\n    destination === ShaderDestination.VERTEX ||\n    destination === ShaderDestination.BOTH\n  );\n};\n\n/**\n * Check if a variable should be included in the vertex shader.\n *\n * @param {ShaderDestination} destination The ShaderDestination to check\n * @return {boolean} <code>true</code> if the variable appears in the vertex shader, or <code>false</code> otherwise\n * @private\n */\nShaderDestination.includesFragmentShader = function (destination) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"destination\", destination);\n  //>>includeEnd('debug');\n  //\n  return (\n    destination === ShaderDestination.FRAGMENT ||\n    destination === ShaderDestination.BOTH\n  );\n};\n\nexport default Object.freeze(ShaderDestination);\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG;EACxBC,MAAM,EAAE,CAAC;EACTC,QAAQ,EAAE,CAAC;EACXC,IAAI,EAAE;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,iBAAiB,CAACI,oBAAoB,GAAG,UAAUC,WAAW,EAAE;EAC9D;EACAN,KAAK,CAACO,MAAM,CAACC,MAAM,CAAC,aAAa,EAAEF,WAAW,CAAC;EAC/C;;EAEA,OACEA,WAAW,KAAKL,iBAAiB,CAACC,MAAM,IACxCI,WAAW,KAAKL,iBAAiB,CAACG,IAAI;AAE1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,iBAAiB,CAACQ,sBAAsB,GAAG,UAAUH,WAAW,EAAE;EAChE;EACAN,KAAK,CAACO,MAAM,CAACC,MAAM,CAAC,aAAa,EAAEF,WAAW,CAAC;EAC/C;EACA;EACA,OACEA,WAAW,KAAKL,iBAAiB,CAACE,QAAQ,IAC1CG,WAAW,KAAKL,iBAAiB,CAACG,IAAI;AAE1C,CAAC;AAED,eAAeM,MAAM,CAACC,MAAM,CAACV,iBAAiB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}