{"ast":null,"code":"import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\nconst colorScratch = new Color();\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\nconst defaultDistanceDisplayCondition = new DistanceDisplayCondition();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\nfunction Batch(primitives, translucent, appearanceType, depthFailAppearanceType, depthFailMaterialProperty, closed, shadows) {\n  this.translucent = translucent;\n  this.appearanceType = appearanceType;\n  this.depthFailAppearanceType = depthFailAppearanceType;\n  this.depthFailMaterialProperty = depthFailMaterialProperty;\n  this.depthFailMaterial = undefined;\n  this.closed = closed;\n  this.shadows = shadows;\n  this.primitives = primitives;\n  this.createPrimitive = false;\n  this.waitingOnCreate = false;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.updaters = new AssociativeArray();\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n  this.itemsToRemove = [];\n  this.invalidated = false;\n  let removeMaterialSubscription;\n  if (defined(depthFailMaterialProperty)) {\n    removeMaterialSubscription = depthFailMaterialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n  }\n  this.removeMaterialSubscription = removeMaterialSubscription;\n}\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\nBatch.prototype.isMaterial = function (updater) {\n  const material = this.depthFailMaterialProperty;\n  const updaterMaterial = updater.depthFailMaterialProperty;\n  if (updaterMaterial === material) {\n    return true;\n  }\n  if (defined(material)) {\n    return material.equals(updaterMaterial);\n  }\n  return false;\n};\nBatch.prototype.add = function (updater, instance) {\n  const id = updater.id;\n  this.createPrimitive = true;\n  this.geometry.set(id, instance);\n  this.updaters.set(id, updater);\n  if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty) || !Property.isConstant(updater.terrainOffsetProperty)) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    const that = this;\n    this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function (entity, propertyName, newValue, oldValue) {\n      if (propertyName === \"isShowing\") {\n        that.showsUpdated.set(updater.id, updater);\n      }\n    }));\n  }\n};\nBatch.prototype.remove = function (updater) {\n  const id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    const unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\nBatch.prototype.update = function (time) {\n  let isUpdated = true;\n  let removedCount = 0;\n  let primitive = this.primitive;\n  const primitives = this.primitives;\n  let i;\n  if (this.createPrimitive) {\n    const geometries = this.geometry.values;\n    const geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n      let depthFailAppearance;\n      if (defined(this.depthFailAppearanceType)) {\n        if (defined(this.depthFailMaterialProperty)) {\n          this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n        }\n        depthFailAppearance = new this.depthFailAppearanceType({\n          material: this.depthFailMaterial,\n          translucent: this.translucent,\n          closed: this.closed\n        });\n      }\n      primitive = new Primitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType({\n          translucent: this.translucent,\n          closed: this.closed\n        }),\n        depthFailAppearance: depthFailAppearance,\n        shadows: this.shadows\n      });\n      primitives.add(primitive);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n      const oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n    this.waitingOnCreate = true;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n    if (defined(this.depthFailAppearanceType) && !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)) {\n      this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n      this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n    }\n    const updatersWithAttributes = this.updatersWithAttributes.values;\n    const length = updatersWithAttributes.length;\n    const waitingOnCreate = this.waitingOnCreate;\n    for (i = 0; i < length; i++) {\n      const updater = updatersWithAttributes[i];\n      const instance = this.geometry.get(updater.id);\n      let attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n      if (!updater.fillMaterialProperty.isConstant || waitingOnCreate) {\n        const colorProperty = updater.fillMaterialProperty.color;\n        const resultColor = Property.getValueOrDefault(colorProperty, time, Color.WHITE, colorScratch);\n        if (!Color.equals(attributes._lastColor, resultColor)) {\n          attributes._lastColor = Color.clone(resultColor, attributes._lastColor);\n          attributes.color = ColorGeometryInstanceAttribute.toValue(resultColor, attributes.color);\n          if (this.translucent && attributes.color[3] === 255 || !this.translucent && attributes.color[3] !== 255) {\n            this.itemsToRemove[removedCount++] = updater;\n          }\n        }\n      }\n      if (defined(this.depthFailAppearanceType) && updater.depthFailMaterialProperty instanceof ColorMaterialProperty && (!updater.depthFailMaterialProperty.isConstant || waitingOnCreate)) {\n        const depthFailColorProperty = updater.depthFailMaterialProperty.color;\n        const depthColor = Property.getValueOrDefault(depthFailColorProperty, time, Color.WHITE, colorScratch);\n        if (!Color.equals(attributes._lastDepthFailColor, depthColor)) {\n          attributes._lastDepthFailColor = Color.clone(depthColor, attributes._lastDepthFailColor);\n          attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(depthColor, attributes.depthFailColor);\n        }\n      }\n      const show = updater.entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n      const currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      }\n      const distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        const distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n        if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n          attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n          attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n        }\n      }\n      const offsetProperty = updater.terrainOffsetProperty;\n      if (!Property.isConstant(offsetProperty)) {\n        const offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n        if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n          attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n          attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n        }\n      }\n    }\n    this.updateShows(primitive);\n    this.waitingOnCreate = false;\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n  this.itemsToRemove.length = removedCount;\n  return isUpdated;\n};\nBatch.prototype.updateShows = function (primitive) {\n  const showsUpdated = this.showsUpdated.values;\n  const length = showsUpdated.length;\n  for (let i = 0; i < length; i++) {\n    const updater = showsUpdated[i];\n    const instance = this.geometry.get(updater.id);\n    let attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n    const show = updater.entity.isShowing;\n    const currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  const primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n  const attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n  if (!defined(attributes) || !defined(attributes.boundingSphere) ||\n  //\n  defined(attributes.show) && attributes.show[0] === 0) {\n    return BoundingSphereState.FAILED;\n  }\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\nBatch.prototype.destroy = function () {\n  const primitive = this.primitive;\n  const primitives = this.primitives;\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n  }\n  const oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n  }\n  if (defined(this.removeMaterialSubscription)) {\n    this.removeMaterialSubscription();\n  }\n};\n\n/**\n * @private\n */\nfunction StaticGeometryColorBatch(primitives, appearanceType, depthFailAppearanceType, closed, shadows) {\n  this._solidItems = [];\n  this._translucentItems = [];\n  this._primitives = primitives;\n  this._appearanceType = appearanceType;\n  this._depthFailAppearanceType = depthFailAppearanceType;\n  this._closed = closed;\n  this._shadows = shadows;\n}\nStaticGeometryColorBatch.prototype.add = function (time, updater) {\n  let items;\n  let translucent;\n  const instance = updater.createFillGeometryInstance(time);\n  if (instance.attributes.color.value[3] === 255) {\n    items = this._solidItems;\n    translucent = false;\n  } else {\n    items = this._translucentItems;\n    translucent = true;\n  }\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    const item = items[i];\n    if (item.isMaterial(updater)) {\n      item.add(updater, instance);\n      return;\n    }\n  }\n  const batch = new Batch(this._primitives, translucent, this._appearanceType, this._depthFailAppearanceType, updater.depthFailMaterialProperty, this._closed, this._shadows);\n  batch.add(updater, instance);\n  items.push(batch);\n};\nfunction removeItem(items, updater) {\n  const length = items.length;\n  for (let i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n      return true;\n    }\n  }\n  return false;\n}\nStaticGeometryColorBatch.prototype.remove = function (updater) {\n  if (!removeItem(this._solidItems, updater)) {\n    removeItem(this._translucentItems, updater);\n  }\n};\nfunction moveItems(batch, items, time) {\n  let itemsMoved = false;\n  const length = items.length;\n  for (let i = 0; i < length; ++i) {\n    const item = items[i];\n    const itemsToRemove = item.itemsToRemove;\n    const itemsToMoveLength = itemsToRemove.length;\n    if (itemsToMoveLength > 0) {\n      for (i = 0; i < itemsToMoveLength; i++) {\n        const updater = itemsToRemove[i];\n        item.remove(updater);\n        batch.add(time, updater);\n        itemsMoved = true;\n      }\n    }\n  }\n  return itemsMoved;\n}\nfunction updateItems(batch, items, time, isUpdated) {\n  let length = items.length;\n  let i;\n  for (i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.invalidated) {\n      items.splice(i, 1);\n      const updaters = item.updaters.values;\n      const updatersLength = updaters.length;\n      for (let h = 0; h < updatersLength; h++) {\n        batch.add(time, updaters[h]);\n      }\n      item.destroy();\n    }\n  }\n  length = items.length;\n  for (i = 0; i < length; ++i) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n  return isUpdated;\n}\nStaticGeometryColorBatch.prototype.update = function (time) {\n  //Perform initial update\n  let isUpdated = updateItems(this, this._solidItems, time, true);\n  isUpdated = updateItems(this, this._translucentItems, time, isUpdated) && isUpdated;\n\n  //If any items swapped between solid/translucent, we need to\n  //move them between batches\n  const solidsMoved = moveItems(this, this._solidItems, time);\n  const translucentsMoved = moveItems(this, this._translucentItems, time);\n\n  //If we moved anything around, we need to re-build the primitive\n  if (solidsMoved || translucentsMoved) {\n    isUpdated = updateItems(this, this._solidItems, time, isUpdated) && isUpdated;\n    isUpdated = updateItems(this, this._translucentItems, time, isUpdated) && isUpdated;\n  }\n  return isUpdated;\n};\nfunction getBoundingSphere(items, updater, result) {\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    const item = items[i];\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n  return BoundingSphereState.FAILED;\n}\nStaticGeometryColorBatch.prototype.getBoundingSphere = function (updater, result) {\n  const boundingSphere = getBoundingSphere(this._solidItems, updater, result);\n  if (boundingSphere === BoundingSphereState.FAILED) {\n    return getBoundingSphere(this._translucentItems, updater, result);\n  }\n  return boundingSphere;\n};\nfunction removeAllPrimitives(items) {\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n  items.length = 0;\n}\nStaticGeometryColorBatch.prototype.removeAllPrimitives = function () {\n  removeAllPrimitives(this._solidItems);\n  removeAllPrimitives(this._translucentItems);\n};\nexport default StaticGeometryColorBatch;","map":{"version":3,"names":["AssociativeArray","Cartesian3","Color","ColorGeometryInstanceAttribute","defined","DistanceDisplayCondition","DistanceDisplayConditionGeometryInstanceAttribute","OffsetGeometryInstanceAttribute","ShowGeometryInstanceAttribute","Primitive","BoundingSphereState","ColorMaterialProperty","MaterialProperty","Property","colorScratch","distanceDisplayConditionScratch","defaultDistanceDisplayCondition","defaultOffset","ZERO","offsetScratch","Batch","primitives","translucent","appearanceType","depthFailAppearanceType","depthFailMaterialProperty","closed","shadows","depthFailMaterial","undefined","createPrimitive","waitingOnCreate","primitive","oldPrimitive","geometry","updaters","updatersWithAttributes","attributes","subscriptions","showsUpdated","itemsToRemove","invalidated","removeMaterialSubscription","definitionChanged","addEventListener","prototype","onMaterialChanged","isMaterial","updater","material","updaterMaterial","equals","add","instance","id","set","hasConstantFill","fillMaterialProperty","isConstant","distanceDisplayConditionProperty","terrainOffsetProperty","that","entity","propertyName","newValue","oldValue","remove","unsubscribe","get","update","time","isUpdated","removedCount","i","geometries","values","geometriesLength","length","depthFailAppearance","getValue","show","asynchronous","geometryInstances","slice","appearance","removeAll","ready","getGeometryInstanceAttributes","colorProperty","color","resultColor","getValueOrDefault","WHITE","_lastColor","clone","toValue","depthFailColorProperty","depthColor","_lastDepthFailColor","depthFailColor","isShowing","isFilled","currentShow","distanceDisplayCondition","_lastDistanceDisplayCondition","offsetProperty","offset","_lastOffset","updateShows","value","contains","getBoundingSphere","result","PENDING","boundingSphere","FAILED","DONE","destroy","StaticGeometryColorBatch","_solidItems","_translucentItems","_primitives","_appearanceType","_depthFailAppearanceType","_closed","_shadows","items","createFillGeometryInstance","item","batch","push","removeItem","splice","moveItems","itemsMoved","itemsToMoveLength","updateItems","updatersLength","h","solidsMoved","translucentsMoved","removeAllPrimitives"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/StaticGeometryColorBatch.js"],"sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\n\nconst colorScratch = new Color();\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\nconst defaultDistanceDisplayCondition = new DistanceDisplayCondition();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\n\nfunction Batch(\n  primitives,\n  translucent,\n  appearanceType,\n  depthFailAppearanceType,\n  depthFailMaterialProperty,\n  closed,\n  shadows,\n) {\n  this.translucent = translucent;\n  this.appearanceType = appearanceType;\n  this.depthFailAppearanceType = depthFailAppearanceType;\n  this.depthFailMaterialProperty = depthFailMaterialProperty;\n  this.depthFailMaterial = undefined;\n  this.closed = closed;\n  this.shadows = shadows;\n  this.primitives = primitives;\n  this.createPrimitive = false;\n  this.waitingOnCreate = false;\n  this.primitive = undefined;\n  this.oldPrimitive = undefined;\n  this.geometry = new AssociativeArray();\n  this.updaters = new AssociativeArray();\n  this.updatersWithAttributes = new AssociativeArray();\n  this.attributes = new AssociativeArray();\n  this.subscriptions = new AssociativeArray();\n  this.showsUpdated = new AssociativeArray();\n  this.itemsToRemove = [];\n  this.invalidated = false;\n\n  let removeMaterialSubscription;\n  if (defined(depthFailMaterialProperty)) {\n    removeMaterialSubscription =\n      depthFailMaterialProperty.definitionChanged.addEventListener(\n        Batch.prototype.onMaterialChanged,\n        this,\n      );\n  }\n  this.removeMaterialSubscription = removeMaterialSubscription;\n}\n\nBatch.prototype.onMaterialChanged = function () {\n  this.invalidated = true;\n};\n\nBatch.prototype.isMaterial = function (updater) {\n  const material = this.depthFailMaterialProperty;\n  const updaterMaterial = updater.depthFailMaterialProperty;\n  if (updaterMaterial === material) {\n    return true;\n  }\n  if (defined(material)) {\n    return material.equals(updaterMaterial);\n  }\n  return false;\n};\n\nBatch.prototype.add = function (updater, instance) {\n  const id = updater.id;\n  this.createPrimitive = true;\n  this.geometry.set(id, instance);\n  this.updaters.set(id, updater);\n  if (\n    !updater.hasConstantFill ||\n    !updater.fillMaterialProperty.isConstant ||\n    !Property.isConstant(updater.distanceDisplayConditionProperty) ||\n    !Property.isConstant(updater.terrainOffsetProperty)\n  ) {\n    this.updatersWithAttributes.set(id, updater);\n  } else {\n    const that = this;\n    this.subscriptions.set(\n      id,\n      updater.entity.definitionChanged.addEventListener(\n        function (entity, propertyName, newValue, oldValue) {\n          if (propertyName === \"isShowing\") {\n            that.showsUpdated.set(updater.id, updater);\n          }\n        },\n      ),\n    );\n  }\n};\n\nBatch.prototype.remove = function (updater) {\n  const id = updater.id;\n  this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n  if (this.updaters.remove(id)) {\n    this.updatersWithAttributes.remove(id);\n    const unsubscribe = this.subscriptions.get(id);\n    if (defined(unsubscribe)) {\n      unsubscribe();\n      this.subscriptions.remove(id);\n      this.showsUpdated.remove(id);\n    }\n    return true;\n  }\n  return false;\n};\n\nBatch.prototype.update = function (time) {\n  let isUpdated = true;\n  let removedCount = 0;\n  let primitive = this.primitive;\n  const primitives = this.primitives;\n  let i;\n\n  if (this.createPrimitive) {\n    const geometries = this.geometry.values;\n    const geometriesLength = geometries.length;\n    if (geometriesLength > 0) {\n      if (defined(primitive)) {\n        if (!defined(this.oldPrimitive)) {\n          this.oldPrimitive = primitive;\n        } else {\n          primitives.remove(primitive);\n        }\n      }\n\n      let depthFailAppearance;\n      if (defined(this.depthFailAppearanceType)) {\n        if (defined(this.depthFailMaterialProperty)) {\n          this.depthFailMaterial = MaterialProperty.getValue(\n            time,\n            this.depthFailMaterialProperty,\n            this.depthFailMaterial,\n          );\n        }\n        depthFailAppearance = new this.depthFailAppearanceType({\n          material: this.depthFailMaterial,\n          translucent: this.translucent,\n          closed: this.closed,\n        });\n      }\n\n      primitive = new Primitive({\n        show: false,\n        asynchronous: true,\n        geometryInstances: geometries.slice(),\n        appearance: new this.appearanceType({\n          translucent: this.translucent,\n          closed: this.closed,\n        }),\n        depthFailAppearance: depthFailAppearance,\n        shadows: this.shadows,\n      });\n      primitives.add(primitive);\n      isUpdated = false;\n    } else {\n      if (defined(primitive)) {\n        primitives.remove(primitive);\n        primitive = undefined;\n      }\n      const oldPrimitive = this.oldPrimitive;\n      if (defined(oldPrimitive)) {\n        primitives.remove(oldPrimitive);\n        this.oldPrimitive = undefined;\n      }\n    }\n\n    this.attributes.removeAll();\n    this.primitive = primitive;\n    this.createPrimitive = false;\n    this.waitingOnCreate = true;\n  } else if (defined(primitive) && primitive.ready) {\n    primitive.show = true;\n    if (defined(this.oldPrimitive)) {\n      primitives.remove(this.oldPrimitive);\n      this.oldPrimitive = undefined;\n    }\n\n    if (\n      defined(this.depthFailAppearanceType) &&\n      !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)\n    ) {\n      this.depthFailMaterial = MaterialProperty.getValue(\n        time,\n        this.depthFailMaterialProperty,\n        this.depthFailMaterial,\n      );\n      this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n    }\n\n    const updatersWithAttributes = this.updatersWithAttributes.values;\n    const length = updatersWithAttributes.length;\n    const waitingOnCreate = this.waitingOnCreate;\n    for (i = 0; i < length; i++) {\n      const updater = updatersWithAttributes[i];\n      const instance = this.geometry.get(updater.id);\n\n      let attributes = this.attributes.get(instance.id.id);\n      if (!defined(attributes)) {\n        attributes = primitive.getGeometryInstanceAttributes(instance.id);\n        this.attributes.set(instance.id.id, attributes);\n      }\n\n      if (!updater.fillMaterialProperty.isConstant || waitingOnCreate) {\n        const colorProperty = updater.fillMaterialProperty.color;\n        const resultColor = Property.getValueOrDefault(\n          colorProperty,\n          time,\n          Color.WHITE,\n          colorScratch,\n        );\n        if (!Color.equals(attributes._lastColor, resultColor)) {\n          attributes._lastColor = Color.clone(\n            resultColor,\n            attributes._lastColor,\n          );\n          attributes.color = ColorGeometryInstanceAttribute.toValue(\n            resultColor,\n            attributes.color,\n          );\n          if (\n            (this.translucent && attributes.color[3] === 255) ||\n            (!this.translucent && attributes.color[3] !== 255)\n          ) {\n            this.itemsToRemove[removedCount++] = updater;\n          }\n        }\n      }\n\n      if (\n        defined(this.depthFailAppearanceType) &&\n        updater.depthFailMaterialProperty instanceof ColorMaterialProperty &&\n        (!updater.depthFailMaterialProperty.isConstant || waitingOnCreate)\n      ) {\n        const depthFailColorProperty = updater.depthFailMaterialProperty.color;\n        const depthColor = Property.getValueOrDefault(\n          depthFailColorProperty,\n          time,\n          Color.WHITE,\n          colorScratch,\n        );\n        if (!Color.equals(attributes._lastDepthFailColor, depthColor)) {\n          attributes._lastDepthFailColor = Color.clone(\n            depthColor,\n            attributes._lastDepthFailColor,\n          );\n          attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(\n            depthColor,\n            attributes.depthFailColor,\n          );\n        }\n      }\n\n      const show =\n        updater.entity.isShowing &&\n        (updater.hasConstantFill || updater.isFilled(time));\n      const currentShow = attributes.show[0] === 1;\n      if (show !== currentShow) {\n        attributes.show = ShowGeometryInstanceAttribute.toValue(\n          show,\n          attributes.show,\n        );\n      }\n\n      const distanceDisplayConditionProperty =\n        updater.distanceDisplayConditionProperty;\n      if (!Property.isConstant(distanceDisplayConditionProperty)) {\n        const distanceDisplayCondition = Property.getValueOrDefault(\n          distanceDisplayConditionProperty,\n          time,\n          defaultDistanceDisplayCondition,\n          distanceDisplayConditionScratch,\n        );\n        if (\n          !DistanceDisplayCondition.equals(\n            distanceDisplayCondition,\n            attributes._lastDistanceDisplayCondition,\n          )\n        ) {\n          attributes._lastDistanceDisplayCondition =\n            DistanceDisplayCondition.clone(\n              distanceDisplayCondition,\n              attributes._lastDistanceDisplayCondition,\n            );\n          attributes.distanceDisplayCondition =\n            DistanceDisplayConditionGeometryInstanceAttribute.toValue(\n              distanceDisplayCondition,\n              attributes.distanceDisplayCondition,\n            );\n        }\n      }\n\n      const offsetProperty = updater.terrainOffsetProperty;\n      if (!Property.isConstant(offsetProperty)) {\n        const offset = Property.getValueOrDefault(\n          offsetProperty,\n          time,\n          defaultOffset,\n          offsetScratch,\n        );\n        if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n          attributes._lastOffset = Cartesian3.clone(\n            offset,\n            attributes._lastOffset,\n          );\n          attributes.offset = OffsetGeometryInstanceAttribute.toValue(\n            offset,\n            attributes.offset,\n          );\n        }\n      }\n    }\n\n    this.updateShows(primitive);\n    this.waitingOnCreate = false;\n  } else if (defined(primitive) && !primitive.ready) {\n    isUpdated = false;\n  }\n  this.itemsToRemove.length = removedCount;\n  return isUpdated;\n};\n\nBatch.prototype.updateShows = function (primitive) {\n  const showsUpdated = this.showsUpdated.values;\n  const length = showsUpdated.length;\n  for (let i = 0; i < length; i++) {\n    const updater = showsUpdated[i];\n    const instance = this.geometry.get(updater.id);\n\n    let attributes = this.attributes.get(instance.id.id);\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(instance.id);\n      this.attributes.set(instance.id.id, attributes);\n    }\n\n    const show = updater.entity.isShowing;\n    const currentShow = attributes.show[0] === 1;\n    if (show !== currentShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(\n        show,\n        attributes.show,\n      );\n      instance.attributes.show.value[0] = attributes.show[0];\n    }\n  }\n  this.showsUpdated.removeAll();\n};\n\nBatch.prototype.contains = function (updater) {\n  return this.updaters.contains(updater.id);\n};\n\nBatch.prototype.getBoundingSphere = function (updater, result) {\n  const primitive = this.primitive;\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n  const attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n  if (\n    !defined(attributes) ||\n    !defined(attributes.boundingSphere) || //\n    (defined(attributes.show) && attributes.show[0] === 0)\n  ) {\n    return BoundingSphereState.FAILED;\n  }\n  attributes.boundingSphere.clone(result);\n  return BoundingSphereState.DONE;\n};\n\nBatch.prototype.destroy = function () {\n  const primitive = this.primitive;\n  const primitives = this.primitives;\n  if (defined(primitive)) {\n    primitives.remove(primitive);\n  }\n  const oldPrimitive = this.oldPrimitive;\n  if (defined(oldPrimitive)) {\n    primitives.remove(oldPrimitive);\n  }\n  if (defined(this.removeMaterialSubscription)) {\n    this.removeMaterialSubscription();\n  }\n};\n\n/**\n * @private\n */\nfunction StaticGeometryColorBatch(\n  primitives,\n  appearanceType,\n  depthFailAppearanceType,\n  closed,\n  shadows,\n) {\n  this._solidItems = [];\n  this._translucentItems = [];\n  this._primitives = primitives;\n  this._appearanceType = appearanceType;\n  this._depthFailAppearanceType = depthFailAppearanceType;\n  this._closed = closed;\n  this._shadows = shadows;\n}\n\nStaticGeometryColorBatch.prototype.add = function (time, updater) {\n  let items;\n  let translucent;\n  const instance = updater.createFillGeometryInstance(time);\n  if (instance.attributes.color.value[3] === 255) {\n    items = this._solidItems;\n    translucent = false;\n  } else {\n    items = this._translucentItems;\n    translucent = true;\n  }\n\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    const item = items[i];\n    if (item.isMaterial(updater)) {\n      item.add(updater, instance);\n      return;\n    }\n  }\n  const batch = new Batch(\n    this._primitives,\n    translucent,\n    this._appearanceType,\n    this._depthFailAppearanceType,\n    updater.depthFailMaterialProperty,\n    this._closed,\n    this._shadows,\n  );\n  batch.add(updater, instance);\n  items.push(batch);\n};\n\nfunction removeItem(items, updater) {\n  const length = items.length;\n  for (let i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.remove(updater)) {\n      if (item.updaters.length === 0) {\n        items.splice(i, 1);\n        item.destroy();\n      }\n      return true;\n    }\n  }\n  return false;\n}\n\nStaticGeometryColorBatch.prototype.remove = function (updater) {\n  if (!removeItem(this._solidItems, updater)) {\n    removeItem(this._translucentItems, updater);\n  }\n};\n\nfunction moveItems(batch, items, time) {\n  let itemsMoved = false;\n  const length = items.length;\n  for (let i = 0; i < length; ++i) {\n    const item = items[i];\n    const itemsToRemove = item.itemsToRemove;\n    const itemsToMoveLength = itemsToRemove.length;\n    if (itemsToMoveLength > 0) {\n      for (i = 0; i < itemsToMoveLength; i++) {\n        const updater = itemsToRemove[i];\n        item.remove(updater);\n        batch.add(time, updater);\n        itemsMoved = true;\n      }\n    }\n  }\n  return itemsMoved;\n}\n\nfunction updateItems(batch, items, time, isUpdated) {\n  let length = items.length;\n  let i;\n  for (i = length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.invalidated) {\n      items.splice(i, 1);\n      const updaters = item.updaters.values;\n      const updatersLength = updaters.length;\n      for (let h = 0; h < updatersLength; h++) {\n        batch.add(time, updaters[h]);\n      }\n      item.destroy();\n    }\n  }\n\n  length = items.length;\n  for (i = 0; i < length; ++i) {\n    isUpdated = items[i].update(time) && isUpdated;\n  }\n  return isUpdated;\n}\n\nStaticGeometryColorBatch.prototype.update = function (time) {\n  //Perform initial update\n  let isUpdated = updateItems(this, this._solidItems, time, true);\n  isUpdated =\n    updateItems(this, this._translucentItems, time, isUpdated) && isUpdated;\n\n  //If any items swapped between solid/translucent, we need to\n  //move them between batches\n  const solidsMoved = moveItems(this, this._solidItems, time);\n  const translucentsMoved = moveItems(this, this._translucentItems, time);\n\n  //If we moved anything around, we need to re-build the primitive\n  if (solidsMoved || translucentsMoved) {\n    isUpdated =\n      updateItems(this, this._solidItems, time, isUpdated) && isUpdated;\n    isUpdated =\n      updateItems(this, this._translucentItems, time, isUpdated) && isUpdated;\n  }\n\n  return isUpdated;\n};\n\nfunction getBoundingSphere(items, updater, result) {\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    const item = items[i];\n    if (item.contains(updater)) {\n      return item.getBoundingSphere(updater, result);\n    }\n  }\n  return BoundingSphereState.FAILED;\n}\n\nStaticGeometryColorBatch.prototype.getBoundingSphere = function (\n  updater,\n  result,\n) {\n  const boundingSphere = getBoundingSphere(this._solidItems, updater, result);\n  if (boundingSphere === BoundingSphereState.FAILED) {\n    return getBoundingSphere(this._translucentItems, updater, result);\n  }\n  return boundingSphere;\n};\n\nfunction removeAllPrimitives(items) {\n  const length = items.length;\n  for (let i = 0; i < length; i++) {\n    items[i].destroy();\n  }\n  items.length = 0;\n}\n\nStaticGeometryColorBatch.prototype.removeAllPrimitives = function () {\n  removeAllPrimitives(this._solidItems);\n  removeAllPrimitives(this._translucentItems);\n};\nexport default StaticGeometryColorBatch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}