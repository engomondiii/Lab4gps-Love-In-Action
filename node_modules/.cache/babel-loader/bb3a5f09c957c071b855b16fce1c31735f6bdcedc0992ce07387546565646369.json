{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport RequestState from \"./RequestState.js\";\nimport RequestType from \"./RequestType.js\";\n\n/**\n * Stores information for making a request. In general this does not need to be constructed directly.\n *\n * @alias Request\n * @constructor\n\n * @param {object} [options] An object with the following properties:\n * @param {string} [options.url] The url to request.\n * @param {Request.RequestCallback} [options.requestFunction] The function that makes the actual data request.\n * @param {Request.CancelCallback} [options.cancelFunction] The function that is called when the request is cancelled.\n * @param {Request.PriorityCallback} [options.priorityFunction] The function that is called to update the request's priority, which occurs once per frame.\n * @param {number} [options.priority=0.0] The initial priority of the request.\n * @param {boolean} [options.throttle=false] Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the request will be throttled and sent based on priority.\n * @param {boolean} [options.throttleByServer=false] Whether to throttle the request by server.\n * @param {RequestType} [options.type=RequestType.OTHER] The type of request.\n * @param {string} [options.serverKey] A key used to identify the server that a request is going to.\n */\nfunction Request(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const throttleByServer = defaultValue(options.throttleByServer, false);\n  const throttle = defaultValue(options.throttle, false);\n\n  /**\n   * The URL to request.\n   *\n   * @type {string}\n   */\n  this.url = options.url;\n\n  /**\n   * The function that makes the actual data request.\n   *\n   * @type {Request.RequestCallback}\n   */\n  this.requestFunction = options.requestFunction;\n\n  /**\n   * The function that is called when the request is cancelled.\n   *\n   * @type {Request.CancelCallback}\n   */\n  this.cancelFunction = options.cancelFunction;\n\n  /**\n   * The function that is called to update the request's priority, which occurs once per frame.\n   *\n   * @type {Request.PriorityCallback}\n   */\n  this.priorityFunction = options.priorityFunction;\n\n  /**\n   * Priority is a unit-less value where lower values represent higher priority.\n   * For world-based objects, this is usually the distance from the camera.\n   * A request that does not have a priority function defaults to a priority of 0.\n   *\n   * If priorityFunction is defined, this value is updated every frame with the result of that call.\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.priority = defaultValue(options.priority, 0.0);\n\n  /**\n   * Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the\n   * request will be throttled and sent based on priority.\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  this.throttle = throttle;\n\n  /**\n   * Whether to throttle the request by server. Browsers typically support about 6-8 parallel connections\n   * for HTTP/1 servers, and an unlimited amount of connections for HTTP/2 servers. Setting this value\n   * to <code>true</code> is preferable for requests going through HTTP/1 servers.\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  this.throttleByServer = throttleByServer;\n\n  /**\n   * Type of request.\n   *\n   * @type {RequestType}\n   * @readonly\n   *\n   * @default RequestType.OTHER\n   */\n  this.type = defaultValue(options.type, RequestType.OTHER);\n\n  /**\n   * A key used to identify the server that a request is going to. It is derived from the url's authority and scheme.\n   *\n   * @type {string}\n   *\n   * @private\n   */\n  this.serverKey = options.serverKey;\n\n  /**\n   * The current state of the request.\n   *\n   * @type {RequestState}\n   * @readonly\n   */\n  this.state = RequestState.UNISSUED;\n\n  /**\n   * The requests's deferred promise.\n   *\n   * @type {object}\n   *\n   * @private\n   */\n  this.deferred = undefined;\n\n  /**\n   * Whether the request was explicitly cancelled.\n   *\n   * @type {boolean}\n   *\n   * @private\n   */\n  this.cancelled = false;\n}\n\n/**\n * Mark the request as cancelled.\n *\n * @private\n */\nRequest.prototype.cancel = function () {\n  this.cancelled = true;\n};\n\n/**\n * Duplicates a Request instance.\n *\n * @param {Request} [result] The object onto which to store the result.\n *\n * @returns {Request} The modified result parameter or a new Resource instance if one was not provided.\n */\nRequest.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new Request(this);\n  }\n  result.url = this.url;\n  result.requestFunction = this.requestFunction;\n  result.cancelFunction = this.cancelFunction;\n  result.priorityFunction = this.priorityFunction;\n  result.priority = this.priority;\n  result.throttle = this.throttle;\n  result.throttleByServer = this.throttleByServer;\n  result.type = this.type;\n  result.serverKey = this.serverKey;\n\n  // These get defaulted because the cloned request hasn't been issued\n  result.state = RequestState.UNISSUED;\n  result.deferred = undefined;\n  result.cancelled = false;\n  return result;\n};\n\n/**\n * The function that makes the actual data request.\n * @callback Request.RequestCallback\n * @returns {Promise<void>} A promise for the requested data.\n */\n\n/**\n * The function that is called when the request is cancelled.\n * @callback Request.CancelCallback\n */\n\n/**\n * The function that is called to update the request's priority, which occurs once per frame.\n * @callback Request.PriorityCallback\n * @returns {number} The updated priority value.\n */\nexport default Request;","map":{"version":3,"names":["defaultValue","defined","RequestState","RequestType","Request","options","EMPTY_OBJECT","throttleByServer","throttle","url","requestFunction","cancelFunction","priorityFunction","priority","type","OTHER","serverKey","state","UNISSUED","deferred","undefined","cancelled","prototype","cancel","clone","result"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/Request.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport RequestState from \"./RequestState.js\";\nimport RequestType from \"./RequestType.js\";\n\n/**\n * Stores information for making a request. In general this does not need to be constructed directly.\n *\n * @alias Request\n * @constructor\n\n * @param {object} [options] An object with the following properties:\n * @param {string} [options.url] The url to request.\n * @param {Request.RequestCallback} [options.requestFunction] The function that makes the actual data request.\n * @param {Request.CancelCallback} [options.cancelFunction] The function that is called when the request is cancelled.\n * @param {Request.PriorityCallback} [options.priorityFunction] The function that is called to update the request's priority, which occurs once per frame.\n * @param {number} [options.priority=0.0] The initial priority of the request.\n * @param {boolean} [options.throttle=false] Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the request will be throttled and sent based on priority.\n * @param {boolean} [options.throttleByServer=false] Whether to throttle the request by server.\n * @param {RequestType} [options.type=RequestType.OTHER] The type of request.\n * @param {string} [options.serverKey] A key used to identify the server that a request is going to.\n */\nfunction Request(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const throttleByServer = defaultValue(options.throttleByServer, false);\n  const throttle = defaultValue(options.throttle, false);\n\n  /**\n   * The URL to request.\n   *\n   * @type {string}\n   */\n  this.url = options.url;\n\n  /**\n   * The function that makes the actual data request.\n   *\n   * @type {Request.RequestCallback}\n   */\n  this.requestFunction = options.requestFunction;\n\n  /**\n   * The function that is called when the request is cancelled.\n   *\n   * @type {Request.CancelCallback}\n   */\n  this.cancelFunction = options.cancelFunction;\n\n  /**\n   * The function that is called to update the request's priority, which occurs once per frame.\n   *\n   * @type {Request.PriorityCallback}\n   */\n  this.priorityFunction = options.priorityFunction;\n\n  /**\n   * Priority is a unit-less value where lower values represent higher priority.\n   * For world-based objects, this is usually the distance from the camera.\n   * A request that does not have a priority function defaults to a priority of 0.\n   *\n   * If priorityFunction is defined, this value is updated every frame with the result of that call.\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.priority = defaultValue(options.priority, 0.0);\n\n  /**\n   * Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the\n   * request will be throttled and sent based on priority.\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  this.throttle = throttle;\n\n  /**\n   * Whether to throttle the request by server. Browsers typically support about 6-8 parallel connections\n   * for HTTP/1 servers, and an unlimited amount of connections for HTTP/2 servers. Setting this value\n   * to <code>true</code> is preferable for requests going through HTTP/1 servers.\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  this.throttleByServer = throttleByServer;\n\n  /**\n   * Type of request.\n   *\n   * @type {RequestType}\n   * @readonly\n   *\n   * @default RequestType.OTHER\n   */\n  this.type = defaultValue(options.type, RequestType.OTHER);\n\n  /**\n   * A key used to identify the server that a request is going to. It is derived from the url's authority and scheme.\n   *\n   * @type {string}\n   *\n   * @private\n   */\n  this.serverKey = options.serverKey;\n\n  /**\n   * The current state of the request.\n   *\n   * @type {RequestState}\n   * @readonly\n   */\n  this.state = RequestState.UNISSUED;\n\n  /**\n   * The requests's deferred promise.\n   *\n   * @type {object}\n   *\n   * @private\n   */\n  this.deferred = undefined;\n\n  /**\n   * Whether the request was explicitly cancelled.\n   *\n   * @type {boolean}\n   *\n   * @private\n   */\n  this.cancelled = false;\n}\n\n/**\n * Mark the request as cancelled.\n *\n * @private\n */\nRequest.prototype.cancel = function () {\n  this.cancelled = true;\n};\n\n/**\n * Duplicates a Request instance.\n *\n * @param {Request} [result] The object onto which to store the result.\n *\n * @returns {Request} The modified result parameter or a new Resource instance if one was not provided.\n */\nRequest.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new Request(this);\n  }\n\n  result.url = this.url;\n  result.requestFunction = this.requestFunction;\n  result.cancelFunction = this.cancelFunction;\n  result.priorityFunction = this.priorityFunction;\n  result.priority = this.priority;\n  result.throttle = this.throttle;\n  result.throttleByServer = this.throttleByServer;\n  result.type = this.type;\n  result.serverKey = this.serverKey;\n\n  // These get defaulted because the cloned request hasn't been issued\n  result.state = RequestState.UNISSUED;\n  result.deferred = undefined;\n  result.cancelled = false;\n\n  return result;\n};\n\n/**\n * The function that makes the actual data request.\n * @callback Request.RequestCallback\n * @returns {Promise<void>} A promise for the requested data.\n */\n\n/**\n * The function that is called when the request is cancelled.\n * @callback Request.CancelCallback\n */\n\n/**\n * The function that is called to update the request's priority, which occurs once per frame.\n * @callback Request.PriorityCallback\n * @returns {number} The updated priority value.\n */\nexport default Request;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}