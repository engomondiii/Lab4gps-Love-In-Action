{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport Pass from \"./Pass.js\";\n\n/**\n * Represents a command to the renderer for GPU Compute (using old-school GPGPU).\n *\n * @private\n * @constructor\n */\nfunction ComputeCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The vertex array. If none is provided, a viewport quad will be used.\n   *\n   * @type {VertexArray}\n   * @default undefined\n   */\n  this.vertexArray = options.vertexArray;\n\n  /**\n   * The fragment shader source. The default vertex shader is ViewportQuadVS.\n   *\n   * @type {ShaderSource}\n   * @default undefined\n   */\n  this.fragmentShaderSource = options.fragmentShaderSource;\n\n  /**\n   * The shader program to apply.\n   *\n   * @type {ShaderProgram}\n   * @default undefined\n   */\n  this.shaderProgram = options.shaderProgram;\n\n  /**\n   * An object with functions whose names match the uniforms in the shader program\n   * and return values to set those uniforms.\n   *\n   * @type {object}\n   * @default undefined\n   */\n  this.uniformMap = options.uniformMap;\n\n  /**\n   * Texture to use for offscreen rendering.\n   *\n   * @type {Texture}\n   * @default undefined\n   */\n  this.outputTexture = options.outputTexture;\n\n  /**\n   * Function that is called immediately before the ComputeCommand is executed. Used to\n   * update any renderer resources. Takes the ComputeCommand as its single argument.\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.preExecute = options.preExecute;\n\n  /**\n   * Function that is called after the ComputeCommand is executed. Takes the output\n   * texture as its single argument.\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.postExecute = options.postExecute;\n\n  /**\n   * Function that is called when the command is canceled\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.canceled = options.canceled;\n\n  /**\n   * Whether the renderer resources will persist beyond this call. If not, they\n   * will be destroyed after completion.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.persists = defaultValue(options.persists, false);\n\n  /**\n   * The pass when to render. Always compute pass.\n   *\n   * @type {Pass}\n   * @default Pass.COMPUTE;\n   */\n  this.pass = Pass.COMPUTE;\n\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows us to see who created a command when we only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @type {object}\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  this.owner = options.owner;\n}\n\n/**\n * Executes the compute command.\n *\n * @param {ComputeEngine} computeEngine The context that processes the compute command.\n */\nComputeCommand.prototype.execute = function (computeEngine) {\n  computeEngine.execute(this);\n};\nexport default ComputeCommand;","map":{"version":3,"names":["defaultValue","Pass","ComputeCommand","options","EMPTY_OBJECT","vertexArray","fragmentShaderSource","shaderProgram","uniformMap","outputTexture","preExecute","postExecute","canceled","persists","pass","COMPUTE","owner","prototype","execute","computeEngine"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/ComputeCommand.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport Pass from \"./Pass.js\";\n\n/**\n * Represents a command to the renderer for GPU Compute (using old-school GPGPU).\n *\n * @private\n * @constructor\n */\nfunction ComputeCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The vertex array. If none is provided, a viewport quad will be used.\n   *\n   * @type {VertexArray}\n   * @default undefined\n   */\n  this.vertexArray = options.vertexArray;\n\n  /**\n   * The fragment shader source. The default vertex shader is ViewportQuadVS.\n   *\n   * @type {ShaderSource}\n   * @default undefined\n   */\n  this.fragmentShaderSource = options.fragmentShaderSource;\n\n  /**\n   * The shader program to apply.\n   *\n   * @type {ShaderProgram}\n   * @default undefined\n   */\n  this.shaderProgram = options.shaderProgram;\n\n  /**\n   * An object with functions whose names match the uniforms in the shader program\n   * and return values to set those uniforms.\n   *\n   * @type {object}\n   * @default undefined\n   */\n  this.uniformMap = options.uniformMap;\n\n  /**\n   * Texture to use for offscreen rendering.\n   *\n   * @type {Texture}\n   * @default undefined\n   */\n  this.outputTexture = options.outputTexture;\n\n  /**\n   * Function that is called immediately before the ComputeCommand is executed. Used to\n   * update any renderer resources. Takes the ComputeCommand as its single argument.\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.preExecute = options.preExecute;\n\n  /**\n   * Function that is called after the ComputeCommand is executed. Takes the output\n   * texture as its single argument.\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.postExecute = options.postExecute;\n\n  /**\n   * Function that is called when the command is canceled\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.canceled = options.canceled;\n\n  /**\n   * Whether the renderer resources will persist beyond this call. If not, they\n   * will be destroyed after completion.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  this.persists = defaultValue(options.persists, false);\n\n  /**\n   * The pass when to render. Always compute pass.\n   *\n   * @type {Pass}\n   * @default Pass.COMPUTE;\n   */\n  this.pass = Pass.COMPUTE;\n\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows us to see who created a command when we only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @type {object}\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  this.owner = options.owner;\n}\n\n/**\n * Executes the compute command.\n *\n * @param {ComputeEngine} computeEngine The context that processes the compute command.\n */\nComputeCommand.prototype.execute = function (computeEngine) {\n  computeEngine.execute(this);\n};\nexport default ComputeCommand;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,yBAAyB;AAClD,OAAOC,IAAI,MAAM,WAAW;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,OAAO,EAAE;EAC/BA,OAAO,GAAGH,YAAY,CAACG,OAAO,EAAEH,YAAY,CAACI,YAAY,CAAC;;EAE1D;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,WAAW,GAAGF,OAAO,CAACE,WAAW;;EAEtC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,oBAAoB,GAAGH,OAAO,CAACG,oBAAoB;;EAExD;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAGJ,OAAO,CAACI,aAAa;;EAE1C;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAGL,OAAO,CAACK,UAAU;;EAEpC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAGN,OAAO,CAACM,aAAa;;EAE1C;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAGP,OAAO,CAACO,UAAU;;EAEpC;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,WAAW,GAAGR,OAAO,CAACQ,WAAW;;EAEtC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,QAAQ,GAAGT,OAAO,CAACS,QAAQ;;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,QAAQ,GAAGb,YAAY,CAACG,OAAO,CAACU,QAAQ,EAAE,KAAK,CAAC;;EAErD;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,IAAI,GAAGb,IAAI,CAACc,OAAO;;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAGb,OAAO,CAACa,KAAK;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACAd,cAAc,CAACe,SAAS,CAACC,OAAO,GAAG,UAAUC,aAAa,EAAE;EAC1DA,aAAa,CAACD,OAAO,CAAC,IAAI,CAAC;AAC7B,CAAC;AACD,eAAehB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}