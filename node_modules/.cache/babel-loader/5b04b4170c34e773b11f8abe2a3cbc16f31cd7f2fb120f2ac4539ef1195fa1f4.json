{"ast":null,"code":"import BoundingSphere from \"../Core/BoundingSphere.js\";\nimport BoxGeometry from \"../Core/BoxGeometry.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport combine from \"../Core/combine.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport VertexArray from \"../Renderer/VertexArray.js\";\nimport EllipsoidFS from \"../Shaders/EllipsoidFS.js\";\nimport EllipsoidVS from \"../Shaders/EllipsoidVS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport CullFace from \"./CullFace.js\";\nimport Material from \"./Material.js\";\nimport SceneMode from \"./SceneMode.js\";\nconst attributeLocations = {\n  position: 0\n};\n\n/**\n * A renderable ellipsoid.  It can also draw spheres when the three {@link EllipsoidPrimitive#radii} components are equal.\n * <p>\n * This is only supported in 3D.  The ellipsoid is not shown in 2D or Columbus view.\n * </p>\n *\n * @alias EllipsoidPrimitive\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Cartesian3} [options.center=Cartesian3.ZERO] The center of the ellipsoid in the ellipsoid's model coordinates.\n * @param {Cartesian3} [options.radii] The radius of the ellipsoid along the <code>x</code>, <code>y</code>, and <code>z</code> axes in the ellipsoid's model coordinates.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the ellipsoid from model to world coordinates.\n * @param {boolean} [options.show=true] Determines if this primitive will be shown.\n * @param {Material} [options.material=Material.ColorType] The surface appearance of the primitive.\n * @param {object} [options.id] A user-defined object to return when the instance is picked with {@link Scene#pick}\n * @param {boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive's commands' bounding spheres are shown.\n *\n * @private\n */\nfunction EllipsoidPrimitive(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The center of the ellipsoid in the ellipsoid's model coordinates.\n   * <p>\n   * The default is {@link Cartesian3.ZERO}.\n   * </p>\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   *\n   * @see EllipsoidPrimitive#modelMatrix\n   */\n  this.center = Cartesian3.clone(defaultValue(options.center, Cartesian3.ZERO));\n  this._center = new Cartesian3();\n\n  /**\n   * The radius of the ellipsoid along the <code>x</code>, <code>y</code>, and <code>z</code> axes in the ellipsoid's model coordinates.\n   * When these are the same, the ellipsoid is a sphere.\n   * <p>\n   * The default is <code>undefined</code>.  The ellipsoid is not drawn until a radii is provided.\n   * </p>\n   *\n   * @type {Cartesian3}\n   * @default undefined\n   *\n   *\n   * @example\n   * // A sphere with a radius of 2.0\n   * e.radii = new Cesium.Cartesian3(2.0, 2.0, 2.0);\n   *\n   * @see EllipsoidPrimitive#modelMatrix\n   */\n  this.radii = Cartesian3.clone(options.radii);\n  this._radii = new Cartesian3();\n  this._oneOverEllipsoidRadiiSquared = new Cartesian3();\n  this._boundingSphere = new BoundingSphere();\n\n  /**\n   * The 4x4 transformation matrix that transforms the ellipsoid from model to world coordinates.\n   * When this is the identity matrix, the ellipsoid is drawn in world coordinates, i.e., Earth's WGS84 coordinates.\n   * Local reference frames can be used by providing a different transformation matrix, like that returned\n   * by {@link Transforms.eastNorthUpToFixedFrame}.\n   *\n   * @type {Matrix4}\n   * @default {@link Matrix4.IDENTITY}\n   *\n   * @example\n   * const origin = Cesium.Cartesian3.fromDegrees(-95.0, 40.0, 200000.0);\n   * e.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(origin);\n   */\n  this.modelMatrix = Matrix4.clone(defaultValue(options.modelMatrix, Matrix4.IDENTITY));\n  this._modelMatrix = new Matrix4();\n  this._computedModelMatrix = new Matrix4();\n\n  /**\n   * Determines if the ellipsoid primitive will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * The surface appearance of the ellipsoid.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * <p>\n   * The default material is <code>Material.ColorType</code>.\n   * </p>\n   *\n   * @type {Material}\n   * @default Material.fromType(Material.ColorType)\n   *\n   *\n   * @example\n   * // 1. Change the color of the default material to yellow\n   * e.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n   *\n   * // 2. Change material to horizontal stripes\n   * e.material = Cesium.Material.fromType(Cesium.Material.StripeType);\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = defaultValue(options.material, Material.fromType(Material.ColorType));\n  this._material = undefined;\n  this._translucent = undefined;\n\n  /**\n   * User-defined object returned when the ellipsoid is picked.\n   *\n   * @type {object}\n   *\n   * @default undefined\n   *\n   * @see Scene#pick\n   */\n  this.id = options.id;\n  this._id = undefined;\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the bounding sphere for each draw command in the primitive.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugShowBoundingVolume = defaultValue(options.debugShowBoundingVolume, false);\n\n  /**\n   * @private\n   */\n  this.onlySunLighting = defaultValue(options.onlySunLighting, false);\n  this._onlySunLighting = false;\n\n  /**\n   * @private\n   */\n  this._depthTestEnabled = defaultValue(options.depthTestEnabled, true);\n  this._useLogDepth = false;\n  this._sp = undefined;\n  this._rs = undefined;\n  this._va = undefined;\n  this._pickSP = undefined;\n  this._pickId = undefined;\n  this._colorCommand = new DrawCommand({\n    owner: defaultValue(options._owner, this)\n  });\n  this._pickCommand = new DrawCommand({\n    owner: defaultValue(options._owner, this),\n    pickOnly: true\n  });\n  const that = this;\n  this._uniforms = {\n    u_radii: function () {\n      return that.radii;\n    },\n    u_oneOverEllipsoidRadiiSquared: function () {\n      return that._oneOverEllipsoidRadiiSquared;\n    }\n  };\n  this._pickUniforms = {\n    czm_pickColor: function () {\n      return that._pickId.color;\n    }\n  };\n}\nfunction getVertexArray(context) {\n  let vertexArray = context.cache.ellipsoidPrimitive_vertexArray;\n  if (defined(vertexArray)) {\n    return vertexArray;\n  }\n  const geometry = BoxGeometry.createGeometry(BoxGeometry.fromDimensions({\n    dimensions: new Cartesian3(2.0, 2.0, 2.0),\n    vertexFormat: VertexFormat.POSITION_ONLY\n  }));\n  vertexArray = VertexArray.fromGeometry({\n    context: context,\n    geometry: geometry,\n    attributeLocations: attributeLocations,\n    bufferUsage: BufferUsage.STATIC_DRAW,\n    interleave: true\n  });\n  context.cache.ellipsoidPrimitive_vertexArray = vertexArray;\n  return vertexArray;\n}\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {DeveloperError} this.material must be defined.\n */\nEllipsoidPrimitive.prototype.update = function (frameState) {\n  if (!this.show || frameState.mode !== SceneMode.SCENE3D || !defined(this.center) || !defined(this.radii)) {\n    return;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(this.material)) {\n    throw new DeveloperError(\"this.material must be defined.\");\n  }\n  //>>includeEnd('debug');\n\n  const context = frameState.context;\n  const translucent = this.material.isTranslucent();\n  const translucencyChanged = this._translucent !== translucent;\n  if (!defined(this._rs) || translucencyChanged) {\n    this._translucent = translucent;\n\n    // If this render state is ever updated to use a non-default\n    // depth range, the hard-coded values in EllipsoidVS.glsl need\n    // to be updated as well.\n\n    this._rs = RenderState.fromCache({\n      // Cull front faces - not back faces - so the ellipsoid doesn't\n      // disappear if the viewer enters the bounding box.\n      cull: {\n        enabled: true,\n        face: CullFace.FRONT\n      },\n      depthTest: {\n        enabled: this._depthTestEnabled\n      },\n      // Only write depth when EXT_frag_depth is supported since the depth for\n      // the bounding box is wrong; it is not the true depth of the ray casted ellipsoid.\n      depthMask: !translucent && context.fragmentDepth,\n      blending: translucent ? BlendingState.ALPHA_BLEND : undefined\n    });\n  }\n  if (!defined(this._va)) {\n    this._va = getVertexArray(context);\n  }\n  let boundingSphereDirty = false;\n  const radii = this.radii;\n  if (!Cartesian3.equals(this._radii, radii)) {\n    Cartesian3.clone(radii, this._radii);\n    const r = this._oneOverEllipsoidRadiiSquared;\n    r.x = 1.0 / (radii.x * radii.x);\n    r.y = 1.0 / (radii.y * radii.y);\n    r.z = 1.0 / (radii.z * radii.z);\n    boundingSphereDirty = true;\n  }\n  if (!Matrix4.equals(this.modelMatrix, this._modelMatrix) || !Cartesian3.equals(this.center, this._center)) {\n    Matrix4.clone(this.modelMatrix, this._modelMatrix);\n    Cartesian3.clone(this.center, this._center);\n\n    // Translate model coordinates used for rendering such that the origin is the center of the ellipsoid.\n    Matrix4.multiplyByTranslation(this.modelMatrix, this.center, this._computedModelMatrix);\n    boundingSphereDirty = true;\n  }\n  if (boundingSphereDirty) {\n    Cartesian3.clone(Cartesian3.ZERO, this._boundingSphere.center);\n    this._boundingSphere.radius = Cartesian3.maximumComponent(radii);\n    BoundingSphere.transform(this._boundingSphere, this._computedModelMatrix, this._boundingSphere);\n  }\n  const materialChanged = this._material !== this.material;\n  this._material = this.material;\n  this._material.update(context);\n  const lightingChanged = this.onlySunLighting !== this._onlySunLighting;\n  this._onlySunLighting = this.onlySunLighting;\n  const useLogDepth = frameState.useLogDepth;\n  const useLogDepthChanged = this._useLogDepth !== useLogDepth;\n  this._useLogDepth = useLogDepth;\n  const colorCommand = this._colorCommand;\n  let vs;\n  let fs;\n\n  // Recompile shader when material, lighting, or translucency changes\n  if (materialChanged || lightingChanged || translucencyChanged || useLogDepthChanged) {\n    vs = new ShaderSource({\n      sources: [EllipsoidVS]\n    });\n    fs = new ShaderSource({\n      sources: [this.material.shaderSource, EllipsoidFS]\n    });\n    if (this.onlySunLighting) {\n      fs.defines.push(\"ONLY_SUN_LIGHTING\");\n    }\n    if (!translucent && context.fragmentDepth) {\n      fs.defines.push(\"WRITE_DEPTH\");\n    }\n    if (this._useLogDepth) {\n      vs.defines.push(\"LOG_DEPTH\");\n      fs.defines.push(\"LOG_DEPTH\");\n    }\n    this._sp = ShaderProgram.replaceCache({\n      context: context,\n      shaderProgram: this._sp,\n      vertexShaderSource: vs,\n      fragmentShaderSource: fs,\n      attributeLocations: attributeLocations\n    });\n    colorCommand.vertexArray = this._va;\n    colorCommand.renderState = this._rs;\n    colorCommand.shaderProgram = this._sp;\n    colorCommand.uniformMap = combine(this._uniforms, this.material._uniforms);\n    colorCommand.executeInClosestFrustum = translucent;\n  }\n  const commandList = frameState.commandList;\n  const passes = frameState.passes;\n  if (passes.render) {\n    colorCommand.boundingVolume = this._boundingSphere;\n    colorCommand.debugShowBoundingVolume = this.debugShowBoundingVolume;\n    colorCommand.modelMatrix = this._computedModelMatrix;\n    colorCommand.pass = translucent ? Pass.TRANSLUCENT : Pass.OPAQUE;\n    commandList.push(colorCommand);\n  }\n  if (passes.pick) {\n    const pickCommand = this._pickCommand;\n    if (!defined(this._pickId) || this._id !== this.id) {\n      this._id = this.id;\n      this._pickId = this._pickId && this._pickId.destroy();\n      this._pickId = context.createPickId({\n        primitive: this,\n        id: this.id\n      });\n    }\n\n    // Recompile shader when material changes\n    if (materialChanged || lightingChanged || !defined(this._pickSP) || useLogDepthChanged) {\n      vs = new ShaderSource({\n        sources: [EllipsoidVS]\n      });\n      fs = new ShaderSource({\n        sources: [this.material.shaderSource, EllipsoidFS],\n        pickColorQualifier: \"uniform\"\n      });\n      if (this.onlySunLighting) {\n        fs.defines.push(\"ONLY_SUN_LIGHTING\");\n      }\n      if (!translucent && context.fragmentDepth) {\n        fs.defines.push(\"WRITE_DEPTH\");\n      }\n      if (this._useLogDepth) {\n        vs.defines.push(\"LOG_DEPTH\");\n        fs.defines.push(\"LOG_DEPTH\");\n      }\n      this._pickSP = ShaderProgram.replaceCache({\n        context: context,\n        shaderProgram: this._pickSP,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations\n      });\n      pickCommand.vertexArray = this._va;\n      pickCommand.renderState = this._rs;\n      pickCommand.shaderProgram = this._pickSP;\n      pickCommand.uniformMap = combine(combine(this._uniforms, this._pickUniforms), this.material._uniforms);\n      pickCommand.executeInClosestFrustum = translucent;\n    }\n    pickCommand.boundingVolume = this._boundingSphere;\n    pickCommand.modelMatrix = this._computedModelMatrix;\n    pickCommand.pass = translucent ? Pass.TRANSLUCENT : Pass.OPAQUE;\n    commandList.push(pickCommand);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see EllipsoidPrimitive#destroy\n */\nEllipsoidPrimitive.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * e = e && e.destroy();\n *\n * @see EllipsoidPrimitive#isDestroyed\n */\nEllipsoidPrimitive.prototype.destroy = function () {\n  this._sp = this._sp && this._sp.destroy();\n  this._pickSP = this._pickSP && this._pickSP.destroy();\n  this._pickId = this._pickId && this._pickId.destroy();\n  return destroyObject(this);\n};\nexport default EllipsoidPrimitive;","map":{"version":3,"names":["BoundingSphere","BoxGeometry","Cartesian3","combine","defaultValue","defined","destroyObject","DeveloperError","Matrix4","VertexFormat","BufferUsage","DrawCommand","Pass","RenderState","ShaderProgram","ShaderSource","VertexArray","EllipsoidFS","EllipsoidVS","BlendingState","CullFace","Material","SceneMode","attributeLocations","position","EllipsoidPrimitive","options","EMPTY_OBJECT","center","clone","ZERO","_center","radii","_radii","_oneOverEllipsoidRadiiSquared","_boundingSphere","modelMatrix","IDENTITY","_modelMatrix","_computedModelMatrix","show","material","fromType","ColorType","_material","undefined","_translucent","id","_id","debugShowBoundingVolume","onlySunLighting","_onlySunLighting","_depthTestEnabled","depthTestEnabled","_useLogDepth","_sp","_rs","_va","_pickSP","_pickId","_colorCommand","owner","_owner","_pickCommand","pickOnly","that","_uniforms","u_radii","u_oneOverEllipsoidRadiiSquared","_pickUniforms","czm_pickColor","color","getVertexArray","context","vertexArray","cache","ellipsoidPrimitive_vertexArray","geometry","createGeometry","fromDimensions","dimensions","vertexFormat","POSITION_ONLY","fromGeometry","bufferUsage","STATIC_DRAW","interleave","prototype","update","frameState","mode","SCENE3D","translucent","isTranslucent","translucencyChanged","fromCache","cull","enabled","face","FRONT","depthTest","depthMask","fragmentDepth","blending","ALPHA_BLEND","boundingSphereDirty","equals","r","x","y","z","multiplyByTranslation","radius","maximumComponent","transform","materialChanged","lightingChanged","useLogDepth","useLogDepthChanged","colorCommand","vs","fs","sources","shaderSource","defines","push","replaceCache","shaderProgram","vertexShaderSource","fragmentShaderSource","renderState","uniformMap","executeInClosestFrustum","commandList","passes","render","boundingVolume","pass","TRANSLUCENT","OPAQUE","pick","pickCommand","destroy","createPickId","primitive","pickColorQualifier","isDestroyed"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/EllipsoidPrimitive.js"],"sourcesContent":["import BoundingSphere from \"../Core/BoundingSphere.js\";\nimport BoxGeometry from \"../Core/BoxGeometry.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport combine from \"../Core/combine.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport VertexArray from \"../Renderer/VertexArray.js\";\nimport EllipsoidFS from \"../Shaders/EllipsoidFS.js\";\nimport EllipsoidVS from \"../Shaders/EllipsoidVS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport CullFace from \"./CullFace.js\";\nimport Material from \"./Material.js\";\nimport SceneMode from \"./SceneMode.js\";\n\nconst attributeLocations = {\n  position: 0,\n};\n\n/**\n * A renderable ellipsoid.  It can also draw spheres when the three {@link EllipsoidPrimitive#radii} components are equal.\n * <p>\n * This is only supported in 3D.  The ellipsoid is not shown in 2D or Columbus view.\n * </p>\n *\n * @alias EllipsoidPrimitive\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Cartesian3} [options.center=Cartesian3.ZERO] The center of the ellipsoid in the ellipsoid's model coordinates.\n * @param {Cartesian3} [options.radii] The radius of the ellipsoid along the <code>x</code>, <code>y</code>, and <code>z</code> axes in the ellipsoid's model coordinates.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the ellipsoid from model to world coordinates.\n * @param {boolean} [options.show=true] Determines if this primitive will be shown.\n * @param {Material} [options.material=Material.ColorType] The surface appearance of the primitive.\n * @param {object} [options.id] A user-defined object to return when the instance is picked with {@link Scene#pick}\n * @param {boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive's commands' bounding spheres are shown.\n *\n * @private\n */\nfunction EllipsoidPrimitive(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The center of the ellipsoid in the ellipsoid's model coordinates.\n   * <p>\n   * The default is {@link Cartesian3.ZERO}.\n   * </p>\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   *\n   * @see EllipsoidPrimitive#modelMatrix\n   */\n  this.center = Cartesian3.clone(defaultValue(options.center, Cartesian3.ZERO));\n  this._center = new Cartesian3();\n\n  /**\n   * The radius of the ellipsoid along the <code>x</code>, <code>y</code>, and <code>z</code> axes in the ellipsoid's model coordinates.\n   * When these are the same, the ellipsoid is a sphere.\n   * <p>\n   * The default is <code>undefined</code>.  The ellipsoid is not drawn until a radii is provided.\n   * </p>\n   *\n   * @type {Cartesian3}\n   * @default undefined\n   *\n   *\n   * @example\n   * // A sphere with a radius of 2.0\n   * e.radii = new Cesium.Cartesian3(2.0, 2.0, 2.0);\n   *\n   * @see EllipsoidPrimitive#modelMatrix\n   */\n  this.radii = Cartesian3.clone(options.radii);\n  this._radii = new Cartesian3();\n\n  this._oneOverEllipsoidRadiiSquared = new Cartesian3();\n  this._boundingSphere = new BoundingSphere();\n\n  /**\n   * The 4x4 transformation matrix that transforms the ellipsoid from model to world coordinates.\n   * When this is the identity matrix, the ellipsoid is drawn in world coordinates, i.e., Earth's WGS84 coordinates.\n   * Local reference frames can be used by providing a different transformation matrix, like that returned\n   * by {@link Transforms.eastNorthUpToFixedFrame}.\n   *\n   * @type {Matrix4}\n   * @default {@link Matrix4.IDENTITY}\n   *\n   * @example\n   * const origin = Cesium.Cartesian3.fromDegrees(-95.0, 40.0, 200000.0);\n   * e.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(origin);\n   */\n  this.modelMatrix = Matrix4.clone(\n    defaultValue(options.modelMatrix, Matrix4.IDENTITY),\n  );\n  this._modelMatrix = new Matrix4();\n  this._computedModelMatrix = new Matrix4();\n\n  /**\n   * Determines if the ellipsoid primitive will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * The surface appearance of the ellipsoid.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * <p>\n   * The default material is <code>Material.ColorType</code>.\n   * </p>\n   *\n   * @type {Material}\n   * @default Material.fromType(Material.ColorType)\n   *\n   *\n   * @example\n   * // 1. Change the color of the default material to yellow\n   * e.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n   *\n   * // 2. Change material to horizontal stripes\n   * e.material = Cesium.Material.fromType(Cesium.Material.StripeType);\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = defaultValue(\n    options.material,\n    Material.fromType(Material.ColorType),\n  );\n  this._material = undefined;\n  this._translucent = undefined;\n\n  /**\n   * User-defined object returned when the ellipsoid is picked.\n   *\n   * @type {object}\n   *\n   * @default undefined\n   *\n   * @see Scene#pick\n   */\n  this.id = options.id;\n  this._id = undefined;\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the bounding sphere for each draw command in the primitive.\n   * </p>\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.debugShowBoundingVolume = defaultValue(\n    options.debugShowBoundingVolume,\n    false,\n  );\n\n  /**\n   * @private\n   */\n  this.onlySunLighting = defaultValue(options.onlySunLighting, false);\n  this._onlySunLighting = false;\n\n  /**\n   * @private\n   */\n  this._depthTestEnabled = defaultValue(options.depthTestEnabled, true);\n\n  this._useLogDepth = false;\n\n  this._sp = undefined;\n  this._rs = undefined;\n  this._va = undefined;\n\n  this._pickSP = undefined;\n  this._pickId = undefined;\n\n  this._colorCommand = new DrawCommand({\n    owner: defaultValue(options._owner, this),\n  });\n  this._pickCommand = new DrawCommand({\n    owner: defaultValue(options._owner, this),\n    pickOnly: true,\n  });\n\n  const that = this;\n  this._uniforms = {\n    u_radii: function () {\n      return that.radii;\n    },\n    u_oneOverEllipsoidRadiiSquared: function () {\n      return that._oneOverEllipsoidRadiiSquared;\n    },\n  };\n\n  this._pickUniforms = {\n    czm_pickColor: function () {\n      return that._pickId.color;\n    },\n  };\n}\n\nfunction getVertexArray(context) {\n  let vertexArray = context.cache.ellipsoidPrimitive_vertexArray;\n\n  if (defined(vertexArray)) {\n    return vertexArray;\n  }\n\n  const geometry = BoxGeometry.createGeometry(\n    BoxGeometry.fromDimensions({\n      dimensions: new Cartesian3(2.0, 2.0, 2.0),\n      vertexFormat: VertexFormat.POSITION_ONLY,\n    }),\n  );\n\n  vertexArray = VertexArray.fromGeometry({\n    context: context,\n    geometry: geometry,\n    attributeLocations: attributeLocations,\n    bufferUsage: BufferUsage.STATIC_DRAW,\n    interleave: true,\n  });\n\n  context.cache.ellipsoidPrimitive_vertexArray = vertexArray;\n  return vertexArray;\n}\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {DeveloperError} this.material must be defined.\n */\nEllipsoidPrimitive.prototype.update = function (frameState) {\n  if (\n    !this.show ||\n    frameState.mode !== SceneMode.SCENE3D ||\n    !defined(this.center) ||\n    !defined(this.radii)\n  ) {\n    return;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(this.material)) {\n    throw new DeveloperError(\"this.material must be defined.\");\n  }\n  //>>includeEnd('debug');\n\n  const context = frameState.context;\n  const translucent = this.material.isTranslucent();\n  const translucencyChanged = this._translucent !== translucent;\n\n  if (!defined(this._rs) || translucencyChanged) {\n    this._translucent = translucent;\n\n    // If this render state is ever updated to use a non-default\n    // depth range, the hard-coded values in EllipsoidVS.glsl need\n    // to be updated as well.\n\n    this._rs = RenderState.fromCache({\n      // Cull front faces - not back faces - so the ellipsoid doesn't\n      // disappear if the viewer enters the bounding box.\n      cull: {\n        enabled: true,\n        face: CullFace.FRONT,\n      },\n      depthTest: {\n        enabled: this._depthTestEnabled,\n      },\n      // Only write depth when EXT_frag_depth is supported since the depth for\n      // the bounding box is wrong; it is not the true depth of the ray casted ellipsoid.\n      depthMask: !translucent && context.fragmentDepth,\n      blending: translucent ? BlendingState.ALPHA_BLEND : undefined,\n    });\n  }\n\n  if (!defined(this._va)) {\n    this._va = getVertexArray(context);\n  }\n\n  let boundingSphereDirty = false;\n\n  const radii = this.radii;\n  if (!Cartesian3.equals(this._radii, radii)) {\n    Cartesian3.clone(radii, this._radii);\n\n    const r = this._oneOverEllipsoidRadiiSquared;\n    r.x = 1.0 / (radii.x * radii.x);\n    r.y = 1.0 / (radii.y * radii.y);\n    r.z = 1.0 / (radii.z * radii.z);\n\n    boundingSphereDirty = true;\n  }\n\n  if (\n    !Matrix4.equals(this.modelMatrix, this._modelMatrix) ||\n    !Cartesian3.equals(this.center, this._center)\n  ) {\n    Matrix4.clone(this.modelMatrix, this._modelMatrix);\n    Cartesian3.clone(this.center, this._center);\n\n    // Translate model coordinates used for rendering such that the origin is the center of the ellipsoid.\n    Matrix4.multiplyByTranslation(\n      this.modelMatrix,\n      this.center,\n      this._computedModelMatrix,\n    );\n    boundingSphereDirty = true;\n  }\n\n  if (boundingSphereDirty) {\n    Cartesian3.clone(Cartesian3.ZERO, this._boundingSphere.center);\n    this._boundingSphere.radius = Cartesian3.maximumComponent(radii);\n    BoundingSphere.transform(\n      this._boundingSphere,\n      this._computedModelMatrix,\n      this._boundingSphere,\n    );\n  }\n\n  const materialChanged = this._material !== this.material;\n  this._material = this.material;\n  this._material.update(context);\n\n  const lightingChanged = this.onlySunLighting !== this._onlySunLighting;\n  this._onlySunLighting = this.onlySunLighting;\n\n  const useLogDepth = frameState.useLogDepth;\n  const useLogDepthChanged = this._useLogDepth !== useLogDepth;\n  this._useLogDepth = useLogDepth;\n\n  const colorCommand = this._colorCommand;\n  let vs;\n  let fs;\n\n  // Recompile shader when material, lighting, or translucency changes\n  if (\n    materialChanged ||\n    lightingChanged ||\n    translucencyChanged ||\n    useLogDepthChanged\n  ) {\n    vs = new ShaderSource({\n      sources: [EllipsoidVS],\n    });\n    fs = new ShaderSource({\n      sources: [this.material.shaderSource, EllipsoidFS],\n    });\n    if (this.onlySunLighting) {\n      fs.defines.push(\"ONLY_SUN_LIGHTING\");\n    }\n    if (!translucent && context.fragmentDepth) {\n      fs.defines.push(\"WRITE_DEPTH\");\n    }\n    if (this._useLogDepth) {\n      vs.defines.push(\"LOG_DEPTH\");\n      fs.defines.push(\"LOG_DEPTH\");\n    }\n\n    this._sp = ShaderProgram.replaceCache({\n      context: context,\n      shaderProgram: this._sp,\n      vertexShaderSource: vs,\n      fragmentShaderSource: fs,\n      attributeLocations: attributeLocations,\n    });\n\n    colorCommand.vertexArray = this._va;\n    colorCommand.renderState = this._rs;\n    colorCommand.shaderProgram = this._sp;\n    colorCommand.uniformMap = combine(this._uniforms, this.material._uniforms);\n    colorCommand.executeInClosestFrustum = translucent;\n  }\n\n  const commandList = frameState.commandList;\n  const passes = frameState.passes;\n\n  if (passes.render) {\n    colorCommand.boundingVolume = this._boundingSphere;\n    colorCommand.debugShowBoundingVolume = this.debugShowBoundingVolume;\n    colorCommand.modelMatrix = this._computedModelMatrix;\n    colorCommand.pass = translucent ? Pass.TRANSLUCENT : Pass.OPAQUE;\n\n    commandList.push(colorCommand);\n  }\n\n  if (passes.pick) {\n    const pickCommand = this._pickCommand;\n\n    if (!defined(this._pickId) || this._id !== this.id) {\n      this._id = this.id;\n      this._pickId = this._pickId && this._pickId.destroy();\n      this._pickId = context.createPickId({\n        primitive: this,\n        id: this.id,\n      });\n    }\n\n    // Recompile shader when material changes\n    if (\n      materialChanged ||\n      lightingChanged ||\n      !defined(this._pickSP) ||\n      useLogDepthChanged\n    ) {\n      vs = new ShaderSource({\n        sources: [EllipsoidVS],\n      });\n      fs = new ShaderSource({\n        sources: [this.material.shaderSource, EllipsoidFS],\n        pickColorQualifier: \"uniform\",\n      });\n      if (this.onlySunLighting) {\n        fs.defines.push(\"ONLY_SUN_LIGHTING\");\n      }\n      if (!translucent && context.fragmentDepth) {\n        fs.defines.push(\"WRITE_DEPTH\");\n      }\n      if (this._useLogDepth) {\n        vs.defines.push(\"LOG_DEPTH\");\n        fs.defines.push(\"LOG_DEPTH\");\n      }\n\n      this._pickSP = ShaderProgram.replaceCache({\n        context: context,\n        shaderProgram: this._pickSP,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      });\n\n      pickCommand.vertexArray = this._va;\n      pickCommand.renderState = this._rs;\n      pickCommand.shaderProgram = this._pickSP;\n      pickCommand.uniformMap = combine(\n        combine(this._uniforms, this._pickUniforms),\n        this.material._uniforms,\n      );\n      pickCommand.executeInClosestFrustum = translucent;\n    }\n\n    pickCommand.boundingVolume = this._boundingSphere;\n    pickCommand.modelMatrix = this._computedModelMatrix;\n    pickCommand.pass = translucent ? Pass.TRANSLUCENT : Pass.OPAQUE;\n\n    commandList.push(pickCommand);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see EllipsoidPrimitive#destroy\n */\nEllipsoidPrimitive.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * e = e && e.destroy();\n *\n * @see EllipsoidPrimitive#isDestroyed\n */\nEllipsoidPrimitive.prototype.destroy = function () {\n  this._sp = this._sp && this._sp.destroy();\n  this._pickSP = this._pickSP && this._pickSP.destroy();\n  this._pickId = this._pickId && this._pickId.destroy();\n  return destroyObject(this);\n};\nexport default EllipsoidPrimitive;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}