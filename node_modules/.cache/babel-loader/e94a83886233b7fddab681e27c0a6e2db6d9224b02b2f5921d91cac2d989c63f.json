{"ast":null,"code":"/**\n * Transpiles a [GLSL 3.00]{@link https://registry.khronos.org/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf}\n * shader to a [GLSL 1.00]{@link https://registry.khronos.org/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf} shader.\n *\n * This function does not aim to provide a comprehensive transpilation from GLSL 3.00 to GLSL 1.00; only the functionality\n * used within the CesiumJS shaders is supported.\n *\n * @private\n *\n * @param {string} input The GLSL 3.00 shader.\n * @param {boolean} isFragmentShader True if the shader is a fragment shader.\n *\n * @return {string}\n */\nfunction demodernizeShader(input, isFragmentShader) {\n  let output = input;\n\n  // Remove version string got GLSL 3.00.\n  output = output.replaceAll(`version 300 es`, ``);\n\n  // Replace all texture calls with texture2D\n  output = output.replaceAll(/(texture\\()/g, `texture2D(` // Trailing ')' is included in the match group.\n  );\n  if (isFragmentShader) {\n    // Replace the in with varying.\n    output = output.replaceAll(/\\n\\s*(in)\\s+(vec\\d|mat\\d|float)/g, `\\nvarying $2`);\n    if (/out_FragData_(\\d+)/.test(output)) {\n      output = `#extension GL_EXT_draw_buffers : enable\\n${output}`;\n\n      // Remove all layout declarations for out_FragData.\n      output = output.replaceAll(/layout\\s+\\(location\\s*=\\s*\\d+\\)\\s*out\\s+vec4\\s+out_FragData_\\d+;/g, ``);\n\n      // Replace out_FragData with gl_FragData.\n      output = output.replaceAll(/out_FragData_(\\d+)/g, `gl_FragData[$1]`);\n    }\n\n    // Remove all layout declarations for out_FragColor.\n    output = output.replaceAll(/layout\\s+\\(location\\s*=\\s*0\\)\\s*out\\s+vec4\\s+out_FragColor;/g, ``);\n\n    // Replace out_FragColor with gl_FragColor.\n    output = output.replaceAll(/out_FragColor/g, `gl_FragColor`);\n    output = output.replaceAll(/out_FragColor\\[(\\d+)\\]/g, `gl_FragColor[$1]`);\n    if (/gl_FragDepth/.test(output)) {\n      output = `#extension GL_EXT_frag_depth : enable\\n${output}`;\n      // Replace gl_FragDepth with gl_FragDepthEXT.\n      output = output.replaceAll(/gl_FragDepth/g, `gl_FragDepthEXT`);\n    }\n\n    // Enable the EXT_shader_texture_lod extension\n    output = `#ifdef GL_EXT_shader_texture_lod\\n#extension GL_EXT_shader_texture_lod : enable\\n#endif\\n${output}`;\n    // Enable the OES_standard_derivatives extension\n    output = `#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n${output}`;\n  } else {\n    // Replace the in with attribute.\n    output = output.replaceAll(/(in)\\s+(vec\\d|mat\\d|float)/g, `attribute $2`);\n\n    // Replace the out with varying.\n    output = output.replaceAll(/(out)\\s+(vec\\d|mat\\d|float)\\s+([\\w]+);/g, `varying $2 $3;`);\n  }\n\n  // Add version string for GLSL 1.00.\n  output = `#version 100\\n${output}`;\n  return output;\n}\nexport default demodernizeShader;","map":{"version":3,"names":["demodernizeShader","input","isFragmentShader","output","replaceAll","test"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/demodernizeShader.js"],"sourcesContent":["/**\n * Transpiles a [GLSL 3.00]{@link https://registry.khronos.org/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf}\n * shader to a [GLSL 1.00]{@link https://registry.khronos.org/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf} shader.\n *\n * This function does not aim to provide a comprehensive transpilation from GLSL 3.00 to GLSL 1.00; only the functionality\n * used within the CesiumJS shaders is supported.\n *\n * @private\n *\n * @param {string} input The GLSL 3.00 shader.\n * @param {boolean} isFragmentShader True if the shader is a fragment shader.\n *\n * @return {string}\n */\nfunction demodernizeShader(input, isFragmentShader) {\n  let output = input;\n\n  // Remove version string got GLSL 3.00.\n  output = output.replaceAll(`version 300 es`, ``);\n\n  // Replace all texture calls with texture2D\n  output = output.replaceAll(\n    /(texture\\()/g,\n    `texture2D(`, // Trailing ')' is included in the match group.\n  );\n\n  if (isFragmentShader) {\n    // Replace the in with varying.\n    output = output.replaceAll(\n      /\\n\\s*(in)\\s+(vec\\d|mat\\d|float)/g,\n      `\\nvarying $2`,\n    );\n\n    if (/out_FragData_(\\d+)/.test(output)) {\n      output = `#extension GL_EXT_draw_buffers : enable\\n${output}`;\n\n      // Remove all layout declarations for out_FragData.\n      output = output.replaceAll(\n        /layout\\s+\\(location\\s*=\\s*\\d+\\)\\s*out\\s+vec4\\s+out_FragData_\\d+;/g,\n        ``,\n      );\n\n      // Replace out_FragData with gl_FragData.\n      output = output.replaceAll(/out_FragData_(\\d+)/g, `gl_FragData[$1]`);\n    }\n\n    // Remove all layout declarations for out_FragColor.\n    output = output.replaceAll(\n      /layout\\s+\\(location\\s*=\\s*0\\)\\s*out\\s+vec4\\s+out_FragColor;/g,\n      ``,\n    );\n\n    // Replace out_FragColor with gl_FragColor.\n    output = output.replaceAll(/out_FragColor/g, `gl_FragColor`);\n    output = output.replaceAll(/out_FragColor\\[(\\d+)\\]/g, `gl_FragColor[$1]`);\n\n    if (/gl_FragDepth/.test(output)) {\n      output = `#extension GL_EXT_frag_depth : enable\\n${output}`;\n      // Replace gl_FragDepth with gl_FragDepthEXT.\n      output = output.replaceAll(/gl_FragDepth/g, `gl_FragDepthEXT`);\n    }\n\n    // Enable the EXT_shader_texture_lod extension\n    output = `#ifdef GL_EXT_shader_texture_lod\\n#extension GL_EXT_shader_texture_lod : enable\\n#endif\\n${output}`;\n    // Enable the OES_standard_derivatives extension\n    output = `#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n${output}`;\n  } else {\n    // Replace the in with attribute.\n    output = output.replaceAll(/(in)\\s+(vec\\d|mat\\d|float)/g, `attribute $2`);\n\n    // Replace the out with varying.\n    output = output.replaceAll(\n      /(out)\\s+(vec\\d|mat\\d|float)\\s+([\\w]+);/g,\n      `varying $2 $3;`,\n    );\n  }\n\n  // Add version string for GLSL 1.00.\n  output = `#version 100\\n${output}`;\n\n  return output;\n}\n\nexport default demodernizeShader;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAiBA,CAACC,KAAK,EAAEC,gBAAgB,EAAE;EAClD,IAAIC,MAAM,GAAGF,KAAK;;EAElB;EACAE,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,gBAAgB,EAAE,EAAE,CAAC;;EAEhD;EACAD,MAAM,GAAGA,MAAM,CAACC,UAAU,CACxB,cAAc,EACd,YAAY,CAAE;EAChB,CAAC;EAED,IAAIF,gBAAgB,EAAE;IACpB;IACAC,MAAM,GAAGA,MAAM,CAACC,UAAU,CACxB,kCAAkC,EAClC,cACF,CAAC;IAED,IAAI,oBAAoB,CAACC,IAAI,CAACF,MAAM,CAAC,EAAE;MACrCA,MAAM,GAAG,4CAA4CA,MAAM,EAAE;;MAE7D;MACAA,MAAM,GAAGA,MAAM,CAACC,UAAU,CACxB,mEAAmE,EACnE,EACF,CAAC;;MAED;MACAD,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,qBAAqB,EAAE,iBAAiB,CAAC;IACtE;;IAEA;IACAD,MAAM,GAAGA,MAAM,CAACC,UAAU,CACxB,8DAA8D,EAC9D,EACF,CAAC;;IAED;IACAD,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,gBAAgB,EAAE,cAAc,CAAC;IAC5DD,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,yBAAyB,EAAE,kBAAkB,CAAC;IAEzE,IAAI,cAAc,CAACC,IAAI,CAACF,MAAM,CAAC,EAAE;MAC/BA,MAAM,GAAG,0CAA0CA,MAAM,EAAE;MAC3D;MACAA,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,eAAe,EAAE,iBAAiB,CAAC;IAChE;;IAEA;IACAD,MAAM,GAAG,4FAA4FA,MAAM,EAAE;IAC7G;IACAA,MAAM,GAAG,gGAAgGA,MAAM,EAAE;EACnH,CAAC,MAAM;IACL;IACAA,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,6BAA6B,EAAE,cAAc,CAAC;;IAEzE;IACAD,MAAM,GAAGA,MAAM,CAACC,UAAU,CACxB,yCAAyC,EACzC,gBACF,CAAC;EACH;;EAEA;EACAD,MAAM,GAAG,iBAAiBA,MAAM,EAAE;EAElC,OAAOA,MAAM;AACf;AAEA,eAAeH,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}