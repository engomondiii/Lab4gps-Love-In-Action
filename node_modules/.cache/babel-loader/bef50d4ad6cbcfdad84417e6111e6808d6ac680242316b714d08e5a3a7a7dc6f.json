{"ast":null,"code":"import combine from \"../../Core/combine.js\";\nimport ModelClippingPolygonsStageVS from \"../../Shaders/Model/ModelClippingPolygonsStageVS.js\";\nimport ModelClippingPolygonsStageFS from \"../../Shaders/Model/ModelClippingPolygonsStageFS.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\n\n/**\n * The model clipping planes stage is responsible for applying clipping planes to the model.\n *\n * @namespace ModelClippingPolygonsPipelineStage\n *\n * @private\n */\nconst ModelClippingPolygonsPipelineStage = {\n  name: \"ModelClippingPolygonsPipelineStage\" // Helps with debugging\n};\n\n/**\n * Process a model for polygon clipping. This modifies the following parts of the render resources:\n *\n * <ul>\n *  <li>adds a define to both the vertex and fragment shaders to indicate that the model has clipping polygons</li>\n *  <li>adds the defines to both the vertex and fragment shaders for parameters related to clipping polygons, such as the number of polygons</li>\n *  <li>adds a function to the vertex shader to determine lookup uvs</li>\n *  <li>adds a function to the fragment shader to discard clipped regions</li>\n *  <li>adds the uniforms to the vertex and fragment shaders for the clipping extents texture and clipping distance respectively</li>\n *  <li>adds a varying for lookup uvs in the clipping texture</li>\n *</ul>\n *\n * @param {ModelRenderResources} renderResources The render resources for this model.\n * @param {Model} model The model.\n * @param {FrameState} frameState The frameState.\n *\n * @private\n */\nModelClippingPolygonsPipelineStage.process = function (renderResources, model, frameState) {\n  const clippingPolygons = model.clippingPolygons;\n  const shaderBuilder = renderResources.shaderBuilder;\n  shaderBuilder.addDefine(\"ENABLE_CLIPPING_POLYGONS\", undefined, ShaderDestination.BOTH);\n  if (clippingPolygons.inverse) {\n    shaderBuilder.addDefine(\"CLIPPING_INVERSE\", undefined, ShaderDestination.FRAGMENT);\n  }\n  shaderBuilder.addDefine(\"CLIPPING_POLYGON_REGIONS_LENGTH\", clippingPolygons.extentsCount, ShaderDestination.BOTH);\n  shaderBuilder.addUniform(\"sampler2D\", \"model_clippingDistance\", ShaderDestination.FRAGMENT);\n  shaderBuilder.addUniform(\"sampler2D\", \"model_clippingExtents\", ShaderDestination.VERTEX);\n  shaderBuilder.addVarying(\"vec2\", \"v_clippingPosition\");\n  shaderBuilder.addVarying(\"int\", \"v_regionIndex\", \"flat\");\n  shaderBuilder.addVertexLines(ModelClippingPolygonsStageVS);\n  shaderBuilder.addFragmentLines(ModelClippingPolygonsStageFS);\n  const uniformMap = {\n    model_clippingDistance: function () {\n      return clippingPolygons.clippingTexture;\n    },\n    model_clippingExtents: function () {\n      return clippingPolygons.extentsTexture;\n    }\n  };\n  renderResources.uniformMap = combine(uniformMap, renderResources.uniformMap);\n};\nexport default ModelClippingPolygonsPipelineStage;","map":{"version":3,"names":["combine","ModelClippingPolygonsStageVS","ModelClippingPolygonsStageFS","ShaderDestination","ModelClippingPolygonsPipelineStage","name","process","renderResources","model","frameState","clippingPolygons","shaderBuilder","addDefine","undefined","BOTH","inverse","FRAGMENT","extentsCount","addUniform","VERTEX","addVarying","addVertexLines","addFragmentLines","uniformMap","model_clippingDistance","clippingTexture","model_clippingExtents","extentsTexture"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/ModelClippingPolygonsPipelineStage.js"],"sourcesContent":["import combine from \"../../Core/combine.js\";\nimport ModelClippingPolygonsStageVS from \"../../Shaders/Model/ModelClippingPolygonsStageVS.js\";\nimport ModelClippingPolygonsStageFS from \"../../Shaders/Model/ModelClippingPolygonsStageFS.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\n\n/**\n * The model clipping planes stage is responsible for applying clipping planes to the model.\n *\n * @namespace ModelClippingPolygonsPipelineStage\n *\n * @private\n */\nconst ModelClippingPolygonsPipelineStage = {\n  name: \"ModelClippingPolygonsPipelineStage\", // Helps with debugging\n};\n\n/**\n * Process a model for polygon clipping. This modifies the following parts of the render resources:\n *\n * <ul>\n *  <li>adds a define to both the vertex and fragment shaders to indicate that the model has clipping polygons</li>\n *  <li>adds the defines to both the vertex and fragment shaders for parameters related to clipping polygons, such as the number of polygons</li>\n *  <li>adds a function to the vertex shader to determine lookup uvs</li>\n *  <li>adds a function to the fragment shader to discard clipped regions</li>\n *  <li>adds the uniforms to the vertex and fragment shaders for the clipping extents texture and clipping distance respectively</li>\n *  <li>adds a varying for lookup uvs in the clipping texture</li>\n *</ul>\n *\n * @param {ModelRenderResources} renderResources The render resources for this model.\n * @param {Model} model The model.\n * @param {FrameState} frameState The frameState.\n *\n * @private\n */\nModelClippingPolygonsPipelineStage.process = function (\n  renderResources,\n  model,\n  frameState,\n) {\n  const clippingPolygons = model.clippingPolygons;\n  const shaderBuilder = renderResources.shaderBuilder;\n\n  shaderBuilder.addDefine(\n    \"ENABLE_CLIPPING_POLYGONS\",\n    undefined,\n    ShaderDestination.BOTH,\n  );\n\n  if (clippingPolygons.inverse) {\n    shaderBuilder.addDefine(\n      \"CLIPPING_INVERSE\",\n      undefined,\n      ShaderDestination.FRAGMENT,\n    );\n  }\n\n  shaderBuilder.addDefine(\n    \"CLIPPING_POLYGON_REGIONS_LENGTH\",\n    clippingPolygons.extentsCount,\n    ShaderDestination.BOTH,\n  );\n\n  shaderBuilder.addUniform(\n    \"sampler2D\",\n    \"model_clippingDistance\",\n    ShaderDestination.FRAGMENT,\n  );\n\n  shaderBuilder.addUniform(\n    \"sampler2D\",\n    \"model_clippingExtents\",\n    ShaderDestination.VERTEX,\n  );\n\n  shaderBuilder.addVarying(\"vec2\", \"v_clippingPosition\");\n  shaderBuilder.addVarying(\"int\", \"v_regionIndex\", \"flat\");\n  shaderBuilder.addVertexLines(ModelClippingPolygonsStageVS);\n  shaderBuilder.addFragmentLines(ModelClippingPolygonsStageFS);\n\n  const uniformMap = {\n    model_clippingDistance: function () {\n      return clippingPolygons.clippingTexture;\n    },\n    model_clippingExtents: function () {\n      return clippingPolygons.extentsTexture;\n    },\n  };\n\n  renderResources.uniformMap = combine(uniformMap, renderResources.uniformMap);\n};\n\nexport default ModelClippingPolygonsPipelineStage;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,4BAA4B,MAAM,qDAAqD;AAC9F,OAAOC,4BAA4B,MAAM,qDAAqD;AAC9F,OAAOC,iBAAiB,MAAM,qCAAqC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kCAAkC,GAAG;EACzCC,IAAI,EAAE,oCAAoC,CAAE;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,kCAAkC,CAACE,OAAO,GAAG,UAC3CC,eAAe,EACfC,KAAK,EACLC,UAAU,EACV;EACA,MAAMC,gBAAgB,GAAGF,KAAK,CAACE,gBAAgB;EAC/C,MAAMC,aAAa,GAAGJ,eAAe,CAACI,aAAa;EAEnDA,aAAa,CAACC,SAAS,CACrB,0BAA0B,EAC1BC,SAAS,EACTV,iBAAiB,CAACW,IACpB,CAAC;EAED,IAAIJ,gBAAgB,CAACK,OAAO,EAAE;IAC5BJ,aAAa,CAACC,SAAS,CACrB,kBAAkB,EAClBC,SAAS,EACTV,iBAAiB,CAACa,QACpB,CAAC;EACH;EAEAL,aAAa,CAACC,SAAS,CACrB,iCAAiC,EACjCF,gBAAgB,CAACO,YAAY,EAC7Bd,iBAAiB,CAACW,IACpB,CAAC;EAEDH,aAAa,CAACO,UAAU,CACtB,WAAW,EACX,wBAAwB,EACxBf,iBAAiB,CAACa,QACpB,CAAC;EAEDL,aAAa,CAACO,UAAU,CACtB,WAAW,EACX,uBAAuB,EACvBf,iBAAiB,CAACgB,MACpB,CAAC;EAEDR,aAAa,CAACS,UAAU,CAAC,MAAM,EAAE,oBAAoB,CAAC;EACtDT,aAAa,CAACS,UAAU,CAAC,KAAK,EAAE,eAAe,EAAE,MAAM,CAAC;EACxDT,aAAa,CAACU,cAAc,CAACpB,4BAA4B,CAAC;EAC1DU,aAAa,CAACW,gBAAgB,CAACpB,4BAA4B,CAAC;EAE5D,MAAMqB,UAAU,GAAG;IACjBC,sBAAsB,EAAE,SAAAA,CAAA,EAAY;MAClC,OAAOd,gBAAgB,CAACe,eAAe;IACzC,CAAC;IACDC,qBAAqB,EAAE,SAAAA,CAAA,EAAY;MACjC,OAAOhB,gBAAgB,CAACiB,cAAc;IACxC;EACF,CAAC;EAEDpB,eAAe,CAACgB,UAAU,GAAGvB,OAAO,CAACuB,UAAU,EAAEhB,eAAe,CAACgB,UAAU,CAAC;AAC9E,CAAC;AAED,eAAenB,kCAAkC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}