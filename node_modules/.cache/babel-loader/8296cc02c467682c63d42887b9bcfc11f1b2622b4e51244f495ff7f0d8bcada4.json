{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\nfunction attachTexture(framebuffer, attachment, texture) {\n  const gl = framebuffer._gl;\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, texture._target, texture._texture, 0);\n}\nfunction attachRenderbuffer(framebuffer, attachment, renderbuffer) {\n  const gl = framebuffer._gl;\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, renderbuffer._getRenderbuffer());\n}\n\n/**\n * Creates a framebuffer with optional initial color, depth, and stencil attachments.\n * Framebuffers are used for render-to-texture effects; they allow us to render to\n * textures in one pass, and read from it in a later pass.\n *\n * @param {object} options Object with the following properties:\n * @param {Context} options.context\n * @param {Texture[]} [options.colorTextures]\n * @param {Renderbuffer[]} [options.colorRenderbuffers]\n * @param {Texture} [options.depthTexture]\n * @param {Renderbuffer} [options.depthRenderbuffer]\n * @param {Renderbuffer} [options.stencilRenderbuffer]\n * @param {Texture} [options.depthStencilTexture]\n * @param {Renderbuffer} [options.depthStencilRenderbuffer]\n * @param {boolean} [options.destroyAttachments=true] When true, the framebuffer owns its attachments so they will be destroyed when {@link Framebuffer#destroy} is called or when a new attachment is assigned to an attachment point.\n *\n * @exception {DeveloperError} Cannot have both color texture and color renderbuffer attachments.\n * @exception {DeveloperError} Cannot have both a depth texture and depth renderbuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth-stencil texture and depth-stencil renderbuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth and depth-stencil renderbuffer.\n * @exception {DeveloperError} Cannot have both a stencil and depth-stencil renderbuffer.\n * @exception {DeveloperError} Cannot have both a depth and stencil renderbuffer.\n * @exception {DeveloperError} The color-texture pixel-format must be a color format.\n * @exception {DeveloperError} The depth-texture pixel-format must be DEPTH_COMPONENT.\n * @exception {DeveloperError} The depth-stencil-texture pixel-format must be DEPTH_STENCIL.\n * @exception {DeveloperError} The number of color attachments exceeds the number supported.\n * @exception {DeveloperError} The color-texture pixel datatype is HALF_FLOAT and the WebGL implementation does not support the EXT_color_buffer_half_float extension.\n * @exception {DeveloperError} The color-texture pixel datatype is FLOAT and the WebGL implementation does not support the EXT_color_buffer_float or WEBGL_color_buffer_float extensions.\n *\n * @example\n * // Create a framebuffer with color and depth texture attachments.\n * const width = context.canvas.clientWidth;\n * const height = context.canvas.clientHeight;\n * const framebuffer = new Framebuffer({\n *   context : context,\n *   colorTextures : [new Texture({\n *     context : context,\n *     width : width,\n *     height : height,\n *     pixelFormat : PixelFormat.RGBA\n *   })],\n *   depthTexture : new Texture({\n *     context : context,\n *     width : width,\n *     height : height,\n *     pixelFormat : PixelFormat.DEPTH_COMPONENT,\n *     pixelDatatype : PixelDatatype.UNSIGNED_SHORT\n *   })\n * });\n *\n * @private\n * @constructor\n */\nfunction Framebuffer(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const context = options.context;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.context\", context);\n  //>>includeEnd('debug');\n\n  const gl = context._gl;\n  const maximumColorAttachments = ContextLimits.maximumColorAttachments;\n  this._gl = gl;\n  this._framebuffer = gl.createFramebuffer();\n  this._colorTextures = [];\n  this._colorRenderbuffers = [];\n  this._activeColorAttachments = [];\n  this._depthTexture = undefined;\n  this._depthRenderbuffer = undefined;\n  this._stencilRenderbuffer = undefined;\n  this._depthStencilTexture = undefined;\n  this._depthStencilRenderbuffer = undefined;\n\n  /**\n   * When true, the framebuffer owns its attachments so they will be destroyed when\n   * {@link Framebuffer#destroy} is called or when a new attachment is assigned\n   * to an attachment point.\n   *\n   * @type {boolean}\n   * @default true\n   *\n   * @see Framebuffer#destroy\n   */\n  this.destroyAttachments = defaultValue(options.destroyAttachments, true);\n\n  // Throw if a texture and renderbuffer are attached to the same point.  This won't\n  // cause a WebGL error (because only one will be attached), but is likely a developer error.\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(options.colorTextures) && defined(options.colorRenderbuffers)) {\n    throw new DeveloperError(\"Cannot have both color texture and color renderbuffer attachments.\");\n  }\n  if (defined(options.depthTexture) && defined(options.depthRenderbuffer)) {\n    throw new DeveloperError(\"Cannot have both a depth texture and depth renderbuffer attachment.\");\n  }\n  if (defined(options.depthStencilTexture) && defined(options.depthStencilRenderbuffer)) {\n    throw new DeveloperError(\"Cannot have both a depth-stencil texture and depth-stencil renderbuffer attachment.\");\n  }\n\n  // Avoid errors defined in Section 6.5 of the WebGL spec\n  const depthAttachment = defined(options.depthTexture) || defined(options.depthRenderbuffer);\n  const depthStencilAttachment = defined(options.depthStencilTexture) || defined(options.depthStencilRenderbuffer);\n  if (depthAttachment && depthStencilAttachment) {\n    throw new DeveloperError(\"Cannot have both a depth and depth-stencil attachment.\");\n  }\n  if (defined(options.stencilRenderbuffer) && depthStencilAttachment) {\n    throw new DeveloperError(\"Cannot have both a stencil and depth-stencil attachment.\");\n  }\n  if (depthAttachment && defined(options.stencilRenderbuffer)) {\n    throw new DeveloperError(\"Cannot have both a depth and stencil attachment.\");\n  }\n  //>>includeEnd('debug');\n\n  this._bind();\n  if (defined(options.colorTextures)) {\n    const textures = options.colorTextures;\n    const length = this._colorTextures.length = this._activeColorAttachments.length = textures.length;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (length > maximumColorAttachments) {\n      throw new DeveloperError(\"The number of color attachments exceeds the number supported.\");\n    }\n    //>>includeEnd('debug');\n\n    for (let i = 0; i < length; ++i) {\n      const texture = textures[i];\n\n      //>>includeStart('debug', pragmas.debug);\n      if (!PixelFormat.isColorFormat(texture.pixelFormat)) {\n        throw new DeveloperError(\"The color-texture pixel-format must be a color format.\");\n      }\n      if (texture.pixelDatatype === PixelDatatype.FLOAT && !context.colorBufferFloat) {\n        throw new DeveloperError(\"The color texture pixel datatype is FLOAT and the WebGL implementation does not support the EXT_color_buffer_float or WEBGL_color_buffer_float extensions. See Context.colorBufferFloat.\");\n      }\n      if (texture.pixelDatatype === PixelDatatype.HALF_FLOAT && !context.colorBufferHalfFloat) {\n        throw new DeveloperError(\"The color texture pixel datatype is HALF_FLOAT and the WebGL implementation does not support the EXT_color_buffer_half_float extension. See Context.colorBufferHalfFloat.\");\n      }\n      //>>includeEnd('debug');\n\n      const attachmentEnum = this._gl.COLOR_ATTACHMENT0 + i;\n      attachTexture(this, attachmentEnum, texture);\n      this._activeColorAttachments[i] = attachmentEnum;\n      this._colorTextures[i] = texture;\n    }\n  }\n  if (defined(options.colorRenderbuffers)) {\n    const renderbuffers = options.colorRenderbuffers;\n    const length = this._colorRenderbuffers.length = this._activeColorAttachments.length = renderbuffers.length;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (length > maximumColorAttachments) {\n      throw new DeveloperError(\"The number of color attachments exceeds the number supported.\");\n    }\n    //>>includeEnd('debug');\n\n    for (let i = 0; i < length; ++i) {\n      const renderbuffer = renderbuffers[i];\n      const attachmentEnum = this._gl.COLOR_ATTACHMENT0 + i;\n      attachRenderbuffer(this, attachmentEnum, renderbuffer);\n      this._activeColorAttachments[i] = attachmentEnum;\n      this._colorRenderbuffers[i] = renderbuffer;\n    }\n  }\n  if (defined(options.depthTexture)) {\n    const texture = options.depthTexture;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (texture.pixelFormat !== PixelFormat.DEPTH_COMPONENT) {\n      throw new DeveloperError(\"The depth-texture pixel-format must be DEPTH_COMPONENT.\");\n    }\n    //>>includeEnd('debug');\n\n    attachTexture(this, this._gl.DEPTH_ATTACHMENT, texture);\n    this._depthTexture = texture;\n  }\n  if (defined(options.depthRenderbuffer)) {\n    const renderbuffer = options.depthRenderbuffer;\n    attachRenderbuffer(this, this._gl.DEPTH_ATTACHMENT, renderbuffer);\n    this._depthRenderbuffer = renderbuffer;\n  }\n  if (defined(options.stencilRenderbuffer)) {\n    const renderbuffer = options.stencilRenderbuffer;\n    attachRenderbuffer(this, this._gl.STENCIL_ATTACHMENT, renderbuffer);\n    this._stencilRenderbuffer = renderbuffer;\n  }\n  if (defined(options.depthStencilTexture)) {\n    const texture = options.depthStencilTexture;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (texture.pixelFormat !== PixelFormat.DEPTH_STENCIL) {\n      throw new DeveloperError(\"The depth-stencil pixel-format must be DEPTH_STENCIL.\");\n    }\n    //>>includeEnd('debug');\n\n    attachTexture(this, this._gl.DEPTH_STENCIL_ATTACHMENT, texture);\n    this._depthStencilTexture = texture;\n  }\n  if (defined(options.depthStencilRenderbuffer)) {\n    const renderbuffer = options.depthStencilRenderbuffer;\n    attachRenderbuffer(this, this._gl.DEPTH_STENCIL_ATTACHMENT, renderbuffer);\n    this._depthStencilRenderbuffer = renderbuffer;\n  }\n  this._unBind();\n}\nObject.defineProperties(Framebuffer.prototype, {\n  /**\n   * The status of the framebuffer. If the status is not WebGLConstants.FRAMEBUFFER_COMPLETE,\n   * a {@link DeveloperError} will be thrown when attempting to render to the framebuffer.\n   * @memberof Framebuffer.prototype\n   * @type {number}\n   */\n  status: {\n    get: function () {\n      this._bind();\n      const status = this._gl.checkFramebufferStatus(this._gl.FRAMEBUFFER);\n      this._unBind();\n      return status;\n    }\n  },\n  numberOfColorAttachments: {\n    get: function () {\n      return this._activeColorAttachments.length;\n    }\n  },\n  depthTexture: {\n    get: function () {\n      return this._depthTexture;\n    }\n  },\n  depthRenderbuffer: {\n    get: function () {\n      return this._depthRenderbuffer;\n    }\n  },\n  stencilRenderbuffer: {\n    get: function () {\n      return this._stencilRenderbuffer;\n    }\n  },\n  depthStencilTexture: {\n    get: function () {\n      return this._depthStencilTexture;\n    }\n  },\n  depthStencilRenderbuffer: {\n    get: function () {\n      return this._depthStencilRenderbuffer;\n    }\n  },\n  /**\n   * True if the framebuffer has a depth attachment.  Depth attachments include\n   * depth and depth-stencil textures, and depth and depth-stencil renderbuffers.  When\n   * rendering to a framebuffer, a depth attachment is required for the depth test to have effect.\n   * @memberof Framebuffer.prototype\n   * @type {boolean}\n   */\n  hasDepthAttachment: {\n    get: function () {\n      return !!(this.depthTexture || this.depthRenderbuffer || this.depthStencilTexture || this.depthStencilRenderbuffer);\n    }\n  }\n});\nFramebuffer.prototype._bind = function () {\n  const gl = this._gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);\n};\nFramebuffer.prototype._unBind = function () {\n  const gl = this._gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n};\nFramebuffer.prototype.bindDraw = function () {\n  const gl = this._gl;\n  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._framebuffer);\n};\nFramebuffer.prototype.bindRead = function () {\n  const gl = this._gl;\n  gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._framebuffer);\n};\nFramebuffer.prototype._getActiveColorAttachments = function () {\n  return this._activeColorAttachments;\n};\nFramebuffer.prototype.getColorTexture = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index) || index < 0 || index >= this._colorTextures.length) {\n    throw new DeveloperError(\"index is required, must be greater than or equal to zero and must be less than the number of color attachments.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._colorTextures[index];\n};\nFramebuffer.prototype.getColorRenderbuffer = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index) || index < 0 || index >= this._colorRenderbuffers.length) {\n    throw new DeveloperError(\"index is required, must be greater than or equal to zero and must be less than the number of color attachments.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._colorRenderbuffers[index];\n};\nFramebuffer.prototype.isDestroyed = function () {\n  return false;\n};\nFramebuffer.prototype.destroy = function () {\n  if (this.destroyAttachments) {\n    // If the color texture is a cube map face, it is owned by the cube map, and will not be destroyed.\n    const textures = this._colorTextures;\n    for (let i = 0; i < textures.length; ++i) {\n      const texture = textures[i];\n      if (defined(texture)) {\n        texture.destroy();\n      }\n    }\n    const renderbuffers = this._colorRenderbuffers;\n    for (let i = 0; i < renderbuffers.length; ++i) {\n      const renderbuffer = renderbuffers[i];\n      if (defined(renderbuffer)) {\n        renderbuffer.destroy();\n      }\n    }\n    this._depthTexture = this._depthTexture && this._depthTexture.destroy();\n    this._depthRenderbuffer = this._depthRenderbuffer && this._depthRenderbuffer.destroy();\n    this._stencilRenderbuffer = this._stencilRenderbuffer && this._stencilRenderbuffer.destroy();\n    this._depthStencilTexture = this._depthStencilTexture && this._depthStencilTexture.destroy();\n    this._depthStencilRenderbuffer = this._depthStencilRenderbuffer && this._depthStencilRenderbuffer.destroy();\n  }\n  this._gl.deleteFramebuffer(this._framebuffer);\n  return destroyObject(this);\n};\nexport default Framebuffer;","map":{"version":3,"names":["Check","defaultValue","defined","destroyObject","DeveloperError","PixelFormat","ContextLimits","PixelDatatype","attachTexture","framebuffer","attachment","texture","gl","_gl","framebufferTexture2D","FRAMEBUFFER","_target","_texture","attachRenderbuffer","renderbuffer","framebufferRenderbuffer","RENDERBUFFER","_getRenderbuffer","Framebuffer","options","EMPTY_OBJECT","context","maximumColorAttachments","_framebuffer","createFramebuffer","_colorTextures","_colorRenderbuffers","_activeColorAttachments","_depthTexture","undefined","_depthRenderbuffer","_stencilRenderbuffer","_depthStencilTexture","_depthStencilRenderbuffer","destroyAttachments","colorTextures","colorRenderbuffers","depthTexture","depthRenderbuffer","depthStencilTexture","depthStencilRenderbuffer","depthAttachment","depthStencilAttachment","stencilRenderbuffer","_bind","textures","length","i","isColorFormat","pixelFormat","pixelDatatype","FLOAT","colorBufferFloat","HALF_FLOAT","colorBufferHalfFloat","attachmentEnum","COLOR_ATTACHMENT0","renderbuffers","DEPTH_COMPONENT","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","_unBind","Object","defineProperties","prototype","status","get","checkFramebufferStatus","numberOfColorAttachments","hasDepthAttachment","bindFramebuffer","bindDraw","DRAW_FRAMEBUFFER","bindRead","READ_FRAMEBUFFER","_getActiveColorAttachments","getColorTexture","index","getColorRenderbuffer","isDestroyed","destroy","deleteFramebuffer"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/Framebuffer.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\n\nfunction attachTexture(framebuffer, attachment, texture) {\n  const gl = framebuffer._gl;\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    attachment,\n    texture._target,\n    texture._texture,\n    0,\n  );\n}\n\nfunction attachRenderbuffer(framebuffer, attachment, renderbuffer) {\n  const gl = framebuffer._gl;\n  gl.framebufferRenderbuffer(\n    gl.FRAMEBUFFER,\n    attachment,\n    gl.RENDERBUFFER,\n    renderbuffer._getRenderbuffer(),\n  );\n}\n\n/**\n * Creates a framebuffer with optional initial color, depth, and stencil attachments.\n * Framebuffers are used for render-to-texture effects; they allow us to render to\n * textures in one pass, and read from it in a later pass.\n *\n * @param {object} options Object with the following properties:\n * @param {Context} options.context\n * @param {Texture[]} [options.colorTextures]\n * @param {Renderbuffer[]} [options.colorRenderbuffers]\n * @param {Texture} [options.depthTexture]\n * @param {Renderbuffer} [options.depthRenderbuffer]\n * @param {Renderbuffer} [options.stencilRenderbuffer]\n * @param {Texture} [options.depthStencilTexture]\n * @param {Renderbuffer} [options.depthStencilRenderbuffer]\n * @param {boolean} [options.destroyAttachments=true] When true, the framebuffer owns its attachments so they will be destroyed when {@link Framebuffer#destroy} is called or when a new attachment is assigned to an attachment point.\n *\n * @exception {DeveloperError} Cannot have both color texture and color renderbuffer attachments.\n * @exception {DeveloperError} Cannot have both a depth texture and depth renderbuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth-stencil texture and depth-stencil renderbuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth and depth-stencil renderbuffer.\n * @exception {DeveloperError} Cannot have both a stencil and depth-stencil renderbuffer.\n * @exception {DeveloperError} Cannot have both a depth and stencil renderbuffer.\n * @exception {DeveloperError} The color-texture pixel-format must be a color format.\n * @exception {DeveloperError} The depth-texture pixel-format must be DEPTH_COMPONENT.\n * @exception {DeveloperError} The depth-stencil-texture pixel-format must be DEPTH_STENCIL.\n * @exception {DeveloperError} The number of color attachments exceeds the number supported.\n * @exception {DeveloperError} The color-texture pixel datatype is HALF_FLOAT and the WebGL implementation does not support the EXT_color_buffer_half_float extension.\n * @exception {DeveloperError} The color-texture pixel datatype is FLOAT and the WebGL implementation does not support the EXT_color_buffer_float or WEBGL_color_buffer_float extensions.\n *\n * @example\n * // Create a framebuffer with color and depth texture attachments.\n * const width = context.canvas.clientWidth;\n * const height = context.canvas.clientHeight;\n * const framebuffer = new Framebuffer({\n *   context : context,\n *   colorTextures : [new Texture({\n *     context : context,\n *     width : width,\n *     height : height,\n *     pixelFormat : PixelFormat.RGBA\n *   })],\n *   depthTexture : new Texture({\n *     context : context,\n *     width : width,\n *     height : height,\n *     pixelFormat : PixelFormat.DEPTH_COMPONENT,\n *     pixelDatatype : PixelDatatype.UNSIGNED_SHORT\n *   })\n * });\n *\n * @private\n * @constructor\n */\nfunction Framebuffer(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const context = options.context;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.context\", context);\n  //>>includeEnd('debug');\n\n  const gl = context._gl;\n  const maximumColorAttachments = ContextLimits.maximumColorAttachments;\n\n  this._gl = gl;\n  this._framebuffer = gl.createFramebuffer();\n\n  this._colorTextures = [];\n  this._colorRenderbuffers = [];\n  this._activeColorAttachments = [];\n\n  this._depthTexture = undefined;\n  this._depthRenderbuffer = undefined;\n  this._stencilRenderbuffer = undefined;\n  this._depthStencilTexture = undefined;\n  this._depthStencilRenderbuffer = undefined;\n\n  /**\n   * When true, the framebuffer owns its attachments so they will be destroyed when\n   * {@link Framebuffer#destroy} is called or when a new attachment is assigned\n   * to an attachment point.\n   *\n   * @type {boolean}\n   * @default true\n   *\n   * @see Framebuffer#destroy\n   */\n  this.destroyAttachments = defaultValue(options.destroyAttachments, true);\n\n  // Throw if a texture and renderbuffer are attached to the same point.  This won't\n  // cause a WebGL error (because only one will be attached), but is likely a developer error.\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(options.colorTextures) && defined(options.colorRenderbuffers)) {\n    throw new DeveloperError(\n      \"Cannot have both color texture and color renderbuffer attachments.\",\n    );\n  }\n  if (defined(options.depthTexture) && defined(options.depthRenderbuffer)) {\n    throw new DeveloperError(\n      \"Cannot have both a depth texture and depth renderbuffer attachment.\",\n    );\n  }\n  if (\n    defined(options.depthStencilTexture) &&\n    defined(options.depthStencilRenderbuffer)\n  ) {\n    throw new DeveloperError(\n      \"Cannot have both a depth-stencil texture and depth-stencil renderbuffer attachment.\",\n    );\n  }\n\n  // Avoid errors defined in Section 6.5 of the WebGL spec\n  const depthAttachment =\n    defined(options.depthTexture) || defined(options.depthRenderbuffer);\n  const depthStencilAttachment =\n    defined(options.depthStencilTexture) ||\n    defined(options.depthStencilRenderbuffer);\n  if (depthAttachment && depthStencilAttachment) {\n    throw new DeveloperError(\n      \"Cannot have both a depth and depth-stencil attachment.\",\n    );\n  }\n  if (defined(options.stencilRenderbuffer) && depthStencilAttachment) {\n    throw new DeveloperError(\n      \"Cannot have both a stencil and depth-stencil attachment.\",\n    );\n  }\n  if (depthAttachment && defined(options.stencilRenderbuffer)) {\n    throw new DeveloperError(\n      \"Cannot have both a depth and stencil attachment.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._bind();\n\n  if (defined(options.colorTextures)) {\n    const textures = options.colorTextures;\n    const length =\n      (this._colorTextures.length =\n      this._activeColorAttachments.length =\n        textures.length);\n\n    //>>includeStart('debug', pragmas.debug);\n    if (length > maximumColorAttachments) {\n      throw new DeveloperError(\n        \"The number of color attachments exceeds the number supported.\",\n      );\n    }\n    //>>includeEnd('debug');\n\n    for (let i = 0; i < length; ++i) {\n      const texture = textures[i];\n\n      //>>includeStart('debug', pragmas.debug);\n      if (!PixelFormat.isColorFormat(texture.pixelFormat)) {\n        throw new DeveloperError(\n          \"The color-texture pixel-format must be a color format.\",\n        );\n      }\n      if (\n        texture.pixelDatatype === PixelDatatype.FLOAT &&\n        !context.colorBufferFloat\n      ) {\n        throw new DeveloperError(\n          \"The color texture pixel datatype is FLOAT and the WebGL implementation does not support the EXT_color_buffer_float or WEBGL_color_buffer_float extensions. See Context.colorBufferFloat.\",\n        );\n      }\n      if (\n        texture.pixelDatatype === PixelDatatype.HALF_FLOAT &&\n        !context.colorBufferHalfFloat\n      ) {\n        throw new DeveloperError(\n          \"The color texture pixel datatype is HALF_FLOAT and the WebGL implementation does not support the EXT_color_buffer_half_float extension. See Context.colorBufferHalfFloat.\",\n        );\n      }\n      //>>includeEnd('debug');\n\n      const attachmentEnum = this._gl.COLOR_ATTACHMENT0 + i;\n      attachTexture(this, attachmentEnum, texture);\n      this._activeColorAttachments[i] = attachmentEnum;\n      this._colorTextures[i] = texture;\n    }\n  }\n\n  if (defined(options.colorRenderbuffers)) {\n    const renderbuffers = options.colorRenderbuffers;\n    const length =\n      (this._colorRenderbuffers.length =\n      this._activeColorAttachments.length =\n        renderbuffers.length);\n\n    //>>includeStart('debug', pragmas.debug);\n    if (length > maximumColorAttachments) {\n      throw new DeveloperError(\n        \"The number of color attachments exceeds the number supported.\",\n      );\n    }\n    //>>includeEnd('debug');\n\n    for (let i = 0; i < length; ++i) {\n      const renderbuffer = renderbuffers[i];\n      const attachmentEnum = this._gl.COLOR_ATTACHMENT0 + i;\n      attachRenderbuffer(this, attachmentEnum, renderbuffer);\n      this._activeColorAttachments[i] = attachmentEnum;\n      this._colorRenderbuffers[i] = renderbuffer;\n    }\n  }\n\n  if (defined(options.depthTexture)) {\n    const texture = options.depthTexture;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (texture.pixelFormat !== PixelFormat.DEPTH_COMPONENT) {\n      throw new DeveloperError(\n        \"The depth-texture pixel-format must be DEPTH_COMPONENT.\",\n      );\n    }\n    //>>includeEnd('debug');\n\n    attachTexture(this, this._gl.DEPTH_ATTACHMENT, texture);\n    this._depthTexture = texture;\n  }\n\n  if (defined(options.depthRenderbuffer)) {\n    const renderbuffer = options.depthRenderbuffer;\n    attachRenderbuffer(this, this._gl.DEPTH_ATTACHMENT, renderbuffer);\n    this._depthRenderbuffer = renderbuffer;\n  }\n\n  if (defined(options.stencilRenderbuffer)) {\n    const renderbuffer = options.stencilRenderbuffer;\n    attachRenderbuffer(this, this._gl.STENCIL_ATTACHMENT, renderbuffer);\n    this._stencilRenderbuffer = renderbuffer;\n  }\n\n  if (defined(options.depthStencilTexture)) {\n    const texture = options.depthStencilTexture;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (texture.pixelFormat !== PixelFormat.DEPTH_STENCIL) {\n      throw new DeveloperError(\n        \"The depth-stencil pixel-format must be DEPTH_STENCIL.\",\n      );\n    }\n    //>>includeEnd('debug');\n\n    attachTexture(this, this._gl.DEPTH_STENCIL_ATTACHMENT, texture);\n    this._depthStencilTexture = texture;\n  }\n\n  if (defined(options.depthStencilRenderbuffer)) {\n    const renderbuffer = options.depthStencilRenderbuffer;\n    attachRenderbuffer(this, this._gl.DEPTH_STENCIL_ATTACHMENT, renderbuffer);\n    this._depthStencilRenderbuffer = renderbuffer;\n  }\n\n  this._unBind();\n}\n\nObject.defineProperties(Framebuffer.prototype, {\n  /**\n   * The status of the framebuffer. If the status is not WebGLConstants.FRAMEBUFFER_COMPLETE,\n   * a {@link DeveloperError} will be thrown when attempting to render to the framebuffer.\n   * @memberof Framebuffer.prototype\n   * @type {number}\n   */\n  status: {\n    get: function () {\n      this._bind();\n      const status = this._gl.checkFramebufferStatus(this._gl.FRAMEBUFFER);\n      this._unBind();\n      return status;\n    },\n  },\n  numberOfColorAttachments: {\n    get: function () {\n      return this._activeColorAttachments.length;\n    },\n  },\n  depthTexture: {\n    get: function () {\n      return this._depthTexture;\n    },\n  },\n  depthRenderbuffer: {\n    get: function () {\n      return this._depthRenderbuffer;\n    },\n  },\n  stencilRenderbuffer: {\n    get: function () {\n      return this._stencilRenderbuffer;\n    },\n  },\n  depthStencilTexture: {\n    get: function () {\n      return this._depthStencilTexture;\n    },\n  },\n  depthStencilRenderbuffer: {\n    get: function () {\n      return this._depthStencilRenderbuffer;\n    },\n  },\n\n  /**\n   * True if the framebuffer has a depth attachment.  Depth attachments include\n   * depth and depth-stencil textures, and depth and depth-stencil renderbuffers.  When\n   * rendering to a framebuffer, a depth attachment is required for the depth test to have effect.\n   * @memberof Framebuffer.prototype\n   * @type {boolean}\n   */\n  hasDepthAttachment: {\n    get: function () {\n      return !!(\n        this.depthTexture ||\n        this.depthRenderbuffer ||\n        this.depthStencilTexture ||\n        this.depthStencilRenderbuffer\n      );\n    },\n  },\n});\n\nFramebuffer.prototype._bind = function () {\n  const gl = this._gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);\n};\n\nFramebuffer.prototype._unBind = function () {\n  const gl = this._gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n};\n\nFramebuffer.prototype.bindDraw = function () {\n  const gl = this._gl;\n  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._framebuffer);\n};\n\nFramebuffer.prototype.bindRead = function () {\n  const gl = this._gl;\n  gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._framebuffer);\n};\n\nFramebuffer.prototype._getActiveColorAttachments = function () {\n  return this._activeColorAttachments;\n};\n\nFramebuffer.prototype.getColorTexture = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index) || index < 0 || index >= this._colorTextures.length) {\n    throw new DeveloperError(\n      \"index is required, must be greater than or equal to zero and must be less than the number of color attachments.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  return this._colorTextures[index];\n};\n\nFramebuffer.prototype.getColorRenderbuffer = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    !defined(index) ||\n    index < 0 ||\n    index >= this._colorRenderbuffers.length\n  ) {\n    throw new DeveloperError(\n      \"index is required, must be greater than or equal to zero and must be less than the number of color attachments.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  return this._colorRenderbuffers[index];\n};\n\nFramebuffer.prototype.isDestroyed = function () {\n  return false;\n};\n\nFramebuffer.prototype.destroy = function () {\n  if (this.destroyAttachments) {\n    // If the color texture is a cube map face, it is owned by the cube map, and will not be destroyed.\n    const textures = this._colorTextures;\n    for (let i = 0; i < textures.length; ++i) {\n      const texture = textures[i];\n      if (defined(texture)) {\n        texture.destroy();\n      }\n    }\n\n    const renderbuffers = this._colorRenderbuffers;\n    for (let i = 0; i < renderbuffers.length; ++i) {\n      const renderbuffer = renderbuffers[i];\n      if (defined(renderbuffer)) {\n        renderbuffer.destroy();\n      }\n    }\n\n    this._depthTexture = this._depthTexture && this._depthTexture.destroy();\n    this._depthRenderbuffer =\n      this._depthRenderbuffer && this._depthRenderbuffer.destroy();\n    this._stencilRenderbuffer =\n      this._stencilRenderbuffer && this._stencilRenderbuffer.destroy();\n    this._depthStencilTexture =\n      this._depthStencilTexture && this._depthStencilTexture.destroy();\n    this._depthStencilRenderbuffer =\n      this._depthStencilRenderbuffer &&\n      this._depthStencilRenderbuffer.destroy();\n  }\n\n  this._gl.deleteFramebuffer(this._framebuffer);\n  return destroyObject(this);\n};\nexport default Framebuffer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}