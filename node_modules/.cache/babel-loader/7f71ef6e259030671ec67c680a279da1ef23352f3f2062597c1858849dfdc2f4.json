{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport PropertyTextureProperty from \"./PropertyTextureProperty.js\";\n\n/**\n * A property texture.\n * <p>\n * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension} as well as the\n * previous {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata|EXT_feature_metadata Extension} for glTF.\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} [options.name] Optional human-readable name to describe the texture\n * @param {string|number} [options.id] A unique id to identify the property texture, useful for debugging. For <code>EXT_structural_metadata</code>, this is the array index in the property textures array, for <code>EXT_feature_metadata</code> this is the dictionary key in the property textures dictionary.\n * @param {object} options.propertyTexture The property texture JSON, following the EXT_structural_metadata schema.\n * @param {MetadataClass} options.class The class that properties conform to.\n * @param {Object<string, Texture>} options.textures An object mapping texture IDs to {@link Texture} objects.\n *\n * @alias PropertyTexture\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction PropertyTexture(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const propertyTexture = options.propertyTexture;\n  const classDefinition = options.class;\n  const textures = options.textures;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.propertyTexture\", propertyTexture);\n  Check.typeOf.object(\"options.class\", classDefinition);\n  Check.typeOf.object(\"options.textures\", textures);\n  //>>includeEnd('debug');\n\n  const extensions = propertyTexture.extensions;\n  const extras = propertyTexture.extras;\n  const properties = {};\n  if (defined(propertyTexture.properties)) {\n    for (const propertyId in propertyTexture.properties) {\n      if (propertyTexture.properties.hasOwnProperty(propertyId)) {\n        properties[propertyId] = new PropertyTextureProperty({\n          property: propertyTexture.properties[propertyId],\n          classProperty: classDefinition.properties[propertyId],\n          textures: textures\n        });\n      }\n    }\n  }\n  this._name = options.name;\n  this._id = options.id;\n  this._class = classDefinition;\n  this._properties = properties;\n  this._extras = extras;\n  this._extensions = extensions;\n}\nObject.defineProperties(PropertyTexture.prototype, {\n  /**\n   * A human-readable name for this texture\n   *\n   * @memberof PropertyTexture.prototype\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  name: {\n    get: function () {\n      return this._name;\n    }\n  },\n  /**\n   * An identifier for this texture. Useful for debugging.\n   *\n   * @memberof PropertyTexture.prototype\n   * @type {string|number}\n   * @readonly\n   * @private\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof PropertyTexture.prototype\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    }\n  },\n  /**\n   * The properties in this property texture.\n   *\n   * @memberof PropertyTexture.prototype\n   *\n   * @type {PropertyTextureProperty}\n   * @readonly\n   * @private\n   */\n  properties: {\n    get: function () {\n      return this._properties;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof PropertyTexture.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof PropertyTexture.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\n\n/**\n * Gets the property with the given property ID.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {PropertyTextureProperty|undefined} The property, or <code>undefined</code> if the property does not exist.\n * @private\n */\nPropertyTexture.prototype.getProperty = function (propertyId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"propertyId\", propertyId);\n  //>>includeEnd('debug');\n\n  return this._properties[propertyId];\n};\nexport default PropertyTexture;","map":{"version":3,"names":["Check","defaultValue","defined","PropertyTextureProperty","PropertyTexture","options","EMPTY_OBJECT","propertyTexture","classDefinition","class","textures","typeOf","object","extensions","extras","properties","propertyId","hasOwnProperty","property","classProperty","_name","name","_id","id","_class","_properties","_extras","_extensions","Object","defineProperties","prototype","get","getProperty","string"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/PropertyTexture.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport PropertyTextureProperty from \"./PropertyTextureProperty.js\";\n\n/**\n * A property texture.\n * <p>\n * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension} as well as the\n * previous {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata|EXT_feature_metadata Extension} for glTF.\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} [options.name] Optional human-readable name to describe the texture\n * @param {string|number} [options.id] A unique id to identify the property texture, useful for debugging. For <code>EXT_structural_metadata</code>, this is the array index in the property textures array, for <code>EXT_feature_metadata</code> this is the dictionary key in the property textures dictionary.\n * @param {object} options.propertyTexture The property texture JSON, following the EXT_structural_metadata schema.\n * @param {MetadataClass} options.class The class that properties conform to.\n * @param {Object<string, Texture>} options.textures An object mapping texture IDs to {@link Texture} objects.\n *\n * @alias PropertyTexture\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction PropertyTexture(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const propertyTexture = options.propertyTexture;\n  const classDefinition = options.class;\n  const textures = options.textures;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.propertyTexture\", propertyTexture);\n  Check.typeOf.object(\"options.class\", classDefinition);\n  Check.typeOf.object(\"options.textures\", textures);\n  //>>includeEnd('debug');\n\n  const extensions = propertyTexture.extensions;\n  const extras = propertyTexture.extras;\n\n  const properties = {};\n  if (defined(propertyTexture.properties)) {\n    for (const propertyId in propertyTexture.properties) {\n      if (propertyTexture.properties.hasOwnProperty(propertyId)) {\n        properties[propertyId] = new PropertyTextureProperty({\n          property: propertyTexture.properties[propertyId],\n          classProperty: classDefinition.properties[propertyId],\n          textures: textures,\n        });\n      }\n    }\n  }\n\n  this._name = options.name;\n  this._id = options.id;\n  this._class = classDefinition;\n  this._properties = properties;\n  this._extras = extras;\n  this._extensions = extensions;\n}\n\nObject.defineProperties(PropertyTexture.prototype, {\n  /**\n   * A human-readable name for this texture\n   *\n   * @memberof PropertyTexture.prototype\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n  /**\n   * An identifier for this texture. Useful for debugging.\n   *\n   * @memberof PropertyTexture.prototype\n   * @type {string|number}\n   * @readonly\n   * @private\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof PropertyTexture.prototype\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    },\n  },\n\n  /**\n   * The properties in this property texture.\n   *\n   * @memberof PropertyTexture.prototype\n   *\n   * @type {PropertyTextureProperty}\n   * @readonly\n   * @private\n   */\n  properties: {\n    get: function () {\n      return this._properties;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof PropertyTexture.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof PropertyTexture.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\n/**\n * Gets the property with the given property ID.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {PropertyTextureProperty|undefined} The property, or <code>undefined</code> if the property does not exist.\n * @private\n */\nPropertyTexture.prototype.getProperty = function (propertyId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"propertyId\", propertyId);\n  //>>includeEnd('debug');\n\n  return this._properties[propertyId];\n};\n\nexport default PropertyTexture;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}