{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nconst Flags = {\n  CULL: 1,\n  OCCLUDE: 2,\n  EXECUTE_IN_CLOSEST_FRUSTUM: 4,\n  DEBUG_SHOW_BOUNDING_VOLUME: 8,\n  CAST_SHADOWS: 16,\n  RECEIVE_SHADOWS: 32,\n  PICK_ONLY: 64,\n  DEPTH_FOR_TRANSLUCENT_CLASSIFICATION: 128\n};\n\n/**\n * Represents a command to the renderer for drawing.\n *\n * @alias DrawCommand\n * @constructor\n *\n * @private\n */\nfunction DrawCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._boundingVolume = options.boundingVolume;\n  this._orientedBoundingBox = options.orientedBoundingBox;\n  this._modelMatrix = options.modelMatrix;\n  this._primitiveType = defaultValue(options.primitiveType, PrimitiveType.TRIANGLES);\n  this._vertexArray = options.vertexArray;\n  this._count = options.count;\n  this._offset = defaultValue(options.offset, 0);\n  this._instanceCount = defaultValue(options.instanceCount, 0);\n  this._shaderProgram = options.shaderProgram;\n  this._uniformMap = options.uniformMap;\n  this._renderState = options.renderState;\n  this._framebuffer = options.framebuffer;\n  this._pass = options.pass;\n  this._owner = options.owner;\n  this._debugOverlappingFrustums = 0;\n  this._pickId = options.pickId;\n  this._pickMetadataAllowed = options.pickMetadataAllowed === true;\n  this._pickedMetadataInfo = undefined;\n\n  // Set initial flags.\n  this._flags = 0;\n  this.cull = defaultValue(options.cull, true);\n  this.occlude = defaultValue(options.occlude, true);\n  this.executeInClosestFrustum = defaultValue(options.executeInClosestFrustum, false);\n  this.debugShowBoundingVolume = defaultValue(options.debugShowBoundingVolume, false);\n  this.castShadows = defaultValue(options.castShadows, false);\n  this.receiveShadows = defaultValue(options.receiveShadows, false);\n  this.pickOnly = defaultValue(options.pickOnly, false);\n  this.depthForTranslucentClassification = defaultValue(options.depthForTranslucentClassification, false);\n  this.dirty = true;\n  this.lastDirtyTime = 0;\n\n  /**\n   * @private\n   */\n  this.derivedCommands = {};\n}\nfunction hasFlag(command, flag) {\n  return (command._flags & flag) === flag;\n}\nfunction setFlag(command, flag, value) {\n  if (value) {\n    command._flags |= flag;\n  } else {\n    command._flags &= ~flag;\n  }\n}\nObject.defineProperties(DrawCommand.prototype, {\n  /**\n   * The bounding volume of the geometry in world space.  This is used for culling and frustum selection.\n   * <p>\n   * For best rendering performance, use the tightest possible bounding volume.  Although\n   * <code>undefined</code> is allowed, always try to provide a bounding volume to\n   * allow the tightest possible near and far planes to be computed for the scene, and\n   * minimize the number of frustums needed.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {object}\n   * @default undefined\n   *\n   * @see DrawCommand#debugShowBoundingVolume\n   */\n  boundingVolume: {\n    get: function () {\n      return this._boundingVolume;\n    },\n    set: function (value) {\n      if (this._boundingVolume !== value) {\n        this._boundingVolume = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The oriented bounding box of the geometry in world space. If this is defined, it is used instead of\n   * {@link DrawCommand#boundingVolume} for plane intersection testing.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {OrientedBoundingBox}\n   * @default undefined\n   *\n   * @see DrawCommand#debugShowBoundingVolume\n   */\n  orientedBoundingBox: {\n    get: function () {\n      return this._orientedBoundingBox;\n    },\n    set: function (value) {\n      if (this._orientedBoundingBox !== value) {\n        this._orientedBoundingBox = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * When <code>true</code>, the renderer frustum and horizon culls the command based on its {@link DrawCommand#boundingVolume}.\n   * If the command was already culled, set this to <code>false</code> for a performance improvement.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default true\n   */\n  cull: {\n    get: function () {\n      return hasFlag(this, Flags.CULL);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.CULL) !== value) {\n        setFlag(this, Flags.CULL, value);\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * When <code>true</code>, the horizon culls the command based on its {@link DrawCommand#boundingVolume}.\n   * {@link DrawCommand#cull} must also be <code>true</code> in order for the command to be culled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default true\n   */\n  occlude: {\n    get: function () {\n      return hasFlag(this, Flags.OCCLUDE);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.OCCLUDE) !== value) {\n        setFlag(this, Flags.OCCLUDE, value);\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The transformation from the geometry in model space to world space.\n   * <p>\n   * When <code>undefined</code>, the geometry is assumed to be defined in world space.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Matrix4}\n   * @default undefined\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      if (this._modelMatrix !== value) {\n        this._modelMatrix = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The type of geometry in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {PrimitiveType}\n   * @default PrimitiveType.TRIANGLES\n   */\n  primitiveType: {\n    get: function () {\n      return this._primitiveType;\n    },\n    set: function (value) {\n      if (this._primitiveType !== value) {\n        this._primitiveType = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {VertexArray}\n   * @default undefined\n   */\n  vertexArray: {\n    get: function () {\n      return this._vertexArray;\n    },\n    set: function (value) {\n      if (this._vertexArray !== value) {\n        this._vertexArray = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The number of vertices to draw in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {number}\n   * @default undefined\n   */\n  count: {\n    get: function () {\n      return this._count;\n    },\n    set: function (value) {\n      if (this._count !== value) {\n        this._count = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The offset to start drawing in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {number}\n   * @default 0\n   */\n  offset: {\n    get: function () {\n      return this._offset;\n    },\n    set: function (value) {\n      if (this._offset !== value) {\n        this._offset = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The number of instances to draw.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {number}\n   * @default 0\n   */\n  instanceCount: {\n    get: function () {\n      return this._instanceCount;\n    },\n    set: function (value) {\n      if (this._instanceCount !== value) {\n        this._instanceCount = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The shader program to apply.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {ShaderProgram}\n   * @default undefined\n   */\n  shaderProgram: {\n    get: function () {\n      return this._shaderProgram;\n    },\n    set: function (value) {\n      if (this._shaderProgram !== value) {\n        this._shaderProgram = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * Whether this command should cast shadows when shadowing is enabled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   */\n  castShadows: {\n    get: function () {\n      return hasFlag(this, Flags.CAST_SHADOWS);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.CAST_SHADOWS) !== value) {\n        setFlag(this, Flags.CAST_SHADOWS, value);\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * Whether this command should receive shadows when shadowing is enabled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   */\n  receiveShadows: {\n    get: function () {\n      return hasFlag(this, Flags.RECEIVE_SHADOWS);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.RECEIVE_SHADOWS) !== value) {\n        setFlag(this, Flags.RECEIVE_SHADOWS, value);\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * An object with functions whose names match the uniforms in the shader program\n   * and return values to set those uniforms.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {object}\n   * @default undefined\n   */\n  uniformMap: {\n    get: function () {\n      return this._uniformMap;\n    },\n    set: function (value) {\n      if (this._uniformMap !== value) {\n        this._uniformMap = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The render state.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {RenderState}\n   * @default undefined\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n    set: function (value) {\n      if (this._renderState !== value) {\n        this._renderState = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The framebuffer to draw to.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Framebuffer}\n   * @default undefined\n   */\n  framebuffer: {\n    get: function () {\n      return this._framebuffer;\n    },\n    set: function (value) {\n      if (this._framebuffer !== value) {\n        this._framebuffer = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The pass when to render.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Pass}\n   * @default undefined\n   */\n  pass: {\n    get: function () {\n      return this._pass;\n    },\n    set: function (value) {\n      if (this._pass !== value) {\n        this._pass = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * Specifies if this command is only to be executed in the frustum closest\n   * to the eye containing the bounding volume. Defaults to <code>false</code>.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   */\n  executeInClosestFrustum: {\n    get: function () {\n      return hasFlag(this, Flags.EXECUTE_IN_CLOSEST_FRUSTUM);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.EXECUTE_IN_CLOSEST_FRUSTUM) !== value) {\n        setFlag(this, Flags.EXECUTE_IN_CLOSEST_FRUSTUM, value);\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows us to see who created a command when we only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {object}\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  owner: {\n    get: function () {\n      return this._owner;\n    },\n    set: function (value) {\n      if (this._owner !== value) {\n        this._owner = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the {@link DrawCommand#boundingVolume} for this command, assuming it is a sphere, when the command executes.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   *\n   * @see DrawCommand#boundingVolume\n   */\n  debugShowBoundingVolume: {\n    get: function () {\n      return hasFlag(this, Flags.DEBUG_SHOW_BOUNDING_VOLUME);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.DEBUG_SHOW_BOUNDING_VOLUME) !== value) {\n        setFlag(this, Flags.DEBUG_SHOW_BOUNDING_VOLUME, value);\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * Used to implement Scene.debugShowFrustums.\n   * @private\n   */\n  debugOverlappingFrustums: {\n    get: function () {\n      return this._debugOverlappingFrustums;\n    },\n    set: function (value) {\n      if (this._debugOverlappingFrustums !== value) {\n        this._debugOverlappingFrustums = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * A GLSL string that will evaluate to a pick id. When <code>undefined</code>, the command will only draw depth\n   * during the pick pass.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {string|undefined}\n   * @default undefined\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n    set: function (value) {\n      if (this._pickId !== value) {\n        this._pickId = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * Whether metadata picking is allowed.\n   *\n   * This is essentially only set to `true` for draw commands that are\n   * part of a `ModelDrawCommand`, to check whether a derived command\n   * for metadata picking has to be created.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default undefined\n   * @private\n   */\n  pickMetadataAllowed: {\n    get: function () {\n      return this._pickMetadataAllowed;\n    }\n  },\n  /**\n   * Information about picked metadata.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {PickedMetadataInfo|undefined}\n   * @default undefined\n   */\n  pickedMetadataInfo: {\n    get: function () {\n      return this._pickedMetadataInfo;\n    },\n    set: function (value) {\n      if (this._pickedMetadataInfo !== value) {\n        this._pickedMetadataInfo = value;\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * Whether this command should be executed in the pick pass only.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   */\n  pickOnly: {\n    get: function () {\n      return hasFlag(this, Flags.PICK_ONLY);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.PICK_ONLY) !== value) {\n        setFlag(this, Flags.PICK_ONLY, value);\n        this.dirty = true;\n      }\n    }\n  },\n  /**\n   * Whether this command should be derived to draw depth for classification of translucent primitives.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   */\n  depthForTranslucentClassification: {\n    get: function () {\n      return hasFlag(this, Flags.DEPTH_FOR_TRANSLUCENT_CLASSIFICATION);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.DEPTH_FOR_TRANSLUCENT_CLASSIFICATION) !== value) {\n        setFlag(this, Flags.DEPTH_FOR_TRANSLUCENT_CLASSIFICATION, value);\n        this.dirty = true;\n      }\n    }\n  }\n});\n\n/**\n * @private\n */\nDrawCommand.shallowClone = function (command, result) {\n  if (!defined(command)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    result = new DrawCommand();\n  }\n  result._boundingVolume = command._boundingVolume;\n  result._orientedBoundingBox = command._orientedBoundingBox;\n  result._modelMatrix = command._modelMatrix;\n  result._primitiveType = command._primitiveType;\n  result._vertexArray = command._vertexArray;\n  result._count = command._count;\n  result._offset = command._offset;\n  result._instanceCount = command._instanceCount;\n  result._shaderProgram = command._shaderProgram;\n  result._uniformMap = command._uniformMap;\n  result._renderState = command._renderState;\n  result._framebuffer = command._framebuffer;\n  result._pass = command._pass;\n  result._owner = command._owner;\n  result._debugOverlappingFrustums = command._debugOverlappingFrustums;\n  result._pickId = command._pickId;\n  result._pickMetadataAllowed = command._pickMetadataAllowed;\n  result._pickedMetadataInfo = command._pickedMetadataInfo;\n  result._flags = command._flags;\n  result.dirty = true;\n  result.lastDirtyTime = 0;\n  return result;\n};\n\n/**\n * Executes the draw command.\n *\n * @param {Context} context The renderer context in which to draw.\n * @param {PassState} [passState] The state for the current render pass.\n */\nDrawCommand.prototype.execute = function (context, passState) {\n  context.draw(this, passState);\n};\nexport default DrawCommand;","map":{"version":3,"names":["defaultValue","defined","PrimitiveType","Flags","CULL","OCCLUDE","EXECUTE_IN_CLOSEST_FRUSTUM","DEBUG_SHOW_BOUNDING_VOLUME","CAST_SHADOWS","RECEIVE_SHADOWS","PICK_ONLY","DEPTH_FOR_TRANSLUCENT_CLASSIFICATION","DrawCommand","options","EMPTY_OBJECT","_boundingVolume","boundingVolume","_orientedBoundingBox","orientedBoundingBox","_modelMatrix","modelMatrix","_primitiveType","primitiveType","TRIANGLES","_vertexArray","vertexArray","_count","count","_offset","offset","_instanceCount","instanceCount","_shaderProgram","shaderProgram","_uniformMap","uniformMap","_renderState","renderState","_framebuffer","framebuffer","_pass","pass","_owner","owner","_debugOverlappingFrustums","_pickId","pickId","_pickMetadataAllowed","pickMetadataAllowed","_pickedMetadataInfo","undefined","_flags","cull","occlude","executeInClosestFrustum","debugShowBoundingVolume","castShadows","receiveShadows","pickOnly","depthForTranslucentClassification","dirty","lastDirtyTime","derivedCommands","hasFlag","command","flag","setFlag","value","Object","defineProperties","prototype","get","set","debugOverlappingFrustums","pickedMetadataInfo","shallowClone","result","execute","context","passState","draw"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/DrawCommand.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\n\nconst Flags = {\n  CULL: 1,\n  OCCLUDE: 2,\n  EXECUTE_IN_CLOSEST_FRUSTUM: 4,\n  DEBUG_SHOW_BOUNDING_VOLUME: 8,\n  CAST_SHADOWS: 16,\n  RECEIVE_SHADOWS: 32,\n  PICK_ONLY: 64,\n  DEPTH_FOR_TRANSLUCENT_CLASSIFICATION: 128,\n};\n\n/**\n * Represents a command to the renderer for drawing.\n *\n * @alias DrawCommand\n * @constructor\n *\n * @private\n */\nfunction DrawCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._boundingVolume = options.boundingVolume;\n  this._orientedBoundingBox = options.orientedBoundingBox;\n  this._modelMatrix = options.modelMatrix;\n  this._primitiveType = defaultValue(\n    options.primitiveType,\n    PrimitiveType.TRIANGLES,\n  );\n  this._vertexArray = options.vertexArray;\n  this._count = options.count;\n  this._offset = defaultValue(options.offset, 0);\n  this._instanceCount = defaultValue(options.instanceCount, 0);\n  this._shaderProgram = options.shaderProgram;\n  this._uniformMap = options.uniformMap;\n  this._renderState = options.renderState;\n  this._framebuffer = options.framebuffer;\n  this._pass = options.pass;\n  this._owner = options.owner;\n  this._debugOverlappingFrustums = 0;\n  this._pickId = options.pickId;\n  this._pickMetadataAllowed = options.pickMetadataAllowed === true;\n  this._pickedMetadataInfo = undefined;\n\n  // Set initial flags.\n  this._flags = 0;\n  this.cull = defaultValue(options.cull, true);\n  this.occlude = defaultValue(options.occlude, true);\n  this.executeInClosestFrustum = defaultValue(\n    options.executeInClosestFrustum,\n    false,\n  );\n  this.debugShowBoundingVolume = defaultValue(\n    options.debugShowBoundingVolume,\n    false,\n  );\n  this.castShadows = defaultValue(options.castShadows, false);\n  this.receiveShadows = defaultValue(options.receiveShadows, false);\n  this.pickOnly = defaultValue(options.pickOnly, false);\n  this.depthForTranslucentClassification = defaultValue(\n    options.depthForTranslucentClassification,\n    false,\n  );\n\n  this.dirty = true;\n  this.lastDirtyTime = 0;\n\n  /**\n   * @private\n   */\n  this.derivedCommands = {};\n}\n\nfunction hasFlag(command, flag) {\n  return (command._flags & flag) === flag;\n}\n\nfunction setFlag(command, flag, value) {\n  if (value) {\n    command._flags |= flag;\n  } else {\n    command._flags &= ~flag;\n  }\n}\n\nObject.defineProperties(DrawCommand.prototype, {\n  /**\n   * The bounding volume of the geometry in world space.  This is used for culling and frustum selection.\n   * <p>\n   * For best rendering performance, use the tightest possible bounding volume.  Although\n   * <code>undefined</code> is allowed, always try to provide a bounding volume to\n   * allow the tightest possible near and far planes to be computed for the scene, and\n   * minimize the number of frustums needed.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {object}\n   * @default undefined\n   *\n   * @see DrawCommand#debugShowBoundingVolume\n   */\n  boundingVolume: {\n    get: function () {\n      return this._boundingVolume;\n    },\n    set: function (value) {\n      if (this._boundingVolume !== value) {\n        this._boundingVolume = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The oriented bounding box of the geometry in world space. If this is defined, it is used instead of\n   * {@link DrawCommand#boundingVolume} for plane intersection testing.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {OrientedBoundingBox}\n   * @default undefined\n   *\n   * @see DrawCommand#debugShowBoundingVolume\n   */\n  orientedBoundingBox: {\n    get: function () {\n      return this._orientedBoundingBox;\n    },\n    set: function (value) {\n      if (this._orientedBoundingBox !== value) {\n        this._orientedBoundingBox = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * When <code>true</code>, the renderer frustum and horizon culls the command based on its {@link DrawCommand#boundingVolume}.\n   * If the command was already culled, set this to <code>false</code> for a performance improvement.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default true\n   */\n  cull: {\n    get: function () {\n      return hasFlag(this, Flags.CULL);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.CULL) !== value) {\n        setFlag(this, Flags.CULL, value);\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * When <code>true</code>, the horizon culls the command based on its {@link DrawCommand#boundingVolume}.\n   * {@link DrawCommand#cull} must also be <code>true</code> in order for the command to be culled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default true\n   */\n  occlude: {\n    get: function () {\n      return hasFlag(this, Flags.OCCLUDE);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.OCCLUDE) !== value) {\n        setFlag(this, Flags.OCCLUDE, value);\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The transformation from the geometry in model space to world space.\n   * <p>\n   * When <code>undefined</code>, the geometry is assumed to be defined in world space.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Matrix4}\n   * @default undefined\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      if (this._modelMatrix !== value) {\n        this._modelMatrix = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The type of geometry in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {PrimitiveType}\n   * @default PrimitiveType.TRIANGLES\n   */\n  primitiveType: {\n    get: function () {\n      return this._primitiveType;\n    },\n    set: function (value) {\n      if (this._primitiveType !== value) {\n        this._primitiveType = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {VertexArray}\n   * @default undefined\n   */\n  vertexArray: {\n    get: function () {\n      return this._vertexArray;\n    },\n    set: function (value) {\n      if (this._vertexArray !== value) {\n        this._vertexArray = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The number of vertices to draw in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {number}\n   * @default undefined\n   */\n  count: {\n    get: function () {\n      return this._count;\n    },\n    set: function (value) {\n      if (this._count !== value) {\n        this._count = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The offset to start drawing in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {number}\n   * @default 0\n   */\n  offset: {\n    get: function () {\n      return this._offset;\n    },\n    set: function (value) {\n      if (this._offset !== value) {\n        this._offset = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The number of instances to draw.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {number}\n   * @default 0\n   */\n  instanceCount: {\n    get: function () {\n      return this._instanceCount;\n    },\n    set: function (value) {\n      if (this._instanceCount !== value) {\n        this._instanceCount = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The shader program to apply.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {ShaderProgram}\n   * @default undefined\n   */\n  shaderProgram: {\n    get: function () {\n      return this._shaderProgram;\n    },\n    set: function (value) {\n      if (this._shaderProgram !== value) {\n        this._shaderProgram = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Whether this command should cast shadows when shadowing is enabled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   */\n  castShadows: {\n    get: function () {\n      return hasFlag(this, Flags.CAST_SHADOWS);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.CAST_SHADOWS) !== value) {\n        setFlag(this, Flags.CAST_SHADOWS, value);\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Whether this command should receive shadows when shadowing is enabled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   */\n  receiveShadows: {\n    get: function () {\n      return hasFlag(this, Flags.RECEIVE_SHADOWS);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.RECEIVE_SHADOWS) !== value) {\n        setFlag(this, Flags.RECEIVE_SHADOWS, value);\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * An object with functions whose names match the uniforms in the shader program\n   * and return values to set those uniforms.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {object}\n   * @default undefined\n   */\n  uniformMap: {\n    get: function () {\n      return this._uniformMap;\n    },\n    set: function (value) {\n      if (this._uniformMap !== value) {\n        this._uniformMap = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The render state.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {RenderState}\n   * @default undefined\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n    set: function (value) {\n      if (this._renderState !== value) {\n        this._renderState = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The framebuffer to draw to.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Framebuffer}\n   * @default undefined\n   */\n  framebuffer: {\n    get: function () {\n      return this._framebuffer;\n    },\n    set: function (value) {\n      if (this._framebuffer !== value) {\n        this._framebuffer = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The pass when to render.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Pass}\n   * @default undefined\n   */\n  pass: {\n    get: function () {\n      return this._pass;\n    },\n    set: function (value) {\n      if (this._pass !== value) {\n        this._pass = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Specifies if this command is only to be executed in the frustum closest\n   * to the eye containing the bounding volume. Defaults to <code>false</code>.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   */\n  executeInClosestFrustum: {\n    get: function () {\n      return hasFlag(this, Flags.EXECUTE_IN_CLOSEST_FRUSTUM);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.EXECUTE_IN_CLOSEST_FRUSTUM) !== value) {\n        setFlag(this, Flags.EXECUTE_IN_CLOSEST_FRUSTUM, value);\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows us to see who created a command when we only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {object}\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  owner: {\n    get: function () {\n      return this._owner;\n    },\n    set: function (value) {\n      if (this._owner !== value) {\n        this._owner = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the {@link DrawCommand#boundingVolume} for this command, assuming it is a sphere, when the command executes.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   *\n   * @see DrawCommand#boundingVolume\n   */\n  debugShowBoundingVolume: {\n    get: function () {\n      return hasFlag(this, Flags.DEBUG_SHOW_BOUNDING_VOLUME);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.DEBUG_SHOW_BOUNDING_VOLUME) !== value) {\n        setFlag(this, Flags.DEBUG_SHOW_BOUNDING_VOLUME, value);\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Used to implement Scene.debugShowFrustums.\n   * @private\n   */\n  debugOverlappingFrustums: {\n    get: function () {\n      return this._debugOverlappingFrustums;\n    },\n    set: function (value) {\n      if (this._debugOverlappingFrustums !== value) {\n        this._debugOverlappingFrustums = value;\n        this.dirty = true;\n      }\n    },\n  },\n  /**\n   * A GLSL string that will evaluate to a pick id. When <code>undefined</code>, the command will only draw depth\n   * during the pick pass.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {string|undefined}\n   * @default undefined\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n    set: function (value) {\n      if (this._pickId !== value) {\n        this._pickId = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Whether metadata picking is allowed.\n   *\n   * This is essentially only set to `true` for draw commands that are\n   * part of a `ModelDrawCommand`, to check whether a derived command\n   * for metadata picking has to be created.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default undefined\n   * @private\n   */\n  pickMetadataAllowed: {\n    get: function () {\n      return this._pickMetadataAllowed;\n    },\n  },\n\n  /**\n   * Information about picked metadata.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {PickedMetadataInfo|undefined}\n   * @default undefined\n   */\n  pickedMetadataInfo: {\n    get: function () {\n      return this._pickedMetadataInfo;\n    },\n    set: function (value) {\n      if (this._pickedMetadataInfo !== value) {\n        this._pickedMetadataInfo = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Whether this command should be executed in the pick pass only.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   */\n  pickOnly: {\n    get: function () {\n      return hasFlag(this, Flags.PICK_ONLY);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.PICK_ONLY) !== value) {\n        setFlag(this, Flags.PICK_ONLY, value);\n        this.dirty = true;\n      }\n    },\n  },\n  /**\n   * Whether this command should be derived to draw depth for classification of translucent primitives.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {boolean}\n   * @default false\n   */\n  depthForTranslucentClassification: {\n    get: function () {\n      return hasFlag(this, Flags.DEPTH_FOR_TRANSLUCENT_CLASSIFICATION);\n    },\n    set: function (value) {\n      if (hasFlag(this, Flags.DEPTH_FOR_TRANSLUCENT_CLASSIFICATION) !== value) {\n        setFlag(this, Flags.DEPTH_FOR_TRANSLUCENT_CLASSIFICATION, value);\n        this.dirty = true;\n      }\n    },\n  },\n});\n\n/**\n * @private\n */\nDrawCommand.shallowClone = function (command, result) {\n  if (!defined(command)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    result = new DrawCommand();\n  }\n\n  result._boundingVolume = command._boundingVolume;\n  result._orientedBoundingBox = command._orientedBoundingBox;\n  result._modelMatrix = command._modelMatrix;\n  result._primitiveType = command._primitiveType;\n  result._vertexArray = command._vertexArray;\n  result._count = command._count;\n  result._offset = command._offset;\n  result._instanceCount = command._instanceCount;\n  result._shaderProgram = command._shaderProgram;\n  result._uniformMap = command._uniformMap;\n  result._renderState = command._renderState;\n  result._framebuffer = command._framebuffer;\n  result._pass = command._pass;\n  result._owner = command._owner;\n  result._debugOverlappingFrustums = command._debugOverlappingFrustums;\n  result._pickId = command._pickId;\n  result._pickMetadataAllowed = command._pickMetadataAllowed;\n  result._pickedMetadataInfo = command._pickedMetadataInfo;\n  result._flags = command._flags;\n\n  result.dirty = true;\n  result.lastDirtyTime = 0;\n\n  return result;\n};\n\n/**\n * Executes the draw command.\n *\n * @param {Context} context The renderer context in which to draw.\n * @param {PassState} [passState] The state for the current render pass.\n */\nDrawCommand.prototype.execute = function (context, passState) {\n  context.draw(this, passState);\n};\nexport default DrawCommand;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}