{"ast":null,"code":"import ColorBlendMode from \"../ColorBlendMode.js\";\nimport combine from \"../../Core/combine.js\";\nimport ModelColorStageFS from \"../../Shaders/Model/ModelColorStageFS.js\";\nimport Pass from \"../../Renderer/Pass.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\n\n/**\n * The model color pipeline stage is responsible for handling the application of a static color to the model.\n *\n * @namespace ModelColorPipelineStage\n *\n * @private\n */\nconst ModelColorPipelineStage = {\n  name: \"ModelColorPipelineStage\",\n  // Helps with debugging\n\n  COLOR_UNIFORM_NAME: \"model_color\",\n  COLOR_BLEND_UNIFORM_NAME: \"model_colorBlend\"\n};\n\n/**\n * Process a model. This modifies the following parts of the render resources:\n *\n * <ul>\n *  <li>adds a define to the fragment shader to indicate that the model has a color</li>\n *  <li>adds a function to the fragment shader to apply the color to the model's base color</li>\n *  <li>adds the uniforms for the fragment shader for the model's color and blending properties</li>\n *  <li>updates the pass type in the render resources based on translucency of the model's color</li>\n *</ul>\n *\n * @param {ModelRenderResources} renderResources The render resources for this model.\n * @param {Model} model The model.\n * @param {FrameState} frameState The frameState.\n *\n * @private\n */\nModelColorPipelineStage.process = function (renderResources, model, frameState) {\n  const shaderBuilder = renderResources.shaderBuilder;\n  shaderBuilder.addDefine(\"HAS_MODEL_COLOR\", undefined, ShaderDestination.FRAGMENT);\n  shaderBuilder.addFragmentLines(ModelColorStageFS);\n  const stageUniforms = {};\n\n  // Pass the model's color as a uniform. Set the pass type to translucent, if needed.\n  const color = model.color;\n  if (color.alpha === 0.0 && !model.hasSilhouette(frameState)) {\n    renderResources.renderStateOptions.colorMask = {\n      red: false,\n      green: false,\n      blue: false,\n      alpha: false\n    };\n  }\n  if (color.alpha < 1.0) {\n    renderResources.alphaOptions.pass = Pass.TRANSLUCENT;\n  }\n  shaderBuilder.addUniform(\"vec4\", ModelColorPipelineStage.COLOR_UNIFORM_NAME, ShaderDestination.FRAGMENT);\n  stageUniforms[ModelColorPipelineStage.COLOR_UNIFORM_NAME] = function () {\n    return model.color;\n  };\n\n  // Create a colorBlend from the model's colorBlendMode and colorBlendAmount and pass it as a uniform.\n  shaderBuilder.addUniform(\"float\", ModelColorPipelineStage.COLOR_BLEND_UNIFORM_NAME, ShaderDestination.FRAGMENT);\n  stageUniforms[ModelColorPipelineStage.COLOR_BLEND_UNIFORM_NAME] = function () {\n    return ColorBlendMode.getColorBlend(model.colorBlendMode, model.colorBlendAmount);\n  };\n  renderResources.uniformMap = combine(stageUniforms, renderResources.uniformMap);\n};\nexport default ModelColorPipelineStage;","map":{"version":3,"names":["ColorBlendMode","combine","ModelColorStageFS","Pass","ShaderDestination","ModelColorPipelineStage","name","COLOR_UNIFORM_NAME","COLOR_BLEND_UNIFORM_NAME","process","renderResources","model","frameState","shaderBuilder","addDefine","undefined","FRAGMENT","addFragmentLines","stageUniforms","color","alpha","hasSilhouette","renderStateOptions","colorMask","red","green","blue","alphaOptions","pass","TRANSLUCENT","addUniform","getColorBlend","colorBlendMode","colorBlendAmount","uniformMap"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/ModelColorPipelineStage.js"],"sourcesContent":["import ColorBlendMode from \"../ColorBlendMode.js\";\nimport combine from \"../../Core/combine.js\";\nimport ModelColorStageFS from \"../../Shaders/Model/ModelColorStageFS.js\";\nimport Pass from \"../../Renderer/Pass.js\";\nimport ShaderDestination from \"../../Renderer/ShaderDestination.js\";\n\n/**\n * The model color pipeline stage is responsible for handling the application of a static color to the model.\n *\n * @namespace ModelColorPipelineStage\n *\n * @private\n */\nconst ModelColorPipelineStage = {\n  name: \"ModelColorPipelineStage\", // Helps with debugging\n\n  COLOR_UNIFORM_NAME: \"model_color\",\n  COLOR_BLEND_UNIFORM_NAME: \"model_colorBlend\",\n};\n\n/**\n * Process a model. This modifies the following parts of the render resources:\n *\n * <ul>\n *  <li>adds a define to the fragment shader to indicate that the model has a color</li>\n *  <li>adds a function to the fragment shader to apply the color to the model's base color</li>\n *  <li>adds the uniforms for the fragment shader for the model's color and blending properties</li>\n *  <li>updates the pass type in the render resources based on translucency of the model's color</li>\n *</ul>\n *\n * @param {ModelRenderResources} renderResources The render resources for this model.\n * @param {Model} model The model.\n * @param {FrameState} frameState The frameState.\n *\n * @private\n */\nModelColorPipelineStage.process = function (\n  renderResources,\n  model,\n  frameState,\n) {\n  const shaderBuilder = renderResources.shaderBuilder;\n\n  shaderBuilder.addDefine(\n    \"HAS_MODEL_COLOR\",\n    undefined,\n    ShaderDestination.FRAGMENT,\n  );\n  shaderBuilder.addFragmentLines(ModelColorStageFS);\n\n  const stageUniforms = {};\n\n  // Pass the model's color as a uniform. Set the pass type to translucent, if needed.\n  const color = model.color;\n\n  if (color.alpha === 0.0 && !model.hasSilhouette(frameState)) {\n    renderResources.renderStateOptions.colorMask = {\n      red: false,\n      green: false,\n      blue: false,\n      alpha: false,\n    };\n  }\n\n  if (color.alpha < 1.0) {\n    renderResources.alphaOptions.pass = Pass.TRANSLUCENT;\n  }\n\n  shaderBuilder.addUniform(\n    \"vec4\",\n    ModelColorPipelineStage.COLOR_UNIFORM_NAME,\n    ShaderDestination.FRAGMENT,\n  );\n  stageUniforms[ModelColorPipelineStage.COLOR_UNIFORM_NAME] = function () {\n    return model.color;\n  };\n\n  // Create a colorBlend from the model's colorBlendMode and colorBlendAmount and pass it as a uniform.\n  shaderBuilder.addUniform(\n    \"float\",\n    ModelColorPipelineStage.COLOR_BLEND_UNIFORM_NAME,\n    ShaderDestination.FRAGMENT,\n  );\n  stageUniforms[ModelColorPipelineStage.COLOR_BLEND_UNIFORM_NAME] =\n    function () {\n      return ColorBlendMode.getColorBlend(\n        model.colorBlendMode,\n        model.colorBlendAmount,\n      );\n    };\n\n  renderResources.uniformMap = combine(\n    stageUniforms,\n    renderResources.uniformMap,\n  );\n};\n\nexport default ModelColorPipelineStage;\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,sBAAsB;AACjD,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,iBAAiB,MAAM,0CAA0C;AACxE,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,iBAAiB,MAAM,qCAAqC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG;EAC9BC,IAAI,EAAE,yBAAyB;EAAE;;EAEjCC,kBAAkB,EAAE,aAAa;EACjCC,wBAAwB,EAAE;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,uBAAuB,CAACI,OAAO,GAAG,UAChCC,eAAe,EACfC,KAAK,EACLC,UAAU,EACV;EACA,MAAMC,aAAa,GAAGH,eAAe,CAACG,aAAa;EAEnDA,aAAa,CAACC,SAAS,CACrB,iBAAiB,EACjBC,SAAS,EACTX,iBAAiB,CAACY,QACpB,CAAC;EACDH,aAAa,CAACI,gBAAgB,CAACf,iBAAiB,CAAC;EAEjD,MAAMgB,aAAa,GAAG,CAAC,CAAC;;EAExB;EACA,MAAMC,KAAK,GAAGR,KAAK,CAACQ,KAAK;EAEzB,IAAIA,KAAK,CAACC,KAAK,KAAK,GAAG,IAAI,CAACT,KAAK,CAACU,aAAa,CAACT,UAAU,CAAC,EAAE;IAC3DF,eAAe,CAACY,kBAAkB,CAACC,SAAS,GAAG;MAC7CC,GAAG,EAAE,KAAK;MACVC,KAAK,EAAE,KAAK;MACZC,IAAI,EAAE,KAAK;MACXN,KAAK,EAAE;IACT,CAAC;EACH;EAEA,IAAID,KAAK,CAACC,KAAK,GAAG,GAAG,EAAE;IACrBV,eAAe,CAACiB,YAAY,CAACC,IAAI,GAAGzB,IAAI,CAAC0B,WAAW;EACtD;EAEAhB,aAAa,CAACiB,UAAU,CACtB,MAAM,EACNzB,uBAAuB,CAACE,kBAAkB,EAC1CH,iBAAiB,CAACY,QACpB,CAAC;EACDE,aAAa,CAACb,uBAAuB,CAACE,kBAAkB,CAAC,GAAG,YAAY;IACtE,OAAOI,KAAK,CAACQ,KAAK;EACpB,CAAC;;EAED;EACAN,aAAa,CAACiB,UAAU,CACtB,OAAO,EACPzB,uBAAuB,CAACG,wBAAwB,EAChDJ,iBAAiB,CAACY,QACpB,CAAC;EACDE,aAAa,CAACb,uBAAuB,CAACG,wBAAwB,CAAC,GAC7D,YAAY;IACV,OAAOR,cAAc,CAAC+B,aAAa,CACjCpB,KAAK,CAACqB,cAAc,EACpBrB,KAAK,CAACsB,gBACR,CAAC;EACH,CAAC;EAEHvB,eAAe,CAACwB,UAAU,GAAGjC,OAAO,CAClCiB,aAAa,EACbR,eAAe,CAACwB,UAClB,CAAC;AACH,CAAC;AAED,eAAe7B,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}