{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport MetadataEntity from \"./MetadataEntity.js\";\n\n/**\n * Metadata about a group of {@link Cesium3DTileContent}\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.id The ID of the group.\n * @param {object} options.group The group JSON object.\n * @param {MetadataClass} options.class The class that group metadata conforms to.\n *\n * @alias GroupMetadata\n * @constructor\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction GroupMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const id = options.id;\n  const group = options.group;\n  const metadataClass = options.class;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.group\", group);\n  Check.typeOf.object(\"options.class\", metadataClass);\n  //>>includeEnd('debug');\n\n  const properties = defined(group.properties) ? group.properties : {};\n  this._class = metadataClass;\n  this._properties = properties;\n  this._id = id;\n  this._extras = group.extras;\n  this._extensions = group.extensions;\n}\nObject.defineProperties(GroupMetadata.prototype, {\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    }\n  },\n  /**\n   * The ID of the group.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\n\n/**\n * Returns whether the group has this property.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {boolean} Whether the group has this property.\n * @private\n */\nGroupMetadata.prototype.hasProperty = function (propertyId) {\n  return MetadataEntity.hasProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Returns whether the group has a property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {boolean} Whether the group has a property with the given semantic.\n * @private\n */\nGroupMetadata.prototype.hasPropertyBySemantic = function (semantic) {\n  return MetadataEntity.hasPropertyBySemantic(semantic, this._properties, this._class);\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The property IDs.\n * @private\n */\nGroupMetadata.prototype.getPropertyIds = function (results) {\n  return MetadataEntity.getPropertyIds(this._properties, this._class, results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n * <p>\n * If the property is normalized the normalized value is returned.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the group does not have this property.\n * @private\n */\nGroupMetadata.prototype.getProperty = function (propertyId) {\n  return MetadataEntity.getProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Sets the value of the property with the given ID.\n * <p>\n * If the property is normalized a normalized value must be provided to this function.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nGroupMetadata.prototype.setProperty = function (propertyId, value) {\n  return MetadataEntity.setProperty(propertyId, value, this._properties, this._class);\n};\n\n/**\n * Returns a copy of the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the group does not have this semantic.\n * @private\n */\nGroupMetadata.prototype.getPropertyBySemantic = function (semantic) {\n  return MetadataEntity.getPropertyBySemantic(semantic, this._properties, this._class);\n};\n\n/**\n * Sets the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nGroupMetadata.prototype.setPropertyBySemantic = function (semantic, value) {\n  return MetadataEntity.setPropertyBySemantic(semantic, value, this._properties, this._class);\n};\nexport default GroupMetadata;","map":{"version":3,"names":["Check","defaultValue","defined","MetadataEntity","GroupMetadata","options","EMPTY_OBJECT","id","group","metadataClass","class","typeOf","object","properties","_class","_properties","_id","_extras","extras","_extensions","extensions","Object","defineProperties","prototype","get","hasProperty","propertyId","hasPropertyBySemantic","semantic","getPropertyIds","results","getProperty","setProperty","value","getPropertyBySemantic","setPropertyBySemantic"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GroupMetadata.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport MetadataEntity from \"./MetadataEntity.js\";\n\n/**\n * Metadata about a group of {@link Cesium3DTileContent}\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.id The ID of the group.\n * @param {object} options.group The group JSON object.\n * @param {MetadataClass} options.class The class that group metadata conforms to.\n *\n * @alias GroupMetadata\n * @constructor\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction GroupMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const id = options.id;\n  const group = options.group;\n  const metadataClass = options.class;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.group\", group);\n  Check.typeOf.object(\"options.class\", metadataClass);\n  //>>includeEnd('debug');\n\n  const properties = defined(group.properties) ? group.properties : {};\n\n  this._class = metadataClass;\n  this._properties = properties;\n  this._id = id;\n  this._extras = group.extras;\n  this._extensions = group.extensions;\n}\n\nObject.defineProperties(GroupMetadata.prototype, {\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    },\n  },\n\n  /**\n   * The ID of the group.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\n/**\n * Returns whether the group has this property.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {boolean} Whether the group has this property.\n * @private\n */\nGroupMetadata.prototype.hasProperty = function (propertyId) {\n  return MetadataEntity.hasProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Returns whether the group has a property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {boolean} Whether the group has a property with the given semantic.\n * @private\n */\nGroupMetadata.prototype.hasPropertyBySemantic = function (semantic) {\n  return MetadataEntity.hasPropertyBySemantic(\n    semantic,\n    this._properties,\n    this._class,\n  );\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The property IDs.\n * @private\n */\nGroupMetadata.prototype.getPropertyIds = function (results) {\n  return MetadataEntity.getPropertyIds(this._properties, this._class, results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n * <p>\n * If the property is normalized the normalized value is returned.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the group does not have this property.\n * @private\n */\nGroupMetadata.prototype.getProperty = function (propertyId) {\n  return MetadataEntity.getProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Sets the value of the property with the given ID.\n * <p>\n * If the property is normalized a normalized value must be provided to this function.\n * </p>\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nGroupMetadata.prototype.setProperty = function (propertyId, value) {\n  return MetadataEntity.setProperty(\n    propertyId,\n    value,\n    this._properties,\n    this._class,\n  );\n};\n\n/**\n * Returns a copy of the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the group does not have this semantic.\n * @private\n */\nGroupMetadata.prototype.getPropertyBySemantic = function (semantic) {\n  return MetadataEntity.getPropertyBySemantic(\n    semantic,\n    this._properties,\n    this._class,\n  );\n};\n\n/**\n * Sets the value of the property with the given semantic.\n *\n * @param {string} semantic The case-sensitive semantic of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nGroupMetadata.prototype.setPropertyBySemantic = function (semantic, value) {\n  return MetadataEntity.setPropertyBySemantic(\n    semantic,\n    value,\n    this._properties,\n    this._class,\n  );\n};\n\nexport default GroupMetadata;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}