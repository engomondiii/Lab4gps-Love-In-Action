{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport PropertyAttributeProperty from \"./PropertyAttributeProperty.js\";\n\n/**\n * A property attribute; a collection of per-point properties stored as custom\n * vertex attributes.\n * <p>\n * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension}\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} [options.name] Optional human-readable name to describe the attribute\n * @param {number} [options.id] A unique id to identify the property attribute, useful for debugging. This is the array index in the property attributes array\n * @param {object} options.propertyAttribute The property attribute JSON, following the EXT_structural_metadata schema.\n * @param {MetadataClass} options.class The class that properties conform to.\n *\n * @alias PropertyAttribute\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction PropertyAttribute(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const propertyAttribute = options.propertyAttribute;\n  const classDefinition = options.class;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.propertyAttribute\", propertyAttribute);\n  Check.typeOf.object(\"options.class\", classDefinition);\n  //>>includeEnd('debug');\n\n  const properties = {};\n  if (defined(propertyAttribute.properties)) {\n    for (const propertyId in propertyAttribute.properties) {\n      if (propertyAttribute.properties.hasOwnProperty(propertyId)) {\n        properties[propertyId] = new PropertyAttributeProperty({\n          property: propertyAttribute.properties[propertyId],\n          classProperty: classDefinition.properties[propertyId]\n        });\n      }\n    }\n  }\n  this._name = options.name;\n  this._id = options.id;\n  this._class = classDefinition;\n  this._properties = properties;\n  this._extras = propertyAttribute.extras;\n  this._extensions = propertyAttribute.extensions;\n}\nObject.defineProperties(PropertyAttribute.prototype, {\n  /**\n   * A human-readable name for this attribute\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  name: {\n    get: function () {\n      return this._name;\n    }\n  },\n  /**\n   * An identifier for this attribute. Useful for debugging.\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {string|number}\n   * @readonly\n   * @private\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    }\n  },\n  /**\n   * The properties in this property attribute.\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {Object<string, PropertyAttributeProperty>}\n   * @readonly\n   * @private\n   */\n  properties: {\n    get: function () {\n      return this._properties;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\n\n/**\n * Gets the property with the given property ID.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {PropertyAttributeProperty|undefined} The property, or <code>undefined</code> if the property does not exist.\n * @private\n */\nPropertyAttribute.prototype.getProperty = function (propertyId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"propertyId\", propertyId);\n  //>>includeEnd('debug');\n\n  return this._properties[propertyId];\n};\nexport default PropertyAttribute;","map":{"version":3,"names":["Check","defaultValue","defined","PropertyAttributeProperty","PropertyAttribute","options","EMPTY_OBJECT","propertyAttribute","classDefinition","class","typeOf","object","properties","propertyId","hasOwnProperty","property","classProperty","_name","name","_id","id","_class","_properties","_extras","extras","_extensions","extensions","Object","defineProperties","prototype","get","getProperty","string"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/PropertyAttribute.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport PropertyAttributeProperty from \"./PropertyAttributeProperty.js\";\n\n/**\n * A property attribute; a collection of per-point properties stored as custom\n * vertex attributes.\n * <p>\n * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension}\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} [options.name] Optional human-readable name to describe the attribute\n * @param {number} [options.id] A unique id to identify the property attribute, useful for debugging. This is the array index in the property attributes array\n * @param {object} options.propertyAttribute The property attribute JSON, following the EXT_structural_metadata schema.\n * @param {MetadataClass} options.class The class that properties conform to.\n *\n * @alias PropertyAttribute\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction PropertyAttribute(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const propertyAttribute = options.propertyAttribute;\n  const classDefinition = options.class;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.propertyAttribute\", propertyAttribute);\n  Check.typeOf.object(\"options.class\", classDefinition);\n  //>>includeEnd('debug');\n\n  const properties = {};\n  if (defined(propertyAttribute.properties)) {\n    for (const propertyId in propertyAttribute.properties) {\n      if (propertyAttribute.properties.hasOwnProperty(propertyId)) {\n        properties[propertyId] = new PropertyAttributeProperty({\n          property: propertyAttribute.properties[propertyId],\n          classProperty: classDefinition.properties[propertyId],\n        });\n      }\n    }\n  }\n\n  this._name = options.name;\n  this._id = options.id;\n  this._class = classDefinition;\n  this._properties = properties;\n  this._extras = propertyAttribute.extras;\n  this._extensions = propertyAttribute.extensions;\n}\n\nObject.defineProperties(PropertyAttribute.prototype, {\n  /**\n   * A human-readable name for this attribute\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n  /**\n   * An identifier for this attribute. Useful for debugging.\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {string|number}\n   * @readonly\n   * @private\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    },\n  },\n\n  /**\n   * The properties in this property attribute.\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {Object<string, PropertyAttributeProperty>}\n   * @readonly\n   * @private\n   */\n  properties: {\n    get: function () {\n      return this._properties;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof PropertyAttribute.prototype\n   *\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\n/**\n * Gets the property with the given property ID.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {PropertyAttributeProperty|undefined} The property, or <code>undefined</code> if the property does not exist.\n * @private\n */\nPropertyAttribute.prototype.getProperty = function (propertyId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"propertyId\", propertyId);\n  //>>includeEnd('debug');\n\n  return this._properties[propertyId];\n};\n\nexport default PropertyAttribute;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,yBAAyB,MAAM,gCAAgC;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,OAAO,EAAE;EAClCA,OAAO,GAAGJ,YAAY,CAACI,OAAO,EAAEJ,YAAY,CAACK,YAAY,CAAC;EAC1D,MAAMC,iBAAiB,GAAGF,OAAO,CAACE,iBAAiB;EACnD,MAAMC,eAAe,GAAGH,OAAO,CAACI,KAAK;;EAErC;EACAT,KAAK,CAACU,MAAM,CAACC,MAAM,CAAC,2BAA2B,EAAEJ,iBAAiB,CAAC;EACnEP,KAAK,CAACU,MAAM,CAACC,MAAM,CAAC,eAAe,EAAEH,eAAe,CAAC;EACrD;;EAEA,MAAMI,UAAU,GAAG,CAAC,CAAC;EACrB,IAAIV,OAAO,CAACK,iBAAiB,CAACK,UAAU,CAAC,EAAE;IACzC,KAAK,MAAMC,UAAU,IAAIN,iBAAiB,CAACK,UAAU,EAAE;MACrD,IAAIL,iBAAiB,CAACK,UAAU,CAACE,cAAc,CAACD,UAAU,CAAC,EAAE;QAC3DD,UAAU,CAACC,UAAU,CAAC,GAAG,IAAIV,yBAAyB,CAAC;UACrDY,QAAQ,EAAER,iBAAiB,CAACK,UAAU,CAACC,UAAU,CAAC;UAClDG,aAAa,EAAER,eAAe,CAACI,UAAU,CAACC,UAAU;QACtD,CAAC,CAAC;MACJ;IACF;EACF;EAEA,IAAI,CAACI,KAAK,GAAGZ,OAAO,CAACa,IAAI;EACzB,IAAI,CAACC,GAAG,GAAGd,OAAO,CAACe,EAAE;EACrB,IAAI,CAACC,MAAM,GAAGb,eAAe;EAC7B,IAAI,CAACc,WAAW,GAAGV,UAAU;EAC7B,IAAI,CAACW,OAAO,GAAGhB,iBAAiB,CAACiB,MAAM;EACvC,IAAI,CAACC,WAAW,GAAGlB,iBAAiB,CAACmB,UAAU;AACjD;AAEAC,MAAM,CAACC,gBAAgB,CAACxB,iBAAiB,CAACyB,SAAS,EAAE;EACnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEX,IAAI,EAAE;IACJY,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACb,KAAK;IACnB;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,EAAE,EAAE;IACFU,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACX,GAAG;IACjB;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEV,KAAK,EAAE;IACLqB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACT,MAAM;IACpB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACET,UAAU,EAAE;IACVkB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACR,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,MAAM,EAAE;IACNM,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACP,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,UAAU,EAAE;IACVI,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACL,WAAW;IACzB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACArB,iBAAiB,CAACyB,SAAS,CAACE,WAAW,GAAG,UAAUlB,UAAU,EAAE;EAC9D;EACAb,KAAK,CAACU,MAAM,CAACsB,MAAM,CAAC,YAAY,EAAEnB,UAAU,CAAC;EAC7C;;EAEA,OAAO,IAAI,CAACS,WAAW,CAACT,UAAU,CAAC;AACrC,CAAC;AAED,eAAeT,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}