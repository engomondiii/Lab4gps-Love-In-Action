{"ast":null,"code":"import Cartesian4 from \"../Core/Cartesian4.js\";\nimport clone from \"../Core/clone.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport I3SNode from \"./I3SNode.js\";\nimport I3SSymbology from \"./I3SSymbology.js\";\n\n/**\n * This class implements an I3S layer. In CesiumJS each I3SLayer creates a Cesium3DTileset.\n * <p>\n * Do not construct this directly, instead access layers through {@link I3SDataProvider}.\n * </p>\n * @alias I3SLayer\n * @internalConstructor\n * @privateParam {I3SDataProvider} dataProvider The i3s data provider\n * @privateParam {object} layerData The layer data that is loaded from the scene layer\n * @privateParam {I3SDataProvider|I3SSublayer} parent The parent of that layer\n */\nfunction I3SLayer(dataProvider, layerData, parent) {\n  this._dataProvider = dataProvider;\n  this._parent = parent;\n  if (!defined(layerData.href) && defined(layerData.id)) {\n    // assign a default layer\n    layerData.href = `layers/${layerData.id}`;\n  }\n  const parentUrl = this._parent.resource.getUrlComponent();\n  let tilesetUrl = \"\";\n  if (parentUrl.match(/layers\\/\\d/)) {\n    tilesetUrl = `${parentUrl}`.replace(/\\/+$/, \"\");\n  } else {\n    // Add '/' to url if needed + `${layerData.href}` if tilesetUrl not already in ../layers/[id] format\n    tilesetUrl = `${parentUrl}`.replace(/\\/?$/, \"/\").concat(`${layerData.href}`);\n  }\n  this._version = layerData.store.version;\n  const splitVersion = this._version.split(\".\");\n  this._majorVersion = parseInt(splitVersion[0]);\n  this._minorVersion = splitVersion.length > 1 ? parseInt(splitVersion[1]) : 0;\n  this._resource = new Resource({\n    url: tilesetUrl\n  });\n  this._resource.setQueryParameters(this._dataProvider.resource.queryParameters);\n  this._resource.appendForwardSlash();\n  this._data = layerData;\n  this._rootNode = undefined;\n  this._nodePages = {};\n  this._nodePageFetches = {};\n  this._extent = undefined;\n  this._tileset = undefined;\n  this._geometryDefinitions = undefined;\n  this._filters = [];\n  this._symbology = undefined;\n  this._computeGeometryDefinitions(true);\n  this._computeExtent();\n}\nObject.defineProperties(I3SLayer.prototype, {\n  /**\n   * Gets the resource for the layer.\n   * @memberof I3SLayer.prototype\n   * @type {Resource}\n   * @readonly\n   */\n  resource: {\n    get: function () {\n      return this._resource;\n    }\n  },\n  /**\n   * Gets the root node of this layer.\n   * @memberof I3SLayer.prototype\n   * @type {I3SNode}\n   * @readonly\n   */\n  rootNode: {\n    get: function () {\n      return this._rootNode;\n    }\n  },\n  /**\n   * Gets the Cesium3DTileset for this layer.\n   * @memberof I3SLayer.prototype\n   * @type {Cesium3DTileset|undefined}\n   * @readonly\n   */\n  tileset: {\n    get: function () {\n      return this._tileset;\n    }\n  },\n  /**\n   * Gets the I3S data for this object.\n   * @memberof I3SLayer.prototype\n   * @type {object}\n   * @readonly\n   */\n  data: {\n    get: function () {\n      return this._data;\n    }\n  },\n  /**\n   * The version string of the loaded I3S dataset\n   * @memberof I3SLayer.prototype\n   * @type {string}\n   * @readonly\n   */\n  version: {\n    get: function () {\n      return this._version;\n    }\n  },\n  /**\n   * The major version number of the loaded I3S dataset\n   * @memberof I3SLayer.prototype\n   * @type {number}\n   * @readonly\n   */\n  majorVersion: {\n    get: function () {\n      return this._majorVersion;\n    }\n  },\n  /**\n   * The minor version number of the loaded I3S dataset\n   * @memberof I3SLayer.prototype\n   * @type {number}\n   * @readonly\n   */\n  minorVersion: {\n    get: function () {\n      return this._minorVersion;\n    }\n  },\n  /**\n   * When <code>true</code>, when the loaded I3S version is 1.6 or older\n   * @memberof I3SLayer.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  legacyVersion16: {\n    get: function () {\n      if (!defined(this.version)) {\n        return undefined;\n      }\n      if (this.majorVersion < 1 || this.majorVersion === 1 && this.minorVersion <= 6) {\n        return true;\n      }\n      return false;\n    }\n  }\n});\n\n/**\n * Loads the content, including the root node definition and its children\n * @param {Cesium3DTileset.ConstructorOptions} [cesium3dTilesetOptions] options for Cesium3dTileset constructor\n * @returns {Promise<void>} A promise that is resolved when the layer data is loaded\n * @private\n */\nI3SLayer.prototype.load = async function (cesium3dTilesetOptions) {\n  if (this._data.spatialReference.wkid !== 4326) {\n    throw new RuntimeError(`Unsupported spatial reference: ${this._data.spatialReference.wkid}`);\n  }\n  if (this._dataProvider.applySymbology) {\n    this._symbology = new I3SSymbology(this);\n  }\n  await this._dataProvider.loadGeoidData();\n  await this._loadRootNode(cesium3dTilesetOptions);\n  await this._create3DTileset(cesium3dTilesetOptions);\n  this._rootNode._tile = this._tileset._root;\n  this._tileset._root._i3sNode = this._rootNode;\n  if (this.legacyVersion16) {\n    return this._rootNode._loadChildren();\n  }\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._computeGeometryDefinitions = function (useCompression) {\n  // create a table of all geometry buffers based on\n  // the number of attributes and whether they are\n  // compressed or not, sort them by priority\n\n  this._geometryDefinitions = [];\n  if (defined(this._data.geometryDefinitions)) {\n    for (let defIndex = 0; defIndex < this._data.geometryDefinitions.length; defIndex++) {\n      const geometryBuffersInfo = [];\n      const geometryBuffers = this._data.geometryDefinitions[defIndex].geometryBuffers;\n      for (let bufIndex = 0; bufIndex < geometryBuffers.length; bufIndex++) {\n        const geometryBuffer = geometryBuffers[bufIndex];\n        const collectedAttributes = [];\n        let compressed = false;\n        if (defined(geometryBuffer.compressedAttributes) && useCompression) {\n          // check if compressed\n          compressed = true;\n          const attributes = geometryBuffer.compressedAttributes.attributes;\n          for (let i = 0; i < attributes.length; i++) {\n            collectedAttributes.push(attributes[i]);\n          }\n        } else {\n          // uncompressed attributes\n          for (const attribute in geometryBuffer) {\n            if (attribute !== \"offset\") {\n              collectedAttributes.push(attribute);\n            }\n          }\n        }\n        geometryBuffersInfo.push({\n          compressed: compressed,\n          attributes: collectedAttributes,\n          index: geometryBuffers.indexOf(geometryBuffer)\n        });\n      }\n\n      // rank the buffer info\n      geometryBuffersInfo.sort(function (a, b) {\n        if (a.compressed && !b.compressed) {\n          return -1;\n        } else if (!a.compressed && b.compressed) {\n          return 1;\n        }\n        return a.attributes.length - b.attributes.length;\n      });\n      this._geometryDefinitions.push(geometryBuffersInfo);\n    }\n  }\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._findBestGeometryBuffers = function (definition, attributes) {\n  // find the most appropriate geometry definition\n  // based on the required attributes, and by favouring\n  // compression to improve bandwidth requirements\n\n  const geometryDefinition = this._geometryDefinitions[definition];\n  if (defined(geometryDefinition)) {\n    for (let index = 0; index < geometryDefinition.length; ++index) {\n      const geometryBufferInfo = geometryDefinition[index];\n      let missed = false;\n      const geometryAttributes = geometryBufferInfo.attributes;\n      for (let attrIndex = 0; attrIndex < attributes.length; attrIndex++) {\n        if (!geometryAttributes.includes(attributes[attrIndex])) {\n          missed = true;\n          break;\n        }\n      }\n      if (!missed) {\n        return {\n          bufferIndex: geometryBufferInfo.index,\n          definition: geometryDefinition,\n          geometryBufferInfo: geometryBufferInfo\n        };\n      }\n    }\n    // If no match found return first geometryBuffer\n    if (defined(geometryDefinition[0])) {\n      return {\n        bufferIndex: 0,\n        definition: geometryDefinition,\n        geometryBufferInfo: geometryDefinition[0]\n      };\n    }\n  }\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._loadRootNode = function (cesium3dTilesetOptions) {\n  if (defined(this._data.nodePages)) {\n    let rootIndex = 0;\n    if (defined(this._data.nodePages.rootIndex)) {\n      rootIndex = this._data.nodePages.rootIndex;\n    }\n    this._rootNode = new I3SNode(this, rootIndex, true);\n  } else {\n    this._rootNode = new I3SNode(this, this._data.store.rootNode, true);\n  }\n  return this._rootNode.load(cesium3dTilesetOptions);\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._getNodeInNodePages = function (nodeIndex) {\n  const index = Math.floor(nodeIndex / this._data.nodePages.nodesPerPage);\n  const offsetInPage = nodeIndex % this._data.nodePages.nodesPerPage;\n  return this._loadNodePage(index).then(function (data) {\n    return data.nodes[offsetInPage];\n  });\n};\n\n/**\n * @private\n */\nI3SLayer._fetchJson = function (resource) {\n  return resource.fetchJson();\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._loadNodePage = function (page) {\n  const that = this;\n\n  // If node page was already requested return the same promise\n  if (!defined(this._nodePageFetches[page])) {\n    const nodePageResource = this.resource.getDerivedResource({\n      url: `nodepages/${page}/`\n    });\n    const fetchPromise = I3SLayer._fetchJson(nodePageResource).then(function (data) {\n      if (defined(data.error) && data.error.code !== 200) {\n        return Promise.reject(data.error);\n      }\n      that._nodePages[page] = data.nodes;\n      return data;\n    });\n    this._nodePageFetches[page] = fetchPromise;\n  }\n  return this._nodePageFetches[page];\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._computeExtent = function () {\n  if (defined(this._data.fullExtent)) {\n    this._extent = Rectangle.fromDegrees(this._data.fullExtent.xmin, this._data.fullExtent.ymin, this._data.fullExtent.xmax, this._data.fullExtent.ymax);\n  } else if (defined(this._data.store.extent)) {\n    this._extent = Rectangle.fromDegrees(this._data.store.extent[0], this._data.store.extent[1], this._data.store.extent[2], this._data.store.extent[3]);\n  }\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._create3DTileset = async function (cesium3dTilesetOptions) {\n  const inPlaceTileset = {\n    asset: {\n      version: \"1.0\"\n    },\n    geometricError: Number.MAX_VALUE,\n    root: this._rootNode._create3DTileDefinition()\n  };\n  const tilesetBlob = new Blob([JSON.stringify(inPlaceTileset)], {\n    type: \"application/json\"\n  });\n  const tilesetUrl = URL.createObjectURL(tilesetBlob);\n  const outlineColor = this._symbology?.defaultSymbology?.edges?.color;\n  if (defined(outlineColor) && !defined(cesium3dTilesetOptions?.outlineColor)) {\n    cesium3dTilesetOptions = defined(cesium3dTilesetOptions) ? clone(cesium3dTilesetOptions) : {};\n    cesium3dTilesetOptions.outlineColor = Color.fromCartesian4(Cartesian4.fromArray(outlineColor));\n  }\n  this._tileset = await Cesium3DTileset.fromUrl(tilesetUrl, cesium3dTilesetOptions);\n  this._tileset.show = this._parent.show;\n  this._tileset._isI3STileSet = true;\n  this._tileset.tileUnload.addEventListener(function (tile) {\n    tile._i3sNode._clearGeometryData();\n    URL.revokeObjectURL(tile._contentResource._url);\n    tile._contentResource = tile._i3sNode.resource;\n  });\n  this._tileset.tileVisible.addEventListener(function (tile) {\n    if (defined(tile._i3sNode)) {\n      tile._i3sNode._loadChildren();\n    }\n  });\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._updateVisibility = function () {\n  if (defined(this._tileset)) {\n    this._tileset.show = this._parent.show;\n  }\n};\n\n/**\n * Filters the drawn elements of a layer to specific attribute names and values\n * @param {I3SNode.AttributeFilter[]} [filters=[]] The collection of attribute filters\n * @returns {Promise<void>} A promise that is resolved when the filter is applied\n */\nI3SLayer.prototype.filterByAttributes = function (filters) {\n  // Filters are applied for each node in the layer when the node model is loaded\n  this._filters = defined(filters) ? clone(filters, true) : [];\n\n  // Forced filtering is required for loaded nodes only\n  const rootNode = this._rootNode;\n  if (defined(rootNode)) {\n    return rootNode._filterFeatures();\n  }\n  return Promise.resolve();\n};\nexport default I3SLayer;","map":{"version":3,"names":["Cartesian4","clone","Color","defined","Rectangle","Resource","RuntimeError","Cesium3DTileset","I3SNode","I3SSymbology","I3SLayer","dataProvider","layerData","parent","_dataProvider","_parent","href","id","parentUrl","resource","getUrlComponent","tilesetUrl","match","replace","concat","_version","store","version","splitVersion","split","_majorVersion","parseInt","_minorVersion","length","_resource","url","setQueryParameters","queryParameters","appendForwardSlash","_data","_rootNode","undefined","_nodePages","_nodePageFetches","_extent","_tileset","_geometryDefinitions","_filters","_symbology","_computeGeometryDefinitions","_computeExtent","Object","defineProperties","prototype","get","rootNode","tileset","data","majorVersion","minorVersion","legacyVersion16","load","cesium3dTilesetOptions","spatialReference","wkid","applySymbology","loadGeoidData","_loadRootNode","_create3DTileset","_tile","_root","_i3sNode","_loadChildren","useCompression","geometryDefinitions","defIndex","geometryBuffersInfo","geometryBuffers","bufIndex","geometryBuffer","collectedAttributes","compressed","compressedAttributes","attributes","i","push","attribute","index","indexOf","sort","a","b","_findBestGeometryBuffers","definition","geometryDefinition","geometryBufferInfo","missed","geometryAttributes","attrIndex","includes","bufferIndex","nodePages","rootIndex","_getNodeInNodePages","nodeIndex","Math","floor","nodesPerPage","offsetInPage","_loadNodePage","then","nodes","_fetchJson","fetchJson","page","that","nodePageResource","getDerivedResource","fetchPromise","error","code","Promise","reject","fullExtent","fromDegrees","xmin","ymin","xmax","ymax","extent","inPlaceTileset","asset","geometricError","Number","MAX_VALUE","root","_create3DTileDefinition","tilesetBlob","Blob","JSON","stringify","type","URL","createObjectURL","outlineColor","defaultSymbology","edges","color","fromCartesian4","fromArray","fromUrl","show","_isI3STileSet","tileUnload","addEventListener","tile","_clearGeometryData","revokeObjectURL","_contentResource","_url","tileVisible","_updateVisibility","filterByAttributes","filters","_filterFeatures","resolve"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/I3SLayer.js"],"sourcesContent":["import Cartesian4 from \"../Core/Cartesian4.js\";\nimport clone from \"../Core/clone.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport I3SNode from \"./I3SNode.js\";\nimport I3SSymbology from \"./I3SSymbology.js\";\n\n/**\n * This class implements an I3S layer. In CesiumJS each I3SLayer creates a Cesium3DTileset.\n * <p>\n * Do not construct this directly, instead access layers through {@link I3SDataProvider}.\n * </p>\n * @alias I3SLayer\n * @internalConstructor\n * @privateParam {I3SDataProvider} dataProvider The i3s data provider\n * @privateParam {object} layerData The layer data that is loaded from the scene layer\n * @privateParam {I3SDataProvider|I3SSublayer} parent The parent of that layer\n */\nfunction I3SLayer(dataProvider, layerData, parent) {\n  this._dataProvider = dataProvider;\n  this._parent = parent;\n\n  if (!defined(layerData.href) && defined(layerData.id)) {\n    // assign a default layer\n    layerData.href = `layers/${layerData.id}`;\n  }\n\n  const parentUrl = this._parent.resource.getUrlComponent();\n\n  let tilesetUrl = \"\";\n  if (parentUrl.match(/layers\\/\\d/)) {\n    tilesetUrl = `${parentUrl}`.replace(/\\/+$/, \"\");\n  } else {\n    // Add '/' to url if needed + `${layerData.href}` if tilesetUrl not already in ../layers/[id] format\n    tilesetUrl = `${parentUrl}`\n      .replace(/\\/?$/, \"/\")\n      .concat(`${layerData.href}`);\n  }\n\n  this._version = layerData.store.version;\n  const splitVersion = this._version.split(\".\");\n  this._majorVersion = parseInt(splitVersion[0]);\n  this._minorVersion = splitVersion.length > 1 ? parseInt(splitVersion[1]) : 0;\n\n  this._resource = new Resource({ url: tilesetUrl });\n  this._resource.setQueryParameters(\n    this._dataProvider.resource.queryParameters,\n  );\n  this._resource.appendForwardSlash();\n  this._data = layerData;\n  this._rootNode = undefined;\n  this._nodePages = {};\n  this._nodePageFetches = {};\n  this._extent = undefined;\n  this._tileset = undefined;\n  this._geometryDefinitions = undefined;\n  this._filters = [];\n  this._symbology = undefined;\n\n  this._computeGeometryDefinitions(true);\n  this._computeExtent();\n}\n\nObject.defineProperties(I3SLayer.prototype, {\n  /**\n   * Gets the resource for the layer.\n   * @memberof I3SLayer.prototype\n   * @type {Resource}\n   * @readonly\n   */\n  resource: {\n    get: function () {\n      return this._resource;\n    },\n  },\n\n  /**\n   * Gets the root node of this layer.\n   * @memberof I3SLayer.prototype\n   * @type {I3SNode}\n   * @readonly\n   */\n  rootNode: {\n    get: function () {\n      return this._rootNode;\n    },\n  },\n  /**\n   * Gets the Cesium3DTileset for this layer.\n   * @memberof I3SLayer.prototype\n   * @type {Cesium3DTileset|undefined}\n   * @readonly\n   */\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n  /**\n   * Gets the I3S data for this object.\n   * @memberof I3SLayer.prototype\n   * @type {object}\n   * @readonly\n   */\n  data: {\n    get: function () {\n      return this._data;\n    },\n  },\n\n  /**\n   * The version string of the loaded I3S dataset\n   * @memberof I3SLayer.prototype\n   * @type {string}\n   * @readonly\n   */\n  version: {\n    get: function () {\n      return this._version;\n    },\n  },\n\n  /**\n   * The major version number of the loaded I3S dataset\n   * @memberof I3SLayer.prototype\n   * @type {number}\n   * @readonly\n   */\n  majorVersion: {\n    get: function () {\n      return this._majorVersion;\n    },\n  },\n\n  /**\n   * The minor version number of the loaded I3S dataset\n   * @memberof I3SLayer.prototype\n   * @type {number}\n   * @readonly\n   */\n  minorVersion: {\n    get: function () {\n      return this._minorVersion;\n    },\n  },\n\n  /**\n   * When <code>true</code>, when the loaded I3S version is 1.6 or older\n   * @memberof I3SLayer.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  legacyVersion16: {\n    get: function () {\n      if (!defined(this.version)) {\n        return undefined;\n      }\n      if (\n        this.majorVersion < 1 ||\n        (this.majorVersion === 1 && this.minorVersion <= 6)\n      ) {\n        return true;\n      }\n      return false;\n    },\n  },\n});\n\n/**\n * Loads the content, including the root node definition and its children\n * @param {Cesium3DTileset.ConstructorOptions} [cesium3dTilesetOptions] options for Cesium3dTileset constructor\n * @returns {Promise<void>} A promise that is resolved when the layer data is loaded\n * @private\n */\nI3SLayer.prototype.load = async function (cesium3dTilesetOptions) {\n  if (this._data.spatialReference.wkid !== 4326) {\n    throw new RuntimeError(\n      `Unsupported spatial reference: ${this._data.spatialReference.wkid}`,\n    );\n  }\n\n  if (this._dataProvider.applySymbology) {\n    this._symbology = new I3SSymbology(this);\n  }\n  await this._dataProvider.loadGeoidData();\n  await this._loadRootNode(cesium3dTilesetOptions);\n  await this._create3DTileset(cesium3dTilesetOptions);\n\n  this._rootNode._tile = this._tileset._root;\n  this._tileset._root._i3sNode = this._rootNode;\n  if (this.legacyVersion16) {\n    return this._rootNode._loadChildren();\n  }\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._computeGeometryDefinitions = function (useCompression) {\n  // create a table of all geometry buffers based on\n  // the number of attributes and whether they are\n  // compressed or not, sort them by priority\n\n  this._geometryDefinitions = [];\n\n  if (defined(this._data.geometryDefinitions)) {\n    for (\n      let defIndex = 0;\n      defIndex < this._data.geometryDefinitions.length;\n      defIndex++\n    ) {\n      const geometryBuffersInfo = [];\n      const geometryBuffers =\n        this._data.geometryDefinitions[defIndex].geometryBuffers;\n\n      for (let bufIndex = 0; bufIndex < geometryBuffers.length; bufIndex++) {\n        const geometryBuffer = geometryBuffers[bufIndex];\n        const collectedAttributes = [];\n        let compressed = false;\n\n        if (defined(geometryBuffer.compressedAttributes) && useCompression) {\n          // check if compressed\n          compressed = true;\n          const attributes = geometryBuffer.compressedAttributes.attributes;\n          for (let i = 0; i < attributes.length; i++) {\n            collectedAttributes.push(attributes[i]);\n          }\n        } else {\n          // uncompressed attributes\n          for (const attribute in geometryBuffer) {\n            if (attribute !== \"offset\") {\n              collectedAttributes.push(attribute);\n            }\n          }\n        }\n\n        geometryBuffersInfo.push({\n          compressed: compressed,\n          attributes: collectedAttributes,\n          index: geometryBuffers.indexOf(geometryBuffer),\n        });\n      }\n\n      // rank the buffer info\n      geometryBuffersInfo.sort(function (a, b) {\n        if (a.compressed && !b.compressed) {\n          return -1;\n        } else if (!a.compressed && b.compressed) {\n          return 1;\n        }\n        return a.attributes.length - b.attributes.length;\n      });\n      this._geometryDefinitions.push(geometryBuffersInfo);\n    }\n  }\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._findBestGeometryBuffers = function (\n  definition,\n  attributes,\n) {\n  // find the most appropriate geometry definition\n  // based on the required attributes, and by favouring\n  // compression to improve bandwidth requirements\n\n  const geometryDefinition = this._geometryDefinitions[definition];\n\n  if (defined(geometryDefinition)) {\n    for (let index = 0; index < geometryDefinition.length; ++index) {\n      const geometryBufferInfo = geometryDefinition[index];\n      let missed = false;\n      const geometryAttributes = geometryBufferInfo.attributes;\n      for (let attrIndex = 0; attrIndex < attributes.length; attrIndex++) {\n        if (!geometryAttributes.includes(attributes[attrIndex])) {\n          missed = true;\n          break;\n        }\n      }\n      if (!missed) {\n        return {\n          bufferIndex: geometryBufferInfo.index,\n          definition: geometryDefinition,\n          geometryBufferInfo: geometryBufferInfo,\n        };\n      }\n    }\n    // If no match found return first geometryBuffer\n    if (defined(geometryDefinition[0])) {\n      return {\n        bufferIndex: 0,\n        definition: geometryDefinition,\n        geometryBufferInfo: geometryDefinition[0],\n      };\n    }\n  }\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._loadRootNode = function (cesium3dTilesetOptions) {\n  if (defined(this._data.nodePages)) {\n    let rootIndex = 0;\n    if (defined(this._data.nodePages.rootIndex)) {\n      rootIndex = this._data.nodePages.rootIndex;\n    }\n    this._rootNode = new I3SNode(this, rootIndex, true);\n  } else {\n    this._rootNode = new I3SNode(this, this._data.store.rootNode, true);\n  }\n\n  return this._rootNode.load(cesium3dTilesetOptions);\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._getNodeInNodePages = function (nodeIndex) {\n  const index = Math.floor(nodeIndex / this._data.nodePages.nodesPerPage);\n  const offsetInPage = nodeIndex % this._data.nodePages.nodesPerPage;\n  return this._loadNodePage(index).then(function (data) {\n    return data.nodes[offsetInPage];\n  });\n};\n\n/**\n * @private\n */\nI3SLayer._fetchJson = function (resource) {\n  return resource.fetchJson();\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._loadNodePage = function (page) {\n  const that = this;\n\n  // If node page was already requested return the same promise\n  if (!defined(this._nodePageFetches[page])) {\n    const nodePageResource = this.resource.getDerivedResource({\n      url: `nodepages/${page}/`,\n    });\n    const fetchPromise = I3SLayer._fetchJson(nodePageResource).then(\n      function (data) {\n        if (defined(data.error) && data.error.code !== 200) {\n          return Promise.reject(data.error);\n        }\n\n        that._nodePages[page] = data.nodes;\n        return data;\n      },\n    );\n\n    this._nodePageFetches[page] = fetchPromise;\n  }\n\n  return this._nodePageFetches[page];\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._computeExtent = function () {\n  if (defined(this._data.fullExtent)) {\n    this._extent = Rectangle.fromDegrees(\n      this._data.fullExtent.xmin,\n      this._data.fullExtent.ymin,\n      this._data.fullExtent.xmax,\n      this._data.fullExtent.ymax,\n    );\n  } else if (defined(this._data.store.extent)) {\n    this._extent = Rectangle.fromDegrees(\n      this._data.store.extent[0],\n      this._data.store.extent[1],\n      this._data.store.extent[2],\n      this._data.store.extent[3],\n    );\n  }\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._create3DTileset = async function (cesium3dTilesetOptions) {\n  const inPlaceTileset = {\n    asset: {\n      version: \"1.0\",\n    },\n    geometricError: Number.MAX_VALUE,\n    root: this._rootNode._create3DTileDefinition(),\n  };\n\n  const tilesetBlob = new Blob([JSON.stringify(inPlaceTileset)], {\n    type: \"application/json\",\n  });\n\n  const tilesetUrl = URL.createObjectURL(tilesetBlob);\n  const outlineColor = this._symbology?.defaultSymbology?.edges?.color;\n  if (defined(outlineColor) && !defined(cesium3dTilesetOptions?.outlineColor)) {\n    cesium3dTilesetOptions = defined(cesium3dTilesetOptions)\n      ? clone(cesium3dTilesetOptions)\n      : {};\n    cesium3dTilesetOptions.outlineColor = Color.fromCartesian4(\n      Cartesian4.fromArray(outlineColor),\n    );\n  }\n  this._tileset = await Cesium3DTileset.fromUrl(\n    tilesetUrl,\n    cesium3dTilesetOptions,\n  );\n  this._tileset.show = this._parent.show;\n  this._tileset._isI3STileSet = true;\n  this._tileset.tileUnload.addEventListener(function (tile) {\n    tile._i3sNode._clearGeometryData();\n    URL.revokeObjectURL(tile._contentResource._url);\n    tile._contentResource = tile._i3sNode.resource;\n  });\n\n  this._tileset.tileVisible.addEventListener(function (tile) {\n    if (defined(tile._i3sNode)) {\n      tile._i3sNode._loadChildren();\n    }\n  });\n};\n\n/**\n * @private\n */\nI3SLayer.prototype._updateVisibility = function () {\n  if (defined(this._tileset)) {\n    this._tileset.show = this._parent.show;\n  }\n};\n\n/**\n * Filters the drawn elements of a layer to specific attribute names and values\n * @param {I3SNode.AttributeFilter[]} [filters=[]] The collection of attribute filters\n * @returns {Promise<void>} A promise that is resolved when the filter is applied\n */\nI3SLayer.prototype.filterByAttributes = function (filters) {\n  // Filters are applied for each node in the layer when the node model is loaded\n  this._filters = defined(filters) ? clone(filters, true) : [];\n\n  // Forced filtering is required for loaded nodes only\n  const rootNode = this._rootNode;\n  if (defined(rootNode)) {\n    return rootNode._filterFeatures();\n  }\n  return Promise.resolve();\n};\n\nexport default I3SLayer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}