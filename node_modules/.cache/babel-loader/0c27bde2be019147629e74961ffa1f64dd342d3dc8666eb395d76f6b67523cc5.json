{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport Property from \"./Property.js\";\nimport VelocityVectorProperty from \"./VelocityVectorProperty.js\";\n\n/**\n * A {@link Property} which evaluates to a {@link Quaternion} rotation\n * based on the velocity of the provided {@link PositionProperty}.\n *\n * @alias VelocityOrientationProperty\n * @constructor\n *\n * @param {PositionProperty} [position] The position property used to compute the orientation.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid used to determine which way is up.\n *\n * @example\n * //Create an entity with position and orientation.\n * const position = new Cesium.SampledProperty();\n * position.addSamples(...);\n * const entity = viewer.entities.add({\n *   position : position,\n *   orientation : new Cesium.VelocityOrientationProperty(position)\n * }));\n */\nfunction VelocityOrientationProperty(position, ellipsoid) {\n  this._velocityVectorProperty = new VelocityVectorProperty(position, true);\n  this._subscription = undefined;\n  this._ellipsoid = undefined;\n  this._definitionChanged = new Event();\n  this.ellipsoid = defaultValue(ellipsoid, Ellipsoid.default);\n  const that = this;\n  this._velocityVectorProperty.definitionChanged.addEventListener(function () {\n    that._definitionChanged.raiseEvent(that);\n  });\n}\nObject.defineProperties(VelocityOrientationProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._velocityVectorProperty);\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the position property used to compute orientation.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Property|undefined}\n   */\n  position: {\n    get: function () {\n      return this._velocityVectorProperty.position;\n    },\n    set: function (value) {\n      this._velocityVectorProperty.position = value;\n    }\n  },\n  /**\n   * Gets or sets the ellipsoid used to determine which way is up.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Property|undefined}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n    set: function (value) {\n      const oldValue = this._ellipsoid;\n      if (oldValue !== value) {\n        this._ellipsoid = value;\n        this._definitionChanged.raiseEvent(this);\n      }\n    }\n  }\n});\nconst positionScratch = new Cartesian3();\nconst velocityScratch = new Cartesian3();\nconst rotationScratch = new Matrix3();\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Quaternion} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Quaternion} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nVelocityOrientationProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  const velocity = this._velocityVectorProperty._getValue(time, velocityScratch, positionScratch);\n  if (!defined(velocity)) {\n    return undefined;\n  }\n  Transforms.rotationMatrixFromPositionVelocity(positionScratch, velocity, this._ellipsoid, rotationScratch);\n  return Quaternion.fromRotationMatrix(rotationScratch, result);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nVelocityOrientationProperty.prototype.equals = function (other) {\n  return this === other ||\n  //\n  other instanceof VelocityOrientationProperty && Property.equals(this._velocityVectorProperty, other._velocityVectorProperty) && (this._ellipsoid === other._ellipsoid || this._ellipsoid.equals(other._ellipsoid));\n};\nexport default VelocityOrientationProperty;","map":{"version":3,"names":["Cartesian3","defaultValue","defined","Ellipsoid","Event","JulianDate","Matrix3","Quaternion","Transforms","Property","VelocityVectorProperty","VelocityOrientationProperty","position","ellipsoid","_velocityVectorProperty","_subscription","undefined","_ellipsoid","_definitionChanged","default","that","definitionChanged","addEventListener","raiseEvent","Object","defineProperties","prototype","isConstant","get","set","value","oldValue","positionScratch","velocityScratch","rotationScratch","timeScratch","getValue","time","result","now","velocity","_getValue","rotationMatrixFromPositionVelocity","fromRotationMatrix","equals","other"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/VelocityOrientationProperty.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport Property from \"./Property.js\";\nimport VelocityVectorProperty from \"./VelocityVectorProperty.js\";\n\n/**\n * A {@link Property} which evaluates to a {@link Quaternion} rotation\n * based on the velocity of the provided {@link PositionProperty}.\n *\n * @alias VelocityOrientationProperty\n * @constructor\n *\n * @param {PositionProperty} [position] The position property used to compute the orientation.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid used to determine which way is up.\n *\n * @example\n * //Create an entity with position and orientation.\n * const position = new Cesium.SampledProperty();\n * position.addSamples(...);\n * const entity = viewer.entities.add({\n *   position : position,\n *   orientation : new Cesium.VelocityOrientationProperty(position)\n * }));\n */\nfunction VelocityOrientationProperty(position, ellipsoid) {\n  this._velocityVectorProperty = new VelocityVectorProperty(position, true);\n  this._subscription = undefined;\n  this._ellipsoid = undefined;\n  this._definitionChanged = new Event();\n\n  this.ellipsoid = defaultValue(ellipsoid, Ellipsoid.default);\n\n  const that = this;\n  this._velocityVectorProperty.definitionChanged.addEventListener(function () {\n    that._definitionChanged.raiseEvent(that);\n  });\n}\n\nObject.defineProperties(VelocityOrientationProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._velocityVectorProperty);\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the position property used to compute orientation.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Property|undefined}\n   */\n  position: {\n    get: function () {\n      return this._velocityVectorProperty.position;\n    },\n    set: function (value) {\n      this._velocityVectorProperty.position = value;\n    },\n  },\n  /**\n   * Gets or sets the ellipsoid used to determine which way is up.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Property|undefined}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n    set: function (value) {\n      const oldValue = this._ellipsoid;\n      if (oldValue !== value) {\n        this._ellipsoid = value;\n        this._definitionChanged.raiseEvent(this);\n      }\n    },\n  },\n});\n\nconst positionScratch = new Cartesian3();\nconst velocityScratch = new Cartesian3();\nconst rotationScratch = new Matrix3();\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Quaternion} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Quaternion} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nVelocityOrientationProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  const velocity = this._velocityVectorProperty._getValue(\n    time,\n    velocityScratch,\n    positionScratch,\n  );\n\n  if (!defined(velocity)) {\n    return undefined;\n  }\n\n  Transforms.rotationMatrixFromPositionVelocity(\n    positionScratch,\n    velocity,\n    this._ellipsoid,\n    rotationScratch,\n  );\n  return Quaternion.fromRotationMatrix(rotationScratch, result);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nVelocityOrientationProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof VelocityOrientationProperty &&\n      Property.equals(\n        this._velocityVectorProperty,\n        other._velocityVectorProperty,\n      ) &&\n      (this._ellipsoid === other._ellipsoid ||\n        this._ellipsoid.equals(other._ellipsoid)))\n  );\n};\nexport default VelocityOrientationProperty;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}