{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\nconst defaultAngle = CesiumMath.toRadians(30.0);\n\n/**\n * A ParticleEmitter that emits particles within a cone.\n * Particles will be positioned at the tip of the cone and have initial velocities going towards the base.\n *\n * @alias ConeEmitter\n * @constructor\n *\n * @param {number} [angle=Cesium.Math.toRadians(30.0)] The angle of the cone in radians.\n */\nfunction ConeEmitter(angle) {\n  this._angle = defaultValue(angle, defaultAngle);\n}\nObject.defineProperties(ConeEmitter.prototype, {\n  /**\n   * The angle of the cone in radians.\n   * @memberof CircleEmitter.prototype\n   * @type {number}\n   * @default Cesium.Math.toRadians(30.0)\n   */\n  angle: {\n    get: function () {\n      return this._angle;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n      this._angle = value;\n    }\n  }\n});\n\n/**\n * Initializes the given {Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize\n */\nConeEmitter.prototype.emit = function (particle) {\n  const radius = Math.tan(this._angle);\n\n  // Compute a random point on the cone's base\n  const theta = CesiumMath.randomBetween(0.0, CesiumMath.TWO_PI);\n  const rad = CesiumMath.randomBetween(0.0, radius);\n  const x = rad * Math.cos(theta);\n  const y = rad * Math.sin(theta);\n  const z = 1.0;\n  particle.velocity = Cartesian3.fromElements(x, y, z, particle.velocity);\n  Cartesian3.normalize(particle.velocity, particle.velocity);\n  particle.position = Cartesian3.clone(Cartesian3.ZERO, particle.position);\n};\nexport default ConeEmitter;","map":{"version":3,"names":["Cartesian3","Check","defaultValue","CesiumMath","defaultAngle","toRadians","ConeEmitter","angle","_angle","Object","defineProperties","prototype","get","set","value","typeOf","number","emit","particle","radius","Math","tan","theta","randomBetween","TWO_PI","rad","x","cos","y","sin","z","velocity","fromElements","normalize","position","clone","ZERO"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ConeEmitter.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport CesiumMath from \"../Core/Math.js\";\n\nconst defaultAngle = CesiumMath.toRadians(30.0);\n\n/**\n * A ParticleEmitter that emits particles within a cone.\n * Particles will be positioned at the tip of the cone and have initial velocities going towards the base.\n *\n * @alias ConeEmitter\n * @constructor\n *\n * @param {number} [angle=Cesium.Math.toRadians(30.0)] The angle of the cone in radians.\n */\nfunction ConeEmitter(angle) {\n  this._angle = defaultValue(angle, defaultAngle);\n}\n\nObject.defineProperties(ConeEmitter.prototype, {\n  /**\n   * The angle of the cone in radians.\n   * @memberof CircleEmitter.prototype\n   * @type {number}\n   * @default Cesium.Math.toRadians(30.0)\n   */\n  angle: {\n    get: function () {\n      return this._angle;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number(\"value\", value);\n      //>>includeEnd('debug');\n      this._angle = value;\n    },\n  },\n});\n\n/**\n * Initializes the given {Particle} by setting it's position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize\n */\nConeEmitter.prototype.emit = function (particle) {\n  const radius = Math.tan(this._angle);\n\n  // Compute a random point on the cone's base\n  const theta = CesiumMath.randomBetween(0.0, CesiumMath.TWO_PI);\n  const rad = CesiumMath.randomBetween(0.0, radius);\n\n  const x = rad * Math.cos(theta);\n  const y = rad * Math.sin(theta);\n  const z = 1.0;\n\n  particle.velocity = Cartesian3.fromElements(x, y, z, particle.velocity);\n  Cartesian3.normalize(particle.velocity, particle.velocity);\n  particle.position = Cartesian3.clone(Cartesian3.ZERO, particle.position);\n};\nexport default ConeEmitter;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,UAAU,MAAM,iBAAiB;AAExC,MAAMC,YAAY,GAAGD,UAAU,CAACE,SAAS,CAAC,IAAI,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC1B,IAAI,CAACC,MAAM,GAAGN,YAAY,CAACK,KAAK,EAAEH,YAAY,CAAC;AACjD;AAEAK,MAAM,CAACC,gBAAgB,CAACJ,WAAW,CAACK,SAAS,EAAE;EAC7C;AACF;AACA;AACA;AACA;AACA;EACEJ,KAAK,EAAE;IACLK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACJ,MAAM;IACpB,CAAC;IACDK,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MACpB;MACAb,KAAK,CAACc,MAAM,CAACC,MAAM,CAAC,OAAO,EAAEF,KAAK,CAAC;MACnC;MACA,IAAI,CAACN,MAAM,GAAGM,KAAK;IACrB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACAR,WAAW,CAACK,SAAS,CAACM,IAAI,GAAG,UAAUC,QAAQ,EAAE;EAC/C,MAAMC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACb,MAAM,CAAC;;EAEpC;EACA,MAAMc,KAAK,GAAGnB,UAAU,CAACoB,aAAa,CAAC,GAAG,EAAEpB,UAAU,CAACqB,MAAM,CAAC;EAC9D,MAAMC,GAAG,GAAGtB,UAAU,CAACoB,aAAa,CAAC,GAAG,EAAEJ,MAAM,CAAC;EAEjD,MAAMO,CAAC,GAAGD,GAAG,GAAGL,IAAI,CAACO,GAAG,CAACL,KAAK,CAAC;EAC/B,MAAMM,CAAC,GAAGH,GAAG,GAAGL,IAAI,CAACS,GAAG,CAACP,KAAK,CAAC;EAC/B,MAAMQ,CAAC,GAAG,GAAG;EAEbZ,QAAQ,CAACa,QAAQ,GAAG/B,UAAU,CAACgC,YAAY,CAACN,CAAC,EAAEE,CAAC,EAAEE,CAAC,EAAEZ,QAAQ,CAACa,QAAQ,CAAC;EACvE/B,UAAU,CAACiC,SAAS,CAACf,QAAQ,CAACa,QAAQ,EAAEb,QAAQ,CAACa,QAAQ,CAAC;EAC1Db,QAAQ,CAACgB,QAAQ,GAAGlC,UAAU,CAACmC,KAAK,CAACnC,UAAU,CAACoC,IAAI,EAAElB,QAAQ,CAACgB,QAAQ,CAAC;AAC1E,CAAC;AACD,eAAe5B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}