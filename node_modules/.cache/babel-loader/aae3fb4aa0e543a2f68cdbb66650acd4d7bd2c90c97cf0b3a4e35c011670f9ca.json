{"ast":null,"code":"import { binarySearch, ClockRange, ClockStep, defined, DeveloperError, JulianDate } from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\nimport ToggleButtonViewModel from \"../ToggleButtonViewModel.js\";\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nconst realtimeShuttleRingAngle = 15;\nconst maxShuttleRingAngle = 105;\nfunction numberComparator(left, right) {\n  return left - right;\n}\nfunction getTypicalMultiplierIndex(multiplier, shuttleRingTicks) {\n  const index = binarySearch(shuttleRingTicks, multiplier, numberComparator);\n  return index < 0 ? ~index : index;\n}\nfunction angleToMultiplier(angle, shuttleRingTicks) {\n  //Use a linear scale for -1 to 1 between -15 < angle < 15 degrees\n  if (Math.abs(angle) <= realtimeShuttleRingAngle) {\n    return angle / realtimeShuttleRingAngle;\n  }\n  const minp = realtimeShuttleRingAngle;\n  const maxp = maxShuttleRingAngle;\n  let maxv;\n  const minv = 0;\n  let scale;\n  if (angle > 0) {\n    maxv = Math.log(shuttleRingTicks[shuttleRingTicks.length - 1]);\n    scale = (maxv - minv) / (maxp - minp);\n    return Math.exp(minv + scale * (angle - minp));\n  }\n  maxv = Math.log(-shuttleRingTicks[0]);\n  scale = (maxv - minv) / (maxp - minp);\n  return -Math.exp(minv + scale * (Math.abs(angle) - minp));\n}\nfunction multiplierToAngle(multiplier, shuttleRingTicks, clockViewModel) {\n  if (clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK) {\n    return realtimeShuttleRingAngle;\n  }\n  if (Math.abs(multiplier) <= 1) {\n    return multiplier * realtimeShuttleRingAngle;\n  }\n  const fastedMultipler = shuttleRingTicks[shuttleRingTicks.length - 1];\n  if (multiplier > fastedMultipler) {\n    multiplier = fastedMultipler;\n  } else if (multiplier < -fastedMultipler) {\n    multiplier = -fastedMultipler;\n  }\n  const minp = realtimeShuttleRingAngle;\n  const maxp = maxShuttleRingAngle;\n  let maxv;\n  const minv = 0;\n  let scale;\n  if (multiplier > 0) {\n    maxv = Math.log(fastedMultipler);\n    scale = (maxv - minv) / (maxp - minp);\n    return (Math.log(multiplier) - minv) / scale + minp;\n  }\n  maxv = Math.log(-shuttleRingTicks[0]);\n  scale = (maxv - minv) / (maxp - minp);\n  return -((Math.log(Math.abs(multiplier)) - minv) / scale + minp);\n}\n\n/**\n * The view model for the {@link Animation} widget.\n * @alias AnimationViewModel\n * @constructor\n *\n * @param {ClockViewModel} clockViewModel The ClockViewModel instance to use.\n *\n * @see Animation\n */\nfunction AnimationViewModel(clockViewModel) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(clockViewModel)) {\n    throw new DeveloperError(\"clockViewModel is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const that = this;\n  this._clockViewModel = clockViewModel;\n  this._allShuttleRingTicks = [];\n  this._dateFormatter = AnimationViewModel.defaultDateFormatter;\n  this._timeFormatter = AnimationViewModel.defaultTimeFormatter;\n\n  /**\n   * Gets or sets whether the shuttle ring is currently being dragged.  This property is observable.\n   * @type {boolean}\n   * @default false\n   */\n  this.shuttleRingDragging = false;\n\n  /**\n   * Gets or sets whether dragging the shuttle ring should cause the multiplier\n   * to snap to the defined tick values rather than interpolating between them.\n   * This property is observable.\n   * @type {boolean}\n   * @default false\n   */\n  this.snapToTicks = false;\n  knockout.track(this, [\"_allShuttleRingTicks\", \"_dateFormatter\", \"_timeFormatter\", \"shuttleRingDragging\", \"snapToTicks\"]);\n  this._sortedFilteredPositiveTicks = [];\n  this.setShuttleRingTicks(AnimationViewModel.defaultTicks);\n\n  /**\n   * Gets the string representation of the current time.  This property is observable.\n   * @type {string}\n   */\n  this.timeLabel = undefined;\n  knockout.defineProperty(this, \"timeLabel\", function () {\n    return that._timeFormatter(that._clockViewModel.currentTime, that);\n  });\n\n  /**\n   * Gets the string representation of the current date.  This property is observable.\n   * @type {string}\n   */\n  this.dateLabel = undefined;\n  knockout.defineProperty(this, \"dateLabel\", function () {\n    return that._dateFormatter(that._clockViewModel.currentTime, that);\n  });\n\n  /**\n   * Gets the string representation of the current multiplier.  This property is observable.\n   * @type {string}\n   */\n  this.multiplierLabel = undefined;\n  knockout.defineProperty(this, \"multiplierLabel\", function () {\n    const clockViewModel = that._clockViewModel;\n    if (clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK) {\n      return \"Today\";\n    }\n    const multiplier = clockViewModel.multiplier;\n\n    //If it's a whole number, just return it.\n    if (multiplier % 1 === 0) {\n      return `${multiplier.toFixed(0)}x`;\n    }\n\n    //Convert to decimal string and remove any trailing zeroes\n    return `${multiplier.toFixed(3).replace(/0{0,3}$/, \"\")}x`;\n  });\n\n  /**\n   * Gets or sets the current shuttle ring angle.  This property is observable.\n   * @type {number}\n   */\n  this.shuttleRingAngle = undefined;\n  knockout.defineProperty(this, \"shuttleRingAngle\", {\n    get: function () {\n      return multiplierToAngle(clockViewModel.multiplier, that._allShuttleRingTicks, clockViewModel);\n    },\n    set: function (angle) {\n      angle = Math.max(Math.min(angle, maxShuttleRingAngle), -maxShuttleRingAngle);\n      const ticks = that._allShuttleRingTicks;\n      const clockViewModel = that._clockViewModel;\n      clockViewModel.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n\n      //If we are at the max angle, simply return the max value in either direction.\n      if (Math.abs(angle) === maxShuttleRingAngle) {\n        clockViewModel.multiplier = angle > 0 ? ticks[ticks.length - 1] : ticks[0];\n        return;\n      }\n      let multiplier = angleToMultiplier(angle, ticks);\n      if (that.snapToTicks) {\n        multiplier = ticks[getTypicalMultiplierIndex(multiplier, ticks)];\n      } else if (multiplier !== 0) {\n        const positiveMultiplier = Math.abs(multiplier);\n        if (positiveMultiplier > 100) {\n          const numDigits = positiveMultiplier.toFixed(0).length - 2;\n          const divisor = Math.pow(10, numDigits);\n          multiplier = Math.round(multiplier / divisor) * divisor | 0;\n        } else if (positiveMultiplier > realtimeShuttleRingAngle) {\n          multiplier = Math.round(multiplier);\n        } else if (positiveMultiplier > 1) {\n          multiplier = +multiplier.toFixed(1);\n        } else if (positiveMultiplier > 0) {\n          multiplier = +multiplier.toFixed(2);\n        }\n      }\n      clockViewModel.multiplier = multiplier;\n    }\n  });\n  this._canAnimate = undefined;\n  knockout.defineProperty(this, \"_canAnimate\", function () {\n    const clockViewModel = that._clockViewModel;\n    const clockRange = clockViewModel.clockRange;\n    if (that.shuttleRingDragging || clockRange === ClockRange.UNBOUNDED) {\n      return true;\n    }\n    const multiplier = clockViewModel.multiplier;\n    const currentTime = clockViewModel.currentTime;\n    const startTime = clockViewModel.startTime;\n    let result = false;\n    if (clockRange === ClockRange.LOOP_STOP) {\n      result = JulianDate.greaterThan(currentTime, startTime) || currentTime.equals(startTime) && multiplier > 0;\n    } else {\n      const stopTime = clockViewModel.stopTime;\n      result = JulianDate.greaterThan(currentTime, startTime) && JulianDate.lessThan(currentTime, stopTime) ||\n      //\n      currentTime.equals(startTime) && multiplier > 0 ||\n      //\n      currentTime.equals(stopTime) && multiplier < 0;\n    }\n    if (!result) {\n      clockViewModel.shouldAnimate = false;\n    }\n    return result;\n  });\n  this._isSystemTimeAvailable = undefined;\n  knockout.defineProperty(this, \"_isSystemTimeAvailable\", function () {\n    const clockViewModel = that._clockViewModel;\n    const clockRange = clockViewModel.clockRange;\n    if (clockRange === ClockRange.UNBOUNDED) {\n      return true;\n    }\n    const systemTime = clockViewModel.systemTime;\n    return JulianDate.greaterThanOrEquals(systemTime, clockViewModel.startTime) && JulianDate.lessThanOrEquals(systemTime, clockViewModel.stopTime);\n  });\n  this._isAnimating = undefined;\n  knockout.defineProperty(this, \"_isAnimating\", function () {\n    return that._clockViewModel.shouldAnimate && (that._canAnimate || that.shuttleRingDragging);\n  });\n  const pauseCommand = createCommand(function () {\n    const clockViewModel = that._clockViewModel;\n    if (clockViewModel.shouldAnimate) {\n      clockViewModel.shouldAnimate = false;\n    } else if (that._canAnimate) {\n      clockViewModel.shouldAnimate = true;\n    }\n  });\n  this._pauseViewModel = new ToggleButtonViewModel(pauseCommand, {\n    toggled: knockout.computed(function () {\n      return !that._isAnimating;\n    }),\n    tooltip: \"Pause\"\n  });\n  const playReverseCommand = createCommand(function () {\n    const clockViewModel = that._clockViewModel;\n    const multiplier = clockViewModel.multiplier;\n    if (multiplier > 0) {\n      clockViewModel.multiplier = -multiplier;\n    }\n    clockViewModel.shouldAnimate = true;\n  });\n  this._playReverseViewModel = new ToggleButtonViewModel(playReverseCommand, {\n    toggled: knockout.computed(function () {\n      return that._isAnimating && clockViewModel.multiplier < 0;\n    }),\n    tooltip: \"Play Reverse\"\n  });\n  const playForwardCommand = createCommand(function () {\n    const clockViewModel = that._clockViewModel;\n    const multiplier = clockViewModel.multiplier;\n    if (multiplier < 0) {\n      clockViewModel.multiplier = -multiplier;\n    }\n    clockViewModel.shouldAnimate = true;\n  });\n  this._playForwardViewModel = new ToggleButtonViewModel(playForwardCommand, {\n    toggled: knockout.computed(function () {\n      return that._isAnimating && clockViewModel.multiplier > 0 && clockViewModel.clockStep !== ClockStep.SYSTEM_CLOCK;\n    }),\n    tooltip: \"Play Forward\"\n  });\n  const playRealtimeCommand = createCommand(function () {\n    that._clockViewModel.clockStep = ClockStep.SYSTEM_CLOCK;\n  }, knockout.getObservable(this, \"_isSystemTimeAvailable\"));\n  this._playRealtimeViewModel = new ToggleButtonViewModel(playRealtimeCommand, {\n    toggled: knockout.computed(function () {\n      return clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK;\n    }),\n    tooltip: knockout.computed(function () {\n      return that._isSystemTimeAvailable ? \"Today (real-time)\" : \"Current time not in range\";\n    })\n  });\n  this._slower = createCommand(function () {\n    const clockViewModel = that._clockViewModel;\n    const shuttleRingTicks = that._allShuttleRingTicks;\n    const multiplier = clockViewModel.multiplier;\n    const index = getTypicalMultiplierIndex(multiplier, shuttleRingTicks) - 1;\n    if (index >= 0) {\n      clockViewModel.multiplier = shuttleRingTicks[index];\n    }\n  });\n  this._faster = createCommand(function () {\n    const clockViewModel = that._clockViewModel;\n    const shuttleRingTicks = that._allShuttleRingTicks;\n    const multiplier = clockViewModel.multiplier;\n    const index = getTypicalMultiplierIndex(multiplier, shuttleRingTicks) + 1;\n    if (index < shuttleRingTicks.length) {\n      clockViewModel.multiplier = shuttleRingTicks[index];\n    }\n  });\n}\n\n/**\n * Gets or sets the default date formatter used by new instances.\n *\n * @member\n * @type {AnimationViewModel.DateFormatter}\n */\nAnimationViewModel.defaultDateFormatter = function (date, viewModel) {\n  const gregorianDate = JulianDate.toGregorianDate(date);\n  return `${monthNames[gregorianDate.month - 1]} ${gregorianDate.day} ${gregorianDate.year}`;\n};\n\n/**\n * Gets or sets the default array of known clock multipliers associated with new instances of the shuttle ring.\n * @type {number[]}\n */\nAnimationViewModel.defaultTicks = [\n//\n0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, 0.25, 0.5, 1.0, 2.0, 5.0, 10.0,\n//\n15.0, 30.0, 60.0, 120.0, 300.0, 600.0, 900.0, 1800.0, 3600.0, 7200.0, 14400.0,\n//\n21600.0, 43200.0, 86400.0, 172800.0, 345600.0, 604800.0];\n\n/**\n * Gets or sets the default time formatter used by new instances.\n *\n * @member\n * @type {AnimationViewModel.TimeFormatter}\n */\nAnimationViewModel.defaultTimeFormatter = function (date, viewModel) {\n  const gregorianDate = JulianDate.toGregorianDate(date);\n  const millisecond = Math.round(gregorianDate.millisecond);\n  if (Math.abs(viewModel._clockViewModel.multiplier) < 1) {\n    return `${gregorianDate.hour.toString().padStart(2, \"0\")}:${gregorianDate.minute.toString().padStart(2, \"0\")}:${gregorianDate.second.toString().padStart(2, \"0\")}.${millisecond.toString().padStart(3, \"0\")}`;\n  }\n  return `${gregorianDate.hour.toString().padStart(2, \"0\")}:${gregorianDate.minute.toString().padStart(2, \"0\")}:${gregorianDate.second.toString().padStart(2, \"0\")} UTC`;\n};\n\n/**\n * Gets a copy of the array of positive known clock multipliers to associate with the shuttle ring.\n *\n * @returns {number[]} The array of known clock multipliers associated with the shuttle ring.\n */\nAnimationViewModel.prototype.getShuttleRingTicks = function () {\n  return this._sortedFilteredPositiveTicks.slice(0);\n};\n\n/**\n * Sets the array of positive known clock multipliers to associate with the shuttle ring.\n * These values will have negative equivalents created for them and sets both the minimum\n * and maximum range of values for the shuttle ring as well as the values that are snapped\n * to when a single click is made.  The values need not be in order, as they will be sorted\n * automatically, and duplicate values will be removed.\n *\n * @param {number[]} positiveTicks The list of known positive clock multipliers to associate with the shuttle ring.\n */\nAnimationViewModel.prototype.setShuttleRingTicks = function (positiveTicks) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positiveTicks)) {\n    throw new DeveloperError(\"positiveTicks is required.\");\n  }\n  //>>includeEnd('debug');\n\n  let i;\n  let len;\n  let tick;\n  const hash = {};\n  const sortedFilteredPositiveTicks = this._sortedFilteredPositiveTicks;\n  sortedFilteredPositiveTicks.length = 0;\n  for (i = 0, len = positiveTicks.length; i < len; ++i) {\n    tick = positiveTicks[i];\n    //filter duplicates\n    if (!hash.hasOwnProperty(tick)) {\n      hash[tick] = true;\n      sortedFilteredPositiveTicks.push(tick);\n    }\n  }\n  sortedFilteredPositiveTicks.sort(numberComparator);\n  const allTicks = [];\n  for (len = sortedFilteredPositiveTicks.length, i = len - 1; i >= 0; --i) {\n    tick = sortedFilteredPositiveTicks[i];\n    if (tick !== 0) {\n      allTicks.push(-tick);\n    }\n  }\n  Array.prototype.push.apply(allTicks, sortedFilteredPositiveTicks);\n  this._allShuttleRingTicks = allTicks;\n};\nObject.defineProperties(AnimationViewModel.prototype, {\n  /**\n   * Gets a command that decreases the speed of animation.\n   * @memberof AnimationViewModel.prototype\n   * @type {Command}\n   */\n  slower: {\n    get: function () {\n      return this._slower;\n    }\n  },\n  /**\n   * Gets a command that increases the speed of animation.\n   * @memberof AnimationViewModel.prototype\n   * @type {Command}\n   */\n  faster: {\n    get: function () {\n      return this._faster;\n    }\n  },\n  /**\n   * Gets the clock view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ClockViewModel}\n   */\n  clockViewModel: {\n    get: function () {\n      return this._clockViewModel;\n    }\n  },\n  /**\n   * Gets the pause toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  pauseViewModel: {\n    get: function () {\n      return this._pauseViewModel;\n    }\n  },\n  /**\n   * Gets the reverse toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playReverseViewModel: {\n    get: function () {\n      return this._playReverseViewModel;\n    }\n  },\n  /**\n   * Gets the play toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playForwardViewModel: {\n    get: function () {\n      return this._playForwardViewModel;\n    }\n  },\n  /**\n   * Gets the realtime toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playRealtimeViewModel: {\n    get: function () {\n      return this._playRealtimeViewModel;\n    }\n  },\n  /**\n   * Gets or sets the function which formats a date for display.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {AnimationViewModel.DateFormatter}\n   * @default AnimationViewModel.defaultDateFormatter\n   */\n  dateFormatter: {\n    //TODO:@exception {DeveloperError} dateFormatter must be a function.\n    get: function () {\n      return this._dateFormatter;\n    },\n    set: function (dateFormatter) {\n      //>>includeStart('debug', pragmas.debug);\n      if (typeof dateFormatter !== \"function\") {\n        throw new DeveloperError(\"dateFormatter must be a function\");\n      }\n      //>>includeEnd('debug');\n\n      this._dateFormatter = dateFormatter;\n    }\n  },\n  /**\n   * Gets or sets the function which formats a time for display.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {AnimationViewModel.TimeFormatter}\n   * @default AnimationViewModel.defaultTimeFormatter\n   */\n  timeFormatter: {\n    //TODO:@exception {DeveloperError} timeFormatter must be a function.\n    get: function () {\n      return this._timeFormatter;\n    },\n    set: function (timeFormatter) {\n      //>>includeStart('debug', pragmas.debug);\n      if (typeof timeFormatter !== \"function\") {\n        throw new DeveloperError(\"timeFormatter must be a function\");\n      }\n      //>>includeEnd('debug');\n\n      this._timeFormatter = timeFormatter;\n    }\n  }\n});\n\n//Currently exposed for tests.\nAnimationViewModel._maxShuttleRingAngle = maxShuttleRingAngle;\nAnimationViewModel._realtimeShuttleRingAngle = realtimeShuttleRingAngle;\n\n/**\n * A function that formats a date for display.\n * @callback AnimationViewModel.DateFormatter\n *\n * @param {JulianDate} date The date to be formatted\n * @param {AnimationViewModel} viewModel The AnimationViewModel instance requesting formatting.\n * @returns {string} The string representation of the calendar date portion of the provided date.\n */\n\n/**\n * A function that formats a time for display.\n * @callback AnimationViewModel.TimeFormatter\n *\n * @param {JulianDate} date The date to be formatted\n * @param {AnimationViewModel} viewModel The AnimationViewModel instance requesting formatting.\n * @returns {string} The string representation of the time portion of the provided date.\n */\nexport default AnimationViewModel;","map":{"version":3,"names":["binarySearch","ClockRange","ClockStep","defined","DeveloperError","JulianDate","knockout","createCommand","ToggleButtonViewModel","monthNames","realtimeShuttleRingAngle","maxShuttleRingAngle","numberComparator","left","right","getTypicalMultiplierIndex","multiplier","shuttleRingTicks","index","angleToMultiplier","angle","Math","abs","minp","maxp","maxv","minv","scale","log","length","exp","multiplierToAngle","clockViewModel","clockStep","SYSTEM_CLOCK","fastedMultipler","AnimationViewModel","that","_clockViewModel","_allShuttleRingTicks","_dateFormatter","defaultDateFormatter","_timeFormatter","defaultTimeFormatter","shuttleRingDragging","snapToTicks","track","_sortedFilteredPositiveTicks","setShuttleRingTicks","defaultTicks","timeLabel","undefined","defineProperty","currentTime","dateLabel","multiplierLabel","toFixed","replace","shuttleRingAngle","get","set","max","min","ticks","SYSTEM_CLOCK_MULTIPLIER","positiveMultiplier","numDigits","divisor","pow","round","_canAnimate","clockRange","UNBOUNDED","startTime","result","LOOP_STOP","greaterThan","equals","stopTime","lessThan","shouldAnimate","_isSystemTimeAvailable","systemTime","greaterThanOrEquals","lessThanOrEquals","_isAnimating","pauseCommand","_pauseViewModel","toggled","computed","tooltip","playReverseCommand","_playReverseViewModel","playForwardCommand","_playForwardViewModel","playRealtimeCommand","getObservable","_playRealtimeViewModel","_slower","_faster","date","viewModel","gregorianDate","toGregorianDate","month","day","year","millisecond","hour","toString","padStart","minute","second","prototype","getShuttleRingTicks","slice","positiveTicks","i","len","tick","hash","sortedFilteredPositiveTicks","hasOwnProperty","push","sort","allTicks","Array","apply","Object","defineProperties","slower","faster","pauseViewModel","playReverseViewModel","playForwardViewModel","playRealtimeViewModel","dateFormatter","timeFormatter","_maxShuttleRingAngle","_realtimeShuttleRingAngle"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/Animation/AnimationViewModel.js"],"sourcesContent":["import {\n  binarySearch,\n  ClockRange,\n  ClockStep,\n  defined,\n  DeveloperError,\n  JulianDate,\n} from \"@cesium/engine\";\n\nimport knockout from \"../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\nimport ToggleButtonViewModel from \"../ToggleButtonViewModel.js\";\n\nconst monthNames = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\nconst realtimeShuttleRingAngle = 15;\nconst maxShuttleRingAngle = 105;\n\nfunction numberComparator(left, right) {\n  return left - right;\n}\n\nfunction getTypicalMultiplierIndex(multiplier, shuttleRingTicks) {\n  const index = binarySearch(shuttleRingTicks, multiplier, numberComparator);\n  return index < 0 ? ~index : index;\n}\n\nfunction angleToMultiplier(angle, shuttleRingTicks) {\n  //Use a linear scale for -1 to 1 between -15 < angle < 15 degrees\n  if (Math.abs(angle) <= realtimeShuttleRingAngle) {\n    return angle / realtimeShuttleRingAngle;\n  }\n\n  const minp = realtimeShuttleRingAngle;\n  const maxp = maxShuttleRingAngle;\n  let maxv;\n  const minv = 0;\n  let scale;\n  if (angle > 0) {\n    maxv = Math.log(shuttleRingTicks[shuttleRingTicks.length - 1]);\n    scale = (maxv - minv) / (maxp - minp);\n    return Math.exp(minv + scale * (angle - minp));\n  }\n\n  maxv = Math.log(-shuttleRingTicks[0]);\n  scale = (maxv - minv) / (maxp - minp);\n  return -Math.exp(minv + scale * (Math.abs(angle) - minp));\n}\n\nfunction multiplierToAngle(multiplier, shuttleRingTicks, clockViewModel) {\n  if (clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK) {\n    return realtimeShuttleRingAngle;\n  }\n\n  if (Math.abs(multiplier) <= 1) {\n    return multiplier * realtimeShuttleRingAngle;\n  }\n\n  const fastedMultipler = shuttleRingTicks[shuttleRingTicks.length - 1];\n  if (multiplier > fastedMultipler) {\n    multiplier = fastedMultipler;\n  } else if (multiplier < -fastedMultipler) {\n    multiplier = -fastedMultipler;\n  }\n\n  const minp = realtimeShuttleRingAngle;\n  const maxp = maxShuttleRingAngle;\n  let maxv;\n  const minv = 0;\n  let scale;\n\n  if (multiplier > 0) {\n    maxv = Math.log(fastedMultipler);\n    scale = (maxv - minv) / (maxp - minp);\n    return (Math.log(multiplier) - minv) / scale + minp;\n  }\n\n  maxv = Math.log(-shuttleRingTicks[0]);\n  scale = (maxv - minv) / (maxp - minp);\n  return -((Math.log(Math.abs(multiplier)) - minv) / scale + minp);\n}\n\n/**\n * The view model for the {@link Animation} widget.\n * @alias AnimationViewModel\n * @constructor\n *\n * @param {ClockViewModel} clockViewModel The ClockViewModel instance to use.\n *\n * @see Animation\n */\nfunction AnimationViewModel(clockViewModel) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(clockViewModel)) {\n    throw new DeveloperError(\"clockViewModel is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const that = this;\n  this._clockViewModel = clockViewModel;\n  this._allShuttleRingTicks = [];\n  this._dateFormatter = AnimationViewModel.defaultDateFormatter;\n  this._timeFormatter = AnimationViewModel.defaultTimeFormatter;\n\n  /**\n   * Gets or sets whether the shuttle ring is currently being dragged.  This property is observable.\n   * @type {boolean}\n   * @default false\n   */\n  this.shuttleRingDragging = false;\n\n  /**\n   * Gets or sets whether dragging the shuttle ring should cause the multiplier\n   * to snap to the defined tick values rather than interpolating between them.\n   * This property is observable.\n   * @type {boolean}\n   * @default false\n   */\n  this.snapToTicks = false;\n\n  knockout.track(this, [\n    \"_allShuttleRingTicks\",\n    \"_dateFormatter\",\n    \"_timeFormatter\",\n    \"shuttleRingDragging\",\n    \"snapToTicks\",\n  ]);\n\n  this._sortedFilteredPositiveTicks = [];\n\n  this.setShuttleRingTicks(AnimationViewModel.defaultTicks);\n\n  /**\n   * Gets the string representation of the current time.  This property is observable.\n   * @type {string}\n   */\n  this.timeLabel = undefined;\n  knockout.defineProperty(this, \"timeLabel\", function () {\n    return that._timeFormatter(that._clockViewModel.currentTime, that);\n  });\n\n  /**\n   * Gets the string representation of the current date.  This property is observable.\n   * @type {string}\n   */\n  this.dateLabel = undefined;\n  knockout.defineProperty(this, \"dateLabel\", function () {\n    return that._dateFormatter(that._clockViewModel.currentTime, that);\n  });\n\n  /**\n   * Gets the string representation of the current multiplier.  This property is observable.\n   * @type {string}\n   */\n  this.multiplierLabel = undefined;\n  knockout.defineProperty(this, \"multiplierLabel\", function () {\n    const clockViewModel = that._clockViewModel;\n    if (clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK) {\n      return \"Today\";\n    }\n\n    const multiplier = clockViewModel.multiplier;\n\n    //If it's a whole number, just return it.\n    if (multiplier % 1 === 0) {\n      return `${multiplier.toFixed(0)}x`;\n    }\n\n    //Convert to decimal string and remove any trailing zeroes\n    return `${multiplier.toFixed(3).replace(/0{0,3}$/, \"\")}x`;\n  });\n\n  /**\n   * Gets or sets the current shuttle ring angle.  This property is observable.\n   * @type {number}\n   */\n  this.shuttleRingAngle = undefined;\n  knockout.defineProperty(this, \"shuttleRingAngle\", {\n    get: function () {\n      return multiplierToAngle(\n        clockViewModel.multiplier,\n        that._allShuttleRingTicks,\n        clockViewModel,\n      );\n    },\n    set: function (angle) {\n      angle = Math.max(\n        Math.min(angle, maxShuttleRingAngle),\n        -maxShuttleRingAngle,\n      );\n      const ticks = that._allShuttleRingTicks;\n\n      const clockViewModel = that._clockViewModel;\n      clockViewModel.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n\n      //If we are at the max angle, simply return the max value in either direction.\n      if (Math.abs(angle) === maxShuttleRingAngle) {\n        clockViewModel.multiplier =\n          angle > 0 ? ticks[ticks.length - 1] : ticks[0];\n        return;\n      }\n\n      let multiplier = angleToMultiplier(angle, ticks);\n      if (that.snapToTicks) {\n        multiplier = ticks[getTypicalMultiplierIndex(multiplier, ticks)];\n      } else if (multiplier !== 0) {\n        const positiveMultiplier = Math.abs(multiplier);\n\n        if (positiveMultiplier > 100) {\n          const numDigits = positiveMultiplier.toFixed(0).length - 2;\n          const divisor = Math.pow(10, numDigits);\n          multiplier = (Math.round(multiplier / divisor) * divisor) | 0;\n        } else if (positiveMultiplier > realtimeShuttleRingAngle) {\n          multiplier = Math.round(multiplier);\n        } else if (positiveMultiplier > 1) {\n          multiplier = +multiplier.toFixed(1);\n        } else if (positiveMultiplier > 0) {\n          multiplier = +multiplier.toFixed(2);\n        }\n      }\n      clockViewModel.multiplier = multiplier;\n    },\n  });\n\n  this._canAnimate = undefined;\n  knockout.defineProperty(this, \"_canAnimate\", function () {\n    const clockViewModel = that._clockViewModel;\n    const clockRange = clockViewModel.clockRange;\n\n    if (that.shuttleRingDragging || clockRange === ClockRange.UNBOUNDED) {\n      return true;\n    }\n\n    const multiplier = clockViewModel.multiplier;\n    const currentTime = clockViewModel.currentTime;\n    const startTime = clockViewModel.startTime;\n\n    let result = false;\n    if (clockRange === ClockRange.LOOP_STOP) {\n      result =\n        JulianDate.greaterThan(currentTime, startTime) ||\n        (currentTime.equals(startTime) && multiplier > 0);\n    } else {\n      const stopTime = clockViewModel.stopTime;\n      result =\n        (JulianDate.greaterThan(currentTime, startTime) &&\n          JulianDate.lessThan(currentTime, stopTime)) || //\n        (currentTime.equals(startTime) && multiplier > 0) || //\n        (currentTime.equals(stopTime) && multiplier < 0);\n    }\n\n    if (!result) {\n      clockViewModel.shouldAnimate = false;\n    }\n    return result;\n  });\n\n  this._isSystemTimeAvailable = undefined;\n  knockout.defineProperty(this, \"_isSystemTimeAvailable\", function () {\n    const clockViewModel = that._clockViewModel;\n    const clockRange = clockViewModel.clockRange;\n    if (clockRange === ClockRange.UNBOUNDED) {\n      return true;\n    }\n\n    const systemTime = clockViewModel.systemTime;\n    return (\n      JulianDate.greaterThanOrEquals(systemTime, clockViewModel.startTime) &&\n      JulianDate.lessThanOrEquals(systemTime, clockViewModel.stopTime)\n    );\n  });\n\n  this._isAnimating = undefined;\n  knockout.defineProperty(this, \"_isAnimating\", function () {\n    return (\n      that._clockViewModel.shouldAnimate &&\n      (that._canAnimate || that.shuttleRingDragging)\n    );\n  });\n\n  const pauseCommand = createCommand(function () {\n    const clockViewModel = that._clockViewModel;\n    if (clockViewModel.shouldAnimate) {\n      clockViewModel.shouldAnimate = false;\n    } else if (that._canAnimate) {\n      clockViewModel.shouldAnimate = true;\n    }\n  });\n\n  this._pauseViewModel = new ToggleButtonViewModel(pauseCommand, {\n    toggled: knockout.computed(function () {\n      return !that._isAnimating;\n    }),\n    tooltip: \"Pause\",\n  });\n\n  const playReverseCommand = createCommand(function () {\n    const clockViewModel = that._clockViewModel;\n    const multiplier = clockViewModel.multiplier;\n    if (multiplier > 0) {\n      clockViewModel.multiplier = -multiplier;\n    }\n    clockViewModel.shouldAnimate = true;\n  });\n\n  this._playReverseViewModel = new ToggleButtonViewModel(playReverseCommand, {\n    toggled: knockout.computed(function () {\n      return that._isAnimating && clockViewModel.multiplier < 0;\n    }),\n    tooltip: \"Play Reverse\",\n  });\n\n  const playForwardCommand = createCommand(function () {\n    const clockViewModel = that._clockViewModel;\n    const multiplier = clockViewModel.multiplier;\n    if (multiplier < 0) {\n      clockViewModel.multiplier = -multiplier;\n    }\n    clockViewModel.shouldAnimate = true;\n  });\n\n  this._playForwardViewModel = new ToggleButtonViewModel(playForwardCommand, {\n    toggled: knockout.computed(function () {\n      return (\n        that._isAnimating &&\n        clockViewModel.multiplier > 0 &&\n        clockViewModel.clockStep !== ClockStep.SYSTEM_CLOCK\n      );\n    }),\n    tooltip: \"Play Forward\",\n  });\n\n  const playRealtimeCommand = createCommand(\n    function () {\n      that._clockViewModel.clockStep = ClockStep.SYSTEM_CLOCK;\n    },\n    knockout.getObservable(this, \"_isSystemTimeAvailable\"),\n  );\n\n  this._playRealtimeViewModel = new ToggleButtonViewModel(playRealtimeCommand, {\n    toggled: knockout.computed(function () {\n      return clockViewModel.clockStep === ClockStep.SYSTEM_CLOCK;\n    }),\n    tooltip: knockout.computed(function () {\n      return that._isSystemTimeAvailable\n        ? \"Today (real-time)\"\n        : \"Current time not in range\";\n    }),\n  });\n\n  this._slower = createCommand(function () {\n    const clockViewModel = that._clockViewModel;\n    const shuttleRingTicks = that._allShuttleRingTicks;\n    const multiplier = clockViewModel.multiplier;\n    const index = getTypicalMultiplierIndex(multiplier, shuttleRingTicks) - 1;\n    if (index >= 0) {\n      clockViewModel.multiplier = shuttleRingTicks[index];\n    }\n  });\n\n  this._faster = createCommand(function () {\n    const clockViewModel = that._clockViewModel;\n    const shuttleRingTicks = that._allShuttleRingTicks;\n    const multiplier = clockViewModel.multiplier;\n    const index = getTypicalMultiplierIndex(multiplier, shuttleRingTicks) + 1;\n    if (index < shuttleRingTicks.length) {\n      clockViewModel.multiplier = shuttleRingTicks[index];\n    }\n  });\n}\n\n/**\n * Gets or sets the default date formatter used by new instances.\n *\n * @member\n * @type {AnimationViewModel.DateFormatter}\n */\nAnimationViewModel.defaultDateFormatter = function (date, viewModel) {\n  const gregorianDate = JulianDate.toGregorianDate(date);\n  return `${monthNames[gregorianDate.month - 1]} ${gregorianDate.day} ${\n    gregorianDate.year\n  }`;\n};\n\n/**\n * Gets or sets the default array of known clock multipliers associated with new instances of the shuttle ring.\n * @type {number[]}\n */\nAnimationViewModel.defaultTicks = [\n  //\n  0.001,\n  0.002,\n  0.005,\n  0.01,\n  0.02,\n  0.05,\n  0.1,\n  0.25,\n  0.5,\n  1.0,\n  2.0,\n  5.0,\n  10.0, //\n  15.0,\n  30.0,\n  60.0,\n  120.0,\n  300.0,\n  600.0,\n  900.0,\n  1800.0,\n  3600.0,\n  7200.0,\n  14400.0, //\n  21600.0,\n  43200.0,\n  86400.0,\n  172800.0,\n  345600.0,\n  604800.0,\n];\n\n/**\n * Gets or sets the default time formatter used by new instances.\n *\n * @member\n * @type {AnimationViewModel.TimeFormatter}\n */\nAnimationViewModel.defaultTimeFormatter = function (date, viewModel) {\n  const gregorianDate = JulianDate.toGregorianDate(date);\n  const millisecond = Math.round(gregorianDate.millisecond);\n  if (Math.abs(viewModel._clockViewModel.multiplier) < 1) {\n    return `${gregorianDate.hour\n      .toString()\n      .padStart(2, \"0\")}:${gregorianDate.minute\n      .toString()\n      .padStart(2, \"0\")}:${gregorianDate.second\n      .toString()\n      .padStart(2, \"0\")}.${millisecond.toString().padStart(3, \"0\")}`;\n  }\n  return `${gregorianDate.hour\n    .toString()\n    .padStart(2, \"0\")}:${gregorianDate.minute\n    .toString()\n    .padStart(2, \"0\")}:${gregorianDate.second.toString().padStart(2, \"0\")} UTC`;\n};\n\n/**\n * Gets a copy of the array of positive known clock multipliers to associate with the shuttle ring.\n *\n * @returns {number[]} The array of known clock multipliers associated with the shuttle ring.\n */\nAnimationViewModel.prototype.getShuttleRingTicks = function () {\n  return this._sortedFilteredPositiveTicks.slice(0);\n};\n\n/**\n * Sets the array of positive known clock multipliers to associate with the shuttle ring.\n * These values will have negative equivalents created for them and sets both the minimum\n * and maximum range of values for the shuttle ring as well as the values that are snapped\n * to when a single click is made.  The values need not be in order, as they will be sorted\n * automatically, and duplicate values will be removed.\n *\n * @param {number[]} positiveTicks The list of known positive clock multipliers to associate with the shuttle ring.\n */\nAnimationViewModel.prototype.setShuttleRingTicks = function (positiveTicks) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positiveTicks)) {\n    throw new DeveloperError(\"positiveTicks is required.\");\n  }\n  //>>includeEnd('debug');\n\n  let i;\n  let len;\n  let tick;\n\n  const hash = {};\n  const sortedFilteredPositiveTicks = this._sortedFilteredPositiveTicks;\n  sortedFilteredPositiveTicks.length = 0;\n  for (i = 0, len = positiveTicks.length; i < len; ++i) {\n    tick = positiveTicks[i];\n    //filter duplicates\n    if (!hash.hasOwnProperty(tick)) {\n      hash[tick] = true;\n      sortedFilteredPositiveTicks.push(tick);\n    }\n  }\n  sortedFilteredPositiveTicks.sort(numberComparator);\n\n  const allTicks = [];\n  for (len = sortedFilteredPositiveTicks.length, i = len - 1; i >= 0; --i) {\n    tick = sortedFilteredPositiveTicks[i];\n    if (tick !== 0) {\n      allTicks.push(-tick);\n    }\n  }\n  Array.prototype.push.apply(allTicks, sortedFilteredPositiveTicks);\n\n  this._allShuttleRingTicks = allTicks;\n};\n\nObject.defineProperties(AnimationViewModel.prototype, {\n  /**\n   * Gets a command that decreases the speed of animation.\n   * @memberof AnimationViewModel.prototype\n   * @type {Command}\n   */\n  slower: {\n    get: function () {\n      return this._slower;\n    },\n  },\n\n  /**\n   * Gets a command that increases the speed of animation.\n   * @memberof AnimationViewModel.prototype\n   * @type {Command}\n   */\n  faster: {\n    get: function () {\n      return this._faster;\n    },\n  },\n\n  /**\n   * Gets the clock view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ClockViewModel}\n   */\n  clockViewModel: {\n    get: function () {\n      return this._clockViewModel;\n    },\n  },\n\n  /**\n   * Gets the pause toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  pauseViewModel: {\n    get: function () {\n      return this._pauseViewModel;\n    },\n  },\n\n  /**\n   * Gets the reverse toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playReverseViewModel: {\n    get: function () {\n      return this._playReverseViewModel;\n    },\n  },\n\n  /**\n   * Gets the play toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playForwardViewModel: {\n    get: function () {\n      return this._playForwardViewModel;\n    },\n  },\n\n  /**\n   * Gets the realtime toggle button view model.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {ToggleButtonViewModel}\n   */\n  playRealtimeViewModel: {\n    get: function () {\n      return this._playRealtimeViewModel;\n    },\n  },\n\n  /**\n   * Gets or sets the function which formats a date for display.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {AnimationViewModel.DateFormatter}\n   * @default AnimationViewModel.defaultDateFormatter\n   */\n  dateFormatter: {\n    //TODO:@exception {DeveloperError} dateFormatter must be a function.\n    get: function () {\n      return this._dateFormatter;\n    },\n    set: function (dateFormatter) {\n      //>>includeStart('debug', pragmas.debug);\n      if (typeof dateFormatter !== \"function\") {\n        throw new DeveloperError(\"dateFormatter must be a function\");\n      }\n      //>>includeEnd('debug');\n\n      this._dateFormatter = dateFormatter;\n    },\n  },\n\n  /**\n   * Gets or sets the function which formats a time for display.\n   * @memberof AnimationViewModel.prototype\n   *\n   * @type {AnimationViewModel.TimeFormatter}\n   * @default AnimationViewModel.defaultTimeFormatter\n   */\n  timeFormatter: {\n    //TODO:@exception {DeveloperError} timeFormatter must be a function.\n    get: function () {\n      return this._timeFormatter;\n    },\n    set: function (timeFormatter) {\n      //>>includeStart('debug', pragmas.debug);\n      if (typeof timeFormatter !== \"function\") {\n        throw new DeveloperError(\"timeFormatter must be a function\");\n      }\n      //>>includeEnd('debug');\n\n      this._timeFormatter = timeFormatter;\n    },\n  },\n});\n\n//Currently exposed for tests.\nAnimationViewModel._maxShuttleRingAngle = maxShuttleRingAngle;\nAnimationViewModel._realtimeShuttleRingAngle = realtimeShuttleRingAngle;\n\n/**\n * A function that formats a date for display.\n * @callback AnimationViewModel.DateFormatter\n *\n * @param {JulianDate} date The date to be formatted\n * @param {AnimationViewModel} viewModel The AnimationViewModel instance requesting formatting.\n * @returns {string} The string representation of the calendar date portion of the provided date.\n */\n\n/**\n * A function that formats a time for display.\n * @callback AnimationViewModel.TimeFormatter\n *\n * @param {JulianDate} date The date to be formatted\n * @param {AnimationViewModel} viewModel The AnimationViewModel instance requesting formatting.\n * @returns {string} The string representation of the time portion of the provided date.\n */\nexport default AnimationViewModel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}