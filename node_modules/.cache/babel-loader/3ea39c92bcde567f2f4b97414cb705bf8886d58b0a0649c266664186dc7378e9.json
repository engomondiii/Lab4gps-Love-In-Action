{"ast":null,"code":"import Matrix4 from \"../../Core/Matrix4.js\";\nimport ModelUtility from \"./ModelUtility.js\";\nimport SceneMode from \"../SceneMode.js\";\n\n/**\n * The model matrix update stage is responsible for updating the model matrices and bounding volumes of the draw commands.\n *\n * @namespace ModelMatrixUpdateStage\n *\n * @private\n */\nconst ModelMatrixUpdateStage = {};\nModelMatrixUpdateStage.name = \"ModelMatrixUpdateStage\"; // Helps with debugging\n\n/**\n * Processes a runtime node. This modifies the following parts of the scene graph and draw commands:\n * <ul>\n *  <li>updates the transforms the children of any nodes with a dirty transform</li>\n *  <li>updates the model matrix of each draw command in each primitive of the the dirty nodes and their children</li>\n *  <li>updates the bounding volume of each draw command in each primitive of the the dirty nodes and their children</li>\n * </ul>\n *\n * @param {ModelRuntimeNode} runtimeNode\n * @param {ModelSceneGraph} sceneGraph\n * @param {FrameState} frameState\n *\n * @private\n */\nModelMatrixUpdateStage.update = function (runtimeNode, sceneGraph, frameState) {\n  // Skip the update stage if the model is being projected to 2D\n  const use2D = frameState.mode !== SceneMode.SCENE3D;\n  if (use2D && sceneGraph._model._projectTo2D) {\n    return;\n  }\n  if (runtimeNode._transformDirty) {\n    const modelMatrix = use2D ? sceneGraph._computedModelMatrix2D : sceneGraph._computedModelMatrix;\n    updateRuntimeNode(runtimeNode, sceneGraph, modelMatrix, runtimeNode.transformToRoot);\n    runtimeNode._transformDirty = false;\n  }\n};\n\n/**\n * Update the modelMatrix and cullFrace of the given draw command.\n *\n * @private\n */\nfunction updateDrawCommand(drawCommand, modelMatrix, transformToRoot) {\n  drawCommand.modelMatrix = Matrix4.multiplyTransformation(modelMatrix, transformToRoot, drawCommand.modelMatrix);\n  drawCommand.cullFace = ModelUtility.getCullFace(drawCommand.modelMatrix, drawCommand.primitiveType);\n}\n\n/**\n * Recursively update all child runtime nodes and their runtime primitives.\n *\n * @private\n */\nfunction updateRuntimeNode(runtimeNode, sceneGraph, modelMatrix, transformToRoot) {\n  let i;\n\n  // Apply the current node's transform to the end of the chain\n  transformToRoot = Matrix4.multiplyTransformation(transformToRoot, runtimeNode.transform, new Matrix4());\n  runtimeNode.updateComputedTransform();\n  const primitivesLength = runtimeNode.runtimePrimitives.length;\n  for (i = 0; i < primitivesLength; i++) {\n    const runtimePrimitive = runtimeNode.runtimePrimitives[i];\n    updateDrawCommand(runtimePrimitive.drawCommand, modelMatrix, transformToRoot);\n  }\n  const childrenLength = runtimeNode.children.length;\n  for (i = 0; i < childrenLength; i++) {\n    const childRuntimeNode = sceneGraph._runtimeNodes[runtimeNode.children[i]];\n\n    // Update transformToRoot to accommodate changes in the transforms of this node and its ancestors\n    childRuntimeNode._transformToRoot = Matrix4.clone(transformToRoot, childRuntimeNode._transformToRoot);\n    updateRuntimeNode(childRuntimeNode, sceneGraph, modelMatrix, transformToRoot);\n    childRuntimeNode._transformDirty = false;\n  }\n}\nexport default ModelMatrixUpdateStage;","map":{"version":3,"names":["Matrix4","ModelUtility","SceneMode","ModelMatrixUpdateStage","name","update","runtimeNode","sceneGraph","frameState","use2D","mode","SCENE3D","_model","_projectTo2D","_transformDirty","modelMatrix","_computedModelMatrix2D","_computedModelMatrix","updateRuntimeNode","transformToRoot","updateDrawCommand","drawCommand","multiplyTransformation","cullFace","getCullFace","primitiveType","i","transform","updateComputedTransform","primitivesLength","runtimePrimitives","length","runtimePrimitive","childrenLength","children","childRuntimeNode","_runtimeNodes","_transformToRoot","clone"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/ModelMatrixUpdateStage.js"],"sourcesContent":["import Matrix4 from \"../../Core/Matrix4.js\";\nimport ModelUtility from \"./ModelUtility.js\";\nimport SceneMode from \"../SceneMode.js\";\n\n/**\n * The model matrix update stage is responsible for updating the model matrices and bounding volumes of the draw commands.\n *\n * @namespace ModelMatrixUpdateStage\n *\n * @private\n */\nconst ModelMatrixUpdateStage = {};\nModelMatrixUpdateStage.name = \"ModelMatrixUpdateStage\"; // Helps with debugging\n\n/**\n * Processes a runtime node. This modifies the following parts of the scene graph and draw commands:\n * <ul>\n *  <li>updates the transforms the children of any nodes with a dirty transform</li>\n *  <li>updates the model matrix of each draw command in each primitive of the the dirty nodes and their children</li>\n *  <li>updates the bounding volume of each draw command in each primitive of the the dirty nodes and their children</li>\n * </ul>\n *\n * @param {ModelRuntimeNode} runtimeNode\n * @param {ModelSceneGraph} sceneGraph\n * @param {FrameState} frameState\n *\n * @private\n */\nModelMatrixUpdateStage.update = function (runtimeNode, sceneGraph, frameState) {\n  // Skip the update stage if the model is being projected to 2D\n  const use2D = frameState.mode !== SceneMode.SCENE3D;\n  if (use2D && sceneGraph._model._projectTo2D) {\n    return;\n  }\n\n  if (runtimeNode._transformDirty) {\n    const modelMatrix = use2D\n      ? sceneGraph._computedModelMatrix2D\n      : sceneGraph._computedModelMatrix;\n\n    updateRuntimeNode(\n      runtimeNode,\n      sceneGraph,\n      modelMatrix,\n      runtimeNode.transformToRoot,\n    );\n    runtimeNode._transformDirty = false;\n  }\n};\n\n/**\n * Update the modelMatrix and cullFrace of the given draw command.\n *\n * @private\n */\nfunction updateDrawCommand(drawCommand, modelMatrix, transformToRoot) {\n  drawCommand.modelMatrix = Matrix4.multiplyTransformation(\n    modelMatrix,\n    transformToRoot,\n    drawCommand.modelMatrix,\n  );\n  drawCommand.cullFace = ModelUtility.getCullFace(\n    drawCommand.modelMatrix,\n    drawCommand.primitiveType,\n  );\n}\n\n/**\n * Recursively update all child runtime nodes and their runtime primitives.\n *\n * @private\n */\nfunction updateRuntimeNode(\n  runtimeNode,\n  sceneGraph,\n  modelMatrix,\n  transformToRoot,\n) {\n  let i;\n\n  // Apply the current node's transform to the end of the chain\n  transformToRoot = Matrix4.multiplyTransformation(\n    transformToRoot,\n    runtimeNode.transform,\n    new Matrix4(),\n  );\n\n  runtimeNode.updateComputedTransform();\n\n  const primitivesLength = runtimeNode.runtimePrimitives.length;\n  for (i = 0; i < primitivesLength; i++) {\n    const runtimePrimitive = runtimeNode.runtimePrimitives[i];\n    updateDrawCommand(\n      runtimePrimitive.drawCommand,\n      modelMatrix,\n      transformToRoot,\n    );\n  }\n\n  const childrenLength = runtimeNode.children.length;\n  for (i = 0; i < childrenLength; i++) {\n    const childRuntimeNode = sceneGraph._runtimeNodes[runtimeNode.children[i]];\n\n    // Update transformToRoot to accommodate changes in the transforms of this node and its ancestors\n    childRuntimeNode._transformToRoot = Matrix4.clone(\n      transformToRoot,\n      childRuntimeNode._transformToRoot,\n    );\n\n    updateRuntimeNode(\n      childRuntimeNode,\n      sceneGraph,\n      modelMatrix,\n      transformToRoot,\n    );\n    childRuntimeNode._transformDirty = false;\n  }\n}\n\nexport default ModelMatrixUpdateStage;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,SAAS,MAAM,iBAAiB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,CAAC,CAAC;AACjCA,sBAAsB,CAACC,IAAI,GAAG,wBAAwB,CAAC,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,sBAAsB,CAACE,MAAM,GAAG,UAAUC,WAAW,EAAEC,UAAU,EAAEC,UAAU,EAAE;EAC7E;EACA,MAAMC,KAAK,GAAGD,UAAU,CAACE,IAAI,KAAKR,SAAS,CAACS,OAAO;EACnD,IAAIF,KAAK,IAAIF,UAAU,CAACK,MAAM,CAACC,YAAY,EAAE;IAC3C;EACF;EAEA,IAAIP,WAAW,CAACQ,eAAe,EAAE;IAC/B,MAAMC,WAAW,GAAGN,KAAK,GACrBF,UAAU,CAACS,sBAAsB,GACjCT,UAAU,CAACU,oBAAoB;IAEnCC,iBAAiB,CACfZ,WAAW,EACXC,UAAU,EACVQ,WAAW,EACXT,WAAW,CAACa,eACd,CAAC;IACDb,WAAW,CAACQ,eAAe,GAAG,KAAK;EACrC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASM,iBAAiBA,CAACC,WAAW,EAAEN,WAAW,EAAEI,eAAe,EAAE;EACpEE,WAAW,CAACN,WAAW,GAAGf,OAAO,CAACsB,sBAAsB,CACtDP,WAAW,EACXI,eAAe,EACfE,WAAW,CAACN,WACd,CAAC;EACDM,WAAW,CAACE,QAAQ,GAAGtB,YAAY,CAACuB,WAAW,CAC7CH,WAAW,CAACN,WAAW,EACvBM,WAAW,CAACI,aACd,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASP,iBAAiBA,CACxBZ,WAAW,EACXC,UAAU,EACVQ,WAAW,EACXI,eAAe,EACf;EACA,IAAIO,CAAC;;EAEL;EACAP,eAAe,GAAGnB,OAAO,CAACsB,sBAAsB,CAC9CH,eAAe,EACfb,WAAW,CAACqB,SAAS,EACrB,IAAI3B,OAAO,CAAC,CACd,CAAC;EAEDM,WAAW,CAACsB,uBAAuB,CAAC,CAAC;EAErC,MAAMC,gBAAgB,GAAGvB,WAAW,CAACwB,iBAAiB,CAACC,MAAM;EAC7D,KAAKL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,gBAAgB,EAAEH,CAAC,EAAE,EAAE;IACrC,MAAMM,gBAAgB,GAAG1B,WAAW,CAACwB,iBAAiB,CAACJ,CAAC,CAAC;IACzDN,iBAAiB,CACfY,gBAAgB,CAACX,WAAW,EAC5BN,WAAW,EACXI,eACF,CAAC;EACH;EAEA,MAAMc,cAAc,GAAG3B,WAAW,CAAC4B,QAAQ,CAACH,MAAM;EAClD,KAAKL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,cAAc,EAAEP,CAAC,EAAE,EAAE;IACnC,MAAMS,gBAAgB,GAAG5B,UAAU,CAAC6B,aAAa,CAAC9B,WAAW,CAAC4B,QAAQ,CAACR,CAAC,CAAC,CAAC;;IAE1E;IACAS,gBAAgB,CAACE,gBAAgB,GAAGrC,OAAO,CAACsC,KAAK,CAC/CnB,eAAe,EACfgB,gBAAgB,CAACE,gBACnB,CAAC;IAEDnB,iBAAiB,CACfiB,gBAAgB,EAChB5B,UAAU,EACVQ,WAAW,EACXI,eACF,CAAC;IACDgB,gBAAgB,CAACrB,eAAe,GAAG,KAAK;EAC1C;AACF;AAEA,eAAeX,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}