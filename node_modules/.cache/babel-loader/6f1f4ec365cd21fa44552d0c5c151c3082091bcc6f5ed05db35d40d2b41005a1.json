{"ast":null,"code":"import Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ion from \"./Ion.js\";\nimport IonGeocodeProviderType from \"./IonGeocodeProviderType.js\";\nimport PeliasGeocoderService from \"./PeliasGeocoderService.js\";\nimport Resource from \"./Resource.js\";\n\n/**\n * @param {*} geocodeProviderType\n * @throws {DeveloperError}\n * @private\n */\nfunction validateIonGeocodeProviderType(geocodeProviderType) {\n  if (!Object.values(IonGeocodeProviderType).some(value => value === geocodeProviderType)) {\n    throw new DeveloperError(`Invalid geocodeProviderType: \"${geocodeProviderType}\"`);\n  }\n}\nconst providerToParameterMap = Object.freeze({\n  [IonGeocodeProviderType.GOOGLE]: \"google\",\n  [IonGeocodeProviderType.BING]: \"bing\",\n  [IonGeocodeProviderType.DEFAULT]: undefined\n});\nfunction providerToQueryParameter(provider) {\n  return providerToParameterMap[provider];\n}\nfunction queryParameterToProvider(parameter) {\n  return Object.entries(providerToParameterMap).find(entry => entry[1] === parameter)[0];\n}\n\n/**\n * Provides geocoding through Cesium ion.\n * @alias IonGeocoderService\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Scene} options.scene The scene\n * @param {string} [options.accessToken=Ion.defaultAccessToken] The access token to use.\n * @param {string|Resource} [options.server=Ion.defaultServer] The resource to the Cesium ion API server.\n * @param {IonGeocodeProviderType} [options.geocodeProviderType=IonGeocodeProviderType.DEFAULT] The geocoder the Cesium ion API server should use to fulfill this request.\n *\n * @see Ion\n */\nfunction IonGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.scene\", options.scene);\n  //>>includeEnd('debug');\n\n  const geocodeProviderType = defaultValue(options.geocodeProviderType, IonGeocodeProviderType.DEFAULT);\n  //>>includeStart('debug', pragmas.debug);\n  validateIonGeocodeProviderType(geocodeProviderType);\n  //>>includeEnd('debug');\n\n  const accessToken = defaultValue(options.accessToken, Ion.defaultAccessToken);\n  const server = Resource.createIfNeeded(defaultValue(options.server, Ion.defaultServer));\n  server.appendForwardSlash();\n  const defaultTokenCredit = Ion.getDefaultTokenCredit(accessToken);\n  if (defined(defaultTokenCredit)) {\n    options.scene.frameState.creditDisplay.addStaticCredit(Credit.clone(defaultTokenCredit));\n  }\n  const searchEndpoint = server.getDerivedResource({\n    url: \"v1/geocode\"\n  });\n  if (defined(accessToken)) {\n    searchEndpoint.appendQueryParameters({\n      access_token: accessToken\n    });\n  }\n  this._accessToken = accessToken;\n  this._server = server;\n  this._pelias = new PeliasGeocoderService(searchEndpoint);\n  // geocoderProviderType isn't stored here directly but instead relies on the\n  // query parameters of this._pelias.url.  Use the setter logic to update value.\n  this.geocodeProviderType = geocodeProviderType;\n}\nObject.defineProperties(IonGeocoderService.prototype, {\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof IonGeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * The geocoding service that Cesium ion API server should use to fulfill geocding requests.\n   * @memberof IonGeocoderService.prototype\n   * @type {IonGeocodeProviderType}\n   * @default IonGeocodeProviderType.DEFAULT\n   */\n  geocodeProviderType: {\n    get: function () {\n      return queryParameterToProvider(this._pelias.url.queryParameters[\"geocoder\"]);\n    },\n    set: function (geocodeProviderType) {\n      validateIonGeocodeProviderType(geocodeProviderType);\n      const query = {\n        ...this._pelias.url.queryParameters,\n        geocoder: providerToQueryParameter(geocodeProviderType)\n      };\n      // Delete the geocoder parameter to prevent sending &geocoder=undefined in the query\n      if (!defined(query.geocoder)) {\n        delete query.geocoder;\n      }\n      this._pelias.url.setQueryParameters(query);\n    }\n  }\n});\n\n/**\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @param {GeocodeType} [type=GeocodeType.SEARCH] The type of geocode to perform.\n * @returns {Promise<GeocoderService.Result[]>}\n */\nIonGeocoderService.prototype.geocode = async function (query, geocodeType) {\n  return this._pelias.geocode(query, geocodeType);\n};\nexport default IonGeocoderService;","map":{"version":3,"names":["Check","Credit","defaultValue","defined","DeveloperError","Ion","IonGeocodeProviderType","PeliasGeocoderService","Resource","validateIonGeocodeProviderType","geocodeProviderType","Object","values","some","value","providerToParameterMap","freeze","GOOGLE","BING","DEFAULT","undefined","providerToQueryParameter","provider","queryParameterToProvider","parameter","entries","find","entry","IonGeocoderService","options","EMPTY_OBJECT","typeOf","object","scene","accessToken","defaultAccessToken","server","createIfNeeded","defaultServer","appendForwardSlash","defaultTokenCredit","getDefaultTokenCredit","frameState","creditDisplay","addStaticCredit","clone","searchEndpoint","getDerivedResource","url","appendQueryParameters","access_token","_accessToken","_server","_pelias","defineProperties","prototype","credit","get","queryParameters","set","query","geocoder","setQueryParameters","geocode","geocodeType"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/IonGeocoderService.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ion from \"./Ion.js\";\nimport IonGeocodeProviderType from \"./IonGeocodeProviderType.js\";\nimport PeliasGeocoderService from \"./PeliasGeocoderService.js\";\nimport Resource from \"./Resource.js\";\n\n/**\n * @param {*} geocodeProviderType\n * @throws {DeveloperError}\n * @private\n */\nfunction validateIonGeocodeProviderType(geocodeProviderType) {\n  if (\n    !Object.values(IonGeocodeProviderType).some(\n      (value) => value === geocodeProviderType,\n    )\n  ) {\n    throw new DeveloperError(\n      `Invalid geocodeProviderType: \"${geocodeProviderType}\"`,\n    );\n  }\n}\n\nconst providerToParameterMap = Object.freeze({\n  [IonGeocodeProviderType.GOOGLE]: \"google\",\n  [IonGeocodeProviderType.BING]: \"bing\",\n  [IonGeocodeProviderType.DEFAULT]: undefined,\n});\n\nfunction providerToQueryParameter(provider) {\n  return providerToParameterMap[provider];\n}\n\nfunction queryParameterToProvider(parameter) {\n  return Object.entries(providerToParameterMap).find(\n    (entry) => entry[1] === parameter,\n  )[0];\n}\n\n/**\n * Provides geocoding through Cesium ion.\n * @alias IonGeocoderService\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Scene} options.scene The scene\n * @param {string} [options.accessToken=Ion.defaultAccessToken] The access token to use.\n * @param {string|Resource} [options.server=Ion.defaultServer] The resource to the Cesium ion API server.\n * @param {IonGeocodeProviderType} [options.geocodeProviderType=IonGeocodeProviderType.DEFAULT] The geocoder the Cesium ion API server should use to fulfill this request.\n *\n * @see Ion\n */\nfunction IonGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.scene\", options.scene);\n  //>>includeEnd('debug');\n\n  const geocodeProviderType = defaultValue(\n    options.geocodeProviderType,\n    IonGeocodeProviderType.DEFAULT,\n  );\n  //>>includeStart('debug', pragmas.debug);\n  validateIonGeocodeProviderType(geocodeProviderType);\n  //>>includeEnd('debug');\n\n  const accessToken = defaultValue(options.accessToken, Ion.defaultAccessToken);\n  const server = Resource.createIfNeeded(\n    defaultValue(options.server, Ion.defaultServer),\n  );\n  server.appendForwardSlash();\n\n  const defaultTokenCredit = Ion.getDefaultTokenCredit(accessToken);\n  if (defined(defaultTokenCredit)) {\n    options.scene.frameState.creditDisplay.addStaticCredit(\n      Credit.clone(defaultTokenCredit),\n    );\n  }\n\n  const searchEndpoint = server.getDerivedResource({\n    url: \"v1/geocode\",\n  });\n\n  if (defined(accessToken)) {\n    searchEndpoint.appendQueryParameters({ access_token: accessToken });\n  }\n\n  this._accessToken = accessToken;\n  this._server = server;\n  this._pelias = new PeliasGeocoderService(searchEndpoint);\n  // geocoderProviderType isn't stored here directly but instead relies on the\n  // query parameters of this._pelias.url.  Use the setter logic to update value.\n  this.geocodeProviderType = geocodeProviderType;\n}\n\nObject.defineProperties(IonGeocoderService.prototype, {\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof IonGeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    },\n  },\n  /**\n   * The geocoding service that Cesium ion API server should use to fulfill geocding requests.\n   * @memberof IonGeocoderService.prototype\n   * @type {IonGeocodeProviderType}\n   * @default IonGeocodeProviderType.DEFAULT\n   */\n  geocodeProviderType: {\n    get: function () {\n      return queryParameterToProvider(\n        this._pelias.url.queryParameters[\"geocoder\"],\n      );\n    },\n    set: function (geocodeProviderType) {\n      validateIonGeocodeProviderType(geocodeProviderType);\n      const query = {\n        ...this._pelias.url.queryParameters,\n        geocoder: providerToQueryParameter(geocodeProviderType),\n      };\n      // Delete the geocoder parameter to prevent sending &geocoder=undefined in the query\n      if (!defined(query.geocoder)) {\n        delete query.geocoder;\n      }\n      this._pelias.url.setQueryParameters(query);\n    },\n  },\n});\n\n/**\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @param {GeocodeType} [type=GeocodeType.SEARCH] The type of geocode to perform.\n * @returns {Promise<GeocoderService.Result[]>}\n */\nIonGeocoderService.prototype.geocode = async function (query, geocodeType) {\n  return this._pelias.geocode(query, geocodeType);\n};\nexport default IonGeocoderService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}