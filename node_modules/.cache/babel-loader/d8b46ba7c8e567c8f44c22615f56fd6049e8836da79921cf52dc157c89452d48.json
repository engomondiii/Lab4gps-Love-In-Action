{"ast":null,"code":"import defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} whose value is an array whose items are the computed value\n * of other property instances.\n *\n * @alias PropertyArray\n * @constructor\n *\n * @param {Property[]} [value] An array of Property instances.\n */\nfunction PropertyArray(value) {\n  this._value = undefined;\n  this._definitionChanged = new Event();\n  this._eventHelper = new EventHelper();\n  this.setValue(value);\n}\nObject.defineProperties(PropertyArray.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in the array are constant.\n   * @memberof PropertyArray.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      const value = this._value;\n      if (!defined(value)) {\n        return true;\n      }\n      const length = value.length;\n      for (let i = 0; i < length; i++) {\n        if (!Property.isConstant(value[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value or one of the properties in the array also changes.\n   * @memberof PropertyArray.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  }\n});\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Object[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object[]} The modified result parameter, which is an array of values produced by evaluating each of the contained properties at the given time or a new instance if the result parameter was not supplied.\n */\nPropertyArray.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  const value = this._value;\n  if (!defined(value)) {\n    return undefined;\n  }\n  const length = value.length;\n  if (!defined(result)) {\n    result = new Array(length);\n  }\n  let i = 0;\n  let x = 0;\n  while (i < length) {\n    const property = this._value[i];\n    const itemValue = property.getValue(time, result[i]);\n    if (defined(itemValue)) {\n      result[x] = itemValue;\n      x++;\n    }\n    i++;\n  }\n  result.length = x;\n  return result;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Property[]} value An array of Property instances.\n */\nPropertyArray.prototype.setValue = function (value) {\n  const eventHelper = this._eventHelper;\n  eventHelper.removeAll();\n  if (defined(value)) {\n    this._value = value.slice();\n    const length = value.length;\n    for (let i = 0; i < length; i++) {\n      const property = value[i];\n      if (defined(property)) {\n        eventHelper.add(property.definitionChanged, PropertyArray.prototype._raiseDefinitionChanged, this);\n      }\n    }\n  } else {\n    this._value = undefined;\n  }\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPropertyArray.prototype.equals = function (other) {\n  return this === other ||\n  //\n  other instanceof PropertyArray &&\n  //\n  Property.arrayEquals(this._value, other._value);\n};\nPropertyArray.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default PropertyArray;","map":{"version":3,"names":["defined","Event","EventHelper","JulianDate","Property","PropertyArray","value","_value","undefined","_definitionChanged","_eventHelper","setValue","Object","defineProperties","prototype","isConstant","get","length","i","definitionChanged","timeScratch","getValue","time","result","now","Array","x","property","itemValue","eventHelper","removeAll","slice","add","_raiseDefinitionChanged","raiseEvent","equals","other","arrayEquals"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/PropertyArray.js"],"sourcesContent":["import defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} whose value is an array whose items are the computed value\n * of other property instances.\n *\n * @alias PropertyArray\n * @constructor\n *\n * @param {Property[]} [value] An array of Property instances.\n */\nfunction PropertyArray(value) {\n  this._value = undefined;\n  this._definitionChanged = new Event();\n  this._eventHelper = new EventHelper();\n  this.setValue(value);\n}\n\nObject.defineProperties(PropertyArray.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in the array are constant.\n   * @memberof PropertyArray.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      const value = this._value;\n      if (!defined(value)) {\n        return true;\n      }\n      const length = value.length;\n      for (let i = 0; i < length; i++) {\n        if (!Property.isConstant(value[i])) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value or one of the properties in the array also changes.\n   * @memberof PropertyArray.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Object[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object[]} The modified result parameter, which is an array of values produced by evaluating each of the contained properties at the given time or a new instance if the result parameter was not supplied.\n */\nPropertyArray.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n\n  const value = this._value;\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  const length = value.length;\n  if (!defined(result)) {\n    result = new Array(length);\n  }\n  let i = 0;\n  let x = 0;\n  while (i < length) {\n    const property = this._value[i];\n    const itemValue = property.getValue(time, result[i]);\n    if (defined(itemValue)) {\n      result[x] = itemValue;\n      x++;\n    }\n    i++;\n  }\n  result.length = x;\n  return result;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Property[]} value An array of Property instances.\n */\nPropertyArray.prototype.setValue = function (value) {\n  const eventHelper = this._eventHelper;\n  eventHelper.removeAll();\n\n  if (defined(value)) {\n    this._value = value.slice();\n    const length = value.length;\n    for (let i = 0; i < length; i++) {\n      const property = value[i];\n      if (defined(property)) {\n        eventHelper.add(\n          property.definitionChanged,\n          PropertyArray.prototype._raiseDefinitionChanged,\n          this,\n        );\n      }\n    }\n  } else {\n    this._value = undefined;\n  }\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPropertyArray.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PropertyArray && //\n      Property.arrayEquals(this._value, other._value))\n  );\n};\n\nPropertyArray.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default PropertyArray;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}