{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport JulianDate from \"./JulianDate.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport TimeConstants from \"./TimeConstants.js\";\nimport TimeStandard from \"./TimeStandard.js\";\n\n/**\n * Contains functions for finding the Cartesian coordinates of the sun and the moon in the\n * Earth-centered inertial frame.\n *\n * @namespace Simon1994PlanetaryPositions\n */\nconst Simon1994PlanetaryPositions = {};\nfunction computeTdbMinusTtSpice(daysSinceJ2000InTerrestrialTime) {\n  /* STK Comments ------------------------------------------------------\n   * This function uses constants designed to be consistent with\n   * the SPICE Toolkit from JPL version N0051 (unitim.c)\n   * M0 = 6.239996\n   * M0Dot = 1.99096871e-7 rad/s = 0.01720197 rad/d\n   * EARTH_ECC = 1.671e-2\n   * TDB_AMPL = 1.657e-3 secs\n   *--------------------------------------------------------------------*/\n\n  //* Values taken as specified in STK Comments except: 0.01720197 rad/day = 1.99096871e-7 rad/sec\n  //* Here we use the more precise value taken from the SPICE value 1.99096871e-7 rad/sec converted to rad/day\n  //* All other constants are consistent with the SPICE implementation of the TDB conversion\n  //* except where we treat the independent time parameter to be in TT instead of TDB.\n  //* This is an approximation made to facilitate performance due to the higher prevalance of\n  //* the TT2TDB conversion over TDB2TT in order to avoid having to iterate when converting to TDB for the JPL ephemeris.\n  //* Days are used instead of seconds to provide a slight improvement in numerical precision.\n\n  //* For more information see:\n  //* http://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\n  //* ftp://ssd.jpl.nasa.gov/pub/eph/planets/ioms/ExplSupplChap8.pdf\n\n  const g = 6.239996 + 0.0172019696544 * daysSinceJ2000InTerrestrialTime;\n  return 1.657e-3 * Math.sin(g + 1.671e-2 * Math.sin(g));\n}\nconst TdtMinusTai = 32.184;\nconst J2000d = 2451545;\nfunction taiToTdb(date, result) {\n  //Converts TAI to TT\n  result = JulianDate.addSeconds(date, TdtMinusTai, result);\n\n  //Converts TT to TDB\n  const days = JulianDate.totalDays(result) - J2000d;\n  result = JulianDate.addSeconds(result, computeTdbMinusTtSpice(days), result);\n  return result;\n}\nconst epoch = new JulianDate(2451545, 0, TimeStandard.TAI); //Actually TDB (not TAI)\nconst MetersPerKilometer = 1000.0;\nconst RadiansPerDegree = CesiumMath.RADIANS_PER_DEGREE;\nconst RadiansPerArcSecond = CesiumMath.RADIANS_PER_ARCSECOND;\nconst MetersPerAstronomicalUnit = 1.4959787e11; // IAU 1976 value\n\nconst perifocalToEquatorial = new Matrix3();\nfunction elementsToCartesian(semimajorAxis, eccentricity, inclination, longitudeOfPerigee, longitudeOfNode, meanLongitude, result) {\n  if (inclination < 0.0) {\n    inclination = -inclination;\n    longitudeOfNode += CesiumMath.PI;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (inclination < 0 || inclination > CesiumMath.PI) {\n    throw new DeveloperError(\"The inclination is out of range. Inclination must be greater than or equal to zero and less than or equal to Pi radians.\");\n  }\n  //>>includeEnd('debug')\n\n  const radiusOfPeriapsis = semimajorAxis * (1.0 - eccentricity);\n  const argumentOfPeriapsis = longitudeOfPerigee - longitudeOfNode;\n  const rightAscensionOfAscendingNode = longitudeOfNode;\n  const trueAnomaly = meanAnomalyToTrueAnomaly(meanLongitude - longitudeOfPerigee, eccentricity);\n  const type = chooseOrbit(eccentricity, 0.0);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (type === \"Hyperbolic\" && Math.abs(CesiumMath.negativePiToPi(trueAnomaly)) >= Math.acos(-1.0 / eccentricity)) {\n    throw new DeveloperError(\"The true anomaly of the hyperbolic orbit lies outside of the bounds of the hyperbola.\");\n  }\n  //>>includeEnd('debug')\n\n  perifocalToCartesianMatrix(argumentOfPeriapsis, inclination, rightAscensionOfAscendingNode, perifocalToEquatorial);\n  const semilatus = radiusOfPeriapsis * (1.0 + eccentricity);\n  const costheta = Math.cos(trueAnomaly);\n  const sintheta = Math.sin(trueAnomaly);\n  const denom = 1.0 + eccentricity * costheta;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (denom <= CesiumMath.Epsilon10) {\n    throw new DeveloperError(\"elements cannot be converted to cartesian\");\n  }\n  //>>includeEnd('debug')\n\n  const radius = semilatus / denom;\n  if (!defined(result)) {\n    result = new Cartesian3(radius * costheta, radius * sintheta, 0.0);\n  } else {\n    result.x = radius * costheta;\n    result.y = radius * sintheta;\n    result.z = 0.0;\n  }\n  return Matrix3.multiplyByVector(perifocalToEquatorial, result, result);\n}\nfunction chooseOrbit(eccentricity, tolerance) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0) {\n    throw new DeveloperError(\"eccentricity cannot be negative.\");\n  }\n  //>>includeEnd('debug')\n\n  if (eccentricity <= tolerance) {\n    return \"Circular\";\n  } else if (eccentricity < 1.0 - tolerance) {\n    return \"Elliptical\";\n  } else if (eccentricity <= 1.0 + tolerance) {\n    return \"Parabolic\";\n  }\n  return \"Hyperbolic\";\n}\n\n// Calculates the true anomaly given the mean anomaly and the eccentricity.\nfunction meanAnomalyToTrueAnomaly(meanAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  }\n  //>>includeEnd('debug')\n\n  const eccentricAnomaly = meanAnomalyToEccentricAnomaly(meanAnomaly, eccentricity);\n  return eccentricAnomalyToTrueAnomaly(eccentricAnomaly, eccentricity);\n}\nconst maxIterationCount = 50;\nconst keplerEqConvergence = CesiumMath.EPSILON8;\n// Calculates the eccentric anomaly given the mean anomaly and the eccentricity.\nfunction meanAnomalyToEccentricAnomaly(meanAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  }\n  //>>includeEnd('debug')\n\n  const revs = Math.floor(meanAnomaly / CesiumMath.TWO_PI);\n\n  // Find angle in current revolution\n  meanAnomaly -= revs * CesiumMath.TWO_PI;\n\n  // calculate starting value for iteration sequence\n  let iterationValue = meanAnomaly + eccentricity * Math.sin(meanAnomaly) / (1.0 - Math.sin(meanAnomaly + eccentricity) + Math.sin(meanAnomaly));\n\n  // Perform Newton-Raphson iteration on Kepler's equation\n  let eccentricAnomaly = Number.MAX_VALUE;\n  let count;\n  for (count = 0; count < maxIterationCount && Math.abs(eccentricAnomaly - iterationValue) > keplerEqConvergence; ++count) {\n    eccentricAnomaly = iterationValue;\n    const NRfunction = eccentricAnomaly - eccentricity * Math.sin(eccentricAnomaly) - meanAnomaly;\n    const dNRfunction = 1 - eccentricity * Math.cos(eccentricAnomaly);\n    iterationValue = eccentricAnomaly - NRfunction / dNRfunction;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (count >= maxIterationCount) {\n    throw new DeveloperError(\"Kepler equation did not converge\");\n    // STK Components uses a numerical method to find the eccentric anomaly in the case that Kepler's\n    // equation does not converge. We don't expect that to ever be necessary for the reasonable orbits used here.\n  }\n  //>>includeEnd('debug')\n\n  eccentricAnomaly = iterationValue + revs * CesiumMath.TWO_PI;\n  return eccentricAnomaly;\n}\n\n// Calculates the true anomaly given the eccentric anomaly and the eccentricity.\nfunction eccentricAnomalyToTrueAnomaly(eccentricAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  }\n  //>>includeEnd('debug')\n\n  // Calculate the number of previous revolutions\n  const revs = Math.floor(eccentricAnomaly / CesiumMath.TWO_PI);\n\n  // Find angle in current revolution\n  eccentricAnomaly -= revs * CesiumMath.TWO_PI;\n\n  // Calculate true anomaly from eccentric anomaly\n  const trueAnomalyX = Math.cos(eccentricAnomaly) - eccentricity;\n  const trueAnomalyY = Math.sin(eccentricAnomaly) * Math.sqrt(1 - eccentricity * eccentricity);\n  let trueAnomaly = Math.atan2(trueAnomalyY, trueAnomalyX);\n\n  // Ensure the correct quadrant\n  trueAnomaly = CesiumMath.zeroToTwoPi(trueAnomaly);\n  if (eccentricAnomaly < 0) {\n    trueAnomaly -= CesiumMath.TWO_PI;\n  }\n\n  // Add on previous revolutions\n  trueAnomaly += revs * CesiumMath.TWO_PI;\n  return trueAnomaly;\n}\n\n// Calculates the transformation matrix to convert from the perifocal (PQW) coordinate\n// system to inertial cartesian coordinates.\nfunction perifocalToCartesianMatrix(argumentOfPeriapsis, inclination, rightAscension, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (inclination < 0 || inclination > CesiumMath.PI) {\n    throw new DeveloperError(\"inclination out of range\");\n  }\n  //>>includeEnd('debug')\n\n  const cosap = Math.cos(argumentOfPeriapsis);\n  const sinap = Math.sin(argumentOfPeriapsis);\n  const cosi = Math.cos(inclination);\n  const sini = Math.sin(inclination);\n  const cosraan = Math.cos(rightAscension);\n  const sinraan = Math.sin(rightAscension);\n  if (!defined(result)) {\n    result = new Matrix3(cosraan * cosap - sinraan * sinap * cosi, -cosraan * sinap - sinraan * cosap * cosi, sinraan * sini, sinraan * cosap + cosraan * sinap * cosi, -sinraan * sinap + cosraan * cosap * cosi, -cosraan * sini, sinap * sini, cosap * sini, cosi);\n  } else {\n    result[0] = cosraan * cosap - sinraan * sinap * cosi;\n    result[1] = sinraan * cosap + cosraan * sinap * cosi;\n    result[2] = sinap * sini;\n    result[3] = -cosraan * sinap - sinraan * cosap * cosi;\n    result[4] = -sinraan * sinap + cosraan * cosap * cosi;\n    result[5] = cosap * sini;\n    result[6] = sinraan * sini;\n    result[7] = -cosraan * sini;\n    result[8] = cosi;\n  }\n  return result;\n}\n\n// From section 5.8\nconst semiMajorAxis0 = 1.0000010178 * MetersPerAstronomicalUnit;\nconst meanLongitude0 = 100.46645683 * RadiansPerDegree;\nconst meanLongitude1 = 1295977422.83429 * RadiansPerArcSecond;\n\n// From table 6\nconst p1u = 16002;\nconst p2u = 21863;\nconst p3u = 32004;\nconst p4u = 10931;\nconst p5u = 14529;\nconst p6u = 16368;\nconst p7u = 15318;\nconst p8u = 32794;\nconst Ca1 = 64 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca2 = -152 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca3 = 62 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca4 = -8 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca5 = 32 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca6 = -41 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca7 = 19 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca8 = -11 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa1 = -150 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa2 = -46 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa3 = 68 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa4 = 54 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa5 = 14 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa6 = 24 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa7 = -28 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa8 = 22 * 1e-7 * MetersPerAstronomicalUnit;\nconst q1u = 10;\nconst q2u = 16002;\nconst q3u = 21863;\nconst q4u = 10931;\nconst q5u = 1473;\nconst q6u = 32004;\nconst q7u = 4387;\nconst q8u = 73;\nconst Cl1 = -325 * 1e-7;\nconst Cl2 = -322 * 1e-7;\nconst Cl3 = -79 * 1e-7;\nconst Cl4 = 232 * 1e-7;\nconst Cl5 = -52 * 1e-7;\nconst Cl6 = 97 * 1e-7;\nconst Cl7 = 55 * 1e-7;\nconst Cl8 = -41 * 1e-7;\nconst Sl1 = -105 * 1e-7;\nconst Sl2 = -137 * 1e-7;\nconst Sl3 = 258 * 1e-7;\nconst Sl4 = 35 * 1e-7;\nconst Sl5 = -116 * 1e-7;\nconst Sl6 = -88 * 1e-7;\nconst Sl7 = -112 * 1e-7;\nconst Sl8 = -80 * 1e-7;\nconst scratchDate = new JulianDate(0, 0.0, TimeStandard.TAI);\n// Gets a point describing the motion of the Earth-Moon barycenter according to the equations described in section 6.\nfunction computeSimonEarthMoonBarycenter(date, result) {\n  // t is thousands of years from J2000 TDB\n  taiToTdb(date, scratchDate);\n  const x = scratchDate.dayNumber - epoch.dayNumber + (scratchDate.secondsOfDay - epoch.secondsOfDay) / TimeConstants.SECONDS_PER_DAY;\n  const t = x / (TimeConstants.DAYS_PER_JULIAN_CENTURY * 10.0);\n  const u = 0.3595362 * t;\n  const semimajorAxis = semiMajorAxis0 + Ca1 * Math.cos(p1u * u) + Sa1 * Math.sin(p1u * u) + Ca2 * Math.cos(p2u * u) + Sa2 * Math.sin(p2u * u) + Ca3 * Math.cos(p3u * u) + Sa3 * Math.sin(p3u * u) + Ca4 * Math.cos(p4u * u) + Sa4 * Math.sin(p4u * u) + Ca5 * Math.cos(p5u * u) + Sa5 * Math.sin(p5u * u) + Ca6 * Math.cos(p6u * u) + Sa6 * Math.sin(p6u * u) + Ca7 * Math.cos(p7u * u) + Sa7 * Math.sin(p7u * u) + Ca8 * Math.cos(p8u * u) + Sa8 * Math.sin(p8u * u);\n  const meanLongitude = meanLongitude0 + meanLongitude1 * t + Cl1 * Math.cos(q1u * u) + Sl1 * Math.sin(q1u * u) + Cl2 * Math.cos(q2u * u) + Sl2 * Math.sin(q2u * u) + Cl3 * Math.cos(q3u * u) + Sl3 * Math.sin(q3u * u) + Cl4 * Math.cos(q4u * u) + Sl4 * Math.sin(q4u * u) + Cl5 * Math.cos(q5u * u) + Sl5 * Math.sin(q5u * u) + Cl6 * Math.cos(q6u * u) + Sl6 * Math.sin(q6u * u) + Cl7 * Math.cos(q7u * u) + Sl7 * Math.sin(q7u * u) + Cl8 * Math.cos(q8u * u) + Sl8 * Math.sin(q8u * u);\n\n  // All constants in this part are from section 5.8\n  const eccentricity = 0.0167086342 - 0.0004203654 * t;\n  const longitudeOfPerigee = 102.93734808 * RadiansPerDegree + 11612.3529 * RadiansPerArcSecond * t;\n  const inclination = 469.97289 * RadiansPerArcSecond * t;\n  const longitudeOfNode = 174.87317577 * RadiansPerDegree - 8679.27034 * RadiansPerArcSecond * t;\n  return elementsToCartesian(semimajorAxis, eccentricity, inclination, longitudeOfPerigee, longitudeOfNode, meanLongitude, result);\n}\n\n// Gets a point describing the position of the moon according to the equations described in section 4.\nfunction computeSimonMoon(date, result) {\n  taiToTdb(date, scratchDate);\n  const x = scratchDate.dayNumber - epoch.dayNumber + (scratchDate.secondsOfDay - epoch.secondsOfDay) / TimeConstants.SECONDS_PER_DAY;\n  const t = x / TimeConstants.DAYS_PER_JULIAN_CENTURY;\n  const t2 = t * t;\n  const t3 = t2 * t;\n  const t4 = t3 * t;\n\n  // Terms from section 3.4 (b.1)\n  let semimajorAxis = 383397.7725 + 0.004 * t;\n  let eccentricity = 0.055545526 - 0.000000016 * t;\n  const inclinationConstant = 5.15668983 * RadiansPerDegree;\n  let inclinationSecPart = -0.00008 * t + 0.02966 * t2 - 0.000042 * t3 - 0.00000013 * t4;\n  const longitudeOfPerigeeConstant = 83.35324312 * RadiansPerDegree;\n  let longitudeOfPerigeeSecPart = 14643420.2669 * t - 38.2702 * t2 - 0.045047 * t3 + 0.00021301 * t4;\n  const longitudeOfNodeConstant = 125.04455501 * RadiansPerDegree;\n  let longitudeOfNodeSecPart = -6967919.3631 * t + 6.3602 * t2 + 0.007625 * t3 - 0.00003586 * t4;\n  const meanLongitudeConstant = 218.31664563 * RadiansPerDegree;\n  let meanLongitudeSecPart = 1732559343.4847 * t - 6.391 * t2 + 0.006588 * t3 - 0.00003169 * t4;\n\n  // Delaunay arguments from section 3.5 b\n  const D = 297.85019547 * RadiansPerDegree + RadiansPerArcSecond * (1602961601.209 * t - 6.3706 * t2 + 0.006593 * t3 - 0.00003169 * t4);\n  const F = 93.27209062 * RadiansPerDegree + RadiansPerArcSecond * (1739527262.8478 * t - 12.7512 * t2 - 0.001037 * t3 + 0.00000417 * t4);\n  const l = 134.96340251 * RadiansPerDegree + RadiansPerArcSecond * (1717915923.2178 * t + 31.8792 * t2 + 0.051635 * t3 - 0.0002447 * t4);\n  const lprime = 357.52910918 * RadiansPerDegree + RadiansPerArcSecond * (129596581.0481 * t - 0.5532 * t2 + 0.000136 * t3 - 0.00001149 * t4);\n  const psi = 310.17137918 * RadiansPerDegree - RadiansPerArcSecond * (6967051.436 * t + 6.2068 * t2 + 0.007618 * t3 - 0.00003219 * t4);\n\n  // Add terms from Table 4\n  const twoD = 2.0 * D;\n  const fourD = 4.0 * D;\n  const sixD = 6.0 * D;\n  const twol = 2.0 * l;\n  const threel = 3.0 * l;\n  const fourl = 4.0 * l;\n  const twoF = 2.0 * F;\n  semimajorAxis += 3400.4 * Math.cos(twoD) - 635.6 * Math.cos(twoD - l) - 235.6 * Math.cos(l) + 218.1 * Math.cos(twoD - lprime) + 181.0 * Math.cos(twoD + l);\n  eccentricity += 0.014216 * Math.cos(twoD - l) + 0.008551 * Math.cos(twoD - twol) - 0.001383 * Math.cos(l) + 0.001356 * Math.cos(twoD + l) - 0.001147 * Math.cos(fourD - threel) - 0.000914 * Math.cos(fourD - twol) + 0.000869 * Math.cos(twoD - lprime - l) - 0.000627 * Math.cos(twoD) - 0.000394 * Math.cos(fourD - fourl) + 0.000282 * Math.cos(twoD - lprime - twol) - 0.000279 * Math.cos(D - l) - 0.000236 * Math.cos(twol) + 0.000231 * Math.cos(fourD) + 0.000229 * Math.cos(sixD - fourl) - 0.000201 * Math.cos(twol - twoF);\n  inclinationSecPart += 486.26 * Math.cos(twoD - twoF) - 40.13 * Math.cos(twoD) + 37.51 * Math.cos(twoF) + 25.73 * Math.cos(twol - twoF) + 19.97 * Math.cos(twoD - lprime - twoF);\n  longitudeOfPerigeeSecPart += -55609 * Math.sin(twoD - l) - 34711 * Math.sin(twoD - twol) - 9792 * Math.sin(l) + 9385 * Math.sin(fourD - threel) + 7505 * Math.sin(fourD - twol) + 5318 * Math.sin(twoD + l) + 3484 * Math.sin(fourD - fourl) - 3417 * Math.sin(twoD - lprime - l) - 2530 * Math.sin(sixD - fourl) - 2376 * Math.sin(twoD) - 2075 * Math.sin(twoD - threel) - 1883 * Math.sin(twol) - 1736 * Math.sin(sixD - 5.0 * l) + 1626 * Math.sin(lprime) - 1370 * Math.sin(sixD - threel);\n  longitudeOfNodeSecPart += -5392 * Math.sin(twoD - twoF) - 540 * Math.sin(lprime) - 441 * Math.sin(twoD) + 423 * Math.sin(twoF) - 288 * Math.sin(twol - twoF);\n  meanLongitudeSecPart += -3332.9 * Math.sin(twoD) + 1197.4 * Math.sin(twoD - l) - 662.5 * Math.sin(lprime) + 396.3 * Math.sin(l) - 218.0 * Math.sin(twoD - lprime);\n\n  // Add terms from Table 5\n  const twoPsi = 2.0 * psi;\n  const threePsi = 3.0 * psi;\n  inclinationSecPart += 46.997 * Math.cos(psi) * t - 0.614 * Math.cos(twoD - twoF + psi) * t + 0.614 * Math.cos(twoD - twoF - psi) * t - 0.0297 * Math.cos(twoPsi) * t2 - 0.0335 * Math.cos(psi) * t2 + 0.0012 * Math.cos(twoD - twoF + twoPsi) * t2 - 0.00016 * Math.cos(psi) * t3 + 0.00004 * Math.cos(threePsi) * t3 + 0.00004 * Math.cos(twoPsi) * t3;\n  const perigeeAndMean = 2.116 * Math.sin(psi) * t - 0.111 * Math.sin(twoD - twoF - psi) * t - 0.0015 * Math.sin(psi) * t2;\n  longitudeOfPerigeeSecPart += perigeeAndMean;\n  meanLongitudeSecPart += perigeeAndMean;\n  longitudeOfNodeSecPart += -520.77 * Math.sin(psi) * t + 13.66 * Math.sin(twoD - twoF + psi) * t + 1.12 * Math.sin(twoD - psi) * t - 1.06 * Math.sin(twoF - psi) * t + 0.66 * Math.sin(twoPsi) * t2 + 0.371 * Math.sin(psi) * t2 - 0.035 * Math.sin(twoD - twoF + twoPsi) * t2 - 0.015 * Math.sin(twoD - twoF + psi) * t2 + 0.0014 * Math.sin(psi) * t3 - 0.0011 * Math.sin(threePsi) * t3 - 0.0009 * Math.sin(twoPsi) * t3;\n\n  // Add constants and convert units\n  semimajorAxis *= MetersPerKilometer;\n  const inclination = inclinationConstant + inclinationSecPart * RadiansPerArcSecond;\n  const longitudeOfPerigee = longitudeOfPerigeeConstant + longitudeOfPerigeeSecPart * RadiansPerArcSecond;\n  const meanLongitude = meanLongitudeConstant + meanLongitudeSecPart * RadiansPerArcSecond;\n  const longitudeOfNode = longitudeOfNodeConstant + longitudeOfNodeSecPart * RadiansPerArcSecond;\n  return elementsToCartesian(semimajorAxis, eccentricity, inclination, longitudeOfPerigee, longitudeOfNode, meanLongitude, result);\n}\n\n// Gets a point describing the motion of the Earth.  This point uses the Moon point and\n// the 1992 mu value (ratio between Moon and Earth masses) in Table 2 of the paper in order\n// to determine the position of the Earth relative to the Earth-Moon barycenter.\nconst moonEarthMassRatio = 0.012300034; // From 1992 mu value in Table 2\nconst factor = moonEarthMassRatio / (moonEarthMassRatio + 1.0) * -1;\nfunction computeSimonEarth(date, result) {\n  result = computeSimonMoon(date, result);\n  return Cartesian3.multiplyByScalar(result, factor, result);\n}\n\n// Values for the <code>axesTransformation</code> needed for the rotation were found using the STK Components\n// GeographicTransformer on the position of the sun center of mass point and the earth J2000 frame.\n\nconst axesTransformation = new Matrix3(1.0000000000000002, 5.619723173785822e-16, 4.690511510146299e-19, -5.154129427414611e-16, 0.9174820620691819, -0.39777715593191376, -2.23970096136568e-16, 0.39777715593191376, 0.9174820620691819);\nlet translation = new Cartesian3();\n\n/**\n * Computes the position of the Sun in the Earth-centered inertial frame\n *\n * @param {JulianDate} [julianDate] The time at which to compute the Sun's position, if not provided the current system time is used.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} Calculated sun position\n */\nSimon1994PlanetaryPositions.computeSunPositionInEarthInertialFrame = function (julianDate, result) {\n  if (!defined(julianDate)) {\n    julianDate = JulianDate.now();\n  }\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  //first forward transformation\n  translation = computeSimonEarthMoonBarycenter(julianDate, translation);\n  result = Cartesian3.negate(translation, result);\n\n  //second forward transformation\n  computeSimonEarth(julianDate, translation);\n  Cartesian3.subtract(result, translation, result);\n  Matrix3.multiplyByVector(axesTransformation, result, result);\n  return result;\n};\n\n/**\n * Computes the position of the Moon in the Earth-centered inertial frame\n *\n * @param {JulianDate} [julianDate] The time at which to compute the Moon's position, if not provided the current system time is used.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} Calculated moon position\n */\nSimon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame = function (julianDate, result) {\n  if (!defined(julianDate)) {\n    julianDate = JulianDate.now();\n  }\n  result = computeSimonMoon(julianDate, result);\n  Matrix3.multiplyByVector(axesTransformation, result, result);\n  return result;\n};\nexport default Simon1994PlanetaryPositions;","map":{"version":3,"names":["Cartesian3","defined","DeveloperError","JulianDate","CesiumMath","Matrix3","TimeConstants","TimeStandard","Simon1994PlanetaryPositions","computeTdbMinusTtSpice","daysSinceJ2000InTerrestrialTime","g","Math","sin","TdtMinusTai","J2000d","taiToTdb","date","result","addSeconds","days","totalDays","epoch","TAI","MetersPerKilometer","RadiansPerDegree","RADIANS_PER_DEGREE","RadiansPerArcSecond","RADIANS_PER_ARCSECOND","MetersPerAstronomicalUnit","perifocalToEquatorial","elementsToCartesian","semimajorAxis","eccentricity","inclination","longitudeOfPerigee","longitudeOfNode","meanLongitude","PI","radiusOfPeriapsis","argumentOfPeriapsis","rightAscensionOfAscendingNode","trueAnomaly","meanAnomalyToTrueAnomaly","type","chooseOrbit","abs","negativePiToPi","acos","perifocalToCartesianMatrix","semilatus","costheta","cos","sintheta","denom","Epsilon10","radius","x","y","z","multiplyByVector","tolerance","meanAnomaly","eccentricAnomaly","meanAnomalyToEccentricAnomaly","eccentricAnomalyToTrueAnomaly","maxIterationCount","keplerEqConvergence","EPSILON8","revs","floor","TWO_PI","iterationValue","Number","MAX_VALUE","count","NRfunction","dNRfunction","trueAnomalyX","trueAnomalyY","sqrt","atan2","zeroToTwoPi","rightAscension","cosap","sinap","cosi","sini","cosraan","sinraan","semiMajorAxis0","meanLongitude0","meanLongitude1","p1u","p2u","p3u","p4u","p5u","p6u","p7u","p8u","Ca1","Ca2","Ca3","Ca4","Ca5","Ca6","Ca7","Ca8","Sa1","Sa2","Sa3","Sa4","Sa5","Sa6","Sa7","Sa8","q1u","q2u","q3u","q4u","q5u","q6u","q7u","q8u","Cl1","Cl2","Cl3","Cl4","Cl5","Cl6","Cl7","Cl8","Sl1","Sl2","Sl3","Sl4","Sl5","Sl6","Sl7","Sl8","scratchDate","computeSimonEarthMoonBarycenter","dayNumber","secondsOfDay","SECONDS_PER_DAY","t","DAYS_PER_JULIAN_CENTURY","u","computeSimonMoon","t2","t3","t4","inclinationConstant","inclinationSecPart","longitudeOfPerigeeConstant","longitudeOfPerigeeSecPart","longitudeOfNodeConstant","longitudeOfNodeSecPart","meanLongitudeConstant","meanLongitudeSecPart","D","F","l","lprime","psi","twoD","fourD","sixD","twol","threel","fourl","twoF","twoPsi","threePsi","perigeeAndMean","moonEarthMassRatio","factor","computeSimonEarth","multiplyByScalar","axesTransformation","translation","computeSunPositionInEarthInertialFrame","julianDate","now","negate","subtract","computeMoonPositionInEarthInertialFrame"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/Simon1994PlanetaryPositions.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport JulianDate from \"./JulianDate.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport TimeConstants from \"./TimeConstants.js\";\nimport TimeStandard from \"./TimeStandard.js\";\n\n/**\n * Contains functions for finding the Cartesian coordinates of the sun and the moon in the\n * Earth-centered inertial frame.\n *\n * @namespace Simon1994PlanetaryPositions\n */\nconst Simon1994PlanetaryPositions = {};\n\nfunction computeTdbMinusTtSpice(daysSinceJ2000InTerrestrialTime) {\n  /* STK Comments ------------------------------------------------------\n   * This function uses constants designed to be consistent with\n   * the SPICE Toolkit from JPL version N0051 (unitim.c)\n   * M0 = 6.239996\n   * M0Dot = 1.99096871e-7 rad/s = 0.01720197 rad/d\n   * EARTH_ECC = 1.671e-2\n   * TDB_AMPL = 1.657e-3 secs\n   *--------------------------------------------------------------------*/\n\n  //* Values taken as specified in STK Comments except: 0.01720197 rad/day = 1.99096871e-7 rad/sec\n  //* Here we use the more precise value taken from the SPICE value 1.99096871e-7 rad/sec converted to rad/day\n  //* All other constants are consistent with the SPICE implementation of the TDB conversion\n  //* except where we treat the independent time parameter to be in TT instead of TDB.\n  //* This is an approximation made to facilitate performance due to the higher prevalance of\n  //* the TT2TDB conversion over TDB2TT in order to avoid having to iterate when converting to TDB for the JPL ephemeris.\n  //* Days are used instead of seconds to provide a slight improvement in numerical precision.\n\n  //* For more information see:\n  //* http://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\n  //* ftp://ssd.jpl.nasa.gov/pub/eph/planets/ioms/ExplSupplChap8.pdf\n\n  const g = 6.239996 + 0.0172019696544 * daysSinceJ2000InTerrestrialTime;\n  return 1.657e-3 * Math.sin(g + 1.671e-2 * Math.sin(g));\n}\n\nconst TdtMinusTai = 32.184;\nconst J2000d = 2451545;\nfunction taiToTdb(date, result) {\n  //Converts TAI to TT\n  result = JulianDate.addSeconds(date, TdtMinusTai, result);\n\n  //Converts TT to TDB\n  const days = JulianDate.totalDays(result) - J2000d;\n  result = JulianDate.addSeconds(result, computeTdbMinusTtSpice(days), result);\n\n  return result;\n}\n\nconst epoch = new JulianDate(2451545, 0, TimeStandard.TAI); //Actually TDB (not TAI)\nconst MetersPerKilometer = 1000.0;\nconst RadiansPerDegree = CesiumMath.RADIANS_PER_DEGREE;\nconst RadiansPerArcSecond = CesiumMath.RADIANS_PER_ARCSECOND;\nconst MetersPerAstronomicalUnit = 1.4959787e11; // IAU 1976 value\n\nconst perifocalToEquatorial = new Matrix3();\nfunction elementsToCartesian(\n  semimajorAxis,\n  eccentricity,\n  inclination,\n  longitudeOfPerigee,\n  longitudeOfNode,\n  meanLongitude,\n  result,\n) {\n  if (inclination < 0.0) {\n    inclination = -inclination;\n    longitudeOfNode += CesiumMath.PI;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (inclination < 0 || inclination > CesiumMath.PI) {\n    throw new DeveloperError(\n      \"The inclination is out of range. Inclination must be greater than or equal to zero and less than or equal to Pi radians.\",\n    );\n  }\n  //>>includeEnd('debug')\n\n  const radiusOfPeriapsis = semimajorAxis * (1.0 - eccentricity);\n  const argumentOfPeriapsis = longitudeOfPerigee - longitudeOfNode;\n  const rightAscensionOfAscendingNode = longitudeOfNode;\n  const trueAnomaly = meanAnomalyToTrueAnomaly(\n    meanLongitude - longitudeOfPerigee,\n    eccentricity,\n  );\n  const type = chooseOrbit(eccentricity, 0.0);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    type === \"Hyperbolic\" &&\n    Math.abs(CesiumMath.negativePiToPi(trueAnomaly)) >=\n      Math.acos(-1.0 / eccentricity)\n  ) {\n    throw new DeveloperError(\n      \"The true anomaly of the hyperbolic orbit lies outside of the bounds of the hyperbola.\",\n    );\n  }\n  //>>includeEnd('debug')\n\n  perifocalToCartesianMatrix(\n    argumentOfPeriapsis,\n    inclination,\n    rightAscensionOfAscendingNode,\n    perifocalToEquatorial,\n  );\n  const semilatus = radiusOfPeriapsis * (1.0 + eccentricity);\n  const costheta = Math.cos(trueAnomaly);\n  const sintheta = Math.sin(trueAnomaly);\n\n  const denom = 1.0 + eccentricity * costheta;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (denom <= CesiumMath.Epsilon10) {\n    throw new DeveloperError(\"elements cannot be converted to cartesian\");\n  }\n  //>>includeEnd('debug')\n\n  const radius = semilatus / denom;\n  if (!defined(result)) {\n    result = new Cartesian3(radius * costheta, radius * sintheta, 0.0);\n  } else {\n    result.x = radius * costheta;\n    result.y = radius * sintheta;\n    result.z = 0.0;\n  }\n\n  return Matrix3.multiplyByVector(perifocalToEquatorial, result, result);\n}\n\nfunction chooseOrbit(eccentricity, tolerance) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0) {\n    throw new DeveloperError(\"eccentricity cannot be negative.\");\n  }\n  //>>includeEnd('debug')\n\n  if (eccentricity <= tolerance) {\n    return \"Circular\";\n  } else if (eccentricity < 1.0 - tolerance) {\n    return \"Elliptical\";\n  } else if (eccentricity <= 1.0 + tolerance) {\n    return \"Parabolic\";\n  }\n  return \"Hyperbolic\";\n}\n\n// Calculates the true anomaly given the mean anomaly and the eccentricity.\nfunction meanAnomalyToTrueAnomaly(meanAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  }\n  //>>includeEnd('debug')\n\n  const eccentricAnomaly = meanAnomalyToEccentricAnomaly(\n    meanAnomaly,\n    eccentricity,\n  );\n  return eccentricAnomalyToTrueAnomaly(eccentricAnomaly, eccentricity);\n}\n\nconst maxIterationCount = 50;\nconst keplerEqConvergence = CesiumMath.EPSILON8;\n// Calculates the eccentric anomaly given the mean anomaly and the eccentricity.\nfunction meanAnomalyToEccentricAnomaly(meanAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  }\n  //>>includeEnd('debug')\n\n  const revs = Math.floor(meanAnomaly / CesiumMath.TWO_PI);\n\n  // Find angle in current revolution\n  meanAnomaly -= revs * CesiumMath.TWO_PI;\n\n  // calculate starting value for iteration sequence\n  let iterationValue =\n    meanAnomaly +\n    (eccentricity * Math.sin(meanAnomaly)) /\n      (1.0 - Math.sin(meanAnomaly + eccentricity) + Math.sin(meanAnomaly));\n\n  // Perform Newton-Raphson iteration on Kepler's equation\n  let eccentricAnomaly = Number.MAX_VALUE;\n\n  let count;\n  for (\n    count = 0;\n    count < maxIterationCount &&\n    Math.abs(eccentricAnomaly - iterationValue) > keplerEqConvergence;\n    ++count\n  ) {\n    eccentricAnomaly = iterationValue;\n    const NRfunction =\n      eccentricAnomaly -\n      eccentricity * Math.sin(eccentricAnomaly) -\n      meanAnomaly;\n    const dNRfunction = 1 - eccentricity * Math.cos(eccentricAnomaly);\n    iterationValue = eccentricAnomaly - NRfunction / dNRfunction;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (count >= maxIterationCount) {\n    throw new DeveloperError(\"Kepler equation did not converge\");\n    // STK Components uses a numerical method to find the eccentric anomaly in the case that Kepler's\n    // equation does not converge. We don't expect that to ever be necessary for the reasonable orbits used here.\n  }\n  //>>includeEnd('debug')\n\n  eccentricAnomaly = iterationValue + revs * CesiumMath.TWO_PI;\n  return eccentricAnomaly;\n}\n\n// Calculates the true anomaly given the eccentric anomaly and the eccentricity.\nfunction eccentricAnomalyToTrueAnomaly(eccentricAnomaly, eccentricity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (eccentricity < 0.0 || eccentricity >= 1.0) {\n    throw new DeveloperError(\"eccentricity out of range.\");\n  }\n  //>>includeEnd('debug')\n\n  // Calculate the number of previous revolutions\n  const revs = Math.floor(eccentricAnomaly / CesiumMath.TWO_PI);\n\n  // Find angle in current revolution\n  eccentricAnomaly -= revs * CesiumMath.TWO_PI;\n\n  // Calculate true anomaly from eccentric anomaly\n  const trueAnomalyX = Math.cos(eccentricAnomaly) - eccentricity;\n  const trueAnomalyY =\n    Math.sin(eccentricAnomaly) * Math.sqrt(1 - eccentricity * eccentricity);\n\n  let trueAnomaly = Math.atan2(trueAnomalyY, trueAnomalyX);\n\n  // Ensure the correct quadrant\n  trueAnomaly = CesiumMath.zeroToTwoPi(trueAnomaly);\n  if (eccentricAnomaly < 0) {\n    trueAnomaly -= CesiumMath.TWO_PI;\n  }\n\n  // Add on previous revolutions\n  trueAnomaly += revs * CesiumMath.TWO_PI;\n\n  return trueAnomaly;\n}\n\n// Calculates the transformation matrix to convert from the perifocal (PQW) coordinate\n// system to inertial cartesian coordinates.\nfunction perifocalToCartesianMatrix(\n  argumentOfPeriapsis,\n  inclination,\n  rightAscension,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (inclination < 0 || inclination > CesiumMath.PI) {\n    throw new DeveloperError(\"inclination out of range\");\n  }\n  //>>includeEnd('debug')\n\n  const cosap = Math.cos(argumentOfPeriapsis);\n  const sinap = Math.sin(argumentOfPeriapsis);\n\n  const cosi = Math.cos(inclination);\n  const sini = Math.sin(inclination);\n\n  const cosraan = Math.cos(rightAscension);\n  const sinraan = Math.sin(rightAscension);\n  if (!defined(result)) {\n    result = new Matrix3(\n      cosraan * cosap - sinraan * sinap * cosi,\n      -cosraan * sinap - sinraan * cosap * cosi,\n      sinraan * sini,\n\n      sinraan * cosap + cosraan * sinap * cosi,\n      -sinraan * sinap + cosraan * cosap * cosi,\n      -cosraan * sini,\n\n      sinap * sini,\n      cosap * sini,\n      cosi,\n    );\n  } else {\n    result[0] = cosraan * cosap - sinraan * sinap * cosi;\n    result[1] = sinraan * cosap + cosraan * sinap * cosi;\n    result[2] = sinap * sini;\n    result[3] = -cosraan * sinap - sinraan * cosap * cosi;\n    result[4] = -sinraan * sinap + cosraan * cosap * cosi;\n    result[5] = cosap * sini;\n    result[6] = sinraan * sini;\n    result[7] = -cosraan * sini;\n    result[8] = cosi;\n  }\n  return result;\n}\n\n// From section 5.8\nconst semiMajorAxis0 = 1.0000010178 * MetersPerAstronomicalUnit;\nconst meanLongitude0 = 100.46645683 * RadiansPerDegree;\nconst meanLongitude1 = 1295977422.83429 * RadiansPerArcSecond;\n\n// From table 6\nconst p1u = 16002;\nconst p2u = 21863;\nconst p3u = 32004;\nconst p4u = 10931;\nconst p5u = 14529;\nconst p6u = 16368;\nconst p7u = 15318;\nconst p8u = 32794;\n\nconst Ca1 = 64 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca2 = -152 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca3 = 62 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca4 = -8 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca5 = 32 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca6 = -41 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca7 = 19 * 1e-7 * MetersPerAstronomicalUnit;\nconst Ca8 = -11 * 1e-7 * MetersPerAstronomicalUnit;\n\nconst Sa1 = -150 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa2 = -46 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa3 = 68 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa4 = 54 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa5 = 14 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa6 = 24 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa7 = -28 * 1e-7 * MetersPerAstronomicalUnit;\nconst Sa8 = 22 * 1e-7 * MetersPerAstronomicalUnit;\n\nconst q1u = 10;\nconst q2u = 16002;\nconst q3u = 21863;\nconst q4u = 10931;\nconst q5u = 1473;\nconst q6u = 32004;\nconst q7u = 4387;\nconst q8u = 73;\n\nconst Cl1 = -325 * 1e-7;\nconst Cl2 = -322 * 1e-7;\nconst Cl3 = -79 * 1e-7;\nconst Cl4 = 232 * 1e-7;\nconst Cl5 = -52 * 1e-7;\nconst Cl6 = 97 * 1e-7;\nconst Cl7 = 55 * 1e-7;\nconst Cl8 = -41 * 1e-7;\n\nconst Sl1 = -105 * 1e-7;\nconst Sl2 = -137 * 1e-7;\nconst Sl3 = 258 * 1e-7;\nconst Sl4 = 35 * 1e-7;\nconst Sl5 = -116 * 1e-7;\nconst Sl6 = -88 * 1e-7;\nconst Sl7 = -112 * 1e-7;\nconst Sl8 = -80 * 1e-7;\n\nconst scratchDate = new JulianDate(0, 0.0, TimeStandard.TAI);\n// Gets a point describing the motion of the Earth-Moon barycenter according to the equations described in section 6.\nfunction computeSimonEarthMoonBarycenter(date, result) {\n  // t is thousands of years from J2000 TDB\n  taiToTdb(date, scratchDate);\n  const x =\n    scratchDate.dayNumber -\n    epoch.dayNumber +\n    (scratchDate.secondsOfDay - epoch.secondsOfDay) /\n      TimeConstants.SECONDS_PER_DAY;\n  const t = x / (TimeConstants.DAYS_PER_JULIAN_CENTURY * 10.0);\n\n  const u = 0.3595362 * t;\n  const semimajorAxis =\n    semiMajorAxis0 +\n    Ca1 * Math.cos(p1u * u) +\n    Sa1 * Math.sin(p1u * u) +\n    Ca2 * Math.cos(p2u * u) +\n    Sa2 * Math.sin(p2u * u) +\n    Ca3 * Math.cos(p3u * u) +\n    Sa3 * Math.sin(p3u * u) +\n    Ca4 * Math.cos(p4u * u) +\n    Sa4 * Math.sin(p4u * u) +\n    Ca5 * Math.cos(p5u * u) +\n    Sa5 * Math.sin(p5u * u) +\n    Ca6 * Math.cos(p6u * u) +\n    Sa6 * Math.sin(p6u * u) +\n    Ca7 * Math.cos(p7u * u) +\n    Sa7 * Math.sin(p7u * u) +\n    Ca8 * Math.cos(p8u * u) +\n    Sa8 * Math.sin(p8u * u);\n  const meanLongitude =\n    meanLongitude0 +\n    meanLongitude1 * t +\n    Cl1 * Math.cos(q1u * u) +\n    Sl1 * Math.sin(q1u * u) +\n    Cl2 * Math.cos(q2u * u) +\n    Sl2 * Math.sin(q2u * u) +\n    Cl3 * Math.cos(q3u * u) +\n    Sl3 * Math.sin(q3u * u) +\n    Cl4 * Math.cos(q4u * u) +\n    Sl4 * Math.sin(q4u * u) +\n    Cl5 * Math.cos(q5u * u) +\n    Sl5 * Math.sin(q5u * u) +\n    Cl6 * Math.cos(q6u * u) +\n    Sl6 * Math.sin(q6u * u) +\n    Cl7 * Math.cos(q7u * u) +\n    Sl7 * Math.sin(q7u * u) +\n    Cl8 * Math.cos(q8u * u) +\n    Sl8 * Math.sin(q8u * u);\n\n  // All constants in this part are from section 5.8\n  const eccentricity = 0.0167086342 - 0.0004203654 * t;\n  const longitudeOfPerigee =\n    102.93734808 * RadiansPerDegree + 11612.3529 * RadiansPerArcSecond * t;\n  const inclination = 469.97289 * RadiansPerArcSecond * t;\n  const longitudeOfNode =\n    174.87317577 * RadiansPerDegree - 8679.27034 * RadiansPerArcSecond * t;\n\n  return elementsToCartesian(\n    semimajorAxis,\n    eccentricity,\n    inclination,\n    longitudeOfPerigee,\n    longitudeOfNode,\n    meanLongitude,\n    result,\n  );\n}\n\n// Gets a point describing the position of the moon according to the equations described in section 4.\nfunction computeSimonMoon(date, result) {\n  taiToTdb(date, scratchDate);\n  const x =\n    scratchDate.dayNumber -\n    epoch.dayNumber +\n    (scratchDate.secondsOfDay - epoch.secondsOfDay) /\n      TimeConstants.SECONDS_PER_DAY;\n  const t = x / TimeConstants.DAYS_PER_JULIAN_CENTURY;\n  const t2 = t * t;\n  const t3 = t2 * t;\n  const t4 = t3 * t;\n\n  // Terms from section 3.4 (b.1)\n  let semimajorAxis = 383397.7725 + 0.004 * t;\n  let eccentricity = 0.055545526 - 0.000000016 * t;\n  const inclinationConstant = 5.15668983 * RadiansPerDegree;\n  let inclinationSecPart =\n    -0.00008 * t + 0.02966 * t2 - 0.000042 * t3 - 0.00000013 * t4;\n  const longitudeOfPerigeeConstant = 83.35324312 * RadiansPerDegree;\n  let longitudeOfPerigeeSecPart =\n    14643420.2669 * t - 38.2702 * t2 - 0.045047 * t3 + 0.00021301 * t4;\n  const longitudeOfNodeConstant = 125.04455501 * RadiansPerDegree;\n  let longitudeOfNodeSecPart =\n    -6967919.3631 * t + 6.3602 * t2 + 0.007625 * t3 - 0.00003586 * t4;\n  const meanLongitudeConstant = 218.31664563 * RadiansPerDegree;\n  let meanLongitudeSecPart =\n    1732559343.4847 * t - 6.391 * t2 + 0.006588 * t3 - 0.00003169 * t4;\n\n  // Delaunay arguments from section 3.5 b\n  const D =\n    297.85019547 * RadiansPerDegree +\n    RadiansPerArcSecond *\n      (1602961601.209 * t - 6.3706 * t2 + 0.006593 * t3 - 0.00003169 * t4);\n  const F =\n    93.27209062 * RadiansPerDegree +\n    RadiansPerArcSecond *\n      (1739527262.8478 * t - 12.7512 * t2 - 0.001037 * t3 + 0.00000417 * t4);\n  const l =\n    134.96340251 * RadiansPerDegree +\n    RadiansPerArcSecond *\n      (1717915923.2178 * t + 31.8792 * t2 + 0.051635 * t3 - 0.0002447 * t4);\n  const lprime =\n    357.52910918 * RadiansPerDegree +\n    RadiansPerArcSecond *\n      (129596581.0481 * t - 0.5532 * t2 + 0.000136 * t3 - 0.00001149 * t4);\n  const psi =\n    310.17137918 * RadiansPerDegree -\n    RadiansPerArcSecond *\n      (6967051.436 * t + 6.2068 * t2 + 0.007618 * t3 - 0.00003219 * t4);\n\n  // Add terms from Table 4\n  const twoD = 2.0 * D;\n  const fourD = 4.0 * D;\n  const sixD = 6.0 * D;\n  const twol = 2.0 * l;\n  const threel = 3.0 * l;\n  const fourl = 4.0 * l;\n  const twoF = 2.0 * F;\n  semimajorAxis +=\n    3400.4 * Math.cos(twoD) -\n    635.6 * Math.cos(twoD - l) -\n    235.6 * Math.cos(l) +\n    218.1 * Math.cos(twoD - lprime) +\n    181.0 * Math.cos(twoD + l);\n  eccentricity +=\n    0.014216 * Math.cos(twoD - l) +\n    0.008551 * Math.cos(twoD - twol) -\n    0.001383 * Math.cos(l) +\n    0.001356 * Math.cos(twoD + l) -\n    0.001147 * Math.cos(fourD - threel) -\n    0.000914 * Math.cos(fourD - twol) +\n    0.000869 * Math.cos(twoD - lprime - l) -\n    0.000627 * Math.cos(twoD) -\n    0.000394 * Math.cos(fourD - fourl) +\n    0.000282 * Math.cos(twoD - lprime - twol) -\n    0.000279 * Math.cos(D - l) -\n    0.000236 * Math.cos(twol) +\n    0.000231 * Math.cos(fourD) +\n    0.000229 * Math.cos(sixD - fourl) -\n    0.000201 * Math.cos(twol - twoF);\n  inclinationSecPart +=\n    486.26 * Math.cos(twoD - twoF) -\n    40.13 * Math.cos(twoD) +\n    37.51 * Math.cos(twoF) +\n    25.73 * Math.cos(twol - twoF) +\n    19.97 * Math.cos(twoD - lprime - twoF);\n  longitudeOfPerigeeSecPart +=\n    -55609 * Math.sin(twoD - l) -\n    34711 * Math.sin(twoD - twol) -\n    9792 * Math.sin(l) +\n    9385 * Math.sin(fourD - threel) +\n    7505 * Math.sin(fourD - twol) +\n    5318 * Math.sin(twoD + l) +\n    3484 * Math.sin(fourD - fourl) -\n    3417 * Math.sin(twoD - lprime - l) -\n    2530 * Math.sin(sixD - fourl) -\n    2376 * Math.sin(twoD) -\n    2075 * Math.sin(twoD - threel) -\n    1883 * Math.sin(twol) -\n    1736 * Math.sin(sixD - 5.0 * l) +\n    1626 * Math.sin(lprime) -\n    1370 * Math.sin(sixD - threel);\n  longitudeOfNodeSecPart +=\n    -5392 * Math.sin(twoD - twoF) -\n    540 * Math.sin(lprime) -\n    441 * Math.sin(twoD) +\n    423 * Math.sin(twoF) -\n    288 * Math.sin(twol - twoF);\n  meanLongitudeSecPart +=\n    -3332.9 * Math.sin(twoD) +\n    1197.4 * Math.sin(twoD - l) -\n    662.5 * Math.sin(lprime) +\n    396.3 * Math.sin(l) -\n    218.0 * Math.sin(twoD - lprime);\n\n  // Add terms from Table 5\n  const twoPsi = 2.0 * psi;\n  const threePsi = 3.0 * psi;\n  inclinationSecPart +=\n    46.997 * Math.cos(psi) * t -\n    0.614 * Math.cos(twoD - twoF + psi) * t +\n    0.614 * Math.cos(twoD - twoF - psi) * t -\n    0.0297 * Math.cos(twoPsi) * t2 -\n    0.0335 * Math.cos(psi) * t2 +\n    0.0012 * Math.cos(twoD - twoF + twoPsi) * t2 -\n    0.00016 * Math.cos(psi) * t3 +\n    0.00004 * Math.cos(threePsi) * t3 +\n    0.00004 * Math.cos(twoPsi) * t3;\n  const perigeeAndMean =\n    2.116 * Math.sin(psi) * t -\n    0.111 * Math.sin(twoD - twoF - psi) * t -\n    0.0015 * Math.sin(psi) * t2;\n  longitudeOfPerigeeSecPart += perigeeAndMean;\n  meanLongitudeSecPart += perigeeAndMean;\n  longitudeOfNodeSecPart +=\n    -520.77 * Math.sin(psi) * t +\n    13.66 * Math.sin(twoD - twoF + psi) * t +\n    1.12 * Math.sin(twoD - psi) * t -\n    1.06 * Math.sin(twoF - psi) * t +\n    0.66 * Math.sin(twoPsi) * t2 +\n    0.371 * Math.sin(psi) * t2 -\n    0.035 * Math.sin(twoD - twoF + twoPsi) * t2 -\n    0.015 * Math.sin(twoD - twoF + psi) * t2 +\n    0.0014 * Math.sin(psi) * t3 -\n    0.0011 * Math.sin(threePsi) * t3 -\n    0.0009 * Math.sin(twoPsi) * t3;\n\n  // Add constants and convert units\n  semimajorAxis *= MetersPerKilometer;\n  const inclination =\n    inclinationConstant + inclinationSecPart * RadiansPerArcSecond;\n  const longitudeOfPerigee =\n    longitudeOfPerigeeConstant +\n    longitudeOfPerigeeSecPart * RadiansPerArcSecond;\n  const meanLongitude =\n    meanLongitudeConstant + meanLongitudeSecPart * RadiansPerArcSecond;\n  const longitudeOfNode =\n    longitudeOfNodeConstant + longitudeOfNodeSecPart * RadiansPerArcSecond;\n\n  return elementsToCartesian(\n    semimajorAxis,\n    eccentricity,\n    inclination,\n    longitudeOfPerigee,\n    longitudeOfNode,\n    meanLongitude,\n    result,\n  );\n}\n\n// Gets a point describing the motion of the Earth.  This point uses the Moon point and\n// the 1992 mu value (ratio between Moon and Earth masses) in Table 2 of the paper in order\n// to determine the position of the Earth relative to the Earth-Moon barycenter.\nconst moonEarthMassRatio = 0.012300034; // From 1992 mu value in Table 2\nconst factor = (moonEarthMassRatio / (moonEarthMassRatio + 1.0)) * -1;\nfunction computeSimonEarth(date, result) {\n  result = computeSimonMoon(date, result);\n  return Cartesian3.multiplyByScalar(result, factor, result);\n}\n\n// Values for the <code>axesTransformation</code> needed for the rotation were found using the STK Components\n// GeographicTransformer on the position of the sun center of mass point and the earth J2000 frame.\n\nconst axesTransformation = new Matrix3(\n  1.0000000000000002,\n  5.619723173785822e-16,\n  4.690511510146299e-19,\n  -5.154129427414611e-16,\n  0.9174820620691819,\n  -0.39777715593191376,\n  -2.23970096136568e-16,\n  0.39777715593191376,\n  0.9174820620691819,\n);\nlet translation = new Cartesian3();\n\n/**\n * Computes the position of the Sun in the Earth-centered inertial frame\n *\n * @param {JulianDate} [julianDate] The time at which to compute the Sun's position, if not provided the current system time is used.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} Calculated sun position\n */\nSimon1994PlanetaryPositions.computeSunPositionInEarthInertialFrame = function (\n  julianDate,\n  result,\n) {\n  if (!defined(julianDate)) {\n    julianDate = JulianDate.now();\n  }\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  //first forward transformation\n  translation = computeSimonEarthMoonBarycenter(julianDate, translation);\n  result = Cartesian3.negate(translation, result);\n\n  //second forward transformation\n  computeSimonEarth(julianDate, translation);\n\n  Cartesian3.subtract(result, translation, result);\n  Matrix3.multiplyByVector(axesTransformation, result, result);\n\n  return result;\n};\n\n/**\n * Computes the position of the Moon in the Earth-centered inertial frame\n *\n * @param {JulianDate} [julianDate] The time at which to compute the Moon's position, if not provided the current system time is used.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} Calculated moon position\n */\nSimon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame = function (\n  julianDate,\n  result,\n) {\n  if (!defined(julianDate)) {\n    julianDate = JulianDate.now();\n  }\n\n  result = computeSimonMoon(julianDate, result);\n  Matrix3.multiplyByVector(axesTransformation, result, result);\n\n  return result;\n};\n\nexport default Simon1994PlanetaryPositions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}