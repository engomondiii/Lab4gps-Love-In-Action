{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport combine from \"./combine.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\n\n/**\n * Provides geocoding via a {@link https://opencagedata.com/|OpenCage} server.\n * @alias OpenCageGeocoderService\n * @constructor\n *\n * @param {Resource|string} url The endpoint to the OpenCage server.\n * @param {string} apiKey The OpenCage API Key.\n * @param {object} [params] An object with the following properties (See https://opencagedata.com/api#forward-opt):\n * @param {number} [params.abbrv] When set to 1 we attempt to abbreviate and shorten the formatted string we return.\n * @param {number} [options.add_request] When set to 1 the various request parameters are added to the response for ease of debugging.\n * @param {string} [options.bounds] Provides the geocoder with a hint to the region that the query resides in.\n * @param {string} [options.countrycode] Restricts the results to the specified country or countries (as defined by the ISO 3166-1 Alpha 2 standard).\n * @param {string} [options.jsonp] Wraps the returned JSON with a function name.\n * @param {string} [options.language] An IETF format language code.\n * @param {number} [options.limit] The maximum number of results we should return.\n * @param {number} [options.min_confidence] An integer from 1-10. Only results with at least this confidence will be returned.\n * @param {number} [options.no_annotations] When set to 1 results will not contain annotations.\n * @param {number} [options.no_dedupe] When set to 1 results will not be deduplicated.\n * @param {number} [options.no_record] When set to 1 the query contents are not logged.\n * @param {number} [options.pretty] When set to 1 results are 'pretty' printed for easier reading. Useful for debugging.\n * @param {string} [options.proximity] Provides the geocoder with a hint to bias results in favour of those closer to the specified location (For example: 41.40139,2.12870).\n *\n * @example\n * // Configure a Viewer to use the OpenCage Geocoder\n * const viewer = new Cesium.Viewer('cesiumContainer', {\n *   geocoder: new Cesium.OpenCageGeocoderService('https://api.opencagedata.com/geocode/v1/', '<API key>')\n * });\n */\nfunction OpenCageGeocoderService(url, apiKey, params) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  Check.defined(\"apiKey\", apiKey);\n  if (defined(params)) {\n    Check.typeOf.object(\"params\", params);\n  }\n  //>>includeEnd('debug');\n\n  url = Resource.createIfNeeded(url);\n  url.appendForwardSlash();\n  url.setQueryParameters({\n    key: apiKey\n  });\n  this._url = url;\n  this._params = defaultValue(params, {});\n  this._credit = new Credit(`Geodata copyright <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors`, false);\n}\nObject.defineProperties(OpenCageGeocoderService.prototype, {\n  /**\n   * The Resource used to access the OpenCage endpoint.\n   * @type {Resource}\n   * @memberof OpenCageGeocoderService.prototype\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._url;\n    }\n  },\n  /**\n   * Optional params passed to OpenCage in order to customize geocoding\n   * @type {object}\n   * @memberof OpenCageGeocoderService.prototype\n   * @readonly\n   */\n  params: {\n    get: function () {\n      return this._params;\n    }\n  },\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof OpenCageGeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  }\n});\n\n/**\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService.Result[]>}\n */\nOpenCageGeocoderService.prototype.geocode = async function (query) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  const resource = this._url.getDerivedResource({\n    url: \"json\",\n    queryParameters: combine(this._params, {\n      q: query\n    })\n  });\n  return resource.fetchJson().then(function (response) {\n    return response.results.map(function (resultObject) {\n      let destination;\n      const bounds = resultObject.bounds;\n      if (defined(bounds)) {\n        destination = Rectangle.fromDegrees(bounds.southwest.lng, bounds.southwest.lat, bounds.northeast.lng, bounds.northeast.lat);\n      } else {\n        const lon = resultObject.geometry.lat;\n        const lat = resultObject.geometry.lng;\n        destination = Cartesian3.fromDegrees(lon, lat);\n      }\n      return {\n        displayName: resultObject.formatted,\n        destination: destination\n      };\n    });\n  });\n};\nexport default OpenCageGeocoderService;","map":{"version":3,"names":["Cartesian3","Check","combine","Credit","defaultValue","defined","Rectangle","Resource","OpenCageGeocoderService","url","apiKey","params","typeOf","object","createIfNeeded","appendForwardSlash","setQueryParameters","key","_url","_params","_credit","Object","defineProperties","prototype","get","credit","geocode","query","string","resource","getDerivedResource","queryParameters","q","fetchJson","then","response","results","map","resultObject","destination","bounds","fromDegrees","southwest","lng","lat","northeast","lon","geometry","displayName","formatted"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/OpenCageGeocoderService.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport combine from \"./combine.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\n\n/**\n * Provides geocoding via a {@link https://opencagedata.com/|OpenCage} server.\n * @alias OpenCageGeocoderService\n * @constructor\n *\n * @param {Resource|string} url The endpoint to the OpenCage server.\n * @param {string} apiKey The OpenCage API Key.\n * @param {object} [params] An object with the following properties (See https://opencagedata.com/api#forward-opt):\n * @param {number} [params.abbrv] When set to 1 we attempt to abbreviate and shorten the formatted string we return.\n * @param {number} [options.add_request] When set to 1 the various request parameters are added to the response for ease of debugging.\n * @param {string} [options.bounds] Provides the geocoder with a hint to the region that the query resides in.\n * @param {string} [options.countrycode] Restricts the results to the specified country or countries (as defined by the ISO 3166-1 Alpha 2 standard).\n * @param {string} [options.jsonp] Wraps the returned JSON with a function name.\n * @param {string} [options.language] An IETF format language code.\n * @param {number} [options.limit] The maximum number of results we should return.\n * @param {number} [options.min_confidence] An integer from 1-10. Only results with at least this confidence will be returned.\n * @param {number} [options.no_annotations] When set to 1 results will not contain annotations.\n * @param {number} [options.no_dedupe] When set to 1 results will not be deduplicated.\n * @param {number} [options.no_record] When set to 1 the query contents are not logged.\n * @param {number} [options.pretty] When set to 1 results are 'pretty' printed for easier reading. Useful for debugging.\n * @param {string} [options.proximity] Provides the geocoder with a hint to bias results in favour of those closer to the specified location (For example: 41.40139,2.12870).\n *\n * @example\n * // Configure a Viewer to use the OpenCage Geocoder\n * const viewer = new Cesium.Viewer('cesiumContainer', {\n *   geocoder: new Cesium.OpenCageGeocoderService('https://api.opencagedata.com/geocode/v1/', '<API key>')\n * });\n */\nfunction OpenCageGeocoderService(url, apiKey, params) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  Check.defined(\"apiKey\", apiKey);\n  if (defined(params)) {\n    Check.typeOf.object(\"params\", params);\n  }\n  //>>includeEnd('debug');\n\n  url = Resource.createIfNeeded(url);\n  url.appendForwardSlash();\n  url.setQueryParameters({ key: apiKey });\n  this._url = url;\n  this._params = defaultValue(params, {});\n  this._credit = new Credit(\n    `Geodata copyright <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors`,\n    false,\n  );\n}\n\nObject.defineProperties(OpenCageGeocoderService.prototype, {\n  /**\n   * The Resource used to access the OpenCage endpoint.\n   * @type {Resource}\n   * @memberof OpenCageGeocoderService.prototype\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._url;\n    },\n  },\n  /**\n   * Optional params passed to OpenCage in order to customize geocoding\n   * @type {object}\n   * @memberof OpenCageGeocoderService.prototype\n   * @readonly\n   */\n  params: {\n    get: function () {\n      return this._params;\n    },\n  },\n  /**\n   * Gets the credit to display after a geocode is performed. Typically this is used to credit\n   * the geocoder service.\n   * @memberof OpenCageGeocoderService.prototype\n   * @type {Credit|undefined}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n});\n\n/**\n * @function\n *\n * @param {string} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService.Result[]>}\n */\nOpenCageGeocoderService.prototype.geocode = async function (query) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  const resource = this._url.getDerivedResource({\n    url: \"json\",\n    queryParameters: combine(this._params, { q: query }),\n  });\n  return resource.fetchJson().then(function (response) {\n    return response.results.map(function (resultObject) {\n      let destination;\n      const bounds = resultObject.bounds;\n\n      if (defined(bounds)) {\n        destination = Rectangle.fromDegrees(\n          bounds.southwest.lng,\n          bounds.southwest.lat,\n          bounds.northeast.lng,\n          bounds.northeast.lat,\n        );\n      } else {\n        const lon = resultObject.geometry.lat;\n        const lat = resultObject.geometry.lng;\n        destination = Cartesian3.fromDegrees(lon, lat);\n      }\n\n      return {\n        displayName: resultObject.formatted,\n        destination: destination,\n      };\n    });\n  });\n};\nexport default OpenCageGeocoderService;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,iBAAiB;AACxC,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE;EACpD;EACAV,KAAK,CAACI,OAAO,CAAC,KAAK,EAAEI,GAAG,CAAC;EACzBR,KAAK,CAACI,OAAO,CAAC,QAAQ,EAAEK,MAAM,CAAC;EAC/B,IAAIL,OAAO,CAACM,MAAM,CAAC,EAAE;IACnBV,KAAK,CAACW,MAAM,CAACC,MAAM,CAAC,QAAQ,EAAEF,MAAM,CAAC;EACvC;EACA;;EAEAF,GAAG,GAAGF,QAAQ,CAACO,cAAc,CAACL,GAAG,CAAC;EAClCA,GAAG,CAACM,kBAAkB,CAAC,CAAC;EACxBN,GAAG,CAACO,kBAAkB,CAAC;IAAEC,GAAG,EAAEP;EAAO,CAAC,CAAC;EACvC,IAAI,CAACQ,IAAI,GAAGT,GAAG;EACf,IAAI,CAACU,OAAO,GAAGf,YAAY,CAACO,MAAM,EAAE,CAAC,CAAC,CAAC;EACvC,IAAI,CAACS,OAAO,GAAG,IAAIjB,MAAM,CACvB,2FAA2F,EAC3F,KACF,CAAC;AACH;AAEAkB,MAAM,CAACC,gBAAgB,CAACd,uBAAuB,CAACe,SAAS,EAAE;EACzD;AACF;AACA;AACA;AACA;AACA;EACEd,GAAG,EAAE;IACHe,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACN,IAAI;IAClB;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEP,MAAM,EAAE;IACNa,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACL,OAAO;IACrB;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEM,MAAM,EAAE;IACND,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACJ,OAAO;IACrB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACAZ,uBAAuB,CAACe,SAAS,CAACG,OAAO,GAAG,gBAAgBC,KAAK,EAAE;EACjE;EACA1B,KAAK,CAACW,MAAM,CAACgB,MAAM,CAAC,OAAO,EAAED,KAAK,CAAC;EACnC;;EAEA,MAAME,QAAQ,GAAG,IAAI,CAACX,IAAI,CAACY,kBAAkB,CAAC;IAC5CrB,GAAG,EAAE,MAAM;IACXsB,eAAe,EAAE7B,OAAO,CAAC,IAAI,CAACiB,OAAO,EAAE;MAAEa,CAAC,EAAEL;IAAM,CAAC;EACrD,CAAC,CAAC;EACF,OAAOE,QAAQ,CAACI,SAAS,CAAC,CAAC,CAACC,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACnD,OAAOA,QAAQ,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,YAAY,EAAE;MAClD,IAAIC,WAAW;MACf,MAAMC,MAAM,GAAGF,YAAY,CAACE,MAAM;MAElC,IAAInC,OAAO,CAACmC,MAAM,CAAC,EAAE;QACnBD,WAAW,GAAGjC,SAAS,CAACmC,WAAW,CACjCD,MAAM,CAACE,SAAS,CAACC,GAAG,EACpBH,MAAM,CAACE,SAAS,CAACE,GAAG,EACpBJ,MAAM,CAACK,SAAS,CAACF,GAAG,EACpBH,MAAM,CAACK,SAAS,CAACD,GACnB,CAAC;MACH,CAAC,MAAM;QACL,MAAME,GAAG,GAAGR,YAAY,CAACS,QAAQ,CAACH,GAAG;QACrC,MAAMA,GAAG,GAAGN,YAAY,CAACS,QAAQ,CAACJ,GAAG;QACrCJ,WAAW,GAAGvC,UAAU,CAACyC,WAAW,CAACK,GAAG,EAAEF,GAAG,CAAC;MAChD;MAEA,OAAO;QACLI,WAAW,EAAEV,YAAY,CAACW,SAAS;QACnCV,WAAW,EAAEA;MACf,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AACD,eAAe/B,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}