{"ast":null,"code":"import Check from \"./Check.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Spline from \"./Spline.js\";\n\n/**\n * A spline that evaluates to a constant value. Although this follows the {@link Spline} interface,\n * it does not maintain an internal array of times since its value never changes.\n *\n * @alias ConstantSpline\n * @constructor\n *\n * @param {number|Cartesian3|Quaternion} value The constant value that the spline evaluates to.\n *\n * @example\n * const position = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * const spline = new Cesium.ConstantSpline(position);\n *\n * const p0 = spline.evaluate(0.0);\n *\n * @see LinearSpline\n * @see HermiteSpline\n * @see CatmullRomSpline\n * @see QuaternionSpline\n * @see MorphWeightSpline\n */\nfunction ConstantSpline(value) {\n  this._value = value;\n  this._valueType = Spline.getPointType(value);\n}\nObject.defineProperties(ConstantSpline.prototype, {\n  /**\n   * The constant value that the spline evaluates to.\n   *\n   * @memberof ConstantSpline.prototype\n   *\n   * @type {number|Cartesian3|Quaternion}\n   * @readonly\n   */\n  value: {\n    get: function () {\n      return this._value;\n    }\n  }\n});\n\n/**\n * Finds an index <code>i</code> in <code>times</code> such that the parameter\n * <code>time</code> is in the interval <code>[times[i], times[i + 1]]</code>.\n *\n * Since a constant spline has no internal times array, this will throw an error.\n * @function\n *\n * @param {number} time The time.\n *\n * @exception {DeveloperError} findTimeInterval cannot be called on a ConstantSpline.\n */\nConstantSpline.prototype.findTimeInterval = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\"findTimeInterval cannot be called on a ConstantSpline.\");\n  //>>includeEnd('debug');\n};\n\n/**\n * Wraps the given time to the period covered by the spline.\n * @function\n *\n * @param {number} time The time.\n * @return {number} The time, wrapped around to the updated animation.\n */\nConstantSpline.prototype.wrapTime = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"time\", time);\n  //>>includeEnd('debug');\n\n  return 0.0;\n};\n\n/**\n * Clamps the given time to the period covered by the spline.\n * @function\n *\n * @param {number} time The time.\n * @return {number} The time, clamped to the animation period.\n */\nConstantSpline.prototype.clampTime = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"time\", time);\n  //>>includeEnd('debug');\n\n  return 0.0;\n};\n\n/**\n * Evaluates the curve at a given time.\n * @function\n *\n * @param {number} time The time at which to evaluate the curve.\n * @param {Cartesian3|Quaternion} [result] The object onto which to store the result.\n * @returns {number|Cartesian3|Quaternion} The modified result parameter or the value that the constant spline represents.\n */\nConstantSpline.prototype.evaluate = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"time\", time);\n  //>>includeEnd('debug');\n\n  const value = this._value;\n  const ValueType = this._valueType;\n  if (ValueType === Number) {\n    return value;\n  }\n  return ValueType.clone(value, result);\n};\nexport default ConstantSpline;","map":{"version":3,"names":["Check","DeveloperError","Spline","ConstantSpline","value","_value","_valueType","getPointType","Object","defineProperties","prototype","get","findTimeInterval","time","wrapTime","typeOf","number","clampTime","evaluate","result","ValueType","Number","clone"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/ConstantSpline.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Spline from \"./Spline.js\";\n\n/**\n * A spline that evaluates to a constant value. Although this follows the {@link Spline} interface,\n * it does not maintain an internal array of times since its value never changes.\n *\n * @alias ConstantSpline\n * @constructor\n *\n * @param {number|Cartesian3|Quaternion} value The constant value that the spline evaluates to.\n *\n * @example\n * const position = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * const spline = new Cesium.ConstantSpline(position);\n *\n * const p0 = spline.evaluate(0.0);\n *\n * @see LinearSpline\n * @see HermiteSpline\n * @see CatmullRomSpline\n * @see QuaternionSpline\n * @see MorphWeightSpline\n */\nfunction ConstantSpline(value) {\n  this._value = value;\n  this._valueType = Spline.getPointType(value);\n}\n\nObject.defineProperties(ConstantSpline.prototype, {\n  /**\n   * The constant value that the spline evaluates to.\n   *\n   * @memberof ConstantSpline.prototype\n   *\n   * @type {number|Cartesian3|Quaternion}\n   * @readonly\n   */\n  value: {\n    get: function () {\n      return this._value;\n    },\n  },\n});\n\n/**\n * Finds an index <code>i</code> in <code>times</code> such that the parameter\n * <code>time</code> is in the interval <code>[times[i], times[i + 1]]</code>.\n *\n * Since a constant spline has no internal times array, this will throw an error.\n * @function\n *\n * @param {number} time The time.\n *\n * @exception {DeveloperError} findTimeInterval cannot be called on a ConstantSpline.\n */\nConstantSpline.prototype.findTimeInterval = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\n    \"findTimeInterval cannot be called on a ConstantSpline.\",\n  );\n  //>>includeEnd('debug');\n};\n\n/**\n * Wraps the given time to the period covered by the spline.\n * @function\n *\n * @param {number} time The time.\n * @return {number} The time, wrapped around to the updated animation.\n */\nConstantSpline.prototype.wrapTime = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"time\", time);\n  //>>includeEnd('debug');\n\n  return 0.0;\n};\n\n/**\n * Clamps the given time to the period covered by the spline.\n * @function\n *\n * @param {number} time The time.\n * @return {number} The time, clamped to the animation period.\n */\nConstantSpline.prototype.clampTime = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"time\", time);\n  //>>includeEnd('debug');\n\n  return 0.0;\n};\n\n/**\n * Evaluates the curve at a given time.\n * @function\n *\n * @param {number} time The time at which to evaluate the curve.\n * @param {Cartesian3|Quaternion} [result] The object onto which to store the result.\n * @returns {number|Cartesian3|Quaternion} The modified result parameter or the value that the constant spline represents.\n */\nConstantSpline.prototype.evaluate = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"time\", time);\n  //>>includeEnd('debug');\n\n  const value = this._value;\n  const ValueType = this._valueType;\n\n  if (ValueType === Number) {\n    return value;\n  }\n\n  return ValueType.clone(value, result);\n};\n\nexport default ConstantSpline;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,cAAc,MAAM,qBAAqB;AAChD,OAAOC,MAAM,MAAM,aAAa;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,KAAK,EAAE;EAC7B,IAAI,CAACC,MAAM,GAAGD,KAAK;EACnB,IAAI,CAACE,UAAU,GAAGJ,MAAM,CAACK,YAAY,CAACH,KAAK,CAAC;AAC9C;AAEAI,MAAM,CAACC,gBAAgB,CAACN,cAAc,CAACO,SAAS,EAAE;EAChD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEN,KAAK,EAAE;IACLO,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACN,MAAM;IACpB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,cAAc,CAACO,SAAS,CAACE,gBAAgB,GAAG,UAAUC,IAAI,EAAE;EAC1D;EACA,MAAM,IAAIZ,cAAc,CACtB,wDACF,CAAC;EACD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,cAAc,CAACO,SAAS,CAACI,QAAQ,GAAG,UAAUD,IAAI,EAAE;EAClD;EACAb,KAAK,CAACe,MAAM,CAACC,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EACjC;;EAEA,OAAO,GAAG;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,cAAc,CAACO,SAAS,CAACO,SAAS,GAAG,UAAUJ,IAAI,EAAE;EACnD;EACAb,KAAK,CAACe,MAAM,CAACC,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EACjC;;EAEA,OAAO,GAAG;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,cAAc,CAACO,SAAS,CAACQ,QAAQ,GAAG,UAAUL,IAAI,EAAEM,MAAM,EAAE;EAC1D;EACAnB,KAAK,CAACe,MAAM,CAACC,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EACjC;;EAEA,MAAMT,KAAK,GAAG,IAAI,CAACC,MAAM;EACzB,MAAMe,SAAS,GAAG,IAAI,CAACd,UAAU;EAEjC,IAAIc,SAAS,KAAKC,MAAM,EAAE;IACxB,OAAOjB,KAAK;EACd;EAEA,OAAOgB,SAAS,CAACE,KAAK,CAAClB,KAAK,EAAEe,MAAM,CAAC;AACvC,CAAC;AAED,eAAehB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}