{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\nimport VoxelBoxShape from \"./VoxelBoxShape.js\";\nimport VoxelCylinderShape from \"./VoxelCylinderShape.js\";\nimport VoxelEllipsoidShape from \"./VoxelEllipsoidShape.js\";\n\n/**\n * An enum of voxel shapes. The shape controls how the voxel grid is mapped to 3D space.\n *\n * @enum {string}\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n */\nconst VoxelShapeType = {\n  /**\n   * A box shape.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  BOX: \"BOX\",\n  /**\n   * An ellipsoid shape.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  ELLIPSOID: \"ELLIPSOID\",\n  /**\n   * A cylinder shape.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CYLINDER: \"CYLINDER\"\n};\n\n/**\n * Gets the minimum bounds.\n * @param {VoxelShapeType} shapeType The voxel shape type.\n * @returns {Cartesian3} The minimum bounds.\n */\nVoxelShapeType.getMinBounds = function (shapeType) {\n  switch (shapeType) {\n    case VoxelShapeType.BOX:\n      return VoxelBoxShape.DefaultMinBounds;\n    case VoxelShapeType.ELLIPSOID:\n      return VoxelEllipsoidShape.DefaultMinBounds;\n    case VoxelShapeType.CYLINDER:\n      return VoxelCylinderShape.DefaultMinBounds;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(`Invalid shape type ${shapeType}`);\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the maximum bounds.\n * @param {VoxelShapeType} shapeType The voxel shape type.\n * @returns {Cartesian3} The maximum bounds.\n */\nVoxelShapeType.getMaxBounds = function (shapeType) {\n  switch (shapeType) {\n    case VoxelShapeType.BOX:\n      return VoxelBoxShape.DefaultMaxBounds;\n    case VoxelShapeType.ELLIPSOID:\n      return VoxelEllipsoidShape.DefaultMaxBounds;\n    case VoxelShapeType.CYLINDER:\n      return VoxelCylinderShape.DefaultMaxBounds;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(`Invalid shape type ${shapeType}`);\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Converts a shape type to a constructor that can be used to create a shape\n * object or get per-shape properties like DefaultMinBounds and\n * DefaultMaxBounds.\n *\n * @param {VoxelShapeType} shapeType The shape type.\n * @returns {Function} The shape's constructor.\n *\n * @private\n */\nVoxelShapeType.getShapeConstructor = function (shapeType) {\n  switch (shapeType) {\n    case VoxelShapeType.BOX:\n      return VoxelBoxShape;\n    case VoxelShapeType.ELLIPSOID:\n      return VoxelEllipsoidShape;\n    case VoxelShapeType.CYLINDER:\n      return VoxelCylinderShape;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(`Invalid shape type ${shapeType}`);\n    //>>includeEnd('debug');\n  }\n};\nexport default Object.freeze(VoxelShapeType);","map":{"version":3,"names":["DeveloperError","VoxelBoxShape","VoxelCylinderShape","VoxelEllipsoidShape","VoxelShapeType","BOX","ELLIPSOID","CYLINDER","getMinBounds","shapeType","DefaultMinBounds","getMaxBounds","DefaultMaxBounds","getShapeConstructor","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/VoxelShapeType.js"],"sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\nimport VoxelBoxShape from \"./VoxelBoxShape.js\";\nimport VoxelCylinderShape from \"./VoxelCylinderShape.js\";\nimport VoxelEllipsoidShape from \"./VoxelEllipsoidShape.js\";\n\n/**\n * An enum of voxel shapes. The shape controls how the voxel grid is mapped to 3D space.\n *\n * @enum {string}\n *\n * @experimental This feature is not final and is subject to change without Cesium's standard deprecation policy.\n */\nconst VoxelShapeType = {\n  /**\n   * A box shape.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  BOX: \"BOX\",\n  /**\n   * An ellipsoid shape.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  ELLIPSOID: \"ELLIPSOID\",\n  /**\n   * A cylinder shape.\n   *\n   * @type {string}\n   * @constant\n   * @private\n   */\n  CYLINDER: \"CYLINDER\",\n};\n\n/**\n * Gets the minimum bounds.\n * @param {VoxelShapeType} shapeType The voxel shape type.\n * @returns {Cartesian3} The minimum bounds.\n */\nVoxelShapeType.getMinBounds = function (shapeType) {\n  switch (shapeType) {\n    case VoxelShapeType.BOX:\n      return VoxelBoxShape.DefaultMinBounds;\n    case VoxelShapeType.ELLIPSOID:\n      return VoxelEllipsoidShape.DefaultMinBounds;\n    case VoxelShapeType.CYLINDER:\n      return VoxelCylinderShape.DefaultMinBounds;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(`Invalid shape type ${shapeType}`);\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the maximum bounds.\n * @param {VoxelShapeType} shapeType The voxel shape type.\n * @returns {Cartesian3} The maximum bounds.\n */\nVoxelShapeType.getMaxBounds = function (shapeType) {\n  switch (shapeType) {\n    case VoxelShapeType.BOX:\n      return VoxelBoxShape.DefaultMaxBounds;\n    case VoxelShapeType.ELLIPSOID:\n      return VoxelEllipsoidShape.DefaultMaxBounds;\n    case VoxelShapeType.CYLINDER:\n      return VoxelCylinderShape.DefaultMaxBounds;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(`Invalid shape type ${shapeType}`);\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Converts a shape type to a constructor that can be used to create a shape\n * object or get per-shape properties like DefaultMinBounds and\n * DefaultMaxBounds.\n *\n * @param {VoxelShapeType} shapeType The shape type.\n * @returns {Function} The shape's constructor.\n *\n * @private\n */\nVoxelShapeType.getShapeConstructor = function (shapeType) {\n  switch (shapeType) {\n    case VoxelShapeType.BOX:\n      return VoxelBoxShape;\n    case VoxelShapeType.ELLIPSOID:\n      return VoxelEllipsoidShape;\n    case VoxelShapeType.CYLINDER:\n      return VoxelCylinderShape;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(`Invalid shape type ${shapeType}`);\n    //>>includeEnd('debug');\n  }\n};\n\nexport default Object.freeze(VoxelShapeType);\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,2BAA2B;AACtD,OAAOC,aAAa,MAAM,oBAAoB;AAC9C,OAAOC,kBAAkB,MAAM,yBAAyB;AACxD,OAAOC,mBAAmB,MAAM,0BAA0B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,GAAG,EAAE,KAAK;EACV;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,WAAW;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAH,cAAc,CAACI,YAAY,GAAG,UAAUC,SAAS,EAAE;EACjD,QAAQA,SAAS;IACf,KAAKL,cAAc,CAACC,GAAG;MACrB,OAAOJ,aAAa,CAACS,gBAAgB;IACvC,KAAKN,cAAc,CAACE,SAAS;MAC3B,OAAOH,mBAAmB,CAACO,gBAAgB;IAC7C,KAAKN,cAAc,CAACG,QAAQ;MAC1B,OAAOL,kBAAkB,CAACQ,gBAAgB;IAC5C;IACA;MACE,MAAM,IAAIV,cAAc,CAAC,sBAAsBS,SAAS,EAAE,CAAC;IAC7D;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAL,cAAc,CAACO,YAAY,GAAG,UAAUF,SAAS,EAAE;EACjD,QAAQA,SAAS;IACf,KAAKL,cAAc,CAACC,GAAG;MACrB,OAAOJ,aAAa,CAACW,gBAAgB;IACvC,KAAKR,cAAc,CAACE,SAAS;MAC3B,OAAOH,mBAAmB,CAACS,gBAAgB;IAC7C,KAAKR,cAAc,CAACG,QAAQ;MAC1B,OAAOL,kBAAkB,CAACU,gBAAgB;IAC5C;IACA;MACE,MAAM,IAAIZ,cAAc,CAAC,sBAAsBS,SAAS,EAAE,CAAC;IAC7D;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,cAAc,CAACS,mBAAmB,GAAG,UAAUJ,SAAS,EAAE;EACxD,QAAQA,SAAS;IACf,KAAKL,cAAc,CAACC,GAAG;MACrB,OAAOJ,aAAa;IACtB,KAAKG,cAAc,CAACE,SAAS;MAC3B,OAAOH,mBAAmB;IAC5B,KAAKC,cAAc,CAACG,QAAQ;MAC1B,OAAOL,kBAAkB;IAC3B;IACA;MACE,MAAM,IAAIF,cAAc,CAAC,sBAAsBS,SAAS,EAAE,CAAC;IAC7D;EACF;AACF,CAAC;AAED,eAAeK,MAAM,CAACC,MAAM,CAACX,cAAc,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}