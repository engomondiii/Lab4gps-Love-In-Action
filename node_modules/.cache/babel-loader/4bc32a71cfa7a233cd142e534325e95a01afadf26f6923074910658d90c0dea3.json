{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport defined from \"../Core/defined.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport hasExtension from \"./hasExtension.js\";\nimport ImplicitSubdivisionScheme from \"./ImplicitSubdivisionScheme.js\";\n\n/**\n * An ImplicitTileset is a simple struct that stores information about the\n * structure of a single implicit tileset. This includes template URIs for\n * locating resources, details from the implicit root tile (bounding volume,\n * geometricError, etc.), and details about the subtrees (e.g. subtreeLevels,\n * subdivisionScheme).\n *\n * @alias ImplicitTileset\n * @constructor\n *\n * @param {Resource} baseResource The base resource for the tileset\n * @param {object} tileJson The JSON header of the tile with either implicit tiling (3D Tiles 1.1) or the 3DTILES_implicit_tiling extension.\n * @param {MetadataSchema} [metadataSchema] The metadata schema containing the implicit tile metadata class.\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction ImplicitTileset(baseResource, tileJson, metadataSchema) {\n  const implicitTiling = hasExtension(tileJson, \"3DTILES_implicit_tiling\") ? tileJson.extensions[\"3DTILES_implicit_tiling\"] : tileJson.implicitTiling;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"implicitTiling\", implicitTiling);\n  //>>includeEnd('debug');\n\n  /**\n   * The base resource for the tileset. This is stored here as it is needed\n   * later when expanding Implicit3DTileContents so tile URLs are relative\n   * to the tileset, not the subtree file.\n   *\n   * @type {Resource}\n   * @readonly\n   * @private\n   */\n  this.baseResource = baseResource;\n\n  /**\n   * The geometric error of the root tile\n   *\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  this.geometricError = tileJson.geometricError;\n\n  /**\n   * The metadata schema containing the implicit tile metadata class.\n   *\n   * @type {MetadataSchema|undefined}\n   * @readonly\n   * @private\n   */\n  this.metadataSchema = metadataSchema;\n\n  // Due to using explicit tile metadata to store a tight bounding box\n  // in some cases (see https://github.com/CesiumGS/cesium/pull/11365)\n  // it's important that this bounding volume is computed from the tile JSON\n  // (which is the original, possibly loose bounding volume) rather than\n  // tile.boundingVolume which is the tighter one.\n  const boundingVolume = tileJson.boundingVolume;\n  if (!defined(boundingVolume.box) && !defined(boundingVolume.region) && !hasExtension(boundingVolume, \"3DTILES_bounding_volume_S2\") && !hasExtension(boundingVolume, \"3DTILES_bounding_volume_cylinder\")) {\n    throw new RuntimeError(\"Only box, region, 3DTILES_bounding_volume_S2, and 3DTILES_bounding_volume_cylinder are supported for implicit tiling\");\n  }\n\n  /**\n   * The JSON representation of a bounding volume. This is either a box or a\n   * region.\n   *\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  this.boundingVolume = boundingVolume;\n\n  /**\n   * The refine strategy as a string, either 'ADD' or 'REPLACE'\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  this.refine = tileJson.refine;\n\n  /**\n   * Template URI for the subtree resources, e.g.\n   * <code>https://example.com/{level}/{x}/{y}.subtree</code>\n   *\n   * @type {Resource}\n   * @readonly\n   * @private\n   */\n\n  this.subtreeUriTemplate = new Resource({\n    url: implicitTiling.subtrees.uri\n  });\n\n  /**\n   * Template URIs for locating content resources, e.g.\n   * <code>https://example.com/{level}/{x}/{y}.b3dm</code>.\n   * <p>\n   * This is an array to support multiple contents.\n   * </p>\n   *\n   * @type {Resource[]}\n   * @readonly\n   * @private\n   */\n  this.contentUriTemplates = [];\n\n  /**\n   * Store a copy of the content headers, so properties such as\n   * <code>extras</code> or <code>extensions</code> are preserved when\n   * {@link Cesium3DTile}s are created for each tile.\n   * <p>\n   * This is an array to support multiple contents.\n   * </p>\n   *\n   * @type {Object[]}\n   * @readonly\n   * @private\n   */\n  this.contentHeaders = [];\n  const contentHeaders = gatherContentHeaders(tileJson);\n  for (let i = 0; i < contentHeaders.length; i++) {\n    const contentHeader = contentHeaders[i];\n    this.contentHeaders.push(clone(contentHeader, true));\n    const contentResource = new Resource({\n      url: contentHeader.uri\n    });\n    this.contentUriTemplates.push(contentResource);\n  }\n\n  /**\n   * The maximum number of contents as well as content availability bitstreams.\n   * This is used for loop bounds when checking content availability.\n   *\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  this.contentCount = this.contentHeaders.length;\n\n  /**\n   * Stores a copy of the root implicit tile's JSON header. This is used\n   * as a template for creating {@link Cesium3DTile}s. The following properties\n   * are removed:\n   *\n   * <ul>\n   * <li><code>tile.implicitTiling</code> to prevent infinite loops of implicit tiling</li>\n   * <li><code>tile.extensions[\"3DTILES_implicit_tiling\"]</code>, if used instead of tile.implicitTiling</li>\n   * <li><code>tile.contents</code>, since contents are handled separately</li>\n   * <li><code>tile.content</code>, if used instead of tile.contents</li>\n   * <li><code>tile.extensions[\"3DTILES_multiple_contents\"]</code>, if used instead of tile.contents or tile.content</li>\n   * </ul>\n   *\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  this.tileHeader = makeTileHeaderTemplate(tileJson);\n\n  /**\n   * The subdivision scheme for this implicit tileset; either OCTREE or QUADTREE\n   *\n   * @type {ImplicitSubdivisionScheme}\n   * @readonly\n   * @private\n   */\n  this.subdivisionScheme = ImplicitSubdivisionScheme[implicitTiling.subdivisionScheme];\n\n  /**\n   * The branching factor for this tileset. Either 4 for quadtrees or 8 for\n   * octrees.\n   *\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  this.branchingFactor = ImplicitSubdivisionScheme.getBranchingFactor(this.subdivisionScheme);\n\n  /**\n   * How many distinct levels within each subtree. For example, a quadtree\n   * with subtreeLevels = 2 will have 5 nodes per quadtree (1 root + 4 children)\n   *\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  this.subtreeLevels = implicitTiling.subtreeLevels;\n\n  /**\n   * The number of levels containing available tiles in the tileset.\n   *\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  if (defined(implicitTiling.availableLevels)) {\n    this.availableLevels = implicitTiling.availableLevels;\n  } else {\n    this.availableLevels = implicitTiling.maximumLevel + 1;\n  }\n}\n\n/**\n * Gather JSON headers for all contents in the tile.\n * This handles both regular tiles and tiles with multiple contents, either\n * in the contents array (3D Tiles 1.1) or the `3DTILES_multiple_contents` extension\n *\n * @param {object} tileJson The JSON header of the tile with either implicit tiling (3D Tiles 1.1) or the 3DTILES_implicit_tiling extension.\n * @return {Object[]} An array of JSON headers for the contents of each tile\n * @private\n */\nfunction gatherContentHeaders(tileJson) {\n  if (hasExtension(tileJson, \"3DTILES_multiple_contents\")) {\n    const extension = tileJson.extensions[\"3DTILES_multiple_contents\"];\n    return defined(extension.contents) ? extension.contents : extension.content;\n  }\n  if (defined(tileJson.contents)) {\n    return tileJson.contents;\n  }\n  if (defined(tileJson.content)) {\n    return [tileJson.content];\n  }\n  return [];\n}\nfunction makeTileHeaderTemplate(tileJson) {\n  const template = clone(tileJson, true);\n\n  // Remove the implicit tiling extension to prevent infinite loops,\n  // as well as content-related properties since content is handled separately\n  if (defined(template.extensions)) {\n    delete template.extensions[\"3DTILES_implicit_tiling\"];\n    delete template.extensions[\"3DTILES_multiple_contents\"];\n\n    // if there are no other extensions, remove the extensions property to\n    // keep each tile simple\n    if (Object.keys(template.extensions).length === 0) {\n      delete template.extensions;\n    }\n  }\n  delete template.implicitTiling;\n  delete template.contents;\n  delete template.content;\n  return template;\n}\nexport default ImplicitTileset;","map":{"version":3,"names":["Check","clone","defined","Resource","RuntimeError","hasExtension","ImplicitSubdivisionScheme","ImplicitTileset","baseResource","tileJson","metadataSchema","implicitTiling","extensions","typeOf","object","geometricError","boundingVolume","box","region","refine","subtreeUriTemplate","url","subtrees","uri","contentUriTemplates","contentHeaders","gatherContentHeaders","i","length","contentHeader","push","contentResource","contentCount","tileHeader","makeTileHeaderTemplate","subdivisionScheme","branchingFactor","getBranchingFactor","subtreeLevels","availableLevels","maximumLevel","extension","contents","content","template","Object","keys"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ImplicitTileset.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport defined from \"../Core/defined.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport hasExtension from \"./hasExtension.js\";\nimport ImplicitSubdivisionScheme from \"./ImplicitSubdivisionScheme.js\";\n\n/**\n * An ImplicitTileset is a simple struct that stores information about the\n * structure of a single implicit tileset. This includes template URIs for\n * locating resources, details from the implicit root tile (bounding volume,\n * geometricError, etc.), and details about the subtrees (e.g. subtreeLevels,\n * subdivisionScheme).\n *\n * @alias ImplicitTileset\n * @constructor\n *\n * @param {Resource} baseResource The base resource for the tileset\n * @param {object} tileJson The JSON header of the tile with either implicit tiling (3D Tiles 1.1) or the 3DTILES_implicit_tiling extension.\n * @param {MetadataSchema} [metadataSchema] The metadata schema containing the implicit tile metadata class.\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction ImplicitTileset(baseResource, tileJson, metadataSchema) {\n  const implicitTiling = hasExtension(tileJson, \"3DTILES_implicit_tiling\")\n    ? tileJson.extensions[\"3DTILES_implicit_tiling\"]\n    : tileJson.implicitTiling;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"implicitTiling\", implicitTiling);\n  //>>includeEnd('debug');\n\n  /**\n   * The base resource for the tileset. This is stored here as it is needed\n   * later when expanding Implicit3DTileContents so tile URLs are relative\n   * to the tileset, not the subtree file.\n   *\n   * @type {Resource}\n   * @readonly\n   * @private\n   */\n  this.baseResource = baseResource;\n\n  /**\n   * The geometric error of the root tile\n   *\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  this.geometricError = tileJson.geometricError;\n\n  /**\n   * The metadata schema containing the implicit tile metadata class.\n   *\n   * @type {MetadataSchema|undefined}\n   * @readonly\n   * @private\n   */\n  this.metadataSchema = metadataSchema;\n\n  // Due to using explicit tile metadata to store a tight bounding box\n  // in some cases (see https://github.com/CesiumGS/cesium/pull/11365)\n  // it's important that this bounding volume is computed from the tile JSON\n  // (which is the original, possibly loose bounding volume) rather than\n  // tile.boundingVolume which is the tighter one.\n  const boundingVolume = tileJson.boundingVolume;\n  if (\n    !defined(boundingVolume.box) &&\n    !defined(boundingVolume.region) &&\n    !hasExtension(boundingVolume, \"3DTILES_bounding_volume_S2\") &&\n    !hasExtension(boundingVolume, \"3DTILES_bounding_volume_cylinder\")\n  ) {\n    throw new RuntimeError(\n      \"Only box, region, 3DTILES_bounding_volume_S2, and 3DTILES_bounding_volume_cylinder are supported for implicit tiling\",\n    );\n  }\n\n  /**\n   * The JSON representation of a bounding volume. This is either a box or a\n   * region.\n   *\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  this.boundingVolume = boundingVolume;\n\n  /**\n   * The refine strategy as a string, either 'ADD' or 'REPLACE'\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  this.refine = tileJson.refine;\n\n  /**\n   * Template URI for the subtree resources, e.g.\n   * <code>https://example.com/{level}/{x}/{y}.subtree</code>\n   *\n   * @type {Resource}\n   * @readonly\n   * @private\n   */\n\n  this.subtreeUriTemplate = new Resource({ url: implicitTiling.subtrees.uri });\n\n  /**\n   * Template URIs for locating content resources, e.g.\n   * <code>https://example.com/{level}/{x}/{y}.b3dm</code>.\n   * <p>\n   * This is an array to support multiple contents.\n   * </p>\n   *\n   * @type {Resource[]}\n   * @readonly\n   * @private\n   */\n  this.contentUriTemplates = [];\n\n  /**\n   * Store a copy of the content headers, so properties such as\n   * <code>extras</code> or <code>extensions</code> are preserved when\n   * {@link Cesium3DTile}s are created for each tile.\n   * <p>\n   * This is an array to support multiple contents.\n   * </p>\n   *\n   * @type {Object[]}\n   * @readonly\n   * @private\n   */\n  this.contentHeaders = [];\n\n  const contentHeaders = gatherContentHeaders(tileJson);\n  for (let i = 0; i < contentHeaders.length; i++) {\n    const contentHeader = contentHeaders[i];\n    this.contentHeaders.push(clone(contentHeader, true));\n    const contentResource = new Resource({ url: contentHeader.uri });\n    this.contentUriTemplates.push(contentResource);\n  }\n\n  /**\n   * The maximum number of contents as well as content availability bitstreams.\n   * This is used for loop bounds when checking content availability.\n   *\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  this.contentCount = this.contentHeaders.length;\n\n  /**\n   * Stores a copy of the root implicit tile's JSON header. This is used\n   * as a template for creating {@link Cesium3DTile}s. The following properties\n   * are removed:\n   *\n   * <ul>\n   * <li><code>tile.implicitTiling</code> to prevent infinite loops of implicit tiling</li>\n   * <li><code>tile.extensions[\"3DTILES_implicit_tiling\"]</code>, if used instead of tile.implicitTiling</li>\n   * <li><code>tile.contents</code>, since contents are handled separately</li>\n   * <li><code>tile.content</code>, if used instead of tile.contents</li>\n   * <li><code>tile.extensions[\"3DTILES_multiple_contents\"]</code>, if used instead of tile.contents or tile.content</li>\n   * </ul>\n   *\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  this.tileHeader = makeTileHeaderTemplate(tileJson);\n\n  /**\n   * The subdivision scheme for this implicit tileset; either OCTREE or QUADTREE\n   *\n   * @type {ImplicitSubdivisionScheme}\n   * @readonly\n   * @private\n   */\n  this.subdivisionScheme =\n    ImplicitSubdivisionScheme[implicitTiling.subdivisionScheme];\n\n  /**\n   * The branching factor for this tileset. Either 4 for quadtrees or 8 for\n   * octrees.\n   *\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  this.branchingFactor = ImplicitSubdivisionScheme.getBranchingFactor(\n    this.subdivisionScheme,\n  );\n\n  /**\n   * How many distinct levels within each subtree. For example, a quadtree\n   * with subtreeLevels = 2 will have 5 nodes per quadtree (1 root + 4 children)\n   *\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  this.subtreeLevels = implicitTiling.subtreeLevels;\n\n  /**\n   * The number of levels containing available tiles in the tileset.\n   *\n   * @type {number}\n   * @readonly\n   * @private\n   */\n  if (defined(implicitTiling.availableLevels)) {\n    this.availableLevels = implicitTiling.availableLevels;\n  } else {\n    this.availableLevels = implicitTiling.maximumLevel + 1;\n  }\n}\n\n/**\n * Gather JSON headers for all contents in the tile.\n * This handles both regular tiles and tiles with multiple contents, either\n * in the contents array (3D Tiles 1.1) or the `3DTILES_multiple_contents` extension\n *\n * @param {object} tileJson The JSON header of the tile with either implicit tiling (3D Tiles 1.1) or the 3DTILES_implicit_tiling extension.\n * @return {Object[]} An array of JSON headers for the contents of each tile\n * @private\n */\nfunction gatherContentHeaders(tileJson) {\n  if (hasExtension(tileJson, \"3DTILES_multiple_contents\")) {\n    const extension = tileJson.extensions[\"3DTILES_multiple_contents\"];\n    return defined(extension.contents) ? extension.contents : extension.content;\n  }\n\n  if (defined(tileJson.contents)) {\n    return tileJson.contents;\n  }\n\n  if (defined(tileJson.content)) {\n    return [tileJson.content];\n  }\n\n  return [];\n}\n\nfunction makeTileHeaderTemplate(tileJson) {\n  const template = clone(tileJson, true);\n\n  // Remove the implicit tiling extension to prevent infinite loops,\n  // as well as content-related properties since content is handled separately\n  if (defined(template.extensions)) {\n    delete template.extensions[\"3DTILES_implicit_tiling\"];\n    delete template.extensions[\"3DTILES_multiple_contents\"];\n\n    // if there are no other extensions, remove the extensions property to\n    // keep each tile simple\n    if (Object.keys(template.extensions).length === 0) {\n      delete template.extensions;\n    }\n  }\n\n  delete template.implicitTiling;\n  delete template.contents;\n  delete template.content;\n\n  return template;\n}\n\nexport default ImplicitTileset;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}