{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport PerspectiveOffCenterFrustum from \"./PerspectiveOffCenterFrustum.js\";\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias PerspectiveFrustum\n * @constructor\n *\n * @param {object} [options] An object with the following properties:\n * @param {number} [options.fov] The angle of the field of view (FOV), in radians.\n * @param {number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\n * @param {number} [options.near=1.0] The distance of the near plane.\n * @param {number} [options.far=500000000.0] The distance of the far plane.\n * @param {number} [options.xOffset=0.0] The offset in the x direction.\n * @param {number} [options.yOffset=0.0] The offset in the y direction.\n *\n * @example\n * const frustum = new Cesium.PerspectiveFrustum({\n *     fov : Cesium.Math.PI_OVER_THREE,\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n *     near : 1.0,\n *     far : 1000.0\n * });\n *\n * @see PerspectiveOffCenterFrustum\n */\nfunction PerspectiveFrustum(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n\n  /**\n   * The angle of the field of view (FOV), in radians.  This angle will be used\n   * as the horizontal FOV if the width is greater than the height, otherwise\n   * it will be the vertical FOV.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.fov = options.fov;\n  this._fov = undefined;\n  this._fovy = undefined;\n  this._sseDenominator = undefined;\n\n  /**\n   * The aspect ratio of the frustum's width to it's height.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.aspectRatio = options.aspectRatio;\n  this._aspectRatio = undefined;\n\n  /**\n   * The distance of the near plane.\n   * @type {number}\n   * @default 1.0\n   */\n  this.near = defaultValue(options.near, 1.0);\n  this._near = this.near;\n\n  /**\n   * The distance of the far plane.\n   * @type {number}\n   * @default 500000000.0\n   */\n  this.far = defaultValue(options.far, 500000000.0);\n  this._far = this.far;\n\n  /**\n   * Offsets the frustum in the x direction.\n   * @type {number}\n   * @default 0.0\n   */\n  this.xOffset = defaultValue(options.xOffset, 0.0);\n  this._xOffset = this.xOffset;\n\n  /**\n   * Offsets the frustum in the y direction.\n   * @type {number}\n   * @default 0.0\n   */\n  this.yOffset = defaultValue(options.yOffset, 0.0);\n  this._yOffset = this.yOffset;\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nPerspectiveFrustum.packedLength = 6;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PerspectiveFrustum} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nPerspectiveFrustum.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.fov;\n  array[startingIndex++] = value.aspectRatio;\n  array[startingIndex++] = value.near;\n  array[startingIndex++] = value.far;\n  array[startingIndex++] = value.xOffset;\n  array[startingIndex] = value.yOffset;\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PerspectiveFrustum} [result] The object into which to store the result.\n * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n */\nPerspectiveFrustum.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  if (!defined(result)) {\n    result = new PerspectiveFrustum();\n  }\n  result.fov = array[startingIndex++];\n  result.aspectRatio = array[startingIndex++];\n  result.near = array[startingIndex++];\n  result.far = array[startingIndex++];\n  result.xOffset = array[startingIndex++];\n  result.yOffset = array[startingIndex];\n  return result;\n};\nfunction update(frustum) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(frustum.fov) || !defined(frustum.aspectRatio) || !defined(frustum.near) || !defined(frustum.far)) {\n    throw new DeveloperError(\"fov, aspectRatio, near, or far parameters are not set.\");\n  }\n  //>>includeEnd('debug');\n\n  const changed = frustum.fov !== frustum._fov || frustum.aspectRatio !== frustum._aspectRatio || frustum.near !== frustum._near || frustum.far !== frustum._far || frustum.xOffset !== frustum._xOffset || frustum.yOffset !== frustum._yOffset;\n  if (!changed) {\n    return;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"fov\", frustum.fov, 0.0);\n  Check.typeOf.number.lessThan(\"fov\", frustum.fov, Math.PI);\n  Check.typeOf.number.greaterThanOrEquals(\"aspectRatio\", frustum.aspectRatio, 0.0);\n  Check.typeOf.number.greaterThanOrEquals(\"near\", frustum.near, 0.0);\n  if (frustum.near > frustum.far) {\n    throw new DeveloperError(\"near must be less than far.\");\n  }\n  //>>includeEnd('debug');\n\n  frustum._aspectRatio = frustum.aspectRatio;\n  frustum._fov = frustum.fov;\n  frustum._fovy = frustum.aspectRatio <= 1 ? frustum.fov : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\n  frustum._near = frustum.near;\n  frustum._far = frustum.far;\n  frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\n  frustum._xOffset = frustum.xOffset;\n  frustum._yOffset = frustum.yOffset;\n  const f = frustum._offCenterFrustum;\n  f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\n  f.bottom = -f.top;\n  f.right = frustum.aspectRatio * f.top;\n  f.left = -f.right;\n  f.near = frustum.near;\n  f.far = frustum.far;\n  f.right += frustum.xOffset;\n  f.left += frustum.xOffset;\n  f.top += frustum.yOffset;\n  f.bottom += frustum.yOffset;\n}\nObject.defineProperties(PerspectiveFrustum.prototype, {\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * If necessary, the projection matrix will be recomputed.\n   *\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveOffCenterFrustum#projectionMatrix.\n   * @see PerspectiveFrustum#infiniteProjectionMatrix\n   */\n  projectionMatrix: {\n    get: function () {\n      update(this);\n      return this._offCenterFrustum.projectionMatrix;\n    }\n  },\n  /**\n   * The perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveFrustum#projectionMatrix\n   */\n  infiniteProjectionMatrix: {\n    get: function () {\n      update(this);\n      return this._offCenterFrustum.infiniteProjectionMatrix;\n    }\n  },\n  /**\n   * Gets the angle of the vertical field of view, in radians.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {number|undefined}\n   * @readonly\n   * @default undefined\n   */\n  fovy: {\n    get: function () {\n      update(this);\n      return this._fovy;\n    }\n  },\n  /**\n   * @readonly\n   * @private\n   */\n  sseDenominator: {\n    get: function () {\n      update(this);\n      return this._sseDenominator;\n    }\n  },\n  /**\n   * Gets the orthographic projection matrix computed from the view frustum.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {PerspectiveOffCenterFrustum}\n   * @readonly\n   * @private\n   */\n  offCenterFrustum: {\n    get: function () {\n      update(this);\n      return this._offCenterFrustum;\n    }\n  }\n});\n\n/**\n * Creates a culling volume for this frustum.\n *\n * @param {Cartesian3} position The eye position.\n * @param {Cartesian3} direction The view direction.\n * @param {Cartesian3} up The up direction.\n * @returns {CullingVolume} A culling volume at the given position and orientation.\n *\n * @example\n * // Check if a bounding volume intersects the frustum.\n * const cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n * const intersect = cullingVolume.computeVisibility(boundingVolume);\n */\nPerspectiveFrustum.prototype.computeCullingVolume = function (position, direction, up) {\n  update(this);\n  return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n};\n\n/**\n * Returns the pixel's width and height in meters.\n *\n * @param {number} drawingBufferWidth The width of the drawing buffer.\n * @param {number} drawingBufferHeight The height of the drawing buffer.\n * @param {number} distance The distance to the near plane in meters.\n * @param {number} pixelRatio The scaling factor from pixel space to coordinate space.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n *\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n * @exception {DeveloperError} pixelRatio must be greater than zero.\n *\n * @example\n * // Example 1\n * // Get the width and height of a pixel.\n * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, scene.pixelRatio, new Cesium.Cartesian2());\n *\n * @example\n * // Example 2\n * // Get the width and height of a pixel if the near plane was set to 'distance'.\n * // For example, get the size of a pixel of an image on a billboard.\n * const position = camera.position;\n * const direction = camera.direction;\n * const toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\n * const toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\n * const distance = Cesium.Cartesian3.magnitude(toCenterProj);\n * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, scene.pixelRatio, new Cesium.Cartesian2());\n */\nPerspectiveFrustum.prototype.getPixelDimensions = function (drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\n  update(this);\n  return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result);\n};\n\n/**\n * Returns a duplicate of a PerspectiveFrustum instance.\n *\n * @param {PerspectiveFrustum} [result] The object onto which to store the result.\n * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n */\nPerspectiveFrustum.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new PerspectiveFrustum();\n  }\n  result.aspectRatio = this.aspectRatio;\n  result.fov = this.fov;\n  result.near = this.near;\n  result.far = this.far;\n\n  // force update of clone to compute matrices\n  result._aspectRatio = undefined;\n  result._fov = undefined;\n  result._near = undefined;\n  result._far = undefined;\n  this._offCenterFrustum.clone(result._offCenterFrustum);\n  return result;\n};\n\n/**\n * Compares the provided PerspectiveFrustum componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {PerspectiveFrustum} [other] The right hand side PerspectiveFrustum.\n * @returns {boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nPerspectiveFrustum.prototype.equals = function (other) {\n  if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n    return false;\n  }\n  update(this);\n  update(other);\n  return this.fov === other.fov && this.aspectRatio === other.aspectRatio && this._offCenterFrustum.equals(other._offCenterFrustum);\n};\n\n/**\n * Compares the provided PerspectiveFrustum componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {PerspectiveFrustum} other The right hand side PerspectiveFrustum.\n * @param {number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n */\nPerspectiveFrustum.prototype.equalsEpsilon = function (other, relativeEpsilon, absoluteEpsilon) {\n  if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n    return false;\n  }\n  update(this);\n  update(other);\n  return CesiumMath.equalsEpsilon(this.fov, other.fov, relativeEpsilon, absoluteEpsilon) && CesiumMath.equalsEpsilon(this.aspectRatio, other.aspectRatio, relativeEpsilon, absoluteEpsilon) && this._offCenterFrustum.equalsEpsilon(other._offCenterFrustum, relativeEpsilon, absoluteEpsilon);\n};\nexport default PerspectiveFrustum;","map":{"version":3,"names":["Check","defaultValue","defined","DeveloperError","CesiumMath","PerspectiveOffCenterFrustum","PerspectiveFrustum","options","EMPTY_OBJECT","_offCenterFrustum","fov","_fov","undefined","_fovy","_sseDenominator","aspectRatio","_aspectRatio","near","_near","far","_far","xOffset","_xOffset","yOffset","_yOffset","packedLength","pack","value","array","startingIndex","typeOf","object","unpack","result","update","frustum","changed","number","greaterThanOrEquals","lessThan","Math","PI","atan","tan","f","top","bottom","right","left","Object","defineProperties","prototype","projectionMatrix","get","infiniteProjectionMatrix","fovy","sseDenominator","offCenterFrustum","computeCullingVolume","position","direction","up","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","pixelRatio","clone","equals","other","equalsEpsilon","relativeEpsilon","absoluteEpsilon"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/PerspectiveFrustum.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport PerspectiveOffCenterFrustum from \"./PerspectiveOffCenterFrustum.js\";\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias PerspectiveFrustum\n * @constructor\n *\n * @param {object} [options] An object with the following properties:\n * @param {number} [options.fov] The angle of the field of view (FOV), in radians.\n * @param {number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\n * @param {number} [options.near=1.0] The distance of the near plane.\n * @param {number} [options.far=500000000.0] The distance of the far plane.\n * @param {number} [options.xOffset=0.0] The offset in the x direction.\n * @param {number} [options.yOffset=0.0] The offset in the y direction.\n *\n * @example\n * const frustum = new Cesium.PerspectiveFrustum({\n *     fov : Cesium.Math.PI_OVER_THREE,\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n *     near : 1.0,\n *     far : 1000.0\n * });\n *\n * @see PerspectiveOffCenterFrustum\n */\nfunction PerspectiveFrustum(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n\n  /**\n   * The angle of the field of view (FOV), in radians.  This angle will be used\n   * as the horizontal FOV if the width is greater than the height, otherwise\n   * it will be the vertical FOV.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.fov = options.fov;\n  this._fov = undefined;\n  this._fovy = undefined;\n\n  this._sseDenominator = undefined;\n\n  /**\n   * The aspect ratio of the frustum's width to it's height.\n   * @type {number|undefined}\n   * @default undefined\n   */\n  this.aspectRatio = options.aspectRatio;\n  this._aspectRatio = undefined;\n\n  /**\n   * The distance of the near plane.\n   * @type {number}\n   * @default 1.0\n   */\n  this.near = defaultValue(options.near, 1.0);\n  this._near = this.near;\n\n  /**\n   * The distance of the far plane.\n   * @type {number}\n   * @default 500000000.0\n   */\n  this.far = defaultValue(options.far, 500000000.0);\n  this._far = this.far;\n\n  /**\n   * Offsets the frustum in the x direction.\n   * @type {number}\n   * @default 0.0\n   */\n  this.xOffset = defaultValue(options.xOffset, 0.0);\n  this._xOffset = this.xOffset;\n\n  /**\n   * Offsets the frustum in the y direction.\n   * @type {number}\n   * @default 0.0\n   */\n  this.yOffset = defaultValue(options.yOffset, 0.0);\n  this._yOffset = this.yOffset;\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nPerspectiveFrustum.packedLength = 6;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PerspectiveFrustum} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nPerspectiveFrustum.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.fov;\n  array[startingIndex++] = value.aspectRatio;\n  array[startingIndex++] = value.near;\n  array[startingIndex++] = value.far;\n  array[startingIndex++] = value.xOffset;\n  array[startingIndex] = value.yOffset;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PerspectiveFrustum} [result] The object into which to store the result.\n * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n */\nPerspectiveFrustum.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new PerspectiveFrustum();\n  }\n\n  result.fov = array[startingIndex++];\n  result.aspectRatio = array[startingIndex++];\n  result.near = array[startingIndex++];\n  result.far = array[startingIndex++];\n  result.xOffset = array[startingIndex++];\n  result.yOffset = array[startingIndex];\n\n  return result;\n};\n\nfunction update(frustum) {\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    !defined(frustum.fov) ||\n    !defined(frustum.aspectRatio) ||\n    !defined(frustum.near) ||\n    !defined(frustum.far)\n  ) {\n    throw new DeveloperError(\n      \"fov, aspectRatio, near, or far parameters are not set.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const changed =\n    frustum.fov !== frustum._fov ||\n    frustum.aspectRatio !== frustum._aspectRatio ||\n    frustum.near !== frustum._near ||\n    frustum.far !== frustum._far ||\n    frustum.xOffset !== frustum._xOffset ||\n    frustum.yOffset !== frustum._yOffset;\n\n  if (!changed) {\n    return;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"fov\", frustum.fov, 0.0);\n  Check.typeOf.number.lessThan(\"fov\", frustum.fov, Math.PI);\n\n  Check.typeOf.number.greaterThanOrEquals(\n    \"aspectRatio\",\n    frustum.aspectRatio,\n    0.0,\n  );\n\n  Check.typeOf.number.greaterThanOrEquals(\"near\", frustum.near, 0.0);\n  if (frustum.near > frustum.far) {\n    throw new DeveloperError(\"near must be less than far.\");\n  }\n  //>>includeEnd('debug');\n\n  frustum._aspectRatio = frustum.aspectRatio;\n  frustum._fov = frustum.fov;\n  frustum._fovy =\n    frustum.aspectRatio <= 1\n      ? frustum.fov\n      : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\n  frustum._near = frustum.near;\n  frustum._far = frustum.far;\n  frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\n  frustum._xOffset = frustum.xOffset;\n  frustum._yOffset = frustum.yOffset;\n\n  const f = frustum._offCenterFrustum;\n\n  f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\n  f.bottom = -f.top;\n  f.right = frustum.aspectRatio * f.top;\n  f.left = -f.right;\n  f.near = frustum.near;\n  f.far = frustum.far;\n\n  f.right += frustum.xOffset;\n  f.left += frustum.xOffset;\n  f.top += frustum.yOffset;\n  f.bottom += frustum.yOffset;\n}\n\nObject.defineProperties(PerspectiveFrustum.prototype, {\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * If necessary, the projection matrix will be recomputed.\n   *\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveOffCenterFrustum#projectionMatrix.\n   * @see PerspectiveFrustum#infiniteProjectionMatrix\n   */\n  projectionMatrix: {\n    get: function () {\n      update(this);\n      return this._offCenterFrustum.projectionMatrix;\n    },\n  },\n\n  /**\n   * The perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveFrustum#projectionMatrix\n   */\n  infiniteProjectionMatrix: {\n    get: function () {\n      update(this);\n      return this._offCenterFrustum.infiniteProjectionMatrix;\n    },\n  },\n\n  /**\n   * Gets the angle of the vertical field of view, in radians.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {number|undefined}\n   * @readonly\n   * @default undefined\n   */\n  fovy: {\n    get: function () {\n      update(this);\n      return this._fovy;\n    },\n  },\n\n  /**\n   * @readonly\n   * @private\n   */\n  sseDenominator: {\n    get: function () {\n      update(this);\n      return this._sseDenominator;\n    },\n  },\n\n  /**\n   * Gets the orthographic projection matrix computed from the view frustum.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {PerspectiveOffCenterFrustum}\n   * @readonly\n   * @private\n   */\n  offCenterFrustum: {\n    get: function () {\n      update(this);\n      return this._offCenterFrustum;\n    },\n  },\n});\n\n/**\n * Creates a culling volume for this frustum.\n *\n * @param {Cartesian3} position The eye position.\n * @param {Cartesian3} direction The view direction.\n * @param {Cartesian3} up The up direction.\n * @returns {CullingVolume} A culling volume at the given position and orientation.\n *\n * @example\n * // Check if a bounding volume intersects the frustum.\n * const cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n * const intersect = cullingVolume.computeVisibility(boundingVolume);\n */\nPerspectiveFrustum.prototype.computeCullingVolume = function (\n  position,\n  direction,\n  up,\n) {\n  update(this);\n  return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n};\n\n/**\n * Returns the pixel's width and height in meters.\n *\n * @param {number} drawingBufferWidth The width of the drawing buffer.\n * @param {number} drawingBufferHeight The height of the drawing buffer.\n * @param {number} distance The distance to the near plane in meters.\n * @param {number} pixelRatio The scaling factor from pixel space to coordinate space.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n *\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n * @exception {DeveloperError} pixelRatio must be greater than zero.\n *\n * @example\n * // Example 1\n * // Get the width and height of a pixel.\n * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, scene.pixelRatio, new Cesium.Cartesian2());\n *\n * @example\n * // Example 2\n * // Get the width and height of a pixel if the near plane was set to 'distance'.\n * // For example, get the size of a pixel of an image on a billboard.\n * const position = camera.position;\n * const direction = camera.direction;\n * const toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\n * const toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\n * const distance = Cesium.Cartesian3.magnitude(toCenterProj);\n * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, scene.pixelRatio, new Cesium.Cartesian2());\n */\nPerspectiveFrustum.prototype.getPixelDimensions = function (\n  drawingBufferWidth,\n  drawingBufferHeight,\n  distance,\n  pixelRatio,\n  result,\n) {\n  update(this);\n  return this._offCenterFrustum.getPixelDimensions(\n    drawingBufferWidth,\n    drawingBufferHeight,\n    distance,\n    pixelRatio,\n    result,\n  );\n};\n\n/**\n * Returns a duplicate of a PerspectiveFrustum instance.\n *\n * @param {PerspectiveFrustum} [result] The object onto which to store the result.\n * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n */\nPerspectiveFrustum.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new PerspectiveFrustum();\n  }\n\n  result.aspectRatio = this.aspectRatio;\n  result.fov = this.fov;\n  result.near = this.near;\n  result.far = this.far;\n\n  // force update of clone to compute matrices\n  result._aspectRatio = undefined;\n  result._fov = undefined;\n  result._near = undefined;\n  result._far = undefined;\n\n  this._offCenterFrustum.clone(result._offCenterFrustum);\n\n  return result;\n};\n\n/**\n * Compares the provided PerspectiveFrustum componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {PerspectiveFrustum} [other] The right hand side PerspectiveFrustum.\n * @returns {boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nPerspectiveFrustum.prototype.equals = function (other) {\n  if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n    return false;\n  }\n\n  update(this);\n  update(other);\n\n  return (\n    this.fov === other.fov &&\n    this.aspectRatio === other.aspectRatio &&\n    this._offCenterFrustum.equals(other._offCenterFrustum)\n  );\n};\n\n/**\n * Compares the provided PerspectiveFrustum componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {PerspectiveFrustum} other The right hand side PerspectiveFrustum.\n * @param {number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n * @param {number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n */\nPerspectiveFrustum.prototype.equalsEpsilon = function (\n  other,\n  relativeEpsilon,\n  absoluteEpsilon,\n) {\n  if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n    return false;\n  }\n\n  update(this);\n  update(other);\n\n  return (\n    CesiumMath.equalsEpsilon(\n      this.fov,\n      other.fov,\n      relativeEpsilon,\n      absoluteEpsilon,\n    ) &&\n    CesiumMath.equalsEpsilon(\n      this.aspectRatio,\n      other.aspectRatio,\n      relativeEpsilon,\n      absoluteEpsilon,\n    ) &&\n    this._offCenterFrustum.equalsEpsilon(\n      other._offCenterFrustum,\n      relativeEpsilon,\n      absoluteEpsilon,\n    )\n  );\n};\nexport default PerspectiveFrustum;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}