{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractMatch } from './abstract-match';\nimport { httpSchemePrefixRe } from '../parser/uri-utils';\n/**\n * A regular expression used to remove the 'www.' from URLs.\n */\nvar wwwPrefixRegex = /^(https?:\\/\\/)?(www\\.)?/i;\n/**\n * The regular expression used to remove the protocol-relative '//' from a URL\n * string, for purposes of formatting the anchor text. A protocol-relative URL\n * is, for example, \"//yahoo.com\"\n */\nvar protocolRelativeRegex = /^\\/\\//;\n/**\n * @class Autolinker.match.Url\n * @extends Autolinker.match.AbstractMatch\n *\n * Represents a Url match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nvar UrlMatch = /** @class */function (_super) {\n  __extends(UrlMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n  function UrlMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @public\n     * @property {'url'} type\n     *\n     * A string name for the type of match that this class represents. Can be\n     * used in a TypeScript discriminating union to type-narrow from the\n     * `Match` type.\n     */\n    _this.type = 'url';\n    /**\n     * @cfg {String} url (required)\n     *\n     * The url that was matched.\n     */\n    _this.url = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {\"scheme\"/\"www\"/\"tld\"} urlMatchType (required)\n     *\n     * The type of URL match that this class represents. This helps to determine\n     * if the match was made in the original text with a prefixed scheme (ex:\n     * 'http://www.google.com'), a prefixed 'www' (ex: 'www.google.com'), or\n     * was matched by a known top-level domain (ex: 'google.com').\n     */\n    _this.urlMatchType = 'scheme'; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} protocolRelativeMatch (required)\n     *\n     * `true` if the URL is a protocol-relative match. A protocol-relative match\n     * is a URL that starts with '//', and will be either http:// or https://\n     * based on the protocol that the site is loaded under.\n     */\n    _this.protocolRelativeMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Object} stripPrefix (required)\n     *\n     * The Object form of {@link Autolinker#cfg-stripPrefix}.\n     */\n    _this.stripPrefix = {\n      scheme: true,\n      www: true\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} stripTrailingSlash (required)\n     * @inheritdoc Autolinker#cfg-stripTrailingSlash\n     */\n    _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} decodePercentEncoding (required)\n     * @inheritdoc Autolinker#cfg-decodePercentEncoding\n     */\n    _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @private\n     * @property {Boolean} protocolPrepended\n     *\n     * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n     * {@link #url} did not have a protocol)\n     */\n    _this.protocolPrepended = false;\n    _this.urlMatchType = cfg.urlMatchType;\n    _this.url = cfg.url;\n    _this.protocolRelativeMatch = cfg.protocolRelativeMatch;\n    _this.stripPrefix = cfg.stripPrefix;\n    _this.stripTrailingSlash = cfg.stripTrailingSlash;\n    _this.decodePercentEncoding = cfg.decodePercentEncoding;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of UrlMatch, returns 'url'.\n   *\n   * @return {String}\n   */\n  UrlMatch.prototype.getType = function () {\n    return 'url';\n  };\n  /**\n   * Returns a string name for the type of URL match that this class\n   * represents.\n   *\n   * This helps to determine if the match was made in the original text with a\n   * prefixed scheme (ex: 'http://www.google.com'), a prefixed 'www' (ex:\n   * 'www.google.com'), or was matched by a known top-level domain (ex:\n   * 'google.com').\n   *\n   * @return {\"scheme\"/\"www\"/\"tld\"}\n   */\n  UrlMatch.prototype.getUrlMatchType = function () {\n    return this.urlMatchType;\n  };\n  /**\n   * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n   * match was missing a protocol.\n   *\n   * @return {String}\n   */\n  UrlMatch.prototype.getUrl = function () {\n    var url = this.url;\n    // if the url string doesn't begin with a scheme, assume 'http://'\n    if (!this.protocolRelativeMatch && this.urlMatchType !== 'scheme' && !this.protocolPrepended) {\n      url = this.url = 'http://' + url;\n      this.protocolPrepended = true;\n    }\n    return url;\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n  UrlMatch.prototype.getAnchorHref = function () {\n    var url = this.getUrl();\n    return url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n  UrlMatch.prototype.getAnchorText = function () {\n    var anchorText = this.getMatchedText();\n    if (this.protocolRelativeMatch) {\n      // Strip off any protocol-relative '//' from the anchor text\n      anchorText = stripProtocolRelativePrefix(anchorText);\n    }\n    if (this.stripPrefix.scheme) {\n      anchorText = stripSchemePrefix(anchorText);\n    }\n    if (this.stripPrefix.www) {\n      anchorText = stripWwwPrefix(anchorText);\n    }\n    if (this.stripTrailingSlash) {\n      anchorText = removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n    }\n    if (this.decodePercentEncoding) {\n      anchorText = removePercentEncoding(anchorText);\n    }\n    return anchorText;\n  };\n  return UrlMatch;\n}(AbstractMatch);\nexport { UrlMatch };\n// Utility Functionality\n/**\n * Strips the scheme prefix (such as \"http://\" or \"https://\") from the given\n * `url`.\n *\n * @private\n * @param {String} url The text of the anchor that is being generated, for\n *   which to strip off the url scheme.\n * @return {String} The `url`, with the scheme stripped.\n */\nfunction stripSchemePrefix(url) {\n  return url.replace(httpSchemePrefixRe, '');\n}\n/**\n * Strips the 'www' prefix from the given `url`.\n *\n * @private\n * @param {String} url The text of the anchor that is being generated, for\n *   which to strip off the 'www' if it exists.\n * @return {String} The `url`, with the 'www' stripped.\n */\nfunction stripWwwPrefix(url) {\n  return url.replace(wwwPrefixRegex, '$1'); // leave any scheme ($1), it one exists\n}\n/**\n * Strips any protocol-relative '//' from the anchor text.\n *\n * @private\n * @param {String} text The text of the anchor that is being generated, for which to strip off the\n *   protocol-relative prefix (such as stripping off \"//\")\n * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n */\nfunction stripProtocolRelativePrefix(text) {\n  return text.replace(protocolRelativeRegex, '');\n}\n/**\n * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n *\n * @private\n * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n *   slash ('/') that may exist.\n * @return {String} The `anchorText`, with the trailing slash removed.\n */\nfunction removeTrailingSlash(anchorText) {\n  if (anchorText.charAt(anchorText.length - 1) === '/') {\n    anchorText = anchorText.slice(0, -1);\n  }\n  return anchorText;\n}\n/**\n * Decodes percent-encoded characters from the given `anchorText`, in\n * preparation for the text to be displayed.\n *\n * @private\n * @param {String} anchorText The text of the anchor that is being\n *   generated, for which to decode any percent-encoded characters.\n * @return {String} The `anchorText`, with the percent-encoded characters\n *   decoded.\n */\nfunction removePercentEncoding(anchorText) {\n  // First, convert a few of the known % encodings to the corresponding\n  // HTML entities that could accidentally be interpretted as special\n  // HTML characters\n  var preProcessedEntityAnchorText = anchorText.replace(/%22/gi, '&quot;') // \" char\n  .replace(/%26/gi, '&amp;') // & char\n  .replace(/%27/gi, '&#39;') // ' char\n  .replace(/%3C/gi, '&lt;') // < char\n  .replace(/%3E/gi, '&gt;'); // > char\n  try {\n    // Now attempt to decode the rest of the anchor text\n    return decodeURIComponent(preProcessedEntityAnchorText);\n  } catch (e) {\n    // Invalid % escape sequence in the anchor text\n    return preProcessedEntityAnchorText;\n  }\n}","map":{"version":3,"names":["AbstractMatch","httpSchemePrefixRe","wwwPrefixRegex","protocolRelativeRegex","UrlMatch","_super","__extends","cfg","_this","call","type","url","urlMatchType","protocolRelativeMatch","stripPrefix","scheme","www","stripTrailingSlash","decodePercentEncoding","protocolPrepended","prototype","getType","getUrlMatchType","getUrl","getAnchorHref","replace","getAnchorText","anchorText","getMatchedText","stripProtocolRelativePrefix","stripSchemePrefix","stripWwwPrefix","removeTrailingSlash","removePercentEncoding","text","charAt","length","slice","preProcessedEntityAnchorText","decodeURIComponent","e"],"sources":["../../../src/match/url-match.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}