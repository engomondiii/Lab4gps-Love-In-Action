{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport getTimestamp from \"../Core/getTimestamp.js\";\nimport TimeConstants from \"../Core/TimeConstants.js\";\n\n/**\n * Monitors the frame rate (frames per second) in a {@link Scene} and raises an event if the frame rate is\n * lower than a threshold.  Later, if the frame rate returns to the required level, a separate event is raised.\n * To avoid creating multiple FrameRateMonitors for a single {@link Scene}, use {@link FrameRateMonitor.fromScene}\n * instead of constructing an instance explicitly.\n *\n * @alias FrameRateMonitor\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Scene} options.scene The Scene instance for which to monitor performance.\n * @param {number} [options.samplingWindow=5.0] The length of the sliding window over which to compute the average frame rate, in seconds.\n * @param {number} [options.quietPeriod=2.0] The length of time to wait at startup and each time the page becomes visible (i.e. when the user\n *        switches back to the tab) before starting to measure performance, in seconds.\n * @param {number} [options.warmupPeriod=5.0] The length of the warmup period, in seconds.  During the warmup period, a separate\n *        (usually lower) frame rate is required.\n * @param {number} [options.minimumFrameRateDuringWarmup=4] The minimum frames-per-second that are required for acceptable performance during\n *        the warmup period.  If the frame rate averages less than this during any samplingWindow during the warmupPeriod, the\n *        lowFrameRate event will be raised and the page will redirect to the redirectOnLowFrameRateUrl, if any.\n * @param {number} [options.minimumFrameRateAfterWarmup=8] The minimum frames-per-second that are required for acceptable performance after\n *        the end of the warmup period.  If the frame rate averages less than this during any samplingWindow after the warmupPeriod, the\n *        lowFrameRate event will be raised and the page will redirect to the redirectOnLowFrameRateUrl, if any.\n */\nfunction FrameRateMonitor(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options) || !defined(options.scene)) {\n    throw new DeveloperError(\"options.scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._scene = options.scene;\n\n  /**\n   * Gets or sets the length of the sliding window over which to compute the average frame rate, in seconds.\n   * @type {number}\n   */\n  this.samplingWindow = defaultValue(options.samplingWindow, FrameRateMonitor.defaultSettings.samplingWindow);\n\n  /**\n   * Gets or sets the length of time to wait at startup and each time the page becomes visible (i.e. when the user\n   * switches back to the tab) before starting to measure performance, in seconds.\n   * @type {number}\n   */\n  this.quietPeriod = defaultValue(options.quietPeriod, FrameRateMonitor.defaultSettings.quietPeriod);\n\n  /**\n   * Gets or sets the length of the warmup period, in seconds.  During the warmup period, a separate\n   * (usually lower) frame rate is required.\n   * @type {number}\n   */\n  this.warmupPeriod = defaultValue(options.warmupPeriod, FrameRateMonitor.defaultSettings.warmupPeriod);\n\n  /**\n   * Gets or sets the minimum frames-per-second that are required for acceptable performance during\n   * the warmup period.  If the frame rate averages less than this during any <code>samplingWindow</code> during the <code>warmupPeriod</code>, the\n   * <code>lowFrameRate</code> event will be raised and the page will redirect to the <code>redirectOnLowFrameRateUrl</code>, if any.\n   * @type {number}\n   */\n  this.minimumFrameRateDuringWarmup = defaultValue(options.minimumFrameRateDuringWarmup, FrameRateMonitor.defaultSettings.minimumFrameRateDuringWarmup);\n\n  /**\n   * Gets or sets the minimum frames-per-second that are required for acceptable performance after\n   * the end of the warmup period.  If the frame rate averages less than this during any <code>samplingWindow</code> after the <code>warmupPeriod</code>, the\n   * <code>lowFrameRate</code> event will be raised and the page will redirect to the <code>redirectOnLowFrameRateUrl</code>, if any.\n   * @type {number}\n   */\n  this.minimumFrameRateAfterWarmup = defaultValue(options.minimumFrameRateAfterWarmup, FrameRateMonitor.defaultSettings.minimumFrameRateAfterWarmup);\n  this._lowFrameRate = new Event();\n  this._nominalFrameRate = new Event();\n  this._frameTimes = [];\n  this._needsQuietPeriod = true;\n  this._quietPeriodEndTime = 0.0;\n  this._warmupPeriodEndTime = 0.0;\n  this._frameRateIsLow = false;\n  this._lastFramesPerSecond = undefined;\n  this._pauseCount = 0;\n  const that = this;\n  this._preUpdateRemoveListener = this._scene.preUpdate.addEventListener(function (scene, time) {\n    update(that, time);\n  });\n  this._hiddenPropertyName = document.hidden !== undefined ? \"hidden\" : document.mozHidden !== undefined ? \"mozHidden\" : document.msHidden !== undefined ? \"msHidden\" : document.webkitHidden !== undefined ? \"webkitHidden\" : undefined;\n  const visibilityChangeEventName = document.hidden !== undefined ? \"visibilitychange\" : document.mozHidden !== undefined ? \"mozvisibilitychange\" : document.msHidden !== undefined ? \"msvisibilitychange\" : document.webkitHidden !== undefined ? \"webkitvisibilitychange\" : undefined;\n  function visibilityChangeListener() {\n    visibilityChanged(that);\n  }\n  this._visibilityChangeRemoveListener = undefined;\n  if (defined(visibilityChangeEventName)) {\n    document.addEventListener(visibilityChangeEventName, visibilityChangeListener, false);\n    this._visibilityChangeRemoveListener = function () {\n      document.removeEventListener(visibilityChangeEventName, visibilityChangeListener, false);\n    };\n  }\n}\n\n/**\n * The default frame rate monitoring settings.  These settings are used when {@link FrameRateMonitor.fromScene}\n * needs to create a new frame rate monitor, and for any settings that are not passed to the\n * {@link FrameRateMonitor} constructor.\n *\n * @memberof FrameRateMonitor\n * @type {object}\n */\nFrameRateMonitor.defaultSettings = {\n  samplingWindow: 5.0,\n  quietPeriod: 2.0,\n  warmupPeriod: 5.0,\n  minimumFrameRateDuringWarmup: 4,\n  minimumFrameRateAfterWarmup: 8\n};\n\n/**\n * Gets the {@link FrameRateMonitor} for a given scene.  If the scene does not yet have\n * a {@link FrameRateMonitor}, one is created with the {@link FrameRateMonitor.defaultSettings}.\n *\n * @param {Scene} scene The scene for which to get the {@link FrameRateMonitor}.\n * @returns {FrameRateMonitor} The scene's {@link FrameRateMonitor}.\n */\nFrameRateMonitor.fromScene = function (scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(scene._frameRateMonitor) || scene._frameRateMonitor.isDestroyed()) {\n    scene._frameRateMonitor = new FrameRateMonitor({\n      scene: scene\n    });\n  }\n  return scene._frameRateMonitor;\n};\nObject.defineProperties(FrameRateMonitor.prototype, {\n  /**\n   * Gets the {@link Scene} instance for which to monitor performance.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    }\n  },\n  /**\n   * Gets the event that is raised when a low frame rate is detected.  The function will be passed\n   * the {@link Scene} instance as its first parameter and the average number of frames per second\n   * over the sampling window as its second parameter.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Event}\n   */\n  lowFrameRate: {\n    get: function () {\n      return this._lowFrameRate;\n    }\n  },\n  /**\n   * Gets the event that is raised when the frame rate returns to a normal level after having been low.\n   * The function will be passed the {@link Scene} instance as its first parameter and the average\n   * number of frames per second over the sampling window as its second parameter.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Event}\n   */\n  nominalFrameRate: {\n    get: function () {\n      return this._nominalFrameRate;\n    }\n  },\n  /**\n   * Gets the most recently computed average frames-per-second over the last <code>samplingWindow</code>.\n   * This property may be undefined if the frame rate has not been computed.\n   * @memberof FrameRateMonitor.prototype\n   * @type {number}\n   */\n  lastFramesPerSecond: {\n    get: function () {\n      return this._lastFramesPerSecond;\n    }\n  }\n});\n\n/**\n * Pauses monitoring of the frame rate.  To resume monitoring, {@link FrameRateMonitor#unpause}\n * must be called once for each time this function is called.\n * @memberof FrameRateMonitor\n */\nFrameRateMonitor.prototype.pause = function () {\n  ++this._pauseCount;\n  if (this._pauseCount === 1) {\n    this._frameTimes.length = 0;\n    this._lastFramesPerSecond = undefined;\n  }\n};\n\n/**\n * Resumes monitoring of the frame rate.  If {@link FrameRateMonitor#pause} was called\n * multiple times, this function must be called the same number of times in order to\n * actually resume monitoring.\n * @memberof FrameRateMonitor\n */\nFrameRateMonitor.prototype.unpause = function () {\n  --this._pauseCount;\n  if (this._pauseCount <= 0) {\n    this._pauseCount = 0;\n    this._needsQuietPeriod = true;\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @memberof FrameRateMonitor\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see FrameRateMonitor#destroy\n */\nFrameRateMonitor.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Unsubscribes this instance from all events it is listening to.\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @memberof FrameRateMonitor\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see FrameRateMonitor#isDestroyed\n */\nFrameRateMonitor.prototype.destroy = function () {\n  this._preUpdateRemoveListener();\n  if (defined(this._visibilityChangeRemoveListener)) {\n    this._visibilityChangeRemoveListener();\n  }\n  return destroyObject(this);\n};\nfunction update(monitor, time) {\n  if (monitor._pauseCount > 0) {\n    return;\n  }\n  const timeStamp = getTimestamp();\n  if (monitor._needsQuietPeriod) {\n    monitor._needsQuietPeriod = false;\n    monitor._frameTimes.length = 0;\n    monitor._quietPeriodEndTime = timeStamp + monitor.quietPeriod / TimeConstants.SECONDS_PER_MILLISECOND;\n    monitor._warmupPeriodEndTime = monitor._quietPeriodEndTime + (monitor.warmupPeriod + monitor.samplingWindow) / TimeConstants.SECONDS_PER_MILLISECOND;\n  } else if (timeStamp >= monitor._quietPeriodEndTime) {\n    monitor._frameTimes.push(timeStamp);\n    const beginningOfWindow = timeStamp - monitor.samplingWindow / TimeConstants.SECONDS_PER_MILLISECOND;\n    if (monitor._frameTimes.length >= 2 && monitor._frameTimes[0] <= beginningOfWindow) {\n      while (monitor._frameTimes.length >= 2 && monitor._frameTimes[1] < beginningOfWindow) {\n        monitor._frameTimes.shift();\n      }\n      const averageTimeBetweenFrames = (timeStamp - monitor._frameTimes[0]) / (monitor._frameTimes.length - 1);\n      monitor._lastFramesPerSecond = 1000.0 / averageTimeBetweenFrames;\n      const maximumFrameTime = 1000.0 / (timeStamp > monitor._warmupPeriodEndTime ? monitor.minimumFrameRateAfterWarmup : monitor.minimumFrameRateDuringWarmup);\n      if (averageTimeBetweenFrames > maximumFrameTime) {\n        if (!monitor._frameRateIsLow) {\n          monitor._frameRateIsLow = true;\n          monitor._needsQuietPeriod = true;\n          monitor.lowFrameRate.raiseEvent(monitor.scene, monitor._lastFramesPerSecond);\n        }\n      } else if (monitor._frameRateIsLow) {\n        monitor._frameRateIsLow = false;\n        monitor._needsQuietPeriod = true;\n        monitor.nominalFrameRate.raiseEvent(monitor.scene, monitor._lastFramesPerSecond);\n      }\n    }\n  }\n}\nfunction visibilityChanged(monitor) {\n  if (document[monitor._hiddenPropertyName]) {\n    monitor.pause();\n  } else {\n    monitor.unpause();\n  }\n}\nexport default FrameRateMonitor;","map":{"version":3,"names":["defaultValue","defined","destroyObject","DeveloperError","Event","getTimestamp","TimeConstants","FrameRateMonitor","options","scene","_scene","samplingWindow","defaultSettings","quietPeriod","warmupPeriod","minimumFrameRateDuringWarmup","minimumFrameRateAfterWarmup","_lowFrameRate","_nominalFrameRate","_frameTimes","_needsQuietPeriod","_quietPeriodEndTime","_warmupPeriodEndTime","_frameRateIsLow","_lastFramesPerSecond","undefined","_pauseCount","that","_preUpdateRemoveListener","preUpdate","addEventListener","time","update","_hiddenPropertyName","document","hidden","mozHidden","msHidden","webkitHidden","visibilityChangeEventName","visibilityChangeListener","visibilityChanged","_visibilityChangeRemoveListener","removeEventListener","fromScene","_frameRateMonitor","isDestroyed","Object","defineProperties","prototype","get","lowFrameRate","nominalFrameRate","lastFramesPerSecond","pause","length","unpause","destroy","monitor","timeStamp","SECONDS_PER_MILLISECOND","push","beginningOfWindow","shift","averageTimeBetweenFrames","maximumFrameTime","raiseEvent"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/FrameRateMonitor.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport getTimestamp from \"../Core/getTimestamp.js\";\nimport TimeConstants from \"../Core/TimeConstants.js\";\n\n/**\n * Monitors the frame rate (frames per second) in a {@link Scene} and raises an event if the frame rate is\n * lower than a threshold.  Later, if the frame rate returns to the required level, a separate event is raised.\n * To avoid creating multiple FrameRateMonitors for a single {@link Scene}, use {@link FrameRateMonitor.fromScene}\n * instead of constructing an instance explicitly.\n *\n * @alias FrameRateMonitor\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Scene} options.scene The Scene instance for which to monitor performance.\n * @param {number} [options.samplingWindow=5.0] The length of the sliding window over which to compute the average frame rate, in seconds.\n * @param {number} [options.quietPeriod=2.0] The length of time to wait at startup and each time the page becomes visible (i.e. when the user\n *        switches back to the tab) before starting to measure performance, in seconds.\n * @param {number} [options.warmupPeriod=5.0] The length of the warmup period, in seconds.  During the warmup period, a separate\n *        (usually lower) frame rate is required.\n * @param {number} [options.minimumFrameRateDuringWarmup=4] The minimum frames-per-second that are required for acceptable performance during\n *        the warmup period.  If the frame rate averages less than this during any samplingWindow during the warmupPeriod, the\n *        lowFrameRate event will be raised and the page will redirect to the redirectOnLowFrameRateUrl, if any.\n * @param {number} [options.minimumFrameRateAfterWarmup=8] The minimum frames-per-second that are required for acceptable performance after\n *        the end of the warmup period.  If the frame rate averages less than this during any samplingWindow after the warmupPeriod, the\n *        lowFrameRate event will be raised and the page will redirect to the redirectOnLowFrameRateUrl, if any.\n */\nfunction FrameRateMonitor(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options) || !defined(options.scene)) {\n    throw new DeveloperError(\"options.scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._scene = options.scene;\n\n  /**\n   * Gets or sets the length of the sliding window over which to compute the average frame rate, in seconds.\n   * @type {number}\n   */\n  this.samplingWindow = defaultValue(\n    options.samplingWindow,\n    FrameRateMonitor.defaultSettings.samplingWindow,\n  );\n\n  /**\n   * Gets or sets the length of time to wait at startup and each time the page becomes visible (i.e. when the user\n   * switches back to the tab) before starting to measure performance, in seconds.\n   * @type {number}\n   */\n  this.quietPeriod = defaultValue(\n    options.quietPeriod,\n    FrameRateMonitor.defaultSettings.quietPeriod,\n  );\n\n  /**\n   * Gets or sets the length of the warmup period, in seconds.  During the warmup period, a separate\n   * (usually lower) frame rate is required.\n   * @type {number}\n   */\n  this.warmupPeriod = defaultValue(\n    options.warmupPeriod,\n    FrameRateMonitor.defaultSettings.warmupPeriod,\n  );\n\n  /**\n   * Gets or sets the minimum frames-per-second that are required for acceptable performance during\n   * the warmup period.  If the frame rate averages less than this during any <code>samplingWindow</code> during the <code>warmupPeriod</code>, the\n   * <code>lowFrameRate</code> event will be raised and the page will redirect to the <code>redirectOnLowFrameRateUrl</code>, if any.\n   * @type {number}\n   */\n  this.minimumFrameRateDuringWarmup = defaultValue(\n    options.minimumFrameRateDuringWarmup,\n    FrameRateMonitor.defaultSettings.minimumFrameRateDuringWarmup,\n  );\n\n  /**\n   * Gets or sets the minimum frames-per-second that are required for acceptable performance after\n   * the end of the warmup period.  If the frame rate averages less than this during any <code>samplingWindow</code> after the <code>warmupPeriod</code>, the\n   * <code>lowFrameRate</code> event will be raised and the page will redirect to the <code>redirectOnLowFrameRateUrl</code>, if any.\n   * @type {number}\n   */\n  this.minimumFrameRateAfterWarmup = defaultValue(\n    options.minimumFrameRateAfterWarmup,\n    FrameRateMonitor.defaultSettings.minimumFrameRateAfterWarmup,\n  );\n\n  this._lowFrameRate = new Event();\n  this._nominalFrameRate = new Event();\n\n  this._frameTimes = [];\n  this._needsQuietPeriod = true;\n  this._quietPeriodEndTime = 0.0;\n  this._warmupPeriodEndTime = 0.0;\n  this._frameRateIsLow = false;\n  this._lastFramesPerSecond = undefined;\n  this._pauseCount = 0;\n\n  const that = this;\n  this._preUpdateRemoveListener = this._scene.preUpdate.addEventListener(\n    function (scene, time) {\n      update(that, time);\n    },\n  );\n\n  this._hiddenPropertyName =\n    document.hidden !== undefined\n      ? \"hidden\"\n      : document.mozHidden !== undefined\n        ? \"mozHidden\"\n        : document.msHidden !== undefined\n          ? \"msHidden\"\n          : document.webkitHidden !== undefined\n            ? \"webkitHidden\"\n            : undefined;\n\n  const visibilityChangeEventName =\n    document.hidden !== undefined\n      ? \"visibilitychange\"\n      : document.mozHidden !== undefined\n        ? \"mozvisibilitychange\"\n        : document.msHidden !== undefined\n          ? \"msvisibilitychange\"\n          : document.webkitHidden !== undefined\n            ? \"webkitvisibilitychange\"\n            : undefined;\n\n  function visibilityChangeListener() {\n    visibilityChanged(that);\n  }\n\n  this._visibilityChangeRemoveListener = undefined;\n  if (defined(visibilityChangeEventName)) {\n    document.addEventListener(\n      visibilityChangeEventName,\n      visibilityChangeListener,\n      false,\n    );\n\n    this._visibilityChangeRemoveListener = function () {\n      document.removeEventListener(\n        visibilityChangeEventName,\n        visibilityChangeListener,\n        false,\n      );\n    };\n  }\n}\n\n/**\n * The default frame rate monitoring settings.  These settings are used when {@link FrameRateMonitor.fromScene}\n * needs to create a new frame rate monitor, and for any settings that are not passed to the\n * {@link FrameRateMonitor} constructor.\n *\n * @memberof FrameRateMonitor\n * @type {object}\n */\nFrameRateMonitor.defaultSettings = {\n  samplingWindow: 5.0,\n  quietPeriod: 2.0,\n  warmupPeriod: 5.0,\n  minimumFrameRateDuringWarmup: 4,\n  minimumFrameRateAfterWarmup: 8,\n};\n\n/**\n * Gets the {@link FrameRateMonitor} for a given scene.  If the scene does not yet have\n * a {@link FrameRateMonitor}, one is created with the {@link FrameRateMonitor.defaultSettings}.\n *\n * @param {Scene} scene The scene for which to get the {@link FrameRateMonitor}.\n * @returns {FrameRateMonitor} The scene's {@link FrameRateMonitor}.\n */\nFrameRateMonitor.fromScene = function (scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (\n    !defined(scene._frameRateMonitor) ||\n    scene._frameRateMonitor.isDestroyed()\n  ) {\n    scene._frameRateMonitor = new FrameRateMonitor({\n      scene: scene,\n    });\n  }\n\n  return scene._frameRateMonitor;\n};\n\nObject.defineProperties(FrameRateMonitor.prototype, {\n  /**\n   * Gets the {@link Scene} instance for which to monitor performance.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n\n  /**\n   * Gets the event that is raised when a low frame rate is detected.  The function will be passed\n   * the {@link Scene} instance as its first parameter and the average number of frames per second\n   * over the sampling window as its second parameter.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Event}\n   */\n  lowFrameRate: {\n    get: function () {\n      return this._lowFrameRate;\n    },\n  },\n\n  /**\n   * Gets the event that is raised when the frame rate returns to a normal level after having been low.\n   * The function will be passed the {@link Scene} instance as its first parameter and the average\n   * number of frames per second over the sampling window as its second parameter.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Event}\n   */\n  nominalFrameRate: {\n    get: function () {\n      return this._nominalFrameRate;\n    },\n  },\n\n  /**\n   * Gets the most recently computed average frames-per-second over the last <code>samplingWindow</code>.\n   * This property may be undefined if the frame rate has not been computed.\n   * @memberof FrameRateMonitor.prototype\n   * @type {number}\n   */\n  lastFramesPerSecond: {\n    get: function () {\n      return this._lastFramesPerSecond;\n    },\n  },\n});\n\n/**\n * Pauses monitoring of the frame rate.  To resume monitoring, {@link FrameRateMonitor#unpause}\n * must be called once for each time this function is called.\n * @memberof FrameRateMonitor\n */\nFrameRateMonitor.prototype.pause = function () {\n  ++this._pauseCount;\n  if (this._pauseCount === 1) {\n    this._frameTimes.length = 0;\n    this._lastFramesPerSecond = undefined;\n  }\n};\n\n/**\n * Resumes monitoring of the frame rate.  If {@link FrameRateMonitor#pause} was called\n * multiple times, this function must be called the same number of times in order to\n * actually resume monitoring.\n * @memberof FrameRateMonitor\n */\nFrameRateMonitor.prototype.unpause = function () {\n  --this._pauseCount;\n  if (this._pauseCount <= 0) {\n    this._pauseCount = 0;\n    this._needsQuietPeriod = true;\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @memberof FrameRateMonitor\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see FrameRateMonitor#destroy\n */\nFrameRateMonitor.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Unsubscribes this instance from all events it is listening to.\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @memberof FrameRateMonitor\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see FrameRateMonitor#isDestroyed\n */\nFrameRateMonitor.prototype.destroy = function () {\n  this._preUpdateRemoveListener();\n\n  if (defined(this._visibilityChangeRemoveListener)) {\n    this._visibilityChangeRemoveListener();\n  }\n\n  return destroyObject(this);\n};\n\nfunction update(monitor, time) {\n  if (monitor._pauseCount > 0) {\n    return;\n  }\n\n  const timeStamp = getTimestamp();\n\n  if (monitor._needsQuietPeriod) {\n    monitor._needsQuietPeriod = false;\n    monitor._frameTimes.length = 0;\n    monitor._quietPeriodEndTime =\n      timeStamp + monitor.quietPeriod / TimeConstants.SECONDS_PER_MILLISECOND;\n    monitor._warmupPeriodEndTime =\n      monitor._quietPeriodEndTime +\n      (monitor.warmupPeriod + monitor.samplingWindow) /\n        TimeConstants.SECONDS_PER_MILLISECOND;\n  } else if (timeStamp >= monitor._quietPeriodEndTime) {\n    monitor._frameTimes.push(timeStamp);\n\n    const beginningOfWindow =\n      timeStamp -\n      monitor.samplingWindow / TimeConstants.SECONDS_PER_MILLISECOND;\n\n    if (\n      monitor._frameTimes.length >= 2 &&\n      monitor._frameTimes[0] <= beginningOfWindow\n    ) {\n      while (\n        monitor._frameTimes.length >= 2 &&\n        monitor._frameTimes[1] < beginningOfWindow\n      ) {\n        monitor._frameTimes.shift();\n      }\n\n      const averageTimeBetweenFrames =\n        (timeStamp - monitor._frameTimes[0]) / (monitor._frameTimes.length - 1);\n\n      monitor._lastFramesPerSecond = 1000.0 / averageTimeBetweenFrames;\n\n      const maximumFrameTime =\n        1000.0 /\n        (timeStamp > monitor._warmupPeriodEndTime\n          ? monitor.minimumFrameRateAfterWarmup\n          : monitor.minimumFrameRateDuringWarmup);\n      if (averageTimeBetweenFrames > maximumFrameTime) {\n        if (!monitor._frameRateIsLow) {\n          monitor._frameRateIsLow = true;\n          monitor._needsQuietPeriod = true;\n          monitor.lowFrameRate.raiseEvent(\n            monitor.scene,\n            monitor._lastFramesPerSecond,\n          );\n        }\n      } else if (monitor._frameRateIsLow) {\n        monitor._frameRateIsLow = false;\n        monitor._needsQuietPeriod = true;\n        monitor.nominalFrameRate.raiseEvent(\n          monitor.scene,\n          monitor._lastFramesPerSecond,\n        );\n      }\n    }\n  }\n}\n\nfunction visibilityChanged(monitor) {\n  if (document[monitor._hiddenPropertyName]) {\n    monitor.pause();\n  } else {\n    monitor.unpause();\n  }\n}\nexport default FrameRateMonitor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}