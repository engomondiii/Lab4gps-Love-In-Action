{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Transforms from \"../Core/Transforms.js\";\n\n/**\n * The interface for all {@link Property} objects that define a world\n * location as a {@link Cartesian3} with an associated {@link ReferenceFrame}.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias PositionProperty\n * @constructor\n * @abstract\n *\n * @see CallbackPositionProperty\n * @see CompositePositionProperty\n * @see ConstantPositionProperty\n * @see SampledPositionProperty\n * @see TimeIntervalCollectionPositionProperty\n */\nfunction PositionProperty() {\n  DeveloperError.throwInstantiationError();\n}\nObject.defineProperties(PositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PositionProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError\n  },\n  /**\n   * Gets the reference frame that the position is defined in.\n   * @memberof PositionProperty.prototype\n   * @type {ReferenceFrame}\n   */\n  referenceFrame: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n * @function\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionProperty.prototype.getValueInReferenceFrame = DeveloperError.throwInstantiationError;\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPositionProperty.prototype.equals = DeveloperError.throwInstantiationError;\nconst scratchMatrix3 = new Matrix3();\n\n/**\n * @private\n */\nPositionProperty.convertToReferenceFrame = function (time, value, inputFrame, outputFrame, result) {\n  if (!defined(value)) {\n    return value;\n  }\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n  if (inputFrame === outputFrame) {\n    return Cartesian3.clone(value, result);\n  }\n  const icrfToFixed = Transforms.computeIcrfToCentralBodyFixedMatrix(time, scratchMatrix3);\n  if (inputFrame === ReferenceFrame.INERTIAL) {\n    return Matrix3.multiplyByVector(icrfToFixed, value, result);\n  }\n  if (inputFrame === ReferenceFrame.FIXED) {\n    return Matrix3.multiplyByVector(Matrix3.transpose(icrfToFixed, scratchMatrix3), value, result);\n  }\n};\nexport default PositionProperty;","map":{"version":3,"names":["Cartesian3","defined","DeveloperError","Matrix3","ReferenceFrame","Transforms","PositionProperty","throwInstantiationError","Object","defineProperties","prototype","isConstant","get","definitionChanged","referenceFrame","getValue","getValueInReferenceFrame","equals","scratchMatrix3","convertToReferenceFrame","time","value","inputFrame","outputFrame","result","clone","icrfToFixed","computeIcrfToCentralBodyFixedMatrix","INERTIAL","multiplyByVector","FIXED","transpose"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/PositionProperty.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Transforms from \"../Core/Transforms.js\";\n\n/**\n * The interface for all {@link Property} objects that define a world\n * location as a {@link Cartesian3} with an associated {@link ReferenceFrame}.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias PositionProperty\n * @constructor\n * @abstract\n *\n * @see CallbackPositionProperty\n * @see CompositePositionProperty\n * @see ConstantPositionProperty\n * @see SampledPositionProperty\n * @see TimeIntervalCollectionPositionProperty\n */\nfunction PositionProperty() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(PositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PositionProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the reference frame that the position is defined in.\n   * @memberof PositionProperty.prototype\n   * @type {ReferenceFrame}\n   */\n  referenceFrame: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n * @function\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionProperty.prototype.getValueInReferenceFrame =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPositionProperty.prototype.equals = DeveloperError.throwInstantiationError;\n\nconst scratchMatrix3 = new Matrix3();\n\n/**\n * @private\n */\nPositionProperty.convertToReferenceFrame = function (\n  time,\n  value,\n  inputFrame,\n  outputFrame,\n  result,\n) {\n  if (!defined(value)) {\n    return value;\n  }\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  if (inputFrame === outputFrame) {\n    return Cartesian3.clone(value, result);\n  }\n\n  const icrfToFixed = Transforms.computeIcrfToCentralBodyFixedMatrix(\n    time,\n    scratchMatrix3,\n  );\n  if (inputFrame === ReferenceFrame.INERTIAL) {\n    return Matrix3.multiplyByVector(icrfToFixed, value, result);\n  }\n  if (inputFrame === ReferenceFrame.FIXED) {\n    return Matrix3.multiplyByVector(\n      Matrix3.transpose(icrfToFixed, scratchMatrix3),\n      value,\n      result,\n    );\n  }\n};\nexport default PositionProperty;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,UAAU,MAAM,uBAAuB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAAA,EAAG;EAC1BJ,cAAc,CAACK,uBAAuB,CAAC,CAAC;AAC1C;AAEAC,MAAM,CAACC,gBAAgB,CAACH,gBAAgB,CAACI,SAAS,EAAE;EAClD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE;IACVC,GAAG,EAAEV,cAAc,CAACK;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,iBAAiB,EAAE;IACjBD,GAAG,EAAEV,cAAc,CAACK;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;EACEO,cAAc,EAAE;IACdF,GAAG,EAAEV,cAAc,CAACK;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,gBAAgB,CAACI,SAAS,CAACK,QAAQ,GAAGb,cAAc,CAACK,uBAAuB;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,gBAAgB,CAACI,SAAS,CAACM,wBAAwB,GACjDd,cAAc,CAACK,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,gBAAgB,CAACI,SAAS,CAACO,MAAM,GAAGf,cAAc,CAACK,uBAAuB;AAE1E,MAAMW,cAAc,GAAG,IAAIf,OAAO,CAAC,CAAC;;AAEpC;AACA;AACA;AACAG,gBAAgB,CAACa,uBAAuB,GAAG,UACzCC,IAAI,EACJC,KAAK,EACLC,UAAU,EACVC,WAAW,EACXC,MAAM,EACN;EACA,IAAI,CAACvB,OAAO,CAACoB,KAAK,CAAC,EAAE;IACnB,OAAOA,KAAK;EACd;EACA,IAAI,CAACpB,OAAO,CAACuB,MAAM,CAAC,EAAE;IACpBA,MAAM,GAAG,IAAIxB,UAAU,CAAC,CAAC;EAC3B;EAEA,IAAIsB,UAAU,KAAKC,WAAW,EAAE;IAC9B,OAAOvB,UAAU,CAACyB,KAAK,CAACJ,KAAK,EAAEG,MAAM,CAAC;EACxC;EAEA,MAAME,WAAW,GAAGrB,UAAU,CAACsB,mCAAmC,CAChEP,IAAI,EACJF,cACF,CAAC;EACD,IAAII,UAAU,KAAKlB,cAAc,CAACwB,QAAQ,EAAE;IAC1C,OAAOzB,OAAO,CAAC0B,gBAAgB,CAACH,WAAW,EAAEL,KAAK,EAAEG,MAAM,CAAC;EAC7D;EACA,IAAIF,UAAU,KAAKlB,cAAc,CAAC0B,KAAK,EAAE;IACvC,OAAO3B,OAAO,CAAC0B,gBAAgB,CAC7B1B,OAAO,CAAC4B,SAAS,CAACL,WAAW,EAAER,cAAc,CAAC,EAC9CG,KAAK,EACLG,MACF,CAAC;EACH;AACF,CAAC;AACD,eAAelB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}