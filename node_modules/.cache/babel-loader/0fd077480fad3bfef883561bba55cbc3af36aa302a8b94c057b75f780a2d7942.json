{"ast":null,"code":"import Color from \"./Color.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Value and type information for per-instance geometry color.\n *\n * @alias ColorGeometryInstanceAttribute\n * @constructor\n *\n * @param {number} [red=1.0] The red component.\n * @param {number} [green=1.0] The green component.\n * @param {number} [blue=1.0] The blue component.\n * @param {number} [alpha=1.0] The alpha component.\n *\n *\n * @example\n * const instance = new Cesium.GeometryInstance({\n *   geometry : Cesium.BoxGeometry.fromDimensions({\n *     dimensions : new Cesium.Cartesian3(1000000.0, 1000000.0, 500000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(0.0, 0.0)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     color : new Cesium.ColorGeometryInstanceAttribute(red, green, blue, alpha)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\nfunction ColorGeometryInstanceAttribute(red, green, blue, alpha) {\n  red = defaultValue(red, 1.0);\n  green = defaultValue(green, 1.0);\n  blue = defaultValue(blue, 1.0);\n  alpha = defaultValue(alpha, 1.0);\n\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Uint8Array\n   *\n   * @default [255, 255, 255, 255]\n   */\n  this.value = new Uint8Array([Color.floatToByte(red), Color.floatToByte(green), Color.floatToByte(blue), Color.floatToByte(alpha)]);\n}\nObject.defineProperties(ColorGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.UNSIGNED_BYTE}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.UNSIGNED_BYTE;\n    }\n  },\n  /**\n   * The number of components in the attributes, i.e., {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @default 4\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 4;\n    }\n  },\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  normalize: {\n    get: function () {\n      return true;\n    }\n  }\n});\n\n/**\n * Creates a new {@link ColorGeometryInstanceAttribute} instance given the provided {@link Color}.\n *\n * @param {Color} color The color.\n * @returns {ColorGeometryInstanceAttribute} The new {@link ColorGeometryInstanceAttribute} instance.\n *\n * @example\n * const instance = new Cesium.GeometryInstance({\n *   geometry : geometry,\n *   attributes : {\n *     color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.CORNFLOWERBLUE),\n *   }\n * });\n */\nColorGeometryInstanceAttribute.fromColor = function (color) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return new ColorGeometryInstanceAttribute(color.red, color.green, color.blue, color.alpha);\n};\n\n/**\n * Converts a color to a typed array that can be used to assign a color attribute.\n *\n * @param {Color} color The color.\n * @param {Uint8Array} [result] The array to store the result in, if undefined a new instance will be created.\n *\n * @returns {Uint8Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * const attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.AQUA, attributes.color);\n */\nColorGeometryInstanceAttribute.toValue = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Uint8Array(color.toBytes());\n  }\n  return color.toBytes(result);\n};\n\n/**\n * Compares the provided ColorGeometryInstanceAttributes and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {ColorGeometryInstanceAttribute} [left] The first ColorGeometryInstanceAttribute.\n * @param {ColorGeometryInstanceAttribute} [right] The second ColorGeometryInstanceAttribute.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nColorGeometryInstanceAttribute.equals = function (left, right) {\n  return left === right || defined(left) && defined(right) && left.value[0] === right.value[0] && left.value[1] === right.value[1] && left.value[2] === right.value[2] && left.value[3] === right.value[3];\n};\nexport default ColorGeometryInstanceAttribute;","map":{"version":3,"names":["Color","ComponentDatatype","defaultValue","defined","DeveloperError","ColorGeometryInstanceAttribute","red","green","blue","alpha","value","Uint8Array","floatToByte","Object","defineProperties","prototype","componentDatatype","get","UNSIGNED_BYTE","componentsPerAttribute","normalize","fromColor","color","toValue","result","toBytes","equals","left","right"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/ColorGeometryInstanceAttribute.js"],"sourcesContent":["import Color from \"./Color.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Value and type information for per-instance geometry color.\n *\n * @alias ColorGeometryInstanceAttribute\n * @constructor\n *\n * @param {number} [red=1.0] The red component.\n * @param {number} [green=1.0] The green component.\n * @param {number} [blue=1.0] The blue component.\n * @param {number} [alpha=1.0] The alpha component.\n *\n *\n * @example\n * const instance = new Cesium.GeometryInstance({\n *   geometry : Cesium.BoxGeometry.fromDimensions({\n *     dimensions : new Cesium.Cartesian3(1000000.0, 1000000.0, 500000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(0.0, 0.0)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     color : new Cesium.ColorGeometryInstanceAttribute(red, green, blue, alpha)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\nfunction ColorGeometryInstanceAttribute(red, green, blue, alpha) {\n  red = defaultValue(red, 1.0);\n  green = defaultValue(green, 1.0);\n  blue = defaultValue(blue, 1.0);\n  alpha = defaultValue(alpha, 1.0);\n\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Uint8Array\n   *\n   * @default [255, 255, 255, 255]\n   */\n  this.value = new Uint8Array([\n    Color.floatToByte(red),\n    Color.floatToByte(green),\n    Color.floatToByte(blue),\n    Color.floatToByte(alpha),\n  ]);\n}\n\nObject.defineProperties(ColorGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.UNSIGNED_BYTE}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.UNSIGNED_BYTE;\n    },\n  },\n\n  /**\n   * The number of components in the attributes, i.e., {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @default 4\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 4;\n    },\n  },\n\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  normalize: {\n    get: function () {\n      return true;\n    },\n  },\n});\n\n/**\n * Creates a new {@link ColorGeometryInstanceAttribute} instance given the provided {@link Color}.\n *\n * @param {Color} color The color.\n * @returns {ColorGeometryInstanceAttribute} The new {@link ColorGeometryInstanceAttribute} instance.\n *\n * @example\n * const instance = new Cesium.GeometryInstance({\n *   geometry : geometry,\n *   attributes : {\n *     color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.CORNFLOWERBLUE),\n *   }\n * });\n */\nColorGeometryInstanceAttribute.fromColor = function (color) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return new ColorGeometryInstanceAttribute(\n    color.red,\n    color.green,\n    color.blue,\n    color.alpha,\n  );\n};\n\n/**\n * Converts a color to a typed array that can be used to assign a color attribute.\n *\n * @param {Color} color The color.\n * @param {Uint8Array} [result] The array to store the result in, if undefined a new instance will be created.\n *\n * @returns {Uint8Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * const attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.AQUA, attributes.color);\n */\nColorGeometryInstanceAttribute.toValue = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Uint8Array(color.toBytes());\n  }\n  return color.toBytes(result);\n};\n\n/**\n * Compares the provided ColorGeometryInstanceAttributes and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {ColorGeometryInstanceAttribute} [left] The first ColorGeometryInstanceAttribute.\n * @param {ColorGeometryInstanceAttribute} [right] The second ColorGeometryInstanceAttribute.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nColorGeometryInstanceAttribute.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.value[0] === right.value[0] &&\n      left.value[1] === right.value[1] &&\n      left.value[2] === right.value[2] &&\n      left.value[3] === right.value[3])\n  );\n};\nexport default ColorGeometryInstanceAttribute;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}