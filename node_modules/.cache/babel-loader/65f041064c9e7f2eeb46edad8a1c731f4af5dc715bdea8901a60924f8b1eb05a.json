{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"mat4 getInstancingTransform()\\n\\\n{\\n\\\n    mat4 instancingTransform;\\n\\\n\\n\\\n    #ifdef HAS_INSTANCE_MATRICES\\n\\\n    instancingTransform = mat4(\\n\\\n        a_instancingTransformRow0.x, a_instancingTransformRow1.x, a_instancingTransformRow2.x, 0.0, // Column 1\\n\\\n        a_instancingTransformRow0.y, a_instancingTransformRow1.y, a_instancingTransformRow2.y, 0.0, // Column 2\\n\\\n        a_instancingTransformRow0.z, a_instancingTransformRow1.z, a_instancingTransformRow2.z, 0.0, // Column 3\\n\\\n        a_instancingTransformRow0.w, a_instancingTransformRow1.w, a_instancingTransformRow2.w, 1.0  // Column 4\\n\\\n    );\\n\\\n    #else\\n\\\n    vec3 translation = vec3(0.0, 0.0, 0.0);\\n\\\n    vec3 scale = vec3(1.0, 1.0, 1.0);\\n\\\n    \\n\\\n        #ifdef HAS_INSTANCE_TRANSLATION\\n\\\n        translation = a_instanceTranslation;\\n\\\n        #endif\\n\\\n        #ifdef HAS_INSTANCE_SCALE\\n\\\n        scale = a_instanceScale;\\n\\\n        #endif\\n\\\n\\n\\\n    instancingTransform = mat4(\\n\\\n        scale.x, 0.0, 0.0, 0.0,\\n\\\n        0.0, scale.y, 0.0, 0.0,\\n\\\n        0.0, 0.0, scale.z, 0.0,\\n\\\n        translation.x, translation.y, translation.z, 1.0\\n\\\n    ); \\n\\\n    #endif\\n\\\n\\n\\\n    return instancingTransform;\\n\\\n}\\n\\\n\\n\\\n#ifdef USE_2D_INSTANCING\\n\\\nmat4 getInstancingTransform2D()\\n\\\n{\\n\\\n    mat4 instancingTransform2D;\\n\\\n\\n\\\n    #ifdef HAS_INSTANCE_MATRICES\\n\\\n    instancingTransform2D = mat4(\\n\\\n        a_instancingTransform2DRow0.x, a_instancingTransform2DRow1.x, a_instancingTransform2DRow2.x, 0.0, // Column 1\\n\\\n        a_instancingTransform2DRow0.y, a_instancingTransform2DRow1.y, a_instancingTransform2DRow2.y, 0.0, // Column 2\\n\\\n        a_instancingTransform2DRow0.z, a_instancingTransform2DRow1.z, a_instancingTransform2DRow2.z, 0.0, // Column 3\\n\\\n        a_instancingTransform2DRow0.w, a_instancingTransform2DRow1.w, a_instancingTransform2DRow2.w, 1.0  // Column 4\\n\\\n    );\\n\\\n    #else\\n\\\n    vec3 translation2D = vec3(0.0, 0.0, 0.0);\\n\\\n    vec3 scale = vec3(1.0, 1.0, 1.0);\\n\\\n    \\n\\\n        #ifdef HAS_INSTANCE_TRANSLATION\\n\\\n        translation2D = a_instanceTranslation2D;\\n\\\n        #endif\\n\\\n        #ifdef HAS_INSTANCE_SCALE\\n\\\n        scale = a_instanceScale;\\n\\\n        #endif\\n\\\n\\n\\\n    instancingTransform2D = mat4(\\n\\\n        scale.x, 0.0, 0.0, 0.0,\\n\\\n        0.0, scale.y, 0.0, 0.0,\\n\\\n        0.0, 0.0, scale.z, 0.0,\\n\\\n        translation2D.x, translation2D.y, translation2D.z, 1.0\\n\\\n    ); \\n\\\n    #endif\\n\\\n\\n\\\n    return instancingTransform2D;\\n\\\n}\\n\\\n#endif\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Model/InstancingStageCommon.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"mat4 getInstancingTransform()\\n\\\n{\\n\\\n    mat4 instancingTransform;\\n\\\n\\n\\\n    #ifdef HAS_INSTANCE_MATRICES\\n\\\n    instancingTransform = mat4(\\n\\\n        a_instancingTransformRow0.x, a_instancingTransformRow1.x, a_instancingTransformRow2.x, 0.0, // Column 1\\n\\\n        a_instancingTransformRow0.y, a_instancingTransformRow1.y, a_instancingTransformRow2.y, 0.0, // Column 2\\n\\\n        a_instancingTransformRow0.z, a_instancingTransformRow1.z, a_instancingTransformRow2.z, 0.0, // Column 3\\n\\\n        a_instancingTransformRow0.w, a_instancingTransformRow1.w, a_instancingTransformRow2.w, 1.0  // Column 4\\n\\\n    );\\n\\\n    #else\\n\\\n    vec3 translation = vec3(0.0, 0.0, 0.0);\\n\\\n    vec3 scale = vec3(1.0, 1.0, 1.0);\\n\\\n    \\n\\\n        #ifdef HAS_INSTANCE_TRANSLATION\\n\\\n        translation = a_instanceTranslation;\\n\\\n        #endif\\n\\\n        #ifdef HAS_INSTANCE_SCALE\\n\\\n        scale = a_instanceScale;\\n\\\n        #endif\\n\\\n\\n\\\n    instancingTransform = mat4(\\n\\\n        scale.x, 0.0, 0.0, 0.0,\\n\\\n        0.0, scale.y, 0.0, 0.0,\\n\\\n        0.0, 0.0, scale.z, 0.0,\\n\\\n        translation.x, translation.y, translation.z, 1.0\\n\\\n    ); \\n\\\n    #endif\\n\\\n\\n\\\n    return instancingTransform;\\n\\\n}\\n\\\n\\n\\\n#ifdef USE_2D_INSTANCING\\n\\\nmat4 getInstancingTransform2D()\\n\\\n{\\n\\\n    mat4 instancingTransform2D;\\n\\\n\\n\\\n    #ifdef HAS_INSTANCE_MATRICES\\n\\\n    instancingTransform2D = mat4(\\n\\\n        a_instancingTransform2DRow0.x, a_instancingTransform2DRow1.x, a_instancingTransform2DRow2.x, 0.0, // Column 1\\n\\\n        a_instancingTransform2DRow0.y, a_instancingTransform2DRow1.y, a_instancingTransform2DRow2.y, 0.0, // Column 2\\n\\\n        a_instancingTransform2DRow0.z, a_instancingTransform2DRow1.z, a_instancingTransform2DRow2.z, 0.0, // Column 3\\n\\\n        a_instancingTransform2DRow0.w, a_instancingTransform2DRow1.w, a_instancingTransform2DRow2.w, 1.0  // Column 4\\n\\\n    );\\n\\\n    #else\\n\\\n    vec3 translation2D = vec3(0.0, 0.0, 0.0);\\n\\\n    vec3 scale = vec3(1.0, 1.0, 1.0);\\n\\\n    \\n\\\n        #ifdef HAS_INSTANCE_TRANSLATION\\n\\\n        translation2D = a_instanceTranslation2D;\\n\\\n        #endif\\n\\\n        #ifdef HAS_INSTANCE_SCALE\\n\\\n        scale = a_instanceScale;\\n\\\n        #endif\\n\\\n\\n\\\n    instancingTransform2D = mat4(\\n\\\n        scale.x, 0.0, 0.0, 0.0,\\n\\\n        0.0, scale.y, 0.0, 0.0,\\n\\\n        0.0, 0.0, scale.z, 0.0,\\n\\\n        translation2D.x, translation2D.y, translation2D.z, 1.0\\n\\\n    ); \\n\\\n    #endif\\n\\\n\\n\\\n    return instancingTransform2D;\\n\\\n}\\n\\\n#endif\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}