{"ast":null,"code":"// This file is part of meshoptimizer library and is distributed under the terms of MIT License.\n// Copyright (C) 2016-2024, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)\nvar MeshoptEncoder = function () {\n  // Built with clang version 18.1.2\n  // Built from meshoptimizer 0.22\n  var wasm = 'b9H79TebbbeJq9Geueu9Geub9Gbb9Gvuuuuueu9Gduueu9Gluuuueu9Gvuuuuub9Gouuuuuub9Gluuuub9GiuuueuiKLdilevlevlooroowwvwbDDbelve9Weiiviebeoweuec:G:Qdkr;RiOo9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bb8A9TW79O9V9Wt9FW9U9J9V9KW9wWVtW949c919M9MWVbe8F9TW79O9V9Wt9FW9U9J9V9KW9wWVtW949c919M9MWV9c9V919U9KbdE9TW79O9V9Wt9FW9U9J9V9KW9wWVtW949wWV79P9V9UbiY9TW79O9V9Wt9FW9U9J9V9KW69U9KW949c919M9MWVbl8E9TW79O9V9Wt9FW9U9J9V9KW69U9KW949c919M9MWV9c9V919U9Kbv8A9TW79O9V9Wt9FW9U9J9V9KW69U9KW949wWV79P9V9UboE9TW79O9V9Wt9FW9U9J9V9KW69U9KW949tWG91W9U9JWbra9TW79O9V9Wt9FW9U9J9V9KW69U9KW949tWG91W9U9JW9c9V919U9KbwL9TW79O9V9Wt9FW9U9J9V9KWS9P2tWV9p9JtbDK9TW79O9V9Wt9FW9U9J9V9KWS9P2tWV9r919HtbqL9TW79O9V9Wt9FW9U9J9V9KWS9P2tWVT949WbkE9TW79O9V9Wt9F9V9Wt9P9T9P96W9wWVtW94J9H9J9OWbPa9TW79O9V9Wt9F9V9Wt9P9T9P96W9wWVtW94J9H9J9OW9ttV9P9Wbsa9TW79O9V9Wt9F9V9Wt9P9T9P96W9wWVtW94SWt9J9O9sW9T9H9WbzK9TW79O9V9Wt9F79W9Ht9P9H29t9VVt9sW9T9H9WbHl79IV9RbODwebcekdQXq;A9pLdbk;QqeKu8Jjjjjbcjo9Rgv8Kjjjjbcbhodnalcefae0mbabcbRbN:kjjbc:GeV86bbavcjdfcbcjdzNjjjb8AdnaiTmbavcjdfadalz:tjjjb8Akabaefhrabcefhwavalfcbcbcjdal9RalcFe0EzNjjjb8Aavavcjdfalz:tjjjbhDcj;abal9Uc;WFbGgecjdaecjd6Ehqcbhkindndnaiak9nmbaDcjlfcbcjdzNjjjb8Aaqaiak9Rakaqfai6Egxcsfgecl4cifcd4hmadakal2fhPdndndnaec9WGgsTmbcbhzaPhHawhOxekdnaxmbalheinaraw9Ram6miawcbamzNjjjbamfhwaecufgembxvkkcbhAaPhOinaDaAfRbbhCaDcjlfheaOhoaxhXinaeaoRbbgQaC9RgCcetaCcKtcK91cr4786bbaoalfhoaecefheaQhCaXcufgXmbkaraw9Ram6mdaOcefhOawcbamzNjjjbamfhwaAcefgAal9hmbxlkkindnaxTmbaDazfRbbhCaDcjlfheaHhoaxhXinaeaoRbbgQaC9RgCcetaCcKtcK91cr4786bbaoalfhoaecefheaQhCaXcufgXmbkkaraO9Ram6mearaOcbamzNjjjbgLamfgw9RcK6mecbhKaDcjlfhOinaDcjlfaKfhYcwhAczhQceheindndnaegXce9hmbcuhoaYRbbmecbhodninaogecsSmeaecefhoaOaefcefRbbTmbkkcucbaecs6EhoxekaXcethocuaXtc;:bGcFb7hCcbheinaoaCaOaefRbb9nfhoaecefgecz9hmbkkaoaQaoaQ6geEhQaXaAaeEhAaXcetheaXcl6mbkdndndndnaAcufPdiebkaLaKco4fgeaeRbbcdciaAclSEaKci4coGtV86bbaAcw9hmeawaY8Pbb83bbawcwfaYcwf8Pbb83bbawczfhwxdkaLaKco4fgeaeRbbceaKci4coGtV86bbkdncwaA9Tg8Ambinawcb86bbawcefhwxbkkcuaAtcu7hYcbhEaOh3ina3hea8AhCcbhoinaeRbbgQaYcFeGgXaQaX6EaoaAtVhoaecefheaCcufgCmbkawao86bba3a8Afh3awcefhwaEa8AfgEcz6mbkcbheindnaOaefRbbgoaX6mbawao86bbawcefhwkaecefgecz9hmbkkdnaKczfgKas9pmbaOczfhOaraw9RcL0mekkaKas6meawTmeaHcefhHawhOazcefgzalSmixbkkcbhoxikcbhoaraw9Ralcaalca0E6mddnalc8F0mbawcbcaal9RgezNjjjbaefhwkawaDcjdfalz:tjjjbalfab9RhoxdkaDaPaxcufal2falz:tjjjb8Aaxakfhkawmbkcbhokavcjof8Kjjjjbaok9heeuaecaaeca0Eabcj;abae9Uc;WFbGgdcjdadcjd6Egdfcufad9Uae2adcl4cifcd4adV2fcefkmbcbabBdN:kjjbk:zse5u8Jjjjjbc;ae9Rgl8Kjjjjbcbhvdnaici9UgocHfae0mbabcbyd:e:kjjbgrc;GeV86bbalc;abfcFecjezNjjjb8AalcUfgw9cu83ibalc8WfgD9cu83ibalcyfgq9cu83ibalcafgk9cu83ibalcKfgx9cu83ibalczfgm9cu83ibal9cu83iwal9cu83ibabaefc9WfhPabcefgsaofhednaiTmbcmcsarcb9kgzEhHcbhOcbhAcbhCcbhXcbhQindnaeaP9nmbcbhvxikaQcufhvadaCcdtfgLydbhKaLcwfydbhYaLclfydbh8AcbhEdndndninalc;abfavcsGcitfgoydlh3dndndnaoydbgoaK9hmba3a8ASmekdnaoa8A9hmba3aY9hmbaEcefhExekaoaY9hmea3aK9hmeaEcdfhEkaEc870mdaXcufhvaLaEciGcx2goc:y1jjbfydbcdtfydbh3aLaocN1jjbfydbcdtfydbh8AaLaoc:q1jjbfydbcdtfydbhKcbhodnindnalavcsGcdtfydba39hmbaohYxdkcuhYavcufhvaocefgocz9hmbkkaOa3aOSgvaYce9iaYaH9oVgoGfhOdndndncbcsavEaYaoEgvcs9hmbarce9imba3a3aAa3cefaASgvEgAcefSmecmcsavEhvkasavaEcdtc;WeGV86bbavcs9hmea3aA9Rgvcetavc8F917hvinaeavcFb0crtavcFbGV86bbaecefheavcje6hoavcr4hvaoTmbka3hAxvkcPhvasaEcdtcPV86bba3hAkavTmiavaH9omicdhocehEaQhYxlkavcufhvaEclfgEc;ab9hmbkkdnaLceaYaOSceta8AaOSEcx2gvc:q1jjbfydbcdtfydbgKTaLavcN1jjbfydbcdtfydbg8AceSGaLavc:y1jjbfydbcdtfydbg3cdSGaOcb9hGazGg5ce9hmbaw9cu83ibaD9cu83ibaq9cu83ibak9cu83ibax9cu83ibam9cu83ibal9cu83iwal9cu83ibcbhOkcbhEaXcufgvhodnindnalaocsGcdtfydba8A9hmbaEhYxdkcuhYaocufhoaEcefgEcz9hmbkkcbhodnindnalavcsGcdtfydba39hmbaohExdkcuhEavcufhvaocefgocz9hmbkkaOaKaOSg8EfhLdndnaYcm0mbaYcefhYxekcbcsa8AaLSgvEhYaLavfhLkdndnaEcm0mbaEcefhExekcbcsa3aLSgvEhEaLavfhLkc9:cua8EEh8FcbhvaEaYcltVgacFeGhodndndninavcj1jjbfRbbaoSmeavcefgvcz9hmbxdkka5aKaO9havcm0VVmbasavc;WeV86bbxekasa8F86bbaeaa86bbaecefhekdna8EmbaKaA9Rgvcetavc8F917hvinaeavcFb0gocrtavcFbGV86bbavcr4hvaecefheaombkaKhAkdnaYcs9hmba8AaA9Rgvcetavc8F917hvinaeavcFb0gocrtavcFbGV86bbavcr4hvaecefheaombka8AhAkdnaEcs9hmba3aA9Rgvcetavc8F917hvinaeavcFb0gocrtavcFbGV86bbavcr4hvaecefheaombka3hAkalaXcdtfaKBdbaXcefcsGhvdndnaYPzbeeeeeeeeeeeeeebekalavcdtfa8ABdbaXcdfcsGhvkdndnaEPzbeeeeeeeeeeeeeebekalavcdtfa3BdbavcefcsGhvkcihoalc;abfaQcitfgEaKBdlaEa8ABdbaQcefcsGhYcdhEavhXaLhOxekcdhoalaXcdtfa3BdbcehEaXcefcsGhXaQhYkalc;abfaYcitfgva8ABdlava3Bdbalc;abfaQaEfcsGcitfgva3BdlavaKBdbascefhsaQaofcsGhQaCcifgCai6mbkkcbhvaeaP0mbcbhvinaeavfavcj1jjbfRbb86bbavcefgvcz9hmbkaeab9Ravfhvkalc;aef8KjjjjbavkZeeucbhddninadcefgdc8F0meceadtae6mbkkadcrfcFeGcr9Uci2cdfabci9U2cHfkmbcbabBd:e:kjjbk:ydewu8Jjjjjbcz9Rhlcbhvdnaicvfae0mbcbhvabcbRb:e:kjjbc;qeV86bbal9cb83iwabcefhoabaefc98fhrdnaiTmbcbhwcbhDindnaoar6mbcbskadaDcdtfydbgqalcwfawaqav9Rgvavc8F91gv7av9Rc507gwcdtfgkydb9Rgvc8E91c9:Gavcdt7awVhvinaoavcFb0gecrtavcFbGV86bbavcr4hvaocefhoaembkakaqBdbaqhvaDcefgDai9hmbkkcbhvaoar0mbaocbBbbaoab9RclfhvkavkBeeucbhddninadcefgdc8F0meceadtae6mbkkadcwfcFeGcr9Uab2cvfk:bvli99dui99ludnaeTmbcuadcetcuftcu7:Yhvdndncuaicuftcu7:YgoJbbbZMgr:lJbbb9p9DTmbar:Ohwxekcjjjj94hwkcbhicbhDinalclfIdbgrJbbbbJbbjZalIdbgq:lar:lMalcwfIdbgk:lMgr:varJbbbb9BEgrNhxaqarNhrdndnakJbbbb9GTmbaxhqxekJbbjZar:l:tgqaq:maxJbbbb9GEhqJbbjZax:l:tgxax:marJbbbb9GEhrkdndnalcxfIdbgxJbbj:;axJbbj:;9GEgkJbbjZakJbbjZ9FEavNJbbbZJbbb:;axJbbbb9GEMgx:lJbbb9p9DTmbax:Ohmxekcjjjj94hmkdndnaqJbbj:;aqJbbj:;9GEgxJbbjZaxJbbjZ9FEaoNJbbbZJbbb:;aqJbbbb9GEMgq:lJbbb9p9DTmbaq:OhPxekcjjjj94hPkdndnarJbbj:;arJbbj:;9GEgqJbbjZaqJbbjZ9FEaoNJbbbZJbbb:;arJbbbb9GEMgr:lJbbb9p9DTmbar:Ohsxekcjjjj94hskdndnadcl9hmbabaifgzas86bbazcifam86bbazcdfaw86bbazcefaP86bbxekabaDfgzas87ebazcofam87ebazclfaw87ebazcdfaP87ebkalczfhlaiclfhiaDcwfhDaecufgembkkk;hlld99eud99eudnaeTmbdndncuaicuftcu7:YgvJbbbZMgo:lJbbb9p9DTmbao:Ohixekcjjjj94hikaic;8FiGhrinabcofcicdalclfIdb:lalIdb:l9EgialcwfIdb:lalaicdtfIdb:l9EEgialcxfIdb:lalaicdtfIdb:l9EEgiarV87ebdndnJbbj:;JbbjZalaicdtfIdbJbbbb9DEgoalaicd7cdtfIdbJ;Zl:1ZNNgwJbbj:;awJbbj:;9GEgDJbbjZaDJbbjZ9FEavNJbbbZJbbb:;awJbbbb9GEMgw:lJbbb9p9DTmbaw:Ohqxekcjjjj94hqkabcdfaq87ebdndnalaicefciGcdtfIdbJ;Zl:1ZNaoNgwJbbj:;awJbbj:;9GEgDJbbjZaDJbbjZ9FEavNJbbbZJbbb:;awJbbbb9GEMgw:lJbbb9p9DTmbaw:Ohqxekcjjjj94hqkabaq87ebdndnaoalaicufciGcdtfIdbJ;Zl:1ZNNgoJbbj:;aoJbbj:;9GEgwJbbjZawJbbjZ9FEavNJbbbZJbbb:;aoJbbbb9GEMgo:lJbbb9p9DTmbao:Ohixekcjjjj94hikabclfai87ebabcwfhbalczfhlaecufgembkkk;3viDue99eu8Jjjjjbcjd9Rgo8Kjjjjbadcd4hrdndndndnavcd9hmbadcl6meaohwarhDinawc:CuBdbawclfhwaDcufgDmbkaeTmiadcl6mdarcdthqalhkcbhxinaohwakhDarhminawawydbgPcbaDIdbgs:8cL4cFeGc:cufasJbbbb9BEgzaPaz9kEBdbaDclfhDawclfhwamcufgmmbkakaqfhkaxcefgxaeSmixbkkaeTmdxekaeTmekarcdthkavce9hhqadcl6hdcbhxindndndnaqmbadmdc:CuhDalhwarhminaDcbawIdbgs:8cL4cFeGc:cufasJbbbb9BEgPaDaP9kEhDawclfhwamcufgmmbxdkkc:CuhDdndnavPleddbdkadmdaohwalhmarhPinawcbamIdbgs:8cL4cFeGgzc;:bazc;:b9kEc:cufasJbbbb9BEBdbamclfhmawclfhwaPcufgPmbxdkkadmecbhwarhminaoawfcbalawfIdbgs:8cL4cFeGgPc8AaPc8A9kEc:cufasJbbbb9BEBdbawclfhwamcufgmmbkkadmbcbhwarhPinaDhmdnavceSmbaoawfydbhmkdndnalawfIdbgscjjj;8iamai9RcefgmcLt9R::NJbbbZJbbb:;asJbbbb9GEMgs:lJbbb9p9DTmbas:Ohzxekcjjjj94hzkabawfazcFFFrGamcKtVBdbawclfhwaPcufgPmbkkabakfhbalakfhlaxcefgxae9hmbkkaocjdf8Kjjjjbk;HqdCui998Jjjjjbc:qd9Rgv8Kjjjjbavc:Sefcbc;KbzNjjjb8AcbhodnadTmbcbhoaiTmbdnabae9hmbavcuadcdtgradcFFFFi0Ecbyd:m:kjjbHjjjjbbgeBd:SeavceBd:mdaeabarz:tjjjb8Akavc:GefcwfcbBdbav9cb83i:Geavc:Gefaeadaiavc:Sefz:njjjbavyd:Gehwadci9UgDcbyd:m:kjjbHjjjjbbhravc:Sefavyd:mdgqcdtfarBdbavaqcefgkBd:mdarcbaDzNjjjbhxavc:SefakcdtfcuaicdtaicFFFFi0Ecbyd:m:kjjbHjjjjbbgmBdbavaqcdfgPBd:mdawhramhkinakalIdbalarydbgscwascw6Ecdtfc;ebfIdbMUdbarclfhrakclfhkaicufgimbkavc:SefaPcdtfcuaDcdtadcFFFF970Ecbyd:m:kjjbHjjjjbbgPBdbdnadci6mbaehraPhkaDhiinakamarydbcdtfIdbamarclfydbcdtfIdbMamarcwfydbcdtfIdbMUdbarcxfhrakclfhkaicufgimbkkaqcifhoavc;qbfhzavhravyd:KehHavyd:OehOcbhscbhkcbhAcehCinarhXcihQaeakci2gLcdtfgrydbhdarclfydbhqabaAcx2fgicwfarcwfydbgKBdbaiclfaqBdbaiadBdbaxakfce86bbazaKBdwazaqBdlazadBdbaPakcdtfcbBdbdnasTmbcihQaXhiinazaQcdtfaiydbgrBdbaQaraK9harad9haraq9hGGfhQaiclfhiascufgsmbkkaAcefhAcbhsinaOaHaeasaLfcdtfydbcdtgifydbcdtfgKhrawaifgqydbgdhidnadTmbdninarydbakSmearclfhraicufgiTmdxbkkaraKadcdtfc98fydbBdbaqaqydbcufBdbkascefgsci9hmbkdndnaQTmbcuhkJbbbbhYcbhqavyd:KehKavyd:OehLindndnawazaqcdtfydbcdtgsfydbgrmbaqcefhqxekaqcs0hiamasfgdIdbh8AadalcbaqcefgqaiEcdtfIdbalarcwarcw6Ecdtfc;ebfIdbMgEUdbaEa8A:thEarcdthiaLaKasfydbcdtfhrinaParydbgscdtfgdaEadIdbMg8AUdba8AaYaYa8A9DgdEhYasakadEhkarclfhraic98fgimbkkaqaQ9hmbkakcu9hmekaCaD9pmdindnaxaCfRbbmbaChkxdkaDaCcefgC9hmbxikkaQczaQcz6EhsazhraXhzakcu9hmbkkaocdtavc:Seffc98fhrdninaoTmearydbcbyd1:kjjbH:bjjjbbarc98fhraocufhoxbkkavc:qdf8Kjjjjbk;IlevucuaicdtgvaicFFFFi0Egocbyd:m:kjjbHjjjjbbhralalyd9GgwcdtfarBdbalawcefBd9GabarBdbaocbyd:m:kjjbHjjjjbbhralalyd9GgocdtfarBdbalaocefBd9GabarBdlcuadcdtadcFFFFi0Ecbyd:m:kjjbHjjjjbbhralalyd9GgocdtfarBdbalaocefBd9GabarBdwabydbcbavzNjjjb8Aadci9UhDdnadTmbabydbhoaehladhrinaoalydbcdtfgvavydbcefBdbalclfhlarcufgrmbkkdnaiTmbabydbhlabydlhrcbhvaihoinaravBdbarclfhralydbavfhvalclfhlaocufgombkkdnadci6mbabydlhrabydwhvcbhlinaecwfydbhoaeclfydbhdaraeydbcdtfgwawydbgwcefBdbavawcdtfalBdbaradcdtfgdadydbgdcefBdbavadcdtfalBdbaraocdtfgoaoydbgocefBdbavaocdtfalBdbaecxfheaDalcefgl9hmbkkdnaiTmbabydlheabydbhlinaeaeydbalydb9RBdbalclfhlaeclfheaicufgimbkkkQbabaeadaic:01jjbz:mjjjbkQbabaeadaic:C:jjjbz:mjjjbk9DeeuabcFeaicdtzNjjjbhlcbhbdnadTmbindnalaeydbcdtfgiydbcu9hmbaiabBdbabcefhbkaeclfheadcufgdmbkkabk;Wkivuo99lu8Jjjjjbc;W;Gb9Rgl8Kjjjjbcbhvalcj;Gbfcbc;KbzNjjjb8AalcuadcdtadcFFFFi0Egocbyd:m:kjjbHjjjjbbgrBdj9GalceBd;G9GalcFFF;7rBdwal9cFFF;7;3FF:;Fb83dbalcFFF97Bd;S9Gal9cFFF;7FFF:;u83d;K9Gaicd4hwdndnadmbJFFuFhDJFFuuhqJFFuuhkJFFuFhxJFFuuhmJFFuFhPxekawcdthsaehzincbhiinalaifgHazaifIdbgDaHIdbgxaxaD9EEUdbalc;K;GbfaifgHaDaHIdbgxaxaD9DEUdbaiclfgicx9hmbkazasfhzavcefgvad9hmbkalIdwhqalId;S9GhDalIdlhkalId;O9GhxalIdbhmalId;K9GhPkdndnadTmbJbbbbJbbjZJbbbbaPam:tgPaPJbbbb9DEgPaxak:tgxaxaP9DEgxaDaq:tgDaDax9DEgD:vaDJbbbb9BEhDawcdthsarhHadhzindndnaDaeIdbam:tNJb;au9eNJbbbZMgx:lJbbb9p9DTmbax:Ohixekcjjjj94hikaicztaicwtcj;GiGVaicsGVc:p;G:dKGcH2c;d;H:WKGcv2c;j:KM;jbGhvdndnaDaeclfIdbak:tNJb;au9eNJbbbZMgx:lJbbb9p9DTmbax:Ohixekcjjjj94hikaicztaicwtcj;GiGVaicsGVc:p;G:dKGcH2c;d;H:WKGcq2cM;j:KMeGavVhvdndnaDaecwfIdbaq:tNJb;au9eNJbbbZMgx:lJbbb9p9DTmbax:Ohixekcjjjj94hikaHavaicztaicwtcj;GiGVaicsGVc:p;G:dKGcH2c;d;H:WKGcC2c:KM;j:KdGVBdbaeasfheaHclfhHazcufgzmbkalcbcj;GbzNjjjbhiarhHadheinaiaHydbgzcFrGcx2fgvavydbcefBdbaiazcq4cFrGcx2fgvavydlcefBdlaiazcC4cFrGcx2fgzazydwcefBdwaHclfhHaecufgembxdkkalcbcj;GbzNjjjb8AkcbhHcbhzcbhecbhvinalaHfgiydbhsaiazBdbaicwfgwydbhOawavBdbaiclfgiydbhwaiaeBdbasazfhzaOavfhvawaefheaHcxfgHcj;Gb9hmbkcbhHalaocbyd:m:kjjbHjjjjbbgiBd:e9GdnadTmbabhzinazaHBdbazclfhzadaHcefgH9hmbkabhHadhzinalaraHydbgecdtfydbcFrGcx2fgvavydbgvcefBdbaiavcdtfaeBdbaHclfhHazcufgzmbkaihHadhzinalaraHydbgecdtfydbcq4cFrGcx2fgvavydlgvcefBdlabavcdtfaeBdbaHclfhHazcufgzmbkabhHadhzinalaraHydbgecdtfydbcC4cFrGcx2fgvavydwgvcefBdwaiavcdtfaeBdbaHclfhHazcufgzmbkcbhHinabaiydbcdtfaHBdbaiclfhiadaHcefgH9hmbkkclhidninaic98Smealcj;Gbfaifydbcbyd1:kjjbH:bjjjbbaic98fhixbkkalc;W;Gbf8Kjjjjbk9teiucbcbyd:q:kjjbgeabcifc98GfgbBd:q:kjjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik;LeeeudndnaeabVciGTmbabhixekdndnadcz9pmbabhixekabhiinaiaeydbBdbaiclfaeclfydbBdbaicwfaecwfydbBdbaicxfaecxfydbBdbaeczfheaiczfhiadc9Wfgdcs0mbkkadcl6mbinaiaeydbBdbaeclfheaiclfhiadc98fgdci0mbkkdnadTmbinaiaeRbb86bbaicefhiaecefheadcufgdmbkkabk;aeedudndnabciGTmbabhixekaecFeGc:b:c:ew2hldndnadcz9pmbabhixekabhiinaialBdbaicxfalBdbaicwfalBdbaiclfalBdbaiczfhiadc9Wfgdcs0mbkkadcl6mbinaialBdbaiclfhiadc98fgdci0mbkkdnadTmbinaiae86bbaicefhiadcufgdmbkkabk9teiucbcbyd:q:kjjbgeabcrfc94GfgbBd:q:kjjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik9:eiuZbhedndncbyd:q:kjjbgdaecztgi9nmbcuheadai9RcFFifcz4nbcuSmekadhekcbabae9Rcifc98Gcbyd:q:kjjbfgdBd:q:kjjbdnadZbcztge9nmbadae9RcFFifcz4nb8Akkk:Iddbcjwk:edb4:h9w9N94:P:gW:j9O:ye9Pbbbbbbebbbdbbbebbbdbbbbbbbdbbbbbbbebbbbbbb:l29hZ;69:9kZ;N;76Z;rg97Z;z;o9xZ8J;B85Z;:;u9yZ;b;k9HZ:2;Z9DZ9e:l9mZ59A8KZ:r;T3Z:A:zYZ79OHZ;j4::8::Y:D9V8:bbbb9s:49:Z8R:hBZ9M9M;M8:L;z;o8:;8:PG89q;x:J878R:hQ8::M:B;e87bbbbbbjZbbjZbbjZ:E;V;N8::Y:DsZ9i;H;68:xd;R8:;h0838:;W:NoZbbbb:WV9O8:uf888:9i;H;68:9c9G;L89;n;m9m89;D8Ko8:bbbbf:8tZ9m836ZS:2AZL;zPZZ818EZ9e:lxZ;U98F8:819E;68:bc:eqkzebbbebbbdbbba:vbb'; // embed! wasm\n\n  var wasmpack = new Uint8Array([32, 0, 65, 2, 1, 106, 34, 33, 3, 128, 11, 4, 13, 64, 6, 253, 10, 7, 15, 116, 127, 5, 8, 12, 40, 16, 19, 54, 20, 9, 27, 255, 113, 17, 42, 67, 24, 23, 146, 148, 18, 14, 22, 45, 70, 69, 56, 114, 101, 21, 25, 63, 75, 136, 108, 28, 118, 29, 73, 115]);\n  if (typeof WebAssembly !== 'object') {\n    return {\n      supported: false\n    };\n  }\n  var instance;\n  var ready = WebAssembly.instantiate(unpack(wasm), {}).then(function (result) {\n    instance = result.instance;\n    instance.exports.__wasm_call_ctors();\n    instance.exports.meshopt_encodeVertexVersion(0);\n    instance.exports.meshopt_encodeIndexVersion(1);\n  });\n  function unpack(data) {\n    var result = new Uint8Array(data.length);\n    for (var i = 0; i < data.length; ++i) {\n      var ch = data.charCodeAt(i);\n      result[i] = ch > 96 ? ch - 97 : ch > 64 ? ch - 39 : ch + 4;\n    }\n    var write = 0;\n    for (var i = 0; i < data.length; ++i) {\n      result[write++] = result[i] < 60 ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];\n    }\n    return result.buffer.slice(0, write);\n  }\n  function assert(cond) {\n    if (!cond) {\n      throw new Error('Assertion failed');\n    }\n  }\n  function bytes(view) {\n    return new Uint8Array(view.buffer, view.byteOffset, view.byteLength);\n  }\n  function reorder(fun, indices, vertices, optf) {\n    var sbrk = instance.exports.sbrk;\n    var ip = sbrk(indices.length * 4);\n    var rp = sbrk(vertices * 4);\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    var indices8 = bytes(indices);\n    heap.set(indices8, ip);\n    if (optf) {\n      optf(ip, ip, indices.length, vertices);\n    }\n    var unique = fun(rp, ip, indices.length, vertices);\n    // heap may have grown\n    heap = new Uint8Array(instance.exports.memory.buffer);\n    var remap = new Uint32Array(vertices);\n    new Uint8Array(remap.buffer).set(heap.subarray(rp, rp + vertices * 4));\n    indices8.set(heap.subarray(ip, ip + indices.length * 4));\n    sbrk(ip - sbrk(0));\n    for (var i = 0; i < indices.length; ++i) indices[i] = remap[indices[i]];\n    return [remap, unique];\n  }\n  function spatialsort(fun, positions, count, stride) {\n    var sbrk = instance.exports.sbrk;\n    var ip = sbrk(count * 4);\n    var sp = sbrk(count * stride);\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(bytes(positions), sp);\n    fun(ip, sp, count, stride);\n    // heap may have grown\n    heap = new Uint8Array(instance.exports.memory.buffer);\n    var remap = new Uint32Array(count);\n    new Uint8Array(remap.buffer).set(heap.subarray(ip, ip + count * 4));\n    sbrk(ip - sbrk(0));\n    return remap;\n  }\n  function encode(fun, bound, source, count, size) {\n    var sbrk = instance.exports.sbrk;\n    var tp = sbrk(bound);\n    var sp = sbrk(count * size);\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(bytes(source), sp);\n    var res = fun(tp, bound, sp, count, size);\n    var target = new Uint8Array(res);\n    target.set(heap.subarray(tp, tp + res));\n    sbrk(tp - sbrk(0));\n    return target;\n  }\n  function maxindex(source) {\n    var result = 0;\n    for (var i = 0; i < source.length; ++i) {\n      var index = source[i];\n      result = result < index ? index : result;\n    }\n    return result;\n  }\n  function index32(source, size) {\n    assert(size == 2 || size == 4);\n    if (size == 4) {\n      return new Uint32Array(source.buffer, source.byteOffset, source.byteLength / 4);\n    } else {\n      var view = new Uint16Array(source.buffer, source.byteOffset, source.byteLength / 2);\n      return new Uint32Array(view); // copies each element\n    }\n  }\n  function filter(fun, source, count, stride, bits, insize, mode) {\n    var sbrk = instance.exports.sbrk;\n    var tp = sbrk(count * stride);\n    var sp = sbrk(count * insize);\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(bytes(source), sp);\n    fun(tp, count, stride, bits, sp, mode);\n    var target = new Uint8Array(count * stride);\n    target.set(heap.subarray(tp, tp + count * stride));\n    sbrk(tp - sbrk(0));\n    return target;\n  }\n  return {\n    ready: ready,\n    supported: true,\n    reorderMesh: function (indices, triangles, optsize) {\n      var optf = triangles ? optsize ? instance.exports.meshopt_optimizeVertexCacheStrip : instance.exports.meshopt_optimizeVertexCache : undefined;\n      return reorder(instance.exports.meshopt_optimizeVertexFetchRemap, indices, maxindex(indices) + 1, optf);\n    },\n    reorderPoints: function (positions, positions_stride) {\n      assert(positions instanceof Float32Array);\n      assert(positions.length % positions_stride == 0);\n      assert(positions_stride >= 3);\n      return spatialsort(instance.exports.meshopt_spatialSortRemap, positions, positions.length / positions_stride, positions_stride * 4);\n    },\n    encodeVertexBuffer: function (source, count, size) {\n      assert(size > 0 && size <= 256);\n      assert(size % 4 == 0);\n      var bound = instance.exports.meshopt_encodeVertexBufferBound(count, size);\n      return encode(instance.exports.meshopt_encodeVertexBuffer, bound, source, count, size);\n    },\n    encodeIndexBuffer: function (source, count, size) {\n      assert(size == 2 || size == 4);\n      assert(count % 3 == 0);\n      var indices = index32(source, size);\n      var bound = instance.exports.meshopt_encodeIndexBufferBound(count, maxindex(indices) + 1);\n      return encode(instance.exports.meshopt_encodeIndexBuffer, bound, indices, count, 4);\n    },\n    encodeIndexSequence: function (source, count, size) {\n      assert(size == 2 || size == 4);\n      var indices = index32(source, size);\n      var bound = instance.exports.meshopt_encodeIndexSequenceBound(count, maxindex(indices) + 1);\n      return encode(instance.exports.meshopt_encodeIndexSequence, bound, indices, count, 4);\n    },\n    encodeGltfBuffer: function (source, count, size, mode) {\n      var table = {\n        ATTRIBUTES: this.encodeVertexBuffer,\n        TRIANGLES: this.encodeIndexBuffer,\n        INDICES: this.encodeIndexSequence\n      };\n      assert(table[mode]);\n      return table[mode](source, count, size);\n    },\n    encodeFilterOct: function (source, count, stride, bits) {\n      assert(stride == 4 || stride == 8);\n      assert(bits >= 1 && bits <= 16);\n      return filter(instance.exports.meshopt_encodeFilterOct, source, count, stride, bits, 16);\n    },\n    encodeFilterQuat: function (source, count, stride, bits) {\n      assert(stride == 8);\n      assert(bits >= 4 && bits <= 16);\n      return filter(instance.exports.meshopt_encodeFilterQuat, source, count, stride, bits, 16);\n    },\n    encodeFilterExp: function (source, count, stride, bits, mode) {\n      assert(stride > 0 && stride % 4 == 0);\n      assert(bits >= 1 && bits <= 24);\n      var table = {\n        Separate: 0,\n        SharedVector: 1,\n        SharedComponent: 2,\n        Clamped: 3\n      };\n      return filter(instance.exports.meshopt_encodeFilterExp, source, count, stride, bits, stride, mode ? table[mode] : 1);\n    }\n  };\n}();\nexport { MeshoptEncoder };","map":{"version":3,"names":["MeshoptEncoder","wasm","wasmpack","Uint8Array","WebAssembly","supported","instance","ready","instantiate","unpack","then","result","exports","__wasm_call_ctors","meshopt_encodeVertexVersion","meshopt_encodeIndexVersion","data","length","i","ch","charCodeAt","write","buffer","slice","assert","cond","Error","bytes","view","byteOffset","byteLength","reorder","fun","indices","vertices","optf","sbrk","ip","rp","heap","memory","indices8","set","unique","remap","Uint32Array","subarray","spatialsort","positions","count","stride","sp","encode","bound","source","size","tp","res","target","maxindex","index","index32","Uint16Array","filter","bits","insize","mode","reorderMesh","triangles","optsize","meshopt_optimizeVertexCacheStrip","meshopt_optimizeVertexCache","undefined","meshopt_optimizeVertexFetchRemap","reorderPoints","positions_stride","Float32Array","meshopt_spatialSortRemap","encodeVertexBuffer","meshopt_encodeVertexBufferBound","meshopt_encodeVertexBuffer","encodeIndexBuffer","meshopt_encodeIndexBufferBound","meshopt_encodeIndexBuffer","encodeIndexSequence","meshopt_encodeIndexSequenceBound","meshopt_encodeIndexSequence","encodeGltfBuffer","table","ATTRIBUTES","TRIANGLES","INDICES","encodeFilterOct","meshopt_encodeFilterOct","encodeFilterQuat","meshopt_encodeFilterQuat","encodeFilterExp","Separate","SharedVector","SharedComponent","Clamped","meshopt_encodeFilterExp"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/meshoptimizer/meshopt_encoder.module.js"],"sourcesContent":["// This file is part of meshoptimizer library and is distributed under the terms of MIT License.\n// Copyright (C) 2016-2024, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)\nvar MeshoptEncoder = (function () {\n\t// Built with clang version 18.1.2\n\t// Built from meshoptimizer 0.22\n\tvar wasm =\n\t\t'b9H79TebbbeJq9Geueu9Geub9Gbb9Gvuuuuueu9Gduueu9Gluuuueu9Gvuuuuub9Gouuuuuub9Gluuuub9GiuuueuiKLdilevlevlooroowwvwbDDbelve9Weiiviebeoweuec:G:Qdkr;RiOo9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bb8A9TW79O9V9Wt9FW9U9J9V9KW9wWVtW949c919M9MWVbe8F9TW79O9V9Wt9FW9U9J9V9KW9wWVtW949c919M9MWV9c9V919U9KbdE9TW79O9V9Wt9FW9U9J9V9KW9wWVtW949wWV79P9V9UbiY9TW79O9V9Wt9FW9U9J9V9KW69U9KW949c919M9MWVbl8E9TW79O9V9Wt9FW9U9J9V9KW69U9KW949c919M9MWV9c9V919U9Kbv8A9TW79O9V9Wt9FW9U9J9V9KW69U9KW949wWV79P9V9UboE9TW79O9V9Wt9FW9U9J9V9KW69U9KW949tWG91W9U9JWbra9TW79O9V9Wt9FW9U9J9V9KW69U9KW949tWG91W9U9JW9c9V919U9KbwL9TW79O9V9Wt9FW9U9J9V9KWS9P2tWV9p9JtbDK9TW79O9V9Wt9FW9U9J9V9KWS9P2tWV9r919HtbqL9TW79O9V9Wt9FW9U9J9V9KWS9P2tWVT949WbkE9TW79O9V9Wt9F9V9Wt9P9T9P96W9wWVtW94J9H9J9OWbPa9TW79O9V9Wt9F9V9Wt9P9T9P96W9wWVtW94J9H9J9OW9ttV9P9Wbsa9TW79O9V9Wt9F9V9Wt9P9T9P96W9wWVtW94SWt9J9O9sW9T9H9WbzK9TW79O9V9Wt9F79W9Ht9P9H29t9VVt9sW9T9H9WbHl79IV9RbODwebcekdQXq;A9pLdbk;QqeKu8Jjjjjbcjo9Rgv8Kjjjjbcbhodnalcefae0mbabcbRbN:kjjbc:GeV86bbavcjdfcbcjdzNjjjb8AdnaiTmbavcjdfadalz:tjjjb8Akabaefhrabcefhwavalfcbcbcjdal9RalcFe0EzNjjjb8Aavavcjdfalz:tjjjbhDcj;abal9Uc;WFbGgecjdaecjd6Ehqcbhkindndnaiak9nmbaDcjlfcbcjdzNjjjb8Aaqaiak9Rakaqfai6Egxcsfgecl4cifcd4hmadakal2fhPdndndnaec9WGgsTmbcbhzaPhHawhOxekdnaxmbalheinaraw9Ram6miawcbamzNjjjbamfhwaecufgembxvkkcbhAaPhOinaDaAfRbbhCaDcjlfheaOhoaxhXinaeaoRbbgQaC9RgCcetaCcKtcK91cr4786bbaoalfhoaecefheaQhCaXcufgXmbkaraw9Ram6mdaOcefhOawcbamzNjjjbamfhwaAcefgAal9hmbxlkkindnaxTmbaDazfRbbhCaDcjlfheaHhoaxhXinaeaoRbbgQaC9RgCcetaCcKtcK91cr4786bbaoalfhoaecefheaQhCaXcufgXmbkkaraO9Ram6mearaOcbamzNjjjbgLamfgw9RcK6mecbhKaDcjlfhOinaDcjlfaKfhYcwhAczhQceheindndnaegXce9hmbcuhoaYRbbmecbhodninaogecsSmeaecefhoaOaefcefRbbTmbkkcucbaecs6EhoxekaXcethocuaXtc;:bGcFb7hCcbheinaoaCaOaefRbb9nfhoaecefgecz9hmbkkaoaQaoaQ6geEhQaXaAaeEhAaXcetheaXcl6mbkdndndndnaAcufPdiebkaLaKco4fgeaeRbbcdciaAclSEaKci4coGtV86bbaAcw9hmeawaY8Pbb83bbawcwfaYcwf8Pbb83bbawczfhwxdkaLaKco4fgeaeRbbceaKci4coGtV86bbkdncwaA9Tg8Ambinawcb86bbawcefhwxbkkcuaAtcu7hYcbhEaOh3ina3hea8AhCcbhoinaeRbbgQaYcFeGgXaQaX6EaoaAtVhoaecefheaCcufgCmbkawao86bba3a8Afh3awcefhwaEa8AfgEcz6mbkcbheindnaOaefRbbgoaX6mbawao86bbawcefhwkaecefgecz9hmbkkdnaKczfgKas9pmbaOczfhOaraw9RcL0mekkaKas6meawTmeaHcefhHawhOazcefgzalSmixbkkcbhoxikcbhoaraw9Ralcaalca0E6mddnalc8F0mbawcbcaal9RgezNjjjbaefhwkawaDcjdfalz:tjjjbalfab9RhoxdkaDaPaxcufal2falz:tjjjb8Aaxakfhkawmbkcbhokavcjof8Kjjjjbaok9heeuaecaaeca0Eabcj;abae9Uc;WFbGgdcjdadcjd6Egdfcufad9Uae2adcl4cifcd4adV2fcefkmbcbabBdN:kjjbk:zse5u8Jjjjjbc;ae9Rgl8Kjjjjbcbhvdnaici9UgocHfae0mbabcbyd:e:kjjbgrc;GeV86bbalc;abfcFecjezNjjjb8AalcUfgw9cu83ibalc8WfgD9cu83ibalcyfgq9cu83ibalcafgk9cu83ibalcKfgx9cu83ibalczfgm9cu83ibal9cu83iwal9cu83ibabaefc9WfhPabcefgsaofhednaiTmbcmcsarcb9kgzEhHcbhOcbhAcbhCcbhXcbhQindnaeaP9nmbcbhvxikaQcufhvadaCcdtfgLydbhKaLcwfydbhYaLclfydbh8AcbhEdndndninalc;abfavcsGcitfgoydlh3dndndnaoydbgoaK9hmba3a8ASmekdnaoa8A9hmba3aY9hmbaEcefhExekaoaY9hmea3aK9hmeaEcdfhEkaEc870mdaXcufhvaLaEciGcx2goc:y1jjbfydbcdtfydbh3aLaocN1jjbfydbcdtfydbh8AaLaoc:q1jjbfydbcdtfydbhKcbhodnindnalavcsGcdtfydba39hmbaohYxdkcuhYavcufhvaocefgocz9hmbkkaOa3aOSgvaYce9iaYaH9oVgoGfhOdndndncbcsavEaYaoEgvcs9hmbarce9imba3a3aAa3cefaASgvEgAcefSmecmcsavEhvkasavaEcdtc;WeGV86bbavcs9hmea3aA9Rgvcetavc8F917hvinaeavcFb0crtavcFbGV86bbaecefheavcje6hoavcr4hvaoTmbka3hAxvkcPhvasaEcdtcPV86bba3hAkavTmiavaH9omicdhocehEaQhYxlkavcufhvaEclfgEc;ab9hmbkkdnaLceaYaOSceta8AaOSEcx2gvc:q1jjbfydbcdtfydbgKTaLavcN1jjbfydbcdtfydbg8AceSGaLavc:y1jjbfydbcdtfydbg3cdSGaOcb9hGazGg5ce9hmbaw9cu83ibaD9cu83ibaq9cu83ibak9cu83ibax9cu83ibam9cu83ibal9cu83iwal9cu83ibcbhOkcbhEaXcufgvhodnindnalaocsGcdtfydba8A9hmbaEhYxdkcuhYaocufhoaEcefgEcz9hmbkkcbhodnindnalavcsGcdtfydba39hmbaohExdkcuhEavcufhvaocefgocz9hmbkkaOaKaOSg8EfhLdndnaYcm0mbaYcefhYxekcbcsa8AaLSgvEhYaLavfhLkdndnaEcm0mbaEcefhExekcbcsa3aLSgvEhEaLavfhLkc9:cua8EEh8FcbhvaEaYcltVgacFeGhodndndninavcj1jjbfRbbaoSmeavcefgvcz9hmbxdkka5aKaO9havcm0VVmbasavc;WeV86bbxekasa8F86bbaeaa86bbaecefhekdna8EmbaKaA9Rgvcetavc8F917hvinaeavcFb0gocrtavcFbGV86bbavcr4hvaecefheaombkaKhAkdnaYcs9hmba8AaA9Rgvcetavc8F917hvinaeavcFb0gocrtavcFbGV86bbavcr4hvaecefheaombka8AhAkdnaEcs9hmba3aA9Rgvcetavc8F917hvinaeavcFb0gocrtavcFbGV86bbavcr4hvaecefheaombka3hAkalaXcdtfaKBdbaXcefcsGhvdndnaYPzbeeeeeeeeeeeeeebekalavcdtfa8ABdbaXcdfcsGhvkdndnaEPzbeeeeeeeeeeeeeebekalavcdtfa3BdbavcefcsGhvkcihoalc;abfaQcitfgEaKBdlaEa8ABdbaQcefcsGhYcdhEavhXaLhOxekcdhoalaXcdtfa3BdbcehEaXcefcsGhXaQhYkalc;abfaYcitfgva8ABdlava3Bdbalc;abfaQaEfcsGcitfgva3BdlavaKBdbascefhsaQaofcsGhQaCcifgCai6mbkkcbhvaeaP0mbcbhvinaeavfavcj1jjbfRbb86bbavcefgvcz9hmbkaeab9Ravfhvkalc;aef8KjjjjbavkZeeucbhddninadcefgdc8F0meceadtae6mbkkadcrfcFeGcr9Uci2cdfabci9U2cHfkmbcbabBd:e:kjjbk:ydewu8Jjjjjbcz9Rhlcbhvdnaicvfae0mbcbhvabcbRb:e:kjjbc;qeV86bbal9cb83iwabcefhoabaefc98fhrdnaiTmbcbhwcbhDindnaoar6mbcbskadaDcdtfydbgqalcwfawaqav9Rgvavc8F91gv7av9Rc507gwcdtfgkydb9Rgvc8E91c9:Gavcdt7awVhvinaoavcFb0gecrtavcFbGV86bbavcr4hvaocefhoaembkakaqBdbaqhvaDcefgDai9hmbkkcbhvaoar0mbaocbBbbaoab9RclfhvkavkBeeucbhddninadcefgdc8F0meceadtae6mbkkadcwfcFeGcr9Uab2cvfk:bvli99dui99ludnaeTmbcuadcetcuftcu7:Yhvdndncuaicuftcu7:YgoJbbbZMgr:lJbbb9p9DTmbar:Ohwxekcjjjj94hwkcbhicbhDinalclfIdbgrJbbbbJbbjZalIdbgq:lar:lMalcwfIdbgk:lMgr:varJbbbb9BEgrNhxaqarNhrdndnakJbbbb9GTmbaxhqxekJbbjZar:l:tgqaq:maxJbbbb9GEhqJbbjZax:l:tgxax:marJbbbb9GEhrkdndnalcxfIdbgxJbbj:;axJbbj:;9GEgkJbbjZakJbbjZ9FEavNJbbbZJbbb:;axJbbbb9GEMgx:lJbbb9p9DTmbax:Ohmxekcjjjj94hmkdndnaqJbbj:;aqJbbj:;9GEgxJbbjZaxJbbjZ9FEaoNJbbbZJbbb:;aqJbbbb9GEMgq:lJbbb9p9DTmbaq:OhPxekcjjjj94hPkdndnarJbbj:;arJbbj:;9GEgqJbbjZaqJbbjZ9FEaoNJbbbZJbbb:;arJbbbb9GEMgr:lJbbb9p9DTmbar:Ohsxekcjjjj94hskdndnadcl9hmbabaifgzas86bbazcifam86bbazcdfaw86bbazcefaP86bbxekabaDfgzas87ebazcofam87ebazclfaw87ebazcdfaP87ebkalczfhlaiclfhiaDcwfhDaecufgembkkk;hlld99eud99eudnaeTmbdndncuaicuftcu7:YgvJbbbZMgo:lJbbb9p9DTmbao:Ohixekcjjjj94hikaic;8FiGhrinabcofcicdalclfIdb:lalIdb:l9EgialcwfIdb:lalaicdtfIdb:l9EEgialcxfIdb:lalaicdtfIdb:l9EEgiarV87ebdndnJbbj:;JbbjZalaicdtfIdbJbbbb9DEgoalaicd7cdtfIdbJ;Zl:1ZNNgwJbbj:;awJbbj:;9GEgDJbbjZaDJbbjZ9FEavNJbbbZJbbb:;awJbbbb9GEMgw:lJbbb9p9DTmbaw:Ohqxekcjjjj94hqkabcdfaq87ebdndnalaicefciGcdtfIdbJ;Zl:1ZNaoNgwJbbj:;awJbbj:;9GEgDJbbjZaDJbbjZ9FEavNJbbbZJbbb:;awJbbbb9GEMgw:lJbbb9p9DTmbaw:Ohqxekcjjjj94hqkabaq87ebdndnaoalaicufciGcdtfIdbJ;Zl:1ZNNgoJbbj:;aoJbbj:;9GEgwJbbjZawJbbjZ9FEavNJbbbZJbbb:;aoJbbbb9GEMgo:lJbbb9p9DTmbao:Ohixekcjjjj94hikabclfai87ebabcwfhbalczfhlaecufgembkkk;3viDue99eu8Jjjjjbcjd9Rgo8Kjjjjbadcd4hrdndndndnavcd9hmbadcl6meaohwarhDinawc:CuBdbawclfhwaDcufgDmbkaeTmiadcl6mdarcdthqalhkcbhxinaohwakhDarhminawawydbgPcbaDIdbgs:8cL4cFeGc:cufasJbbbb9BEgzaPaz9kEBdbaDclfhDawclfhwamcufgmmbkakaqfhkaxcefgxaeSmixbkkaeTmdxekaeTmekarcdthkavce9hhqadcl6hdcbhxindndndnaqmbadmdc:CuhDalhwarhminaDcbawIdbgs:8cL4cFeGc:cufasJbbbb9BEgPaDaP9kEhDawclfhwamcufgmmbxdkkc:CuhDdndnavPleddbdkadmdaohwalhmarhPinawcbamIdbgs:8cL4cFeGgzc;:bazc;:b9kEc:cufasJbbbb9BEBdbamclfhmawclfhwaPcufgPmbxdkkadmecbhwarhminaoawfcbalawfIdbgs:8cL4cFeGgPc8AaPc8A9kEc:cufasJbbbb9BEBdbawclfhwamcufgmmbkkadmbcbhwarhPinaDhmdnavceSmbaoawfydbhmkdndnalawfIdbgscjjj;8iamai9RcefgmcLt9R::NJbbbZJbbb:;asJbbbb9GEMgs:lJbbb9p9DTmbas:Ohzxekcjjjj94hzkabawfazcFFFrGamcKtVBdbawclfhwaPcufgPmbkkabakfhbalakfhlaxcefgxae9hmbkkaocjdf8Kjjjjbk;HqdCui998Jjjjjbc:qd9Rgv8Kjjjjbavc:Sefcbc;KbzNjjjb8AcbhodnadTmbcbhoaiTmbdnabae9hmbavcuadcdtgradcFFFFi0Ecbyd:m:kjjbHjjjjbbgeBd:SeavceBd:mdaeabarz:tjjjb8Akavc:GefcwfcbBdbav9cb83i:Geavc:Gefaeadaiavc:Sefz:njjjbavyd:Gehwadci9UgDcbyd:m:kjjbHjjjjbbhravc:Sefavyd:mdgqcdtfarBdbavaqcefgkBd:mdarcbaDzNjjjbhxavc:SefakcdtfcuaicdtaicFFFFi0Ecbyd:m:kjjbHjjjjbbgmBdbavaqcdfgPBd:mdawhramhkinakalIdbalarydbgscwascw6Ecdtfc;ebfIdbMUdbarclfhrakclfhkaicufgimbkavc:SefaPcdtfcuaDcdtadcFFFF970Ecbyd:m:kjjbHjjjjbbgPBdbdnadci6mbaehraPhkaDhiinakamarydbcdtfIdbamarclfydbcdtfIdbMamarcwfydbcdtfIdbMUdbarcxfhrakclfhkaicufgimbkkaqcifhoavc;qbfhzavhravyd:KehHavyd:OehOcbhscbhkcbhAcehCinarhXcihQaeakci2gLcdtfgrydbhdarclfydbhqabaAcx2fgicwfarcwfydbgKBdbaiclfaqBdbaiadBdbaxakfce86bbazaKBdwazaqBdlazadBdbaPakcdtfcbBdbdnasTmbcihQaXhiinazaQcdtfaiydbgrBdbaQaraK9harad9haraq9hGGfhQaiclfhiascufgsmbkkaAcefhAcbhsinaOaHaeasaLfcdtfydbcdtgifydbcdtfgKhrawaifgqydbgdhidnadTmbdninarydbakSmearclfhraicufgiTmdxbkkaraKadcdtfc98fydbBdbaqaqydbcufBdbkascefgsci9hmbkdndnaQTmbcuhkJbbbbhYcbhqavyd:KehKavyd:OehLindndnawazaqcdtfydbcdtgsfydbgrmbaqcefhqxekaqcs0hiamasfgdIdbh8AadalcbaqcefgqaiEcdtfIdbalarcwarcw6Ecdtfc;ebfIdbMgEUdbaEa8A:thEarcdthiaLaKasfydbcdtfhrinaParydbgscdtfgdaEadIdbMg8AUdba8AaYaYa8A9DgdEhYasakadEhkarclfhraic98fgimbkkaqaQ9hmbkakcu9hmekaCaD9pmdindnaxaCfRbbmbaChkxdkaDaCcefgC9hmbxikkaQczaQcz6EhsazhraXhzakcu9hmbkkaocdtavc:Seffc98fhrdninaoTmearydbcbyd1:kjjbH:bjjjbbarc98fhraocufhoxbkkavc:qdf8Kjjjjbk;IlevucuaicdtgvaicFFFFi0Egocbyd:m:kjjbHjjjjbbhralalyd9GgwcdtfarBdbalawcefBd9GabarBdbaocbyd:m:kjjbHjjjjbbhralalyd9GgocdtfarBdbalaocefBd9GabarBdlcuadcdtadcFFFFi0Ecbyd:m:kjjbHjjjjbbhralalyd9GgocdtfarBdbalaocefBd9GabarBdwabydbcbavzNjjjb8Aadci9UhDdnadTmbabydbhoaehladhrinaoalydbcdtfgvavydbcefBdbalclfhlarcufgrmbkkdnaiTmbabydbhlabydlhrcbhvaihoinaravBdbarclfhralydbavfhvalclfhlaocufgombkkdnadci6mbabydlhrabydwhvcbhlinaecwfydbhoaeclfydbhdaraeydbcdtfgwawydbgwcefBdbavawcdtfalBdbaradcdtfgdadydbgdcefBdbavadcdtfalBdbaraocdtfgoaoydbgocefBdbavaocdtfalBdbaecxfheaDalcefgl9hmbkkdnaiTmbabydlheabydbhlinaeaeydbalydb9RBdbalclfhlaeclfheaicufgimbkkkQbabaeadaic:01jjbz:mjjjbkQbabaeadaic:C:jjjbz:mjjjbk9DeeuabcFeaicdtzNjjjbhlcbhbdnadTmbindnalaeydbcdtfgiydbcu9hmbaiabBdbabcefhbkaeclfheadcufgdmbkkabk;Wkivuo99lu8Jjjjjbc;W;Gb9Rgl8Kjjjjbcbhvalcj;Gbfcbc;KbzNjjjb8AalcuadcdtadcFFFFi0Egocbyd:m:kjjbHjjjjbbgrBdj9GalceBd;G9GalcFFF;7rBdwal9cFFF;7;3FF:;Fb83dbalcFFF97Bd;S9Gal9cFFF;7FFF:;u83d;K9Gaicd4hwdndnadmbJFFuFhDJFFuuhqJFFuuhkJFFuFhxJFFuuhmJFFuFhPxekawcdthsaehzincbhiinalaifgHazaifIdbgDaHIdbgxaxaD9EEUdbalc;K;GbfaifgHaDaHIdbgxaxaD9DEUdbaiclfgicx9hmbkazasfhzavcefgvad9hmbkalIdwhqalId;S9GhDalIdlhkalId;O9GhxalIdbhmalId;K9GhPkdndnadTmbJbbbbJbbjZJbbbbaPam:tgPaPJbbbb9DEgPaxak:tgxaxaP9DEgxaDaq:tgDaDax9DEgD:vaDJbbbb9BEhDawcdthsarhHadhzindndnaDaeIdbam:tNJb;au9eNJbbbZMgx:lJbbb9p9DTmbax:Ohixekcjjjj94hikaicztaicwtcj;GiGVaicsGVc:p;G:dKGcH2c;d;H:WKGcv2c;j:KM;jbGhvdndnaDaeclfIdbak:tNJb;au9eNJbbbZMgx:lJbbb9p9DTmbax:Ohixekcjjjj94hikaicztaicwtcj;GiGVaicsGVc:p;G:dKGcH2c;d;H:WKGcq2cM;j:KMeGavVhvdndnaDaecwfIdbaq:tNJb;au9eNJbbbZMgx:lJbbb9p9DTmbax:Ohixekcjjjj94hikaHavaicztaicwtcj;GiGVaicsGVc:p;G:dKGcH2c;d;H:WKGcC2c:KM;j:KdGVBdbaeasfheaHclfhHazcufgzmbkalcbcj;GbzNjjjbhiarhHadheinaiaHydbgzcFrGcx2fgvavydbcefBdbaiazcq4cFrGcx2fgvavydlcefBdlaiazcC4cFrGcx2fgzazydwcefBdwaHclfhHaecufgembxdkkalcbcj;GbzNjjjb8AkcbhHcbhzcbhecbhvinalaHfgiydbhsaiazBdbaicwfgwydbhOawavBdbaiclfgiydbhwaiaeBdbasazfhzaOavfhvawaefheaHcxfgHcj;Gb9hmbkcbhHalaocbyd:m:kjjbHjjjjbbgiBd:e9GdnadTmbabhzinazaHBdbazclfhzadaHcefgH9hmbkabhHadhzinalaraHydbgecdtfydbcFrGcx2fgvavydbgvcefBdbaiavcdtfaeBdbaHclfhHazcufgzmbkaihHadhzinalaraHydbgecdtfydbcq4cFrGcx2fgvavydlgvcefBdlabavcdtfaeBdbaHclfhHazcufgzmbkabhHadhzinalaraHydbgecdtfydbcC4cFrGcx2fgvavydwgvcefBdwaiavcdtfaeBdbaHclfhHazcufgzmbkcbhHinabaiydbcdtfaHBdbaiclfhiadaHcefgH9hmbkkclhidninaic98Smealcj;Gbfaifydbcbyd1:kjjbH:bjjjbbaic98fhixbkkalc;W;Gbf8Kjjjjbk9teiucbcbyd:q:kjjbgeabcifc98GfgbBd:q:kjjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik;LeeeudndnaeabVciGTmbabhixekdndnadcz9pmbabhixekabhiinaiaeydbBdbaiclfaeclfydbBdbaicwfaecwfydbBdbaicxfaecxfydbBdbaeczfheaiczfhiadc9Wfgdcs0mbkkadcl6mbinaiaeydbBdbaeclfheaiclfhiadc98fgdci0mbkkdnadTmbinaiaeRbb86bbaicefhiaecefheadcufgdmbkkabk;aeedudndnabciGTmbabhixekaecFeGc:b:c:ew2hldndnadcz9pmbabhixekabhiinaialBdbaicxfalBdbaicwfalBdbaiclfalBdbaiczfhiadc9Wfgdcs0mbkkadcl6mbinaialBdbaiclfhiadc98fgdci0mbkkdnadTmbinaiae86bbaicefhiadcufgdmbkkabk9teiucbcbyd:q:kjjbgeabcrfc94GfgbBd:q:kjjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik9:eiuZbhedndncbyd:q:kjjbgdaecztgi9nmbcuheadai9RcFFifcz4nbcuSmekadhekcbabae9Rcifc98Gcbyd:q:kjjbfgdBd:q:kjjbdnadZbcztge9nmbadae9RcFFifcz4nb8Akkk:Iddbcjwk:edb4:h9w9N94:P:gW:j9O:ye9Pbbbbbbebbbdbbbebbbdbbbbbbbdbbbbbbbebbbbbbb:l29hZ;69:9kZ;N;76Z;rg97Z;z;o9xZ8J;B85Z;:;u9yZ;b;k9HZ:2;Z9DZ9e:l9mZ59A8KZ:r;T3Z:A:zYZ79OHZ;j4::8::Y:D9V8:bbbb9s:49:Z8R:hBZ9M9M;M8:L;z;o8:;8:PG89q;x:J878R:hQ8::M:B;e87bbbbbbjZbbjZbbjZ:E;V;N8::Y:DsZ9i;H;68:xd;R8:;h0838:;W:NoZbbbb:WV9O8:uf888:9i;H;68:9c9G;L89;n;m9m89;D8Ko8:bbbbf:8tZ9m836ZS:2AZL;zPZZ818EZ9e:lxZ;U98F8:819E;68:bc:eqkzebbbebbbdbbba:vbb'; // embed! wasm\n\n\tvar wasmpack = new Uint8Array([\n\t\t32, 0, 65, 2, 1, 106, 34, 33, 3, 128, 11, 4, 13, 64, 6, 253, 10, 7, 15, 116, 127, 5, 8, 12, 40, 16, 19, 54, 20, 9, 27, 255, 113, 17, 42, 67,\n\t\t24, 23, 146, 148, 18, 14, 22, 45, 70, 69, 56, 114, 101, 21, 25, 63, 75, 136, 108, 28, 118, 29, 73, 115,\n\t]);\n\n\tif (typeof WebAssembly !== 'object') {\n\t\treturn {\n\t\t\tsupported: false,\n\t\t};\n\t}\n\n\tvar instance;\n\n\tvar ready = WebAssembly.instantiate(unpack(wasm), {}).then(function (result) {\n\t\tinstance = result.instance;\n\t\tinstance.exports.__wasm_call_ctors();\n\t\tinstance.exports.meshopt_encodeVertexVersion(0);\n\t\tinstance.exports.meshopt_encodeIndexVersion(1);\n\t});\n\n\tfunction unpack(data) {\n\t\tvar result = new Uint8Array(data.length);\n\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\tvar ch = data.charCodeAt(i);\n\t\t\tresult[i] = ch > 96 ? ch - 97 : ch > 64 ? ch - 39 : ch + 4;\n\t\t}\n\t\tvar write = 0;\n\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\tresult[write++] = result[i] < 60 ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];\n\t\t}\n\t\treturn result.buffer.slice(0, write);\n\t}\n\n\tfunction assert(cond) {\n\t\tif (!cond) {\n\t\t\tthrow new Error('Assertion failed');\n\t\t}\n\t}\n\n\tfunction bytes(view) {\n\t\treturn new Uint8Array(view.buffer, view.byteOffset, view.byteLength);\n\t}\n\n\tfunction reorder(fun, indices, vertices, optf) {\n\t\tvar sbrk = instance.exports.sbrk;\n\t\tvar ip = sbrk(indices.length * 4);\n\t\tvar rp = sbrk(vertices * 4);\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\tvar indices8 = bytes(indices);\n\t\theap.set(indices8, ip);\n\t\tif (optf) {\n\t\t\toptf(ip, ip, indices.length, vertices);\n\t\t}\n\t\tvar unique = fun(rp, ip, indices.length, vertices);\n\t\t// heap may have grown\n\t\theap = new Uint8Array(instance.exports.memory.buffer);\n\t\tvar remap = new Uint32Array(vertices);\n\t\tnew Uint8Array(remap.buffer).set(heap.subarray(rp, rp + vertices * 4));\n\t\tindices8.set(heap.subarray(ip, ip + indices.length * 4));\n\t\tsbrk(ip - sbrk(0));\n\n\t\tfor (var i = 0; i < indices.length; ++i) indices[i] = remap[indices[i]];\n\n\t\treturn [remap, unique];\n\t}\n\n\tfunction spatialsort(fun, positions, count, stride) {\n\t\tvar sbrk = instance.exports.sbrk;\n\t\tvar ip = sbrk(count * 4);\n\t\tvar sp = sbrk(count * stride);\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\theap.set(bytes(positions), sp);\n\t\tfun(ip, sp, count, stride);\n\t\t// heap may have grown\n\t\theap = new Uint8Array(instance.exports.memory.buffer);\n\t\tvar remap = new Uint32Array(count);\n\t\tnew Uint8Array(remap.buffer).set(heap.subarray(ip, ip + count * 4));\n\t\tsbrk(ip - sbrk(0));\n\t\treturn remap;\n\t}\n\n\tfunction encode(fun, bound, source, count, size) {\n\t\tvar sbrk = instance.exports.sbrk;\n\t\tvar tp = sbrk(bound);\n\t\tvar sp = sbrk(count * size);\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\theap.set(bytes(source), sp);\n\t\tvar res = fun(tp, bound, sp, count, size);\n\t\tvar target = new Uint8Array(res);\n\t\ttarget.set(heap.subarray(tp, tp + res));\n\t\tsbrk(tp - sbrk(0));\n\t\treturn target;\n\t}\n\n\tfunction maxindex(source) {\n\t\tvar result = 0;\n\t\tfor (var i = 0; i < source.length; ++i) {\n\t\t\tvar index = source[i];\n\t\t\tresult = result < index ? index : result;\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction index32(source, size) {\n\t\tassert(size == 2 || size == 4);\n\t\tif (size == 4) {\n\t\t\treturn new Uint32Array(source.buffer, source.byteOffset, source.byteLength / 4);\n\t\t} else {\n\t\t\tvar view = new Uint16Array(source.buffer, source.byteOffset, source.byteLength / 2);\n\t\t\treturn new Uint32Array(view); // copies each element\n\t\t}\n\t}\n\n\tfunction filter(fun, source, count, stride, bits, insize, mode) {\n\t\tvar sbrk = instance.exports.sbrk;\n\t\tvar tp = sbrk(count * stride);\n\t\tvar sp = sbrk(count * insize);\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\theap.set(bytes(source), sp);\n\t\tfun(tp, count, stride, bits, sp, mode);\n\t\tvar target = new Uint8Array(count * stride);\n\t\ttarget.set(heap.subarray(tp, tp + count * stride));\n\t\tsbrk(tp - sbrk(0));\n\t\treturn target;\n\t}\n\n\treturn {\n\t\tready: ready,\n\t\tsupported: true,\n\t\treorderMesh: function (indices, triangles, optsize) {\n\t\t\tvar optf = triangles\n\t\t\t\t? optsize\n\t\t\t\t\t? instance.exports.meshopt_optimizeVertexCacheStrip\n\t\t\t\t\t: instance.exports.meshopt_optimizeVertexCache\n\t\t\t\t: undefined;\n\t\t\treturn reorder(instance.exports.meshopt_optimizeVertexFetchRemap, indices, maxindex(indices) + 1, optf);\n\t\t},\n\t\treorderPoints: function (positions, positions_stride) {\n\t\t\tassert(positions instanceof Float32Array);\n\t\t\tassert(positions.length % positions_stride == 0);\n\t\t\tassert(positions_stride >= 3);\n\t\t\treturn spatialsort(instance.exports.meshopt_spatialSortRemap, positions, positions.length / positions_stride, positions_stride * 4);\n\t\t},\n\t\tencodeVertexBuffer: function (source, count, size) {\n\t\t\tassert(size > 0 && size <= 256);\n\t\t\tassert(size % 4 == 0);\n\t\t\tvar bound = instance.exports.meshopt_encodeVertexBufferBound(count, size);\n\t\t\treturn encode(instance.exports.meshopt_encodeVertexBuffer, bound, source, count, size);\n\t\t},\n\t\tencodeIndexBuffer: function (source, count, size) {\n\t\t\tassert(size == 2 || size == 4);\n\t\t\tassert(count % 3 == 0);\n\t\t\tvar indices = index32(source, size);\n\t\t\tvar bound = instance.exports.meshopt_encodeIndexBufferBound(count, maxindex(indices) + 1);\n\t\t\treturn encode(instance.exports.meshopt_encodeIndexBuffer, bound, indices, count, 4);\n\t\t},\n\t\tencodeIndexSequence: function (source, count, size) {\n\t\t\tassert(size == 2 || size == 4);\n\t\t\tvar indices = index32(source, size);\n\t\t\tvar bound = instance.exports.meshopt_encodeIndexSequenceBound(count, maxindex(indices) + 1);\n\t\t\treturn encode(instance.exports.meshopt_encodeIndexSequence, bound, indices, count, 4);\n\t\t},\n\t\tencodeGltfBuffer: function (source, count, size, mode) {\n\t\t\tvar table = {\n\t\t\t\tATTRIBUTES: this.encodeVertexBuffer,\n\t\t\t\tTRIANGLES: this.encodeIndexBuffer,\n\t\t\t\tINDICES: this.encodeIndexSequence,\n\t\t\t};\n\t\t\tassert(table[mode]);\n\t\t\treturn table[mode](source, count, size);\n\t\t},\n\t\tencodeFilterOct: function (source, count, stride, bits) {\n\t\t\tassert(stride == 4 || stride == 8);\n\t\t\tassert(bits >= 1 && bits <= 16);\n\t\t\treturn filter(instance.exports.meshopt_encodeFilterOct, source, count, stride, bits, 16);\n\t\t},\n\t\tencodeFilterQuat: function (source, count, stride, bits) {\n\t\t\tassert(stride == 8);\n\t\t\tassert(bits >= 4 && bits <= 16);\n\t\t\treturn filter(instance.exports.meshopt_encodeFilterQuat, source, count, stride, bits, 16);\n\t\t},\n\t\tencodeFilterExp: function (source, count, stride, bits, mode) {\n\t\t\tassert(stride > 0 && stride % 4 == 0);\n\t\t\tassert(bits >= 1 && bits <= 24);\n\t\t\tvar table = {\n\t\t\t\tSeparate: 0,\n\t\t\t\tSharedVector: 1,\n\t\t\t\tSharedComponent: 2,\n\t\t\t\tClamped: 3,\n\t\t\t};\n\t\t\treturn filter(instance.exports.meshopt_encodeFilterExp, source, count, stride, bits, stride, mode ? table[mode] : 1);\n\t\t},\n\t};\n})();\n\nexport { MeshoptEncoder };\n"],"mappings":"AAAA;AACA;AACA,IAAIA,cAAc,GAAI,YAAY;EACjC;EACA;EACA,IAAIC,IAAI,GACP,46XAA46X,CAAC,CAAC;;EAE/6X,IAAIC,QAAQ,GAAG,IAAIC,UAAU,CAAC,CAC7B,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC3I,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CACtG,CAAC;EAEF,IAAI,OAAOC,WAAW,KAAK,QAAQ,EAAE;IACpC,OAAO;MACNC,SAAS,EAAE;IACZ,CAAC;EACF;EAEA,IAAIC,QAAQ;EAEZ,IAAIC,KAAK,GAAGH,WAAW,CAACI,WAAW,CAACC,MAAM,CAACR,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAACS,IAAI,CAAC,UAAUC,MAAM,EAAE;IAC5EL,QAAQ,GAAGK,MAAM,CAACL,QAAQ;IAC1BA,QAAQ,CAACM,OAAO,CAACC,iBAAiB,CAAC,CAAC;IACpCP,QAAQ,CAACM,OAAO,CAACE,2BAA2B,CAAC,CAAC,CAAC;IAC/CR,QAAQ,CAACM,OAAO,CAACG,0BAA0B,CAAC,CAAC,CAAC;EAC/C,CAAC,CAAC;EAEF,SAASN,MAAMA,CAACO,IAAI,EAAE;IACrB,IAAIL,MAAM,GAAG,IAAIR,UAAU,CAACa,IAAI,CAACC,MAAM,CAAC;IACxC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACC,MAAM,EAAE,EAAEC,CAAC,EAAE;MACrC,IAAIC,EAAE,GAAGH,IAAI,CAACI,UAAU,CAACF,CAAC,CAAC;MAC3BP,MAAM,CAACO,CAAC,CAAC,GAAGC,EAAE,GAAG,EAAE,GAAGA,EAAE,GAAG,EAAE,GAAGA,EAAE,GAAG,EAAE,GAAGA,EAAE,GAAG,EAAE,GAAGA,EAAE,GAAG,CAAC;IAC3D;IACA,IAAIE,KAAK,GAAG,CAAC;IACb,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACC,MAAM,EAAE,EAAEC,CAAC,EAAE;MACrCP,MAAM,CAACU,KAAK,EAAE,CAAC,GAAGV,MAAM,CAACO,CAAC,CAAC,GAAG,EAAE,GAAGhB,QAAQ,CAACS,MAAM,CAACO,CAAC,CAAC,CAAC,GAAG,CAACP,MAAM,CAACO,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAGP,MAAM,CAAC,EAAEO,CAAC,CAAC;IAC7F;IACA,OAAOP,MAAM,CAACW,MAAM,CAACC,KAAK,CAAC,CAAC,EAAEF,KAAK,CAAC;EACrC;EAEA,SAASG,MAAMA,CAACC,IAAI,EAAE;IACrB,IAAI,CAACA,IAAI,EAAE;MACV,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IACpC;EACD;EAEA,SAASC,KAAKA,CAACC,IAAI,EAAE;IACpB,OAAO,IAAIzB,UAAU,CAACyB,IAAI,CAACN,MAAM,EAAEM,IAAI,CAACC,UAAU,EAAED,IAAI,CAACE,UAAU,CAAC;EACrE;EAEA,SAASC,OAAOA,CAACC,GAAG,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAC9C,IAAIC,IAAI,GAAG9B,QAAQ,CAACM,OAAO,CAACwB,IAAI;IAChC,IAAIC,EAAE,GAAGD,IAAI,CAACH,OAAO,CAAChB,MAAM,GAAG,CAAC,CAAC;IACjC,IAAIqB,EAAE,GAAGF,IAAI,CAACF,QAAQ,GAAG,CAAC,CAAC;IAC3B,IAAIK,IAAI,GAAG,IAAIpC,UAAU,CAACG,QAAQ,CAACM,OAAO,CAAC4B,MAAM,CAAClB,MAAM,CAAC;IACzD,IAAImB,QAAQ,GAAGd,KAAK,CAACM,OAAO,CAAC;IAC7BM,IAAI,CAACG,GAAG,CAACD,QAAQ,EAAEJ,EAAE,CAAC;IACtB,IAAIF,IAAI,EAAE;MACTA,IAAI,CAACE,EAAE,EAAEA,EAAE,EAAEJ,OAAO,CAAChB,MAAM,EAAEiB,QAAQ,CAAC;IACvC;IACA,IAAIS,MAAM,GAAGX,GAAG,CAACM,EAAE,EAAED,EAAE,EAAEJ,OAAO,CAAChB,MAAM,EAAEiB,QAAQ,CAAC;IAClD;IACAK,IAAI,GAAG,IAAIpC,UAAU,CAACG,QAAQ,CAACM,OAAO,CAAC4B,MAAM,CAAClB,MAAM,CAAC;IACrD,IAAIsB,KAAK,GAAG,IAAIC,WAAW,CAACX,QAAQ,CAAC;IACrC,IAAI/B,UAAU,CAACyC,KAAK,CAACtB,MAAM,CAAC,CAACoB,GAAG,CAACH,IAAI,CAACO,QAAQ,CAACR,EAAE,EAAEA,EAAE,GAAGJ,QAAQ,GAAG,CAAC,CAAC,CAAC;IACtEO,QAAQ,CAACC,GAAG,CAACH,IAAI,CAACO,QAAQ,CAACT,EAAE,EAAEA,EAAE,GAAGJ,OAAO,CAAChB,MAAM,GAAG,CAAC,CAAC,CAAC;IACxDmB,IAAI,CAACC,EAAE,GAAGD,IAAI,CAAC,CAAC,CAAC,CAAC;IAElB,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGe,OAAO,CAAChB,MAAM,EAAE,EAAEC,CAAC,EAAEe,OAAO,CAACf,CAAC,CAAC,GAAG0B,KAAK,CAACX,OAAO,CAACf,CAAC,CAAC,CAAC;IAEvE,OAAO,CAAC0B,KAAK,EAAED,MAAM,CAAC;EACvB;EAEA,SAASI,WAAWA,CAACf,GAAG,EAAEgB,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAE;IACnD,IAAId,IAAI,GAAG9B,QAAQ,CAACM,OAAO,CAACwB,IAAI;IAChC,IAAIC,EAAE,GAAGD,IAAI,CAACa,KAAK,GAAG,CAAC,CAAC;IACxB,IAAIE,EAAE,GAAGf,IAAI,CAACa,KAAK,GAAGC,MAAM,CAAC;IAC7B,IAAIX,IAAI,GAAG,IAAIpC,UAAU,CAACG,QAAQ,CAACM,OAAO,CAAC4B,MAAM,CAAClB,MAAM,CAAC;IACzDiB,IAAI,CAACG,GAAG,CAACf,KAAK,CAACqB,SAAS,CAAC,EAAEG,EAAE,CAAC;IAC9BnB,GAAG,CAACK,EAAE,EAAEc,EAAE,EAAEF,KAAK,EAAEC,MAAM,CAAC;IAC1B;IACAX,IAAI,GAAG,IAAIpC,UAAU,CAACG,QAAQ,CAACM,OAAO,CAAC4B,MAAM,CAAClB,MAAM,CAAC;IACrD,IAAIsB,KAAK,GAAG,IAAIC,WAAW,CAACI,KAAK,CAAC;IAClC,IAAI9C,UAAU,CAACyC,KAAK,CAACtB,MAAM,CAAC,CAACoB,GAAG,CAACH,IAAI,CAACO,QAAQ,CAACT,EAAE,EAAEA,EAAE,GAAGY,KAAK,GAAG,CAAC,CAAC,CAAC;IACnEb,IAAI,CAACC,EAAE,GAAGD,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,OAAOQ,KAAK;EACb;EAEA,SAASQ,MAAMA,CAACpB,GAAG,EAAEqB,KAAK,EAAEC,MAAM,EAAEL,KAAK,EAAEM,IAAI,EAAE;IAChD,IAAInB,IAAI,GAAG9B,QAAQ,CAACM,OAAO,CAACwB,IAAI;IAChC,IAAIoB,EAAE,GAAGpB,IAAI,CAACiB,KAAK,CAAC;IACpB,IAAIF,EAAE,GAAGf,IAAI,CAACa,KAAK,GAAGM,IAAI,CAAC;IAC3B,IAAIhB,IAAI,GAAG,IAAIpC,UAAU,CAACG,QAAQ,CAACM,OAAO,CAAC4B,MAAM,CAAClB,MAAM,CAAC;IACzDiB,IAAI,CAACG,GAAG,CAACf,KAAK,CAAC2B,MAAM,CAAC,EAAEH,EAAE,CAAC;IAC3B,IAAIM,GAAG,GAAGzB,GAAG,CAACwB,EAAE,EAAEH,KAAK,EAAEF,EAAE,EAAEF,KAAK,EAAEM,IAAI,CAAC;IACzC,IAAIG,MAAM,GAAG,IAAIvD,UAAU,CAACsD,GAAG,CAAC;IAChCC,MAAM,CAAChB,GAAG,CAACH,IAAI,CAACO,QAAQ,CAACU,EAAE,EAAEA,EAAE,GAAGC,GAAG,CAAC,CAAC;IACvCrB,IAAI,CAACoB,EAAE,GAAGpB,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,OAAOsB,MAAM;EACd;EAEA,SAASC,QAAQA,CAACL,MAAM,EAAE;IACzB,IAAI3C,MAAM,GAAG,CAAC;IACd,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoC,MAAM,CAACrC,MAAM,EAAE,EAAEC,CAAC,EAAE;MACvC,IAAI0C,KAAK,GAAGN,MAAM,CAACpC,CAAC,CAAC;MACrBP,MAAM,GAAGA,MAAM,GAAGiD,KAAK,GAAGA,KAAK,GAAGjD,MAAM;IACzC;IACA,OAAOA,MAAM;EACd;EAEA,SAASkD,OAAOA,CAACP,MAAM,EAAEC,IAAI,EAAE;IAC9B/B,MAAM,CAAC+B,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,CAAC;IAC9B,IAAIA,IAAI,IAAI,CAAC,EAAE;MACd,OAAO,IAAIV,WAAW,CAACS,MAAM,CAAChC,MAAM,EAAEgC,MAAM,CAACzB,UAAU,EAAEyB,MAAM,CAACxB,UAAU,GAAG,CAAC,CAAC;IAChF,CAAC,MAAM;MACN,IAAIF,IAAI,GAAG,IAAIkC,WAAW,CAACR,MAAM,CAAChC,MAAM,EAAEgC,MAAM,CAACzB,UAAU,EAAEyB,MAAM,CAACxB,UAAU,GAAG,CAAC,CAAC;MACnF,OAAO,IAAIe,WAAW,CAACjB,IAAI,CAAC,CAAC,CAAC;IAC/B;EACD;EAEA,SAASmC,MAAMA,CAAC/B,GAAG,EAAEsB,MAAM,EAAEL,KAAK,EAAEC,MAAM,EAAEc,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAE;IAC/D,IAAI9B,IAAI,GAAG9B,QAAQ,CAACM,OAAO,CAACwB,IAAI;IAChC,IAAIoB,EAAE,GAAGpB,IAAI,CAACa,KAAK,GAAGC,MAAM,CAAC;IAC7B,IAAIC,EAAE,GAAGf,IAAI,CAACa,KAAK,GAAGgB,MAAM,CAAC;IAC7B,IAAI1B,IAAI,GAAG,IAAIpC,UAAU,CAACG,QAAQ,CAACM,OAAO,CAAC4B,MAAM,CAAClB,MAAM,CAAC;IACzDiB,IAAI,CAACG,GAAG,CAACf,KAAK,CAAC2B,MAAM,CAAC,EAAEH,EAAE,CAAC;IAC3BnB,GAAG,CAACwB,EAAE,EAAEP,KAAK,EAAEC,MAAM,EAAEc,IAAI,EAAEb,EAAE,EAAEe,IAAI,CAAC;IACtC,IAAIR,MAAM,GAAG,IAAIvD,UAAU,CAAC8C,KAAK,GAAGC,MAAM,CAAC;IAC3CQ,MAAM,CAAChB,GAAG,CAACH,IAAI,CAACO,QAAQ,CAACU,EAAE,EAAEA,EAAE,GAAGP,KAAK,GAAGC,MAAM,CAAC,CAAC;IAClDd,IAAI,CAACoB,EAAE,GAAGpB,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,OAAOsB,MAAM;EACd;EAEA,OAAO;IACNnD,KAAK,EAAEA,KAAK;IACZF,SAAS,EAAE,IAAI;IACf8D,WAAW,EAAE,SAAAA,CAAUlC,OAAO,EAAEmC,SAAS,EAAEC,OAAO,EAAE;MACnD,IAAIlC,IAAI,GAAGiC,SAAS,GACjBC,OAAO,GACN/D,QAAQ,CAACM,OAAO,CAAC0D,gCAAgC,GACjDhE,QAAQ,CAACM,OAAO,CAAC2D,2BAA2B,GAC7CC,SAAS;MACZ,OAAOzC,OAAO,CAACzB,QAAQ,CAACM,OAAO,CAAC6D,gCAAgC,EAAExC,OAAO,EAAE0B,QAAQ,CAAC1B,OAAO,CAAC,GAAG,CAAC,EAAEE,IAAI,CAAC;IACxG,CAAC;IACDuC,aAAa,EAAE,SAAAA,CAAU1B,SAAS,EAAE2B,gBAAgB,EAAE;MACrDnD,MAAM,CAACwB,SAAS,YAAY4B,YAAY,CAAC;MACzCpD,MAAM,CAACwB,SAAS,CAAC/B,MAAM,GAAG0D,gBAAgB,IAAI,CAAC,CAAC;MAChDnD,MAAM,CAACmD,gBAAgB,IAAI,CAAC,CAAC;MAC7B,OAAO5B,WAAW,CAACzC,QAAQ,CAACM,OAAO,CAACiE,wBAAwB,EAAE7B,SAAS,EAAEA,SAAS,CAAC/B,MAAM,GAAG0D,gBAAgB,EAAEA,gBAAgB,GAAG,CAAC,CAAC;IACpI,CAAC;IACDG,kBAAkB,EAAE,SAAAA,CAAUxB,MAAM,EAAEL,KAAK,EAAEM,IAAI,EAAE;MAClD/B,MAAM,CAAC+B,IAAI,GAAG,CAAC,IAAIA,IAAI,IAAI,GAAG,CAAC;MAC/B/B,MAAM,CAAC+B,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;MACrB,IAAIF,KAAK,GAAG/C,QAAQ,CAACM,OAAO,CAACmE,+BAA+B,CAAC9B,KAAK,EAAEM,IAAI,CAAC;MACzE,OAAOH,MAAM,CAAC9C,QAAQ,CAACM,OAAO,CAACoE,0BAA0B,EAAE3B,KAAK,EAAEC,MAAM,EAAEL,KAAK,EAAEM,IAAI,CAAC;IACvF,CAAC;IACD0B,iBAAiB,EAAE,SAAAA,CAAU3B,MAAM,EAAEL,KAAK,EAAEM,IAAI,EAAE;MACjD/B,MAAM,CAAC+B,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,CAAC;MAC9B/B,MAAM,CAACyB,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC;MACtB,IAAIhB,OAAO,GAAG4B,OAAO,CAACP,MAAM,EAAEC,IAAI,CAAC;MACnC,IAAIF,KAAK,GAAG/C,QAAQ,CAACM,OAAO,CAACsE,8BAA8B,CAACjC,KAAK,EAAEU,QAAQ,CAAC1B,OAAO,CAAC,GAAG,CAAC,CAAC;MACzF,OAAOmB,MAAM,CAAC9C,QAAQ,CAACM,OAAO,CAACuE,yBAAyB,EAAE9B,KAAK,EAAEpB,OAAO,EAAEgB,KAAK,EAAE,CAAC,CAAC;IACpF,CAAC;IACDmC,mBAAmB,EAAE,SAAAA,CAAU9B,MAAM,EAAEL,KAAK,EAAEM,IAAI,EAAE;MACnD/B,MAAM,CAAC+B,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,CAAC;MAC9B,IAAItB,OAAO,GAAG4B,OAAO,CAACP,MAAM,EAAEC,IAAI,CAAC;MACnC,IAAIF,KAAK,GAAG/C,QAAQ,CAACM,OAAO,CAACyE,gCAAgC,CAACpC,KAAK,EAAEU,QAAQ,CAAC1B,OAAO,CAAC,GAAG,CAAC,CAAC;MAC3F,OAAOmB,MAAM,CAAC9C,QAAQ,CAACM,OAAO,CAAC0E,2BAA2B,EAAEjC,KAAK,EAAEpB,OAAO,EAAEgB,KAAK,EAAE,CAAC,CAAC;IACtF,CAAC;IACDsC,gBAAgB,EAAE,SAAAA,CAAUjC,MAAM,EAAEL,KAAK,EAAEM,IAAI,EAAEW,IAAI,EAAE;MACtD,IAAIsB,KAAK,GAAG;QACXC,UAAU,EAAE,IAAI,CAACX,kBAAkB;QACnCY,SAAS,EAAE,IAAI,CAACT,iBAAiB;QACjCU,OAAO,EAAE,IAAI,CAACP;MACf,CAAC;MACD5D,MAAM,CAACgE,KAAK,CAACtB,IAAI,CAAC,CAAC;MACnB,OAAOsB,KAAK,CAACtB,IAAI,CAAC,CAACZ,MAAM,EAAEL,KAAK,EAAEM,IAAI,CAAC;IACxC,CAAC;IACDqC,eAAe,EAAE,SAAAA,CAAUtC,MAAM,EAAEL,KAAK,EAAEC,MAAM,EAAEc,IAAI,EAAE;MACvDxC,MAAM,CAAC0B,MAAM,IAAI,CAAC,IAAIA,MAAM,IAAI,CAAC,CAAC;MAClC1B,MAAM,CAACwC,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,EAAE,CAAC;MAC/B,OAAOD,MAAM,CAACzD,QAAQ,CAACM,OAAO,CAACiF,uBAAuB,EAAEvC,MAAM,EAAEL,KAAK,EAAEC,MAAM,EAAEc,IAAI,EAAE,EAAE,CAAC;IACzF,CAAC;IACD8B,gBAAgB,EAAE,SAAAA,CAAUxC,MAAM,EAAEL,KAAK,EAAEC,MAAM,EAAEc,IAAI,EAAE;MACxDxC,MAAM,CAAC0B,MAAM,IAAI,CAAC,CAAC;MACnB1B,MAAM,CAACwC,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,EAAE,CAAC;MAC/B,OAAOD,MAAM,CAACzD,QAAQ,CAACM,OAAO,CAACmF,wBAAwB,EAAEzC,MAAM,EAAEL,KAAK,EAAEC,MAAM,EAAEc,IAAI,EAAE,EAAE,CAAC;IAC1F,CAAC;IACDgC,eAAe,EAAE,SAAAA,CAAU1C,MAAM,EAAEL,KAAK,EAAEC,MAAM,EAAEc,IAAI,EAAEE,IAAI,EAAE;MAC7D1C,MAAM,CAAC0B,MAAM,GAAG,CAAC,IAAIA,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;MACrC1B,MAAM,CAACwC,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,EAAE,CAAC;MAC/B,IAAIwB,KAAK,GAAG;QACXS,QAAQ,EAAE,CAAC;QACXC,YAAY,EAAE,CAAC;QACfC,eAAe,EAAE,CAAC;QAClBC,OAAO,EAAE;MACV,CAAC;MACD,OAAOrC,MAAM,CAACzD,QAAQ,CAACM,OAAO,CAACyF,uBAAuB,EAAE/C,MAAM,EAAEL,KAAK,EAAEC,MAAM,EAAEc,IAAI,EAAEd,MAAM,EAAEgB,IAAI,GAAGsB,KAAK,CAACtB,IAAI,CAAC,GAAG,CAAC,CAAC;IACrH;EACD,CAAC;AACF,CAAC,CAAE,CAAC;AAEJ,SAASlE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}