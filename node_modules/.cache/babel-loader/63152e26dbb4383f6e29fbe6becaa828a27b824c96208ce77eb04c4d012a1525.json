{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"// These octree flags must be in sync with GpuOctreeFlag in VoxelTraversal.js\\n\\\n#define OCTREE_FLAG_INTERNAL 0\\n\\\n#define OCTREE_FLAG_LEAF 1\\n\\\n#define OCTREE_FLAG_PACKED_LEAF_FROM_PARENT 2\\n\\\n\\n\\\n#define OCTREE_MAX_LEVELS 32 // Harcoded value because GLSL doesn't like variable length loops\\n\\\n\\n\\\nuniform sampler2D u_octreeInternalNodeTexture;\\n\\\nuniform vec2 u_octreeInternalNodeTexelSizeUv;\\n\\\nuniform int u_octreeInternalNodeTilesPerRow;\\n\\\n#if (SAMPLE_COUNT > 1)\\n\\\nuniform sampler2D u_octreeLeafNodeTexture;\\n\\\nuniform vec2 u_octreeLeafNodeTexelSizeUv;\\n\\\nuniform int u_octreeLeafNodeTilesPerRow;\\n\\\n#endif\\n\\\n\\n\\\nstruct OctreeNodeData {\\n\\\n    int data;\\n\\\n    int flag;\\n\\\n};\\n\\\n\\n\\\nstruct TraversalData {\\n\\\n    ivec4 octreeCoords;\\n\\\n    int parentOctreeIndex;\\n\\\n};\\n\\\n\\n\\\nstruct SampleData {\\n\\\n    int megatextureIndex;\\n\\\n    ivec4 tileCoords;\\n\\\n    vec3 tileUv;\\n\\\n    #if (SAMPLE_COUNT > 1)\\n\\\n        float weight;\\n\\\n    #endif\\n\\\n};\\n\\\n\\n\\\n// Integer mod: For WebGL1 only\\n\\\nint intMod(in int a, in int b) {\\n\\\n    return a - (b * (a / b));\\n\\\n}\\n\\\nint normU8_toInt(in float value) {\\n\\\n    return int(value * 255.0);\\n\\\n}\\n\\\nint normU8x2_toInt(in vec2 value) {\\n\\\n    return int(value.x * 255.0) + 256 * int(value.y * 255.0);\\n\\\n}\\n\\\nfloat normU8x2_toFloat(in vec2 value) {\\n\\\n    return float(normU8x2_toInt(value)) / 65535.0;\\n\\\n}\\n\\\n\\n\\\nOctreeNodeData getOctreeNodeData(in vec2 octreeUv) {\\n\\\n    vec4 texData = texture(u_octreeInternalNodeTexture, octreeUv);\\n\\\n\\n\\\n    OctreeNodeData data;\\n\\\n    data.data = normU8x2_toInt(texData.xy);\\n\\\n    data.flag = normU8x2_toInt(texData.zw);\\n\\\n    return data;\\n\\\n}\\n\\\n\\n\\\nOctreeNodeData getOctreeChildData(in int parentOctreeIndex, in ivec3 childCoord) {\\n\\\n    int childIndex = childCoord.z * 4 + childCoord.y * 2 + childCoord.x;\\n\\\n    int octreeCoordX = intMod(parentOctreeIndex, u_octreeInternalNodeTilesPerRow) * 9 + 1 + childIndex;\\n\\\n    int octreeCoordY = parentOctreeIndex / u_octreeInternalNodeTilesPerRow;\\n\\\n    vec2 octreeUv = u_octreeInternalNodeTexelSizeUv * vec2(float(octreeCoordX) + 0.5, float(octreeCoordY) + 0.5);\\n\\\n    return getOctreeNodeData(octreeUv);\\n\\\n}\\n\\\n\\n\\\nint getOctreeParentIndex(in int octreeIndex) {\\n\\\n    int octreeCoordX = intMod(octreeIndex, u_octreeInternalNodeTilesPerRow) * 9;\\n\\\n    int octreeCoordY = octreeIndex / u_octreeInternalNodeTilesPerRow;\\n\\\n    vec2 octreeUv = u_octreeInternalNodeTexelSizeUv * vec2(float(octreeCoordX) + 0.5, float(octreeCoordY) + 0.5);\\n\\\n    vec4 parentData = texture(u_octreeInternalNodeTexture, octreeUv);\\n\\\n    int parentOctreeIndex = normU8x2_toInt(parentData.xy);\\n\\\n    return parentOctreeIndex;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n* Convert a position in the uv-space of the tileset bounding shape\\n\\\n* into the uv-space of a tile within the tileset\\n\\\n*/\\n\\\nvec3 getTileUv(in vec3 shapePosition, in ivec4 octreeCoords) {\\n\\\n\t// PERFORMANCE_IDEA: use bit-shifting (only in WebGL2)\\n\\\n    float dimAtLevel = exp2(float(octreeCoords.w));\\n\\\n    return shapePosition * dimAtLevel - vec3(octreeCoords.xyz);\\n\\\n}\\n\\\n\\n\\\nvec3 getClampedTileUv(in vec3 shapePosition, in ivec4 octreeCoords) {\\n\\\n    vec3 tileUv = getTileUv(shapePosition, octreeCoords);\\n\\\n    return clamp(tileUv, vec3(0.0), vec3(1.0));\\n\\\n}\\n\\\n\\n\\\nvoid getOctreeLeafSampleData(in OctreeNodeData data, in ivec4 octreeCoords, out SampleData sampleData) {\\n\\\n    sampleData.megatextureIndex = data.data;\\n\\\n    sampleData.tileCoords = (data.flag == OCTREE_FLAG_PACKED_LEAF_FROM_PARENT)\\n\\\n        ? ivec4(octreeCoords.xyz / 2, octreeCoords.w - 1)\\n\\\n        : octreeCoords;\\n\\\n}\\n\\\n\\n\\\n#if (SAMPLE_COUNT > 1)\\n\\\nvoid getOctreeLeafSampleDatas(in OctreeNodeData data, in ivec4 octreeCoords, out SampleData sampleDatas[SAMPLE_COUNT]) {\\n\\\n    int leafIndex = data.data;\\n\\\n    int leafNodeTexelCount = 2;\\n\\\n    // Adding 0.5 moves to the center of the texel\\n\\\n    float leafCoordXStart = float(intMod(leafIndex, u_octreeLeafNodeTilesPerRow) * leafNodeTexelCount) + 0.5;\\n\\\n    float leafCoordY = float(leafIndex / u_octreeLeafNodeTilesPerRow) + 0.5;\\n\\\n\\n\\\n    // Get an interpolation weight and a flag to determine whether to read the parent texture\\n\\\n    vec2 leafUv0 = u_octreeLeafNodeTexelSizeUv * vec2(leafCoordXStart + 0.0, leafCoordY);\\n\\\n    vec4 leafData0 = texture(u_octreeLeafNodeTexture, leafUv0);\\n\\\n    float lerp = normU8x2_toFloat(leafData0.xy);\\n\\\n    sampleDatas[0].weight = 1.0 - lerp;\\n\\\n    sampleDatas[1].weight = lerp;\\n\\\n    // TODO: this looks wrong? Should be comparing to OCTREE_FLAG_PACKED_LEAF_FROM_PARENT\\n\\\n    sampleDatas[0].tileCoords = (normU8_toInt(leafData0.z) == 1)\\n\\\n        ? ivec4(octreeCoords.xyz / 2, octreeCoords.w - 1)\\n\\\n        : octreeCoords;\\n\\\n    sampleDatas[1].tileCoords = (normU8_toInt(leafData0.w) == 1)\\n\\\n        ? ivec4(octreeCoords.xyz / 2, octreeCoords.w - 1)\\n\\\n        : octreeCoords;\\n\\\n\\n\\\n    // Get megatexture indices for both samples\\n\\\n    vec2 leafUv1 = u_octreeLeafNodeTexelSizeUv * vec2(leafCoordXStart + 1.0, leafCoordY);\\n\\\n    vec4 leafData1 = texture(u_octreeLeafNodeTexture, leafUv1);\\n\\\n    sampleDatas[0].megatextureIndex = normU8x2_toInt(leafData1.xy);\\n\\\n    sampleDatas[1].megatextureIndex = normU8x2_toInt(leafData1.zw);\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nOctreeNodeData traverseOctreeDownwards(in vec3 shapePosition, inout TraversalData traversalData) {\\n\\\n    float sizeAtLevel = exp2(-1.0 * float(traversalData.octreeCoords.w));\\n\\\n    vec3 start = vec3(traversalData.octreeCoords.xyz) * sizeAtLevel;\\n\\\n    vec3 end = start + vec3(sizeAtLevel);\\n\\\n    OctreeNodeData childData;\\n\\\n\\n\\\n    for (int i = 0; i < OCTREE_MAX_LEVELS; ++i) {\\n\\\n        // Find out which octree child contains the position\\n\\\n        // 0 if before center, 1 if after\\n\\\n        vec3 center = 0.5 * (start + end);\\n\\\n        vec3 childCoord = step(center, shapePosition);\\n\\\n\\n\\\n        // Get octree coords for the next level down\\n\\\n        ivec4 octreeCoords = traversalData.octreeCoords;\\n\\\n        traversalData.octreeCoords = ivec4(octreeCoords.xyz * 2 + ivec3(childCoord), octreeCoords.w + 1);\\n\\\n\\n\\\n        childData = getOctreeChildData(traversalData.parentOctreeIndex, ivec3(childCoord));\\n\\\n\\n\\\n        if (childData.flag != OCTREE_FLAG_INTERNAL) {\\n\\\n            // leaf tile - stop traversing\\n\\\n            break;\\n\\\n        }\\n\\\n\\n\\\n        // interior tile - keep going deeper\\n\\\n        start = mix(start, center, childCoord);\\n\\\n        end = mix(center, end, childCoord);\\n\\\n        traversalData.parentOctreeIndex = childData.data;\\n\\\n    }\\n\\\n\\n\\\n    return childData;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n* Transform a given position to an octree tile coordinate and a position within that tile,\\n\\\n* and find the corresponding megatexture index and texture coordinates\\n\\\n*/\\n\\\nvoid traverseOctreeFromBeginning(in vec3 shapePosition, out TraversalData traversalData, out SampleData sampleDatas[SAMPLE_COUNT]) {\\n\\\n    traversalData.octreeCoords = ivec4(0);\\n\\\n    traversalData.parentOctreeIndex = 0;\\n\\\n\\n\\\n    OctreeNodeData nodeData = getOctreeNodeData(vec2(0.0));\\n\\\n    if (nodeData.flag != OCTREE_FLAG_LEAF) {\\n\\\n        nodeData = traverseOctreeDownwards(shapePosition, traversalData);\\n\\\n    }\\n\\\n\\n\\\n    #if (SAMPLE_COUNT == 1)\\n\\\n        getOctreeLeafSampleData(nodeData, traversalData.octreeCoords, sampleDatas[0]);\\n\\\n        sampleDatas[0].tileUv = getClampedTileUv(shapePosition, sampleDatas[0].tileCoords);\\n\\\n    #else\\n\\\n        getOctreeLeafSampleDatas(nodeData, traversalData.octreeCoords, sampleDatas);\\n\\\n        sampleDatas[0].tileUv = getClampedTileUv(shapePosition, sampleDatas[0].tileCoords);\\n\\\n        sampleDatas[1].tileUv = getClampedTileUv(shapePosition, sampleDatas[1].tileCoords);\\n\\\n    #endif\\n\\\n}\\n\\\n\\n\\\nbool inRange(in vec3 v, in vec3 minVal, in vec3 maxVal) {\\n\\\n    return clamp(v, minVal, maxVal) == v;\\n\\\n}\\n\\\n\\n\\\nbool insideTile(in vec3 shapePosition, in ivec4 octreeCoords) {\\n\\\n    vec3 tileUv = getTileUv(shapePosition, octreeCoords);\\n\\\n\tbool inside = inRange(tileUv, vec3(0.0), vec3(1.0));\\n\\\n\t// Assume (!) the position is always inside the root tile.\\n\\\n\treturn inside || octreeCoords.w == 0;\\n\\\n}\\n\\\n\\n\\\nvoid traverseOctreeFromExisting(in vec3 shapePosition, inout TraversalData traversalData, inout SampleData sampleDatas[SAMPLE_COUNT]) {\\n\\\n    if (insideTile(shapePosition, traversalData.octreeCoords)) {\\n\\\n        for (int i = 0; i < SAMPLE_COUNT; i++) {\\n\\\n            sampleDatas[0].tileUv = getClampedTileUv(shapePosition, sampleDatas[0].tileCoords);\\n\\\n        }\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    // Go up tree until we find a parent tile containing shapePosition\\n\\\n    for (int i = 0; i < OCTREE_MAX_LEVELS; ++i) {\\n\\\n        traversalData.octreeCoords.xyz /= 2;\\n\\\n        traversalData.octreeCoords.w -= 1;\\n\\\n\\n\\\n        if (insideTile(shapePosition, traversalData.octreeCoords)) {\\n\\\n            break;\\n\\\n        }\\n\\\n\\n\\\n        traversalData.parentOctreeIndex = getOctreeParentIndex(traversalData.parentOctreeIndex);\\n\\\n    }\\n\\\n\\n\\\n    // Go down tree\\n\\\n    OctreeNodeData nodeData = traverseOctreeDownwards(shapePosition, traversalData);\\n\\\n\\n\\\n    #if (SAMPLE_COUNT == 1)\\n\\\n        getOctreeLeafSampleData(nodeData, traversalData.octreeCoords, sampleDatas[0]);\\n\\\n        sampleDatas[0].tileUv = getClampedTileUv(shapePosition, sampleDatas[0].tileCoords);\\n\\\n    #else\\n\\\n        getOctreeLeafSampleDatas(nodeData, traversalData.octreeCoords, sampleDatas);\\n\\\n        sampleDatas[0].tileUv = getClampedTileUv(shapePosition, sampleDatas[0].tileCoords);\\n\\\n        sampleDatas[1].tileUv = getClampedTileUv(shapePosition, sampleDatas[1].tileCoords);\\n\\\n    #endif\\n\\\n}\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Voxels/Octree.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"// These octree flags must be in sync with GpuOctreeFlag in VoxelTraversal.js\\n\\\n#define OCTREE_FLAG_INTERNAL 0\\n\\\n#define OCTREE_FLAG_LEAF 1\\n\\\n#define OCTREE_FLAG_PACKED_LEAF_FROM_PARENT 2\\n\\\n\\n\\\n#define OCTREE_MAX_LEVELS 32 // Harcoded value because GLSL doesn't like variable length loops\\n\\\n\\n\\\nuniform sampler2D u_octreeInternalNodeTexture;\\n\\\nuniform vec2 u_octreeInternalNodeTexelSizeUv;\\n\\\nuniform int u_octreeInternalNodeTilesPerRow;\\n\\\n#if (SAMPLE_COUNT > 1)\\n\\\nuniform sampler2D u_octreeLeafNodeTexture;\\n\\\nuniform vec2 u_octreeLeafNodeTexelSizeUv;\\n\\\nuniform int u_octreeLeafNodeTilesPerRow;\\n\\\n#endif\\n\\\n\\n\\\nstruct OctreeNodeData {\\n\\\n    int data;\\n\\\n    int flag;\\n\\\n};\\n\\\n\\n\\\nstruct TraversalData {\\n\\\n    ivec4 octreeCoords;\\n\\\n    int parentOctreeIndex;\\n\\\n};\\n\\\n\\n\\\nstruct SampleData {\\n\\\n    int megatextureIndex;\\n\\\n    ivec4 tileCoords;\\n\\\n    vec3 tileUv;\\n\\\n    #if (SAMPLE_COUNT > 1)\\n\\\n        float weight;\\n\\\n    #endif\\n\\\n};\\n\\\n\\n\\\n// Integer mod: For WebGL1 only\\n\\\nint intMod(in int a, in int b) {\\n\\\n    return a - (b * (a / b));\\n\\\n}\\n\\\nint normU8_toInt(in float value) {\\n\\\n    return int(value * 255.0);\\n\\\n}\\n\\\nint normU8x2_toInt(in vec2 value) {\\n\\\n    return int(value.x * 255.0) + 256 * int(value.y * 255.0);\\n\\\n}\\n\\\nfloat normU8x2_toFloat(in vec2 value) {\\n\\\n    return float(normU8x2_toInt(value)) / 65535.0;\\n\\\n}\\n\\\n\\n\\\nOctreeNodeData getOctreeNodeData(in vec2 octreeUv) {\\n\\\n    vec4 texData = texture(u_octreeInternalNodeTexture, octreeUv);\\n\\\n\\n\\\n    OctreeNodeData data;\\n\\\n    data.data = normU8x2_toInt(texData.xy);\\n\\\n    data.flag = normU8x2_toInt(texData.zw);\\n\\\n    return data;\\n\\\n}\\n\\\n\\n\\\nOctreeNodeData getOctreeChildData(in int parentOctreeIndex, in ivec3 childCoord) {\\n\\\n    int childIndex = childCoord.z * 4 + childCoord.y * 2 + childCoord.x;\\n\\\n    int octreeCoordX = intMod(parentOctreeIndex, u_octreeInternalNodeTilesPerRow) * 9 + 1 + childIndex;\\n\\\n    int octreeCoordY = parentOctreeIndex / u_octreeInternalNodeTilesPerRow;\\n\\\n    vec2 octreeUv = u_octreeInternalNodeTexelSizeUv * vec2(float(octreeCoordX) + 0.5, float(octreeCoordY) + 0.5);\\n\\\n    return getOctreeNodeData(octreeUv);\\n\\\n}\\n\\\n\\n\\\nint getOctreeParentIndex(in int octreeIndex) {\\n\\\n    int octreeCoordX = intMod(octreeIndex, u_octreeInternalNodeTilesPerRow) * 9;\\n\\\n    int octreeCoordY = octreeIndex / u_octreeInternalNodeTilesPerRow;\\n\\\n    vec2 octreeUv = u_octreeInternalNodeTexelSizeUv * vec2(float(octreeCoordX) + 0.5, float(octreeCoordY) + 0.5);\\n\\\n    vec4 parentData = texture(u_octreeInternalNodeTexture, octreeUv);\\n\\\n    int parentOctreeIndex = normU8x2_toInt(parentData.xy);\\n\\\n    return parentOctreeIndex;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n* Convert a position in the uv-space of the tileset bounding shape\\n\\\n* into the uv-space of a tile within the tileset\\n\\\n*/\\n\\\nvec3 getTileUv(in vec3 shapePosition, in ivec4 octreeCoords) {\\n\\\n\t// PERFORMANCE_IDEA: use bit-shifting (only in WebGL2)\\n\\\n    float dimAtLevel = exp2(float(octreeCoords.w));\\n\\\n    return shapePosition * dimAtLevel - vec3(octreeCoords.xyz);\\n\\\n}\\n\\\n\\n\\\nvec3 getClampedTileUv(in vec3 shapePosition, in ivec4 octreeCoords) {\\n\\\n    vec3 tileUv = getTileUv(shapePosition, octreeCoords);\\n\\\n    return clamp(tileUv, vec3(0.0), vec3(1.0));\\n\\\n}\\n\\\n\\n\\\nvoid getOctreeLeafSampleData(in OctreeNodeData data, in ivec4 octreeCoords, out SampleData sampleData) {\\n\\\n    sampleData.megatextureIndex = data.data;\\n\\\n    sampleData.tileCoords = (data.flag == OCTREE_FLAG_PACKED_LEAF_FROM_PARENT)\\n\\\n        ? ivec4(octreeCoords.xyz / 2, octreeCoords.w - 1)\\n\\\n        : octreeCoords;\\n\\\n}\\n\\\n\\n\\\n#if (SAMPLE_COUNT > 1)\\n\\\nvoid getOctreeLeafSampleDatas(in OctreeNodeData data, in ivec4 octreeCoords, out SampleData sampleDatas[SAMPLE_COUNT]) {\\n\\\n    int leafIndex = data.data;\\n\\\n    int leafNodeTexelCount = 2;\\n\\\n    // Adding 0.5 moves to the center of the texel\\n\\\n    float leafCoordXStart = float(intMod(leafIndex, u_octreeLeafNodeTilesPerRow) * leafNodeTexelCount) + 0.5;\\n\\\n    float leafCoordY = float(leafIndex / u_octreeLeafNodeTilesPerRow) + 0.5;\\n\\\n\\n\\\n    // Get an interpolation weight and a flag to determine whether to read the parent texture\\n\\\n    vec2 leafUv0 = u_octreeLeafNodeTexelSizeUv * vec2(leafCoordXStart + 0.0, leafCoordY);\\n\\\n    vec4 leafData0 = texture(u_octreeLeafNodeTexture, leafUv0);\\n\\\n    float lerp = normU8x2_toFloat(leafData0.xy);\\n\\\n    sampleDatas[0].weight = 1.0 - lerp;\\n\\\n    sampleDatas[1].weight = lerp;\\n\\\n    // TODO: this looks wrong? Should be comparing to OCTREE_FLAG_PACKED_LEAF_FROM_PARENT\\n\\\n    sampleDatas[0].tileCoords = (normU8_toInt(leafData0.z) == 1)\\n\\\n        ? ivec4(octreeCoords.xyz / 2, octreeCoords.w - 1)\\n\\\n        : octreeCoords;\\n\\\n    sampleDatas[1].tileCoords = (normU8_toInt(leafData0.w) == 1)\\n\\\n        ? ivec4(octreeCoords.xyz / 2, octreeCoords.w - 1)\\n\\\n        : octreeCoords;\\n\\\n\\n\\\n    // Get megatexture indices for both samples\\n\\\n    vec2 leafUv1 = u_octreeLeafNodeTexelSizeUv * vec2(leafCoordXStart + 1.0, leafCoordY);\\n\\\n    vec4 leafData1 = texture(u_octreeLeafNodeTexture, leafUv1);\\n\\\n    sampleDatas[0].megatextureIndex = normU8x2_toInt(leafData1.xy);\\n\\\n    sampleDatas[1].megatextureIndex = normU8x2_toInt(leafData1.zw);\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nOctreeNodeData traverseOctreeDownwards(in vec3 shapePosition, inout TraversalData traversalData) {\\n\\\n    float sizeAtLevel = exp2(-1.0 * float(traversalData.octreeCoords.w));\\n\\\n    vec3 start = vec3(traversalData.octreeCoords.xyz) * sizeAtLevel;\\n\\\n    vec3 end = start + vec3(sizeAtLevel);\\n\\\n    OctreeNodeData childData;\\n\\\n\\n\\\n    for (int i = 0; i < OCTREE_MAX_LEVELS; ++i) {\\n\\\n        // Find out which octree child contains the position\\n\\\n        // 0 if before center, 1 if after\\n\\\n        vec3 center = 0.5 * (start + end);\\n\\\n        vec3 childCoord = step(center, shapePosition);\\n\\\n\\n\\\n        // Get octree coords for the next level down\\n\\\n        ivec4 octreeCoords = traversalData.octreeCoords;\\n\\\n        traversalData.octreeCoords = ivec4(octreeCoords.xyz * 2 + ivec3(childCoord), octreeCoords.w + 1);\\n\\\n\\n\\\n        childData = getOctreeChildData(traversalData.parentOctreeIndex, ivec3(childCoord));\\n\\\n\\n\\\n        if (childData.flag != OCTREE_FLAG_INTERNAL) {\\n\\\n            // leaf tile - stop traversing\\n\\\n            break;\\n\\\n        }\\n\\\n\\n\\\n        // interior tile - keep going deeper\\n\\\n        start = mix(start, center, childCoord);\\n\\\n        end = mix(center, end, childCoord);\\n\\\n        traversalData.parentOctreeIndex = childData.data;\\n\\\n    }\\n\\\n\\n\\\n    return childData;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n* Transform a given position to an octree tile coordinate and a position within that tile,\\n\\\n* and find the corresponding megatexture index and texture coordinates\\n\\\n*/\\n\\\nvoid traverseOctreeFromBeginning(in vec3 shapePosition, out TraversalData traversalData, out SampleData sampleDatas[SAMPLE_COUNT]) {\\n\\\n    traversalData.octreeCoords = ivec4(0);\\n\\\n    traversalData.parentOctreeIndex = 0;\\n\\\n\\n\\\n    OctreeNodeData nodeData = getOctreeNodeData(vec2(0.0));\\n\\\n    if (nodeData.flag != OCTREE_FLAG_LEAF) {\\n\\\n        nodeData = traverseOctreeDownwards(shapePosition, traversalData);\\n\\\n    }\\n\\\n\\n\\\n    #if (SAMPLE_COUNT == 1)\\n\\\n        getOctreeLeafSampleData(nodeData, traversalData.octreeCoords, sampleDatas[0]);\\n\\\n        sampleDatas[0].tileUv = getClampedTileUv(shapePosition, sampleDatas[0].tileCoords);\\n\\\n    #else\\n\\\n        getOctreeLeafSampleDatas(nodeData, traversalData.octreeCoords, sampleDatas);\\n\\\n        sampleDatas[0].tileUv = getClampedTileUv(shapePosition, sampleDatas[0].tileCoords);\\n\\\n        sampleDatas[1].tileUv = getClampedTileUv(shapePosition, sampleDatas[1].tileCoords);\\n\\\n    #endif\\n\\\n}\\n\\\n\\n\\\nbool inRange(in vec3 v, in vec3 minVal, in vec3 maxVal) {\\n\\\n    return clamp(v, minVal, maxVal) == v;\\n\\\n}\\n\\\n\\n\\\nbool insideTile(in vec3 shapePosition, in ivec4 octreeCoords) {\\n\\\n    vec3 tileUv = getTileUv(shapePosition, octreeCoords);\\n\\\n\tbool inside = inRange(tileUv, vec3(0.0), vec3(1.0));\\n\\\n\t// Assume (!) the position is always inside the root tile.\\n\\\n\treturn inside || octreeCoords.w == 0;\\n\\\n}\\n\\\n\\n\\\nvoid traverseOctreeFromExisting(in vec3 shapePosition, inout TraversalData traversalData, inout SampleData sampleDatas[SAMPLE_COUNT]) {\\n\\\n    if (insideTile(shapePosition, traversalData.octreeCoords)) {\\n\\\n        for (int i = 0; i < SAMPLE_COUNT; i++) {\\n\\\n            sampleDatas[0].tileUv = getClampedTileUv(shapePosition, sampleDatas[0].tileCoords);\\n\\\n        }\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    // Go up tree until we find a parent tile containing shapePosition\\n\\\n    for (int i = 0; i < OCTREE_MAX_LEVELS; ++i) {\\n\\\n        traversalData.octreeCoords.xyz /= 2;\\n\\\n        traversalData.octreeCoords.w -= 1;\\n\\\n\\n\\\n        if (insideTile(shapePosition, traversalData.octreeCoords)) {\\n\\\n            break;\\n\\\n        }\\n\\\n\\n\\\n        traversalData.parentOctreeIndex = getOctreeParentIndex(traversalData.parentOctreeIndex);\\n\\\n    }\\n\\\n\\n\\\n    // Go down tree\\n\\\n    OctreeNodeData nodeData = traverseOctreeDownwards(shapePosition, traversalData);\\n\\\n\\n\\\n    #if (SAMPLE_COUNT == 1)\\n\\\n        getOctreeLeafSampleData(nodeData, traversalData.octreeCoords, sampleDatas[0]);\\n\\\n        sampleDatas[0].tileUv = getClampedTileUv(shapePosition, sampleDatas[0].tileCoords);\\n\\\n    #else\\n\\\n        getOctreeLeafSampleDatas(nodeData, traversalData.octreeCoords, sampleDatas);\\n\\\n        sampleDatas[0].tileUv = getClampedTileUv(shapePosition, sampleDatas[0].tileCoords);\\n\\\n        sampleDatas[1].tileUv = getClampedTileUv(shapePosition, sampleDatas[1].tileCoords);\\n\\\n    #endif\\n\\\n}\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACfignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}