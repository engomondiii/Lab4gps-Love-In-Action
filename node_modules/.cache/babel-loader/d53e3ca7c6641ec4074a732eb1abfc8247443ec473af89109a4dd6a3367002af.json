{"ast":null,"code":"import CesiumTerrainProvider from \"./CesiumTerrainProvider.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\n\n/**\n * Creates a {@link CesiumTerrainProvider} instance for the {@link https://cesium.com/content/#cesium-world-terrain|Cesium World Terrain}.\n *\n * @function\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.requestVertexNormals=false] Flag that indicates if the client should request additional lighting information from the server if available.\n * @param {Boolean} [options.requestWaterMask=false] Flag that indicates if the client should request per tile water masks from the server if available.\n * @returns {Promise<CesiumTerrainProvider>} A promise that resolves to the created CesiumTerrainProvider\n *\n * @see Ion\n *\n * @example\n * // Create Cesium World Terrain with default settings\n * try {\n *   const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *     terrainProvider: await Cesium.createWorldTerrainAsync();\n *   });\n * } catch (error) {\n *   console.log(error);\n * }\n *\n * @example\n * // Create Cesium World Terrain with water and normals.\n * try {\n *   const viewer1 = new Cesium.Viewer(\"cesiumContainer\", {\n *     terrainProvider: await Cesium.createWorldTerrainAsync({\n *       requestWaterMask: true,\n *       requestVertexNormals: true\n *     });\n *   });\n * } catch (error) {\n *   console.log(error);\n * }\n *\n */\nfunction createWorldTerrainAsync(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  return CesiumTerrainProvider.fromIonAssetId(1, {\n    requestVertexNormals: defaultValue(options.requestVertexNormals, false),\n    requestWaterMask: defaultValue(options.requestWaterMask, false),\n    ellipsoid: Ellipsoid.WGS84\n  });\n}\nexport default createWorldTerrainAsync;","map":{"version":3,"names":["CesiumTerrainProvider","defaultValue","Ellipsoid","createWorldTerrainAsync","options","EMPTY_OBJECT","fromIonAssetId","requestVertexNormals","requestWaterMask","ellipsoid","WGS84"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/createWorldTerrainAsync.js"],"sourcesContent":["import CesiumTerrainProvider from \"./CesiumTerrainProvider.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\n\n/**\n * Creates a {@link CesiumTerrainProvider} instance for the {@link https://cesium.com/content/#cesium-world-terrain|Cesium World Terrain}.\n *\n * @function\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.requestVertexNormals=false] Flag that indicates if the client should request additional lighting information from the server if available.\n * @param {Boolean} [options.requestWaterMask=false] Flag that indicates if the client should request per tile water masks from the server if available.\n * @returns {Promise<CesiumTerrainProvider>} A promise that resolves to the created CesiumTerrainProvider\n *\n * @see Ion\n *\n * @example\n * // Create Cesium World Terrain with default settings\n * try {\n *   const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n *     terrainProvider: await Cesium.createWorldTerrainAsync();\n *   });\n * } catch (error) {\n *   console.log(error);\n * }\n *\n * @example\n * // Create Cesium World Terrain with water and normals.\n * try {\n *   const viewer1 = new Cesium.Viewer(\"cesiumContainer\", {\n *     terrainProvider: await Cesium.createWorldTerrainAsync({\n *       requestWaterMask: true,\n *       requestVertexNormals: true\n *     });\n *   });\n * } catch (error) {\n *   console.log(error);\n * }\n *\n */\nfunction createWorldTerrainAsync(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  return CesiumTerrainProvider.fromIonAssetId(1, {\n    requestVertexNormals: defaultValue(options.requestVertexNormals, false),\n    requestWaterMask: defaultValue(options.requestWaterMask, false),\n    ellipsoid: Ellipsoid.WGS84,\n  });\n}\nexport default createWorldTerrainAsync;\n"],"mappings":"AAAA,OAAOA,qBAAqB,MAAM,4BAA4B;AAC9D,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,SAAS,MAAM,gBAAgB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACC,OAAO,EAAE;EACxCA,OAAO,GAAGH,YAAY,CAACG,OAAO,EAAEH,YAAY,CAACI,YAAY,CAAC;EAE1D,OAAOL,qBAAqB,CAACM,cAAc,CAAC,CAAC,EAAE;IAC7CC,oBAAoB,EAAEN,YAAY,CAACG,OAAO,CAACG,oBAAoB,EAAE,KAAK,CAAC;IACvEC,gBAAgB,EAAEP,YAAY,CAACG,OAAO,CAACI,gBAAgB,EAAE,KAAK,CAAC;IAC/DC,SAAS,EAAEP,SAAS,CAACQ;EACvB,CAAC,CAAC;AACJ;AACA,eAAeP,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}