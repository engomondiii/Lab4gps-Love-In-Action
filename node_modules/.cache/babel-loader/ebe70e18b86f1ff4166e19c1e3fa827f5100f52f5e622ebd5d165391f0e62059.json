{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport MetadataEnumValue from \"./MetadataEnumValue.js\";\nimport MetadataComponentType from \"./MetadataComponentType.js\";\n\n/**\n * A metadata enum.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Metadata|3D Metadata Specification} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.id The ID of the enum.\n * @param {MetadataEnumValue[]} options.values The enum values.\n * @param {MetadataComponentType} [options.valueType=MetadataComponentType.UINT16] The enum value type.\n * @param {string} [options.name] The name of the enum.\n * @param {string} [options.description] The description of the enum.\n * @param {*} [options.extras] Extra user-defined properties.\n * @param {object} [options.extensions] An object containing extensions.\n *\n * @alias MetadataEnum\n * @constructor\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction MetadataEnum(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const id = options.id;\n  const values = options.values;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"options.id\", id);\n  Check.defined(\"options.values\", values);\n  //>>includeEnd('debug');\n\n  const namesByValue = {};\n  const valuesByName = {};\n  const valuesLength = values.length;\n  for (let i = 0; i < valuesLength; ++i) {\n    const value = values[i];\n    namesByValue[value.value] = value.name;\n    valuesByName[value.name] = value.value;\n  }\n  const valueType = defaultValue(options.valueType, MetadataComponentType.UINT16);\n  this._values = values;\n  this._namesByValue = namesByValue;\n  this._valuesByName = valuesByName;\n  this._valueType = valueType;\n  this._id = id;\n  this._name = options.name;\n  this._description = options.description;\n  this._extras = clone(options.extras, true);\n  this._extensions = clone(options.extensions, true);\n}\n\n/**\n * Creates a {@link MetadataEnum} from either 3D Tiles 1.1, 3DTILES_metadata, EXT_structural_metadata, or EXT_feature_metadata.\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.id The ID of the enum.\n * @param {object} options.enum The enum JSON object.\n *\n * @returns {MetadataEnum} The newly created metadata enum.\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nMetadataEnum.fromJson = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const id = options.id;\n  const enumDefinition = options.enum;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"options.id\", id);\n  Check.typeOf.object(\"options.enum\", enumDefinition);\n  //>>includeEnd('debug');\n\n  const values = enumDefinition.values.map(function (value) {\n    return MetadataEnumValue.fromJson(value);\n  });\n  return new MetadataEnum({\n    id: id,\n    values: values,\n    valueType: MetadataComponentType[enumDefinition.valueType],\n    name: enumDefinition.name,\n    description: enumDefinition.description,\n    extras: enumDefinition.extras,\n    extensions: enumDefinition.extensions\n  });\n};\nObject.defineProperties(MetadataEnum.prototype, {\n  /**\n   * The enum values.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {MetadataEnumValue[]}\n   * @readonly\n   */\n  values: {\n    get: function () {\n      return this._values;\n    }\n  },\n  /**\n   * A dictionary mapping enum integer values to names.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {Object<number, string>}\n   * @readonly\n   *\n   * @private\n   */\n  namesByValue: {\n    get: function () {\n      return this._namesByValue;\n    }\n  },\n  /**\n   * A dictionary mapping enum names to integer values.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {Object<string, number>}\n   * @readonly\n   *\n   * @private\n   */\n  valuesByName: {\n    get: function () {\n      return this._valuesByName;\n    }\n  },\n  /**\n   * The enum value type.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {MetadataComponentType}\n   * @readonly\n   */\n  valueType: {\n    get: function () {\n      return this._valueType;\n    }\n  },\n  /**\n   * The ID of the enum.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {string}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n  /**\n   * The name of the enum.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {string}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    }\n  },\n  /**\n   * The description of the enum.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {string}\n   * @readonly\n   */\n  description: {\n    get: function () {\n      return this._description;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {*}\n   * @readonly\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {object}\n   * @readonly\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\nexport default MetadataEnum;","map":{"version":3,"names":["Check","clone","defaultValue","MetadataEnumValue","MetadataComponentType","MetadataEnum","options","EMPTY_OBJECT","id","values","typeOf","string","defined","namesByValue","valuesByName","valuesLength","length","i","value","name","valueType","UINT16","_values","_namesByValue","_valuesByName","_valueType","_id","_name","_description","description","_extras","extras","_extensions","extensions","fromJson","enumDefinition","enum","object","map","Object","defineProperties","prototype","get"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/MetadataEnum.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport MetadataEnumValue from \"./MetadataEnumValue.js\";\nimport MetadataComponentType from \"./MetadataComponentType.js\";\n\n/**\n * A metadata enum.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Metadata|3D Metadata Specification} for 3D Tiles\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.id The ID of the enum.\n * @param {MetadataEnumValue[]} options.values The enum values.\n * @param {MetadataComponentType} [options.valueType=MetadataComponentType.UINT16] The enum value type.\n * @param {string} [options.name] The name of the enum.\n * @param {string} [options.description] The description of the enum.\n * @param {*} [options.extras] Extra user-defined properties.\n * @param {object} [options.extensions] An object containing extensions.\n *\n * @alias MetadataEnum\n * @constructor\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction MetadataEnum(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const id = options.id;\n  const values = options.values;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"options.id\", id);\n  Check.defined(\"options.values\", values);\n  //>>includeEnd('debug');\n\n  const namesByValue = {};\n  const valuesByName = {};\n\n  const valuesLength = values.length;\n  for (let i = 0; i < valuesLength; ++i) {\n    const value = values[i];\n    namesByValue[value.value] = value.name;\n    valuesByName[value.name] = value.value;\n  }\n\n  const valueType = defaultValue(\n    options.valueType,\n    MetadataComponentType.UINT16,\n  );\n\n  this._values = values;\n  this._namesByValue = namesByValue;\n  this._valuesByName = valuesByName;\n  this._valueType = valueType;\n  this._id = id;\n  this._name = options.name;\n  this._description = options.description;\n  this._extras = clone(options.extras, true);\n  this._extensions = clone(options.extensions, true);\n}\n\n/**\n * Creates a {@link MetadataEnum} from either 3D Tiles 1.1, 3DTILES_metadata, EXT_structural_metadata, or EXT_feature_metadata.\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.id The ID of the enum.\n * @param {object} options.enum The enum JSON object.\n *\n * @returns {MetadataEnum} The newly created metadata enum.\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nMetadataEnum.fromJson = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const id = options.id;\n  const enumDefinition = options.enum;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"options.id\", id);\n  Check.typeOf.object(\"options.enum\", enumDefinition);\n  //>>includeEnd('debug');\n\n  const values = enumDefinition.values.map(function (value) {\n    return MetadataEnumValue.fromJson(value);\n  });\n\n  return new MetadataEnum({\n    id: id,\n    values: values,\n    valueType: MetadataComponentType[enumDefinition.valueType],\n    name: enumDefinition.name,\n    description: enumDefinition.description,\n    extras: enumDefinition.extras,\n    extensions: enumDefinition.extensions,\n  });\n};\n\nObject.defineProperties(MetadataEnum.prototype, {\n  /**\n   * The enum values.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {MetadataEnumValue[]}\n   * @readonly\n   */\n  values: {\n    get: function () {\n      return this._values;\n    },\n  },\n\n  /**\n   * A dictionary mapping enum integer values to names.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {Object<number, string>}\n   * @readonly\n   *\n   * @private\n   */\n  namesByValue: {\n    get: function () {\n      return this._namesByValue;\n    },\n  },\n\n  /**\n   * A dictionary mapping enum names to integer values.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {Object<string, number>}\n   * @readonly\n   *\n   * @private\n   */\n  valuesByName: {\n    get: function () {\n      return this._valuesByName;\n    },\n  },\n\n  /**\n   * The enum value type.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {MetadataComponentType}\n   * @readonly\n   */\n  valueType: {\n    get: function () {\n      return this._valueType;\n    },\n  },\n\n  /**\n   * The ID of the enum.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {string}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * The name of the enum.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {string}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * The description of the enum.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {string}\n   * @readonly\n   */\n  description: {\n    get: function () {\n      return this._description;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {*}\n   * @readonly\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof MetadataEnum.prototype\n   * @type {object}\n   * @readonly\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\nexport default MetadataEnum;\n"],"mappings":"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CA;AACA;AACA;EACET,YAAY,EAAE;IACZ6B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnB,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACET,YAAY,EAAE;IACZ4B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAClB,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEJ,SAAS,EAAE;IACTsB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACjB,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEjB,EAAE,EAAE;IACFkC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAChB,GAAG;IACjB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEP,IAAI,EAAE;IACJuB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACf,KAAK;IACnB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,WAAW,EAAE;IACXa,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACd,YAAY;IAC1B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,MAAM,EAAE;IACNW,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACZ,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,UAAU,EAAE;IACVS,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACV,WAAW;IACzB;EACF;AACF,CAAC,CAAC;AAEF,eAAe3B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}