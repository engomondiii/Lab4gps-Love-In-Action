{"ast":null,"code":"import ContentMetadata from \"./ContentMetadata.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport hasExtension from \"./hasExtension.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\n\n/**\n * Check if a content has metadata, either defined in its metadata field (3D Tiles 1.1) or in\n * the <code>3DTILES_metadata</code> extension. If defined, get the content metadata\n * with the corresponding class.\n *\n * @function\n *\n * @param {Cesium3DTileset} tileset The tileset to query for content metadata\n * @param {object} contentHeader the JSON header for a {@link Cesium3DTileContent}\n * @return {ContentMetadata} the content metadata, or <code>undefined</code> if not found\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction findContentMetadata(tileset, contentHeader) {\n  const metadataJson = hasExtension(contentHeader, \"3DTILES_metadata\") ? contentHeader.extensions[\"3DTILES_metadata\"] : contentHeader.metadata;\n  if (!defined(metadataJson)) {\n    return undefined;\n  }\n  if (!defined(tileset.schema)) {\n    findContentMetadata._oneTimeWarning(\"findContentMetadata-missing-root-schema\", \"Could not find a metadata schema for content metadata. For tilesets that contain external tilesets, make sure the schema is added to the root tileset.json.\");\n    return undefined;\n  }\n  const classes = defaultValue(tileset.schema.classes, defaultValue.EMPTY_OBJECT);\n  if (defined(metadataJson.class)) {\n    const contentClass = classes[metadataJson.class];\n    return new ContentMetadata({\n      content: metadataJson,\n      class: contentClass\n    });\n  }\n  return undefined;\n}\n\n// Exposed for testing\nfindContentMetadata._oneTimeWarning = oneTimeWarning;\nexport default findContentMetadata;","map":{"version":3,"names":["ContentMetadata","defaultValue","defined","hasExtension","oneTimeWarning","findContentMetadata","tileset","contentHeader","metadataJson","extensions","metadata","undefined","schema","_oneTimeWarning","classes","EMPTY_OBJECT","class","contentClass","content"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/findContentMetadata.js"],"sourcesContent":["import ContentMetadata from \"./ContentMetadata.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport hasExtension from \"./hasExtension.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\n\n/**\n * Check if a content has metadata, either defined in its metadata field (3D Tiles 1.1) or in\n * the <code>3DTILES_metadata</code> extension. If defined, get the content metadata\n * with the corresponding class.\n *\n * @function\n *\n * @param {Cesium3DTileset} tileset The tileset to query for content metadata\n * @param {object} contentHeader the JSON header for a {@link Cesium3DTileContent}\n * @return {ContentMetadata} the content metadata, or <code>undefined</code> if not found\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction findContentMetadata(tileset, contentHeader) {\n  const metadataJson = hasExtension(contentHeader, \"3DTILES_metadata\")\n    ? contentHeader.extensions[\"3DTILES_metadata\"]\n    : contentHeader.metadata;\n\n  if (!defined(metadataJson)) {\n    return undefined;\n  }\n\n  if (!defined(tileset.schema)) {\n    findContentMetadata._oneTimeWarning(\n      \"findContentMetadata-missing-root-schema\",\n      \"Could not find a metadata schema for content metadata. For tilesets that contain external tilesets, make sure the schema is added to the root tileset.json.\",\n    );\n    return undefined;\n  }\n\n  const classes = defaultValue(\n    tileset.schema.classes,\n    defaultValue.EMPTY_OBJECT,\n  );\n  if (defined(metadataJson.class)) {\n    const contentClass = classes[metadataJson.class];\n    return new ContentMetadata({\n      content: metadataJson,\n      class: contentClass,\n    });\n  }\n\n  return undefined;\n}\n\n// Exposed for testing\nfindContentMetadata._oneTimeWarning = oneTimeWarning;\nexport default findContentMetadata;\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,sBAAsB;AAClD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,cAAc,MAAM,2BAA2B;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,OAAO,EAAEC,aAAa,EAAE;EACnD,MAAMC,YAAY,GAAGL,YAAY,CAACI,aAAa,EAAE,kBAAkB,CAAC,GAChEA,aAAa,CAACE,UAAU,CAAC,kBAAkB,CAAC,GAC5CF,aAAa,CAACG,QAAQ;EAE1B,IAAI,CAACR,OAAO,CAACM,YAAY,CAAC,EAAE;IAC1B,OAAOG,SAAS;EAClB;EAEA,IAAI,CAACT,OAAO,CAACI,OAAO,CAACM,MAAM,CAAC,EAAE;IAC5BP,mBAAmB,CAACQ,eAAe,CACjC,yCAAyC,EACzC,6JACF,CAAC;IACD,OAAOF,SAAS;EAClB;EAEA,MAAMG,OAAO,GAAGb,YAAY,CAC1BK,OAAO,CAACM,MAAM,CAACE,OAAO,EACtBb,YAAY,CAACc,YACf,CAAC;EACD,IAAIb,OAAO,CAACM,YAAY,CAACQ,KAAK,CAAC,EAAE;IAC/B,MAAMC,YAAY,GAAGH,OAAO,CAACN,YAAY,CAACQ,KAAK,CAAC;IAChD,OAAO,IAAIhB,eAAe,CAAC;MACzBkB,OAAO,EAAEV,YAAY;MACrBQ,KAAK,EAAEC;IACT,CAAC,CAAC;EACJ;EAEA,OAAON,SAAS;AAClB;;AAEA;AACAN,mBAAmB,CAACQ,eAAe,GAAGT,cAAc;AACpD,eAAeC,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}