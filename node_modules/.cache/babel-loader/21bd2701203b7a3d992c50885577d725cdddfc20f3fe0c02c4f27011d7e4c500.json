{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Determines visibility based on the distance to the camera.\n *\n * @alias DistanceDisplayCondition\n * @constructor\n *\n * @param {number} [near=0.0] The smallest distance in the interval where the object is visible.\n * @param {number} [far=Number.MAX_VALUE] The largest distance in the interval where the object is visible.\n *\n * @example\n * // Make a billboard that is only visible when the distance to the camera is between 10 and 20 meters.\n * billboard.distanceDisplayCondition = new Cesium.DistanceDisplayCondition(10.0, 20.0);\n */\nfunction DistanceDisplayCondition(near, far) {\n  near = defaultValue(near, 0.0);\n  this._near = near;\n  far = defaultValue(far, Number.MAX_VALUE);\n  this._far = far;\n}\nObject.defineProperties(DistanceDisplayCondition.prototype, {\n  /**\n   * The smallest distance in the interval where the object is visible.\n   * @memberof DistanceDisplayCondition.prototype\n   * @type {number}\n   * @default 0.0\n   */\n  near: {\n    get: function () {\n      return this._near;\n    },\n    set: function (value) {\n      this._near = value;\n    }\n  },\n  /**\n   * The largest distance in the interval where the object is visible.\n   * @memberof DistanceDisplayCondition.prototype\n   * @type {number}\n   * @default Number.MAX_VALUE\n   */\n  far: {\n    get: function () {\n      return this._far;\n    },\n    set: function (value) {\n      this._far = value;\n    }\n  }\n});\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nDistanceDisplayCondition.packedLength = 2;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {DistanceDisplayCondition} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nDistanceDisplayCondition.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.near;\n  array[startingIndex] = value.far;\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {DistanceDisplayCondition} [result] The object into which to store the result.\n * @returns {DistanceDisplayCondition} The modified result parameter or a new DistanceDisplayCondition instance if one was not provided.\n */\nDistanceDisplayCondition.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  if (!defined(result)) {\n    result = new DistanceDisplayCondition();\n  }\n  result.near = array[startingIndex++];\n  result.far = array[startingIndex];\n  return result;\n};\n\n/**\n * Determines if two distance display conditions are equal.\n *\n * @param {DistanceDisplayCondition} left A distance display condition.\n * @param {DistanceDisplayCondition} right Another distance display condition.\n * @return {boolean} Whether the two distance display conditions are equal.\n */\nDistanceDisplayCondition.equals = function (left, right) {\n  return left === right || defined(left) && defined(right) && left.near === right.near && left.far === right.far;\n};\n\n/**\n * Duplicates a distance display condition instance.\n *\n * @param {DistanceDisplayCondition} [value] The distance display condition to duplicate.\n * @param {DistanceDisplayCondition} [result] The result onto which to store the result.\n * @return {DistanceDisplayCondition} The duplicated instance.\n */\nDistanceDisplayCondition.clone = function (value, result) {\n  if (!defined(value)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    result = new DistanceDisplayCondition();\n  }\n  result.near = value.near;\n  result.far = value.far;\n  return result;\n};\n\n/**\n * Duplicates this instance.\n *\n * @param {DistanceDisplayCondition} [result] The result onto which to store the result.\n * @return {DistanceDisplayCondition} The duplicated instance.\n */\nDistanceDisplayCondition.prototype.clone = function (result) {\n  return DistanceDisplayCondition.clone(this, result);\n};\n\n/**\n * Determines if this distance display condition is equal to another.\n *\n * @param {DistanceDisplayCondition} other Another distance display condition.\n * @return {boolean} Whether this distance display condition is equal to the other.\n */\nDistanceDisplayCondition.prototype.equals = function (other) {\n  return DistanceDisplayCondition.equals(this, other);\n};\nexport default DistanceDisplayCondition;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","DistanceDisplayCondition","near","far","_near","Number","MAX_VALUE","_far","Object","defineProperties","prototype","get","set","value","packedLength","pack","array","startingIndex","unpack","result","equals","left","right","clone","undefined","other"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/DistanceDisplayCondition.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Determines visibility based on the distance to the camera.\n *\n * @alias DistanceDisplayCondition\n * @constructor\n *\n * @param {number} [near=0.0] The smallest distance in the interval where the object is visible.\n * @param {number} [far=Number.MAX_VALUE] The largest distance in the interval where the object is visible.\n *\n * @example\n * // Make a billboard that is only visible when the distance to the camera is between 10 and 20 meters.\n * billboard.distanceDisplayCondition = new Cesium.DistanceDisplayCondition(10.0, 20.0);\n */\nfunction DistanceDisplayCondition(near, far) {\n  near = defaultValue(near, 0.0);\n  this._near = near;\n\n  far = defaultValue(far, Number.MAX_VALUE);\n  this._far = far;\n}\n\nObject.defineProperties(DistanceDisplayCondition.prototype, {\n  /**\n   * The smallest distance in the interval where the object is visible.\n   * @memberof DistanceDisplayCondition.prototype\n   * @type {number}\n   * @default 0.0\n   */\n  near: {\n    get: function () {\n      return this._near;\n    },\n    set: function (value) {\n      this._near = value;\n    },\n  },\n  /**\n   * The largest distance in the interval where the object is visible.\n   * @memberof DistanceDisplayCondition.prototype\n   * @type {number}\n   * @default Number.MAX_VALUE\n   */\n  far: {\n    get: function () {\n      return this._far;\n    },\n    set: function (value) {\n      this._far = value;\n    },\n  },\n});\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nDistanceDisplayCondition.packedLength = 2;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {DistanceDisplayCondition} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nDistanceDisplayCondition.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.near;\n  array[startingIndex] = value.far;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {DistanceDisplayCondition} [result] The object into which to store the result.\n * @returns {DistanceDisplayCondition} The modified result parameter or a new DistanceDisplayCondition instance if one was not provided.\n */\nDistanceDisplayCondition.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new DistanceDisplayCondition();\n  }\n  result.near = array[startingIndex++];\n  result.far = array[startingIndex];\n  return result;\n};\n\n/**\n * Determines if two distance display conditions are equal.\n *\n * @param {DistanceDisplayCondition} left A distance display condition.\n * @param {DistanceDisplayCondition} right Another distance display condition.\n * @return {boolean} Whether the two distance display conditions are equal.\n */\nDistanceDisplayCondition.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.near === right.near &&\n      left.far === right.far)\n  );\n};\n\n/**\n * Duplicates a distance display condition instance.\n *\n * @param {DistanceDisplayCondition} [value] The distance display condition to duplicate.\n * @param {DistanceDisplayCondition} [result] The result onto which to store the result.\n * @return {DistanceDisplayCondition} The duplicated instance.\n */\nDistanceDisplayCondition.clone = function (value, result) {\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    result = new DistanceDisplayCondition();\n  }\n\n  result.near = value.near;\n  result.far = value.far;\n  return result;\n};\n\n/**\n * Duplicates this instance.\n *\n * @param {DistanceDisplayCondition} [result] The result onto which to store the result.\n * @return {DistanceDisplayCondition} The duplicated instance.\n */\nDistanceDisplayCondition.prototype.clone = function (result) {\n  return DistanceDisplayCondition.clone(this, result);\n};\n\n/**\n * Determines if this distance display condition is equal to another.\n *\n * @param {DistanceDisplayCondition} other Another distance display condition.\n * @return {boolean} Whether this distance display condition is equal to the other.\n */\nDistanceDisplayCondition.prototype.equals = function (other) {\n  return DistanceDisplayCondition.equals(this, other);\n};\nexport default DistanceDisplayCondition;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}