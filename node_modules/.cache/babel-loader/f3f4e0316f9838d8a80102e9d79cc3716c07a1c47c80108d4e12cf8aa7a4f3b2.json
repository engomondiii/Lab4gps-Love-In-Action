{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * A feature of a {@link Cesium3DTileset}.\n * <p>\n * Provides access to a feature's properties stored in the tile's batch table, as well\n * as the ability to show/hide a feature and change its highlight color via\n * {@link Cesium3DTileFeature#show} and {@link Cesium3DTileFeature#color}, respectively.\n * </p>\n * <p>\n * Modifications to a <code>Cesium3DTileFeature</code> object have the lifetime of the tile's\n * content.  If the tile's content is unloaded, e.g., due to it going out of view and needing\n * to free space in the cache for visible tiles, listen to the {@link Cesium3DTileset#tileUnload} event to save any\n * modifications. Also listen to the {@link Cesium3DTileset#tileVisible} event to reapply any modifications.\n * </p>\n * <p>\n * Do not construct this directly.  Access it through {@link Cesium3DTileContent#getFeature}\n * or picking using {@link Scene#pick}.\n * </p>\n *\n * @alias Cesium3DTileFeature\n * @constructor\n *\n * @example\n * // On mouse over, display all the properties for a feature in the console log.\n * handler.setInputAction(function(movement) {\n *     const feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTileFeature) {\n *         const propertyIds = feature.getPropertyIds();\n *         const length = propertyIds.length;\n *         for (let i = 0; i < length; ++i) {\n *             const propertyId = propertyIds[i];\n *             console.log(`{propertyId}: ${feature.getProperty(propertyId)}`);\n *         }\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nfunction Cesium3DTileFeature(content, batchId) {\n  this._content = content;\n  this._batchId = batchId;\n  this._color = undefined; // for calling getColor\n}\nObject.defineProperties(Cesium3DTileFeature.prototype, {\n  /**\n   * Gets or sets if the feature will be shown. This is set for all features\n   * when a style's show is evaluated.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._content.batchTable.getShow(this._batchId);\n    },\n    set: function (value) {\n      this._content.batchTable.setShow(this._batchId, value);\n    }\n  },\n  /**\n   * Gets or sets the highlight color multiplied with the feature's color.  When\n   * this is white, the feature's color is not changed. This is set for all features\n   * when a style's color is evaluated.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Color}\n   *\n   * @default {@link Color.WHITE}\n   */\n  color: {\n    get: function () {\n      if (!defined(this._color)) {\n        this._color = new Color();\n      }\n      return this._content.batchTable.getColor(this._batchId, this._color);\n    },\n    set: function (value) {\n      this._content.batchTable.setColor(this._batchId, value);\n    }\n  },\n  /**\n   * Gets a typed array containing the ECEF positions of the polyline.\n   * Returns undefined if {@link Cesium3DTileset#vectorKeepDecodedPositions} is false\n   * or the feature is not a polyline in a vector tile.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @type {Float64Array}\n   */\n  polylinePositions: {\n    get: function () {\n      if (!defined(this._content.getPolylinePositions)) {\n        return undefined;\n      }\n      return this._content.getPolylinePositions(this._batchId);\n    }\n  },\n  /**\n   * Gets the content of the tile containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileContent}\n   *\n   * @readonly\n   * @private\n   */\n  content: {\n    get: function () {\n      return this._content;\n    }\n  },\n  /**\n   * Gets the tileset containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  tileset: {\n    get: function () {\n      return this._content.tileset;\n    }\n  },\n  /**\n   * All objects returned by {@link Scene#pick} have a <code>primitive</code> property. This returns\n   * the tileset containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  primitive: {\n    get: function () {\n      return this._content.tileset;\n    }\n  },\n  /**\n   * Get the feature ID associated with this feature. For 3D Tiles 1.0, the\n   * batch ID is returned. For EXT_mesh_features, this is the feature ID from\n   * the selected feature ID set.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {number}\n   *\n   * @readonly\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   */\n  featureId: {\n    get: function () {\n      return this._batchId;\n    }\n  },\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._content.batchTable.getPickColor(this._batchId);\n    }\n  }\n});\n\n/**\n * Returns whether the feature contains this property. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string} name The case-sensitive name of the property.\n * @returns {boolean} Whether the feature contains this property.\n */\nCesium3DTileFeature.prototype.hasProperty = function (name) {\n  return this._content.batchTable.hasProperty(this._batchId, name);\n};\n\n/**\n * Returns an array of property IDs for the feature. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The IDs of the feature's properties.\n */\nCesium3DTileFeature.prototype.getPropertyIds = function (results) {\n  return this._content.batchTable.getPropertyIds(this._batchId, results);\n};\n\n/**\n * Returns a copy of the value of the feature's property with the given name. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n *\n * @example\n * // Display all the properties for a feature in the console log.\n * const propertyIds = feature.getPropertyIds();\n * const length = propertyIds.length;\n * for (let i = 0; i < length; ++i) {\n *     const propertyId = propertyIds[i];\n *     console.log(`{propertyId}: ${feature.getProperty(propertyId)}`);\n * }\n */\nCesium3DTileFeature.prototype.getProperty = function (name) {\n  return this._content.batchTable.getProperty(this._batchId, name);\n};\n\n/**\n * Returns a copy of the feature's property with the given name, examining all\n * the metadata from 3D Tiles 1.0 formats, the EXT_structural_metadata and legacy\n * EXT_feature_metadata glTF extensions, and the metadata present either in the\n * tileset JSON (3D Tiles 1.1) or in the 3DTILES_metadata 3D Tiles extension.\n * Metadata is checked against name from most specific to most general and the\n * first match is returned. Metadata is checked in this order:\n *\n * <ol>\n *   <li>Batch table (structural metadata) property by semantic</li>\n *   <li>Batch table (structural metadata) property by property ID</li>\n *   <li>Content metadata property by semantic</li>\n *   <li>Content metadata property by property</li>\n *   <li>Tile metadata property by semantic</li>\n *   <li>Tile metadata property by property ID</li>\n *   <li>Subtree metadata property by semantic</li>\n *   <li>Subtree metadata property by property ID</li>\n *   <li>Group metadata property by semantic</li>\n *   <li>Group metadata property by property ID</li>\n *   <li>Tileset metadata property by semantic</li>\n *   <li>Tileset metadata property by property ID</li>\n *   <li>Otherwise, return undefined</li>\n * </ol>\n * <p>\n * For 3D Tiles Next details, see the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension}\n * for 3D Tiles, as well as the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension}\n * for glTF. For the legacy glTF extension, see {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata|EXT_feature_metadata Extension}\n * </p>\n *\n * @param {Cesium3DTileContent} content The content for accessing the metadata\n * @param {number} batchId The batch ID (or feature ID) of the feature to get a property for\n * @param {string} name The semantic or property ID of the feature. Semantics are checked before property IDs in each granularity of metadata.\n * @return {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n *\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nCesium3DTileFeature.getPropertyInherited = function (content, batchId, name) {\n  const batchTable = content.batchTable;\n  if (defined(batchTable)) {\n    if (batchTable.hasPropertyBySemantic(batchId, name)) {\n      return batchTable.getPropertyBySemantic(batchId, name);\n    }\n    if (batchTable.hasProperty(batchId, name)) {\n      return batchTable.getProperty(batchId, name);\n    }\n  }\n  const contentMetadata = content.metadata;\n  if (defined(contentMetadata)) {\n    if (contentMetadata.hasPropertyBySemantic(name)) {\n      return contentMetadata.getPropertyBySemantic(name);\n    }\n    if (contentMetadata.hasProperty(name)) {\n      return contentMetadata.getProperty(name);\n    }\n  }\n  const tile = content.tile;\n  const tileMetadata = tile.metadata;\n  if (defined(tileMetadata)) {\n    if (tileMetadata.hasPropertyBySemantic(name)) {\n      return tileMetadata.getPropertyBySemantic(name);\n    }\n    if (tileMetadata.hasProperty(name)) {\n      return tileMetadata.getProperty(name);\n    }\n  }\n  let subtreeMetadata;\n  if (defined(tile.implicitSubtree)) {\n    subtreeMetadata = tile.implicitSubtree.metadata;\n  }\n  if (defined(subtreeMetadata)) {\n    if (subtreeMetadata.hasPropertyBySemantic(name)) {\n      return subtreeMetadata.getPropertyBySemantic(name);\n    }\n    if (subtreeMetadata.hasProperty(name)) {\n      return subtreeMetadata.getProperty(name);\n    }\n  }\n  const groupMetadata = defined(content.group) ? content.group.metadata : undefined;\n  if (defined(groupMetadata)) {\n    if (groupMetadata.hasPropertyBySemantic(name)) {\n      return groupMetadata.getPropertyBySemantic(name);\n    }\n    if (groupMetadata.hasProperty(name)) {\n      return groupMetadata.getProperty(name);\n    }\n  }\n  const tilesetMetadata = content.tileset.metadata;\n  if (defined(tilesetMetadata)) {\n    if (tilesetMetadata.hasPropertyBySemantic(name)) {\n      return tilesetMetadata.getPropertyBySemantic(name);\n    }\n    if (tilesetMetadata.hasProperty(name)) {\n      return tilesetMetadata.getProperty(name);\n    }\n  }\n  return undefined;\n};\n\n/**\n * Returns a copy of the value of the feature's property with the given name.\n * If the feature is contained within a tileset that has metadata (3D Tiles 1.1)\n * or uses the <code>3DTILES_metadata</code> extension, tileset, group and tile\n * metadata is inherited.\n * <p>\n * To resolve name conflicts, this method resolves names from most specific to\n * least specific by metadata granularity in the order: feature, tile, group,\n * tileset. Within each granularity, semantics are resolved first, then other\n * properties.\n * </p>\n * @param {string} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n * @private\n */\nCesium3DTileFeature.prototype.getPropertyInherited = function (name) {\n  return Cesium3DTileFeature.getPropertyInherited(this._content, this._batchId, name);\n};\n\n/**\n * Sets the value of the feature's property with the given name.\n * <p>\n * If a property with the given name doesn't exist, it is created.\n * </p>\n *\n * @param {string} name The case-sensitive name of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} Inherited batch table hierarchy property is read only.\n *\n * @example\n * const height = feature.getProperty('Height'); // e.g., the height of a building\n *\n * @example\n * const name = 'clicked';\n * if (feature.getProperty(name)) {\n *     console.log('already clicked');\n * } else {\n *     feature.setProperty(name, true);\n *     console.log('first click');\n * }\n */\nCesium3DTileFeature.prototype.setProperty = function (name, value) {\n  this._content.batchTable.setProperty(this._batchId, name, value);\n\n  // PERFORMANCE_IDEA: Probably overkill, but maybe only mark the tile dirty if the\n  // property is in one of the style's expressions or - if it can be done quickly -\n  // if the new property value changed the result of an expression.\n  this._content.featurePropertiesDirty = true;\n};\n\n/**\n * Returns whether the feature's class name equals <code>className</code>. Unlike {@link Cesium3DTileFeature#isClass}\n * this function only checks the feature's exact class and not inherited classes.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {string} className The name to check against.\n * @returns {boolean} Whether the feature's class name equals <code>className</code>\n *\n * @private\n */\nCesium3DTileFeature.prototype.isExactClass = function (className) {\n  return this._content.batchTable.isExactClass(this._batchId, className);\n};\n\n/**\n * Returns whether the feature's class or any inherited classes are named <code>className</code>.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {string} className The name to check against.\n * @returns {boolean} Whether the feature's class or inherited classes are named <code>className</code>\n *\n * @private\n */\nCesium3DTileFeature.prototype.isClass = function (className) {\n  return this._content.batchTable.isClass(this._batchId, className);\n};\n\n/**\n * Returns the feature's class name.\n * <p>\n * This function returns <code>undefined</code> if no batch table hierarchy is present.\n * </p>\n *\n * @returns {string} The feature's class name.\n *\n * @private\n */\nCesium3DTileFeature.prototype.getExactClassName = function () {\n  return this._content.batchTable.getExactClassName(this._batchId);\n};\nexport default Cesium3DTileFeature;","map":{"version":3,"names":["Color","defined","Cesium3DTileFeature","content","batchId","_content","_batchId","_color","undefined","Object","defineProperties","prototype","show","get","batchTable","getShow","set","value","setShow","color","getColor","setColor","polylinePositions","getPolylinePositions","tileset","primitive","featureId","pickId","getPickColor","hasProperty","name","getPropertyIds","results","getProperty","getPropertyInherited","hasPropertyBySemantic","getPropertyBySemantic","contentMetadata","metadata","tile","tileMetadata","subtreeMetadata","implicitSubtree","groupMetadata","group","tilesetMetadata","setProperty","featurePropertiesDirty","isExactClass","className","isClass","getExactClassName"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Cesium3DTileFeature.js"],"sourcesContent":["import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * A feature of a {@link Cesium3DTileset}.\n * <p>\n * Provides access to a feature's properties stored in the tile's batch table, as well\n * as the ability to show/hide a feature and change its highlight color via\n * {@link Cesium3DTileFeature#show} and {@link Cesium3DTileFeature#color}, respectively.\n * </p>\n * <p>\n * Modifications to a <code>Cesium3DTileFeature</code> object have the lifetime of the tile's\n * content.  If the tile's content is unloaded, e.g., due to it going out of view and needing\n * to free space in the cache for visible tiles, listen to the {@link Cesium3DTileset#tileUnload} event to save any\n * modifications. Also listen to the {@link Cesium3DTileset#tileVisible} event to reapply any modifications.\n * </p>\n * <p>\n * Do not construct this directly.  Access it through {@link Cesium3DTileContent#getFeature}\n * or picking using {@link Scene#pick}.\n * </p>\n *\n * @alias Cesium3DTileFeature\n * @constructor\n *\n * @example\n * // On mouse over, display all the properties for a feature in the console log.\n * handler.setInputAction(function(movement) {\n *     const feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTileFeature) {\n *         const propertyIds = feature.getPropertyIds();\n *         const length = propertyIds.length;\n *         for (let i = 0; i < length; ++i) {\n *             const propertyId = propertyIds[i];\n *             console.log(`{propertyId}: ${feature.getProperty(propertyId)}`);\n *         }\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nfunction Cesium3DTileFeature(content, batchId) {\n  this._content = content;\n  this._batchId = batchId;\n  this._color = undefined; // for calling getColor\n}\n\nObject.defineProperties(Cesium3DTileFeature.prototype, {\n  /**\n   * Gets or sets if the feature will be shown. This is set for all features\n   * when a style's show is evaluated.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._content.batchTable.getShow(this._batchId);\n    },\n    set: function (value) {\n      this._content.batchTable.setShow(this._batchId, value);\n    },\n  },\n\n  /**\n   * Gets or sets the highlight color multiplied with the feature's color.  When\n   * this is white, the feature's color is not changed. This is set for all features\n   * when a style's color is evaluated.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Color}\n   *\n   * @default {@link Color.WHITE}\n   */\n  color: {\n    get: function () {\n      if (!defined(this._color)) {\n        this._color = new Color();\n      }\n      return this._content.batchTable.getColor(this._batchId, this._color);\n    },\n    set: function (value) {\n      this._content.batchTable.setColor(this._batchId, value);\n    },\n  },\n\n  /**\n   * Gets a typed array containing the ECEF positions of the polyline.\n   * Returns undefined if {@link Cesium3DTileset#vectorKeepDecodedPositions} is false\n   * or the feature is not a polyline in a vector tile.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @type {Float64Array}\n   */\n  polylinePositions: {\n    get: function () {\n      if (!defined(this._content.getPolylinePositions)) {\n        return undefined;\n      }\n\n      return this._content.getPolylinePositions(this._batchId);\n    },\n  },\n\n  /**\n   * Gets the content of the tile containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileContent}\n   *\n   * @readonly\n   * @private\n   */\n  content: {\n    get: function () {\n      return this._content;\n    },\n  },\n\n  /**\n   * Gets the tileset containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  tileset: {\n    get: function () {\n      return this._content.tileset;\n    },\n  },\n\n  /**\n   * All objects returned by {@link Scene#pick} have a <code>primitive</code> property. This returns\n   * the tileset containing the feature.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  primitive: {\n    get: function () {\n      return this._content.tileset;\n    },\n  },\n\n  /**\n   * Get the feature ID associated with this feature. For 3D Tiles 1.0, the\n   * batch ID is returned. For EXT_mesh_features, this is the feature ID from\n   * the selected feature ID set.\n   *\n   * @memberof Cesium3DTileFeature.prototype\n   *\n   * @type {number}\n   *\n   * @readonly\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   */\n  featureId: {\n    get: function () {\n      return this._batchId;\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._content.batchTable.getPickColor(this._batchId);\n    },\n  },\n});\n\n/**\n * Returns whether the feature contains this property. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string} name The case-sensitive name of the property.\n * @returns {boolean} Whether the feature contains this property.\n */\nCesium3DTileFeature.prototype.hasProperty = function (name) {\n  return this._content.batchTable.hasProperty(this._batchId, name);\n};\n\n/**\n * Returns an array of property IDs for the feature. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The IDs of the feature's properties.\n */\nCesium3DTileFeature.prototype.getPropertyIds = function (results) {\n  return this._content.batchTable.getPropertyIds(this._batchId, results);\n};\n\n/**\n * Returns a copy of the value of the feature's property with the given name. This includes properties from this feature's\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {string} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n *\n * @example\n * // Display all the properties for a feature in the console log.\n * const propertyIds = feature.getPropertyIds();\n * const length = propertyIds.length;\n * for (let i = 0; i < length; ++i) {\n *     const propertyId = propertyIds[i];\n *     console.log(`{propertyId}: ${feature.getProperty(propertyId)}`);\n * }\n */\nCesium3DTileFeature.prototype.getProperty = function (name) {\n  return this._content.batchTable.getProperty(this._batchId, name);\n};\n\n/**\n * Returns a copy of the feature's property with the given name, examining all\n * the metadata from 3D Tiles 1.0 formats, the EXT_structural_metadata and legacy\n * EXT_feature_metadata glTF extensions, and the metadata present either in the\n * tileset JSON (3D Tiles 1.1) or in the 3DTILES_metadata 3D Tiles extension.\n * Metadata is checked against name from most specific to most general and the\n * first match is returned. Metadata is checked in this order:\n *\n * <ol>\n *   <li>Batch table (structural metadata) property by semantic</li>\n *   <li>Batch table (structural metadata) property by property ID</li>\n *   <li>Content metadata property by semantic</li>\n *   <li>Content metadata property by property</li>\n *   <li>Tile metadata property by semantic</li>\n *   <li>Tile metadata property by property ID</li>\n *   <li>Subtree metadata property by semantic</li>\n *   <li>Subtree metadata property by property ID</li>\n *   <li>Group metadata property by semantic</li>\n *   <li>Group metadata property by property ID</li>\n *   <li>Tileset metadata property by semantic</li>\n *   <li>Tileset metadata property by property ID</li>\n *   <li>Otherwise, return undefined</li>\n * </ol>\n * <p>\n * For 3D Tiles Next details, see the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension}\n * for 3D Tiles, as well as the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension}\n * for glTF. For the legacy glTF extension, see {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata|EXT_feature_metadata Extension}\n * </p>\n *\n * @param {Cesium3DTileContent} content The content for accessing the metadata\n * @param {number} batchId The batch ID (or feature ID) of the feature to get a property for\n * @param {string} name The semantic or property ID of the feature. Semantics are checked before property IDs in each granularity of metadata.\n * @return {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n *\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nCesium3DTileFeature.getPropertyInherited = function (content, batchId, name) {\n  const batchTable = content.batchTable;\n  if (defined(batchTable)) {\n    if (batchTable.hasPropertyBySemantic(batchId, name)) {\n      return batchTable.getPropertyBySemantic(batchId, name);\n    }\n\n    if (batchTable.hasProperty(batchId, name)) {\n      return batchTable.getProperty(batchId, name);\n    }\n  }\n\n  const contentMetadata = content.metadata;\n  if (defined(contentMetadata)) {\n    if (contentMetadata.hasPropertyBySemantic(name)) {\n      return contentMetadata.getPropertyBySemantic(name);\n    }\n\n    if (contentMetadata.hasProperty(name)) {\n      return contentMetadata.getProperty(name);\n    }\n  }\n\n  const tile = content.tile;\n  const tileMetadata = tile.metadata;\n  if (defined(tileMetadata)) {\n    if (tileMetadata.hasPropertyBySemantic(name)) {\n      return tileMetadata.getPropertyBySemantic(name);\n    }\n\n    if (tileMetadata.hasProperty(name)) {\n      return tileMetadata.getProperty(name);\n    }\n  }\n\n  let subtreeMetadata;\n  if (defined(tile.implicitSubtree)) {\n    subtreeMetadata = tile.implicitSubtree.metadata;\n  }\n\n  if (defined(subtreeMetadata)) {\n    if (subtreeMetadata.hasPropertyBySemantic(name)) {\n      return subtreeMetadata.getPropertyBySemantic(name);\n    }\n\n    if (subtreeMetadata.hasProperty(name)) {\n      return subtreeMetadata.getProperty(name);\n    }\n  }\n\n  const groupMetadata = defined(content.group)\n    ? content.group.metadata\n    : undefined;\n  if (defined(groupMetadata)) {\n    if (groupMetadata.hasPropertyBySemantic(name)) {\n      return groupMetadata.getPropertyBySemantic(name);\n    }\n\n    if (groupMetadata.hasProperty(name)) {\n      return groupMetadata.getProperty(name);\n    }\n  }\n\n  const tilesetMetadata = content.tileset.metadata;\n  if (defined(tilesetMetadata)) {\n    if (tilesetMetadata.hasPropertyBySemantic(name)) {\n      return tilesetMetadata.getPropertyBySemantic(name);\n    }\n\n    if (tilesetMetadata.hasProperty(name)) {\n      return tilesetMetadata.getProperty(name);\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * Returns a copy of the value of the feature's property with the given name.\n * If the feature is contained within a tileset that has metadata (3D Tiles 1.1)\n * or uses the <code>3DTILES_metadata</code> extension, tileset, group and tile\n * metadata is inherited.\n * <p>\n * To resolve name conflicts, this method resolves names from most specific to\n * least specific by metadata granularity in the order: feature, tile, group,\n * tileset. Within each granularity, semantics are resolved first, then other\n * properties.\n * </p>\n * @param {string} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n * @private\n */\nCesium3DTileFeature.prototype.getPropertyInherited = function (name) {\n  return Cesium3DTileFeature.getPropertyInherited(\n    this._content,\n    this._batchId,\n    name,\n  );\n};\n\n/**\n * Sets the value of the feature's property with the given name.\n * <p>\n * If a property with the given name doesn't exist, it is created.\n * </p>\n *\n * @param {string} name The case-sensitive name of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} Inherited batch table hierarchy property is read only.\n *\n * @example\n * const height = feature.getProperty('Height'); // e.g., the height of a building\n *\n * @example\n * const name = 'clicked';\n * if (feature.getProperty(name)) {\n *     console.log('already clicked');\n * } else {\n *     feature.setProperty(name, true);\n *     console.log('first click');\n * }\n */\nCesium3DTileFeature.prototype.setProperty = function (name, value) {\n  this._content.batchTable.setProperty(this._batchId, name, value);\n\n  // PERFORMANCE_IDEA: Probably overkill, but maybe only mark the tile dirty if the\n  // property is in one of the style's expressions or - if it can be done quickly -\n  // if the new property value changed the result of an expression.\n  this._content.featurePropertiesDirty = true;\n};\n\n/**\n * Returns whether the feature's class name equals <code>className</code>. Unlike {@link Cesium3DTileFeature#isClass}\n * this function only checks the feature's exact class and not inherited classes.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {string} className The name to check against.\n * @returns {boolean} Whether the feature's class name equals <code>className</code>\n *\n * @private\n */\nCesium3DTileFeature.prototype.isExactClass = function (className) {\n  return this._content.batchTable.isExactClass(this._batchId, className);\n};\n\n/**\n * Returns whether the feature's class or any inherited classes are named <code>className</code>.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {string} className The name to check against.\n * @returns {boolean} Whether the feature's class or inherited classes are named <code>className</code>\n *\n * @private\n */\nCesium3DTileFeature.prototype.isClass = function (className) {\n  return this._content.batchTable.isClass(this._batchId, className);\n};\n\n/**\n * Returns the feature's class name.\n * <p>\n * This function returns <code>undefined</code> if no batch table hierarchy is present.\n * </p>\n *\n * @returns {string} The feature's class name.\n *\n * @private\n */\nCesium3DTileFeature.prototype.getExactClassName = function () {\n  return this._content.batchTable.getExactClassName(this._batchId);\n};\nexport default Cesium3DTileFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}