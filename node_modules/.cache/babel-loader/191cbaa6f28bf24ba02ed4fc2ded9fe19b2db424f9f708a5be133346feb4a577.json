{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport hasExtension from \"./hasExtension.js\";\nimport { MeshoptDecoder } from \"meshoptimizer\";\nimport ResourceLoader from \"./ResourceLoader.js\";\nimport ResourceLoaderState from \"./ResourceLoaderState.js\";\n\n/**\n * Loads a glTF buffer view.\n * <p>\n * Implements the {@link ResourceLoader} interface.\n * </p>\n *\n * @alias GltfBufferViewLoader\n * @constructor\n * @augments ResourceLoader\n *\n * @param {object} options Object with the following properties:\n * @param {ResourceCache} options.resourceCache The {@link ResourceCache} (to avoid circular dependencies).\n * @param {object} options.gltf The glTF JSON.\n * @param {number} options.bufferViewId The buffer view ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {string} [options.cacheKey] The cache key of the resource.\n *\n * @private\n */\nfunction GltfBufferViewLoader(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const resourceCache = options.resourceCache;\n  const gltf = options.gltf;\n  const bufferViewId = options.bufferViewId;\n  const gltfResource = options.gltfResource;\n  const baseResource = options.baseResource;\n  const cacheKey = options.cacheKey;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"options.resourceCache\", resourceCache);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.number(\"options.bufferViewId\", bufferViewId);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  const bufferView = gltf.bufferViews[bufferViewId];\n  let bufferId = bufferView.buffer;\n  let byteOffset = bufferView.byteOffset;\n  let byteLength = bufferView.byteLength;\n  let hasMeshopt = false;\n  let meshoptByteStride;\n  let meshoptCount;\n  let meshoptMode;\n  let meshoptFilter;\n  if (hasExtension(bufferView, \"EXT_meshopt_compression\")) {\n    const meshopt = bufferView.extensions.EXT_meshopt_compression;\n    bufferId = meshopt.buffer;\n    byteOffset = defaultValue(meshopt.byteOffset, 0);\n    byteLength = meshopt.byteLength;\n    hasMeshopt = true;\n    meshoptByteStride = meshopt.byteStride;\n    meshoptCount = meshopt.count;\n    meshoptMode = meshopt.mode;\n    meshoptFilter = defaultValue(meshopt.filter, \"NONE\");\n  }\n  const buffer = gltf.buffers[bufferId];\n  this._hasMeshopt = hasMeshopt;\n  this._meshoptByteStride = meshoptByteStride;\n  this._meshoptCount = meshoptCount;\n  this._meshoptMode = meshoptMode;\n  this._meshoptFilter = meshoptFilter;\n  this._resourceCache = resourceCache;\n  this._gltfResource = gltfResource;\n  this._baseResource = baseResource;\n  this._buffer = buffer;\n  this._bufferId = bufferId;\n  this._byteOffset = byteOffset;\n  this._byteLength = byteLength;\n  this._cacheKey = cacheKey;\n  this._bufferLoader = undefined;\n  this._typedArray = undefined;\n  this._state = ResourceLoaderState.UNLOADED;\n  this._promise = undefined;\n}\nif (defined(Object.create)) {\n  GltfBufferViewLoader.prototype = Object.create(ResourceLoader.prototype);\n  GltfBufferViewLoader.prototype.constructor = GltfBufferViewLoader;\n}\nObject.defineProperties(GltfBufferViewLoader.prototype, {\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof GltfBufferViewLoader.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    }\n  },\n  /**\n   * The typed array containing buffer view data.\n   *\n   * @memberof GltfBufferViewLoader.prototype\n   *\n   * @type {Uint8Array}\n   * @readonly\n   * @private\n   */\n  typedArray: {\n    get: function () {\n      return this._typedArray;\n    }\n  }\n});\nasync function loadResources(loader) {\n  try {\n    const bufferLoader = getBufferLoader(loader);\n    loader._bufferLoader = bufferLoader;\n    await bufferLoader.load();\n    if (loader.isDestroyed()) {\n      return;\n    }\n    const bufferTypedArray = bufferLoader.typedArray;\n    const bufferViewTypedArray = new Uint8Array(bufferTypedArray.buffer, bufferTypedArray.byteOffset + loader._byteOffset, loader._byteLength);\n\n    // Unload the buffer\n    loader.unload();\n    loader._typedArray = bufferViewTypedArray;\n    if (loader._hasMeshopt) {\n      const count = loader._meshoptCount;\n      const byteStride = loader._meshoptByteStride;\n      const result = new Uint8Array(count * byteStride);\n      MeshoptDecoder.decodeGltfBuffer(result, count, byteStride, loader._typedArray, loader._meshoptMode, loader._meshoptFilter);\n      loader._typedArray = result;\n    }\n    loader._state = ResourceLoaderState.READY;\n    return loader;\n  } catch (error) {\n    if (loader.isDestroyed()) {\n      return;\n    }\n    loader.unload();\n    loader._state = ResourceLoaderState.FAILED;\n    const errorMessage = \"Failed to load buffer view\";\n    throw loader.getError(errorMessage, error);\n  }\n}\n\n/**\n * Loads the resource.\n * @returns {Promise<GltfBufferViewLoader>} A promise which resolves to the loader when the resource loading is completed.\n * @private\n */\nGltfBufferViewLoader.prototype.load = async function () {\n  if (defined(this._promise)) {\n    return this._promise;\n  }\n  this._state = ResourceLoaderState.LOADING;\n  this._promise = loadResources(this);\n  return this._promise;\n};\nfunction getBufferLoader(bufferViewLoader) {\n  const resourceCache = bufferViewLoader._resourceCache;\n  const buffer = bufferViewLoader._buffer;\n  if (defined(buffer.uri)) {\n    const baseResource = bufferViewLoader._baseResource;\n    const resource = baseResource.getDerivedResource({\n      url: buffer.uri\n    });\n    return resourceCache.getExternalBufferLoader({\n      resource: resource\n    });\n  }\n  return resourceCache.getEmbeddedBufferLoader({\n    parentResource: bufferViewLoader._gltfResource,\n    bufferId: bufferViewLoader._bufferId\n  });\n}\n\n/**\n * Unloads the resource.\n * @private\n */\nGltfBufferViewLoader.prototype.unload = function () {\n  if (defined(this._bufferLoader) && !this._bufferLoader.isDestroyed()) {\n    this._resourceCache.unload(this._bufferLoader);\n  }\n  this._bufferLoader = undefined;\n  this._typedArray = undefined;\n};\nexport default GltfBufferViewLoader;","map":{"version":3,"names":["Check","defaultValue","defined","hasExtension","MeshoptDecoder","ResourceLoader","ResourceLoaderState","GltfBufferViewLoader","options","EMPTY_OBJECT","resourceCache","gltf","bufferViewId","gltfResource","baseResource","cacheKey","typeOf","func","object","number","bufferView","bufferViews","bufferId","buffer","byteOffset","byteLength","hasMeshopt","meshoptByteStride","meshoptCount","meshoptMode","meshoptFilter","meshopt","extensions","EXT_meshopt_compression","byteStride","count","mode","filter","buffers","_hasMeshopt","_meshoptByteStride","_meshoptCount","_meshoptMode","_meshoptFilter","_resourceCache","_gltfResource","_baseResource","_buffer","_bufferId","_byteOffset","_byteLength","_cacheKey","_bufferLoader","undefined","_typedArray","_state","UNLOADED","_promise","Object","create","prototype","constructor","defineProperties","get","typedArray","loadResources","loader","bufferLoader","getBufferLoader","load","isDestroyed","bufferTypedArray","bufferViewTypedArray","Uint8Array","unload","result","decodeGltfBuffer","READY","error","FAILED","errorMessage","getError","LOADING","bufferViewLoader","uri","resource","getDerivedResource","url","getExternalBufferLoader","getEmbeddedBufferLoader","parentResource"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GltfBufferViewLoader.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport hasExtension from \"./hasExtension.js\";\nimport { MeshoptDecoder } from \"meshoptimizer\";\nimport ResourceLoader from \"./ResourceLoader.js\";\nimport ResourceLoaderState from \"./ResourceLoaderState.js\";\n\n/**\n * Loads a glTF buffer view.\n * <p>\n * Implements the {@link ResourceLoader} interface.\n * </p>\n *\n * @alias GltfBufferViewLoader\n * @constructor\n * @augments ResourceLoader\n *\n * @param {object} options Object with the following properties:\n * @param {ResourceCache} options.resourceCache The {@link ResourceCache} (to avoid circular dependencies).\n * @param {object} options.gltf The glTF JSON.\n * @param {number} options.bufferViewId The buffer view ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {string} [options.cacheKey] The cache key of the resource.\n *\n * @private\n */\nfunction GltfBufferViewLoader(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const resourceCache = options.resourceCache;\n  const gltf = options.gltf;\n  const bufferViewId = options.bufferViewId;\n  const gltfResource = options.gltfResource;\n  const baseResource = options.baseResource;\n  const cacheKey = options.cacheKey;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.func(\"options.resourceCache\", resourceCache);\n  Check.typeOf.object(\"options.gltf\", gltf);\n  Check.typeOf.number(\"options.bufferViewId\", bufferViewId);\n  Check.typeOf.object(\"options.gltfResource\", gltfResource);\n  Check.typeOf.object(\"options.baseResource\", baseResource);\n  //>>includeEnd('debug');\n\n  const bufferView = gltf.bufferViews[bufferViewId];\n  let bufferId = bufferView.buffer;\n  let byteOffset = bufferView.byteOffset;\n  let byteLength = bufferView.byteLength;\n\n  let hasMeshopt = false;\n  let meshoptByteStride;\n  let meshoptCount;\n  let meshoptMode;\n  let meshoptFilter;\n\n  if (hasExtension(bufferView, \"EXT_meshopt_compression\")) {\n    const meshopt = bufferView.extensions.EXT_meshopt_compression;\n    bufferId = meshopt.buffer;\n    byteOffset = defaultValue(meshopt.byteOffset, 0);\n    byteLength = meshopt.byteLength;\n\n    hasMeshopt = true;\n    meshoptByteStride = meshopt.byteStride;\n    meshoptCount = meshopt.count;\n    meshoptMode = meshopt.mode;\n    meshoptFilter = defaultValue(meshopt.filter, \"NONE\");\n  }\n\n  const buffer = gltf.buffers[bufferId];\n\n  this._hasMeshopt = hasMeshopt;\n  this._meshoptByteStride = meshoptByteStride;\n  this._meshoptCount = meshoptCount;\n  this._meshoptMode = meshoptMode;\n  this._meshoptFilter = meshoptFilter;\n\n  this._resourceCache = resourceCache;\n  this._gltfResource = gltfResource;\n  this._baseResource = baseResource;\n  this._buffer = buffer;\n  this._bufferId = bufferId;\n  this._byteOffset = byteOffset;\n  this._byteLength = byteLength;\n  this._cacheKey = cacheKey;\n  this._bufferLoader = undefined;\n  this._typedArray = undefined;\n  this._state = ResourceLoaderState.UNLOADED;\n  this._promise = undefined;\n}\n\nif (defined(Object.create)) {\n  GltfBufferViewLoader.prototype = Object.create(ResourceLoader.prototype);\n  GltfBufferViewLoader.prototype.constructor = GltfBufferViewLoader;\n}\n\nObject.defineProperties(GltfBufferViewLoader.prototype, {\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof GltfBufferViewLoader.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    },\n  },\n  /**\n   * The typed array containing buffer view data.\n   *\n   * @memberof GltfBufferViewLoader.prototype\n   *\n   * @type {Uint8Array}\n   * @readonly\n   * @private\n   */\n  typedArray: {\n    get: function () {\n      return this._typedArray;\n    },\n  },\n});\n\nasync function loadResources(loader) {\n  try {\n    const bufferLoader = getBufferLoader(loader);\n    loader._bufferLoader = bufferLoader;\n    await bufferLoader.load();\n\n    if (loader.isDestroyed()) {\n      return;\n    }\n\n    const bufferTypedArray = bufferLoader.typedArray;\n    const bufferViewTypedArray = new Uint8Array(\n      bufferTypedArray.buffer,\n      bufferTypedArray.byteOffset + loader._byteOffset,\n      loader._byteLength,\n    );\n\n    // Unload the buffer\n    loader.unload();\n\n    loader._typedArray = bufferViewTypedArray;\n    if (loader._hasMeshopt) {\n      const count = loader._meshoptCount;\n      const byteStride = loader._meshoptByteStride;\n      const result = new Uint8Array(count * byteStride);\n      MeshoptDecoder.decodeGltfBuffer(\n        result,\n        count,\n        byteStride,\n        loader._typedArray,\n        loader._meshoptMode,\n        loader._meshoptFilter,\n      );\n      loader._typedArray = result;\n    }\n\n    loader._state = ResourceLoaderState.READY;\n    return loader;\n  } catch (error) {\n    if (loader.isDestroyed()) {\n      return;\n    }\n\n    loader.unload();\n    loader._state = ResourceLoaderState.FAILED;\n    const errorMessage = \"Failed to load buffer view\";\n    throw loader.getError(errorMessage, error);\n  }\n}\n\n/**\n * Loads the resource.\n * @returns {Promise<GltfBufferViewLoader>} A promise which resolves to the loader when the resource loading is completed.\n * @private\n */\nGltfBufferViewLoader.prototype.load = async function () {\n  if (defined(this._promise)) {\n    return this._promise;\n  }\n\n  this._state = ResourceLoaderState.LOADING;\n  this._promise = loadResources(this);\n  return this._promise;\n};\n\nfunction getBufferLoader(bufferViewLoader) {\n  const resourceCache = bufferViewLoader._resourceCache;\n  const buffer = bufferViewLoader._buffer;\n  if (defined(buffer.uri)) {\n    const baseResource = bufferViewLoader._baseResource;\n    const resource = baseResource.getDerivedResource({\n      url: buffer.uri,\n    });\n    return resourceCache.getExternalBufferLoader({\n      resource: resource,\n    });\n  }\n  return resourceCache.getEmbeddedBufferLoader({\n    parentResource: bufferViewLoader._gltfResource,\n    bufferId: bufferViewLoader._bufferId,\n  });\n}\n\n/**\n * Unloads the resource.\n * @private\n */\nGltfBufferViewLoader.prototype.unload = function () {\n  if (defined(this._bufferLoader) && !this._bufferLoader.isDestroyed()) {\n    this._resourceCache.unload(this._bufferLoader);\n  }\n\n  this._bufferLoader = undefined;\n  this._typedArray = undefined;\n};\n\nexport default GltfBufferViewLoader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}