{"ast":null,"code":"import CubicRealPolynomial from \"./CubicRealPolynomial.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\n\n/**\n * Defines functions for 4th order polynomial functions of one variable with only real coefficients.\n *\n * @namespace QuarticRealPolynomial\n */\nconst QuarticRealPolynomial = {};\n\n/**\n * Provides the discriminant of the quartic equation from the supplied coefficients.\n *\n * @param {number} a The coefficient of the 4th order monomial.\n * @param {number} b The coefficient of the 3rd order monomial.\n * @param {number} c The coefficient of the 2nd order monomial.\n * @param {number} d The coefficient of the 1st order monomial.\n * @param {number} e The coefficient of the 0th order monomial.\n * @returns {number} The value of the discriminant.\n */\nQuarticRealPolynomial.computeDiscriminant = function (a, b, c, d, e) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  if (typeof e !== \"number\") {\n    throw new DeveloperError(\"e is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  const a2 = a * a;\n  const a3 = a2 * a;\n  const b2 = b * b;\n  const b3 = b2 * b;\n  const c2 = c * c;\n  const c3 = c2 * c;\n  const d2 = d * d;\n  const d3 = d2 * d;\n  const e2 = e * e;\n  const e3 = e2 * e;\n  const discriminant = b2 * c2 * d2 - 4.0 * b3 * d3 - 4.0 * a * c3 * d2 + 18 * a * b * c * d3 - 27.0 * a2 * d2 * d2 + 256.0 * a3 * e3 + e * (18.0 * b3 * c * d - 4.0 * b2 * c3 + 16.0 * a * c2 * c2 - 80.0 * a * b * c2 * d - 6.0 * a * b2 * d2 + 144.0 * a2 * c * d2) + e2 * (144.0 * a * b2 * c - 27.0 * b2 * b2 - 128.0 * a2 * c2 - 192.0 * a2 * b * d);\n  return discriminant;\n};\nfunction original(a3, a2, a1, a0) {\n  const a3Squared = a3 * a3;\n  const p = a2 - 3.0 * a3Squared / 8.0;\n  const q = a1 - a2 * a3 / 2.0 + a3Squared * a3 / 8.0;\n  const r = a0 - a1 * a3 / 4.0 + a2 * a3Squared / 16.0 - 3.0 * a3Squared * a3Squared / 256.0;\n\n  // Find the roots of the cubic equations:  h^6 + 2 p h^4 + (p^2 - 4 r) h^2 - q^2 = 0.\n  const cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, 2.0 * p, p * p - 4.0 * r, -q * q);\n  if (cubicRoots.length > 0) {\n    const temp = -a3 / 4.0;\n\n    // Use the largest positive root.\n    const hSquared = cubicRoots[cubicRoots.length - 1];\n    if (Math.abs(hSquared) < CesiumMath.EPSILON14) {\n      // y^4 + p y^2 + r = 0.\n      const roots = QuadraticRealPolynomial.computeRealRoots(1.0, p, r);\n      if (roots.length === 2) {\n        const root0 = roots[0];\n        const root1 = roots[1];\n        let y;\n        if (root0 >= 0.0 && root1 >= 0.0) {\n          const y0 = Math.sqrt(root0);\n          const y1 = Math.sqrt(root1);\n          return [temp - y1, temp - y0, temp + y0, temp + y1];\n        } else if (root0 >= 0.0 && root1 < 0.0) {\n          y = Math.sqrt(root0);\n          return [temp - y, temp + y];\n        } else if (root0 < 0.0 && root1 >= 0.0) {\n          y = Math.sqrt(root1);\n          return [temp - y, temp + y];\n        }\n      }\n      return [];\n    } else if (hSquared > 0.0) {\n      const h = Math.sqrt(hSquared);\n      const m = (p + hSquared - q / h) / 2.0;\n      const n = (p + hSquared + q / h) / 2.0;\n\n      // Now solve the two quadratic factors:  (y^2 + h y + m)(y^2 - h y + n);\n      const roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, h, m);\n      const roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, -h, n);\n      if (roots1.length !== 0) {\n        roots1[0] += temp;\n        roots1[1] += temp;\n        if (roots2.length !== 0) {\n          roots2[0] += temp;\n          roots2[1] += temp;\n          if (roots1[1] <= roots2[0]) {\n            return [roots1[0], roots1[1], roots2[0], roots2[1]];\n          } else if (roots2[1] <= roots1[0]) {\n            return [roots2[0], roots2[1], roots1[0], roots1[1]];\n          } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n            return [roots2[0], roots1[0], roots1[1], roots2[1]];\n          } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n            return [roots1[0], roots2[0], roots2[1], roots1[1]];\n          } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n            return [roots2[0], roots1[0], roots2[1], roots1[1]];\n          }\n          return [roots1[0], roots2[0], roots1[1], roots2[1]];\n        }\n        return roots1;\n      }\n      if (roots2.length !== 0) {\n        roots2[0] += temp;\n        roots2[1] += temp;\n        return roots2;\n      }\n      return [];\n    }\n  }\n  return [];\n}\nfunction neumark(a3, a2, a1, a0) {\n  const a1Squared = a1 * a1;\n  const a2Squared = a2 * a2;\n  const a3Squared = a3 * a3;\n  const p = -2.0 * a2;\n  const q = a1 * a3 + a2Squared - 4.0 * a0;\n  const r = a3Squared * a0 - a1 * a2 * a3 + a1Squared;\n  const cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, p, q, r);\n  if (cubicRoots.length > 0) {\n    // Use the most positive root\n    const y = cubicRoots[0];\n    const temp = a2 - y;\n    const tempSquared = temp * temp;\n    const g1 = a3 / 2.0;\n    const h1 = temp / 2.0;\n    const m = tempSquared - 4.0 * a0;\n    const mError = tempSquared + 4.0 * Math.abs(a0);\n    const n = a3Squared - 4.0 * y;\n    const nError = a3Squared + 4.0 * Math.abs(y);\n    let g2;\n    let h2;\n    if (y < 0.0 || m * nError < n * mError) {\n      const squareRootOfN = Math.sqrt(n);\n      g2 = squareRootOfN / 2.0;\n      h2 = squareRootOfN === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfN;\n    } else {\n      const squareRootOfM = Math.sqrt(m);\n      g2 = squareRootOfM === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfM;\n      h2 = squareRootOfM / 2.0;\n    }\n    let G;\n    let g;\n    if (g1 === 0.0 && g2 === 0.0) {\n      G = 0.0;\n      g = 0.0;\n    } else if (CesiumMath.sign(g1) === CesiumMath.sign(g2)) {\n      G = g1 + g2;\n      g = y / G;\n    } else {\n      g = g1 - g2;\n      G = y / g;\n    }\n    let H;\n    let h;\n    if (h1 === 0.0 && h2 === 0.0) {\n      H = 0.0;\n      h = 0.0;\n    } else if (CesiumMath.sign(h1) === CesiumMath.sign(h2)) {\n      H = h1 + h2;\n      h = a0 / H;\n    } else {\n      h = h1 - h2;\n      H = a0 / h;\n    }\n\n    // Now solve the two quadratic factors:  (y^2 + G y + H)(y^2 + g y + h);\n    const roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, G, H);\n    const roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, g, h);\n    if (roots1.length !== 0) {\n      if (roots2.length !== 0) {\n        if (roots1[1] <= roots2[0]) {\n          return [roots1[0], roots1[1], roots2[0], roots2[1]];\n        } else if (roots2[1] <= roots1[0]) {\n          return [roots2[0], roots2[1], roots1[0], roots1[1]];\n        } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n          return [roots2[0], roots1[0], roots1[1], roots2[1]];\n        } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n          return [roots1[0], roots2[0], roots2[1], roots1[1]];\n        } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n          return [roots2[0], roots1[0], roots2[1], roots1[1]];\n        }\n        return [roots1[0], roots2[0], roots1[1], roots2[1]];\n      }\n      return roots1;\n    }\n    if (roots2.length !== 0) {\n      return roots2;\n    }\n  }\n  return [];\n}\n\n/**\n * Provides the real valued roots of the quartic polynomial with the provided coefficients.\n *\n * @param {number} a The coefficient of the 4th order monomial.\n * @param {number} b The coefficient of the 3rd order monomial.\n * @param {number} c The coefficient of the 2nd order monomial.\n * @param {number} d The coefficient of the 1st order monomial.\n * @param {number} e The coefficient of the 0th order monomial.\n * @returns {number[]} The real valued roots.\n */\nQuarticRealPolynomial.computeRealRoots = function (a, b, c, d, e) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  if (typeof e !== \"number\") {\n    throw new DeveloperError(\"e is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  if (Math.abs(a) < CesiumMath.EPSILON15) {\n    return CubicRealPolynomial.computeRealRoots(b, c, d, e);\n  }\n  const a3 = b / a;\n  const a2 = c / a;\n  const a1 = d / a;\n  const a0 = e / a;\n  let k = a3 < 0.0 ? 1 : 0;\n  k += a2 < 0.0 ? k + 1 : k;\n  k += a1 < 0.0 ? k + 1 : k;\n  k += a0 < 0.0 ? k + 1 : k;\n  switch (k) {\n    case 0:\n      return original(a3, a2, a1, a0);\n    case 1:\n      return neumark(a3, a2, a1, a0);\n    case 2:\n      return neumark(a3, a2, a1, a0);\n    case 3:\n      return original(a3, a2, a1, a0);\n    case 4:\n      return original(a3, a2, a1, a0);\n    case 5:\n      return neumark(a3, a2, a1, a0);\n    case 6:\n      return original(a3, a2, a1, a0);\n    case 7:\n      return original(a3, a2, a1, a0);\n    case 8:\n      return neumark(a3, a2, a1, a0);\n    case 9:\n      return original(a3, a2, a1, a0);\n    case 10:\n      return original(a3, a2, a1, a0);\n    case 11:\n      return neumark(a3, a2, a1, a0);\n    case 12:\n      return original(a3, a2, a1, a0);\n    case 13:\n      return original(a3, a2, a1, a0);\n    case 14:\n      return original(a3, a2, a1, a0);\n    case 15:\n      return original(a3, a2, a1, a0);\n    default:\n      return undefined;\n  }\n};\nexport default QuarticRealPolynomial;","map":{"version":3,"names":["CubicRealPolynomial","DeveloperError","CesiumMath","QuadraticRealPolynomial","QuarticRealPolynomial","computeDiscriminant","a","b","c","d","e","a2","a3","b2","b3","c2","c3","d2","d3","e2","e3","discriminant","original","a1","a0","a3Squared","p","q","r","cubicRoots","computeRealRoots","length","temp","hSquared","Math","abs","EPSILON14","roots","root0","root1","y","y0","sqrt","y1","h","m","n","roots1","roots2","neumark","a1Squared","a2Squared","tempSquared","g1","h1","mError","nError","g2","h2","squareRootOfN","squareRootOfM","G","g","sign","H","EPSILON15","k","undefined"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/QuarticRealPolynomial.js"],"sourcesContent":["import CubicRealPolynomial from \"./CubicRealPolynomial.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\n\n/**\n * Defines functions for 4th order polynomial functions of one variable with only real coefficients.\n *\n * @namespace QuarticRealPolynomial\n */\nconst QuarticRealPolynomial = {};\n\n/**\n * Provides the discriminant of the quartic equation from the supplied coefficients.\n *\n * @param {number} a The coefficient of the 4th order monomial.\n * @param {number} b The coefficient of the 3rd order monomial.\n * @param {number} c The coefficient of the 2nd order monomial.\n * @param {number} d The coefficient of the 1st order monomial.\n * @param {number} e The coefficient of the 0th order monomial.\n * @returns {number} The value of the discriminant.\n */\nQuarticRealPolynomial.computeDiscriminant = function (a, b, c, d, e) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  if (typeof e !== \"number\") {\n    throw new DeveloperError(\"e is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  const a2 = a * a;\n  const a3 = a2 * a;\n  const b2 = b * b;\n  const b3 = b2 * b;\n  const c2 = c * c;\n  const c3 = c2 * c;\n  const d2 = d * d;\n  const d3 = d2 * d;\n  const e2 = e * e;\n  const e3 = e2 * e;\n\n  const discriminant =\n    b2 * c2 * d2 -\n    4.0 * b3 * d3 -\n    4.0 * a * c3 * d2 +\n    18 * a * b * c * d3 -\n    27.0 * a2 * d2 * d2 +\n    256.0 * a3 * e3 +\n    e *\n      (18.0 * b3 * c * d -\n        4.0 * b2 * c3 +\n        16.0 * a * c2 * c2 -\n        80.0 * a * b * c2 * d -\n        6.0 * a * b2 * d2 +\n        144.0 * a2 * c * d2) +\n    e2 *\n      (144.0 * a * b2 * c -\n        27.0 * b2 * b2 -\n        128.0 * a2 * c2 -\n        192.0 * a2 * b * d);\n  return discriminant;\n};\n\nfunction original(a3, a2, a1, a0) {\n  const a3Squared = a3 * a3;\n\n  const p = a2 - (3.0 * a3Squared) / 8.0;\n  const q = a1 - (a2 * a3) / 2.0 + (a3Squared * a3) / 8.0;\n  const r =\n    a0 -\n    (a1 * a3) / 4.0 +\n    (a2 * a3Squared) / 16.0 -\n    (3.0 * a3Squared * a3Squared) / 256.0;\n\n  // Find the roots of the cubic equations:  h^6 + 2 p h^4 + (p^2 - 4 r) h^2 - q^2 = 0.\n  const cubicRoots = CubicRealPolynomial.computeRealRoots(\n    1.0,\n    2.0 * p,\n    p * p - 4.0 * r,\n    -q * q,\n  );\n\n  if (cubicRoots.length > 0) {\n    const temp = -a3 / 4.0;\n\n    // Use the largest positive root.\n    const hSquared = cubicRoots[cubicRoots.length - 1];\n\n    if (Math.abs(hSquared) < CesiumMath.EPSILON14) {\n      // y^4 + p y^2 + r = 0.\n      const roots = QuadraticRealPolynomial.computeRealRoots(1.0, p, r);\n\n      if (roots.length === 2) {\n        const root0 = roots[0];\n        const root1 = roots[1];\n\n        let y;\n        if (root0 >= 0.0 && root1 >= 0.0) {\n          const y0 = Math.sqrt(root0);\n          const y1 = Math.sqrt(root1);\n\n          return [temp - y1, temp - y0, temp + y0, temp + y1];\n        } else if (root0 >= 0.0 && root1 < 0.0) {\n          y = Math.sqrt(root0);\n          return [temp - y, temp + y];\n        } else if (root0 < 0.0 && root1 >= 0.0) {\n          y = Math.sqrt(root1);\n          return [temp - y, temp + y];\n        }\n      }\n      return [];\n    } else if (hSquared > 0.0) {\n      const h = Math.sqrt(hSquared);\n\n      const m = (p + hSquared - q / h) / 2.0;\n      const n = (p + hSquared + q / h) / 2.0;\n\n      // Now solve the two quadratic factors:  (y^2 + h y + m)(y^2 - h y + n);\n      const roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, h, m);\n      const roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, -h, n);\n\n      if (roots1.length !== 0) {\n        roots1[0] += temp;\n        roots1[1] += temp;\n\n        if (roots2.length !== 0) {\n          roots2[0] += temp;\n          roots2[1] += temp;\n\n          if (roots1[1] <= roots2[0]) {\n            return [roots1[0], roots1[1], roots2[0], roots2[1]];\n          } else if (roots2[1] <= roots1[0]) {\n            return [roots2[0], roots2[1], roots1[0], roots1[1]];\n          } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n            return [roots2[0], roots1[0], roots1[1], roots2[1]];\n          } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n            return [roots1[0], roots2[0], roots2[1], roots1[1]];\n          } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n            return [roots2[0], roots1[0], roots2[1], roots1[1]];\n          }\n          return [roots1[0], roots2[0], roots1[1], roots2[1]];\n        }\n        return roots1;\n      }\n\n      if (roots2.length !== 0) {\n        roots2[0] += temp;\n        roots2[1] += temp;\n\n        return roots2;\n      }\n      return [];\n    }\n  }\n  return [];\n}\n\nfunction neumark(a3, a2, a1, a0) {\n  const a1Squared = a1 * a1;\n  const a2Squared = a2 * a2;\n  const a3Squared = a3 * a3;\n\n  const p = -2.0 * a2;\n  const q = a1 * a3 + a2Squared - 4.0 * a0;\n  const r = a3Squared * a0 - a1 * a2 * a3 + a1Squared;\n\n  const cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, p, q, r);\n\n  if (cubicRoots.length > 0) {\n    // Use the most positive root\n    const y = cubicRoots[0];\n\n    const temp = a2 - y;\n    const tempSquared = temp * temp;\n\n    const g1 = a3 / 2.0;\n    const h1 = temp / 2.0;\n\n    const m = tempSquared - 4.0 * a0;\n    const mError = tempSquared + 4.0 * Math.abs(a0);\n\n    const n = a3Squared - 4.0 * y;\n    const nError = a3Squared + 4.0 * Math.abs(y);\n\n    let g2;\n    let h2;\n\n    if (y < 0.0 || m * nError < n * mError) {\n      const squareRootOfN = Math.sqrt(n);\n      g2 = squareRootOfN / 2.0;\n      h2 = squareRootOfN === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfN;\n    } else {\n      const squareRootOfM = Math.sqrt(m);\n      g2 = squareRootOfM === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfM;\n      h2 = squareRootOfM / 2.0;\n    }\n\n    let G;\n    let g;\n    if (g1 === 0.0 && g2 === 0.0) {\n      G = 0.0;\n      g = 0.0;\n    } else if (CesiumMath.sign(g1) === CesiumMath.sign(g2)) {\n      G = g1 + g2;\n      g = y / G;\n    } else {\n      g = g1 - g2;\n      G = y / g;\n    }\n\n    let H;\n    let h;\n    if (h1 === 0.0 && h2 === 0.0) {\n      H = 0.0;\n      h = 0.0;\n    } else if (CesiumMath.sign(h1) === CesiumMath.sign(h2)) {\n      H = h1 + h2;\n      h = a0 / H;\n    } else {\n      h = h1 - h2;\n      H = a0 / h;\n    }\n\n    // Now solve the two quadratic factors:  (y^2 + G y + H)(y^2 + g y + h);\n    const roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, G, H);\n    const roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, g, h);\n\n    if (roots1.length !== 0) {\n      if (roots2.length !== 0) {\n        if (roots1[1] <= roots2[0]) {\n          return [roots1[0], roots1[1], roots2[0], roots2[1]];\n        } else if (roots2[1] <= roots1[0]) {\n          return [roots2[0], roots2[1], roots1[0], roots1[1]];\n        } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n          return [roots2[0], roots1[0], roots1[1], roots2[1]];\n        } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n          return [roots1[0], roots2[0], roots2[1], roots1[1]];\n        } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n          return [roots2[0], roots1[0], roots2[1], roots1[1]];\n        }\n        return [roots1[0], roots2[0], roots1[1], roots2[1]];\n      }\n      return roots1;\n    }\n    if (roots2.length !== 0) {\n      return roots2;\n    }\n  }\n  return [];\n}\n\n/**\n * Provides the real valued roots of the quartic polynomial with the provided coefficients.\n *\n * @param {number} a The coefficient of the 4th order monomial.\n * @param {number} b The coefficient of the 3rd order monomial.\n * @param {number} c The coefficient of the 2nd order monomial.\n * @param {number} d The coefficient of the 1st order monomial.\n * @param {number} e The coefficient of the 0th order monomial.\n * @returns {number[]} The real valued roots.\n */\nQuarticRealPolynomial.computeRealRoots = function (a, b, c, d, e) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  if (typeof e !== \"number\") {\n    throw new DeveloperError(\"e is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  if (Math.abs(a) < CesiumMath.EPSILON15) {\n    return CubicRealPolynomial.computeRealRoots(b, c, d, e);\n  }\n  const a3 = b / a;\n  const a2 = c / a;\n  const a1 = d / a;\n  const a0 = e / a;\n\n  let k = a3 < 0.0 ? 1 : 0;\n  k += a2 < 0.0 ? k + 1 : k;\n  k += a1 < 0.0 ? k + 1 : k;\n  k += a0 < 0.0 ? k + 1 : k;\n\n  switch (k) {\n    case 0:\n      return original(a3, a2, a1, a0);\n    case 1:\n      return neumark(a3, a2, a1, a0);\n    case 2:\n      return neumark(a3, a2, a1, a0);\n    case 3:\n      return original(a3, a2, a1, a0);\n    case 4:\n      return original(a3, a2, a1, a0);\n    case 5:\n      return neumark(a3, a2, a1, a0);\n    case 6:\n      return original(a3, a2, a1, a0);\n    case 7:\n      return original(a3, a2, a1, a0);\n    case 8:\n      return neumark(a3, a2, a1, a0);\n    case 9:\n      return original(a3, a2, a1, a0);\n    case 10:\n      return original(a3, a2, a1, a0);\n    case 11:\n      return neumark(a3, a2, a1, a0);\n    case 12:\n      return original(a3, a2, a1, a0);\n    case 13:\n      return original(a3, a2, a1, a0);\n    case 14:\n      return original(a3, a2, a1, a0);\n    case 15:\n      return original(a3, a2, a1, a0);\n    default:\n      return undefined;\n  }\n};\nexport default QuarticRealPolynomial;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}