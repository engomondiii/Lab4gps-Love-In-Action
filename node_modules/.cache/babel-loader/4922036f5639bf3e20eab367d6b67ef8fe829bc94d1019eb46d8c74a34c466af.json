{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Uses the Tridiagonal Matrix Algorithm, also known as the Thomas Algorithm, to solve\n * a system of linear equations where the coefficient matrix is a tridiagonal matrix.\n *\n * @namespace TridiagonalSystemSolver\n */\nconst TridiagonalSystemSolver = {};\n\n/**\n * Solves a tridiagonal system of linear equations.\n *\n * @param {number[]} diagonal An array with length <code>n</code> that contains the diagonal of the coefficient matrix.\n * @param {number[]} lower An array with length <code>n - 1</code> that contains the lower diagonal of the coefficient matrix.\n * @param {number[]} upper An array with length <code>n - 1</code> that contains the upper diagonal of the coefficient matrix.\n * @param {Cartesian3[]} right An array of Cartesians with length <code>n</code> that is the right side of the system of equations.\n *\n * @exception {DeveloperError} diagonal and right must have the same lengths.\n * @exception {DeveloperError} lower and upper must have the same lengths.\n * @exception {DeveloperError} lower and upper must be one less than the length of diagonal.\n *\n * @performance Linear time.\n *\n * @example\n * const lowerDiagonal = [1.0, 1.0, 1.0, 1.0];\n * const diagonal = [2.0, 4.0, 4.0, 4.0, 2.0];\n * const upperDiagonal = [1.0, 1.0, 1.0, 1.0];\n * const rightHandSide = [\n *     new Cesium.Cartesian3(410757.0, -1595711.0, 1375302.0),\n *     new Cesium.Cartesian3(-5986705.0, -2190640.0, 1099600.0),\n *     new Cesium.Cartesian3(-12593180.0, 288588.0, -1755549.0),\n *     new Cesium.Cartesian3(-5349898.0, 2457005.0, -2685438.0),\n *     new Cesium.Cartesian3(845820.0, 1573488.0, -1205591.0)\n * ];\n *\n * const solution = Cesium.TridiagonalSystemSolver.solve(lowerDiagonal, diagonal, upperDiagonal, rightHandSide);\n *\n * @returns {Cartesian3[]} An array of Cartesians with length <code>n</code> that is the solution to the tridiagonal system of equations.\n */\nTridiagonalSystemSolver.solve = function (lower, diagonal, upper, right) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(lower) || !(lower instanceof Array)) {\n    throw new DeveloperError(\"The array lower is required.\");\n  }\n  if (!defined(diagonal) || !(diagonal instanceof Array)) {\n    throw new DeveloperError(\"The array diagonal is required.\");\n  }\n  if (!defined(upper) || !(upper instanceof Array)) {\n    throw new DeveloperError(\"The array upper is required.\");\n  }\n  if (!defined(right) || !(right instanceof Array)) {\n    throw new DeveloperError(\"The array right is required.\");\n  }\n  if (diagonal.length !== right.length) {\n    throw new DeveloperError(\"diagonal and right must have the same lengths.\");\n  }\n  if (lower.length !== upper.length) {\n    throw new DeveloperError(\"lower and upper must have the same lengths.\");\n  } else if (lower.length !== diagonal.length - 1) {\n    throw new DeveloperError(\"lower and upper must be one less than the length of diagonal.\");\n  }\n  //>>includeEnd('debug');\n\n  const c = new Array(upper.length);\n  const d = new Array(right.length);\n  const x = new Array(right.length);\n  let i;\n  for (i = 0; i < d.length; i++) {\n    d[i] = new Cartesian3();\n    x[i] = new Cartesian3();\n  }\n  c[0] = upper[0] / diagonal[0];\n  d[0] = Cartesian3.multiplyByScalar(right[0], 1.0 / diagonal[0], d[0]);\n  let scalar;\n  for (i = 1; i < c.length; ++i) {\n    scalar = 1.0 / (diagonal[i] - c[i - 1] * lower[i - 1]);\n    c[i] = upper[i] * scalar;\n    d[i] = Cartesian3.subtract(right[i], Cartesian3.multiplyByScalar(d[i - 1], lower[i - 1], d[i]), d[i]);\n    d[i] = Cartesian3.multiplyByScalar(d[i], scalar, d[i]);\n  }\n  scalar = 1.0 / (diagonal[i] - c[i - 1] * lower[i - 1]);\n  d[i] = Cartesian3.subtract(right[i], Cartesian3.multiplyByScalar(d[i - 1], lower[i - 1], d[i]), d[i]);\n  d[i] = Cartesian3.multiplyByScalar(d[i], scalar, d[i]);\n  x[x.length - 1] = d[d.length - 1];\n  for (i = x.length - 2; i >= 0; --i) {\n    x[i] = Cartesian3.subtract(d[i], Cartesian3.multiplyByScalar(x[i + 1], c[i], x[i]), x[i]);\n  }\n  return x;\n};\nexport default TridiagonalSystemSolver;","map":{"version":3,"names":["Cartesian3","defined","DeveloperError","TridiagonalSystemSolver","solve","lower","diagonal","upper","right","Array","length","c","d","x","i","multiplyByScalar","scalar","subtract"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/TridiagonalSystemSolver.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Uses the Tridiagonal Matrix Algorithm, also known as the Thomas Algorithm, to solve\n * a system of linear equations where the coefficient matrix is a tridiagonal matrix.\n *\n * @namespace TridiagonalSystemSolver\n */\nconst TridiagonalSystemSolver = {};\n\n/**\n * Solves a tridiagonal system of linear equations.\n *\n * @param {number[]} diagonal An array with length <code>n</code> that contains the diagonal of the coefficient matrix.\n * @param {number[]} lower An array with length <code>n - 1</code> that contains the lower diagonal of the coefficient matrix.\n * @param {number[]} upper An array with length <code>n - 1</code> that contains the upper diagonal of the coefficient matrix.\n * @param {Cartesian3[]} right An array of Cartesians with length <code>n</code> that is the right side of the system of equations.\n *\n * @exception {DeveloperError} diagonal and right must have the same lengths.\n * @exception {DeveloperError} lower and upper must have the same lengths.\n * @exception {DeveloperError} lower and upper must be one less than the length of diagonal.\n *\n * @performance Linear time.\n *\n * @example\n * const lowerDiagonal = [1.0, 1.0, 1.0, 1.0];\n * const diagonal = [2.0, 4.0, 4.0, 4.0, 2.0];\n * const upperDiagonal = [1.0, 1.0, 1.0, 1.0];\n * const rightHandSide = [\n *     new Cesium.Cartesian3(410757.0, -1595711.0, 1375302.0),\n *     new Cesium.Cartesian3(-5986705.0, -2190640.0, 1099600.0),\n *     new Cesium.Cartesian3(-12593180.0, 288588.0, -1755549.0),\n *     new Cesium.Cartesian3(-5349898.0, 2457005.0, -2685438.0),\n *     new Cesium.Cartesian3(845820.0, 1573488.0, -1205591.0)\n * ];\n *\n * const solution = Cesium.TridiagonalSystemSolver.solve(lowerDiagonal, diagonal, upperDiagonal, rightHandSide);\n *\n * @returns {Cartesian3[]} An array of Cartesians with length <code>n</code> that is the solution to the tridiagonal system of equations.\n */\nTridiagonalSystemSolver.solve = function (lower, diagonal, upper, right) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(lower) || !(lower instanceof Array)) {\n    throw new DeveloperError(\"The array lower is required.\");\n  }\n  if (!defined(diagonal) || !(diagonal instanceof Array)) {\n    throw new DeveloperError(\"The array diagonal is required.\");\n  }\n  if (!defined(upper) || !(upper instanceof Array)) {\n    throw new DeveloperError(\"The array upper is required.\");\n  }\n  if (!defined(right) || !(right instanceof Array)) {\n    throw new DeveloperError(\"The array right is required.\");\n  }\n  if (diagonal.length !== right.length) {\n    throw new DeveloperError(\"diagonal and right must have the same lengths.\");\n  }\n  if (lower.length !== upper.length) {\n    throw new DeveloperError(\"lower and upper must have the same lengths.\");\n  } else if (lower.length !== diagonal.length - 1) {\n    throw new DeveloperError(\n      \"lower and upper must be one less than the length of diagonal.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const c = new Array(upper.length);\n  const d = new Array(right.length);\n  const x = new Array(right.length);\n\n  let i;\n  for (i = 0; i < d.length; i++) {\n    d[i] = new Cartesian3();\n    x[i] = new Cartesian3();\n  }\n\n  c[0] = upper[0] / diagonal[0];\n  d[0] = Cartesian3.multiplyByScalar(right[0], 1.0 / diagonal[0], d[0]);\n\n  let scalar;\n  for (i = 1; i < c.length; ++i) {\n    scalar = 1.0 / (diagonal[i] - c[i - 1] * lower[i - 1]);\n    c[i] = upper[i] * scalar;\n    d[i] = Cartesian3.subtract(\n      right[i],\n      Cartesian3.multiplyByScalar(d[i - 1], lower[i - 1], d[i]),\n      d[i],\n    );\n    d[i] = Cartesian3.multiplyByScalar(d[i], scalar, d[i]);\n  }\n\n  scalar = 1.0 / (diagonal[i] - c[i - 1] * lower[i - 1]);\n  d[i] = Cartesian3.subtract(\n    right[i],\n    Cartesian3.multiplyByScalar(d[i - 1], lower[i - 1], d[i]),\n    d[i],\n  );\n  d[i] = Cartesian3.multiplyByScalar(d[i], scalar, d[i]);\n\n  x[x.length - 1] = d[d.length - 1];\n  for (i = x.length - 2; i >= 0; --i) {\n    x[i] = Cartesian3.subtract(\n      d[i],\n      Cartesian3.multiplyByScalar(x[i + 1], c[i], x[i]),\n      x[i],\n    );\n  }\n\n  return x;\n};\nexport default TridiagonalSystemSolver;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,iBAAiB;AACxC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG,CAAC,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,uBAAuB,CAACC,KAAK,GAAG,UAAUC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAE;EACvE;EACA,IAAI,CAACP,OAAO,CAACI,KAAK,CAAC,IAAI,EAAEA,KAAK,YAAYI,KAAK,CAAC,EAAE;IAChD,MAAM,IAAIP,cAAc,CAAC,8BAA8B,CAAC;EAC1D;EACA,IAAI,CAACD,OAAO,CAACK,QAAQ,CAAC,IAAI,EAAEA,QAAQ,YAAYG,KAAK,CAAC,EAAE;IACtD,MAAM,IAAIP,cAAc,CAAC,iCAAiC,CAAC;EAC7D;EACA,IAAI,CAACD,OAAO,CAACM,KAAK,CAAC,IAAI,EAAEA,KAAK,YAAYE,KAAK,CAAC,EAAE;IAChD,MAAM,IAAIP,cAAc,CAAC,8BAA8B,CAAC;EAC1D;EACA,IAAI,CAACD,OAAO,CAACO,KAAK,CAAC,IAAI,EAAEA,KAAK,YAAYC,KAAK,CAAC,EAAE;IAChD,MAAM,IAAIP,cAAc,CAAC,8BAA8B,CAAC;EAC1D;EACA,IAAII,QAAQ,CAACI,MAAM,KAAKF,KAAK,CAACE,MAAM,EAAE;IACpC,MAAM,IAAIR,cAAc,CAAC,gDAAgD,CAAC;EAC5E;EACA,IAAIG,KAAK,CAACK,MAAM,KAAKH,KAAK,CAACG,MAAM,EAAE;IACjC,MAAM,IAAIR,cAAc,CAAC,6CAA6C,CAAC;EACzE,CAAC,MAAM,IAAIG,KAAK,CAACK,MAAM,KAAKJ,QAAQ,CAACI,MAAM,GAAG,CAAC,EAAE;IAC/C,MAAM,IAAIR,cAAc,CACtB,+DACF,CAAC;EACH;EACA;;EAEA,MAAMS,CAAC,GAAG,IAAIF,KAAK,CAACF,KAAK,CAACG,MAAM,CAAC;EACjC,MAAME,CAAC,GAAG,IAAIH,KAAK,CAACD,KAAK,CAACE,MAAM,CAAC;EACjC,MAAMG,CAAC,GAAG,IAAIJ,KAAK,CAACD,KAAK,CAACE,MAAM,CAAC;EAEjC,IAAII,CAAC;EACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,CAACF,MAAM,EAAEI,CAAC,EAAE,EAAE;IAC7BF,CAAC,CAACE,CAAC,CAAC,GAAG,IAAId,UAAU,CAAC,CAAC;IACvBa,CAAC,CAACC,CAAC,CAAC,GAAG,IAAId,UAAU,CAAC,CAAC;EACzB;EAEAW,CAAC,CAAC,CAAC,CAAC,GAAGJ,KAAK,CAAC,CAAC,CAAC,GAAGD,QAAQ,CAAC,CAAC,CAAC;EAC7BM,CAAC,CAAC,CAAC,CAAC,GAAGZ,UAAU,CAACe,gBAAgB,CAACP,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,GAAGF,QAAQ,CAAC,CAAC,CAAC,EAAEM,CAAC,CAAC,CAAC,CAAC,CAAC;EAErE,IAAII,MAAM;EACV,KAAKF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACD,MAAM,EAAE,EAAEI,CAAC,EAAE;IAC7BE,MAAM,GAAG,GAAG,IAAIV,QAAQ,CAACQ,CAAC,CAAC,GAAGH,CAAC,CAACG,CAAC,GAAG,CAAC,CAAC,GAAGT,KAAK,CAACS,CAAC,GAAG,CAAC,CAAC,CAAC;IACtDH,CAAC,CAACG,CAAC,CAAC,GAAGP,KAAK,CAACO,CAAC,CAAC,GAAGE,MAAM;IACxBJ,CAAC,CAACE,CAAC,CAAC,GAAGd,UAAU,CAACiB,QAAQ,CACxBT,KAAK,CAACM,CAAC,CAAC,EACRd,UAAU,CAACe,gBAAgB,CAACH,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,EAAET,KAAK,CAACS,CAAC,GAAG,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,CAAC,CAAC,EACzDF,CAAC,CAACE,CAAC,CACL,CAAC;IACDF,CAAC,CAACE,CAAC,CAAC,GAAGd,UAAU,CAACe,gBAAgB,CAACH,CAAC,CAACE,CAAC,CAAC,EAAEE,MAAM,EAAEJ,CAAC,CAACE,CAAC,CAAC,CAAC;EACxD;EAEAE,MAAM,GAAG,GAAG,IAAIV,QAAQ,CAACQ,CAAC,CAAC,GAAGH,CAAC,CAACG,CAAC,GAAG,CAAC,CAAC,GAAGT,KAAK,CAACS,CAAC,GAAG,CAAC,CAAC,CAAC;EACtDF,CAAC,CAACE,CAAC,CAAC,GAAGd,UAAU,CAACiB,QAAQ,CACxBT,KAAK,CAACM,CAAC,CAAC,EACRd,UAAU,CAACe,gBAAgB,CAACH,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,EAAET,KAAK,CAACS,CAAC,GAAG,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,CAAC,CAAC,EACzDF,CAAC,CAACE,CAAC,CACL,CAAC;EACDF,CAAC,CAACE,CAAC,CAAC,GAAGd,UAAU,CAACe,gBAAgB,CAACH,CAAC,CAACE,CAAC,CAAC,EAAEE,MAAM,EAAEJ,CAAC,CAACE,CAAC,CAAC,CAAC;EAEtDD,CAAC,CAACA,CAAC,CAACH,MAAM,GAAG,CAAC,CAAC,GAAGE,CAAC,CAACA,CAAC,CAACF,MAAM,GAAG,CAAC,CAAC;EACjC,KAAKI,CAAC,GAAGD,CAAC,CAACH,MAAM,GAAG,CAAC,EAAEI,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;IAClCD,CAAC,CAACC,CAAC,CAAC,GAAGd,UAAU,CAACiB,QAAQ,CACxBL,CAAC,CAACE,CAAC,CAAC,EACJd,UAAU,CAACe,gBAAgB,CAACF,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,EAAEH,CAAC,CAACG,CAAC,CAAC,EAAED,CAAC,CAACC,CAAC,CAAC,CAAC,EACjDD,CAAC,CAACC,CAAC,CACL,CAAC;EACH;EAEA,OAAOD,CAAC;AACV,CAAC;AACD,eAAeV,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}