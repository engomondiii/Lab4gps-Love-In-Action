{"ast":null,"code":"import BoundingSphere from \"../../Core/BoundingSphere.js\";\nimport Cartesian3 from \"../../Core/Cartesian3.js\";\nimport Check from \"../../Core/Check.js\";\nimport clone from \"../../Core/clone.js\";\nimport defined from \"../../Core/defined.js\";\nimport ModelUtility from \"./ModelUtility.js\";\nimport ModelLightingOptions from \"./ModelLightingOptions.js\";\n\n/**\n * Each node may have many mesh primitives. Most model pipeline stages operate\n * at the primitive level. Again, properties are inherited from the parent.\n *\n * @param {NodeRenderResources} nodeRenderResources The node resources to inherit from\n * @param {ModelRuntimePrimitive} runtimePrimitive The primitive.\n *\n * @private\n */\nfunction PrimitiveRenderResources(nodeRenderResources, runtimePrimitive) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"nodeRenderResources\", nodeRenderResources);\n  Check.typeOf.object(\"runtimePrimitive\", runtimePrimitive);\n  //>>includeEnd('debug');\n\n  // Properties inherited from NodeRenderResources.\n  /**\n   * A reference to the model. Inherited from the node render resources.\n   *\n   * @type {Model}\n   * @readonly\n   *\n   * @private\n   */\n  this.model = nodeRenderResources.model;\n\n  /**\n   * A reference to the runtime node. Inherited from the node render resources.\n   *\n   * @type {ModelRuntimeNode}\n   * @readonly\n   *\n   * @private\n   */\n  this.runtimeNode = nodeRenderResources.runtimeNode;\n\n  /**\n   * The vertex attributes. This is shallow cloned from the node render\n   * resources as the primitive will add additional properties.\n   *\n   * @type {Object[]}\n   * @readonly\n   *\n   * @private\n   */\n  this.attributes = nodeRenderResources.attributes.slice();\n\n  /**\n   * The index to give to the next vertex attribute added to the attributes\n   * array. POSITION takes index 0. Inherited from the node render resources.\n   *\n   * @type {number}\n   *\n   * @private\n   */\n  this.attributeIndex = nodeRenderResources.attributeIndex;\n\n  /**\n   * The set index to assign to feature ID vertex attribute(s) created from the\n   * offset/repeat in the feature ID attribute. Inherited from the node render\n   * resources.\n   *\n   * @type {number}\n   *\n   * @private\n   */\n  this.featureIdVertexAttributeSetIndex = nodeRenderResources.featureIdVertexAttributeSetIndex;\n\n  /**\n   * A dictionary mapping uniform name to functions that return the uniform\n   * values. Inherited from the node render resources.\n   *\n   * @type {Object<string, Function>}\n   * @readonly\n   *\n   * @private\n   */\n  this.uniformMap = clone(nodeRenderResources.uniformMap);\n\n  /**\n   * Options for configuring the alpha stage such as pass and alpha cutoff.\n   * Inherited from the node render resources.\n   *\n   * @type {ModelAlphaOptions}\n   * @readonly\n   *\n   * @private\n   */\n  this.alphaOptions = clone(nodeRenderResources.alphaOptions);\n\n  /**\n   * An object storing options for creating a {@link RenderState}.\n   * The pipeline stages simply set the options; the actual render state\n   * is created when the {@link DrawCommand} is constructed. Inherited from\n   * the node render resources.\n   *\n   * @type {object}\n   * @readonly\n   *\n   * @private\n   */\n  this.renderStateOptions = clone(nodeRenderResources.renderStateOptions, true);\n\n  /**\n   * Whether the model has a silhouette. This value indicates what draw commands\n   * are needed. Inherited from the node render resources.\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @private\n   */\n  this.hasSilhouette = nodeRenderResources.hasSilhouette;\n\n  /**\n   * Whether the model is part of a tileset that uses the skipLevelOfDetail\n   * optimization. This value indicates what draw commands are needed.\n   * Inherited from the node render resources.\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @private\n   */\n  this.hasSkipLevelOfDetail = nodeRenderResources.hasSkipLevelOfDetail;\n\n  /**\n   * An object used to build a shader incrementally. This is cloned from the\n   * node render resources because each primitive can compute a different shader.\n   *\n   * @type {ShaderBuilder}\n   * @readonly\n   *\n   * @private\n   */\n  this.shaderBuilder = nodeRenderResources.shaderBuilder.clone();\n\n  /**\n   * The number of instances. Default is 0, if instancing is not used.\n   * Inherited from the node render resources.\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  this.instanceCount = nodeRenderResources.instanceCount;\n\n  // Other properties\n  /**\n   * A reference to the runtime primitive.\n   *\n   * @type {ModelRuntimePrimitive}\n   * @readonly\n   *\n   * @private\n   */\n  this.runtimePrimitive = runtimePrimitive;\n\n  /**\n   * The primitive associated with the render resources.\n   *\n   * @type {ModelComponents.Primitive}\n   * @readonly\n   *\n   * @private\n   */\n  const primitive = runtimePrimitive.primitive;\n\n  /**\n   * The number of indices in the primitive. The interpretation of this\n   * depends on the primitive type.\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  this.count = defined(primitive.indices) ? primitive.indices.count : ModelUtility.getAttributeBySemantic(primitive, \"POSITION\").count;\n\n  /**\n   * Whether or not this primitive has a property table for storing metadata.\n   * When present, picking and styling can use this. This value is set by\n   * SelectedFeatureIdPipelineStage.\n   *\n   * @type {boolean}\n   * @default false\n   *\n   * @private\n   */\n  this.hasPropertyTable = false;\n\n  /**\n   * The indices for this primitive.\n   *\n   * @type {ModelComponents.Indices}\n   * @readonly\n   *\n   * @private\n   */\n  this.indices = primitive.indices;\n\n  /**\n   * Additional index buffer for wireframe mode (if enabled). This value is set\n   * by WireframePipelineStage.\n   *\n   * @type {Buffer}\n   * @readonly\n   *\n   * @private\n   */\n  this.wireframeIndexBuffer = undefined;\n\n  /**\n   * The primitive type such as TRIANGLES or POINTS.\n   *\n   * @type {PrimitiveType}\n   * @readonly\n   *\n   * @private\n   */\n  this.primitiveType = primitive.primitiveType;\n  const positionMinMax = ModelUtility.getPositionMinMax(primitive, this.runtimeNode.instancingTranslationMin, this.runtimeNode.instancingTranslationMax);\n\n  /**\n   * The minimum position value for this primitive.\n   *\n   * @type {Cartesian3}\n   * @readonly\n   *\n   * @private\n   */\n  this.positionMin = Cartesian3.clone(positionMinMax.min, new Cartesian3());\n\n  /**\n   * The maximum position value for this primitive.\n   *\n   * @type {Cartesian3}\n   * @readonly\n   *\n   * @private\n   */\n  this.positionMax = Cartesian3.clone(positionMinMax.max, new Cartesian3());\n\n  /**\n   * The bounding sphere that contains all the vertices in this primitive.\n   *\n   * @type {BoundingSphere}\n   * @readonly\n   *\n   * @private\n   */\n  this.boundingSphere = BoundingSphere.fromCornerPoints(this.positionMin, this.positionMax, new BoundingSphere());\n\n  /**\n   * Options for configuring the lighting stage, such as selecting between\n   * unlit and PBR shading.\n   *\n   * @type {ModelLightingOptions}\n   * @readonly\n   *\n   * @private\n   */\n  this.lightingOptions = new ModelLightingOptions();\n\n  /**\n   * The shader variable to use for picking. If picking is enabled, this value\n   * is set by PickingPipelineStage.\n   *\n   * @type {string|undefined}\n   *\n   * @private\n   */\n  this.pickId = undefined;\n}\nexport default PrimitiveRenderResources;","map":{"version":3,"names":["BoundingSphere","Cartesian3","Check","clone","defined","ModelUtility","ModelLightingOptions","PrimitiveRenderResources","nodeRenderResources","runtimePrimitive","typeOf","object","model","runtimeNode","attributes","slice","attributeIndex","featureIdVertexAttributeSetIndex","uniformMap","alphaOptions","renderStateOptions","hasSilhouette","hasSkipLevelOfDetail","shaderBuilder","instanceCount","primitive","count","indices","getAttributeBySemantic","hasPropertyTable","wireframeIndexBuffer","undefined","primitiveType","positionMinMax","getPositionMinMax","instancingTranslationMin","instancingTranslationMax","positionMin","min","positionMax","max","boundingSphere","fromCornerPoints","lightingOptions","pickId"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/PrimitiveRenderResources.js"],"sourcesContent":["import BoundingSphere from \"../../Core/BoundingSphere.js\";\nimport Cartesian3 from \"../../Core/Cartesian3.js\";\nimport Check from \"../../Core/Check.js\";\nimport clone from \"../../Core/clone.js\";\nimport defined from \"../../Core/defined.js\";\nimport ModelUtility from \"./ModelUtility.js\";\nimport ModelLightingOptions from \"./ModelLightingOptions.js\";\n\n/**\n * Each node may have many mesh primitives. Most model pipeline stages operate\n * at the primitive level. Again, properties are inherited from the parent.\n *\n * @param {NodeRenderResources} nodeRenderResources The node resources to inherit from\n * @param {ModelRuntimePrimitive} runtimePrimitive The primitive.\n *\n * @private\n */\nfunction PrimitiveRenderResources(nodeRenderResources, runtimePrimitive) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"nodeRenderResources\", nodeRenderResources);\n  Check.typeOf.object(\"runtimePrimitive\", runtimePrimitive);\n  //>>includeEnd('debug');\n\n  // Properties inherited from NodeRenderResources.\n  /**\n   * A reference to the model. Inherited from the node render resources.\n   *\n   * @type {Model}\n   * @readonly\n   *\n   * @private\n   */\n  this.model = nodeRenderResources.model;\n\n  /**\n   * A reference to the runtime node. Inherited from the node render resources.\n   *\n   * @type {ModelRuntimeNode}\n   * @readonly\n   *\n   * @private\n   */\n  this.runtimeNode = nodeRenderResources.runtimeNode;\n\n  /**\n   * The vertex attributes. This is shallow cloned from the node render\n   * resources as the primitive will add additional properties.\n   *\n   * @type {Object[]}\n   * @readonly\n   *\n   * @private\n   */\n  this.attributes = nodeRenderResources.attributes.slice();\n\n  /**\n   * The index to give to the next vertex attribute added to the attributes\n   * array. POSITION takes index 0. Inherited from the node render resources.\n   *\n   * @type {number}\n   *\n   * @private\n   */\n  this.attributeIndex = nodeRenderResources.attributeIndex;\n\n  /**\n   * The set index to assign to feature ID vertex attribute(s) created from the\n   * offset/repeat in the feature ID attribute. Inherited from the node render\n   * resources.\n   *\n   * @type {number}\n   *\n   * @private\n   */\n  this.featureIdVertexAttributeSetIndex =\n    nodeRenderResources.featureIdVertexAttributeSetIndex;\n\n  /**\n   * A dictionary mapping uniform name to functions that return the uniform\n   * values. Inherited from the node render resources.\n   *\n   * @type {Object<string, Function>}\n   * @readonly\n   *\n   * @private\n   */\n  this.uniformMap = clone(nodeRenderResources.uniformMap);\n\n  /**\n   * Options for configuring the alpha stage such as pass and alpha cutoff.\n   * Inherited from the node render resources.\n   *\n   * @type {ModelAlphaOptions}\n   * @readonly\n   *\n   * @private\n   */\n  this.alphaOptions = clone(nodeRenderResources.alphaOptions);\n\n  /**\n   * An object storing options for creating a {@link RenderState}.\n   * The pipeline stages simply set the options; the actual render state\n   * is created when the {@link DrawCommand} is constructed. Inherited from\n   * the node render resources.\n   *\n   * @type {object}\n   * @readonly\n   *\n   * @private\n   */\n  this.renderStateOptions = clone(nodeRenderResources.renderStateOptions, true);\n\n  /**\n   * Whether the model has a silhouette. This value indicates what draw commands\n   * are needed. Inherited from the node render resources.\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @private\n   */\n  this.hasSilhouette = nodeRenderResources.hasSilhouette;\n\n  /**\n   * Whether the model is part of a tileset that uses the skipLevelOfDetail\n   * optimization. This value indicates what draw commands are needed.\n   * Inherited from the node render resources.\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @private\n   */\n  this.hasSkipLevelOfDetail = nodeRenderResources.hasSkipLevelOfDetail;\n\n  /**\n   * An object used to build a shader incrementally. This is cloned from the\n   * node render resources because each primitive can compute a different shader.\n   *\n   * @type {ShaderBuilder}\n   * @readonly\n   *\n   * @private\n   */\n  this.shaderBuilder = nodeRenderResources.shaderBuilder.clone();\n\n  /**\n   * The number of instances. Default is 0, if instancing is not used.\n   * Inherited from the node render resources.\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  this.instanceCount = nodeRenderResources.instanceCount;\n\n  // Other properties\n  /**\n   * A reference to the runtime primitive.\n   *\n   * @type {ModelRuntimePrimitive}\n   * @readonly\n   *\n   * @private\n   */\n  this.runtimePrimitive = runtimePrimitive;\n\n  /**\n   * The primitive associated with the render resources.\n   *\n   * @type {ModelComponents.Primitive}\n   * @readonly\n   *\n   * @private\n   */\n  const primitive = runtimePrimitive.primitive;\n\n  /**\n   * The number of indices in the primitive. The interpretation of this\n   * depends on the primitive type.\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  this.count = defined(primitive.indices)\n    ? primitive.indices.count\n    : ModelUtility.getAttributeBySemantic(primitive, \"POSITION\").count;\n\n  /**\n   * Whether or not this primitive has a property table for storing metadata.\n   * When present, picking and styling can use this. This value is set by\n   * SelectedFeatureIdPipelineStage.\n   *\n   * @type {boolean}\n   * @default false\n   *\n   * @private\n   */\n  this.hasPropertyTable = false;\n\n  /**\n   * The indices for this primitive.\n   *\n   * @type {ModelComponents.Indices}\n   * @readonly\n   *\n   * @private\n   */\n  this.indices = primitive.indices;\n\n  /**\n   * Additional index buffer for wireframe mode (if enabled). This value is set\n   * by WireframePipelineStage.\n   *\n   * @type {Buffer}\n   * @readonly\n   *\n   * @private\n   */\n  this.wireframeIndexBuffer = undefined;\n\n  /**\n   * The primitive type such as TRIANGLES or POINTS.\n   *\n   * @type {PrimitiveType}\n   * @readonly\n   *\n   * @private\n   */\n  this.primitiveType = primitive.primitiveType;\n\n  const positionMinMax = ModelUtility.getPositionMinMax(\n    primitive,\n    this.runtimeNode.instancingTranslationMin,\n    this.runtimeNode.instancingTranslationMax,\n  );\n\n  /**\n   * The minimum position value for this primitive.\n   *\n   * @type {Cartesian3}\n   * @readonly\n   *\n   * @private\n   */\n  this.positionMin = Cartesian3.clone(positionMinMax.min, new Cartesian3());\n\n  /**\n   * The maximum position value for this primitive.\n   *\n   * @type {Cartesian3}\n   * @readonly\n   *\n   * @private\n   */\n  this.positionMax = Cartesian3.clone(positionMinMax.max, new Cartesian3());\n\n  /**\n   * The bounding sphere that contains all the vertices in this primitive.\n   *\n   * @type {BoundingSphere}\n   * @readonly\n   *\n   * @private\n   */\n  this.boundingSphere = BoundingSphere.fromCornerPoints(\n    this.positionMin,\n    this.positionMax,\n    new BoundingSphere(),\n  );\n\n  /**\n   * Options for configuring the lighting stage, such as selecting between\n   * unlit and PBR shading.\n   *\n   * @type {ModelLightingOptions}\n   * @readonly\n   *\n   * @private\n   */\n  this.lightingOptions = new ModelLightingOptions();\n\n  /**\n   * The shader variable to use for picking. If picking is enabled, this value\n   * is set by PickingPipelineStage.\n   *\n   * @type {string|undefined}\n   *\n   * @private\n   */\n  this.pickId = undefined;\n}\n\nexport default PrimitiveRenderResources;\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,8BAA8B;AACzD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,oBAAoB,MAAM,2BAA2B;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAACC,mBAAmB,EAAEC,gBAAgB,EAAE;EACvE;EACAP,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,qBAAqB,EAAEH,mBAAmB,CAAC;EAC/DN,KAAK,CAACQ,MAAM,CAACC,MAAM,CAAC,kBAAkB,EAAEF,gBAAgB,CAAC;EACzD;;EAEA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACG,KAAK,GAAGJ,mBAAmB,CAACI,KAAK;;EAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,WAAW,GAAGL,mBAAmB,CAACK,WAAW;;EAElD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAGN,mBAAmB,CAACM,UAAU,CAACC,KAAK,CAAC,CAAC;;EAExD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAGR,mBAAmB,CAACQ,cAAc;;EAExD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,gCAAgC,GACnCT,mBAAmB,CAACS,gCAAgC;;EAEtD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,UAAU,GAAGf,KAAK,CAACK,mBAAmB,CAACU,UAAU,CAAC;;EAEvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,YAAY,GAAGhB,KAAK,CAACK,mBAAmB,CAACW,YAAY,CAAC;;EAE3D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kBAAkB,GAAGjB,KAAK,CAACK,mBAAmB,CAACY,kBAAkB,EAAE,IAAI,CAAC;;EAE7E;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAGb,mBAAmB,CAACa,aAAa;;EAEtD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,oBAAoB,GAAGd,mBAAmB,CAACc,oBAAoB;;EAEpE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAGf,mBAAmB,CAACe,aAAa,CAACpB,KAAK,CAAC,CAAC;;EAE9D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACqB,aAAa,GAAGhB,mBAAmB,CAACgB,aAAa;;EAEtD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACf,gBAAgB,GAAGA,gBAAgB;;EAExC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMgB,SAAS,GAAGhB,gBAAgB,CAACgB,SAAS;;EAE5C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAGtB,OAAO,CAACqB,SAAS,CAACE,OAAO,CAAC,GACnCF,SAAS,CAACE,OAAO,CAACD,KAAK,GACvBrB,YAAY,CAACuB,sBAAsB,CAACH,SAAS,EAAE,UAAU,CAAC,CAACC,KAAK;;EAEpE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACG,gBAAgB,GAAG,KAAK;;EAE7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACF,OAAO,GAAGF,SAAS,CAACE,OAAO;;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACG,oBAAoB,GAAGC,SAAS;;EAErC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAGP,SAAS,CAACO,aAAa;EAE5C,MAAMC,cAAc,GAAG5B,YAAY,CAAC6B,iBAAiB,CACnDT,SAAS,EACT,IAAI,CAACZ,WAAW,CAACsB,wBAAwB,EACzC,IAAI,CAACtB,WAAW,CAACuB,wBACnB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,WAAW,GAAGpC,UAAU,CAACE,KAAK,CAAC8B,cAAc,CAACK,GAAG,EAAE,IAAIrC,UAAU,CAAC,CAAC,CAAC;;EAEzE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACsC,WAAW,GAAGtC,UAAU,CAACE,KAAK,CAAC8B,cAAc,CAACO,GAAG,EAAE,IAAIvC,UAAU,CAAC,CAAC,CAAC;;EAEzE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACwC,cAAc,GAAGzC,cAAc,CAAC0C,gBAAgB,CACnD,IAAI,CAACL,WAAW,EAChB,IAAI,CAACE,WAAW,EAChB,IAAIvC,cAAc,CAAC,CACrB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC2C,eAAe,GAAG,IAAIrC,oBAAoB,CAAC,CAAC;;EAEjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACsC,MAAM,GAAGb,SAAS;AACzB;AAEA,eAAexB,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}