{"ast":null,"code":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Compute the intersection interval of a ray with a sphere.\\n\\\n *\\n\\\n * @name czm_raySphereIntersectionInterval\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {czm_ray} ray The ray.\\n\\\n * @param {vec3} center The center of the sphere.\\n\\\n * @param {float} radius The radius of the sphere.\\n\\\n * @return {czm_raySegment} The intersection interval of the ray with the sphere.\\n\\\n */\\n\\\nczm_raySegment czm_raySphereIntersectionInterval(czm_ray ray, vec3 center, float radius)\\n\\\n{\\n\\\n    vec3 o = ray.origin;\\n\\\n    vec3 d = ray.direction;\\n\\\n\\n\\\n    vec3 oc = o - center;\\n\\\n\\n\\\n    float a = dot(d, d);\\n\\\n    float b = 2.0 * dot(d, oc);\\n\\\n    float c = dot(oc, oc) - (radius * radius);\\n\\\n\\n\\\n    float det = (b * b) - (4.0 * a * c);\\n\\\n\\n\\\n    if (det < 0.0) {\\n\\\n        return czm_emptyRaySegment;\\n\\\n    }\\n\\\n\\n\\\n    float sqrtDet = sqrt(det);\\n\\\n\\n\\\n    float t0 = (-b - sqrtDet) / (2.0 * a);\\n\\\n    float t1 = (-b + sqrtDet) / (2.0 * a);\\n\\\n\\n\\\n    czm_raySegment result = czm_raySegment(t0, t1);\\n\\\n    return result;\\n\\\n}\\n\\\n\";","map":{"version":3,"names":[],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Shaders/Builtin/Functions/raySphereIntersectionInterval.js"],"sourcesContent":["//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Compute the intersection interval of a ray with a sphere.\\n\\\n *\\n\\\n * @name czm_raySphereIntersectionInterval\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {czm_ray} ray The ray.\\n\\\n * @param {vec3} center The center of the sphere.\\n\\\n * @param {float} radius The radius of the sphere.\\n\\\n * @return {czm_raySegment} The intersection interval of the ray with the sphere.\\n\\\n */\\n\\\nczm_raySegment czm_raySphereIntersectionInterval(czm_ray ray, vec3 center, float radius)\\n\\\n{\\n\\\n    vec3 o = ray.origin;\\n\\\n    vec3 d = ray.direction;\\n\\\n\\n\\\n    vec3 oc = o - center;\\n\\\n\\n\\\n    float a = dot(d, d);\\n\\\n    float b = 2.0 * dot(d, oc);\\n\\\n    float c = dot(oc, oc) - (radius * radius);\\n\\\n\\n\\\n    float det = (b * b) - (4.0 * a * c);\\n\\\n\\n\\\n    if (det < 0.0) {\\n\\\n        return czm_emptyRaySegment;\\n\\\n    }\\n\\\n\\n\\\n    float sqrtDet = sqrt(det);\\n\\\n\\n\\\n    float t0 = (-b - sqrtDet) / (2.0 * a);\\n\\\n    float t1 = (-b + sqrtDet) / (2.0 * a);\\n\\\n\\n\\\n    czm_raySegment result = czm_raySegment(t0, t1);\\n\\\n    return result;\\n\\\n}\\n\\\n\";\n"],"mappings":"AAAA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}