{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport MetadataSchema from \"./MetadataSchema.js\";\nimport ResourceLoader from \"./ResourceLoader.js\";\nimport ResourceLoaderState from \"./ResourceLoaderState.js\";\n\n/**\n * A {@link MetadataSchema} loader.\n * <p>\n * Implements the {@link ResourceLoader} interface.\n * </p>\n *\n * @alias MetadataSchemaLoader\n * @constructor\n * @augments ResourceLoader\n *\n * @param {object} options Object with the following properties:\n * @param {object} [options.schema] An object that explicitly defines a schema JSON. Mutually exclusive with options.resource.\n * @param {Resource} [options.resource] The {@link Resource} pointing to the schema JSON. Mutually exclusive with options.schema.\n * @param {string} [options.cacheKey] The cache key of the resource.\n *\n * @exception {DeveloperError} One of options.schema and options.resource must be defined.\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction MetadataSchemaLoader(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const schema = options.schema;\n  const resource = options.resource;\n  const cacheKey = options.cacheKey;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(schema) === defined(resource)) {\n    throw new DeveloperError(\"One of options.schema and options.resource must be defined.\");\n  }\n  //>>includeEnd('debug');\n\n  this._schema = defined(schema) ? MetadataSchema.fromJson(schema) : undefined;\n  this._resource = resource;\n  this._cacheKey = cacheKey;\n  this._state = ResourceLoaderState.UNLOADED;\n  this._promise = undefined;\n}\nif (defined(Object.create)) {\n  MetadataSchemaLoader.prototype = Object.create(ResourceLoader.prototype);\n  MetadataSchemaLoader.prototype.constructor = MetadataSchemaLoader;\n}\nObject.defineProperties(MetadataSchemaLoader.prototype, {\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof MetadataSchemaLoader.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    }\n  },\n  /**\n   * The metadata schema object.\n   *\n   * @memberof MetadataSchemaLoader.prototype\n   *\n   * @type {MetadataSchema}\n   * @readonly\n   * @private\n   */\n  schema: {\n    get: function () {\n      return this._schema;\n    }\n  }\n});\n\n/**\n * Loads the resource.\n * @returns {Promise<MetadataSchemaLoader>} A promise which resolves to the loader when the resource loading is completed.\n * @private\n */\nMetadataSchemaLoader.prototype.load = async function () {\n  if (defined(this._promise)) {\n    return this._promise;\n  }\n  if (defined(this._schema)) {\n    this._promise = Promise.resolve(this);\n    return this._promise;\n  }\n  this._promise = loadExternalSchema(this);\n  return this._promise;\n};\nasync function loadExternalSchema(schemaLoader) {\n  const resource = schemaLoader._resource;\n  schemaLoader._state = ResourceLoaderState.LOADING;\n  try {\n    const json = await resource.fetchJson();\n    if (schemaLoader.isDestroyed()) {\n      return;\n    }\n    schemaLoader._schema = MetadataSchema.fromJson(json);\n    schemaLoader._state = ResourceLoaderState.READY;\n    return schemaLoader;\n  } catch (error) {\n    if (schemaLoader.isDestroyed()) {\n      return;\n    }\n    schemaLoader._state = ResourceLoaderState.FAILED;\n    const errorMessage = `Failed to load schema: ${resource.url}`;\n    throw schemaLoader.getError(errorMessage, error);\n  }\n}\n\n/**\n * Unloads the resource.\n * @private\n */\nMetadataSchemaLoader.prototype.unload = function () {\n  this._schema = undefined;\n};\nexport default MetadataSchemaLoader;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","MetadataSchema","ResourceLoader","ResourceLoaderState","MetadataSchemaLoader","options","EMPTY_OBJECT","schema","resource","cacheKey","_schema","fromJson","undefined","_resource","_cacheKey","_state","UNLOADED","_promise","Object","create","prototype","constructor","defineProperties","get","load","Promise","resolve","loadExternalSchema","schemaLoader","LOADING","json","fetchJson","isDestroyed","READY","error","FAILED","errorMessage","url","getError","unload"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/MetadataSchemaLoader.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport MetadataSchema from \"./MetadataSchema.js\";\nimport ResourceLoader from \"./ResourceLoader.js\";\nimport ResourceLoaderState from \"./ResourceLoaderState.js\";\n\n/**\n * A {@link MetadataSchema} loader.\n * <p>\n * Implements the {@link ResourceLoader} interface.\n * </p>\n *\n * @alias MetadataSchemaLoader\n * @constructor\n * @augments ResourceLoader\n *\n * @param {object} options Object with the following properties:\n * @param {object} [options.schema] An object that explicitly defines a schema JSON. Mutually exclusive with options.resource.\n * @param {Resource} [options.resource] The {@link Resource} pointing to the schema JSON. Mutually exclusive with options.schema.\n * @param {string} [options.cacheKey] The cache key of the resource.\n *\n * @exception {DeveloperError} One of options.schema and options.resource must be defined.\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction MetadataSchemaLoader(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const schema = options.schema;\n  const resource = options.resource;\n  const cacheKey = options.cacheKey;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(schema) === defined(resource)) {\n    throw new DeveloperError(\n      \"One of options.schema and options.resource must be defined.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._schema = defined(schema) ? MetadataSchema.fromJson(schema) : undefined;\n  this._resource = resource;\n  this._cacheKey = cacheKey;\n  this._state = ResourceLoaderState.UNLOADED;\n  this._promise = undefined;\n}\n\nif (defined(Object.create)) {\n  MetadataSchemaLoader.prototype = Object.create(ResourceLoader.prototype);\n  MetadataSchemaLoader.prototype.constructor = MetadataSchemaLoader;\n}\n\nObject.defineProperties(MetadataSchemaLoader.prototype, {\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof MetadataSchemaLoader.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    },\n  },\n  /**\n   * The metadata schema object.\n   *\n   * @memberof MetadataSchemaLoader.prototype\n   *\n   * @type {MetadataSchema}\n   * @readonly\n   * @private\n   */\n  schema: {\n    get: function () {\n      return this._schema;\n    },\n  },\n});\n\n/**\n * Loads the resource.\n * @returns {Promise<MetadataSchemaLoader>} A promise which resolves to the loader when the resource loading is completed.\n * @private\n */\nMetadataSchemaLoader.prototype.load = async function () {\n  if (defined(this._promise)) {\n    return this._promise;\n  }\n\n  if (defined(this._schema)) {\n    this._promise = Promise.resolve(this);\n    return this._promise;\n  }\n\n  this._promise = loadExternalSchema(this);\n  return this._promise;\n};\n\nasync function loadExternalSchema(schemaLoader) {\n  const resource = schemaLoader._resource;\n  schemaLoader._state = ResourceLoaderState.LOADING;\n  try {\n    const json = await resource.fetchJson();\n    if (schemaLoader.isDestroyed()) {\n      return;\n    }\n\n    schemaLoader._schema = MetadataSchema.fromJson(json);\n    schemaLoader._state = ResourceLoaderState.READY;\n    return schemaLoader;\n  } catch (error) {\n    if (schemaLoader.isDestroyed()) {\n      return;\n    }\n\n    schemaLoader._state = ResourceLoaderState.FAILED;\n    const errorMessage = `Failed to load schema: ${resource.url}`;\n    throw schemaLoader.getError(errorMessage, error);\n  }\n}\n\n/**\n * Unloads the resource.\n * @private\n */\nMetadataSchemaLoader.prototype.unload = function () {\n  this._schema = undefined;\n};\n\nexport default MetadataSchemaLoader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}