{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport deprecationWarning from \"../Core/deprecationWarning.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Geometry from \"../Core/Geometry.js\";\nimport GeometryAttribute from \"../Core/GeometryAttribute.js\";\nimport loadKTX2 from \"../Core/loadKTX2.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport ViewportQuadVS from \"../Shaders/ViewportQuadVS.js\";\nimport BufferUsage from \"./BufferUsage.js\";\nimport ClearCommand from \"./ClearCommand.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport CubeMap from \"./CubeMap.js\";\nimport DrawCommand from \"./DrawCommand.js\";\nimport PassState from \"./PassState.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\nimport RenderState from \"./RenderState.js\";\nimport ShaderCache from \"./ShaderCache.js\";\nimport ShaderProgram from \"./ShaderProgram.js\";\nimport Texture from \"./Texture.js\";\nimport TextureCache from \"./TextureCache.js\";\nimport UniformState from \"./UniformState.js\";\nimport VertexArray from \"./VertexArray.js\";\n\n/**\n * @private\n * @constructor\n *\n * @param {HTMLCanvasElement} canvas The canvas element to which the context will be associated\n * @param {ContextOptions} [options] Options to control WebGL settings for the context\n */\nfunction Context(canvas, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"canvas\", canvas);\n  //>>includeEnd('debug');\n\n  const {\n    getWebGLStub,\n    requestWebgl1,\n    webgl: webglOptions = {},\n    allowTextureFilterAnisotropic = true\n  } = defaultValue(options, {});\n\n  // Override select WebGL defaults\n  webglOptions.alpha = defaultValue(webglOptions.alpha, false); // WebGL default is true\n  webglOptions.stencil = defaultValue(webglOptions.stencil, true); // WebGL default is false\n  webglOptions.powerPreference = defaultValue(webglOptions.powerPreference, \"high-performance\"); // WebGL default is \"default\"\n\n  const glContext = defined(getWebGLStub) ? getWebGLStub(canvas, webglOptions) : getWebGLContext(canvas, webglOptions, requestWebgl1);\n\n  // Get context type. instanceof will throw if WebGL2 is not supported\n  const webgl2Supported = typeof WebGL2RenderingContext !== \"undefined\";\n  const webgl2 = webgl2Supported && glContext instanceof WebGL2RenderingContext;\n  this._canvas = canvas;\n  this._originalGLContext = glContext;\n  this._gl = glContext;\n  this._webgl2 = webgl2;\n  this._id = createGuid();\n\n  // Validation and logging disabled by default for speed.\n  this.validateFramebuffer = false;\n  this.validateShaderProgram = false;\n  this.logShaderCompilation = false;\n  this._throwOnWebGLError = false;\n  this._shaderCache = new ShaderCache(this);\n  this._textureCache = new TextureCache();\n  const gl = glContext;\n  this._stencilBits = gl.getParameter(gl.STENCIL_BITS);\n  ContextLimits._maximumCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS); // min: 8\n  ContextLimits._maximumCubeMapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE); // min: 16\n  ContextLimits._maximumFragmentUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS); // min: 16\n  ContextLimits._maximumTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS); // min: 8\n  ContextLimits._maximumRenderbufferSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE); // min: 1\n  ContextLimits._maximumTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE); // min: 64\n  ContextLimits._maximumVaryingVectors = gl.getParameter(gl.MAX_VARYING_VECTORS); // min: 8\n  ContextLimits._maximumVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS); // min: 8\n  ContextLimits._maximumVertexTextureImageUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS); // min: 0\n  ContextLimits._maximumVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS); // min: 128\n\n  ContextLimits._maximumSamples = this._webgl2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n  const aliasedLineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE); // must include 1\n  ContextLimits._minimumAliasedLineWidth = aliasedLineWidthRange[0];\n  ContextLimits._maximumAliasedLineWidth = aliasedLineWidthRange[1];\n  const aliasedPointSizeRange = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE); // must include 1\n  ContextLimits._minimumAliasedPointSize = aliasedPointSizeRange[0];\n  ContextLimits._maximumAliasedPointSize = aliasedPointSizeRange[1];\n  const maximumViewportDimensions = gl.getParameter(gl.MAX_VIEWPORT_DIMS);\n  ContextLimits._maximumViewportWidth = maximumViewportDimensions[0];\n  ContextLimits._maximumViewportHeight = maximumViewportDimensions[1];\n  const highpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n  ContextLimits._highpFloatSupported = highpFloat.precision !== 0;\n  const highpInt = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT);\n  ContextLimits._highpIntSupported = highpInt.rangeMax !== 0;\n  this._antialias = gl.getContextAttributes().antialias;\n\n  // Query and initialize extensions\n  this._standardDerivatives = !!getExtension(gl, [\"OES_standard_derivatives\"]);\n  this._blendMinmax = !!getExtension(gl, [\"EXT_blend_minmax\"]);\n  this._elementIndexUint = !!getExtension(gl, [\"OES_element_index_uint\"]);\n  this._depthTexture = !!getExtension(gl, [\"WEBGL_depth_texture\", \"WEBKIT_WEBGL_depth_texture\"]);\n  this._fragDepth = !!getExtension(gl, [\"EXT_frag_depth\"]);\n  this._debugShaders = getExtension(gl, [\"WEBGL_debug_shaders\"]);\n  this._textureFloat = !!getExtension(gl, [\"OES_texture_float\"]);\n  this._textureHalfFloat = !!getExtension(gl, [\"OES_texture_half_float\"]);\n  this._textureFloatLinear = !!getExtension(gl, [\"OES_texture_float_linear\"]);\n  this._textureHalfFloatLinear = !!getExtension(gl, [\"OES_texture_half_float_linear\"]);\n  this._supportsTextureLod = !!getExtension(gl, [\"EXT_shader_texture_lod\"]);\n  this._colorBufferFloat = !!getExtension(gl, [\"EXT_color_buffer_float\", \"WEBGL_color_buffer_float\"]);\n  this._floatBlend = !!getExtension(gl, [\"EXT_float_blend\"]);\n  this._colorBufferHalfFloat = !!getExtension(gl, [\"EXT_color_buffer_half_float\"]);\n  this._s3tc = !!getExtension(gl, [\"WEBGL_compressed_texture_s3tc\", \"MOZ_WEBGL_compressed_texture_s3tc\", \"WEBKIT_WEBGL_compressed_texture_s3tc\"]);\n  this._pvrtc = !!getExtension(gl, [\"WEBGL_compressed_texture_pvrtc\", \"WEBKIT_WEBGL_compressed_texture_pvrtc\"]);\n  this._astc = !!getExtension(gl, [\"WEBGL_compressed_texture_astc\"]);\n  this._etc = !!getExtension(gl, [\"WEBG_compressed_texture_etc\"]);\n  this._etc1 = !!getExtension(gl, [\"WEBGL_compressed_texture_etc1\"]);\n  this._bc7 = !!getExtension(gl, [\"EXT_texture_compression_bptc\"]);\n\n  // It is necessary to pass supported formats to loadKTX2\n  // because imagery layers don't have access to the context.\n  loadKTX2.setKTX2SupportedFormats(this._s3tc, this._pvrtc, this._astc, this._etc, this._etc1, this._bc7);\n  const textureFilterAnisotropic = allowTextureFilterAnisotropic ? getExtension(gl, [\"EXT_texture_filter_anisotropic\", \"WEBKIT_EXT_texture_filter_anisotropic\"]) : undefined;\n  this._textureFilterAnisotropic = textureFilterAnisotropic;\n  ContextLimits._maximumTextureFilterAnisotropy = defined(textureFilterAnisotropic) ? gl.getParameter(textureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;\n  let glCreateVertexArray;\n  let glBindVertexArray;\n  let glDeleteVertexArray;\n  let glDrawElementsInstanced;\n  let glDrawArraysInstanced;\n  let glVertexAttribDivisor;\n  let glDrawBuffers;\n  let vertexArrayObject;\n  let instancedArrays;\n  let drawBuffers;\n  if (webgl2) {\n    const that = this;\n    glCreateVertexArray = function () {\n      return that._gl.createVertexArray();\n    };\n    glBindVertexArray = function (vao) {\n      that._gl.bindVertexArray(vao);\n    };\n    glDeleteVertexArray = function (vao) {\n      that._gl.deleteVertexArray(vao);\n    };\n    glDrawElementsInstanced = function (mode, count, type, offset, instanceCount) {\n      gl.drawElementsInstanced(mode, count, type, offset, instanceCount);\n    };\n    glDrawArraysInstanced = function (mode, first, count, instanceCount) {\n      gl.drawArraysInstanced(mode, first, count, instanceCount);\n    };\n    glVertexAttribDivisor = function (index, divisor) {\n      gl.vertexAttribDivisor(index, divisor);\n    };\n    glDrawBuffers = function (buffers) {\n      gl.drawBuffers(buffers);\n    };\n  } else {\n    vertexArrayObject = getExtension(gl, [\"OES_vertex_array_object\"]);\n    if (defined(vertexArrayObject)) {\n      glCreateVertexArray = function () {\n        return vertexArrayObject.createVertexArrayOES();\n      };\n      glBindVertexArray = function (vertexArray) {\n        vertexArrayObject.bindVertexArrayOES(vertexArray);\n      };\n      glDeleteVertexArray = function (vertexArray) {\n        vertexArrayObject.deleteVertexArrayOES(vertexArray);\n      };\n    }\n    instancedArrays = getExtension(gl, [\"ANGLE_instanced_arrays\"]);\n    if (defined(instancedArrays)) {\n      glDrawElementsInstanced = function (mode, count, type, offset, instanceCount) {\n        instancedArrays.drawElementsInstancedANGLE(mode, count, type, offset, instanceCount);\n      };\n      glDrawArraysInstanced = function (mode, first, count, instanceCount) {\n        instancedArrays.drawArraysInstancedANGLE(mode, first, count, instanceCount);\n      };\n      glVertexAttribDivisor = function (index, divisor) {\n        instancedArrays.vertexAttribDivisorANGLE(index, divisor);\n      };\n    }\n    drawBuffers = getExtension(gl, [\"WEBGL_draw_buffers\"]);\n    if (defined(drawBuffers)) {\n      glDrawBuffers = function (buffers) {\n        drawBuffers.drawBuffersWEBGL(buffers);\n      };\n    }\n  }\n  this.glCreateVertexArray = glCreateVertexArray;\n  this.glBindVertexArray = glBindVertexArray;\n  this.glDeleteVertexArray = glDeleteVertexArray;\n  this.glDrawElementsInstanced = glDrawElementsInstanced;\n  this.glDrawArraysInstanced = glDrawArraysInstanced;\n  this.glVertexAttribDivisor = glVertexAttribDivisor;\n  this.glDrawBuffers = glDrawBuffers;\n  this._vertexArrayObject = !!vertexArrayObject;\n  this._instancedArrays = !!instancedArrays;\n  this._drawBuffers = !!drawBuffers;\n  ContextLimits._maximumDrawBuffers = this.drawBuffers ? gl.getParameter(WebGLConstants.MAX_DRAW_BUFFERS) : 1;\n  ContextLimits._maximumColorAttachments = this.drawBuffers ? gl.getParameter(WebGLConstants.MAX_COLOR_ATTACHMENTS) : 1;\n  this._clearColor = new Color(0.0, 0.0, 0.0, 0.0);\n  this._clearDepth = 1.0;\n  this._clearStencil = 0;\n  const us = new UniformState();\n  const ps = new PassState(this);\n  const rs = RenderState.fromCache();\n  this._defaultPassState = ps;\n  this._defaultRenderState = rs;\n  // default texture has a value of (1, 1, 1)\n  // default emissive texture has a value of (0, 0, 0)\n  // default normal texture is +z which is encoded as (0.5, 0.5, 1)\n  this._defaultTexture = undefined;\n  this._defaultEmissiveTexture = undefined;\n  this._defaultNormalTexture = undefined;\n  this._defaultCubeMap = undefined;\n  this._us = us;\n  this._currentRenderState = rs;\n  this._currentPassState = ps;\n  this._currentFramebuffer = undefined;\n  this._maxFrameTextureUnitIndex = 0;\n\n  // Vertex attribute divisor state cache. Workaround for ANGLE (also look at VertexArray.setVertexAttribDivisor)\n  this._vertexAttribDivisors = [];\n  this._previousDrawInstanced = false;\n  for (let i = 0; i < ContextLimits._maximumVertexAttributes; i++) {\n    this._vertexAttribDivisors.push(0);\n  }\n  this._pickObjects = {};\n  this._nextPickColor = new Uint32Array(1);\n\n  /**\n   * The options used to construct this context\n   *\n   * @type {ContextOptions}\n   */\n  this.options = {\n    getWebGLStub: getWebGLStub,\n    requestWebgl1: requestWebgl1,\n    webgl: webglOptions,\n    allowTextureFilterAnisotropic: allowTextureFilterAnisotropic\n  };\n\n  /**\n   * A cache of objects tied to this context.  Just before the Context is destroyed,\n   * <code>destroy</code> will be invoked on each object in this object literal that has\n   * such a method.  This is useful for caching any objects that might otherwise\n   * be stored globally, except they're tied to a particular context, and to manage\n   * their lifetime.\n   *\n   * @type {object}\n   */\n  this.cache = {};\n  RenderState.apply(gl, rs, ps);\n}\n\n/**\n * @typedef {object} ContextOptions\n *\n * Options to control the setting up of a WebGL Context.\n * <p>\n * <code>allowTextureFilterAnisotropic</code> defaults to true, which enables\n * anisotropic texture filtering when the WebGL extension is supported.\n * Setting this to false will improve performance, but hurt visual quality,\n * especially for horizon views.\n * </p>\n *\n * @property {boolean} [requestWebgl1=false] If true and the browser supports it, use a WebGL 1 rendering context\n * @property {boolean} [allowTextureFilterAnisotropic=true] If true, use anisotropic filtering during texture sampling\n * @property {WebGLOptions} [webgl] WebGL options to be passed on to canvas.getContext\n * @property {Function} [getWebGLStub] A function to create a WebGL stub for testing\n */\n\n/**\n * @private\n * @param {HTMLCanvasElement} canvas The canvas element to which the context will be associated\n * @param {WebGLOptions} webglOptions WebGL options to be passed on to HTMLCanvasElement.getContext()\n * @param {boolean} requestWebgl1 Whether to request a WebGLRenderingContext or a WebGL2RenderingContext.\n * @returns {WebGLRenderingContext|WebGL2RenderingContext}\n */\nfunction getWebGLContext(canvas, webglOptions, requestWebgl1) {\n  if (typeof WebGLRenderingContext === \"undefined\") {\n    throw new RuntimeError(\"The browser does not support WebGL.  Visit http://get.webgl.org.\");\n  }\n\n  // Ensure that WebGL 2 is supported when it is requested. Otherwise, fall back to WebGL 1.\n  const webgl2Supported = typeof WebGL2RenderingContext !== \"undefined\";\n  if (!requestWebgl1 && !webgl2Supported) {\n    requestWebgl1 = true;\n  }\n  const contextType = requestWebgl1 ? \"webgl\" : \"webgl2\";\n  const glContext = canvas.getContext(contextType, webglOptions);\n  if (!defined(glContext)) {\n    throw new RuntimeError(\"The browser supports WebGL, but initialization failed.\");\n  }\n  return glContext;\n}\n\n/**\n * @typedef {object} WebGLOptions\n *\n * WebGL options to be passed on to HTMLCanvasElement.getContext().\n * See {@link https://registry.khronos.org/webgl/specs/latest/1.0/#5.2|WebGLContextAttributes}\n * but note the modified defaults for 'alpha', 'stencil', and 'powerPreference'\n *\n * <p>\n * <code>alpha</code> defaults to false, which can improve performance\n * compared to the standard WebGL default of true.  If an application needs\n * to composite Cesium above other HTML elements using alpha-blending, set\n * <code>alpha</code> to true.\n * </p>\n *\n * @property {boolean} [alpha=false]\n * @property {boolean} [depth=true]\n * @property {boolean} [stencil=false]\n * @property {boolean} [antialias=true]\n * @property {boolean} [premultipliedAlpha=true]\n * @property {boolean} [preserveDrawingBuffer=false]\n * @property {(\"default\"|\"low-power\"|\"high-performance\")} [powerPreference=\"high-performance\"]\n * @property {boolean} [failIfMajorPerformanceCaveat=false]\n */\n\nfunction errorToString(gl, error) {\n  let message = \"WebGL Error:  \";\n  switch (error) {\n    case gl.INVALID_ENUM:\n      message += \"INVALID_ENUM\";\n      break;\n    case gl.INVALID_VALUE:\n      message += \"INVALID_VALUE\";\n      break;\n    case gl.INVALID_OPERATION:\n      message += \"INVALID_OPERATION\";\n      break;\n    case gl.OUT_OF_MEMORY:\n      message += \"OUT_OF_MEMORY\";\n      break;\n    case gl.CONTEXT_LOST_WEBGL:\n      message += \"CONTEXT_LOST_WEBGL lost\";\n      break;\n    default:\n      message += `Unknown (${error})`;\n  }\n  return message;\n}\nfunction createErrorMessage(gl, glFunc, glFuncArguments, error) {\n  let message = `${errorToString(gl, error)}: ${glFunc.name}(`;\n  for (let i = 0; i < glFuncArguments.length; ++i) {\n    if (i !== 0) {\n      message += \", \";\n    }\n    message += glFuncArguments[i];\n  }\n  message += \");\";\n  return message;\n}\nfunction throwOnError(gl, glFunc, glFuncArguments) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new RuntimeError(createErrorMessage(gl, glFunc, glFuncArguments, error));\n  }\n}\nfunction makeGetterSetter(gl, propertyName, logFunction) {\n  return {\n    get: function () {\n      const value = gl[propertyName];\n      logFunction(gl, `get: ${propertyName}`, value);\n      return gl[propertyName];\n    },\n    set: function (value) {\n      gl[propertyName] = value;\n      logFunction(gl, `set: ${propertyName}`, value);\n    }\n  };\n}\nfunction wrapGL(gl, logFunction) {\n  if (!defined(logFunction)) {\n    return gl;\n  }\n  function wrapFunction(property) {\n    return function () {\n      const result = property.apply(gl, arguments);\n      logFunction(gl, property, arguments);\n      return result;\n    };\n  }\n  const glWrapper = {};\n\n  // JavaScript linters normally demand that a for..in loop must directly contain an if,\n  // but in our loop below, we actually intend to iterate all properties, including\n  // those in the prototype.\n  /*eslint-disable guard-for-in*/\n  for (const propertyName in gl) {\n    const property = gl[propertyName];\n\n    // wrap any functions we encounter, otherwise just copy the property to the wrapper.\n    if (property instanceof Function) {\n      glWrapper[propertyName] = wrapFunction(property);\n    } else {\n      Object.defineProperty(glWrapper, propertyName, makeGetterSetter(gl, propertyName, logFunction));\n    }\n  }\n  /*eslint-enable guard-for-in*/\n\n  return glWrapper;\n}\nfunction getExtension(gl, names) {\n  const length = names.length;\n  for (let i = 0; i < length; ++i) {\n    const extension = gl.getExtension(names[i]);\n    if (extension) {\n      return extension;\n    }\n  }\n  return undefined;\n}\nconst defaultFramebufferMarker = {};\nObject.defineProperties(Context.prototype, {\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n  webgl2: {\n    get: function () {\n      return this._webgl2;\n    }\n  },\n  canvas: {\n    get: function () {\n      return this._canvas;\n    }\n  },\n  shaderCache: {\n    get: function () {\n      return this._shaderCache;\n    }\n  },\n  textureCache: {\n    get: function () {\n      return this._textureCache;\n    }\n  },\n  uniformState: {\n    get: function () {\n      return this._us;\n    }\n  },\n  /**\n   * The number of stencil bits per pixel in the default bound framebuffer.  The minimum is eight bits.\n   * @memberof Context.prototype\n   * @type {number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>STENCIL_BITS</code>.\n   */\n  stencilBits: {\n    get: function () {\n      return this._stencilBits;\n    }\n  },\n  /**\n   * <code>true</code> if the WebGL context supports stencil buffers.\n   * Stencil buffers are not supported by all systems.\n   * @memberof Context.prototype\n   * @type {boolean}\n   */\n  stencilBuffer: {\n    get: function () {\n      return this._stencilBits >= 8;\n    }\n  },\n  /**\n   * <code>true</code> if the WebGL context supports antialiasing.  By default\n   * antialiasing is requested, but it is not supported by all systems.\n   * @memberof Context.prototype\n   * @type {boolean}\n   */\n  antialias: {\n    get: function () {\n      return this._antialias;\n    }\n  },\n  /**\n   * <code>true</code> if the WebGL context supports multisample antialiasing. Requires\n   * WebGL2.\n   * @memberof Context.prototype\n   * @type {boolean}\n   */\n  msaa: {\n    get: function () {\n      return this._webgl2;\n    }\n  },\n  /**\n   * <code>true</code> if the OES_standard_derivatives extension is supported.  This\n   * extension provides access to <code>dFdx</code>, <code>dFdy</code>, and <code>fwidth</code>\n   * functions from GLSL.  A shader using these functions still needs to explicitly enable the\n   * extension with <code>#extension GL_OES_standard_derivatives : enable</code>.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/gles/extensions/OES/OES_standard_derivatives.txt|OES_standard_derivatives}\n   */\n  standardDerivatives: {\n    get: function () {\n      return this._standardDerivatives || this._webgl2;\n    }\n  },\n  /**\n   * <code>true</code> if the EXT_float_blend extension is supported. This\n   * extension enables blending with 32-bit float values.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_float_blend/}\n   */\n  floatBlend: {\n    get: function () {\n      return this._floatBlend;\n    }\n  },\n  /**\n   * <code>true</code> if the EXT_blend_minmax extension is supported.  This\n   * extension extends blending capabilities by adding two new blend equations:\n   * the minimum or maximum color components of the source and destination colors.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_blend_minmax/}\n   */\n  blendMinmax: {\n    get: function () {\n      return this._blendMinmax || this._webgl2;\n    }\n  },\n  /**\n   * <code>true</code> if the OES_element_index_uint extension is supported.  This\n   * extension allows the use of unsigned int indices, which can improve performance by\n   * eliminating batch breaking caused by unsigned short indices.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/OES_element_index_uint/|OES_element_index_uint}\n   */\n  elementIndexUint: {\n    get: function () {\n      return this._elementIndexUint || this._webgl2;\n    }\n  },\n  /**\n   * <code>true</code> if WEBGL_depth_texture is supported.  This extension provides\n   * access to depth textures that, for example, can be attached to framebuffers for shadow mapping.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n   */\n  depthTexture: {\n    get: function () {\n      return this._depthTexture || this._webgl2;\n    }\n  },\n  /**\n   * <code>true</code> if OES_texture_float is supported. This extension provides\n   * access to floating point textures that, for example, can be attached to framebuffers for high dynamic range.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_float/}\n   */\n  floatingPointTexture: {\n    get: function () {\n      return this._webgl2 || this._textureFloat;\n    }\n  },\n  /**\n   * <code>true</code> if OES_texture_half_float is supported. This extension provides\n   * access to floating point textures that, for example, can be attached to framebuffers for high dynamic range.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_half_float/}\n   */\n  halfFloatingPointTexture: {\n    get: function () {\n      return this._webgl2 || this._textureHalfFloat;\n    }\n  },\n  /**\n   * <code>true</code> if OES_texture_float_linear is supported. This extension provides\n   * access to linear sampling methods for minification and magnification filters of floating-point textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_float_linear/}\n   */\n  textureFloatLinear: {\n    get: function () {\n      return this._textureFloatLinear;\n    }\n  },\n  /**\n   * <code>true</code> if OES_texture_half_float_linear is supported. This extension provides\n   * access to linear sampling methods for minification and magnification filters of half floating-point textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_half_float_linear/}\n   */\n  textureHalfFloatLinear: {\n    get: function () {\n      return this._webgl2 && this._textureFloatLinear || !this._webgl2 && this._textureHalfFloatLinear;\n    }\n  },\n  /**\n   * <code>true</code> if EXT_shader_texture_lod is supported. This extension provides\n   * access to explicit LOD selection in texture sampling functions.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://registry.khronos.org/webgl/extensions/EXT_shader_texture_lod/}\n   */\n  supportsTextureLod: {\n    get: function () {\n      return this._webgl2 || this._supportsTextureLod;\n    }\n  },\n  /**\n   * <code>true</code> if EXT_texture_filter_anisotropic is supported. This extension provides\n   * access to anisotropic filtering for textured surfaces at an oblique angle from the viewer.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_texture_filter_anisotropic/}\n   */\n  textureFilterAnisotropic: {\n    get: function () {\n      return !!this._textureFilterAnisotropic;\n    }\n  },\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_s3tc is supported.  This extension provides\n   * access to DXT compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/}\n   */\n  s3tc: {\n    get: function () {\n      return this._s3tc;\n    }\n  },\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_pvrtc is supported.  This extension provides\n   * access to PVR compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/}\n   */\n  pvrtc: {\n    get: function () {\n      return this._pvrtc;\n    }\n  },\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_astc is supported.  This extension provides\n   * access to ASTC compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/}\n   */\n  astc: {\n    get: function () {\n      return this._astc;\n    }\n  },\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_etc is supported.  This extension provides\n   * access to ETC compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc/}\n   */\n  etc: {\n    get: function () {\n      return this._etc;\n    }\n  },\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_etc1 is supported.  This extension provides\n   * access to ETC1 compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc1/}\n   */\n  etc1: {\n    get: function () {\n      return this._etc1;\n    }\n  },\n  /**\n   * <code>true</code> if EXT_texture_compression_bptc is supported.  This extension provides\n   * access to BC7 compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_texture_compression_bptc/}\n   */\n  bc7: {\n    get: function () {\n      return this._bc7;\n    }\n  },\n  /**\n   * <code>true</code> if S3TC, PVRTC, ASTC, ETC, ETC1, or BC7 compression is supported.\n   * @memberof Context.prototype\n   * @type {boolean}\n   */\n  supportsBasis: {\n    get: function () {\n      return this._s3tc || this._pvrtc || this._astc || this._etc || this._etc1 || this._bc7;\n    }\n  },\n  /**\n   * <code>true</code> if the OES_vertex_array_object extension is supported.  This\n   * extension can improve performance by reducing the overhead of switching vertex arrays.\n   * When enabled, this extension is automatically used by {@link VertexArray}.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/OES_vertex_array_object/|OES_vertex_array_object}\n   */\n  vertexArrayObject: {\n    get: function () {\n      return this._vertexArrayObject || this._webgl2;\n    }\n  },\n  /**\n   * <code>true</code> if the EXT_frag_depth extension is supported.  This\n   * extension provides access to the <code>gl_FragDepthEXT</code> built-in output variable\n   * from GLSL fragment shaders.  A shader using these functions still needs to explicitly enable the\n   * extension with <code>#extension GL_EXT_frag_depth : enable</code>.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/EXT_frag_depth/|EXT_frag_depth}\n   */\n  fragmentDepth: {\n    get: function () {\n      return this._fragDepth || this._webgl2;\n    }\n  },\n  /**\n   * <code>true</code> if the ANGLE_instanced_arrays extension is supported.  This\n   * extension provides access to instanced rendering.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/ANGLE_instanced_arrays}\n   */\n  instancedArrays: {\n    get: function () {\n      return this._instancedArrays || this._webgl2;\n    }\n  },\n  /**\n   * <code>true</code> if the EXT_color_buffer_float extension is supported.  This\n   * extension makes the gl.RGBA32F format color renderable.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_color_buffer_float/}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_float/}\n   */\n  colorBufferFloat: {\n    get: function () {\n      return this._colorBufferFloat;\n    }\n  },\n  /**\n   * <code>true</code> if the EXT_color_buffer_half_float extension is supported.  This\n   * extension makes the format gl.RGBA16F format color renderable.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_half_float/}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_float/}\n   */\n  colorBufferHalfFloat: {\n    get: function () {\n      return this._webgl2 && this._colorBufferFloat || !this._webgl2 && this._colorBufferHalfFloat;\n    }\n  },\n  /**\n   * <code>true</code> if the WEBGL_draw_buffers extension is supported. This\n   * extensions provides support for multiple render targets. The framebuffer object can have mutiple\n   * color attachments and the GLSL fragment shader can write to the built-in output array <code>gl_FragData</code>.\n   * A shader using this feature needs to explicitly enable the extension with\n   * <code>#extension GL_EXT_draw_buffers : enable</code>.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_draw_buffers/|WEBGL_draw_buffers}\n   */\n  drawBuffers: {\n    get: function () {\n      return this._drawBuffers || this._webgl2;\n    }\n  },\n  debugShaders: {\n    get: function () {\n      return this._debugShaders;\n    }\n  },\n  throwOnWebGLError: {\n    get: function () {\n      return this._throwOnWebGLError;\n    },\n    set: function (value) {\n      this._throwOnWebGLError = value;\n      this._gl = wrapGL(this._originalGLContext, value ? throwOnError : undefined);\n    }\n  },\n  /**\n   * A 1x1 RGBA texture initialized to [255, 255, 255, 255].  This can\n   * be used as a placeholder texture while other textures are downloaded.\n   * @memberof Context.prototype\n   * @type {Texture}\n   */\n  defaultTexture: {\n    get: function () {\n      if (this._defaultTexture === undefined) {\n        this._defaultTexture = new Texture({\n          context: this,\n          source: {\n            width: 1,\n            height: 1,\n            arrayBufferView: new Uint8Array([255, 255, 255, 255])\n          },\n          flipY: false\n        });\n      }\n      return this._defaultTexture;\n    }\n  },\n  /**\n   * A 1x1 RGB texture initialized to [0, 0, 0] representing a material that is\n   * not emissive. This can be used as a placeholder texture for emissive\n   * textures while other textures are downloaded.\n   * @memberof Context.prototype\n   * @type {Texture}\n   */\n  defaultEmissiveTexture: {\n    get: function () {\n      if (this._defaultEmissiveTexture === undefined) {\n        this._defaultEmissiveTexture = new Texture({\n          context: this,\n          pixelFormat: PixelFormat.RGB,\n          source: {\n            width: 1,\n            height: 1,\n            arrayBufferView: new Uint8Array([0, 0, 0])\n          },\n          flipY: false\n        });\n      }\n      return this._defaultEmissiveTexture;\n    }\n  },\n  /**\n   * A 1x1 RGBA texture initialized to [128, 128, 255] to encode a tangent\n   * space normal pointing in the +z direction, i.e. (0, 0, 1). This can\n   * be used as a placeholder normal texture while other textures are\n   * downloaded.\n   * @memberof Context.prototype\n   * @type {Texture}\n   */\n  defaultNormalTexture: {\n    get: function () {\n      if (this._defaultNormalTexture === undefined) {\n        this._defaultNormalTexture = new Texture({\n          context: this,\n          pixelFormat: PixelFormat.RGB,\n          source: {\n            width: 1,\n            height: 1,\n            arrayBufferView: new Uint8Array([128, 128, 255])\n          },\n          flipY: false\n        });\n      }\n      return this._defaultNormalTexture;\n    }\n  },\n  /**\n   * A cube map, where each face is a 1x1 RGBA texture initialized to\n   * [255, 255, 255, 255].  This can be used as a placeholder cube map while\n   * other cube maps are downloaded.\n   * @memberof Context.prototype\n   * @type {CubeMap}\n   */\n  defaultCubeMap: {\n    get: function () {\n      if (this._defaultCubeMap === undefined) {\n        const face = {\n          width: 1,\n          height: 1,\n          arrayBufferView: new Uint8Array([255, 255, 255, 255])\n        };\n        this._defaultCubeMap = new CubeMap({\n          context: this,\n          source: {\n            positiveX: face,\n            negativeX: face,\n            positiveY: face,\n            negativeY: face,\n            positiveZ: face,\n            negativeZ: face\n          },\n          flipY: false\n        });\n      }\n      return this._defaultCubeMap;\n    }\n  },\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Context.prototype\n   * @type {number}\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferHeight: {\n    get: function () {\n      return this._gl.drawingBufferHeight;\n    }\n  },\n  /**\n   * The drawingBufferWidth of the underlying GL context.\n   * @memberof Context.prototype\n   * @type {number}\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferWidth|drawingBufferWidth}\n   */\n  drawingBufferWidth: {\n    get: function () {\n      return this._gl.drawingBufferWidth;\n    }\n  },\n  /**\n   * Gets an object representing the currently bound framebuffer.  While this instance is not an actual\n   * {@link Framebuffer}, it is used to represent the default framebuffer in calls to\n   * {@link Texture.fromFramebuffer}.\n   * @memberof Context.prototype\n   * @type {object}\n   */\n  defaultFramebuffer: {\n    get: function () {\n      return defaultFramebufferMarker;\n    }\n  }\n});\n\n/**\n * Validates a framebuffer.\n * Available in debug builds only.\n * @private\n */\nfunction validateFramebuffer(context) {\n  //>>includeStart('debug', pragmas.debug);\n  if (context.validateFramebuffer) {\n    const gl = context._gl;\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      let message;\n      switch (status) {\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n          message = \"Framebuffer is not complete.  Incomplete attachment: at least one attachment point with a renderbuffer or texture attached has its attached object no longer in existence or has an attached image with a width or height of zero, or the color attachment point has a non-color-renderable image attached, or the depth attachment point has a non-depth-renderable image attached, or the stencil attachment point has a non-stencil-renderable image attached.  Color-renderable formats include GL_RGBA4, GL_RGB5_A1, and GL_RGB565. GL_DEPTH_COMPONENT16 is the only depth-renderable format. GL_STENCIL_INDEX8 is the only stencil-renderable format.\";\n          break;\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n          message = \"Framebuffer is not complete.  Incomplete dimensions: not all attached images have the same width and height.\";\n          break;\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n          message = \"Framebuffer is not complete.  Missing attachment: no images are attached to the framebuffer.\";\n          break;\n        case gl.FRAMEBUFFER_UNSUPPORTED:\n          message = \"Framebuffer is not complete.  Unsupported: the combination of internal formats of the attached images violates an implementation-dependent set of restrictions.\";\n          break;\n      }\n      throw new DeveloperError(message);\n    }\n  }\n  //>>includeEnd('debug');\n}\nfunction applyRenderState(context, renderState, passState, clear) {\n  const previousRenderState = context._currentRenderState;\n  const previousPassState = context._currentPassState;\n  context._currentRenderState = renderState;\n  context._currentPassState = passState;\n  RenderState.partialApply(context._gl, previousRenderState, renderState, previousPassState, passState, clear);\n}\nlet scratchBackBufferArray;\n// this check must use typeof, not defined, because defined doesn't work with undeclared variables.\nif (typeof WebGLRenderingContext !== \"undefined\") {\n  scratchBackBufferArray = [WebGLConstants.BACK];\n}\nfunction bindFramebuffer(context, framebuffer) {\n  if (framebuffer !== context._currentFramebuffer) {\n    context._currentFramebuffer = framebuffer;\n    let buffers = scratchBackBufferArray;\n    if (defined(framebuffer)) {\n      framebuffer._bind();\n      validateFramebuffer(context);\n\n      // TODO: Need a way for a command to give what draw buffers are active.\n      buffers = framebuffer._getActiveColorAttachments();\n    } else {\n      const gl = context._gl;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n    if (context.drawBuffers) {\n      context.glDrawBuffers(buffers);\n    }\n  }\n}\nconst defaultClearCommand = new ClearCommand();\nContext.prototype.clear = function (clearCommand, passState) {\n  clearCommand = defaultValue(clearCommand, defaultClearCommand);\n  passState = defaultValue(passState, this._defaultPassState);\n  const gl = this._gl;\n  let bitmask = 0;\n  const c = clearCommand.color;\n  const d = clearCommand.depth;\n  const s = clearCommand.stencil;\n  if (defined(c)) {\n    if (!Color.equals(this._clearColor, c)) {\n      Color.clone(c, this._clearColor);\n      gl.clearColor(c.red, c.green, c.blue, c.alpha);\n    }\n    bitmask |= gl.COLOR_BUFFER_BIT;\n  }\n  if (defined(d)) {\n    if (d !== this._clearDepth) {\n      this._clearDepth = d;\n      gl.clearDepth(d);\n    }\n    bitmask |= gl.DEPTH_BUFFER_BIT;\n  }\n  if (defined(s)) {\n    if (s !== this._clearStencil) {\n      this._clearStencil = s;\n      gl.clearStencil(s);\n    }\n    bitmask |= gl.STENCIL_BUFFER_BIT;\n  }\n  const rs = defaultValue(clearCommand.renderState, this._defaultRenderState);\n  applyRenderState(this, rs, passState, true);\n\n  // The command's framebuffer takes presidence over the pass' framebuffer, e.g., for off-screen rendering.\n  const framebuffer = defaultValue(clearCommand.framebuffer, passState.framebuffer);\n  bindFramebuffer(this, framebuffer);\n  gl.clear(bitmask);\n};\nfunction beginDraw(context, framebuffer, passState, shaderProgram, renderState) {\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(framebuffer) && renderState.depthTest) {\n    if (renderState.depthTest.enabled && !framebuffer.hasDepthAttachment) {\n      throw new DeveloperError(\"The depth test can not be enabled (drawCommand.renderState.depthTest.enabled) because the framebuffer (drawCommand.framebuffer) does not have a depth or depth-stencil renderbuffer.\");\n    }\n  }\n  //>>includeEnd('debug');\n\n  bindFramebuffer(context, framebuffer);\n  applyRenderState(context, renderState, passState, false);\n  shaderProgram._bind();\n  context._maxFrameTextureUnitIndex = Math.max(context._maxFrameTextureUnitIndex, shaderProgram.maximumTextureUnitIndex);\n}\nfunction continueDraw(context, drawCommand, shaderProgram, uniformMap) {\n  const primitiveType = drawCommand._primitiveType;\n  const va = drawCommand._vertexArray;\n  let offset = drawCommand._offset;\n  let count = drawCommand._count;\n  const instanceCount = drawCommand.instanceCount;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!PrimitiveType.validate(primitiveType)) {\n    throw new DeveloperError(\"drawCommand.primitiveType is required and must be valid.\");\n  }\n  Check.defined(\"drawCommand.vertexArray\", va);\n  Check.typeOf.number.greaterThanOrEquals(\"drawCommand.offset\", offset, 0);\n  if (defined(count)) {\n    Check.typeOf.number.greaterThanOrEquals(\"drawCommand.count\", count, 0);\n  }\n  Check.typeOf.number.greaterThanOrEquals(\"drawCommand.instanceCount\", instanceCount, 0);\n  if (instanceCount > 0 && !context.instancedArrays) {\n    throw new DeveloperError(\"Instanced arrays extension is not supported\");\n  }\n  //>>includeEnd('debug');\n\n  context._us.model = defaultValue(drawCommand._modelMatrix, Matrix4.IDENTITY);\n  shaderProgram._setUniforms(uniformMap, context._us, context.validateShaderProgram);\n  va._bind();\n  const indexBuffer = va.indexBuffer;\n  if (defined(indexBuffer)) {\n    offset = offset * indexBuffer.bytesPerIndex; // offset in vertices to offset in bytes\n    if (defined(count)) {\n      count = Math.min(count, indexBuffer.numberOfIndices);\n    } else {\n      count = indexBuffer.numberOfIndices;\n    }\n    if (instanceCount === 0) {\n      context._gl.drawElements(primitiveType, count, indexBuffer.indexDatatype, offset);\n    } else {\n      context.glDrawElementsInstanced(primitiveType, count, indexBuffer.indexDatatype, offset, instanceCount);\n    }\n  } else {\n    if (defined(count)) {\n      count = Math.min(count, va.numberOfVertices);\n    } else {\n      count = va.numberOfVertices;\n    }\n    if (instanceCount === 0) {\n      context._gl.drawArrays(primitiveType, offset, count);\n    } else {\n      context.glDrawArraysInstanced(primitiveType, offset, count, instanceCount);\n    }\n  }\n  va._unBind();\n}\nContext.prototype.draw = function (drawCommand, passState, shaderProgram, uniformMap) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"drawCommand\", drawCommand);\n  Check.defined(\"drawCommand.shaderProgram\", drawCommand._shaderProgram);\n  //>>includeEnd('debug');\n\n  passState = defaultValue(passState, this._defaultPassState);\n  // The command's framebuffer takes precedence over the pass' framebuffer, e.g., for off-screen rendering.\n  const framebuffer = defaultValue(drawCommand._framebuffer, passState.framebuffer);\n  const renderState = defaultValue(drawCommand._renderState, this._defaultRenderState);\n  shaderProgram = defaultValue(shaderProgram, drawCommand._shaderProgram);\n  uniformMap = defaultValue(uniformMap, drawCommand._uniformMap);\n  beginDraw(this, framebuffer, passState, shaderProgram, renderState);\n  continueDraw(this, drawCommand, shaderProgram, uniformMap);\n};\nContext.prototype.endFrame = function () {\n  const gl = this._gl;\n  gl.useProgram(null);\n  this._currentFramebuffer = undefined;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  const buffers = scratchBackBufferArray;\n  if (this.drawBuffers) {\n    this.glDrawBuffers(buffers);\n  }\n  const length = this._maxFrameTextureUnitIndex;\n  this._maxFrameTextureUnitIndex = 0;\n  for (let i = 0; i < length; ++i) {\n    gl.activeTexture(gl.TEXTURE0 + i);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n  }\n};\n\n/**\n * @private\n * @param {object} readState An object with the following properties:\n * @param {number} [readState.x=0] The x offset of the rectangle to read from.\n * @param {number} [readState.y=0] The y offset of the rectangle to read from.\n * @param {number} [readState.width=gl.drawingBufferWidth] The width of the rectangle to read from.\n * @param {number} [readState.height=gl.drawingBufferHeight] The height of the rectangle to read from.\n * @param {Framebuffer} [readState.framebuffer] The framebuffer to read from. If undefined, the read will be from the default framebuffer.\n * @returns {Uint8Array|Uint16Array|Float32Array|Uint32Array} The pixels in the specified rectangle.\n */\nContext.prototype.readPixels = function (readState) {\n  const gl = this._gl;\n  readState = defaultValue(readState, defaultValue.EMPTY_OBJECT);\n  const x = Math.max(defaultValue(readState.x, 0), 0);\n  const y = Math.max(defaultValue(readState.y, 0), 0);\n  const width = defaultValue(readState.width, gl.drawingBufferWidth);\n  const height = defaultValue(readState.height, gl.drawingBufferHeight);\n  const framebuffer = readState.framebuffer;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"readState.width\", width, 0);\n  Check.typeOf.number.greaterThan(\"readState.height\", height, 0);\n  //>>includeEnd('debug');\n\n  let pixelDatatype = PixelDatatype.UNSIGNED_BYTE;\n  if (defined(framebuffer) && framebuffer.numberOfColorAttachments > 0) {\n    pixelDatatype = framebuffer.getColorTexture(0).pixelDatatype;\n  }\n  const pixels = PixelFormat.createTypedArray(PixelFormat.RGBA, pixelDatatype, width, height);\n  bindFramebuffer(this, framebuffer);\n  gl.readPixels(x, y, width, height, PixelFormat.RGBA, PixelDatatype.toWebGLConstant(pixelDatatype, this), pixels);\n  return pixels;\n};\nconst viewportQuadAttributeLocations = {\n  position: 0,\n  textureCoordinates: 1\n};\nContext.prototype.getViewportQuadVertexArray = function () {\n  // Per-context cache for viewport quads\n  let vertexArray = this.cache.viewportQuad_vertexArray;\n  if (!defined(vertexArray)) {\n    const geometry = new Geometry({\n      attributes: {\n        position: new GeometryAttribute({\n          componentDatatype: ComponentDatatype.FLOAT,\n          componentsPerAttribute: 2,\n          values: [-1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0]\n        }),\n        textureCoordinates: new GeometryAttribute({\n          componentDatatype: ComponentDatatype.FLOAT,\n          componentsPerAttribute: 2,\n          values: [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]\n        })\n      },\n      // Workaround Internet Explorer 11.0.8 lack of TRIANGLE_FAN\n      indices: new Uint16Array([0, 1, 2, 0, 2, 3]),\n      primitiveType: PrimitiveType.TRIANGLES\n    });\n    vertexArray = VertexArray.fromGeometry({\n      context: this,\n      geometry: geometry,\n      attributeLocations: viewportQuadAttributeLocations,\n      bufferUsage: BufferUsage.STATIC_DRAW,\n      interleave: true\n    });\n    this.cache.viewportQuad_vertexArray = vertexArray;\n  }\n  return vertexArray;\n};\nContext.prototype.createViewportQuadCommand = function (fragmentShaderSource, overrides) {\n  overrides = defaultValue(overrides, defaultValue.EMPTY_OBJECT);\n  return new DrawCommand({\n    vertexArray: this.getViewportQuadVertexArray(),\n    primitiveType: PrimitiveType.TRIANGLES,\n    renderState: overrides.renderState,\n    shaderProgram: ShaderProgram.fromCache({\n      context: this,\n      vertexShaderSource: ViewportQuadVS,\n      fragmentShaderSource: fragmentShaderSource,\n      attributeLocations: viewportQuadAttributeLocations\n    }),\n    uniformMap: overrides.uniformMap,\n    owner: overrides.owner,\n    framebuffer: overrides.framebuffer,\n    pass: overrides.pass\n  });\n};\n\n/**\n * Gets the object associated with a pick color.\n *\n * @param {Color} pickColor The pick color.\n * @returns {object} The object associated with the pick color, or undefined if no object is associated with that color.\n *\n * @example\n * const object = context.getObjectByPickColor(pickColor);\n *\n * @see Context#createPickId\n */\nContext.prototype.getObjectByPickColor = function (pickColor) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"pickColor\", pickColor);\n  //>>includeEnd('debug');\n\n  return this._pickObjects[pickColor.toRgba()];\n};\nfunction PickId(pickObjects, key, color) {\n  this._pickObjects = pickObjects;\n  this.key = key;\n  this.color = color;\n}\nObject.defineProperties(PickId.prototype, {\n  object: {\n    get: function () {\n      return this._pickObjects[this.key];\n    },\n    set: function (value) {\n      this._pickObjects[this.key] = value;\n    }\n  }\n});\nPickId.prototype.destroy = function () {\n  delete this._pickObjects[this.key];\n  return undefined;\n};\n\n/**\n * Creates a unique ID associated with the input object for use with color-buffer picking.\n * The ID has an RGBA color value unique to this context.  You must call destroy()\n * on the pick ID when destroying the input object.\n *\n * @param {object} object The object to associate with the pick ID.\n * @returns {object} A PickId object with a <code>color</code> property.\n *\n * @exception {RuntimeError} Out of unique Pick IDs.\n *\n *\n * @example\n * this._pickId = context.createPickId({\n *   primitive : this,\n *   id : this.id\n * });\n *\n * @see Context#getObjectByPickColor\n */\nContext.prototype.createPickId = function (object) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"object\", object);\n  //>>includeEnd('debug');\n\n  // the increment and assignment have to be separate statements to\n  // actually detect overflow in the Uint32 value\n  ++this._nextPickColor[0];\n  const key = this._nextPickColor[0];\n  if (key === 0) {\n    // In case of overflow\n    throw new RuntimeError(\"Out of unique Pick IDs.\");\n  }\n  this._pickObjects[key] = object;\n  return new PickId(this._pickObjects, key, Color.fromRgba(key));\n};\nContext.prototype.isDestroyed = function () {\n  return false;\n};\nContext.prototype.destroy = function () {\n  // Destroy all objects in the cache that have a destroy method.\n  const cache = this.cache;\n  for (const property in cache) {\n    if (cache.hasOwnProperty(property)) {\n      const propertyValue = cache[property];\n      if (defined(propertyValue.destroy)) {\n        propertyValue.destroy();\n      }\n    }\n  }\n  this._shaderCache = this._shaderCache.destroy();\n  this._textureCache = this._textureCache.destroy();\n  this._defaultTexture = this._defaultTexture && this._defaultTexture.destroy();\n  this._defaultEmissiveTexture = this._defaultEmissiveTexture && this._defaultEmissiveTexture.destroy();\n  this._defaultNormalTexture = this._defaultNormalTexture && this._defaultNormalTexture.destroy();\n  this._defaultCubeMap = this._defaultCubeMap && this._defaultCubeMap.destroy();\n  return destroyObject(this);\n};\n\n// Used for specs.\nContext._deprecationWarning = deprecationWarning;\nexport default Context;","map":{"version":3,"names":["Check","Color","ComponentDatatype","createGuid","defaultValue","defined","deprecationWarning","destroyObject","DeveloperError","Geometry","GeometryAttribute","loadKTX2","Matrix4","PixelFormat","PrimitiveType","RuntimeError","WebGLConstants","ViewportQuadVS","BufferUsage","ClearCommand","ContextLimits","CubeMap","DrawCommand","PassState","PixelDatatype","RenderState","ShaderCache","ShaderProgram","Texture","TextureCache","UniformState","VertexArray","Context","canvas","options","getWebGLStub","requestWebgl1","webgl","webglOptions","allowTextureFilterAnisotropic","alpha","stencil","powerPreference","glContext","getWebGLContext","webgl2Supported","WebGL2RenderingContext","webgl2","_canvas","_originalGLContext","_gl","_webgl2","_id","validateFramebuffer","validateShaderProgram","logShaderCompilation","_throwOnWebGLError","_shaderCache","_textureCache","gl","_stencilBits","getParameter","STENCIL_BITS","_maximumCombinedTextureImageUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","_maximumCubeMapSize","MAX_CUBE_MAP_TEXTURE_SIZE","_maximumFragmentUniformVectors","MAX_FRAGMENT_UNIFORM_VECTORS","_maximumTextureImageUnits","MAX_TEXTURE_IMAGE_UNITS","_maximumRenderbufferSize","MAX_RENDERBUFFER_SIZE","_maximumTextureSize","MAX_TEXTURE_SIZE","_maximumVaryingVectors","MAX_VARYING_VECTORS","_maximumVertexAttributes","MAX_VERTEX_ATTRIBS","_maximumVertexTextureImageUnits","MAX_VERTEX_TEXTURE_IMAGE_UNITS","_maximumVertexUniformVectors","MAX_VERTEX_UNIFORM_VECTORS","_maximumSamples","MAX_SAMPLES","aliasedLineWidthRange","ALIASED_LINE_WIDTH_RANGE","_minimumAliasedLineWidth","_maximumAliasedLineWidth","aliasedPointSizeRange","ALIASED_POINT_SIZE_RANGE","_minimumAliasedPointSize","_maximumAliasedPointSize","maximumViewportDimensions","MAX_VIEWPORT_DIMS","_maximumViewportWidth","_maximumViewportHeight","highpFloat","getShaderPrecisionFormat","FRAGMENT_SHADER","HIGH_FLOAT","_highpFloatSupported","precision","highpInt","HIGH_INT","_highpIntSupported","rangeMax","_antialias","getContextAttributes","antialias","_standardDerivatives","getExtension","_blendMinmax","_elementIndexUint","_depthTexture","_fragDepth","_debugShaders","_textureFloat","_textureHalfFloat","_textureFloatLinear","_textureHalfFloatLinear","_supportsTextureLod","_colorBufferFloat","_floatBlend","_colorBufferHalfFloat","_s3tc","_pvrtc","_astc","_etc","_etc1","_bc7","setKTX2SupportedFormats","textureFilterAnisotropic","undefined","_textureFilterAnisotropic","_maximumTextureFilterAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","glCreateVertexArray","glBindVertexArray","glDeleteVertexArray","glDrawElementsInstanced","glDrawArraysInstanced","glVertexAttribDivisor","glDrawBuffers","vertexArrayObject","instancedArrays","drawBuffers","that","createVertexArray","vao","bindVertexArray","deleteVertexArray","mode","count","type","offset","instanceCount","drawElementsInstanced","first","drawArraysInstanced","index","divisor","vertexAttribDivisor","buffers","createVertexArrayOES","vertexArray","bindVertexArrayOES","deleteVertexArrayOES","drawElementsInstancedANGLE","drawArraysInstancedANGLE","vertexAttribDivisorANGLE","drawBuffersWEBGL","_vertexArrayObject","_instancedArrays","_drawBuffers","_maximumDrawBuffers","MAX_DRAW_BUFFERS","_maximumColorAttachments","MAX_COLOR_ATTACHMENTS","_clearColor","_clearDepth","_clearStencil","us","ps","rs","fromCache","_defaultPassState","_defaultRenderState","_defaultTexture","_defaultEmissiveTexture","_defaultNormalTexture","_defaultCubeMap","_us","_currentRenderState","_currentPassState","_currentFramebuffer","_maxFrameTextureUnitIndex","_vertexAttribDivisors","_previousDrawInstanced","i","push","_pickObjects","_nextPickColor","Uint32Array","cache","apply","WebGLRenderingContext","contextType","getContext","errorToString","error","message","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","createErrorMessage","glFunc","glFuncArguments","name","length","throwOnError","getError","NO_ERROR","makeGetterSetter","propertyName","logFunction","get","value","set","wrapGL","wrapFunction","property","result","arguments","glWrapper","Function","Object","defineProperty","names","extension","defaultFramebufferMarker","defineProperties","prototype","id","shaderCache","textureCache","uniformState","stencilBits","stencilBuffer","msaa","standardDerivatives","floatBlend","blendMinmax","elementIndexUint","depthTexture","floatingPointTexture","halfFloatingPointTexture","textureFloatLinear","textureHalfFloatLinear","supportsTextureLod","s3tc","pvrtc","astc","etc","etc1","bc7","supportsBasis","fragmentDepth","colorBufferFloat","colorBufferHalfFloat","debugShaders","throwOnWebGLError","defaultTexture","context","source","width","height","arrayBufferView","Uint8Array","flipY","defaultEmissiveTexture","pixelFormat","RGB","defaultNormalTexture","defaultCubeMap","face","positiveX","negativeX","positiveY","negativeY","positiveZ","negativeZ","drawingBufferHeight","drawingBufferWidth","defaultFramebuffer","status","checkFramebufferStatus","FRAMEBUFFER","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_UNSUPPORTED","applyRenderState","renderState","passState","clear","previousRenderState","previousPassState","partialApply","scratchBackBufferArray","BACK","bindFramebuffer","framebuffer","_bind","_getActiveColorAttachments","defaultClearCommand","clearCommand","bitmask","c","color","d","depth","s","equals","clone","clearColor","red","green","blue","COLOR_BUFFER_BIT","clearDepth","DEPTH_BUFFER_BIT","clearStencil","STENCIL_BUFFER_BIT","beginDraw","shaderProgram","depthTest","enabled","hasDepthAttachment","Math","max","maximumTextureUnitIndex","continueDraw","drawCommand","uniformMap","primitiveType","_primitiveType","va","_vertexArray","_offset","_count","validate","typeOf","number","greaterThanOrEquals","model","_modelMatrix","IDENTITY","_setUniforms","indexBuffer","bytesPerIndex","min","numberOfIndices","drawElements","indexDatatype","numberOfVertices","drawArrays","_unBind","draw","_shaderProgram","_framebuffer","_renderState","_uniformMap","endFrame","useProgram","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","readPixels","readState","EMPTY_OBJECT","x","y","greaterThan","pixelDatatype","UNSIGNED_BYTE","numberOfColorAttachments","getColorTexture","pixels","createTypedArray","RGBA","toWebGLConstant","viewportQuadAttributeLocations","position","textureCoordinates","getViewportQuadVertexArray","viewportQuad_vertexArray","geometry","attributes","componentDatatype","FLOAT","componentsPerAttribute","values","indices","Uint16Array","TRIANGLES","fromGeometry","attributeLocations","bufferUsage","STATIC_DRAW","interleave","createViewportQuadCommand","fragmentShaderSource","overrides","vertexShaderSource","owner","pass","getObjectByPickColor","pickColor","toRgba","PickId","pickObjects","key","object","destroy","createPickId","fromRgba","isDestroyed","hasOwnProperty","propertyValue","_deprecationWarning"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Renderer/Context.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport deprecationWarning from \"../Core/deprecationWarning.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Geometry from \"../Core/Geometry.js\";\nimport GeometryAttribute from \"../Core/GeometryAttribute.js\";\nimport loadKTX2 from \"../Core/loadKTX2.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PrimitiveType from \"../Core/PrimitiveType.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport ViewportQuadVS from \"../Shaders/ViewportQuadVS.js\";\nimport BufferUsage from \"./BufferUsage.js\";\nimport ClearCommand from \"./ClearCommand.js\";\nimport ContextLimits from \"./ContextLimits.js\";\nimport CubeMap from \"./CubeMap.js\";\nimport DrawCommand from \"./DrawCommand.js\";\nimport PassState from \"./PassState.js\";\nimport PixelDatatype from \"./PixelDatatype.js\";\nimport RenderState from \"./RenderState.js\";\nimport ShaderCache from \"./ShaderCache.js\";\nimport ShaderProgram from \"./ShaderProgram.js\";\nimport Texture from \"./Texture.js\";\nimport TextureCache from \"./TextureCache.js\";\nimport UniformState from \"./UniformState.js\";\nimport VertexArray from \"./VertexArray.js\";\n\n/**\n * @private\n * @constructor\n *\n * @param {HTMLCanvasElement} canvas The canvas element to which the context will be associated\n * @param {ContextOptions} [options] Options to control WebGL settings for the context\n */\nfunction Context(canvas, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"canvas\", canvas);\n  //>>includeEnd('debug');\n\n  const {\n    getWebGLStub,\n    requestWebgl1,\n    webgl: webglOptions = {},\n    allowTextureFilterAnisotropic = true,\n  } = defaultValue(options, {});\n\n  // Override select WebGL defaults\n  webglOptions.alpha = defaultValue(webglOptions.alpha, false); // WebGL default is true\n  webglOptions.stencil = defaultValue(webglOptions.stencil, true); // WebGL default is false\n  webglOptions.powerPreference = defaultValue(\n    webglOptions.powerPreference,\n    \"high-performance\",\n  ); // WebGL default is \"default\"\n\n  const glContext = defined(getWebGLStub)\n    ? getWebGLStub(canvas, webglOptions)\n    : getWebGLContext(canvas, webglOptions, requestWebgl1);\n\n  // Get context type. instanceof will throw if WebGL2 is not supported\n  const webgl2Supported = typeof WebGL2RenderingContext !== \"undefined\";\n  const webgl2 = webgl2Supported && glContext instanceof WebGL2RenderingContext;\n\n  this._canvas = canvas;\n  this._originalGLContext = glContext;\n  this._gl = glContext;\n  this._webgl2 = webgl2;\n  this._id = createGuid();\n\n  // Validation and logging disabled by default for speed.\n  this.validateFramebuffer = false;\n  this.validateShaderProgram = false;\n  this.logShaderCompilation = false;\n\n  this._throwOnWebGLError = false;\n\n  this._shaderCache = new ShaderCache(this);\n  this._textureCache = new TextureCache();\n\n  const gl = glContext;\n\n  this._stencilBits = gl.getParameter(gl.STENCIL_BITS);\n\n  ContextLimits._maximumCombinedTextureImageUnits = gl.getParameter(\n    gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS,\n  ); // min: 8\n  ContextLimits._maximumCubeMapSize = gl.getParameter(\n    gl.MAX_CUBE_MAP_TEXTURE_SIZE,\n  ); // min: 16\n  ContextLimits._maximumFragmentUniformVectors = gl.getParameter(\n    gl.MAX_FRAGMENT_UNIFORM_VECTORS,\n  ); // min: 16\n  ContextLimits._maximumTextureImageUnits = gl.getParameter(\n    gl.MAX_TEXTURE_IMAGE_UNITS,\n  ); // min: 8\n  ContextLimits._maximumRenderbufferSize = gl.getParameter(\n    gl.MAX_RENDERBUFFER_SIZE,\n  ); // min: 1\n  ContextLimits._maximumTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE); // min: 64\n  ContextLimits._maximumVaryingVectors = gl.getParameter(\n    gl.MAX_VARYING_VECTORS,\n  ); // min: 8\n  ContextLimits._maximumVertexAttributes = gl.getParameter(\n    gl.MAX_VERTEX_ATTRIBS,\n  ); // min: 8\n  ContextLimits._maximumVertexTextureImageUnits = gl.getParameter(\n    gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS,\n  ); // min: 0\n  ContextLimits._maximumVertexUniformVectors = gl.getParameter(\n    gl.MAX_VERTEX_UNIFORM_VECTORS,\n  ); // min: 128\n\n  ContextLimits._maximumSamples = this._webgl2\n    ? gl.getParameter(gl.MAX_SAMPLES)\n    : 0;\n\n  const aliasedLineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE); // must include 1\n  ContextLimits._minimumAliasedLineWidth = aliasedLineWidthRange[0];\n  ContextLimits._maximumAliasedLineWidth = aliasedLineWidthRange[1];\n\n  const aliasedPointSizeRange = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE); // must include 1\n  ContextLimits._minimumAliasedPointSize = aliasedPointSizeRange[0];\n  ContextLimits._maximumAliasedPointSize = aliasedPointSizeRange[1];\n\n  const maximumViewportDimensions = gl.getParameter(gl.MAX_VIEWPORT_DIMS);\n  ContextLimits._maximumViewportWidth = maximumViewportDimensions[0];\n  ContextLimits._maximumViewportHeight = maximumViewportDimensions[1];\n\n  const highpFloat = gl.getShaderPrecisionFormat(\n    gl.FRAGMENT_SHADER,\n    gl.HIGH_FLOAT,\n  );\n  ContextLimits._highpFloatSupported = highpFloat.precision !== 0;\n  const highpInt = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT);\n  ContextLimits._highpIntSupported = highpInt.rangeMax !== 0;\n\n  this._antialias = gl.getContextAttributes().antialias;\n\n  // Query and initialize extensions\n  this._standardDerivatives = !!getExtension(gl, [\"OES_standard_derivatives\"]);\n  this._blendMinmax = !!getExtension(gl, [\"EXT_blend_minmax\"]);\n  this._elementIndexUint = !!getExtension(gl, [\"OES_element_index_uint\"]);\n  this._depthTexture = !!getExtension(gl, [\n    \"WEBGL_depth_texture\",\n    \"WEBKIT_WEBGL_depth_texture\",\n  ]);\n  this._fragDepth = !!getExtension(gl, [\"EXT_frag_depth\"]);\n  this._debugShaders = getExtension(gl, [\"WEBGL_debug_shaders\"]);\n\n  this._textureFloat = !!getExtension(gl, [\"OES_texture_float\"]);\n  this._textureHalfFloat = !!getExtension(gl, [\"OES_texture_half_float\"]);\n\n  this._textureFloatLinear = !!getExtension(gl, [\"OES_texture_float_linear\"]);\n  this._textureHalfFloatLinear = !!getExtension(gl, [\n    \"OES_texture_half_float_linear\",\n  ]);\n\n  this._supportsTextureLod = !!getExtension(gl, [\"EXT_shader_texture_lod\"]);\n\n  this._colorBufferFloat = !!getExtension(gl, [\n    \"EXT_color_buffer_float\",\n    \"WEBGL_color_buffer_float\",\n  ]);\n  this._floatBlend = !!getExtension(gl, [\"EXT_float_blend\"]);\n  this._colorBufferHalfFloat = !!getExtension(gl, [\n    \"EXT_color_buffer_half_float\",\n  ]);\n\n  this._s3tc = !!getExtension(gl, [\n    \"WEBGL_compressed_texture_s3tc\",\n    \"MOZ_WEBGL_compressed_texture_s3tc\",\n    \"WEBKIT_WEBGL_compressed_texture_s3tc\",\n  ]);\n  this._pvrtc = !!getExtension(gl, [\n    \"WEBGL_compressed_texture_pvrtc\",\n    \"WEBKIT_WEBGL_compressed_texture_pvrtc\",\n  ]);\n  this._astc = !!getExtension(gl, [\"WEBGL_compressed_texture_astc\"]);\n  this._etc = !!getExtension(gl, [\"WEBG_compressed_texture_etc\"]);\n  this._etc1 = !!getExtension(gl, [\"WEBGL_compressed_texture_etc1\"]);\n  this._bc7 = !!getExtension(gl, [\"EXT_texture_compression_bptc\"]);\n\n  // It is necessary to pass supported formats to loadKTX2\n  // because imagery layers don't have access to the context.\n  loadKTX2.setKTX2SupportedFormats(\n    this._s3tc,\n    this._pvrtc,\n    this._astc,\n    this._etc,\n    this._etc1,\n    this._bc7,\n  );\n\n  const textureFilterAnisotropic = allowTextureFilterAnisotropic\n    ? getExtension(gl, [\n        \"EXT_texture_filter_anisotropic\",\n        \"WEBKIT_EXT_texture_filter_anisotropic\",\n      ])\n    : undefined;\n  this._textureFilterAnisotropic = textureFilterAnisotropic;\n  ContextLimits._maximumTextureFilterAnisotropy = defined(\n    textureFilterAnisotropic,\n  )\n    ? gl.getParameter(textureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n    : 1.0;\n\n  let glCreateVertexArray;\n  let glBindVertexArray;\n  let glDeleteVertexArray;\n\n  let glDrawElementsInstanced;\n  let glDrawArraysInstanced;\n  let glVertexAttribDivisor;\n\n  let glDrawBuffers;\n\n  let vertexArrayObject;\n  let instancedArrays;\n  let drawBuffers;\n\n  if (webgl2) {\n    const that = this;\n\n    glCreateVertexArray = function () {\n      return that._gl.createVertexArray();\n    };\n    glBindVertexArray = function (vao) {\n      that._gl.bindVertexArray(vao);\n    };\n    glDeleteVertexArray = function (vao) {\n      that._gl.deleteVertexArray(vao);\n    };\n\n    glDrawElementsInstanced = function (\n      mode,\n      count,\n      type,\n      offset,\n      instanceCount,\n    ) {\n      gl.drawElementsInstanced(mode, count, type, offset, instanceCount);\n    };\n    glDrawArraysInstanced = function (mode, first, count, instanceCount) {\n      gl.drawArraysInstanced(mode, first, count, instanceCount);\n    };\n    glVertexAttribDivisor = function (index, divisor) {\n      gl.vertexAttribDivisor(index, divisor);\n    };\n\n    glDrawBuffers = function (buffers) {\n      gl.drawBuffers(buffers);\n    };\n  } else {\n    vertexArrayObject = getExtension(gl, [\"OES_vertex_array_object\"]);\n    if (defined(vertexArrayObject)) {\n      glCreateVertexArray = function () {\n        return vertexArrayObject.createVertexArrayOES();\n      };\n      glBindVertexArray = function (vertexArray) {\n        vertexArrayObject.bindVertexArrayOES(vertexArray);\n      };\n      glDeleteVertexArray = function (vertexArray) {\n        vertexArrayObject.deleteVertexArrayOES(vertexArray);\n      };\n    }\n\n    instancedArrays = getExtension(gl, [\"ANGLE_instanced_arrays\"]);\n    if (defined(instancedArrays)) {\n      glDrawElementsInstanced = function (\n        mode,\n        count,\n        type,\n        offset,\n        instanceCount,\n      ) {\n        instancedArrays.drawElementsInstancedANGLE(\n          mode,\n          count,\n          type,\n          offset,\n          instanceCount,\n        );\n      };\n      glDrawArraysInstanced = function (mode, first, count, instanceCount) {\n        instancedArrays.drawArraysInstancedANGLE(\n          mode,\n          first,\n          count,\n          instanceCount,\n        );\n      };\n      glVertexAttribDivisor = function (index, divisor) {\n        instancedArrays.vertexAttribDivisorANGLE(index, divisor);\n      };\n    }\n\n    drawBuffers = getExtension(gl, [\"WEBGL_draw_buffers\"]);\n    if (defined(drawBuffers)) {\n      glDrawBuffers = function (buffers) {\n        drawBuffers.drawBuffersWEBGL(buffers);\n      };\n    }\n  }\n\n  this.glCreateVertexArray = glCreateVertexArray;\n  this.glBindVertexArray = glBindVertexArray;\n  this.glDeleteVertexArray = glDeleteVertexArray;\n\n  this.glDrawElementsInstanced = glDrawElementsInstanced;\n  this.glDrawArraysInstanced = glDrawArraysInstanced;\n  this.glVertexAttribDivisor = glVertexAttribDivisor;\n\n  this.glDrawBuffers = glDrawBuffers;\n\n  this._vertexArrayObject = !!vertexArrayObject;\n  this._instancedArrays = !!instancedArrays;\n  this._drawBuffers = !!drawBuffers;\n\n  ContextLimits._maximumDrawBuffers = this.drawBuffers\n    ? gl.getParameter(WebGLConstants.MAX_DRAW_BUFFERS)\n    : 1;\n  ContextLimits._maximumColorAttachments = this.drawBuffers\n    ? gl.getParameter(WebGLConstants.MAX_COLOR_ATTACHMENTS)\n    : 1;\n\n  this._clearColor = new Color(0.0, 0.0, 0.0, 0.0);\n  this._clearDepth = 1.0;\n  this._clearStencil = 0;\n\n  const us = new UniformState();\n  const ps = new PassState(this);\n  const rs = RenderState.fromCache();\n\n  this._defaultPassState = ps;\n  this._defaultRenderState = rs;\n  // default texture has a value of (1, 1, 1)\n  // default emissive texture has a value of (0, 0, 0)\n  // default normal texture is +z which is encoded as (0.5, 0.5, 1)\n  this._defaultTexture = undefined;\n  this._defaultEmissiveTexture = undefined;\n  this._defaultNormalTexture = undefined;\n  this._defaultCubeMap = undefined;\n\n  this._us = us;\n  this._currentRenderState = rs;\n  this._currentPassState = ps;\n  this._currentFramebuffer = undefined;\n  this._maxFrameTextureUnitIndex = 0;\n\n  // Vertex attribute divisor state cache. Workaround for ANGLE (also look at VertexArray.setVertexAttribDivisor)\n  this._vertexAttribDivisors = [];\n  this._previousDrawInstanced = false;\n  for (let i = 0; i < ContextLimits._maximumVertexAttributes; i++) {\n    this._vertexAttribDivisors.push(0);\n  }\n\n  this._pickObjects = {};\n  this._nextPickColor = new Uint32Array(1);\n\n  /**\n   * The options used to construct this context\n   *\n   * @type {ContextOptions}\n   */\n  this.options = {\n    getWebGLStub: getWebGLStub,\n    requestWebgl1: requestWebgl1,\n    webgl: webglOptions,\n    allowTextureFilterAnisotropic: allowTextureFilterAnisotropic,\n  };\n\n  /**\n   * A cache of objects tied to this context.  Just before the Context is destroyed,\n   * <code>destroy</code> will be invoked on each object in this object literal that has\n   * such a method.  This is useful for caching any objects that might otherwise\n   * be stored globally, except they're tied to a particular context, and to manage\n   * their lifetime.\n   *\n   * @type {object}\n   */\n  this.cache = {};\n\n  RenderState.apply(gl, rs, ps);\n}\n\n/**\n * @typedef {object} ContextOptions\n *\n * Options to control the setting up of a WebGL Context.\n * <p>\n * <code>allowTextureFilterAnisotropic</code> defaults to true, which enables\n * anisotropic texture filtering when the WebGL extension is supported.\n * Setting this to false will improve performance, but hurt visual quality,\n * especially for horizon views.\n * </p>\n *\n * @property {boolean} [requestWebgl1=false] If true and the browser supports it, use a WebGL 1 rendering context\n * @property {boolean} [allowTextureFilterAnisotropic=true] If true, use anisotropic filtering during texture sampling\n * @property {WebGLOptions} [webgl] WebGL options to be passed on to canvas.getContext\n * @property {Function} [getWebGLStub] A function to create a WebGL stub for testing\n */\n\n/**\n * @private\n * @param {HTMLCanvasElement} canvas The canvas element to which the context will be associated\n * @param {WebGLOptions} webglOptions WebGL options to be passed on to HTMLCanvasElement.getContext()\n * @param {boolean} requestWebgl1 Whether to request a WebGLRenderingContext or a WebGL2RenderingContext.\n * @returns {WebGLRenderingContext|WebGL2RenderingContext}\n */\nfunction getWebGLContext(canvas, webglOptions, requestWebgl1) {\n  if (typeof WebGLRenderingContext === \"undefined\") {\n    throw new RuntimeError(\n      \"The browser does not support WebGL.  Visit http://get.webgl.org.\",\n    );\n  }\n\n  // Ensure that WebGL 2 is supported when it is requested. Otherwise, fall back to WebGL 1.\n  const webgl2Supported = typeof WebGL2RenderingContext !== \"undefined\";\n  if (!requestWebgl1 && !webgl2Supported) {\n    requestWebgl1 = true;\n  }\n\n  const contextType = requestWebgl1 ? \"webgl\" : \"webgl2\";\n  const glContext = canvas.getContext(contextType, webglOptions);\n\n  if (!defined(glContext)) {\n    throw new RuntimeError(\n      \"The browser supports WebGL, but initialization failed.\",\n    );\n  }\n\n  return glContext;\n}\n\n/**\n * @typedef {object} WebGLOptions\n *\n * WebGL options to be passed on to HTMLCanvasElement.getContext().\n * See {@link https://registry.khronos.org/webgl/specs/latest/1.0/#5.2|WebGLContextAttributes}\n * but note the modified defaults for 'alpha', 'stencil', and 'powerPreference'\n *\n * <p>\n * <code>alpha</code> defaults to false, which can improve performance\n * compared to the standard WebGL default of true.  If an application needs\n * to composite Cesium above other HTML elements using alpha-blending, set\n * <code>alpha</code> to true.\n * </p>\n *\n * @property {boolean} [alpha=false]\n * @property {boolean} [depth=true]\n * @property {boolean} [stencil=false]\n * @property {boolean} [antialias=true]\n * @property {boolean} [premultipliedAlpha=true]\n * @property {boolean} [preserveDrawingBuffer=false]\n * @property {(\"default\"|\"low-power\"|\"high-performance\")} [powerPreference=\"high-performance\"]\n * @property {boolean} [failIfMajorPerformanceCaveat=false]\n */\n\nfunction errorToString(gl, error) {\n  let message = \"WebGL Error:  \";\n  switch (error) {\n    case gl.INVALID_ENUM:\n      message += \"INVALID_ENUM\";\n      break;\n    case gl.INVALID_VALUE:\n      message += \"INVALID_VALUE\";\n      break;\n    case gl.INVALID_OPERATION:\n      message += \"INVALID_OPERATION\";\n      break;\n    case gl.OUT_OF_MEMORY:\n      message += \"OUT_OF_MEMORY\";\n      break;\n    case gl.CONTEXT_LOST_WEBGL:\n      message += \"CONTEXT_LOST_WEBGL lost\";\n      break;\n    default:\n      message += `Unknown (${error})`;\n  }\n\n  return message;\n}\n\nfunction createErrorMessage(gl, glFunc, glFuncArguments, error) {\n  let message = `${errorToString(gl, error)}: ${glFunc.name}(`;\n\n  for (let i = 0; i < glFuncArguments.length; ++i) {\n    if (i !== 0) {\n      message += \", \";\n    }\n    message += glFuncArguments[i];\n  }\n  message += \");\";\n\n  return message;\n}\n\nfunction throwOnError(gl, glFunc, glFuncArguments) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new RuntimeError(\n      createErrorMessage(gl, glFunc, glFuncArguments, error),\n    );\n  }\n}\n\nfunction makeGetterSetter(gl, propertyName, logFunction) {\n  return {\n    get: function () {\n      const value = gl[propertyName];\n      logFunction(gl, `get: ${propertyName}`, value);\n      return gl[propertyName];\n    },\n    set: function (value) {\n      gl[propertyName] = value;\n      logFunction(gl, `set: ${propertyName}`, value);\n    },\n  };\n}\n\nfunction wrapGL(gl, logFunction) {\n  if (!defined(logFunction)) {\n    return gl;\n  }\n\n  function wrapFunction(property) {\n    return function () {\n      const result = property.apply(gl, arguments);\n      logFunction(gl, property, arguments);\n      return result;\n    };\n  }\n\n  const glWrapper = {};\n\n  // JavaScript linters normally demand that a for..in loop must directly contain an if,\n  // but in our loop below, we actually intend to iterate all properties, including\n  // those in the prototype.\n  /*eslint-disable guard-for-in*/\n  for (const propertyName in gl) {\n    const property = gl[propertyName];\n\n    // wrap any functions we encounter, otherwise just copy the property to the wrapper.\n    if (property instanceof Function) {\n      glWrapper[propertyName] = wrapFunction(property);\n    } else {\n      Object.defineProperty(\n        glWrapper,\n        propertyName,\n        makeGetterSetter(gl, propertyName, logFunction),\n      );\n    }\n  }\n  /*eslint-enable guard-for-in*/\n\n  return glWrapper;\n}\n\nfunction getExtension(gl, names) {\n  const length = names.length;\n  for (let i = 0; i < length; ++i) {\n    const extension = gl.getExtension(names[i]);\n    if (extension) {\n      return extension;\n    }\n  }\n\n  return undefined;\n}\n\nconst defaultFramebufferMarker = {};\n\nObject.defineProperties(Context.prototype, {\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  webgl2: {\n    get: function () {\n      return this._webgl2;\n    },\n  },\n  canvas: {\n    get: function () {\n      return this._canvas;\n    },\n  },\n  shaderCache: {\n    get: function () {\n      return this._shaderCache;\n    },\n  },\n  textureCache: {\n    get: function () {\n      return this._textureCache;\n    },\n  },\n  uniformState: {\n    get: function () {\n      return this._us;\n    },\n  },\n\n  /**\n   * The number of stencil bits per pixel in the default bound framebuffer.  The minimum is eight bits.\n   * @memberof Context.prototype\n   * @type {number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>STENCIL_BITS</code>.\n   */\n  stencilBits: {\n    get: function () {\n      return this._stencilBits;\n    },\n  },\n\n  /**\n   * <code>true</code> if the WebGL context supports stencil buffers.\n   * Stencil buffers are not supported by all systems.\n   * @memberof Context.prototype\n   * @type {boolean}\n   */\n  stencilBuffer: {\n    get: function () {\n      return this._stencilBits >= 8;\n    },\n  },\n\n  /**\n   * <code>true</code> if the WebGL context supports antialiasing.  By default\n   * antialiasing is requested, but it is not supported by all systems.\n   * @memberof Context.prototype\n   * @type {boolean}\n   */\n  antialias: {\n    get: function () {\n      return this._antialias;\n    },\n  },\n\n  /**\n   * <code>true</code> if the WebGL context supports multisample antialiasing. Requires\n   * WebGL2.\n   * @memberof Context.prototype\n   * @type {boolean}\n   */\n  msaa: {\n    get: function () {\n      return this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the OES_standard_derivatives extension is supported.  This\n   * extension provides access to <code>dFdx</code>, <code>dFdy</code>, and <code>fwidth</code>\n   * functions from GLSL.  A shader using these functions still needs to explicitly enable the\n   * extension with <code>#extension GL_OES_standard_derivatives : enable</code>.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/gles/extensions/OES/OES_standard_derivatives.txt|OES_standard_derivatives}\n   */\n  standardDerivatives: {\n    get: function () {\n      return this._standardDerivatives || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the EXT_float_blend extension is supported. This\n   * extension enables blending with 32-bit float values.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_float_blend/}\n   */\n  floatBlend: {\n    get: function () {\n      return this._floatBlend;\n    },\n  },\n\n  /**\n   * <code>true</code> if the EXT_blend_minmax extension is supported.  This\n   * extension extends blending capabilities by adding two new blend equations:\n   * the minimum or maximum color components of the source and destination colors.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_blend_minmax/}\n   */\n  blendMinmax: {\n    get: function () {\n      return this._blendMinmax || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the OES_element_index_uint extension is supported.  This\n   * extension allows the use of unsigned int indices, which can improve performance by\n   * eliminating batch breaking caused by unsigned short indices.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/OES_element_index_uint/|OES_element_index_uint}\n   */\n  elementIndexUint: {\n    get: function () {\n      return this._elementIndexUint || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_depth_texture is supported.  This extension provides\n   * access to depth textures that, for example, can be attached to framebuffers for shadow mapping.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n   */\n  depthTexture: {\n    get: function () {\n      return this._depthTexture || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if OES_texture_float is supported. This extension provides\n   * access to floating point textures that, for example, can be attached to framebuffers for high dynamic range.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_float/}\n   */\n  floatingPointTexture: {\n    get: function () {\n      return this._webgl2 || this._textureFloat;\n    },\n  },\n\n  /**\n   * <code>true</code> if OES_texture_half_float is supported. This extension provides\n   * access to floating point textures that, for example, can be attached to framebuffers for high dynamic range.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_half_float/}\n   */\n  halfFloatingPointTexture: {\n    get: function () {\n      return this._webgl2 || this._textureHalfFloat;\n    },\n  },\n\n  /**\n   * <code>true</code> if OES_texture_float_linear is supported. This extension provides\n   * access to linear sampling methods for minification and magnification filters of floating-point textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_float_linear/}\n   */\n  textureFloatLinear: {\n    get: function () {\n      return this._textureFloatLinear;\n    },\n  },\n\n  /**\n   * <code>true</code> if OES_texture_half_float_linear is supported. This extension provides\n   * access to linear sampling methods for minification and magnification filters of half floating-point textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_half_float_linear/}\n   */\n  textureHalfFloatLinear: {\n    get: function () {\n      return (\n        (this._webgl2 && this._textureFloatLinear) ||\n        (!this._webgl2 && this._textureHalfFloatLinear)\n      );\n    },\n  },\n\n  /**\n   * <code>true</code> if EXT_shader_texture_lod is supported. This extension provides\n   * access to explicit LOD selection in texture sampling functions.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://registry.khronos.org/webgl/extensions/EXT_shader_texture_lod/}\n   */\n  supportsTextureLod: {\n    get: function () {\n      return this._webgl2 || this._supportsTextureLod;\n    },\n  },\n\n  /**\n   * <code>true</code> if EXT_texture_filter_anisotropic is supported. This extension provides\n   * access to anisotropic filtering for textured surfaces at an oblique angle from the viewer.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_texture_filter_anisotropic/}\n   */\n  textureFilterAnisotropic: {\n    get: function () {\n      return !!this._textureFilterAnisotropic;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_s3tc is supported.  This extension provides\n   * access to DXT compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/}\n   */\n  s3tc: {\n    get: function () {\n      return this._s3tc;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_pvrtc is supported.  This extension provides\n   * access to PVR compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/}\n   */\n  pvrtc: {\n    get: function () {\n      return this._pvrtc;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_astc is supported.  This extension provides\n   * access to ASTC compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/}\n   */\n  astc: {\n    get: function () {\n      return this._astc;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_etc is supported.  This extension provides\n   * access to ETC compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc/}\n   */\n  etc: {\n    get: function () {\n      return this._etc;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_etc1 is supported.  This extension provides\n   * access to ETC1 compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc1/}\n   */\n  etc1: {\n    get: function () {\n      return this._etc1;\n    },\n  },\n\n  /**\n   * <code>true</code> if EXT_texture_compression_bptc is supported.  This extension provides\n   * access to BC7 compressed textures.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_texture_compression_bptc/}\n   */\n  bc7: {\n    get: function () {\n      return this._bc7;\n    },\n  },\n\n  /**\n   * <code>true</code> if S3TC, PVRTC, ASTC, ETC, ETC1, or BC7 compression is supported.\n   * @memberof Context.prototype\n   * @type {boolean}\n   */\n  supportsBasis: {\n    get: function () {\n      return (\n        this._s3tc ||\n        this._pvrtc ||\n        this._astc ||\n        this._etc ||\n        this._etc1 ||\n        this._bc7\n      );\n    },\n  },\n\n  /**\n   * <code>true</code> if the OES_vertex_array_object extension is supported.  This\n   * extension can improve performance by reducing the overhead of switching vertex arrays.\n   * When enabled, this extension is automatically used by {@link VertexArray}.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/OES_vertex_array_object/|OES_vertex_array_object}\n   */\n  vertexArrayObject: {\n    get: function () {\n      return this._vertexArrayObject || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the EXT_frag_depth extension is supported.  This\n   * extension provides access to the <code>gl_FragDepthEXT</code> built-in output variable\n   * from GLSL fragment shaders.  A shader using these functions still needs to explicitly enable the\n   * extension with <code>#extension GL_EXT_frag_depth : enable</code>.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/EXT_frag_depth/|EXT_frag_depth}\n   */\n  fragmentDepth: {\n    get: function () {\n      return this._fragDepth || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the ANGLE_instanced_arrays extension is supported.  This\n   * extension provides access to instanced rendering.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/ANGLE_instanced_arrays}\n   */\n  instancedArrays: {\n    get: function () {\n      return this._instancedArrays || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the EXT_color_buffer_float extension is supported.  This\n   * extension makes the gl.RGBA32F format color renderable.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_color_buffer_float/}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_float/}\n   */\n  colorBufferFloat: {\n    get: function () {\n      return this._colorBufferFloat;\n    },\n  },\n\n  /**\n   * <code>true</code> if the EXT_color_buffer_half_float extension is supported.  This\n   * extension makes the format gl.RGBA16F format color renderable.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_half_float/}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_float/}\n   */\n  colorBufferHalfFloat: {\n    get: function () {\n      return (\n        (this._webgl2 && this._colorBufferFloat) ||\n        (!this._webgl2 && this._colorBufferHalfFloat)\n      );\n    },\n  },\n\n  /**\n   * <code>true</code> if the WEBGL_draw_buffers extension is supported. This\n   * extensions provides support for multiple render targets. The framebuffer object can have mutiple\n   * color attachments and the GLSL fragment shader can write to the built-in output array <code>gl_FragData</code>.\n   * A shader using this feature needs to explicitly enable the extension with\n   * <code>#extension GL_EXT_draw_buffers : enable</code>.\n   * @memberof Context.prototype\n   * @type {boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_draw_buffers/|WEBGL_draw_buffers}\n   */\n  drawBuffers: {\n    get: function () {\n      return this._drawBuffers || this._webgl2;\n    },\n  },\n\n  debugShaders: {\n    get: function () {\n      return this._debugShaders;\n    },\n  },\n\n  throwOnWebGLError: {\n    get: function () {\n      return this._throwOnWebGLError;\n    },\n    set: function (value) {\n      this._throwOnWebGLError = value;\n      this._gl = wrapGL(\n        this._originalGLContext,\n        value ? throwOnError : undefined,\n      );\n    },\n  },\n\n  /**\n   * A 1x1 RGBA texture initialized to [255, 255, 255, 255].  This can\n   * be used as a placeholder texture while other textures are downloaded.\n   * @memberof Context.prototype\n   * @type {Texture}\n   */\n  defaultTexture: {\n    get: function () {\n      if (this._defaultTexture === undefined) {\n        this._defaultTexture = new Texture({\n          context: this,\n          source: {\n            width: 1,\n            height: 1,\n            arrayBufferView: new Uint8Array([255, 255, 255, 255]),\n          },\n          flipY: false,\n        });\n      }\n\n      return this._defaultTexture;\n    },\n  },\n  /**\n   * A 1x1 RGB texture initialized to [0, 0, 0] representing a material that is\n   * not emissive. This can be used as a placeholder texture for emissive\n   * textures while other textures are downloaded.\n   * @memberof Context.prototype\n   * @type {Texture}\n   */\n  defaultEmissiveTexture: {\n    get: function () {\n      if (this._defaultEmissiveTexture === undefined) {\n        this._defaultEmissiveTexture = new Texture({\n          context: this,\n          pixelFormat: PixelFormat.RGB,\n          source: {\n            width: 1,\n            height: 1,\n            arrayBufferView: new Uint8Array([0, 0, 0]),\n          },\n          flipY: false,\n        });\n      }\n\n      return this._defaultEmissiveTexture;\n    },\n  },\n  /**\n   * A 1x1 RGBA texture initialized to [128, 128, 255] to encode a tangent\n   * space normal pointing in the +z direction, i.e. (0, 0, 1). This can\n   * be used as a placeholder normal texture while other textures are\n   * downloaded.\n   * @memberof Context.prototype\n   * @type {Texture}\n   */\n  defaultNormalTexture: {\n    get: function () {\n      if (this._defaultNormalTexture === undefined) {\n        this._defaultNormalTexture = new Texture({\n          context: this,\n          pixelFormat: PixelFormat.RGB,\n          source: {\n            width: 1,\n            height: 1,\n            arrayBufferView: new Uint8Array([128, 128, 255]),\n          },\n          flipY: false,\n        });\n      }\n\n      return this._defaultNormalTexture;\n    },\n  },\n\n  /**\n   * A cube map, where each face is a 1x1 RGBA texture initialized to\n   * [255, 255, 255, 255].  This can be used as a placeholder cube map while\n   * other cube maps are downloaded.\n   * @memberof Context.prototype\n   * @type {CubeMap}\n   */\n  defaultCubeMap: {\n    get: function () {\n      if (this._defaultCubeMap === undefined) {\n        const face = {\n          width: 1,\n          height: 1,\n          arrayBufferView: new Uint8Array([255, 255, 255, 255]),\n        };\n\n        this._defaultCubeMap = new CubeMap({\n          context: this,\n          source: {\n            positiveX: face,\n            negativeX: face,\n            positiveY: face,\n            negativeY: face,\n            positiveZ: face,\n            negativeZ: face,\n          },\n          flipY: false,\n        });\n      }\n\n      return this._defaultCubeMap;\n    },\n  },\n\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Context.prototype\n   * @type {number}\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferHeight: {\n    get: function () {\n      return this._gl.drawingBufferHeight;\n    },\n  },\n\n  /**\n   * The drawingBufferWidth of the underlying GL context.\n   * @memberof Context.prototype\n   * @type {number}\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferWidth|drawingBufferWidth}\n   */\n  drawingBufferWidth: {\n    get: function () {\n      return this._gl.drawingBufferWidth;\n    },\n  },\n\n  /**\n   * Gets an object representing the currently bound framebuffer.  While this instance is not an actual\n   * {@link Framebuffer}, it is used to represent the default framebuffer in calls to\n   * {@link Texture.fromFramebuffer}.\n   * @memberof Context.prototype\n   * @type {object}\n   */\n  defaultFramebuffer: {\n    get: function () {\n      return defaultFramebufferMarker;\n    },\n  },\n});\n\n/**\n * Validates a framebuffer.\n * Available in debug builds only.\n * @private\n */\nfunction validateFramebuffer(context) {\n  //>>includeStart('debug', pragmas.debug);\n  if (context.validateFramebuffer) {\n    const gl = context._gl;\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      let message;\n\n      switch (status) {\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n          message =\n            \"Framebuffer is not complete.  Incomplete attachment: at least one attachment point with a renderbuffer or texture attached has its attached object no longer in existence or has an attached image with a width or height of zero, or the color attachment point has a non-color-renderable image attached, or the depth attachment point has a non-depth-renderable image attached, or the stencil attachment point has a non-stencil-renderable image attached.  Color-renderable formats include GL_RGBA4, GL_RGB5_A1, and GL_RGB565. GL_DEPTH_COMPONENT16 is the only depth-renderable format. GL_STENCIL_INDEX8 is the only stencil-renderable format.\";\n          break;\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n          message =\n            \"Framebuffer is not complete.  Incomplete dimensions: not all attached images have the same width and height.\";\n          break;\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n          message =\n            \"Framebuffer is not complete.  Missing attachment: no images are attached to the framebuffer.\";\n          break;\n        case gl.FRAMEBUFFER_UNSUPPORTED:\n          message =\n            \"Framebuffer is not complete.  Unsupported: the combination of internal formats of the attached images violates an implementation-dependent set of restrictions.\";\n          break;\n      }\n\n      throw new DeveloperError(message);\n    }\n  }\n  //>>includeEnd('debug');\n}\n\nfunction applyRenderState(context, renderState, passState, clear) {\n  const previousRenderState = context._currentRenderState;\n  const previousPassState = context._currentPassState;\n  context._currentRenderState = renderState;\n  context._currentPassState = passState;\n  RenderState.partialApply(\n    context._gl,\n    previousRenderState,\n    renderState,\n    previousPassState,\n    passState,\n    clear,\n  );\n}\n\nlet scratchBackBufferArray;\n// this check must use typeof, not defined, because defined doesn't work with undeclared variables.\nif (typeof WebGLRenderingContext !== \"undefined\") {\n  scratchBackBufferArray = [WebGLConstants.BACK];\n}\n\nfunction bindFramebuffer(context, framebuffer) {\n  if (framebuffer !== context._currentFramebuffer) {\n    context._currentFramebuffer = framebuffer;\n    let buffers = scratchBackBufferArray;\n\n    if (defined(framebuffer)) {\n      framebuffer._bind();\n      validateFramebuffer(context);\n\n      // TODO: Need a way for a command to give what draw buffers are active.\n      buffers = framebuffer._getActiveColorAttachments();\n    } else {\n      const gl = context._gl;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n\n    if (context.drawBuffers) {\n      context.glDrawBuffers(buffers);\n    }\n  }\n}\n\nconst defaultClearCommand = new ClearCommand();\n\nContext.prototype.clear = function (clearCommand, passState) {\n  clearCommand = defaultValue(clearCommand, defaultClearCommand);\n  passState = defaultValue(passState, this._defaultPassState);\n\n  const gl = this._gl;\n  let bitmask = 0;\n\n  const c = clearCommand.color;\n  const d = clearCommand.depth;\n  const s = clearCommand.stencil;\n\n  if (defined(c)) {\n    if (!Color.equals(this._clearColor, c)) {\n      Color.clone(c, this._clearColor);\n      gl.clearColor(c.red, c.green, c.blue, c.alpha);\n    }\n    bitmask |= gl.COLOR_BUFFER_BIT;\n  }\n\n  if (defined(d)) {\n    if (d !== this._clearDepth) {\n      this._clearDepth = d;\n      gl.clearDepth(d);\n    }\n    bitmask |= gl.DEPTH_BUFFER_BIT;\n  }\n\n  if (defined(s)) {\n    if (s !== this._clearStencil) {\n      this._clearStencil = s;\n      gl.clearStencil(s);\n    }\n    bitmask |= gl.STENCIL_BUFFER_BIT;\n  }\n\n  const rs = defaultValue(clearCommand.renderState, this._defaultRenderState);\n  applyRenderState(this, rs, passState, true);\n\n  // The command's framebuffer takes presidence over the pass' framebuffer, e.g., for off-screen rendering.\n  const framebuffer = defaultValue(\n    clearCommand.framebuffer,\n    passState.framebuffer,\n  );\n  bindFramebuffer(this, framebuffer);\n\n  gl.clear(bitmask);\n};\n\nfunction beginDraw(\n  context,\n  framebuffer,\n  passState,\n  shaderProgram,\n  renderState,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(framebuffer) && renderState.depthTest) {\n    if (renderState.depthTest.enabled && !framebuffer.hasDepthAttachment) {\n      throw new DeveloperError(\n        \"The depth test can not be enabled (drawCommand.renderState.depthTest.enabled) because the framebuffer (drawCommand.framebuffer) does not have a depth or depth-stencil renderbuffer.\",\n      );\n    }\n  }\n  //>>includeEnd('debug');\n\n  bindFramebuffer(context, framebuffer);\n  applyRenderState(context, renderState, passState, false);\n  shaderProgram._bind();\n  context._maxFrameTextureUnitIndex = Math.max(\n    context._maxFrameTextureUnitIndex,\n    shaderProgram.maximumTextureUnitIndex,\n  );\n}\n\nfunction continueDraw(context, drawCommand, shaderProgram, uniformMap) {\n  const primitiveType = drawCommand._primitiveType;\n  const va = drawCommand._vertexArray;\n  let offset = drawCommand._offset;\n  let count = drawCommand._count;\n  const instanceCount = drawCommand.instanceCount;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!PrimitiveType.validate(primitiveType)) {\n    throw new DeveloperError(\n      \"drawCommand.primitiveType is required and must be valid.\",\n    );\n  }\n\n  Check.defined(\"drawCommand.vertexArray\", va);\n  Check.typeOf.number.greaterThanOrEquals(\"drawCommand.offset\", offset, 0);\n  if (defined(count)) {\n    Check.typeOf.number.greaterThanOrEquals(\"drawCommand.count\", count, 0);\n  }\n  Check.typeOf.number.greaterThanOrEquals(\n    \"drawCommand.instanceCount\",\n    instanceCount,\n    0,\n  );\n  if (instanceCount > 0 && !context.instancedArrays) {\n    throw new DeveloperError(\"Instanced arrays extension is not supported\");\n  }\n  //>>includeEnd('debug');\n\n  context._us.model = defaultValue(drawCommand._modelMatrix, Matrix4.IDENTITY);\n  shaderProgram._setUniforms(\n    uniformMap,\n    context._us,\n    context.validateShaderProgram,\n  );\n\n  va._bind();\n  const indexBuffer = va.indexBuffer;\n\n  if (defined(indexBuffer)) {\n    offset = offset * indexBuffer.bytesPerIndex; // offset in vertices to offset in bytes\n    if (defined(count)) {\n      count = Math.min(count, indexBuffer.numberOfIndices);\n    } else {\n      count = indexBuffer.numberOfIndices;\n    }\n    if (instanceCount === 0) {\n      context._gl.drawElements(\n        primitiveType,\n        count,\n        indexBuffer.indexDatatype,\n        offset,\n      );\n    } else {\n      context.glDrawElementsInstanced(\n        primitiveType,\n        count,\n        indexBuffer.indexDatatype,\n        offset,\n        instanceCount,\n      );\n    }\n  } else {\n    if (defined(count)) {\n      count = Math.min(count, va.numberOfVertices);\n    } else {\n      count = va.numberOfVertices;\n    }\n    if (instanceCount === 0) {\n      context._gl.drawArrays(primitiveType, offset, count);\n    } else {\n      context.glDrawArraysInstanced(\n        primitiveType,\n        offset,\n        count,\n        instanceCount,\n      );\n    }\n  }\n\n  va._unBind();\n}\n\nContext.prototype.draw = function (\n  drawCommand,\n  passState,\n  shaderProgram,\n  uniformMap,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"drawCommand\", drawCommand);\n  Check.defined(\"drawCommand.shaderProgram\", drawCommand._shaderProgram);\n  //>>includeEnd('debug');\n\n  passState = defaultValue(passState, this._defaultPassState);\n  // The command's framebuffer takes precedence over the pass' framebuffer, e.g., for off-screen rendering.\n  const framebuffer = defaultValue(\n    drawCommand._framebuffer,\n    passState.framebuffer,\n  );\n  const renderState = defaultValue(\n    drawCommand._renderState,\n    this._defaultRenderState,\n  );\n  shaderProgram = defaultValue(shaderProgram, drawCommand._shaderProgram);\n  uniformMap = defaultValue(uniformMap, drawCommand._uniformMap);\n\n  beginDraw(this, framebuffer, passState, shaderProgram, renderState);\n  continueDraw(this, drawCommand, shaderProgram, uniformMap);\n};\n\nContext.prototype.endFrame = function () {\n  const gl = this._gl;\n  gl.useProgram(null);\n\n  this._currentFramebuffer = undefined;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n  const buffers = scratchBackBufferArray;\n  if (this.drawBuffers) {\n    this.glDrawBuffers(buffers);\n  }\n\n  const length = this._maxFrameTextureUnitIndex;\n  this._maxFrameTextureUnitIndex = 0;\n\n  for (let i = 0; i < length; ++i) {\n    gl.activeTexture(gl.TEXTURE0 + i);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n  }\n};\n\n/**\n * @private\n * @param {object} readState An object with the following properties:\n * @param {number} [readState.x=0] The x offset of the rectangle to read from.\n * @param {number} [readState.y=0] The y offset of the rectangle to read from.\n * @param {number} [readState.width=gl.drawingBufferWidth] The width of the rectangle to read from.\n * @param {number} [readState.height=gl.drawingBufferHeight] The height of the rectangle to read from.\n * @param {Framebuffer} [readState.framebuffer] The framebuffer to read from. If undefined, the read will be from the default framebuffer.\n * @returns {Uint8Array|Uint16Array|Float32Array|Uint32Array} The pixels in the specified rectangle.\n */\nContext.prototype.readPixels = function (readState) {\n  const gl = this._gl;\n\n  readState = defaultValue(readState, defaultValue.EMPTY_OBJECT);\n  const x = Math.max(defaultValue(readState.x, 0), 0);\n  const y = Math.max(defaultValue(readState.y, 0), 0);\n  const width = defaultValue(readState.width, gl.drawingBufferWidth);\n  const height = defaultValue(readState.height, gl.drawingBufferHeight);\n  const framebuffer = readState.framebuffer;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"readState.width\", width, 0);\n  Check.typeOf.number.greaterThan(\"readState.height\", height, 0);\n  //>>includeEnd('debug');\n\n  let pixelDatatype = PixelDatatype.UNSIGNED_BYTE;\n  if (defined(framebuffer) && framebuffer.numberOfColorAttachments > 0) {\n    pixelDatatype = framebuffer.getColorTexture(0).pixelDatatype;\n  }\n\n  const pixels = PixelFormat.createTypedArray(\n    PixelFormat.RGBA,\n    pixelDatatype,\n    width,\n    height,\n  );\n\n  bindFramebuffer(this, framebuffer);\n\n  gl.readPixels(\n    x,\n    y,\n    width,\n    height,\n    PixelFormat.RGBA,\n    PixelDatatype.toWebGLConstant(pixelDatatype, this),\n    pixels,\n  );\n\n  return pixels;\n};\n\nconst viewportQuadAttributeLocations = {\n  position: 0,\n  textureCoordinates: 1,\n};\n\nContext.prototype.getViewportQuadVertexArray = function () {\n  // Per-context cache for viewport quads\n  let vertexArray = this.cache.viewportQuad_vertexArray;\n\n  if (!defined(vertexArray)) {\n    const geometry = new Geometry({\n      attributes: {\n        position: new GeometryAttribute({\n          componentDatatype: ComponentDatatype.FLOAT,\n          componentsPerAttribute: 2,\n          values: [-1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0],\n        }),\n\n        textureCoordinates: new GeometryAttribute({\n          componentDatatype: ComponentDatatype.FLOAT,\n          componentsPerAttribute: 2,\n          values: [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0],\n        }),\n      },\n      // Workaround Internet Explorer 11.0.8 lack of TRIANGLE_FAN\n      indices: new Uint16Array([0, 1, 2, 0, 2, 3]),\n      primitiveType: PrimitiveType.TRIANGLES,\n    });\n\n    vertexArray = VertexArray.fromGeometry({\n      context: this,\n      geometry: geometry,\n      attributeLocations: viewportQuadAttributeLocations,\n      bufferUsage: BufferUsage.STATIC_DRAW,\n      interleave: true,\n    });\n\n    this.cache.viewportQuad_vertexArray = vertexArray;\n  }\n\n  return vertexArray;\n};\n\nContext.prototype.createViewportQuadCommand = function (\n  fragmentShaderSource,\n  overrides,\n) {\n  overrides = defaultValue(overrides, defaultValue.EMPTY_OBJECT);\n\n  return new DrawCommand({\n    vertexArray: this.getViewportQuadVertexArray(),\n    primitiveType: PrimitiveType.TRIANGLES,\n    renderState: overrides.renderState,\n    shaderProgram: ShaderProgram.fromCache({\n      context: this,\n      vertexShaderSource: ViewportQuadVS,\n      fragmentShaderSource: fragmentShaderSource,\n      attributeLocations: viewportQuadAttributeLocations,\n    }),\n    uniformMap: overrides.uniformMap,\n    owner: overrides.owner,\n    framebuffer: overrides.framebuffer,\n    pass: overrides.pass,\n  });\n};\n\n/**\n * Gets the object associated with a pick color.\n *\n * @param {Color} pickColor The pick color.\n * @returns {object} The object associated with the pick color, or undefined if no object is associated with that color.\n *\n * @example\n * const object = context.getObjectByPickColor(pickColor);\n *\n * @see Context#createPickId\n */\nContext.prototype.getObjectByPickColor = function (pickColor) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"pickColor\", pickColor);\n  //>>includeEnd('debug');\n\n  return this._pickObjects[pickColor.toRgba()];\n};\n\nfunction PickId(pickObjects, key, color) {\n  this._pickObjects = pickObjects;\n  this.key = key;\n  this.color = color;\n}\n\nObject.defineProperties(PickId.prototype, {\n  object: {\n    get: function () {\n      return this._pickObjects[this.key];\n    },\n    set: function (value) {\n      this._pickObjects[this.key] = value;\n    },\n  },\n});\n\nPickId.prototype.destroy = function () {\n  delete this._pickObjects[this.key];\n  return undefined;\n};\n\n/**\n * Creates a unique ID associated with the input object for use with color-buffer picking.\n * The ID has an RGBA color value unique to this context.  You must call destroy()\n * on the pick ID when destroying the input object.\n *\n * @param {object} object The object to associate with the pick ID.\n * @returns {object} A PickId object with a <code>color</code> property.\n *\n * @exception {RuntimeError} Out of unique Pick IDs.\n *\n *\n * @example\n * this._pickId = context.createPickId({\n *   primitive : this,\n *   id : this.id\n * });\n *\n * @see Context#getObjectByPickColor\n */\nContext.prototype.createPickId = function (object) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"object\", object);\n  //>>includeEnd('debug');\n\n  // the increment and assignment have to be separate statements to\n  // actually detect overflow in the Uint32 value\n  ++this._nextPickColor[0];\n  const key = this._nextPickColor[0];\n  if (key === 0) {\n    // In case of overflow\n    throw new RuntimeError(\"Out of unique Pick IDs.\");\n  }\n\n  this._pickObjects[key] = object;\n  return new PickId(this._pickObjects, key, Color.fromRgba(key));\n};\n\nContext.prototype.isDestroyed = function () {\n  return false;\n};\n\nContext.prototype.destroy = function () {\n  // Destroy all objects in the cache that have a destroy method.\n  const cache = this.cache;\n  for (const property in cache) {\n    if (cache.hasOwnProperty(property)) {\n      const propertyValue = cache[property];\n      if (defined(propertyValue.destroy)) {\n        propertyValue.destroy();\n      }\n    }\n  }\n\n  this._shaderCache = this._shaderCache.destroy();\n  this._textureCache = this._textureCache.destroy();\n  this._defaultTexture = this._defaultTexture && this._defaultTexture.destroy();\n  this._defaultEmissiveTexture =\n    this._defaultEmissiveTexture && this._defaultEmissiveTexture.destroy();\n  this._defaultNormalTexture =\n    this._defaultNormalTexture && this._defaultNormalTexture.destroy();\n  this._defaultCubeMap = this._defaultCubeMap && this._defaultCubeMap.destroy();\n\n  return destroyObject(this);\n};\n\n// Used for specs.\nContext._deprecationWarning = deprecationWarning;\n\nexport default Context;\n"],"mappings":"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vG,KAAK;IACnB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE0I,KAAK,EAAE;IACLnC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACtG,MAAM;IACpB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE0I,IAAI,EAAE;IACJpC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACrG,KAAK;IACnB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE0I,GAAG,EAAE;IACHrC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACpG,IAAI;IAClB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE0I,IAAI,EAAE;IACJtC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACnG,KAAK;IACnB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE0I,GAAG,EAAE;IACHvC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAClG,IAAI;IAClB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACE0I,aAAa,EAAE;IACbxC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OACE,IAAI,CAACvG,KAAK,IACV,IAAI,CAACC,MAAM,IACX,IAAI,CAACC,KAAK,IACV,IAAI,CAACC,IAAI,IACT,IAAI,CAACC,KAAK,IACV,IAAI,CAACC,IAAI;IAEb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,iBAAiB,EAAE;IACjBoF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACxD,kBAAkB,IAAI,IAAI,CAACzH,OAAO;IAChD;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0N,aAAa,EAAE;IACbzC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACjH,UAAU,IAAI,IAAI,CAAChE,OAAO;IACxC;EACF,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}