{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Appearance from \"./Appearance.js\";\n\n/**\n * Visualizes a vertex attribute by displaying it as a color for debugging.\n * <p>\n * Components for well-known unit-length vectors, i.e., <code>normal</code>,\n * <code>tangent</code>, and <code>bitangent</code>, are scaled and biased\n * from [-1.0, 1.0] to (-1.0, 1.0).\n * </p>\n *\n * @alias DebugAppearance\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.attributeName The name of the attribute to visualize.\n * @param {boolean} [options.perInstanceAttribute=false] Boolean that determines whether this attribute is a per-instance geometry attribute.\n * @param {string} [options.glslDatatype='vec3'] The GLSL datatype of the attribute.  Supported datatypes are <code>float</code>, <code>vec2</code>, <code>vec3</code>, and <code>vec4</code>.\n * @param {string} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {string} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {object} [options.renderState] Optional render state to override the default render state.\n *\n * @exception {DeveloperError} options.glslDatatype must be float, vec2, vec3, or vec4.\n *\n * @example\n * const primitive = new Cesium.Primitive({\n *   geometryInstances : // ...\n *   appearance : new Cesium.DebugAppearance({\n *     attributeName : 'normal'\n *   })\n * });\n */\nfunction DebugAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const attributeName = options.attributeName;\n  let perInstanceAttribute = options.perInstanceAttribute;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(attributeName)) {\n    throw new DeveloperError(\"options.attributeName is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(perInstanceAttribute)) {\n    perInstanceAttribute = false;\n  }\n  let glslDatatype = defaultValue(options.glslDatatype, \"vec3\");\n  const varyingName = `v_${attributeName}`;\n  let getColor;\n\n  // Well-known normalized vector attributes in VertexFormat\n  if (attributeName === \"normal\" || attributeName === \"tangent\" || attributeName === \"bitangent\") {\n    getColor = `vec4 getColor() { return vec4((${varyingName} + vec3(1.0)) * 0.5, 1.0); }\\n`;\n  } else {\n    // All other attributes, both well-known and custom\n    if (attributeName === \"st\") {\n      glslDatatype = \"vec2\";\n    }\n    switch (glslDatatype) {\n      case \"float\":\n        getColor = `vec4 getColor() { return vec4(vec3(${varyingName}), 1.0); }\\n`;\n        break;\n      case \"vec2\":\n        getColor = `vec4 getColor() { return vec4(${varyingName}, 0.0, 1.0); }\\n`;\n        break;\n      case \"vec3\":\n        getColor = `vec4 getColor() { return vec4(${varyingName}, 1.0); }\\n`;\n        break;\n      case \"vec4\":\n        getColor = `vec4 getColor() { return ${varyingName}; }\\n`;\n        break;\n      //>>includeStart('debug', pragmas.debug);\n      default:\n        throw new DeveloperError(\"options.glslDatatype must be float, vec2, vec3, or vec4.\");\n      //>>includeEnd('debug');\n    }\n  }\n  const vs = `${\"in vec3 position3DHigh;\\n\" + \"in vec3 position3DLow;\\n\" + \"in float batchId;\\n\"}${perInstanceAttribute ? \"\" : `in ${glslDatatype} ${attributeName};\\n`}out ${glslDatatype} ${varyingName};\\n` + `void main()\\n` + `{\\n` + `vec4 p = czm_translateRelativeToEye(position3DHigh, position3DLow);\\n${perInstanceAttribute ? `${varyingName} = czm_batchTable_${attributeName}(batchId);\\n` : `${varyingName} = ${attributeName};\\n`}gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n` + `}`;\n  const fs = `in ${glslDatatype} ${varyingName};\\n${getColor}\\n` + `void main()\\n` + `{\\n` + `out_FragColor = getColor();\\n` + `}`;\n\n  /**\n   * This property is part of the {@link Appearance} interface, but is not\n   * used by {@link DebugAppearance} since a fully custom fragment shader is used.\n   *\n   * @type Material\n   *\n   * @default undefined\n   */\n  this.material = undefined;\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent.\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.translucent = defaultValue(options.translucent, false);\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, vs);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, fs);\n  this._renderState = Appearance.getDefaultRenderState(false, false, options.renderState);\n  this._closed = defaultValue(options.closed, false);\n\n  // Non-derived members\n\n  this._attributeName = attributeName;\n  this._glslDatatype = glslDatatype;\n}\nObject.defineProperties(DebugAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    }\n  },\n  /**\n   * The GLSL source code for the fragment shader.  The full fragment shader\n   * source is built procedurally taking into account the {@link DebugAppearance#material}.\n   * Use {@link DebugAppearance#getFragmentShaderSource} to get the full source.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    }\n  },\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    }\n  },\n  /**\n   * When <code>true</code>, the geometry is expected to be closed.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    }\n  },\n  /**\n   * The name of the attribute being visualized.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  attributeName: {\n    get: function () {\n      return this._attributeName;\n    }\n  },\n  /**\n   * The GLSL datatype of the attribute being visualized.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  glslDatatype: {\n    get: function () {\n      return this._glslDatatype;\n    }\n  }\n});\n\n/**\n * Returns the full GLSL fragment shader source, which for {@link DebugAppearance} is just\n * {@link DebugAppearance#fragmentShaderSource}.\n *\n * @function\n *\n * @returns {string} The full GLSL fragment shader source.\n */\nDebugAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link DebugAppearance#translucent}.\n *\n * @function\n *\n * @returns {boolean} <code>true</code> if the appearance is translucent.\n */\nDebugAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {object} The render state.\n */\nDebugAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\nexport default DebugAppearance;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","Appearance","DebugAppearance","options","EMPTY_OBJECT","attributeName","perInstanceAttribute","glslDatatype","varyingName","getColor","vs","fs","material","undefined","translucent","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","getDefaultRenderState","renderState","_closed","closed","_attributeName","_glslDatatype","Object","defineProperties","prototype","get","getFragmentShaderSource","isTranslucent","getRenderState"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/DebugAppearance.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Appearance from \"./Appearance.js\";\n\n/**\n * Visualizes a vertex attribute by displaying it as a color for debugging.\n * <p>\n * Components for well-known unit-length vectors, i.e., <code>normal</code>,\n * <code>tangent</code>, and <code>bitangent</code>, are scaled and biased\n * from [-1.0, 1.0] to (-1.0, 1.0).\n * </p>\n *\n * @alias DebugAppearance\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {string} options.attributeName The name of the attribute to visualize.\n * @param {boolean} [options.perInstanceAttribute=false] Boolean that determines whether this attribute is a per-instance geometry attribute.\n * @param {string} [options.glslDatatype='vec3'] The GLSL datatype of the attribute.  Supported datatypes are <code>float</code>, <code>vec2</code>, <code>vec3</code>, and <code>vec4</code>.\n * @param {string} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {string} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {object} [options.renderState] Optional render state to override the default render state.\n *\n * @exception {DeveloperError} options.glslDatatype must be float, vec2, vec3, or vec4.\n *\n * @example\n * const primitive = new Cesium.Primitive({\n *   geometryInstances : // ...\n *   appearance : new Cesium.DebugAppearance({\n *     attributeName : 'normal'\n *   })\n * });\n */\nfunction DebugAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const attributeName = options.attributeName;\n  let perInstanceAttribute = options.perInstanceAttribute;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(attributeName)) {\n    throw new DeveloperError(\"options.attributeName is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(perInstanceAttribute)) {\n    perInstanceAttribute = false;\n  }\n\n  let glslDatatype = defaultValue(options.glslDatatype, \"vec3\");\n  const varyingName = `v_${attributeName}`;\n  let getColor;\n\n  // Well-known normalized vector attributes in VertexFormat\n  if (\n    attributeName === \"normal\" ||\n    attributeName === \"tangent\" ||\n    attributeName === \"bitangent\"\n  ) {\n    getColor = `vec4 getColor() { return vec4((${varyingName} + vec3(1.0)) * 0.5, 1.0); }\\n`;\n  } else {\n    // All other attributes, both well-known and custom\n    if (attributeName === \"st\") {\n      glslDatatype = \"vec2\";\n    }\n\n    switch (glslDatatype) {\n      case \"float\":\n        getColor = `vec4 getColor() { return vec4(vec3(${varyingName}), 1.0); }\\n`;\n        break;\n      case \"vec2\":\n        getColor = `vec4 getColor() { return vec4(${varyingName}, 0.0, 1.0); }\\n`;\n        break;\n      case \"vec3\":\n        getColor = `vec4 getColor() { return vec4(${varyingName}, 1.0); }\\n`;\n        break;\n      case \"vec4\":\n        getColor = `vec4 getColor() { return ${varyingName}; }\\n`;\n        break;\n      //>>includeStart('debug', pragmas.debug);\n      default:\n        throw new DeveloperError(\n          \"options.glslDatatype must be float, vec2, vec3, or vec4.\",\n        );\n      //>>includeEnd('debug');\n    }\n  }\n\n  const vs =\n    `${\n      \"in vec3 position3DHigh;\\n\" +\n      \"in vec3 position3DLow;\\n\" +\n      \"in float batchId;\\n\"\n    }${\n      perInstanceAttribute ? \"\" : `in ${glslDatatype} ${attributeName};\\n`\n    }out ${glslDatatype} ${varyingName};\\n` +\n    `void main()\\n` +\n    `{\\n` +\n    `vec4 p = czm_translateRelativeToEye(position3DHigh, position3DLow);\\n${\n      perInstanceAttribute\n        ? `${varyingName} = czm_batchTable_${attributeName}(batchId);\\n`\n        : `${varyingName} = ${attributeName};\\n`\n    }gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n` +\n    `}`;\n  const fs =\n    `in ${glslDatatype} ${varyingName};\\n${getColor}\\n` +\n    `void main()\\n` +\n    `{\\n` +\n    `out_FragColor = getColor();\\n` +\n    `}`;\n\n  /**\n   * This property is part of the {@link Appearance} interface, but is not\n   * used by {@link DebugAppearance} since a fully custom fragment shader is used.\n   *\n   * @type Material\n   *\n   * @default undefined\n   */\n  this.material = undefined;\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent.\n   *\n   * @type {boolean}\n   *\n   * @default false\n   */\n  this.translucent = defaultValue(options.translucent, false);\n\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, vs);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, fs);\n  this._renderState = Appearance.getDefaultRenderState(\n    false,\n    false,\n    options.renderState,\n  );\n  this._closed = defaultValue(options.closed, false);\n\n  // Non-derived members\n\n  this._attributeName = attributeName;\n  this._glslDatatype = glslDatatype;\n}\n\nObject.defineProperties(DebugAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.  The full fragment shader\n   * source is built procedurally taking into account the {@link DebugAppearance#material}.\n   * Use {@link DebugAppearance#getFragmentShaderSource} to get the full source.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n\n  /**\n   * The name of the attribute being visualized.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  attributeName: {\n    get: function () {\n      return this._attributeName;\n    },\n  },\n\n  /**\n   * The GLSL datatype of the attribute being visualized.\n   *\n   * @memberof DebugAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  glslDatatype: {\n    get: function () {\n      return this._glslDatatype;\n    },\n  },\n});\n\n/**\n * Returns the full GLSL fragment shader source, which for {@link DebugAppearance} is just\n * {@link DebugAppearance#fragmentShaderSource}.\n *\n * @function\n *\n * @returns {string} The full GLSL fragment shader source.\n */\nDebugAppearance.prototype.getFragmentShaderSource =\n  Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link DebugAppearance#translucent}.\n *\n * @function\n *\n * @returns {boolean} <code>true</code> if the appearance is translucent.\n */\nDebugAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {object} The render state.\n */\nDebugAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\nexport default DebugAppearance;\n"],"mappings":"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AACA;AACA;AACA;AACA;AACA;EACEG,oBAAoB,EAAE;IACpBW,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACZ,qBAAqB;IACnC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,WAAW,EAAE;IACXQ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACV,YAAY;IAC1B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,MAAM,EAAE;IACNM,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACP,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,aAAa,EAAE;IACbwB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACL,cAAc;IAC5B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEjB,YAAY,EAAE;IACZsB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACJ,aAAa;IAC3B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvB,eAAe,CAAC0B,SAAS,CAACE,uBAAuB,GAC/C7B,UAAU,CAAC2B,SAAS,CAACE,uBAAuB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,eAAe,CAAC0B,SAAS,CAACG,aAAa,GAAG9B,UAAU,CAAC2B,SAAS,CAACG,aAAa;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7B,eAAe,CAAC0B,SAAS,CAACI,cAAc,GAAG/B,UAAU,CAAC2B,SAAS,CAACI,cAAc;AAC9E,eAAe9B,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}