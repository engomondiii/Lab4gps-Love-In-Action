{"ast":null,"code":"import { Cartesian3, Check, defined, destroyObject, HeadingPitchRoll, Matrix3, Matrix4, CustomShader, VoxelShapeType } from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nfunction formatShaderString(str) {\n  // This function:\n  // A) removes whitespace lines at the beginning of the string\n  // B) removes unnecessary spaces from the beginning of each line\n\n  const lines = str.split(\"\\n\");\n  let firstLineIdx;\n  for (firstLineIdx = 0; firstLineIdx < lines.length; firstLineIdx++) {\n    if (lines[firstLineIdx].match(/\\S/)) {\n      // Found the first line that's not entirely whitespace\n      break;\n    }\n  }\n  if (firstLineIdx === lines.length) {\n    // All lines are empty\n    return \"\";\n  }\n  let finalStr = \"\";\n  const pattern = /^\\s*/;\n  const firstLine = lines[firstLineIdx];\n  const spacesInFrontOfFirstLine = firstLine.match(pattern)[0].length;\n  for (let i = firstLineIdx; i < lines.length; i++) {\n    let line = lines[i];\n    const spacesInFront = line.match(pattern)[0].length;\n    if (spacesInFront >= spacesInFrontOfFirstLine) {\n      line = line.slice(spacesInFrontOfFirstLine);\n    }\n    finalStr += `${line}\\n`;\n  }\n  return finalStr;\n}\n\n/**\n * The view model for {@link VoxelInspector}.\n * @alias VoxelInspectorViewModel\n * @constructor\n *\n * @param {Scene} scene The scene instance to use.\n */\nfunction VoxelInspectorViewModel(scene) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"scene\", scene);\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n  this._voxelPrimitive = undefined;\n  this._customShaderCompilationRemoveCallback = undefined;\n  this._definedProperties = [];\n  this._getPrimitiveFunctions = [];\n  this._modelMatrixReady = false;\n  const that = this;\n  function addProperty(options) {\n    const {\n      name,\n      initialValue\n    } = options;\n    that._definedProperties.push(name);\n    let setPrimitiveFunction = options.setPrimitiveFunction;\n    if (setPrimitiveFunction === true) {\n      setPrimitiveFunction = function (value) {\n        that._voxelPrimitive[name] = value;\n      };\n    }\n    let getPrimitiveFunction = options.getPrimitiveFunction;\n    if (getPrimitiveFunction === true) {\n      getPrimitiveFunction = function () {\n        that[name] = that._voxelPrimitive[name];\n      };\n    }\n    if (defined(getPrimitiveFunction)) {\n      that._getPrimitiveFunctions.push(getPrimitiveFunction);\n    }\n    const knock = knockout.observable();\n    knockout.defineProperty(that, name, {\n      get: function () {\n        return knock();\n      },\n      set: function (value) {\n        // Convert input values to the correct type\n        if (typeof initialValue === \"number\" && typeof value === \"string\") {\n          value = Number(value);\n          if (isNaN(value)) {\n            value = initialValue;\n          }\n        }\n        if (typeof initialValue === \"boolean\" && typeof value === \"number\") {\n          value = value === 1 ? true : false;\n        }\n        knock(value);\n        if (defined(setPrimitiveFunction) && defined(that._voxelPrimitive)) {\n          setPrimitiveFunction(value);\n          scene.requestRender();\n        }\n      }\n    });\n    that[name] = initialValue;\n    return knock;\n  }\n  function getBoundSetter(boundKey, component) {\n    return function (value) {\n      const bound = that._voxelPrimitive[boundKey].clone();\n      bound[component] = value;\n      that._voxelPrimitive[boundKey] = bound;\n    };\n  }\n  addProperty({\n    name: \"inspectorVisible\",\n    initialValue: true\n  });\n  addProperty({\n    name: \"displayVisible\",\n    initialValue: false\n  });\n  addProperty({\n    name: \"transformVisible\",\n    initialValue: false\n  });\n  addProperty({\n    name: \"boundsVisible\",\n    initialValue: false\n  });\n  addProperty({\n    name: \"clippingVisible\",\n    initialValue: false\n  });\n  addProperty({\n    name: \"shaderVisible\",\n    initialValue: false\n  });\n  addProperty({\n    name: \"shaderString\",\n    initialValue: \"\",\n    getPrimitiveFunction: function () {\n      const shaderString = that._voxelPrimitive.customShader.fragmentShaderText;\n      that.shaderString = formatShaderString(shaderString);\n    }\n  });\n  addProperty({\n    name: \"shaderCompilationMessage\",\n    initialValue: \"\"\n  });\n  addProperty({\n    name: \"shaderCompilationSuccess\",\n    initialValue: true\n  });\n  addProperty({\n    name: \"depthTest\",\n    initialValue: false,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true\n  });\n  addProperty({\n    name: \"show\",\n    initialValue: true,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true\n  });\n  addProperty({\n    name: \"disableUpdate\",\n    initialValue: false,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true\n  });\n  addProperty({\n    name: \"debugDraw\",\n    initialValue: false,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true\n  });\n  addProperty({\n    name: \"jitter\",\n    initialValue: true,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true\n  });\n  addProperty({\n    name: \"nearestSampling\",\n    initialValue: true,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true\n  });\n  addProperty({\n    name: \"screenSpaceError\",\n    initialValue: 4.0,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true\n  });\n  addProperty({\n    name: \"stepSize\",\n    initialValue: 1.0,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true\n  });\n  addProperty({\n    name: \"shapeIsBox\",\n    getPrimitiveFunction: function () {\n      const shapeType = that._voxelPrimitive.shape;\n      that.shapeIsBox = shapeType === VoxelShapeType.BOX;\n    }\n  });\n  addProperty({\n    name: \"shapeIsEllipsoid\",\n    getPrimitiveFunction: function () {\n      const shapeType = that._voxelPrimitive.shape;\n      that.shapeIsEllipsoid = shapeType === VoxelShapeType.ELLIPSOID;\n    }\n  });\n  addProperty({\n    name: \"shapeIsCylinder\",\n    getPrimitiveFunction: function () {\n      const shapeType = that._voxelPrimitive.shape;\n      that.shapeIsCylinder = shapeType === VoxelShapeType.CYLINDER;\n    }\n  });\n  addProperty({\n    name: \"boundsBoxMaxX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMaxX = that._voxelPrimitive.maxBounds.x;\n    }\n  });\n  addProperty({\n    name: \"boundsBoxMinX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMinX = that._voxelPrimitive.minBounds.x;\n    }\n  });\n  addProperty({\n    name: \"boundsBoxMaxY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMaxY = that._voxelPrimitive.maxBounds.y;\n    }\n  });\n  addProperty({\n    name: \"boundsBoxMinY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMinY = that._voxelPrimitive.minBounds.y;\n    }\n  });\n  addProperty({\n    name: \"boundsBoxMaxZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMaxZ = that._voxelPrimitive.maxBounds.z;\n    }\n  });\n  addProperty({\n    name: \"boundsBoxMinZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMinZ = that._voxelPrimitive.minBounds.z;\n    }\n  });\n  addProperty({\n    name: \"boundsEllipsoidMaxLongitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMaxLongitude = that._voxelPrimitive.maxBounds.x;\n    }\n  });\n  addProperty({\n    name: \"boundsEllipsoidMinLongitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMinLongitude = that._voxelPrimitive.minBounds.x;\n    }\n  });\n  addProperty({\n    name: \"boundsEllipsoidMaxLatitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMaxLatitude = that._voxelPrimitive.maxBounds.y;\n    }\n  });\n  addProperty({\n    name: \"boundsEllipsoidMinLatitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMinLatitude = that._voxelPrimitive.minBounds.y;\n    }\n  });\n  addProperty({\n    name: \"boundsEllipsoidMaxHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMaxHeight = that._voxelPrimitive.maxBounds.z;\n    }\n  });\n  addProperty({\n    name: \"boundsEllipsoidMinHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMinHeight = that._voxelPrimitive.minBounds.z;\n    }\n  });\n  addProperty({\n    name: \"boundsCylinderMaxRadius\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMaxRadius = that._voxelPrimitive.maxBounds.x;\n    }\n  });\n  addProperty({\n    name: \"boundsCylinderMinRadius\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMinRadius = that._voxelPrimitive.minBounds.x;\n    }\n  });\n  addProperty({\n    name: \"boundsCylinderMaxHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMaxHeight = that._voxelPrimitive.maxBounds.y;\n    }\n  });\n  addProperty({\n    name: \"boundsCylinderMinHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMinHeight = that._voxelPrimitive.minBounds.y;\n    }\n  });\n  addProperty({\n    name: \"boundsCylinderMaxAngle\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMaxAngle = that._voxelPrimitive.maxBounds.z;\n    }\n  });\n  addProperty({\n    name: \"boundsCylinderMinAngle\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMinAngle = that._voxelPrimitive.minBounds.z;\n    }\n  });\n  addProperty({\n    name: \"clippingBoxMaxX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMaxX = that._voxelPrimitive.maxClippingBounds.x;\n    }\n  });\n  addProperty({\n    name: \"clippingBoxMinX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMinX = that._voxelPrimitive.minClippingBounds.x;\n    }\n  });\n  addProperty({\n    name: \"clippingBoxMaxY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMaxY = that._voxelPrimitive.maxClippingBounds.y;\n    }\n  });\n  addProperty({\n    name: \"clippingBoxMinY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMinY = that._voxelPrimitive.minClippingBounds.y;\n    }\n  });\n  addProperty({\n    name: \"clippingBoxMaxZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMaxZ = that._voxelPrimitive.maxClippingBounds.z;\n    }\n  });\n  addProperty({\n    name: \"clippingBoxMinZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMinZ = that._voxelPrimitive.minClippingBounds.z;\n    }\n  });\n  addProperty({\n    name: \"clippingEllipsoidMaxLongitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMaxLongitude = that._voxelPrimitive.maxClippingBounds.x;\n    }\n  });\n  addProperty({\n    name: \"clippingEllipsoidMinLongitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMinLongitude = that._voxelPrimitive.minClippingBounds.x;\n    }\n  });\n  addProperty({\n    name: \"clippingEllipsoidMaxLatitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMaxLatitude = that._voxelPrimitive.maxClippingBounds.y;\n    }\n  });\n  addProperty({\n    name: \"clippingEllipsoidMinLatitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMinLatitude = that._voxelPrimitive.minClippingBounds.y;\n    }\n  });\n  addProperty({\n    name: \"clippingEllipsoidMaxHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMaxHeight = that._voxelPrimitive.maxClippingBounds.z;\n    }\n  });\n  addProperty({\n    name: \"clippingEllipsoidMinHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMinHeight = that._voxelPrimitive.minClippingBounds.z;\n    }\n  });\n  addProperty({\n    name: \"clippingCylinderMaxRadius\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMaxRadius = that._voxelPrimitive.maxClippingBounds.x;\n    }\n  });\n  addProperty({\n    name: \"clippingCylinderMinRadius\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMinRadius = that._voxelPrimitive.minClippingBounds.x;\n    }\n  });\n  addProperty({\n    name: \"clippingCylinderMaxHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMaxHeight = that._voxelPrimitive.maxClippingBounds.y;\n    }\n  });\n  addProperty({\n    name: \"clippingCylinderMinHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMinHeight = that._voxelPrimitive.minClippingBounds.y;\n    }\n  });\n  addProperty({\n    name: \"clippingCylinderMaxAngle\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMaxAngle = that._voxelPrimitive.maxClippingBounds.z;\n    }\n  });\n  addProperty({\n    name: \"clippingCylinderMinAngle\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMinAngle = that._voxelPrimitive.minClippingBounds.z;\n    }\n  });\n  addProperty({\n    name: \"translationX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.translationX = Matrix4.getTranslation(that._voxelPrimitive.modelMatrix, new Cartesian3()).x;\n    }\n  });\n  addProperty({\n    name: \"translationY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.translationY = Matrix4.getTranslation(that._voxelPrimitive.modelMatrix, new Cartesian3()).y;\n    }\n  });\n  addProperty({\n    name: \"translationZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.translationZ = Matrix4.getTranslation(that._voxelPrimitive.modelMatrix, new Cartesian3()).z;\n    }\n  });\n  addProperty({\n    name: \"scaleX\",\n    initialValue: 1.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.scaleX = Matrix4.getScale(that._voxelPrimitive.modelMatrix, new Cartesian3()).x;\n    }\n  });\n  addProperty({\n    name: \"scaleY\",\n    initialValue: 1.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.scaleY = Matrix4.getScale(that._voxelPrimitive.modelMatrix, new Cartesian3()).y;\n    }\n  });\n  addProperty({\n    name: \"scaleZ\",\n    initialValue: 1.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.scaleZ = Matrix4.getScale(that._voxelPrimitive.modelMatrix, new Cartesian3()).z;\n    }\n  });\n  addProperty({\n    name: \"angleX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    }\n  });\n  addProperty({\n    name: \"angleY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    }\n  });\n  addProperty({\n    name: \"angleZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    }\n  });\n}\nconst scratchTranslation = new Cartesian3();\nconst scratchScale = new Cartesian3();\nconst scratchHeadingPitchRoll = new HeadingPitchRoll();\nconst scratchRotation = new Matrix3();\nfunction setModelMatrix(viewModel) {\n  const translation = Cartesian3.fromElements(viewModel.translationX, viewModel.translationY, viewModel.translationZ, scratchTranslation);\n  const scale = Cartesian3.fromElements(viewModel.scaleX, viewModel.scaleY, viewModel.scaleZ, scratchScale);\n  const hpr = scratchHeadingPitchRoll;\n  hpr.heading = viewModel.angleX;\n  hpr.pitch = viewModel.angleY;\n  hpr.roll = viewModel.angleZ;\n  const rotation = Matrix3.fromHeadingPitchRoll(hpr, scratchRotation);\n  const rotationScale = Matrix3.multiplyByScale(rotation, scale, rotation);\n  viewModel._voxelPrimitive.modelMatrix = Matrix4.fromRotationTranslation(rotationScale, translation, viewModel._voxelPrimitive.modelMatrix);\n}\nObject.defineProperties(VoxelInspectorViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof VoxelInspectorViewModel.prototype\n   * @type {Scene}\n   * @readonly\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    }\n  },\n  /**\n   * Gets or sets the primitive of the view model.\n   * @memberof VoxelInspectorViewModel.prototype\n   * @type {VoxelPrimitive}\n   */\n  voxelPrimitive: {\n    get: function () {\n      return this._voxelPrimitive;\n    },\n    set: function (voxelPrimitive) {\n      if (defined(this._customShaderCompilationRemoveCallback)) {\n        this._customShaderCompilationRemoveCallback();\n      }\n\n      // Update properties from the new primitive\n      if (defined(voxelPrimitive)) {\n        this._voxelPrimitive = voxelPrimitive;\n        const that = this;\n        that._customShaderCompilationRemoveCallback = that._voxelPrimitive.customShaderCompilationEvent.addEventListener(function (error) {\n          const shaderString = that._voxelPrimitive.customShader.fragmentShaderText;\n          that.shaderString = formatShaderString(shaderString);\n          if (!defined(error)) {\n            that.shaderCompilationMessage = \"Shader compiled successfully!\";\n            that.shaderCompilationSuccess = true;\n          } else {\n            that.shaderCompilationMessage = error.message;\n            that.shaderCompilationSuccess = false;\n          }\n        });\n        that._modelMatrixReady = false;\n        for (let i = 0; i < that._getPrimitiveFunctions.length; i++) {\n          that._getPrimitiveFunctions[i]();\n        }\n        that._modelMatrixReady = true;\n        setModelMatrix(that);\n      }\n    }\n  }\n});\n\n/**\n * Toggles the inspector visibility\n */\nVoxelInspectorViewModel.prototype.toggleInspector = function () {\n  this.inspectorVisible = !this.inspectorVisible;\n};\n\n/**\n * Toggles the visibility of the display section\n */\nVoxelInspectorViewModel.prototype.toggleDisplay = function () {\n  this.displayVisible = !this.displayVisible;\n};\n\n/**\n * Toggles the visibility of the transform section\n */\nVoxelInspectorViewModel.prototype.toggleTransform = function () {\n  this.transformVisible = !this.transformVisible;\n};\n\n/**\n * Toggles the visibility of the bounds section\n */\nVoxelInspectorViewModel.prototype.toggleBounds = function () {\n  this.boundsVisible = !this.boundsVisible;\n};\n\n/**\n * Toggles the visibility of the clipping section\n */\nVoxelInspectorViewModel.prototype.toggleClipping = function () {\n  this.clippingVisible = !this.clippingVisible;\n};\n\n/**\n * Toggles the visibility of the shader section\n */\nVoxelInspectorViewModel.prototype.toggleShader = function () {\n  this.shaderVisible = !this.shaderVisible;\n};\n\n/**\n * Compiles the shader in the shader editor.\n */\nVoxelInspectorViewModel.prototype.compileShader = function () {\n  if (defined(this._voxelPrimitive)) {\n    // It's assumed that the same uniforms are going to be used regardless of edits.\n    this._voxelPrimitive.customShader = new CustomShader({\n      fragmentShaderText: this.shaderString,\n      uniforms: this._voxelPrimitive.customShader.uniforms\n    });\n  }\n};\n\n/**\n * Handles key press events on the shader editor.\n */\nVoxelInspectorViewModel.prototype.shaderEditorKeyPress = function (sender, event) {\n  if (event.keyCode === 9) {\n    //tab\n    event.preventDefault();\n    const textArea = event.target;\n    const start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    let newEnd = end;\n    const selected = textArea.value.slice(start, end);\n    const lines = selected.split(\"\\n\");\n    const length = lines.length;\n    let i;\n    if (!event.shiftKey) {\n      for (i = 0; i < length; ++i) {\n        lines[i] = `  ${lines[i]}`;\n        newEnd += 2;\n      }\n    } else {\n      for (i = 0; i < length; ++i) {\n        if (lines[i][0] === \" \") {\n          if (lines[i][1] === \" \") {\n            lines[i] = lines[i].substr(2);\n            newEnd -= 2;\n          } else {\n            lines[i] = lines[i].substr(1);\n            newEnd -= 1;\n          }\n        }\n      }\n    }\n    const newText = lines.join(\"\\n\");\n    textArea.value = textArea.value.slice(0, start) + newText + textArea.value.slice(end);\n    textArea.selectionStart = start !== end ? start : newEnd;\n    textArea.selectionEnd = newEnd;\n  } else if (event.ctrlKey && (event.keyCode === 10 || event.keyCode === 13)) {\n    //ctrl + enter\n    this.compileShader();\n  }\n  return true;\n};\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nVoxelInspectorViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the widget.  Should be called if permanently\n * removing the widget from layout.\n */\nVoxelInspectorViewModel.prototype.destroy = function () {\n  const that = this;\n  this._definedProperties.forEach(function (property) {\n    knockout.getObservable(that, property).dispose();\n  });\n  return destroyObject(this);\n};\nexport default VoxelInspectorViewModel;","map":{"version":3,"names":["Cartesian3","Check","defined","destroyObject","HeadingPitchRoll","Matrix3","Matrix4","CustomShader","VoxelShapeType","knockout","formatShaderString","str","lines","split","firstLineIdx","length","match","finalStr","pattern","firstLine","spacesInFrontOfFirstLine","i","line","spacesInFront","slice","VoxelInspectorViewModel","scene","typeOf","object","_scene","_voxelPrimitive","undefined","_customShaderCompilationRemoveCallback","_definedProperties","_getPrimitiveFunctions","_modelMatrixReady","that","addProperty","options","name","initialValue","push","setPrimitiveFunction","value","getPrimitiveFunction","knock","observable","defineProperty","get","set","Number","isNaN","requestRender","getBoundSetter","boundKey","component","bound","clone","shaderString","customShader","fragmentShaderText","shapeType","shape","shapeIsBox","BOX","shapeIsEllipsoid","ELLIPSOID","shapeIsCylinder","CYLINDER","boundsBoxMaxX","maxBounds","x","boundsBoxMinX","minBounds","boundsBoxMaxY","y","boundsBoxMinY","boundsBoxMaxZ","z","boundsBoxMinZ","boundsEllipsoidMaxLongitude","boundsEllipsoidMinLongitude","boundsEllipsoidMaxLatitude","boundsEllipsoidMinLatitude","boundsEllipsoidMaxHeight","boundsEllipsoidMinHeight","boundsCylinderMaxRadius","boundsCylinderMinRadius","boundsCylinderMaxHeight","boundsCylinderMinHeight","boundsCylinderMaxAngle","boundsCylinderMinAngle","clippingBoxMaxX","maxClippingBounds","clippingBoxMinX","minClippingBounds","clippingBoxMaxY","clippingBoxMinY","clippingBoxMaxZ","clippingBoxMinZ","clippingEllipsoidMaxLongitude","clippingEllipsoidMinLongitude","clippingEllipsoidMaxLatitude","clippingEllipsoidMinLatitude","clippingEllipsoidMaxHeight","clippingEllipsoidMinHeight","clippingCylinderMaxRadius","clippingCylinderMinRadius","clippingCylinderMaxHeight","clippingCylinderMinHeight","clippingCylinderMaxAngle","clippingCylinderMinAngle","setModelMatrix","translationX","getTranslation","modelMatrix","translationY","translationZ","scaleX","getScale","scaleY","scaleZ","scratchTranslation","scratchScale","scratchHeadingPitchRoll","scratchRotation","viewModel","translation","fromElements","scale","hpr","heading","angleX","pitch","angleY","roll","angleZ","rotation","fromHeadingPitchRoll","rotationScale","multiplyByScale","fromRotationTranslation","Object","defineProperties","prototype","voxelPrimitive","customShaderCompilationEvent","addEventListener","error","shaderCompilationMessage","shaderCompilationSuccess","message","toggleInspector","inspectorVisible","toggleDisplay","displayVisible","toggleTransform","transformVisible","toggleBounds","boundsVisible","toggleClipping","clippingVisible","toggleShader","shaderVisible","compileShader","uniforms","shaderEditorKeyPress","sender","event","keyCode","preventDefault","textArea","target","start","selectionStart","end","selectionEnd","newEnd","selected","shiftKey","substr","newText","join","ctrlKey","isDestroyed","destroy","forEach","property","getObservable","dispose"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/VoxelInspector/VoxelInspectorViewModel.js"],"sourcesContent":["import {\n  Cartesian3,\n  Check,\n  defined,\n  destroyObject,\n  HeadingPitchRoll,\n  Matrix3,\n  Matrix4,\n  CustomShader,\n  VoxelShapeType,\n} from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\n\nfunction formatShaderString(str) {\n  // This function:\n  // A) removes whitespace lines at the beginning of the string\n  // B) removes unnecessary spaces from the beginning of each line\n\n  const lines = str.split(\"\\n\");\n  let firstLineIdx;\n  for (firstLineIdx = 0; firstLineIdx < lines.length; firstLineIdx++) {\n    if (lines[firstLineIdx].match(/\\S/)) {\n      // Found the first line that's not entirely whitespace\n      break;\n    }\n  }\n  if (firstLineIdx === lines.length) {\n    // All lines are empty\n    return \"\";\n  }\n\n  let finalStr = \"\";\n  const pattern = /^\\s*/;\n  const firstLine = lines[firstLineIdx];\n  const spacesInFrontOfFirstLine = firstLine.match(pattern)[0].length;\n  for (let i = firstLineIdx; i < lines.length; i++) {\n    let line = lines[i];\n    const spacesInFront = line.match(pattern)[0].length;\n    if (spacesInFront >= spacesInFrontOfFirstLine) {\n      line = line.slice(spacesInFrontOfFirstLine);\n    }\n    finalStr += `${line}\\n`;\n  }\n  return finalStr;\n}\n\n/**\n * The view model for {@link VoxelInspector}.\n * @alias VoxelInspectorViewModel\n * @constructor\n *\n * @param {Scene} scene The scene instance to use.\n */\nfunction VoxelInspectorViewModel(scene) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"scene\", scene);\n  //>>includeEnd('debug');\n\n  this._scene = scene;\n  this._voxelPrimitive = undefined;\n  this._customShaderCompilationRemoveCallback = undefined;\n\n  this._definedProperties = [];\n  this._getPrimitiveFunctions = [];\n  this._modelMatrixReady = false;\n\n  const that = this;\n  function addProperty(options) {\n    const { name, initialValue } = options;\n\n    that._definedProperties.push(name);\n\n    let setPrimitiveFunction = options.setPrimitiveFunction;\n    if (setPrimitiveFunction === true) {\n      setPrimitiveFunction = function (value) {\n        that._voxelPrimitive[name] = value;\n      };\n    }\n\n    let getPrimitiveFunction = options.getPrimitiveFunction;\n    if (getPrimitiveFunction === true) {\n      getPrimitiveFunction = function () {\n        that[name] = that._voxelPrimitive[name];\n      };\n    }\n    if (defined(getPrimitiveFunction)) {\n      that._getPrimitiveFunctions.push(getPrimitiveFunction);\n    }\n\n    const knock = knockout.observable();\n    knockout.defineProperty(that, name, {\n      get: function () {\n        return knock();\n      },\n      set: function (value) {\n        // Convert input values to the correct type\n        if (typeof initialValue === \"number\" && typeof value === \"string\") {\n          value = Number(value);\n          if (isNaN(value)) {\n            value = initialValue;\n          }\n        }\n        if (typeof initialValue === \"boolean\" && typeof value === \"number\") {\n          value = value === 1 ? true : false;\n        }\n        knock(value);\n        if (defined(setPrimitiveFunction) && defined(that._voxelPrimitive)) {\n          setPrimitiveFunction(value);\n          scene.requestRender();\n        }\n      },\n    });\n\n    that[name] = initialValue;\n\n    return knock;\n  }\n\n  function getBoundSetter(boundKey, component) {\n    return function (value) {\n      const bound = that._voxelPrimitive[boundKey].clone();\n      bound[component] = value;\n      that._voxelPrimitive[boundKey] = bound;\n    };\n  }\n\n  addProperty({\n    name: \"inspectorVisible\",\n    initialValue: true,\n  });\n\n  addProperty({\n    name: \"displayVisible\",\n    initialValue: false,\n  });\n\n  addProperty({\n    name: \"transformVisible\",\n    initialValue: false,\n  });\n\n  addProperty({\n    name: \"boundsVisible\",\n    initialValue: false,\n  });\n\n  addProperty({\n    name: \"clippingVisible\",\n    initialValue: false,\n  });\n\n  addProperty({\n    name: \"shaderVisible\",\n    initialValue: false,\n  });\n\n  addProperty({\n    name: \"shaderString\",\n    initialValue: \"\",\n    getPrimitiveFunction: function () {\n      const shaderString = that._voxelPrimitive.customShader.fragmentShaderText;\n      that.shaderString = formatShaderString(shaderString);\n    },\n  });\n  addProperty({\n    name: \"shaderCompilationMessage\",\n    initialValue: \"\",\n  });\n  addProperty({\n    name: \"shaderCompilationSuccess\",\n    initialValue: true,\n  });\n  addProperty({\n    name: \"depthTest\",\n    initialValue: false,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true,\n  });\n  addProperty({\n    name: \"show\",\n    initialValue: true,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true,\n  });\n  addProperty({\n    name: \"disableUpdate\",\n    initialValue: false,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true,\n  });\n  addProperty({\n    name: \"debugDraw\",\n    initialValue: false,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true,\n  });\n  addProperty({\n    name: \"jitter\",\n    initialValue: true,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true,\n  });\n  addProperty({\n    name: \"nearestSampling\",\n    initialValue: true,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true,\n  });\n  addProperty({\n    name: \"screenSpaceError\",\n    initialValue: 4.0,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true,\n  });\n  addProperty({\n    name: \"stepSize\",\n    initialValue: 1.0,\n    setPrimitiveFunction: true,\n    getPrimitiveFunction: true,\n  });\n  addProperty({\n    name: \"shapeIsBox\",\n    getPrimitiveFunction: function () {\n      const shapeType = that._voxelPrimitive.shape;\n      that.shapeIsBox = shapeType === VoxelShapeType.BOX;\n    },\n  });\n  addProperty({\n    name: \"shapeIsEllipsoid\",\n    getPrimitiveFunction: function () {\n      const shapeType = that._voxelPrimitive.shape;\n      that.shapeIsEllipsoid = shapeType === VoxelShapeType.ELLIPSOID;\n    },\n  });\n  addProperty({\n    name: \"shapeIsCylinder\",\n    getPrimitiveFunction: function () {\n      const shapeType = that._voxelPrimitive.shape;\n      that.shapeIsCylinder = shapeType === VoxelShapeType.CYLINDER;\n    },\n  });\n  addProperty({\n    name: \"boundsBoxMaxX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMaxX = that._voxelPrimitive.maxBounds.x;\n    },\n  });\n  addProperty({\n    name: \"boundsBoxMinX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMinX = that._voxelPrimitive.minBounds.x;\n    },\n  });\n  addProperty({\n    name: \"boundsBoxMaxY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMaxY = that._voxelPrimitive.maxBounds.y;\n    },\n  });\n  addProperty({\n    name: \"boundsBoxMinY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMinY = that._voxelPrimitive.minBounds.y;\n    },\n  });\n  addProperty({\n    name: \"boundsBoxMaxZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMaxZ = that._voxelPrimitive.maxBounds.z;\n    },\n  });\n  addProperty({\n    name: \"boundsBoxMinZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsBoxMinZ = that._voxelPrimitive.minBounds.z;\n    },\n  });\n  addProperty({\n    name: \"boundsEllipsoidMaxLongitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMaxLongitude = that._voxelPrimitive.maxBounds.x;\n    },\n  });\n  addProperty({\n    name: \"boundsEllipsoidMinLongitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMinLongitude = that._voxelPrimitive.minBounds.x;\n    },\n  });\n  addProperty({\n    name: \"boundsEllipsoidMaxLatitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMaxLatitude = that._voxelPrimitive.maxBounds.y;\n    },\n  });\n  addProperty({\n    name: \"boundsEllipsoidMinLatitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMinLatitude = that._voxelPrimitive.minBounds.y;\n    },\n  });\n  addProperty({\n    name: \"boundsEllipsoidMaxHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMaxHeight = that._voxelPrimitive.maxBounds.z;\n    },\n  });\n  addProperty({\n    name: \"boundsEllipsoidMinHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsEllipsoidMinHeight = that._voxelPrimitive.minBounds.z;\n    },\n  });\n  addProperty({\n    name: \"boundsCylinderMaxRadius\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMaxRadius = that._voxelPrimitive.maxBounds.x;\n    },\n  });\n  addProperty({\n    name: \"boundsCylinderMinRadius\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMinRadius = that._voxelPrimitive.minBounds.x;\n    },\n  });\n  addProperty({\n    name: \"boundsCylinderMaxHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMaxHeight = that._voxelPrimitive.maxBounds.y;\n    },\n  });\n  addProperty({\n    name: \"boundsCylinderMinHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMinHeight = that._voxelPrimitive.minBounds.y;\n    },\n  });\n  addProperty({\n    name: \"boundsCylinderMaxAngle\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMaxAngle = that._voxelPrimitive.maxBounds.z;\n    },\n  });\n  addProperty({\n    name: \"boundsCylinderMinAngle\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.boundsCylinderMinAngle = that._voxelPrimitive.minBounds.z;\n    },\n  });\n  addProperty({\n    name: \"clippingBoxMaxX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMaxX = that._voxelPrimitive.maxClippingBounds.x;\n    },\n  });\n  addProperty({\n    name: \"clippingBoxMinX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMinX = that._voxelPrimitive.minClippingBounds.x;\n    },\n  });\n  addProperty({\n    name: \"clippingBoxMaxY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMaxY = that._voxelPrimitive.maxClippingBounds.y;\n    },\n  });\n  addProperty({\n    name: \"clippingBoxMinY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMinY = that._voxelPrimitive.minClippingBounds.y;\n    },\n  });\n  addProperty({\n    name: \"clippingBoxMaxZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMaxZ = that._voxelPrimitive.maxClippingBounds.z;\n    },\n  });\n  addProperty({\n    name: \"clippingBoxMinZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingBoxMinZ = that._voxelPrimitive.minClippingBounds.z;\n    },\n  });\n  addProperty({\n    name: \"clippingEllipsoidMaxLongitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMaxLongitude =\n        that._voxelPrimitive.maxClippingBounds.x;\n    },\n  });\n  addProperty({\n    name: \"clippingEllipsoidMinLongitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMinLongitude =\n        that._voxelPrimitive.minClippingBounds.x;\n    },\n  });\n  addProperty({\n    name: \"clippingEllipsoidMaxLatitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMaxLatitude =\n        that._voxelPrimitive.maxClippingBounds.y;\n    },\n  });\n  addProperty({\n    name: \"clippingEllipsoidMinLatitude\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMinLatitude =\n        that._voxelPrimitive.minClippingBounds.y;\n    },\n  });\n  addProperty({\n    name: \"clippingEllipsoidMaxHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMaxHeight =\n        that._voxelPrimitive.maxClippingBounds.z;\n    },\n  });\n  addProperty({\n    name: \"clippingEllipsoidMinHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingEllipsoidMinHeight =\n        that._voxelPrimitive.minClippingBounds.z;\n    },\n  });\n  addProperty({\n    name: \"clippingCylinderMaxRadius\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMaxRadius = that._voxelPrimitive.maxClippingBounds.x;\n    },\n  });\n  addProperty({\n    name: \"clippingCylinderMinRadius\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"x\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMinRadius = that._voxelPrimitive.minClippingBounds.x;\n    },\n  });\n  addProperty({\n    name: \"clippingCylinderMaxHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMaxHeight = that._voxelPrimitive.maxClippingBounds.y;\n    },\n  });\n  addProperty({\n    name: \"clippingCylinderMinHeight\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"y\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMinHeight = that._voxelPrimitive.minClippingBounds.y;\n    },\n  });\n  addProperty({\n    name: \"clippingCylinderMaxAngle\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"maxClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMaxAngle = that._voxelPrimitive.maxClippingBounds.z;\n    },\n  });\n  addProperty({\n    name: \"clippingCylinderMinAngle\",\n    initialValue: 0.0,\n    setPrimitiveFunction: getBoundSetter(\"minClippingBounds\", \"z\"),\n    getPrimitiveFunction: function () {\n      that.clippingCylinderMinAngle = that._voxelPrimitive.minClippingBounds.z;\n    },\n  });\n\n  addProperty({\n    name: \"translationX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.translationX = Matrix4.getTranslation(\n        that._voxelPrimitive.modelMatrix,\n        new Cartesian3(),\n      ).x;\n    },\n  });\n  addProperty({\n    name: \"translationY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.translationY = Matrix4.getTranslation(\n        that._voxelPrimitive.modelMatrix,\n        new Cartesian3(),\n      ).y;\n    },\n  });\n  addProperty({\n    name: \"translationZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.translationZ = Matrix4.getTranslation(\n        that._voxelPrimitive.modelMatrix,\n        new Cartesian3(),\n      ).z;\n    },\n  });\n\n  addProperty({\n    name: \"scaleX\",\n    initialValue: 1.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.scaleX = Matrix4.getScale(\n        that._voxelPrimitive.modelMatrix,\n        new Cartesian3(),\n      ).x;\n    },\n  });\n  addProperty({\n    name: \"scaleY\",\n    initialValue: 1.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.scaleY = Matrix4.getScale(\n        that._voxelPrimitive.modelMatrix,\n        new Cartesian3(),\n      ).y;\n    },\n  });\n  addProperty({\n    name: \"scaleZ\",\n    initialValue: 1.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n    getPrimitiveFunction: function () {\n      that.scaleZ = Matrix4.getScale(\n        that._voxelPrimitive.modelMatrix,\n        new Cartesian3(),\n      ).z;\n    },\n  });\n\n  addProperty({\n    name: \"angleX\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n  });\n\n  addProperty({\n    name: \"angleY\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n  });\n\n  addProperty({\n    name: \"angleZ\",\n    initialValue: 0.0,\n    setPrimitiveFunction: function () {\n      if (that._modelMatrixReady) {\n        setModelMatrix(that);\n      }\n    },\n  });\n}\n\nconst scratchTranslation = new Cartesian3();\nconst scratchScale = new Cartesian3();\nconst scratchHeadingPitchRoll = new HeadingPitchRoll();\nconst scratchRotation = new Matrix3();\n\nfunction setModelMatrix(viewModel) {\n  const translation = Cartesian3.fromElements(\n    viewModel.translationX,\n    viewModel.translationY,\n    viewModel.translationZ,\n    scratchTranslation,\n  );\n  const scale = Cartesian3.fromElements(\n    viewModel.scaleX,\n    viewModel.scaleY,\n    viewModel.scaleZ,\n    scratchScale,\n  );\n  const hpr = scratchHeadingPitchRoll;\n  hpr.heading = viewModel.angleX;\n  hpr.pitch = viewModel.angleY;\n  hpr.roll = viewModel.angleZ;\n  const rotation = Matrix3.fromHeadingPitchRoll(hpr, scratchRotation);\n  const rotationScale = Matrix3.multiplyByScale(rotation, scale, rotation);\n  viewModel._voxelPrimitive.modelMatrix = Matrix4.fromRotationTranslation(\n    rotationScale,\n    translation,\n    viewModel._voxelPrimitive.modelMatrix,\n  );\n}\n\nObject.defineProperties(VoxelInspectorViewModel.prototype, {\n  /**\n   * Gets the scene\n   * @memberof VoxelInspectorViewModel.prototype\n   * @type {Scene}\n   * @readonly\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n\n  /**\n   * Gets or sets the primitive of the view model.\n   * @memberof VoxelInspectorViewModel.prototype\n   * @type {VoxelPrimitive}\n   */\n  voxelPrimitive: {\n    get: function () {\n      return this._voxelPrimitive;\n    },\n    set: function (voxelPrimitive) {\n      if (defined(this._customShaderCompilationRemoveCallback)) {\n        this._customShaderCompilationRemoveCallback();\n      }\n\n      // Update properties from the new primitive\n      if (defined(voxelPrimitive)) {\n        this._voxelPrimitive = voxelPrimitive;\n\n        const that = this;\n        that._customShaderCompilationRemoveCallback =\n          that._voxelPrimitive.customShaderCompilationEvent.addEventListener(\n            function (error) {\n              const shaderString =\n                that._voxelPrimitive.customShader.fragmentShaderText;\n              that.shaderString = formatShaderString(shaderString);\n\n              if (!defined(error)) {\n                that.shaderCompilationMessage = \"Shader compiled successfully!\";\n                that.shaderCompilationSuccess = true;\n              } else {\n                that.shaderCompilationMessage = error.message;\n                that.shaderCompilationSuccess = false;\n              }\n            },\n          );\n        that._modelMatrixReady = false;\n        for (let i = 0; i < that._getPrimitiveFunctions.length; i++) {\n          that._getPrimitiveFunctions[i]();\n        }\n        that._modelMatrixReady = true;\n        setModelMatrix(that);\n      }\n    },\n  },\n});\n\n/**\n * Toggles the inspector visibility\n */\nVoxelInspectorViewModel.prototype.toggleInspector = function () {\n  this.inspectorVisible = !this.inspectorVisible;\n};\n\n/**\n * Toggles the visibility of the display section\n */\nVoxelInspectorViewModel.prototype.toggleDisplay = function () {\n  this.displayVisible = !this.displayVisible;\n};\n\n/**\n * Toggles the visibility of the transform section\n */\nVoxelInspectorViewModel.prototype.toggleTransform = function () {\n  this.transformVisible = !this.transformVisible;\n};\n\n/**\n * Toggles the visibility of the bounds section\n */\nVoxelInspectorViewModel.prototype.toggleBounds = function () {\n  this.boundsVisible = !this.boundsVisible;\n};\n\n/**\n * Toggles the visibility of the clipping section\n */\nVoxelInspectorViewModel.prototype.toggleClipping = function () {\n  this.clippingVisible = !this.clippingVisible;\n};\n\n/**\n * Toggles the visibility of the shader section\n */\nVoxelInspectorViewModel.prototype.toggleShader = function () {\n  this.shaderVisible = !this.shaderVisible;\n};\n\n/**\n * Compiles the shader in the shader editor.\n */\nVoxelInspectorViewModel.prototype.compileShader = function () {\n  if (defined(this._voxelPrimitive)) {\n    // It's assumed that the same uniforms are going to be used regardless of edits.\n    this._voxelPrimitive.customShader = new CustomShader({\n      fragmentShaderText: this.shaderString,\n      uniforms: this._voxelPrimitive.customShader.uniforms,\n    });\n  }\n};\n\n/**\n * Handles key press events on the shader editor.\n */\nVoxelInspectorViewModel.prototype.shaderEditorKeyPress = function (\n  sender,\n  event,\n) {\n  if (event.keyCode === 9) {\n    //tab\n    event.preventDefault();\n    const textArea = event.target;\n    const start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    let newEnd = end;\n    const selected = textArea.value.slice(start, end);\n    const lines = selected.split(\"\\n\");\n    const length = lines.length;\n    let i;\n    if (!event.shiftKey) {\n      for (i = 0; i < length; ++i) {\n        lines[i] = `  ${lines[i]}`;\n        newEnd += 2;\n      }\n    } else {\n      for (i = 0; i < length; ++i) {\n        if (lines[i][0] === \" \") {\n          if (lines[i][1] === \" \") {\n            lines[i] = lines[i].substr(2);\n            newEnd -= 2;\n          } else {\n            lines[i] = lines[i].substr(1);\n            newEnd -= 1;\n          }\n        }\n      }\n    }\n    const newText = lines.join(\"\\n\");\n    textArea.value =\n      textArea.value.slice(0, start) + newText + textArea.value.slice(end);\n    textArea.selectionStart = start !== end ? start : newEnd;\n    textArea.selectionEnd = newEnd;\n  } else if (event.ctrlKey && (event.keyCode === 10 || event.keyCode === 13)) {\n    //ctrl + enter\n    this.compileShader();\n  }\n  return true;\n};\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nVoxelInspectorViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the widget.  Should be called if permanently\n * removing the widget from layout.\n */\nVoxelInspectorViewModel.prototype.destroy = function () {\n  const that = this;\n  this._definedProperties.forEach(function (property) {\n    knockout.getObservable(that, property).dispose();\n  });\n\n  return destroyObject(this);\n};\n\nexport default VoxelInspectorViewModel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}