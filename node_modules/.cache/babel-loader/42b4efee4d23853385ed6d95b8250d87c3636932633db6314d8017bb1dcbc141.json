{"ast":null,"code":"import { Cartesian2, defaultValue, defined, DeveloperError, EasingFunction, SceneTransforms } from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nconst screenSpacePos = new Cartesian2();\nconst offScreen = \"-1000px\";\n\n/**\n * The view model for {@link SelectionIndicator}.\n * @alias SelectionIndicatorViewModel\n * @constructor\n *\n * @param {Scene} scene The scene instance to use for screen-space coordinate conversion.\n * @param {Element} selectionIndicatorElement The element containing all elements that make up the selection indicator.\n * @param {Element} container The DOM element that contains the widget.\n */\nfunction SelectionIndicatorViewModel(scene, selectionIndicatorElement, container) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  if (!defined(selectionIndicatorElement)) {\n    throw new DeveloperError(\"selectionIndicatorElement is required.\");\n  }\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required.\");\n  }\n  //>>includeEnd('debug')\n\n  this._scene = scene;\n  this._screenPositionX = offScreen;\n  this._screenPositionY = offScreen;\n  this._tweens = scene.tweens;\n  this._container = defaultValue(container, document.body);\n  this._selectionIndicatorElement = selectionIndicatorElement;\n  this._scale = 1;\n\n  /**\n   * Gets or sets the world position of the object for which to display the selection indicator.\n   * @type {Cartesian3}\n   */\n  this.position = undefined;\n\n  /**\n   * Gets or sets the visibility of the selection indicator.\n   * @type {boolean}\n   */\n  this.showSelection = false;\n  knockout.track(this, [\"position\", \"_screenPositionX\", \"_screenPositionY\", \"_scale\", \"showSelection\"]);\n\n  /**\n   * Gets the visibility of the position indicator.  This can be false even if an\n   * object is selected, when the selected object has no position.\n   * @type {boolean}\n   */\n  this.isVisible = undefined;\n  knockout.defineProperty(this, \"isVisible\", {\n    get: function () {\n      return this.showSelection && defined(this.position);\n    }\n  });\n  knockout.defineProperty(this, \"_transform\", {\n    get: function () {\n      return `scale(${this._scale})`;\n    }\n  });\n\n  /**\n   * Gets or sets the function for converting the world position of the object to the screen space position.\n   *\n   * @member\n   * @type {SelectionIndicatorViewModel.ComputeScreenSpacePosition}\n   * @default SceneTransforms.worldToWindowCoordinates\n   *\n   * @example\n   * selectionIndicatorViewModel.computeScreenSpacePosition = function(position, result) {\n   *     return Cesium.SceneTransforms.worldToWindowCoordinates(scene, position, result);\n   * };\n   */\n  this.computeScreenSpacePosition = function (position, result) {\n    return SceneTransforms.worldToWindowCoordinates(scene, position, result);\n  };\n}\n\n/**\n * Updates the view of the selection indicator to match the position and content properties of the view model.\n * This function should be called as part of the render loop.\n */\nSelectionIndicatorViewModel.prototype.update = function () {\n  if (this.showSelection && defined(this.position)) {\n    const screenPosition = this.computeScreenSpacePosition(this.position, screenSpacePos);\n    if (!defined(screenPosition)) {\n      this._screenPositionX = offScreen;\n      this._screenPositionY = offScreen;\n    } else {\n      const container = this._container;\n      const containerWidth = container.parentNode.clientWidth;\n      const containerHeight = container.parentNode.clientHeight;\n      const indicatorSize = this._selectionIndicatorElement.clientWidth;\n      const halfSize = indicatorSize * 0.5;\n      screenPosition.x = Math.min(Math.max(screenPosition.x, -indicatorSize), containerWidth + indicatorSize) - halfSize;\n      screenPosition.y = Math.min(Math.max(screenPosition.y, -indicatorSize), containerHeight + indicatorSize) - halfSize;\n      this._screenPositionX = `${Math.floor(screenPosition.x + 0.25)}px`;\n      this._screenPositionY = `${Math.floor(screenPosition.y + 0.25)}px`;\n    }\n  }\n};\n\n/**\n * Animate the indicator to draw attention to the selection.\n */\nSelectionIndicatorViewModel.prototype.animateAppear = function () {\n  this._tweens.addProperty({\n    object: this,\n    property: \"_scale\",\n    startValue: 2,\n    stopValue: 1,\n    duration: 0.8,\n    easingFunction: EasingFunction.EXPONENTIAL_OUT\n  });\n};\n\n/**\n * Animate the indicator to release the selection.\n */\nSelectionIndicatorViewModel.prototype.animateDepart = function () {\n  this._tweens.addProperty({\n    object: this,\n    property: \"_scale\",\n    startValue: this._scale,\n    stopValue: 1.5,\n    duration: 0.8,\n    easingFunction: EasingFunction.EXPONENTIAL_OUT\n  });\n};\nObject.defineProperties(SelectionIndicatorViewModel.prototype, {\n  /**\n   * Gets the HTML element containing the selection indicator.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Element}\n   */\n  container: {\n    get: function () {\n      return this._container;\n    }\n  },\n  /**\n   * Gets the HTML element that holds the selection indicator.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Element}\n   */\n  selectionIndicatorElement: {\n    get: function () {\n      return this._selectionIndicatorElement;\n    }\n  },\n  /**\n   * Gets the scene being used.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    }\n  }\n});\n\n/**\n * A function that converts the world position of an object to a screen space position.\n * @callback SelectionIndicatorViewModel.ComputeScreenSpacePosition\n * @param {Cartesian3} position The position in WGS84 (world) coordinates.\n * @param {Cartesian2} result An object to return the input position transformed to window coordinates.\n * @returns {Cartesian2} The modified result parameter.\n */\nexport default SelectionIndicatorViewModel;","map":{"version":3,"names":["Cartesian2","defaultValue","defined","DeveloperError","EasingFunction","SceneTransforms","knockout","screenSpacePos","offScreen","SelectionIndicatorViewModel","scene","selectionIndicatorElement","container","_scene","_screenPositionX","_screenPositionY","_tweens","tweens","_container","document","body","_selectionIndicatorElement","_scale","position","undefined","showSelection","track","isVisible","defineProperty","get","computeScreenSpacePosition","result","worldToWindowCoordinates","prototype","update","screenPosition","containerWidth","parentNode","clientWidth","containerHeight","clientHeight","indicatorSize","halfSize","x","Math","min","max","y","floor","animateAppear","addProperty","object","property","startValue","stopValue","duration","easingFunction","EXPONENTIAL_OUT","animateDepart","Object","defineProperties"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/SelectionIndicator/SelectionIndicatorViewModel.js"],"sourcesContent":["import {\n  Cartesian2,\n  defaultValue,\n  defined,\n  DeveloperError,\n  EasingFunction,\n  SceneTransforms,\n} from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\n\nconst screenSpacePos = new Cartesian2();\nconst offScreen = \"-1000px\";\n\n/**\n * The view model for {@link SelectionIndicator}.\n * @alias SelectionIndicatorViewModel\n * @constructor\n *\n * @param {Scene} scene The scene instance to use for screen-space coordinate conversion.\n * @param {Element} selectionIndicatorElement The element containing all elements that make up the selection indicator.\n * @param {Element} container The DOM element that contains the widget.\n */\nfunction SelectionIndicatorViewModel(\n  scene,\n  selectionIndicatorElement,\n  container,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n\n  if (!defined(selectionIndicatorElement)) {\n    throw new DeveloperError(\"selectionIndicatorElement is required.\");\n  }\n\n  if (!defined(container)) {\n    throw new DeveloperError(\"container is required.\");\n  }\n  //>>includeEnd('debug')\n\n  this._scene = scene;\n  this._screenPositionX = offScreen;\n  this._screenPositionY = offScreen;\n  this._tweens = scene.tweens;\n  this._container = defaultValue(container, document.body);\n  this._selectionIndicatorElement = selectionIndicatorElement;\n  this._scale = 1;\n\n  /**\n   * Gets or sets the world position of the object for which to display the selection indicator.\n   * @type {Cartesian3}\n   */\n  this.position = undefined;\n\n  /**\n   * Gets or sets the visibility of the selection indicator.\n   * @type {boolean}\n   */\n  this.showSelection = false;\n\n  knockout.track(this, [\n    \"position\",\n    \"_screenPositionX\",\n    \"_screenPositionY\",\n    \"_scale\",\n    \"showSelection\",\n  ]);\n\n  /**\n   * Gets the visibility of the position indicator.  This can be false even if an\n   * object is selected, when the selected object has no position.\n   * @type {boolean}\n   */\n  this.isVisible = undefined;\n  knockout.defineProperty(this, \"isVisible\", {\n    get: function () {\n      return this.showSelection && defined(this.position);\n    },\n  });\n\n  knockout.defineProperty(this, \"_transform\", {\n    get: function () {\n      return `scale(${this._scale})`;\n    },\n  });\n\n  /**\n   * Gets or sets the function for converting the world position of the object to the screen space position.\n   *\n   * @member\n   * @type {SelectionIndicatorViewModel.ComputeScreenSpacePosition}\n   * @default SceneTransforms.worldToWindowCoordinates\n   *\n   * @example\n   * selectionIndicatorViewModel.computeScreenSpacePosition = function(position, result) {\n   *     return Cesium.SceneTransforms.worldToWindowCoordinates(scene, position, result);\n   * };\n   */\n  this.computeScreenSpacePosition = function (position, result) {\n    return SceneTransforms.worldToWindowCoordinates(scene, position, result);\n  };\n}\n\n/**\n * Updates the view of the selection indicator to match the position and content properties of the view model.\n * This function should be called as part of the render loop.\n */\nSelectionIndicatorViewModel.prototype.update = function () {\n  if (this.showSelection && defined(this.position)) {\n    const screenPosition = this.computeScreenSpacePosition(\n      this.position,\n      screenSpacePos,\n    );\n    if (!defined(screenPosition)) {\n      this._screenPositionX = offScreen;\n      this._screenPositionY = offScreen;\n    } else {\n      const container = this._container;\n      const containerWidth = container.parentNode.clientWidth;\n      const containerHeight = container.parentNode.clientHeight;\n      const indicatorSize = this._selectionIndicatorElement.clientWidth;\n      const halfSize = indicatorSize * 0.5;\n\n      screenPosition.x =\n        Math.min(\n          Math.max(screenPosition.x, -indicatorSize),\n          containerWidth + indicatorSize,\n        ) - halfSize;\n      screenPosition.y =\n        Math.min(\n          Math.max(screenPosition.y, -indicatorSize),\n          containerHeight + indicatorSize,\n        ) - halfSize;\n\n      this._screenPositionX = `${Math.floor(screenPosition.x + 0.25)}px`;\n      this._screenPositionY = `${Math.floor(screenPosition.y + 0.25)}px`;\n    }\n  }\n};\n\n/**\n * Animate the indicator to draw attention to the selection.\n */\nSelectionIndicatorViewModel.prototype.animateAppear = function () {\n  this._tweens.addProperty({\n    object: this,\n    property: \"_scale\",\n    startValue: 2,\n    stopValue: 1,\n    duration: 0.8,\n    easingFunction: EasingFunction.EXPONENTIAL_OUT,\n  });\n};\n\n/**\n * Animate the indicator to release the selection.\n */\nSelectionIndicatorViewModel.prototype.animateDepart = function () {\n  this._tweens.addProperty({\n    object: this,\n    property: \"_scale\",\n    startValue: this._scale,\n    stopValue: 1.5,\n    duration: 0.8,\n    easingFunction: EasingFunction.EXPONENTIAL_OUT,\n  });\n};\n\nObject.defineProperties(SelectionIndicatorViewModel.prototype, {\n  /**\n   * Gets the HTML element containing the selection indicator.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Element}\n   */\n  container: {\n    get: function () {\n      return this._container;\n    },\n  },\n\n  /**\n   * Gets the HTML element that holds the selection indicator.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Element}\n   */\n  selectionIndicatorElement: {\n    get: function () {\n      return this._selectionIndicatorElement;\n    },\n  },\n\n  /**\n   * Gets the scene being used.\n   * @memberof SelectionIndicatorViewModel.prototype\n   *\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n});\n\n/**\n * A function that converts the world position of an object to a screen space position.\n * @callback SelectionIndicatorViewModel.ComputeScreenSpacePosition\n * @param {Cartesian3} position The position in WGS84 (world) coordinates.\n * @param {Cartesian2} result An object to return the input position transformed to window coordinates.\n * @returns {Cartesian2} The modified result parameter.\n */\nexport default SelectionIndicatorViewModel;\n"],"mappings":"AAAA,SACEA,UAAU,EACVC,YAAY,EACZC,OAAO,EACPC,cAAc,EACdC,cAAc,EACdC,eAAe,QACV,gBAAgB;AACvB,OAAOC,QAAQ,MAAM,2BAA2B;AAEhD,MAAMC,cAAc,GAAG,IAAIP,UAAU,CAAC,CAAC;AACvC,MAAMQ,SAAS,GAAG,SAAS;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,2BAA2BA,CAClCC,KAAK,EACLC,yBAAyB,EACzBC,SAAS,EACT;EACA;EACA,IAAI,CAACV,OAAO,CAACQ,KAAK,CAAC,EAAE;IACnB,MAAM,IAAIP,cAAc,CAAC,oBAAoB,CAAC;EAChD;EAEA,IAAI,CAACD,OAAO,CAACS,yBAAyB,CAAC,EAAE;IACvC,MAAM,IAAIR,cAAc,CAAC,wCAAwC,CAAC;EACpE;EAEA,IAAI,CAACD,OAAO,CAACU,SAAS,CAAC,EAAE;IACvB,MAAM,IAAIT,cAAc,CAAC,wBAAwB,CAAC;EACpD;EACA;;EAEA,IAAI,CAACU,MAAM,GAAGH,KAAK;EACnB,IAAI,CAACI,gBAAgB,GAAGN,SAAS;EACjC,IAAI,CAACO,gBAAgB,GAAGP,SAAS;EACjC,IAAI,CAACQ,OAAO,GAAGN,KAAK,CAACO,MAAM;EAC3B,IAAI,CAACC,UAAU,GAAGjB,YAAY,CAACW,SAAS,EAAEO,QAAQ,CAACC,IAAI,CAAC;EACxD,IAAI,CAACC,0BAA0B,GAAGV,yBAAyB;EAC3D,IAAI,CAACW,MAAM,GAAG,CAAC;;EAEf;AACF;AACA;AACA;EACE,IAAI,CAACC,QAAQ,GAAGC,SAAS;;EAEzB;AACF;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAG,KAAK;EAE1BnB,QAAQ,CAACoB,KAAK,CAAC,IAAI,EAAE,CACnB,UAAU,EACV,kBAAkB,EAClB,kBAAkB,EAClB,QAAQ,EACR,eAAe,CAChB,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,SAAS,GAAGH,SAAS;EAC1BlB,QAAQ,CAACsB,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;IACzCC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACJ,aAAa,IAAIvB,OAAO,CAAC,IAAI,CAACqB,QAAQ,CAAC;IACrD;EACF,CAAC,CAAC;EAEFjB,QAAQ,CAACsB,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE;IAC1CC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,SAAS,IAAI,CAACP,MAAM,GAAG;IAChC;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACQ,0BAA0B,GAAG,UAAUP,QAAQ,EAAEQ,MAAM,EAAE;IAC5D,OAAO1B,eAAe,CAAC2B,wBAAwB,CAACtB,KAAK,EAAEa,QAAQ,EAAEQ,MAAM,CAAC;EAC1E,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACAtB,2BAA2B,CAACwB,SAAS,CAACC,MAAM,GAAG,YAAY;EACzD,IAAI,IAAI,CAACT,aAAa,IAAIvB,OAAO,CAAC,IAAI,CAACqB,QAAQ,CAAC,EAAE;IAChD,MAAMY,cAAc,GAAG,IAAI,CAACL,0BAA0B,CACpD,IAAI,CAACP,QAAQ,EACbhB,cACF,CAAC;IACD,IAAI,CAACL,OAAO,CAACiC,cAAc,CAAC,EAAE;MAC5B,IAAI,CAACrB,gBAAgB,GAAGN,SAAS;MACjC,IAAI,CAACO,gBAAgB,GAAGP,SAAS;IACnC,CAAC,MAAM;MACL,MAAMI,SAAS,GAAG,IAAI,CAACM,UAAU;MACjC,MAAMkB,cAAc,GAAGxB,SAAS,CAACyB,UAAU,CAACC,WAAW;MACvD,MAAMC,eAAe,GAAG3B,SAAS,CAACyB,UAAU,CAACG,YAAY;MACzD,MAAMC,aAAa,GAAG,IAAI,CAACpB,0BAA0B,CAACiB,WAAW;MACjE,MAAMI,QAAQ,GAAGD,aAAa,GAAG,GAAG;MAEpCN,cAAc,CAACQ,CAAC,GACdC,IAAI,CAACC,GAAG,CACND,IAAI,CAACE,GAAG,CAACX,cAAc,CAACQ,CAAC,EAAE,CAACF,aAAa,CAAC,EAC1CL,cAAc,GAAGK,aACnB,CAAC,GAAGC,QAAQ;MACdP,cAAc,CAACY,CAAC,GACdH,IAAI,CAACC,GAAG,CACND,IAAI,CAACE,GAAG,CAACX,cAAc,CAACY,CAAC,EAAE,CAACN,aAAa,CAAC,EAC1CF,eAAe,GAAGE,aACpB,CAAC,GAAGC,QAAQ;MAEd,IAAI,CAAC5B,gBAAgB,GAAG,GAAG8B,IAAI,CAACI,KAAK,CAACb,cAAc,CAACQ,CAAC,GAAG,IAAI,CAAC,IAAI;MAClE,IAAI,CAAC5B,gBAAgB,GAAG,GAAG6B,IAAI,CAACI,KAAK,CAACb,cAAc,CAACY,CAAC,GAAG,IAAI,CAAC,IAAI;IACpE;EACF;AACF,CAAC;;AAED;AACA;AACA;AACAtC,2BAA2B,CAACwB,SAAS,CAACgB,aAAa,GAAG,YAAY;EAChE,IAAI,CAACjC,OAAO,CAACkC,WAAW,CAAC;IACvBC,MAAM,EAAE,IAAI;IACZC,QAAQ,EAAE,QAAQ;IAClBC,UAAU,EAAE,CAAC;IACbC,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAE,GAAG;IACbC,cAAc,EAAEpD,cAAc,CAACqD;EACjC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACAhD,2BAA2B,CAACwB,SAAS,CAACyB,aAAa,GAAG,YAAY;EAChE,IAAI,CAAC1C,OAAO,CAACkC,WAAW,CAAC;IACvBC,MAAM,EAAE,IAAI;IACZC,QAAQ,EAAE,QAAQ;IAClBC,UAAU,EAAE,IAAI,CAAC/B,MAAM;IACvBgC,SAAS,EAAE,GAAG;IACdC,QAAQ,EAAE,GAAG;IACbC,cAAc,EAAEpD,cAAc,CAACqD;EACjC,CAAC,CAAC;AACJ,CAAC;AAEDE,MAAM,CAACC,gBAAgB,CAACnD,2BAA2B,CAACwB,SAAS,EAAE;EAC7D;AACF;AACA;AACA;AACA;AACA;EACErB,SAAS,EAAE;IACTiB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACX,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEP,yBAAyB,EAAE;IACzBkB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACR,0BAA0B;IACxC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEX,KAAK,EAAE;IACLmB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAChB,MAAM;IACpB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeJ,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}