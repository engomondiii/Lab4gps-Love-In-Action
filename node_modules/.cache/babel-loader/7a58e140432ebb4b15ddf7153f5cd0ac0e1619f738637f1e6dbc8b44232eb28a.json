{"ast":null,"code":"import { defaultValue, defined, destroyObject, DeveloperError, EventHelper, Fullscreen, getElement, OrthographicFrustum } from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport NoSleep from \"nosleep.js\";\nimport createCommand from \"../createCommand.js\";\nfunction lockScreen(orientation) {\n  let locked = false;\n  const screen = window.screen;\n  if (defined(screen)) {\n    if (defined(screen.lockOrientation)) {\n      locked = screen.lockOrientation(orientation);\n    } else if (defined(screen.mozLockOrientation)) {\n      locked = screen.mozLockOrientation(orientation);\n    } else if (defined(screen.msLockOrientation)) {\n      locked = screen.msLockOrientation(orientation);\n    } else if (defined(screen.orientation && screen.orientation.lock)) {\n      locked = screen.orientation.lock(orientation);\n    }\n  }\n  return locked;\n}\nfunction unlockScreen() {\n  const screen = window.screen;\n  if (defined(screen)) {\n    if (defined(screen.unlockOrientation)) {\n      screen.unlockOrientation();\n    } else if (defined(screen.mozUnlockOrientation)) {\n      screen.mozUnlockOrientation();\n    } else if (defined(screen.msUnlockOrientation)) {\n      screen.msUnlockOrientation();\n    } else if (defined(screen.orientation && screen.orientation.unlock)) {\n      screen.orientation.unlock();\n    }\n  }\n}\nfunction toggleVR(viewModel, scene, isVRMode, isOrthographic) {\n  if (isOrthographic()) {\n    return;\n  }\n  if (isVRMode()) {\n    scene.useWebVR = false;\n    if (viewModel._locked) {\n      unlockScreen();\n      viewModel._locked = false;\n    }\n    viewModel._noSleep.disable();\n    Fullscreen.exitFullscreen();\n    isVRMode(false);\n  } else {\n    if (!Fullscreen.fullscreen) {\n      Fullscreen.requestFullscreen(viewModel._vrElement);\n    }\n    viewModel._noSleep.enable();\n    if (!viewModel._locked) {\n      viewModel._locked = lockScreen(\"landscape\");\n    }\n    scene.useWebVR = true;\n    isVRMode(true);\n  }\n}\n\n/**\n * The view model for {@link VRButton}.\n * @alias VRButtonViewModel\n * @constructor\n *\n * @param {Scene} scene The scene.\n * @param {Element|string} [vrElement=document.body] The element or id to be placed into VR mode.\n */\nfunction VRButtonViewModel(scene, vrElement) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const that = this;\n  const isEnabled = knockout.observable(Fullscreen.enabled);\n  const isVRMode = knockout.observable(false);\n\n  /**\n   * Gets whether or not VR mode is active.\n   *\n   * @type {boolean}\n   */\n  this.isVRMode = undefined;\n  knockout.defineProperty(this, \"isVRMode\", {\n    get: function () {\n      return isVRMode();\n    }\n  });\n\n  /**\n   * Gets or sets whether or not VR functionality should be enabled.\n   *\n   * @type {boolean}\n   * @see Fullscreen.enabled\n   */\n  this.isVREnabled = undefined;\n  knockout.defineProperty(this, \"isVREnabled\", {\n    get: function () {\n      return isEnabled();\n    },\n    set: function (value) {\n      isEnabled(value && Fullscreen.enabled);\n    }\n  });\n\n  /**\n   * Gets the tooltip.  This property is observable.\n   *\n   * @type {string}\n   */\n  this.tooltip = undefined;\n  knockout.defineProperty(this, \"tooltip\", function () {\n    if (!isEnabled()) {\n      return \"VR mode is unavailable\";\n    }\n    return isVRMode() ? \"Exit VR mode\" : \"Enter VR mode\";\n  });\n  const isOrthographic = knockout.observable(false);\n  this._isOrthographic = undefined;\n  knockout.defineProperty(this, \"_isOrthographic\", {\n    get: function () {\n      return isOrthographic();\n    }\n  });\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(scene.preRender, function () {\n    isOrthographic(scene.camera.frustum instanceof OrthographicFrustum);\n  });\n  this._locked = false;\n  this._noSleep = new NoSleep();\n  this._command = createCommand(function () {\n    toggleVR(that, scene, isVRMode, isOrthographic);\n  }, knockout.getObservable(this, \"isVREnabled\"));\n  this._vrElement = defaultValue(getElement(vrElement), document.body);\n  this._callback = function () {\n    if (!Fullscreen.fullscreen && isVRMode()) {\n      scene.useWebVR = false;\n      if (that._locked) {\n        unlockScreen();\n        that._locked = false;\n      }\n      that._noSleep.disable();\n      isVRMode(false);\n    }\n  };\n  document.addEventListener(Fullscreen.changeEventName, this._callback);\n}\nObject.defineProperties(VRButtonViewModel.prototype, {\n  /**\n   * Gets or sets the HTML element to place into VR mode when the\n   * corresponding button is pressed.\n   * @memberof VRButtonViewModel.prototype\n   *\n   * @type {Element}\n   */\n  vrElement: {\n    //TODO:@exception {DeveloperError} value must be a valid HTML Element.\n    get: function () {\n      return this._vrElement;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!(value instanceof Element)) {\n        throw new DeveloperError(\"value must be a valid Element.\");\n      }\n      //>>includeEnd('debug');\n\n      this._vrElement = value;\n    }\n  },\n  /**\n   * Gets the Command to toggle VR mode.\n   * @memberof VRButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    }\n  }\n});\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nVRButtonViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.  Should be called to\n * properly clean up the view model when it is no longer needed.\n */\nVRButtonViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n  document.removeEventListener(Fullscreen.changeEventName, this._callback);\n  destroyObject(this);\n};\nexport default VRButtonViewModel;","map":{"version":3,"names":["defaultValue","defined","destroyObject","DeveloperError","EventHelper","Fullscreen","getElement","OrthographicFrustum","knockout","NoSleep","createCommand","lockScreen","orientation","locked","screen","window","lockOrientation","mozLockOrientation","msLockOrientation","lock","unlockScreen","unlockOrientation","mozUnlockOrientation","msUnlockOrientation","unlock","toggleVR","viewModel","scene","isVRMode","isOrthographic","useWebVR","_locked","_noSleep","disable","exitFullscreen","fullscreen","requestFullscreen","_vrElement","enable","VRButtonViewModel","vrElement","that","isEnabled","observable","enabled","undefined","defineProperty","get","isVREnabled","set","value","tooltip","_isOrthographic","_eventHelper","add","preRender","camera","frustum","_command","getObservable","document","body","_callback","addEventListener","changeEventName","Object","defineProperties","prototype","Element","command","isDestroyed","destroy","removeAll","removeEventListener"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/VRButton/VRButtonViewModel.js"],"sourcesContent":["import {\n  defaultValue,\n  defined,\n  destroyObject,\n  DeveloperError,\n  EventHelper,\n  Fullscreen,\n  getElement,\n  OrthographicFrustum,\n} from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport NoSleep from \"nosleep.js\";\nimport createCommand from \"../createCommand.js\";\n\nfunction lockScreen(orientation) {\n  let locked = false;\n  const screen = window.screen;\n  if (defined(screen)) {\n    if (defined(screen.lockOrientation)) {\n      locked = screen.lockOrientation(orientation);\n    } else if (defined(screen.mozLockOrientation)) {\n      locked = screen.mozLockOrientation(orientation);\n    } else if (defined(screen.msLockOrientation)) {\n      locked = screen.msLockOrientation(orientation);\n    } else if (defined(screen.orientation && screen.orientation.lock)) {\n      locked = screen.orientation.lock(orientation);\n    }\n  }\n  return locked;\n}\n\nfunction unlockScreen() {\n  const screen = window.screen;\n  if (defined(screen)) {\n    if (defined(screen.unlockOrientation)) {\n      screen.unlockOrientation();\n    } else if (defined(screen.mozUnlockOrientation)) {\n      screen.mozUnlockOrientation();\n    } else if (defined(screen.msUnlockOrientation)) {\n      screen.msUnlockOrientation();\n    } else if (defined(screen.orientation && screen.orientation.unlock)) {\n      screen.orientation.unlock();\n    }\n  }\n}\n\nfunction toggleVR(viewModel, scene, isVRMode, isOrthographic) {\n  if (isOrthographic()) {\n    return;\n  }\n\n  if (isVRMode()) {\n    scene.useWebVR = false;\n    if (viewModel._locked) {\n      unlockScreen();\n      viewModel._locked = false;\n    }\n    viewModel._noSleep.disable();\n    Fullscreen.exitFullscreen();\n    isVRMode(false);\n  } else {\n    if (!Fullscreen.fullscreen) {\n      Fullscreen.requestFullscreen(viewModel._vrElement);\n    }\n    viewModel._noSleep.enable();\n    if (!viewModel._locked) {\n      viewModel._locked = lockScreen(\"landscape\");\n    }\n    scene.useWebVR = true;\n    isVRMode(true);\n  }\n}\n\n/**\n * The view model for {@link VRButton}.\n * @alias VRButtonViewModel\n * @constructor\n *\n * @param {Scene} scene The scene.\n * @param {Element|string} [vrElement=document.body] The element or id to be placed into VR mode.\n */\nfunction VRButtonViewModel(scene, vrElement) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const that = this;\n\n  const isEnabled = knockout.observable(Fullscreen.enabled);\n  const isVRMode = knockout.observable(false);\n\n  /**\n   * Gets whether or not VR mode is active.\n   *\n   * @type {boolean}\n   */\n  this.isVRMode = undefined;\n  knockout.defineProperty(this, \"isVRMode\", {\n    get: function () {\n      return isVRMode();\n    },\n  });\n\n  /**\n   * Gets or sets whether or not VR functionality should be enabled.\n   *\n   * @type {boolean}\n   * @see Fullscreen.enabled\n   */\n  this.isVREnabled = undefined;\n  knockout.defineProperty(this, \"isVREnabled\", {\n    get: function () {\n      return isEnabled();\n    },\n    set: function (value) {\n      isEnabled(value && Fullscreen.enabled);\n    },\n  });\n\n  /**\n   * Gets the tooltip.  This property is observable.\n   *\n   * @type {string}\n   */\n  this.tooltip = undefined;\n  knockout.defineProperty(this, \"tooltip\", function () {\n    if (!isEnabled()) {\n      return \"VR mode is unavailable\";\n    }\n    return isVRMode() ? \"Exit VR mode\" : \"Enter VR mode\";\n  });\n\n  const isOrthographic = knockout.observable(false);\n\n  this._isOrthographic = undefined;\n  knockout.defineProperty(this, \"_isOrthographic\", {\n    get: function () {\n      return isOrthographic();\n    },\n  });\n\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(scene.preRender, function () {\n    isOrthographic(scene.camera.frustum instanceof OrthographicFrustum);\n  });\n\n  this._locked = false;\n  this._noSleep = new NoSleep();\n\n  this._command = createCommand(\n    function () {\n      toggleVR(that, scene, isVRMode, isOrthographic);\n    },\n    knockout.getObservable(this, \"isVREnabled\"),\n  );\n\n  this._vrElement = defaultValue(getElement(vrElement), document.body);\n\n  this._callback = function () {\n    if (!Fullscreen.fullscreen && isVRMode()) {\n      scene.useWebVR = false;\n      if (that._locked) {\n        unlockScreen();\n        that._locked = false;\n      }\n      that._noSleep.disable();\n      isVRMode(false);\n    }\n  };\n  document.addEventListener(Fullscreen.changeEventName, this._callback);\n}\n\nObject.defineProperties(VRButtonViewModel.prototype, {\n  /**\n   * Gets or sets the HTML element to place into VR mode when the\n   * corresponding button is pressed.\n   * @memberof VRButtonViewModel.prototype\n   *\n   * @type {Element}\n   */\n  vrElement: {\n    //TODO:@exception {DeveloperError} value must be a valid HTML Element.\n    get: function () {\n      return this._vrElement;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!(value instanceof Element)) {\n        throw new DeveloperError(\"value must be a valid Element.\");\n      }\n      //>>includeEnd('debug');\n\n      this._vrElement = value;\n    },\n  },\n\n  /**\n   * Gets the Command to toggle VR mode.\n   * @memberof VRButtonViewModel.prototype\n   *\n   * @type {Command}\n   */\n  command: {\n    get: function () {\n      return this._command;\n    },\n  },\n});\n\n/**\n * @returns {boolean} true if the object has been destroyed, false otherwise.\n */\nVRButtonViewModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the view model.  Should be called to\n * properly clean up the view model when it is no longer needed.\n */\nVRButtonViewModel.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n  document.removeEventListener(Fullscreen.changeEventName, this._callback);\n  destroyObject(this);\n};\nexport default VRButtonViewModel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}