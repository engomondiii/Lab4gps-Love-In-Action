{"ast":null,"code":"/**\n * Constructs an image from a TypedArray of pixel values\n *\n * @param {Uint8Array} typedArray The array of pixel values\n * @param {number} width The width of the image to create\n * @param {number} height The height of the image to create\n * @returns {HTMLCanvasElement} A new canvas containing the constructed image\n *\n * @private\n */\nfunction getImageFromTypedArray(typedArray, width, height) {\n  // Input typedArray is Uint8Array, ImageData needs Uint8ClampedArray\n  // To avoid copying, make a new DataView of the same buffer\n  const dataArray = new Uint8ClampedArray(typedArray.buffer);\n  const imageData = new ImageData(dataArray, width, height);\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  canvas.getContext(\"2d\").putImageData(imageData, 0, 0);\n  return canvas;\n}\nexport default getImageFromTypedArray;","map":{"version":3,"names":["getImageFromTypedArray","typedArray","width","height","dataArray","Uint8ClampedArray","buffer","imageData","ImageData","canvas","document","createElement","getContext","putImageData"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/getImageFromTypedArray.js"],"sourcesContent":["/**\n * Constructs an image from a TypedArray of pixel values\n *\n * @param {Uint8Array} typedArray The array of pixel values\n * @param {number} width The width of the image to create\n * @param {number} height The height of the image to create\n * @returns {HTMLCanvasElement} A new canvas containing the constructed image\n *\n * @private\n */\nfunction getImageFromTypedArray(typedArray, width, height) {\n  // Input typedArray is Uint8Array, ImageData needs Uint8ClampedArray\n  // To avoid copying, make a new DataView of the same buffer\n  const dataArray = new Uint8ClampedArray(typedArray.buffer);\n  const imageData = new ImageData(dataArray, width, height);\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  canvas.getContext(\"2d\").putImageData(imageData, 0, 0);\n\n  return canvas;\n}\nexport default getImageFromTypedArray;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,sBAAsBA,CAACC,UAAU,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACzD;EACA;EACA,MAAMC,SAAS,GAAG,IAAIC,iBAAiB,CAACJ,UAAU,CAACK,MAAM,CAAC;EAC1D,MAAMC,SAAS,GAAG,IAAIC,SAAS,CAACJ,SAAS,EAAEF,KAAK,EAAEC,MAAM,CAAC;EAEzD,MAAMM,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/CF,MAAM,CAACP,KAAK,GAAGA,KAAK;EACpBO,MAAM,CAACN,MAAM,GAAGA,MAAM;EACtBM,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC,CAACC,YAAY,CAACN,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;EAErD,OAAOE,MAAM;AACf;AACA,eAAeT,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}