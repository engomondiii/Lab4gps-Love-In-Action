{"ast":null,"code":"import Check from \"./Check.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Morton Order (aka Z-Order Curve) helper functions.\n * @see {@link https://en.wikipedia.org/wiki/Z-order_curve}\n *\n * @namespace MortonOrder\n * @private\n */\nconst MortonOrder = {};\n\n/**\n * Inserts one 0 bit of spacing between a number's bits. This is the opposite of removeOneSpacing.\n *\n * Example:\n *  input: 6\n *  input (binary):  110\n *  output (binary): 10100\n *                    ^ ^ (added)\n *  output: 20\n *\n * @private\n * @param {number} v A 16-bit unsigned integer.\n * @returns {number} A 32-bit unsigned integer.\n * @see {@link https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/}\n * @private\n */\nfunction insertOneSpacing(v) {\n  v = (v ^ v << 8) & 0x00ff00ff;\n  v = (v ^ v << 4) & 0x0f0f0f0f;\n  v = (v ^ v << 2) & 0x33333333;\n  v = (v ^ v << 1) & 0x55555555;\n  return v;\n}\n\n/**\n * Inserts two 0 bits of spacing between a number's bits. This is the opposite of removeTwoSpacing.\n *\n * Example:\n *  input: 6\n *  input (binary):  110\n *  output (binary): 1001000\n *                    ^^ ^^ (added)\n *  output: 72\n *\n * @private\n * @param {number} v A 10-bit unsigned integer.\n * @returns {number} A 30-bit unsigned integer.\n * @see {@link https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/}\n */\nfunction insertTwoSpacing(v) {\n  v = (v ^ v << 16) & 0x030000ff;\n  v = (v ^ v << 8) & 0x0300f00f;\n  v = (v ^ v << 4) & 0x030c30c3;\n  v = (v ^ v << 2) & 0x09249249;\n  return v;\n}\n\n/**\n * Removes one bit of spacing between bits. This is the opposite of insertOneSpacing.\n *\n * Example:\n *  input: 20\n *  input (binary):  10100\n *                    ^ ^ (removed)\n *  output (binary): 110\n *  output: 6\n *\n * @private\n * @param {number} v A 32-bit unsigned integer.\n * @returns {number} A 16-bit unsigned integer.\n * @see {@link https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/}\n */\nfunction removeOneSpacing(v) {\n  v &= 0x55555555;\n  v = (v ^ v >> 1) & 0x33333333;\n  v = (v ^ v >> 2) & 0x0f0f0f0f;\n  v = (v ^ v >> 4) & 0x00ff00ff;\n  v = (v ^ v >> 8) & 0x0000ffff;\n  return v;\n}\n\n/**\n * Removes two bits of spacing between bits. This is the opposite of insertTwoSpacing.\n *\n * Example:\n *  input: 72\n *  input (binary):  1001000\n *                    ^^ ^^ (removed)\n *  output (binary): 110\n *  output: 6\n *\n * @private\n * @param {number} v A 30-bit unsigned integer.\n * @returns {number} A 10-bit unsigned integer.\n * @see {@link https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/}\n */\nfunction removeTwoSpacing(v) {\n  v &= 0x09249249;\n  v = (v ^ v >> 2) & 0x030c30c3;\n  v = (v ^ v >> 4) & 0x0300f00f;\n  v = (v ^ v >> 8) & 0xff0000ff;\n  v = (v ^ v >> 16) & 0x000003ff;\n  return v;\n}\n\n/**\n * Computes the Morton index from 2D coordinates. This is equivalent to interleaving their bits.\n * The inputs must be 16-bit unsigned integers (resulting in 32-bit Morton index) due to 32-bit bitwise operator limitation in JavaScript.\n *\n * @param {number} x The X coordinate in the range [0, (2^16)-1].\n * @param {number} y The Y coordinate in the range [0, (2^16)-1].\n * @returns {number} The Morton index.\n * @private\n */\nMortonOrder.encode2D = function (x, y) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"x\", x);\n  Check.typeOf.number(\"y\", y);\n  if (x < 0 || x > 65535 || y < 0 || y > 65535) {\n    throw new DeveloperError(\"inputs must be 16-bit unsigned integers\");\n  }\n  //>>includeEnd('debug');\n\n  // Note: JavaScript bitwise operations return signed 32-bit integers, so the\n  // final result needs to be reintepreted as an unsigned integer using >>> 0.\n  // This is not needed for encode3D because the result is guaranteed to be at most\n  // 30 bits and thus will always be interpreted as an unsigned value.\n  return (insertOneSpacing(x) | insertOneSpacing(y) << 1) >>> 0;\n};\n\n/**\n * Computes the 2D coordinates from a Morton index. This is equivalent to deinterleaving their bits.\n * The input must be a 32-bit unsigned integer (resulting in 16 bits per coordinate) due to 32-bit bitwise operator limitation in JavaScript.\n *\n * @param {number} mortonIndex The Morton index in the range [0, (2^32)-1].\n * @param {number[]} [result] The array onto which to store the result.\n * @returns {number[]} An array containing the 2D coordinates correspoding to the Morton index.\n * @private\n */\nMortonOrder.decode2D = function (mortonIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"mortonIndex\", mortonIndex);\n  if (mortonIndex < 0 || mortonIndex > 4294967295) {\n    throw new DeveloperError(\"input must be a 32-bit unsigned integer\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Array(2);\n  }\n  result[0] = removeOneSpacing(mortonIndex);\n  result[1] = removeOneSpacing(mortonIndex >> 1);\n  return result;\n};\n\n/**\n * Computes the Morton index from 3D coordinates. This is equivalent to interleaving their bits.\n * The inputs must be 10-bit unsigned integers (resulting in 30-bit Morton index) due to 32-bit bitwise operator limitation in JavaScript.\n *\n * @param {number} x The X coordinate in the range [0, (2^10)-1].\n * @param {number} y The Y coordinate in the range [0, (2^10)-1].\n * @param {number} z The Z coordinate in the range [0, (2^10)-1].\n * @returns {number} The Morton index.\n * @private\n */\nMortonOrder.encode3D = function (x, y, z) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"x\", x);\n  Check.typeOf.number(\"y\", y);\n  Check.typeOf.number(\"z\", z);\n  if (x < 0 || x > 1023 || y < 0 || y > 1023 || z < 0 || z > 1023) {\n    throw new DeveloperError(\"inputs must be 10-bit unsigned integers\");\n  }\n  //>>includeEnd('debug');\n\n  return insertTwoSpacing(x) | insertTwoSpacing(y) << 1 | insertTwoSpacing(z) << 2;\n};\n\n/**\n * Computes the 3D coordinates from a Morton index. This is equivalent to deinterleaving their bits.\n * The input must be a 30-bit unsigned integer (resulting in 10 bits per coordinate) due to 32-bit bitwise operator limitation in JavaScript.\n *\n * @param {number} mortonIndex The Morton index in the range [0, (2^30)-1].\n * @param {number[]} [result] The array onto which to store the result.\n * @returns {number[]} An array containing the 3D coordinates corresponding to the Morton index.\n * @private\n */\nMortonOrder.decode3D = function (mortonIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"mortonIndex\", mortonIndex);\n  if (mortonIndex < 0 || mortonIndex > 1073741823) {\n    throw new DeveloperError(\"input must be a 30-bit unsigned integer\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Array(3);\n  }\n  result[0] = removeTwoSpacing(mortonIndex);\n  result[1] = removeTwoSpacing(mortonIndex >> 1);\n  result[2] = removeTwoSpacing(mortonIndex >> 2);\n  return result;\n};\nexport default MortonOrder;","map":{"version":3,"names":["Check","defined","DeveloperError","MortonOrder","insertOneSpacing","v","insertTwoSpacing","removeOneSpacing","removeTwoSpacing","encode2D","x","y","typeOf","number","decode2D","mortonIndex","result","Array","encode3D","z","decode3D"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/MortonOrder.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Morton Order (aka Z-Order Curve) helper functions.\n * @see {@link https://en.wikipedia.org/wiki/Z-order_curve}\n *\n * @namespace MortonOrder\n * @private\n */\nconst MortonOrder = {};\n\n/**\n * Inserts one 0 bit of spacing between a number's bits. This is the opposite of removeOneSpacing.\n *\n * Example:\n *  input: 6\n *  input (binary):  110\n *  output (binary): 10100\n *                    ^ ^ (added)\n *  output: 20\n *\n * @private\n * @param {number} v A 16-bit unsigned integer.\n * @returns {number} A 32-bit unsigned integer.\n * @see {@link https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/}\n * @private\n */\nfunction insertOneSpacing(v) {\n  v = (v ^ (v << 8)) & 0x00ff00ff;\n  v = (v ^ (v << 4)) & 0x0f0f0f0f;\n  v = (v ^ (v << 2)) & 0x33333333;\n  v = (v ^ (v << 1)) & 0x55555555;\n  return v;\n}\n\n/**\n * Inserts two 0 bits of spacing between a number's bits. This is the opposite of removeTwoSpacing.\n *\n * Example:\n *  input: 6\n *  input (binary):  110\n *  output (binary): 1001000\n *                    ^^ ^^ (added)\n *  output: 72\n *\n * @private\n * @param {number} v A 10-bit unsigned integer.\n * @returns {number} A 30-bit unsigned integer.\n * @see {@link https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/}\n */\nfunction insertTwoSpacing(v) {\n  v = (v ^ (v << 16)) & 0x030000ff;\n  v = (v ^ (v << 8)) & 0x0300f00f;\n  v = (v ^ (v << 4)) & 0x030c30c3;\n  v = (v ^ (v << 2)) & 0x09249249;\n  return v;\n}\n\n/**\n * Removes one bit of spacing between bits. This is the opposite of insertOneSpacing.\n *\n * Example:\n *  input: 20\n *  input (binary):  10100\n *                    ^ ^ (removed)\n *  output (binary): 110\n *  output: 6\n *\n * @private\n * @param {number} v A 32-bit unsigned integer.\n * @returns {number} A 16-bit unsigned integer.\n * @see {@link https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/}\n */\nfunction removeOneSpacing(v) {\n  v &= 0x55555555;\n  v = (v ^ (v >> 1)) & 0x33333333;\n  v = (v ^ (v >> 2)) & 0x0f0f0f0f;\n  v = (v ^ (v >> 4)) & 0x00ff00ff;\n  v = (v ^ (v >> 8)) & 0x0000ffff;\n  return v;\n}\n\n/**\n * Removes two bits of spacing between bits. This is the opposite of insertTwoSpacing.\n *\n * Example:\n *  input: 72\n *  input (binary):  1001000\n *                    ^^ ^^ (removed)\n *  output (binary): 110\n *  output: 6\n *\n * @private\n * @param {number} v A 30-bit unsigned integer.\n * @returns {number} A 10-bit unsigned integer.\n * @see {@link https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/}\n */\nfunction removeTwoSpacing(v) {\n  v &= 0x09249249;\n  v = (v ^ (v >> 2)) & 0x030c30c3;\n  v = (v ^ (v >> 4)) & 0x0300f00f;\n  v = (v ^ (v >> 8)) & 0xff0000ff;\n  v = (v ^ (v >> 16)) & 0x000003ff;\n  return v;\n}\n\n/**\n * Computes the Morton index from 2D coordinates. This is equivalent to interleaving their bits.\n * The inputs must be 16-bit unsigned integers (resulting in 32-bit Morton index) due to 32-bit bitwise operator limitation in JavaScript.\n *\n * @param {number} x The X coordinate in the range [0, (2^16)-1].\n * @param {number} y The Y coordinate in the range [0, (2^16)-1].\n * @returns {number} The Morton index.\n * @private\n */\nMortonOrder.encode2D = function (x, y) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"x\", x);\n  Check.typeOf.number(\"y\", y);\n  if (x < 0 || x > 65535 || y < 0 || y > 65535) {\n    throw new DeveloperError(\"inputs must be 16-bit unsigned integers\");\n  }\n  //>>includeEnd('debug');\n\n  // Note: JavaScript bitwise operations return signed 32-bit integers, so the\n  // final result needs to be reintepreted as an unsigned integer using >>> 0.\n  // This is not needed for encode3D because the result is guaranteed to be at most\n  // 30 bits and thus will always be interpreted as an unsigned value.\n  return (insertOneSpacing(x) | (insertOneSpacing(y) << 1)) >>> 0;\n};\n\n/**\n * Computes the 2D coordinates from a Morton index. This is equivalent to deinterleaving their bits.\n * The input must be a 32-bit unsigned integer (resulting in 16 bits per coordinate) due to 32-bit bitwise operator limitation in JavaScript.\n *\n * @param {number} mortonIndex The Morton index in the range [0, (2^32)-1].\n * @param {number[]} [result] The array onto which to store the result.\n * @returns {number[]} An array containing the 2D coordinates correspoding to the Morton index.\n * @private\n */\nMortonOrder.decode2D = function (mortonIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"mortonIndex\", mortonIndex);\n  if (mortonIndex < 0 || mortonIndex > 4294967295) {\n    throw new DeveloperError(\"input must be a 32-bit unsigned integer\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Array(2);\n  }\n\n  result[0] = removeOneSpacing(mortonIndex);\n  result[1] = removeOneSpacing(mortonIndex >> 1);\n  return result;\n};\n\n/**\n * Computes the Morton index from 3D coordinates. This is equivalent to interleaving their bits.\n * The inputs must be 10-bit unsigned integers (resulting in 30-bit Morton index) due to 32-bit bitwise operator limitation in JavaScript.\n *\n * @param {number} x The X coordinate in the range [0, (2^10)-1].\n * @param {number} y The Y coordinate in the range [0, (2^10)-1].\n * @param {number} z The Z coordinate in the range [0, (2^10)-1].\n * @returns {number} The Morton index.\n * @private\n */\nMortonOrder.encode3D = function (x, y, z) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"x\", x);\n  Check.typeOf.number(\"y\", y);\n  Check.typeOf.number(\"z\", z);\n  if (x < 0 || x > 1023 || y < 0 || y > 1023 || z < 0 || z > 1023) {\n    throw new DeveloperError(\"inputs must be 10-bit unsigned integers\");\n  }\n  //>>includeEnd('debug');\n\n  return (\n    insertTwoSpacing(x) |\n    (insertTwoSpacing(y) << 1) |\n    (insertTwoSpacing(z) << 2)\n  );\n};\n\n/**\n * Computes the 3D coordinates from a Morton index. This is equivalent to deinterleaving their bits.\n * The input must be a 30-bit unsigned integer (resulting in 10 bits per coordinate) due to 32-bit bitwise operator limitation in JavaScript.\n *\n * @param {number} mortonIndex The Morton index in the range [0, (2^30)-1].\n * @param {number[]} [result] The array onto which to store the result.\n * @returns {number[]} An array containing the 3D coordinates corresponding to the Morton index.\n * @private\n */\nMortonOrder.decode3D = function (mortonIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"mortonIndex\", mortonIndex);\n  if (mortonIndex < 0 || mortonIndex > 1073741823) {\n    throw new DeveloperError(\"input must be a 30-bit unsigned integer\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Array(3);\n  }\n\n  result[0] = removeTwoSpacing(mortonIndex);\n  result[1] = removeTwoSpacing(mortonIndex >> 1);\n  result[2] = removeTwoSpacing(mortonIndex >> 2);\n  return result;\n};\n\nexport default MortonOrder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}