{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Constants used to indicated what part of the sensor volume to display.\n *\n * @enum {Number}\n */\nconst SensorVolumePortionToDisplay = {\n  /**\n   * 0x0000.  Display the complete sensor volume.\n   *\n   * @type {Number}\n   * @constant\n   */\n  COMPLETE: 0x0000,\n  /**\n   * 0x0001.  Display the portion of the sensor volume that lies below the true horizon of the ellipsoid.\n   *\n   * @type {Number}\n   * @constant\n   */\n  BELOW_ELLIPSOID_HORIZON: 0x0001,\n  /**\n   * 0x0002.  Display the portion of the sensor volume that lies above the true horizon of the ellipsoid.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ABOVE_ELLIPSOID_HORIZON: 0x0002\n};\n\n/**\n * Validates that the provided value is a valid {@link SensorVolumePortionToDisplay} enumeration value.\n *\n * @param {SensorVolumePortionToDisplay} portionToDisplay The value to validate.\n *\n * @returns {Boolean} <code>true</code> if the provided value is a valid enumeration value; otherwise, <code>false</code>.\n */\nSensorVolumePortionToDisplay.validate = function (portionToDisplay) {\n  return portionToDisplay === SensorVolumePortionToDisplay.COMPLETE || portionToDisplay === SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON || portionToDisplay === SensorVolumePortionToDisplay.ABOVE_ELLIPSOID_HORIZON;\n};\n\n/**\n * Converts the provided value to its corresponding enumeration string.\n *\n * @param {SensorVolumePortionToDisplay} portionToDisplay The value to be converted to its corresponding enumeration string.\n *\n * @returns {String} The enumeration string corresponding to the value.\n */\nSensorVolumePortionToDisplay.toString = function (portionToDisplay) {\n  switch (portionToDisplay) {\n    case SensorVolumePortionToDisplay.COMPLETE:\n      return \"COMPLETE\";\n    case SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON:\n      return \"BELOW_ELLIPSOID_HORIZON\";\n    case SensorVolumePortionToDisplay.ABOVE_ELLIPSOID_HORIZON:\n      return \"ABOVE_ELLIPSOID_HORIZON\";\n    default:\n      throw new DeveloperError(\"SensorVolumePortionToDisplay value is not valid and cannot be converted to a String.\");\n  }\n};\nexport default SensorVolumePortionToDisplay;","map":{"version":3,"names":["DeveloperError","SensorVolumePortionToDisplay","COMPLETE","BELOW_ELLIPSOID_HORIZON","ABOVE_ELLIPSOID_HORIZON","validate","portionToDisplay","toString"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/SensorVolumePortionToDisplay.js"],"sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Constants used to indicated what part of the sensor volume to display.\n *\n * @enum {Number}\n */\nconst SensorVolumePortionToDisplay = {\n  /**\n   * 0x0000.  Display the complete sensor volume.\n   *\n   * @type {Number}\n   * @constant\n   */\n  COMPLETE: 0x0000,\n  /**\n   * 0x0001.  Display the portion of the sensor volume that lies below the true horizon of the ellipsoid.\n   *\n   * @type {Number}\n   * @constant\n   */\n  BELOW_ELLIPSOID_HORIZON: 0x0001,\n  /**\n   * 0x0002.  Display the portion of the sensor volume that lies above the true horizon of the ellipsoid.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ABOVE_ELLIPSOID_HORIZON: 0x0002,\n};\n\n/**\n * Validates that the provided value is a valid {@link SensorVolumePortionToDisplay} enumeration value.\n *\n * @param {SensorVolumePortionToDisplay} portionToDisplay The value to validate.\n *\n * @returns {Boolean} <code>true</code> if the provided value is a valid enumeration value; otherwise, <code>false</code>.\n */\nSensorVolumePortionToDisplay.validate = function (portionToDisplay) {\n  return (\n    portionToDisplay === SensorVolumePortionToDisplay.COMPLETE ||\n    portionToDisplay === SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON ||\n    portionToDisplay === SensorVolumePortionToDisplay.ABOVE_ELLIPSOID_HORIZON\n  );\n};\n\n/**\n * Converts the provided value to its corresponding enumeration string.\n *\n * @param {SensorVolumePortionToDisplay} portionToDisplay The value to be converted to its corresponding enumeration string.\n *\n * @returns {String} The enumeration string corresponding to the value.\n */\nSensorVolumePortionToDisplay.toString = function (portionToDisplay) {\n  switch (portionToDisplay) {\n    case SensorVolumePortionToDisplay.COMPLETE:\n      return \"COMPLETE\";\n    case SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON:\n      return \"BELOW_ELLIPSOID_HORIZON\";\n    case SensorVolumePortionToDisplay.ABOVE_ELLIPSOID_HORIZON:\n      return \"ABOVE_ELLIPSOID_HORIZON\";\n    default:\n      throw new DeveloperError(\n        \"SensorVolumePortionToDisplay value is not valid and cannot be converted to a String.\",\n      );\n  }\n};\n\nexport default SensorVolumePortionToDisplay;\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,2BAA2B;;AAEtD;AACA;AACA;AACA;AACA;AACA,MAAMC,4BAA4B,GAAG;EACnC;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,MAAM;EAChB;AACF;AACA;AACA;AACA;AACA;EACEC,uBAAuB,EAAE,MAAM;EAC/B;AACF;AACA;AACA;AACA;AACA;EACEC,uBAAuB,EAAE;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,4BAA4B,CAACI,QAAQ,GAAG,UAAUC,gBAAgB,EAAE;EAClE,OACEA,gBAAgB,KAAKL,4BAA4B,CAACC,QAAQ,IAC1DI,gBAAgB,KAAKL,4BAA4B,CAACE,uBAAuB,IACzEG,gBAAgB,KAAKL,4BAA4B,CAACG,uBAAuB;AAE7E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,4BAA4B,CAACM,QAAQ,GAAG,UAAUD,gBAAgB,EAAE;EAClE,QAAQA,gBAAgB;IACtB,KAAKL,4BAA4B,CAACC,QAAQ;MACxC,OAAO,UAAU;IACnB,KAAKD,4BAA4B,CAACE,uBAAuB;MACvD,OAAO,yBAAyB;IAClC,KAAKF,4BAA4B,CAACG,uBAAuB;MACvD,OAAO,yBAAyB;IAClC;MACE,MAAM,IAAIJ,cAAc,CACtB,sFACF,CAAC;EACL;AACF,CAAC;AAED,eAAeC,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}