{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport TrackingReferenceFrame from \"../Core/TrackingReferenceFrame.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport HeightReference, { isHeightReferenceClamp } from \"../Scene/HeightReference.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport BoxGraphics from \"./BoxGraphics.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport CorridorGraphics from \"./CorridorGraphics.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport createRawPropertyDescriptor from \"./createRawPropertyDescriptor.js\";\nimport CylinderGraphics from \"./CylinderGraphics.js\";\nimport EllipseGraphics from \"./EllipseGraphics.js\";\nimport EllipsoidGraphics from \"./EllipsoidGraphics.js\";\nimport LabelGraphics from \"./LabelGraphics.js\";\nimport ModelGraphics from \"./ModelGraphics.js\";\nimport Cesium3DTilesetGraphics from \"./Cesium3DTilesetGraphics.js\";\nimport PathGraphics from \"./PathGraphics.js\";\nimport PlaneGraphics from \"./PlaneGraphics.js\";\nimport PointGraphics from \"./PointGraphics.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\nimport PolylineVolumeGraphics from \"./PolylineVolumeGraphics.js\";\nimport Property from \"./Property.js\";\nimport PropertyBag from \"./PropertyBag.js\";\nimport RectangleGraphics from \"./RectangleGraphics.js\";\nimport WallGraphics from \"./WallGraphics.js\";\nconst cartoScratch = new Cartographic();\nconst ExtraPropertyNames = [];\nfunction createConstantPositionProperty(value) {\n  return new ConstantPositionProperty(value);\n}\nfunction createPositionPropertyDescriptor(name) {\n  return createPropertyDescriptor(name, undefined, createConstantPositionProperty);\n}\nfunction createPropertyTypeDescriptor(name, Type) {\n  return createPropertyDescriptor(name, undefined, function (value) {\n    if (value instanceof Type) {\n      return value;\n    }\n    return new Type(value);\n  });\n}\n\n/**\n * @typedef {object} Entity.ConstructorOptions\n *\n * Initialization options for the Entity constructor\n *\n * @property {string} [id] A unique identifier for this object. If none is provided, a GUID is generated.\n * @property {string} [name] A human readable name to display to users. It does not have to be unique.\n * @property {TimeIntervalCollection} [availability] The availability, if any, associated with this object.\n * @property {boolean} [show] A boolean value indicating if the entity and its children are displayed.\n * @property {TrackingReferenceFrame} [trackingReferenceFrame=TrackingReferenceFrame.AUTODETECT] The reference frame used when this entity is being tracked. <br/> If <code>undefined</code>, reference frame is determined based on entity velocity: near-surface slow moving entities are tracked using the local east-north-up reference frame, whereas fast moving entities such as satellites are tracked using VVLH (Vehicle Velocity, Local Horizontal).\n * @property {Property | string} [description] A string Property specifying an HTML description for this entity.\n * @property {PositionProperty | Cartesian3 | CallbackPositionProperty} [position] A Property specifying the entity position.\n * @property {Property | Quaternion} [orientation=Transforms.eastNorthUpToFixedFrame(position)] A Property specifying the entity orientation in respect to Earth-fixed-Earth-centered (ECEF). If undefined, east-north-up at entity position is used.\n * @property {Property | Cartesian3} [viewFrom] A suggested initial offset for viewing this object.\n * @property {Entity} [parent] A parent entity to associate with this entity.\n * @property {BillboardGraphics | BillboardGraphics.ConstructorOptions} [billboard] A billboard to associate with this entity.\n * @property {BoxGraphics | BoxGraphics.ConstructorOptions} [box] A box to associate with this entity.\n * @property {CorridorGraphics | CorridorGraphics.ConstructorOptions} [corridor] A corridor to associate with this entity.\n * @property {CylinderGraphics | CylinderGraphics.ConstructorOptions} [cylinder] A cylinder to associate with this entity.\n * @property {EllipseGraphics | EllipseGraphics.ConstructorOptions} [ellipse] A ellipse to associate with this entity.\n * @property {EllipsoidGraphics | EllipsoidGraphics.ConstructorOptions} [ellipsoid] A ellipsoid to associate with this entity.\n * @property {LabelGraphics | LabelGraphics.ConstructorOptions} [label] A options.label to associate with this entity.\n * @property {ModelGraphics | ModelGraphics.ConstructorOptions} [model] A model to associate with this entity.\n * @property {Cesium3DTilesetGraphics | Cesium3DTilesetGraphics.ConstructorOptions} [tileset] A 3D Tiles tileset to associate with this entity.\n * @property {PathGraphics | PathGraphics.ConstructorOptions} [path] A path to associate with this entity.\n * @property {PlaneGraphics | PlaneGraphics.ConstructorOptions} [plane] A plane to associate with this entity.\n * @property {PointGraphics | PointGraphics.ConstructorOptions} [point] A point to associate with this entity.\n * @property {PolygonGraphics | PolygonGraphics.ConstructorOptions} [polygon] A polygon to associate with this entity.\n * @property {PolylineGraphics | PolylineGraphics.ConstructorOptions} [polyline] A polyline to associate with this entity.\n * @property {PropertyBag | Object<string,*>} [properties] Arbitrary properties to associate with this entity.\n * @property {PolylineVolumeGraphics | PolylineVolumeGraphics.ConstructorOptions} [polylineVolume] A polylineVolume to associate with this entity.\n * @property {RectangleGraphics | RectangleGraphics.ConstructorOptions} [rectangle] A rectangle to associate with this entity.\n * @property {WallGraphics | WallGraphics.ConstructorOptions} [wall] A wall to associate with this entity.\n */\n\n/**\n * Entity instances aggregate multiple forms of visualization into a single high-level object.\n * They can be created manually and added to {@link Viewer#entities} or be produced by\n * data sources, such as {@link CzmlDataSource} and {@link GeoJsonDataSource}.\n * @alias Entity\n * @constructor\n *\n * @param {Entity.ConstructorOptions} [options] Object describing initialization options\n *\n * @see {@link https://cesium.com/learn/cesiumjs-learn/cesiumjs-creating-entities/|Creating Entities}\n */\nfunction Entity(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let id = options.id;\n  if (!defined(id)) {\n    id = createGuid();\n  }\n  this._availability = undefined;\n  this._id = id;\n  this._definitionChanged = new Event();\n  this._name = options.name;\n  this._show = defaultValue(options.show, true);\n  this._trackingReferenceFrame = defaultValue(options.trackingReferenceFrame, TrackingReferenceFrame.AUTODETECT);\n  this._parent = undefined;\n  this._propertyNames = [\"billboard\", \"box\", \"corridor\", \"cylinder\", \"description\", \"ellipse\", \"ellipsoid\", \"label\", \"model\", \"tileset\", \"orientation\", \"path\", \"plane\", \"point\", \"polygon\", \"polyline\", \"polylineVolume\", \"position\", \"properties\", \"rectangle\", \"viewFrom\", \"wall\", ...ExtraPropertyNames];\n  this._billboard = undefined;\n  this._billboardSubscription = undefined;\n  this._box = undefined;\n  this._boxSubscription = undefined;\n  this._corridor = undefined;\n  this._corridorSubscription = undefined;\n  this._cylinder = undefined;\n  this._cylinderSubscription = undefined;\n  this._description = undefined;\n  this._descriptionSubscription = undefined;\n  this._ellipse = undefined;\n  this._ellipseSubscription = undefined;\n  this._ellipsoid = undefined;\n  this._ellipsoidSubscription = undefined;\n  this._label = undefined;\n  this._labelSubscription = undefined;\n  this._model = undefined;\n  this._modelSubscription = undefined;\n  this._tileset = undefined;\n  this._tilesetSubscription = undefined;\n  this._orientation = undefined;\n  this._orientationSubscription = undefined;\n  this._path = undefined;\n  this._pathSubscription = undefined;\n  this._plane = undefined;\n  this._planeSubscription = undefined;\n  this._point = undefined;\n  this._pointSubscription = undefined;\n  this._polygon = undefined;\n  this._polygonSubscription = undefined;\n  this._polyline = undefined;\n  this._polylineSubscription = undefined;\n  this._polylineVolume = undefined;\n  this._polylineVolumeSubscription = undefined;\n  this._position = undefined;\n  this._positionSubscription = undefined;\n  this._properties = undefined;\n  this._propertiesSubscription = undefined;\n  this._rectangle = undefined;\n  this._rectangleSubscription = undefined;\n  this._viewFrom = undefined;\n  this._viewFromSubscription = undefined;\n  this._wall = undefined;\n  this._wallSubscription = undefined;\n  this._children = [];\n\n  /**\n   * Gets or sets the entity collection that this entity belongs to.\n   * @type {EntityCollection}\n   */\n  this.entityCollection = undefined;\n  this.parent = options.parent;\n  this.merge(options);\n}\nfunction updateShow(entity, children, isShowing) {\n  const length = children.length;\n  for (let i = 0; i < length; i++) {\n    const child = children[i];\n    const childShow = child._show;\n    const oldValue = !isShowing && childShow;\n    const newValue = isShowing && childShow;\n    if (oldValue !== newValue) {\n      updateShow(child, child._children, isShowing);\n    }\n  }\n  entity._definitionChanged.raiseEvent(entity, \"isShowing\", isShowing, !isShowing);\n}\nObject.defineProperties(Entity.prototype, {\n  /**\n   * The availability, if any, associated with this object.\n   * If availability is undefined, it is assumed that this object's\n   * other properties will return valid data for any provided time.\n   * If availability exists, the objects other properties will only\n   * provide valid data if queried within the given interval.\n   * @memberof Entity.prototype\n   * @type {TimeIntervalCollection|undefined}\n   */\n  availability: createRawPropertyDescriptor(\"availability\"),\n  /**\n   * Gets the unique ID associated with this object.\n   * @memberof Entity.prototype\n   * @type {string}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof Entity.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n  /**\n   * Gets or sets the name of the object.  The name is intended for end-user\n   * consumption and does not need to be unique.\n   * @memberof Entity.prototype\n   * @type {string|undefined}\n   */\n  name: createRawPropertyDescriptor(\"name\"),\n  /**\n   * Gets or sets whether this entity should be displayed. When set to true,\n   * the entity is only displayed if the parent entity's show property is also true.\n   * @memberof Entity.prototype\n   * @type {boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value === this._show) {\n        return;\n      }\n      const wasShowing = this.isShowing;\n      this._show = value;\n      const isShowing = this.isShowing;\n      if (wasShowing !== isShowing) {\n        updateShow(this, this._children, isShowing);\n      }\n      this._definitionChanged.raiseEvent(this, \"show\", value, !value);\n    }\n  },\n  /**\n   * Gets or sets the entity's tracking reference frame.\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Entity tracking.html|Cesium Sandcastle Entity tracking Demo}\n   *\n   * @memberof Entity.prototype\n   * @type {TrackingReferenceFrame}\n   */\n  trackingReferenceFrame: createRawPropertyDescriptor(\"trackingReferenceFrame\"),\n  /**\n   * Gets whether this entity is being displayed, taking into account\n   * the visibility of any ancestor entities.\n   * @memberof Entity.prototype\n   * @type {boolean}\n   */\n  isShowing: {\n    get: function () {\n      return this._show && (!defined(this.entityCollection) || this.entityCollection.show) && (!defined(this._parent) || this._parent.isShowing);\n    }\n  },\n  /**\n   * Gets or sets the parent object.\n   * @memberof Entity.prototype\n   * @type {Entity|undefined}\n   */\n  parent: {\n    get: function () {\n      return this._parent;\n    },\n    set: function (value) {\n      const oldValue = this._parent;\n      if (oldValue === value) {\n        return;\n      }\n      const wasShowing = this.isShowing;\n      if (defined(oldValue)) {\n        const index = oldValue._children.indexOf(this);\n        oldValue._children.splice(index, 1);\n      }\n      this._parent = value;\n      if (defined(value)) {\n        value._children.push(this);\n      }\n      const isShowing = this.isShowing;\n      if (wasShowing !== isShowing) {\n        updateShow(this, this._children, isShowing);\n      }\n      this._definitionChanged.raiseEvent(this, \"parent\", value, oldValue);\n    }\n  },\n  /**\n   * Gets the names of all properties registered on this instance.\n   * @memberof Entity.prototype\n   * @type {string[]}\n   */\n  propertyNames: {\n    get: function () {\n      return this._propertyNames;\n    }\n  },\n  /**\n   * Gets or sets the billboard.\n   * @memberof Entity.prototype\n   * @type {BillboardGraphics|undefined}\n   */\n  billboard: createPropertyTypeDescriptor(\"billboard\", BillboardGraphics),\n  /**\n   * Gets or sets the box.\n   * @memberof Entity.prototype\n   * @type {BoxGraphics|undefined}\n   */\n  box: createPropertyTypeDescriptor(\"box\", BoxGraphics),\n  /**\n   * Gets or sets the corridor.\n   * @memberof Entity.prototype\n   * @type {CorridorGraphics|undefined}\n   */\n  corridor: createPropertyTypeDescriptor(\"corridor\", CorridorGraphics),\n  /**\n   * Gets or sets the cylinder.\n   * @memberof Entity.prototype\n   * @type {CylinderGraphics|undefined}\n   */\n  cylinder: createPropertyTypeDescriptor(\"cylinder\", CylinderGraphics),\n  /**\n   * Gets or sets the description.\n   * @memberof Entity.prototype\n   * @type {Property|undefined}\n   */\n  description: createPropertyDescriptor(\"description\"),\n  /**\n   * Gets or sets the ellipse.\n   * @memberof Entity.prototype\n   * @type {EllipseGraphics|undefined}\n   */\n  ellipse: createPropertyTypeDescriptor(\"ellipse\", EllipseGraphics),\n  /**\n   * Gets or sets the ellipsoid.\n   * @memberof Entity.prototype\n   * @type {EllipsoidGraphics|undefined}\n   */\n  ellipsoid: createPropertyTypeDescriptor(\"ellipsoid\", EllipsoidGraphics),\n  /**\n   * Gets or sets the label.\n   * @memberof Entity.prototype\n   * @type {LabelGraphics|undefined}\n   */\n  label: createPropertyTypeDescriptor(\"label\", LabelGraphics),\n  /**\n   * Gets or sets the model.\n   * @memberof Entity.prototype\n   * @type {ModelGraphics|undefined}\n   */\n  model: createPropertyTypeDescriptor(\"model\", ModelGraphics),\n  /**\n   * Gets or sets the tileset.\n   * @memberof Entity.prototype\n   * @type {Cesium3DTilesetGraphics|undefined}\n   */\n  tileset: createPropertyTypeDescriptor(\"tileset\", Cesium3DTilesetGraphics),\n  /**\n   * Gets or sets the orientation in respect to Earth-fixed-Earth-centered (ECEF).\n   * Defaults to east-north-up at entity position.\n   * @memberof Entity.prototype\n   * @type {Property|undefined}\n   */\n  orientation: createPropertyDescriptor(\"orientation\"),\n  /**\n   * Gets or sets the path.\n   * @memberof Entity.prototype\n   * @type {PathGraphics|undefined}\n   */\n  path: createPropertyTypeDescriptor(\"path\", PathGraphics),\n  /**\n   * Gets or sets the plane.\n   * @memberof Entity.prototype\n   * @type {PlaneGraphics|undefined}\n   */\n  plane: createPropertyTypeDescriptor(\"plane\", PlaneGraphics),\n  /**\n   * Gets or sets the point graphic.\n   * @memberof Entity.prototype\n   * @type {PointGraphics|undefined}\n   */\n  point: createPropertyTypeDescriptor(\"point\", PointGraphics),\n  /**\n   * Gets or sets the polygon.\n   * @memberof Entity.prototype\n   * @type {PolygonGraphics|undefined}\n   */\n  polygon: createPropertyTypeDescriptor(\"polygon\", PolygonGraphics),\n  /**\n   * Gets or sets the polyline.\n   * @memberof Entity.prototype\n   * @type {PolylineGraphics|undefined}\n   */\n  polyline: createPropertyTypeDescriptor(\"polyline\", PolylineGraphics),\n  /**\n   * Gets or sets the polyline volume.\n   * @memberof Entity.prototype\n   * @type {PolylineVolumeGraphics|undefined}\n   */\n  polylineVolume: createPropertyTypeDescriptor(\"polylineVolume\", PolylineVolumeGraphics),\n  /**\n   * Gets or sets the bag of arbitrary properties associated with this entity.\n   * @memberof Entity.prototype\n   * @type {PropertyBag|undefined}\n   */\n  properties: createPropertyTypeDescriptor(\"properties\", PropertyBag),\n  /**\n   * Gets or sets the position.\n   * @memberof Entity.prototype\n   * @type {PositionProperty|undefined}\n   */\n  position: createPositionPropertyDescriptor(\"position\"),\n  /**\n   * Gets or sets the rectangle.\n   * @memberof Entity.prototype\n   * @type {RectangleGraphics|undefined}\n   */\n  rectangle: createPropertyTypeDescriptor(\"rectangle\", RectangleGraphics),\n  /**\n   * Gets or sets the suggested initial offset when tracking this object.\n   * The offset is typically defined in the east-north-up reference frame,\n   * but may be another frame depending on the object's velocity.\n   * @memberof Entity.prototype\n   * @type {Property|undefined}\n   */\n  viewFrom: createPropertyDescriptor(\"viewFrom\"),\n  /**\n   * Gets or sets the wall.\n   * @memberof Entity.prototype\n   * @type {WallGraphics|undefined}\n   */\n  wall: createPropertyTypeDescriptor(\"wall\", WallGraphics)\n});\n\n/**\n * Add the specified type and construct the properties for it in the Entity class\n * @private\n * @param {string} propertyName name of the property that controls/accesses this entity type\n * @param {{ constructor: function }} Type The Graphics class to associate with this entity type\n */\nEntity.registerEntityType = function (propertyName, Type) {\n  Object.defineProperties(Entity.prototype, {\n    [propertyName]: createPropertyTypeDescriptor(propertyName, Type)\n  });\n  if (!ExtraPropertyNames.includes(propertyName)) {\n    ExtraPropertyNames.push(propertyName);\n  }\n};\n\n/**\n * Given a time, returns true if this object should have data during that time.\n *\n * @param {JulianDate} time The time to check availability for.\n * @returns {boolean} true if the object should have data during the provided time, false otherwise.\n */\nEntity.prototype.isAvailable = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const availability = this._availability;\n  return !defined(availability) || availability.contains(time);\n};\n\n/**\n * Adds a property to this object.  Once a property is added, it can be\n * observed with {@link Entity#definitionChanged} and composited\n * with {@link CompositeEntityCollection}\n *\n * @param {string} propertyName The name of the property to add.\n *\n * @exception {DeveloperError} \"propertyName\" is a reserved property name.\n * @exception {DeveloperError} \"propertyName\" is already a registered property.\n */\nEntity.prototype.addProperty = function (propertyName) {\n  const propertyNames = this._propertyNames;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (propertyNames.indexOf(propertyName) !== -1) {\n    throw new DeveloperError(`${propertyName} is already a registered property.`);\n  }\n  if (propertyName in this) {\n    throw new DeveloperError(`${propertyName} is a reserved property name.`);\n  }\n  //>>includeEnd('debug');\n\n  propertyNames.push(propertyName);\n  Object.defineProperty(this, propertyName, createRawPropertyDescriptor(propertyName, true));\n};\n\n/**\n * Removed a property previously added with addProperty.\n *\n * @param {string} propertyName The name of the property to remove.\n *\n * @exception {DeveloperError} \"propertyName\" is a reserved property name.\n * @exception {DeveloperError} \"propertyName\" is not a registered property.\n */\nEntity.prototype.removeProperty = function (propertyName) {\n  const propertyNames = this._propertyNames;\n  const index = propertyNames.indexOf(propertyName);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (index === -1) {\n    throw new DeveloperError(`${propertyName} is not a registered property.`);\n  }\n  //>>includeEnd('debug');\n\n  this._propertyNames.splice(index, 1);\n  delete this[propertyName];\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Entity} source The object to be merged into this object.\n */\nEntity.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  //Name, show, and availability are not Property objects and are currently handled differently.\n  //source.show is intentionally ignored because this.show always has a value.\n  this.name = defaultValue(this.name, source.name);\n  this.availability = defaultValue(this.availability, source.availability);\n  const propertyNames = this._propertyNames;\n  const sourcePropertyNames = defined(source._propertyNames) ? source._propertyNames : Object.keys(source);\n  const propertyNamesLength = sourcePropertyNames.length;\n  for (let i = 0; i < propertyNamesLength; i++) {\n    const name = sourcePropertyNames[i];\n\n    //While source is required by the API to be an Entity, we internally call this method from the\n    //constructor with an options object to configure initial custom properties.\n    //So we need to ignore reserved-non-property.\n    if (name === \"parent\" || name === \"name\" || name === \"availability\" || name === \"children\") {\n      continue;\n    }\n    const targetProperty = this[name];\n    const sourceProperty = source[name];\n\n    //Custom properties that are registered on the source entity must also\n    //get registered on this entity.\n    if (!defined(targetProperty) && propertyNames.indexOf(name) === -1) {\n      this.addProperty(name);\n    }\n    if (defined(sourceProperty)) {\n      if (defined(targetProperty)) {\n        if (defined(targetProperty.merge)) {\n          targetProperty.merge(sourceProperty);\n        }\n      } else if (defined(sourceProperty.merge) && defined(sourceProperty.clone)) {\n        this[name] = sourceProperty.clone();\n      } else {\n        this[name] = sourceProperty;\n      }\n    }\n  }\n};\nconst matrix3Scratch = new Matrix3();\nconst positionScratch = new Cartesian3();\nconst orientationScratch = new Quaternion();\n\n/**\n * Computes the model matrix for the entity's transform at specified time. Returns undefined if position is undefined\n *\n * @param {JulianDate} time The time to retrieve model matrix for.\n * @param {Matrix4} [result] The object onto which to store the result.\n *\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. Result is undefined if position is undefined.\n */\nEntity.prototype.computeModelMatrix = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"time\", time);\n  //>>includeEnd('debug');\n  const position = Property.getValueOrUndefined(this._position, time, positionScratch);\n  if (!defined(position)) {\n    return undefined;\n  }\n  const orientation = Property.getValueOrUndefined(this._orientation, time, orientationScratch);\n  if (!defined(orientation)) {\n    result = Transforms.eastNorthUpToFixedFrame(position, undefined, result);\n  } else {\n    result = Matrix4.fromRotationTranslation(Matrix3.fromQuaternion(orientation, matrix3Scratch), position, result);\n  }\n  return result;\n};\n\n/**\n * @private\n */\nEntity.prototype.computeModelMatrixForHeightReference = function (time, heightReferenceProperty, heightOffset, ellipsoid, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"time\", time);\n  //>>includeEnd('debug');\n  const heightReference = Property.getValueOrDefault(heightReferenceProperty, time, HeightReference.NONE);\n  let position = Property.getValueOrUndefined(this._position, time, positionScratch);\n  if (heightReference === HeightReference.NONE || !defined(position) || Cartesian3.equalsEpsilon(position, Cartesian3.ZERO, CesiumMath.EPSILON8)) {\n    return this.computeModelMatrix(time, result);\n  }\n  const carto = ellipsoid.cartesianToCartographic(position, cartoScratch);\n  if (isHeightReferenceClamp(heightReference)) {\n    carto.height = heightOffset;\n  } else {\n    carto.height += heightOffset;\n  }\n  position = ellipsoid.cartographicToCartesian(carto, position);\n  const orientation = Property.getValueOrUndefined(this._orientation, time, orientationScratch);\n  if (!defined(orientation)) {\n    result = Transforms.eastNorthUpToFixedFrame(position, undefined, result);\n  } else {\n    result = Matrix4.fromRotationTranslation(Matrix3.fromQuaternion(orientation, matrix3Scratch), position, result);\n  }\n  return result;\n};\n\n/**\n * Checks if the given Scene supports materials besides Color on Entities draped on terrain or 3D Tiles.\n * If this feature is not supported, Entities with non-color materials but no `height` will\n * instead be rendered as if height is 0.\n *\n * @param {Scene} scene The current scene.\n * @returns {boolean} Whether or not the current scene supports materials for entities on terrain.\n */\nEntity.supportsMaterialsforEntitiesOnTerrain = function (scene) {\n  return GroundPrimitive.supportsMaterials(scene);\n};\n\n/**\n * Checks if the given Scene supports polylines clamped to terrain or 3D Tiles.\n * If this feature is not supported, Entities with PolylineGraphics will be rendered with vertices at\n * the provided heights and using the `arcType` parameter instead of clamped to the ground.\n *\n * @param {Scene} scene The current scene.\n * @returns {boolean} Whether or not the current scene supports polylines on terrain or 3D TIles.\n */\nEntity.supportsPolylinesOnTerrain = function (scene) {\n  return GroundPolylinePrimitive.isSupported(scene);\n};\nexport default Entity;","map":{"version":3,"names":["Cartesian3","Cartographic","Check","createGuid","defaultValue","defined","DeveloperError","Event","CesiumMath","Matrix3","Matrix4","Quaternion","TrackingReferenceFrame","Transforms","GroundPolylinePrimitive","GroundPrimitive","HeightReference","isHeightReferenceClamp","BillboardGraphics","BoxGraphics","ConstantPositionProperty","CorridorGraphics","createPropertyDescriptor","createRawPropertyDescriptor","CylinderGraphics","EllipseGraphics","EllipsoidGraphics","LabelGraphics","ModelGraphics","Cesium3DTilesetGraphics","PathGraphics","PlaneGraphics","PointGraphics","PolygonGraphics","PolylineGraphics","PolylineVolumeGraphics","Property","PropertyBag","RectangleGraphics","WallGraphics","cartoScratch","ExtraPropertyNames","createConstantPositionProperty","value","createPositionPropertyDescriptor","name","undefined","createPropertyTypeDescriptor","Type","Entity","options","EMPTY_OBJECT","id","_availability","_id","_definitionChanged","_name","_show","show","_trackingReferenceFrame","trackingReferenceFrame","AUTODETECT","_parent","_propertyNames","_billboard","_billboardSubscription","_box","_boxSubscription","_corridor","_corridorSubscription","_cylinder","_cylinderSubscription","_description","_descriptionSubscription","_ellipse","_ellipseSubscription","_ellipsoid","_ellipsoidSubscription","_label","_labelSubscription","_model","_modelSubscription","_tileset","_tilesetSubscription","_orientation","_orientationSubscription","_path","_pathSubscription","_plane","_planeSubscription","_point","_pointSubscription","_polygon","_polygonSubscription","_polyline","_polylineSubscription","_polylineVolume","_polylineVolumeSubscription","_position","_positionSubscription","_properties","_propertiesSubscription","_rectangle","_rectangleSubscription","_viewFrom","_viewFromSubscription","_wall","_wallSubscription","_children","entityCollection","parent","merge","updateShow","entity","children","isShowing","length","i","child","childShow","oldValue","newValue","raiseEvent","Object","defineProperties","prototype","availability","get","definitionChanged","set","wasShowing","index","indexOf","splice","push","propertyNames","billboard","box","corridor","cylinder","description","ellipse","ellipsoid","label","model","tileset","orientation","path","plane","point","polygon","polyline","polylineVolume","properties","position","rectangle","viewFrom","wall","registerEntityType","propertyName","includes","isAvailable","time","contains","addProperty","defineProperty","removeProperty","source","sourcePropertyNames","keys","propertyNamesLength","targetProperty","sourceProperty","clone","matrix3Scratch","positionScratch","orientationScratch","computeModelMatrix","result","typeOf","object","getValueOrUndefined","eastNorthUpToFixedFrame","fromRotationTranslation","fromQuaternion","computeModelMatrixForHeightReference","heightReferenceProperty","heightOffset","heightReference","getValueOrDefault","NONE","equalsEpsilon","ZERO","EPSILON8","carto","cartesianToCartographic","height","cartographicToCartesian","supportsMaterialsforEntitiesOnTerrain","scene","supportsMaterials","supportsPolylinesOnTerrain","isSupported"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/Entity.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport TrackingReferenceFrame from \"../Core/TrackingReferenceFrame.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport HeightReference, {\n  isHeightReferenceClamp,\n} from \"../Scene/HeightReference.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport BoxGraphics from \"./BoxGraphics.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport CorridorGraphics from \"./CorridorGraphics.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport createRawPropertyDescriptor from \"./createRawPropertyDescriptor.js\";\nimport CylinderGraphics from \"./CylinderGraphics.js\";\nimport EllipseGraphics from \"./EllipseGraphics.js\";\nimport EllipsoidGraphics from \"./EllipsoidGraphics.js\";\nimport LabelGraphics from \"./LabelGraphics.js\";\nimport ModelGraphics from \"./ModelGraphics.js\";\nimport Cesium3DTilesetGraphics from \"./Cesium3DTilesetGraphics.js\";\nimport PathGraphics from \"./PathGraphics.js\";\nimport PlaneGraphics from \"./PlaneGraphics.js\";\nimport PointGraphics from \"./PointGraphics.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\nimport PolylineVolumeGraphics from \"./PolylineVolumeGraphics.js\";\nimport Property from \"./Property.js\";\nimport PropertyBag from \"./PropertyBag.js\";\nimport RectangleGraphics from \"./RectangleGraphics.js\";\nimport WallGraphics from \"./WallGraphics.js\";\n\nconst cartoScratch = new Cartographic();\n\nconst ExtraPropertyNames = [];\n\nfunction createConstantPositionProperty(value) {\n  return new ConstantPositionProperty(value);\n}\n\nfunction createPositionPropertyDescriptor(name) {\n  return createPropertyDescriptor(\n    name,\n    undefined,\n    createConstantPositionProperty,\n  );\n}\n\nfunction createPropertyTypeDescriptor(name, Type) {\n  return createPropertyDescriptor(name, undefined, function (value) {\n    if (value instanceof Type) {\n      return value;\n    }\n    return new Type(value);\n  });\n}\n\n/**\n * @typedef {object} Entity.ConstructorOptions\n *\n * Initialization options for the Entity constructor\n *\n * @property {string} [id] A unique identifier for this object. If none is provided, a GUID is generated.\n * @property {string} [name] A human readable name to display to users. It does not have to be unique.\n * @property {TimeIntervalCollection} [availability] The availability, if any, associated with this object.\n * @property {boolean} [show] A boolean value indicating if the entity and its children are displayed.\n * @property {TrackingReferenceFrame} [trackingReferenceFrame=TrackingReferenceFrame.AUTODETECT] The reference frame used when this entity is being tracked. <br/> If <code>undefined</code>, reference frame is determined based on entity velocity: near-surface slow moving entities are tracked using the local east-north-up reference frame, whereas fast moving entities such as satellites are tracked using VVLH (Vehicle Velocity, Local Horizontal).\n * @property {Property | string} [description] A string Property specifying an HTML description for this entity.\n * @property {PositionProperty | Cartesian3 | CallbackPositionProperty} [position] A Property specifying the entity position.\n * @property {Property | Quaternion} [orientation=Transforms.eastNorthUpToFixedFrame(position)] A Property specifying the entity orientation in respect to Earth-fixed-Earth-centered (ECEF). If undefined, east-north-up at entity position is used.\n * @property {Property | Cartesian3} [viewFrom] A suggested initial offset for viewing this object.\n * @property {Entity} [parent] A parent entity to associate with this entity.\n * @property {BillboardGraphics | BillboardGraphics.ConstructorOptions} [billboard] A billboard to associate with this entity.\n * @property {BoxGraphics | BoxGraphics.ConstructorOptions} [box] A box to associate with this entity.\n * @property {CorridorGraphics | CorridorGraphics.ConstructorOptions} [corridor] A corridor to associate with this entity.\n * @property {CylinderGraphics | CylinderGraphics.ConstructorOptions} [cylinder] A cylinder to associate with this entity.\n * @property {EllipseGraphics | EllipseGraphics.ConstructorOptions} [ellipse] A ellipse to associate with this entity.\n * @property {EllipsoidGraphics | EllipsoidGraphics.ConstructorOptions} [ellipsoid] A ellipsoid to associate with this entity.\n * @property {LabelGraphics | LabelGraphics.ConstructorOptions} [label] A options.label to associate with this entity.\n * @property {ModelGraphics | ModelGraphics.ConstructorOptions} [model] A model to associate with this entity.\n * @property {Cesium3DTilesetGraphics | Cesium3DTilesetGraphics.ConstructorOptions} [tileset] A 3D Tiles tileset to associate with this entity.\n * @property {PathGraphics | PathGraphics.ConstructorOptions} [path] A path to associate with this entity.\n * @property {PlaneGraphics | PlaneGraphics.ConstructorOptions} [plane] A plane to associate with this entity.\n * @property {PointGraphics | PointGraphics.ConstructorOptions} [point] A point to associate with this entity.\n * @property {PolygonGraphics | PolygonGraphics.ConstructorOptions} [polygon] A polygon to associate with this entity.\n * @property {PolylineGraphics | PolylineGraphics.ConstructorOptions} [polyline] A polyline to associate with this entity.\n * @property {PropertyBag | Object<string,*>} [properties] Arbitrary properties to associate with this entity.\n * @property {PolylineVolumeGraphics | PolylineVolumeGraphics.ConstructorOptions} [polylineVolume] A polylineVolume to associate with this entity.\n * @property {RectangleGraphics | RectangleGraphics.ConstructorOptions} [rectangle] A rectangle to associate with this entity.\n * @property {WallGraphics | WallGraphics.ConstructorOptions} [wall] A wall to associate with this entity.\n */\n\n/**\n * Entity instances aggregate multiple forms of visualization into a single high-level object.\n * They can be created manually and added to {@link Viewer#entities} or be produced by\n * data sources, such as {@link CzmlDataSource} and {@link GeoJsonDataSource}.\n * @alias Entity\n * @constructor\n *\n * @param {Entity.ConstructorOptions} [options] Object describing initialization options\n *\n * @see {@link https://cesium.com/learn/cesiumjs-learn/cesiumjs-creating-entities/|Creating Entities}\n */\nfunction Entity(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  let id = options.id;\n  if (!defined(id)) {\n    id = createGuid();\n  }\n\n  this._availability = undefined;\n  this._id = id;\n  this._definitionChanged = new Event();\n  this._name = options.name;\n  this._show = defaultValue(options.show, true);\n  this._trackingReferenceFrame = defaultValue(\n    options.trackingReferenceFrame,\n    TrackingReferenceFrame.AUTODETECT,\n  );\n  this._parent = undefined;\n  this._propertyNames = [\n    \"billboard\",\n    \"box\",\n    \"corridor\",\n    \"cylinder\",\n    \"description\",\n    \"ellipse\",\n    \"ellipsoid\",\n    \"label\",\n    \"model\",\n    \"tileset\",\n    \"orientation\",\n    \"path\",\n    \"plane\",\n    \"point\",\n    \"polygon\",\n    \"polyline\",\n    \"polylineVolume\",\n    \"position\",\n    \"properties\",\n    \"rectangle\",\n    \"viewFrom\",\n    \"wall\",\n    ...ExtraPropertyNames,\n  ];\n\n  this._billboard = undefined;\n  this._billboardSubscription = undefined;\n  this._box = undefined;\n  this._boxSubscription = undefined;\n  this._corridor = undefined;\n  this._corridorSubscription = undefined;\n  this._cylinder = undefined;\n  this._cylinderSubscription = undefined;\n  this._description = undefined;\n  this._descriptionSubscription = undefined;\n  this._ellipse = undefined;\n  this._ellipseSubscription = undefined;\n  this._ellipsoid = undefined;\n  this._ellipsoidSubscription = undefined;\n  this._label = undefined;\n  this._labelSubscription = undefined;\n  this._model = undefined;\n  this._modelSubscription = undefined;\n  this._tileset = undefined;\n  this._tilesetSubscription = undefined;\n  this._orientation = undefined;\n  this._orientationSubscription = undefined;\n  this._path = undefined;\n  this._pathSubscription = undefined;\n  this._plane = undefined;\n  this._planeSubscription = undefined;\n  this._point = undefined;\n  this._pointSubscription = undefined;\n  this._polygon = undefined;\n  this._polygonSubscription = undefined;\n  this._polyline = undefined;\n  this._polylineSubscription = undefined;\n  this._polylineVolume = undefined;\n  this._polylineVolumeSubscription = undefined;\n  this._position = undefined;\n  this._positionSubscription = undefined;\n  this._properties = undefined;\n  this._propertiesSubscription = undefined;\n  this._rectangle = undefined;\n  this._rectangleSubscription = undefined;\n  this._viewFrom = undefined;\n  this._viewFromSubscription = undefined;\n  this._wall = undefined;\n  this._wallSubscription = undefined;\n  this._children = [];\n\n  /**\n   * Gets or sets the entity collection that this entity belongs to.\n   * @type {EntityCollection}\n   */\n  this.entityCollection = undefined;\n\n  this.parent = options.parent;\n  this.merge(options);\n}\n\nfunction updateShow(entity, children, isShowing) {\n  const length = children.length;\n  for (let i = 0; i < length; i++) {\n    const child = children[i];\n    const childShow = child._show;\n    const oldValue = !isShowing && childShow;\n    const newValue = isShowing && childShow;\n    if (oldValue !== newValue) {\n      updateShow(child, child._children, isShowing);\n    }\n  }\n  entity._definitionChanged.raiseEvent(\n    entity,\n    \"isShowing\",\n    isShowing,\n    !isShowing,\n  );\n}\n\nObject.defineProperties(Entity.prototype, {\n  /**\n   * The availability, if any, associated with this object.\n   * If availability is undefined, it is assumed that this object's\n   * other properties will return valid data for any provided time.\n   * If availability exists, the objects other properties will only\n   * provide valid data if queried within the given interval.\n   * @memberof Entity.prototype\n   * @type {TimeIntervalCollection|undefined}\n   */\n  availability: createRawPropertyDescriptor(\"availability\"),\n  /**\n   * Gets the unique ID associated with this object.\n   * @memberof Entity.prototype\n   * @type {string}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof Entity.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the name of the object.  The name is intended for end-user\n   * consumption and does not need to be unique.\n   * @memberof Entity.prototype\n   * @type {string|undefined}\n   */\n  name: createRawPropertyDescriptor(\"name\"),\n  /**\n   * Gets or sets whether this entity should be displayed. When set to true,\n   * the entity is only displayed if the parent entity's show property is also true.\n   * @memberof Entity.prototype\n   * @type {boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value === this._show) {\n        return;\n      }\n\n      const wasShowing = this.isShowing;\n      this._show = value;\n      const isShowing = this.isShowing;\n\n      if (wasShowing !== isShowing) {\n        updateShow(this, this._children, isShowing);\n      }\n\n      this._definitionChanged.raiseEvent(this, \"show\", value, !value);\n    },\n  },\n  /**\n   * Gets or sets the entity's tracking reference frame.\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Entity tracking.html|Cesium Sandcastle Entity tracking Demo}\n   *\n   * @memberof Entity.prototype\n   * @type {TrackingReferenceFrame}\n   */\n  trackingReferenceFrame: createRawPropertyDescriptor(\"trackingReferenceFrame\"),\n  /**\n   * Gets whether this entity is being displayed, taking into account\n   * the visibility of any ancestor entities.\n   * @memberof Entity.prototype\n   * @type {boolean}\n   */\n  isShowing: {\n    get: function () {\n      return (\n        this._show &&\n        (!defined(this.entityCollection) || this.entityCollection.show) &&\n        (!defined(this._parent) || this._parent.isShowing)\n      );\n    },\n  },\n  /**\n   * Gets or sets the parent object.\n   * @memberof Entity.prototype\n   * @type {Entity|undefined}\n   */\n  parent: {\n    get: function () {\n      return this._parent;\n    },\n    set: function (value) {\n      const oldValue = this._parent;\n\n      if (oldValue === value) {\n        return;\n      }\n\n      const wasShowing = this.isShowing;\n      if (defined(oldValue)) {\n        const index = oldValue._children.indexOf(this);\n        oldValue._children.splice(index, 1);\n      }\n\n      this._parent = value;\n      if (defined(value)) {\n        value._children.push(this);\n      }\n\n      const isShowing = this.isShowing;\n\n      if (wasShowing !== isShowing) {\n        updateShow(this, this._children, isShowing);\n      }\n\n      this._definitionChanged.raiseEvent(this, \"parent\", value, oldValue);\n    },\n  },\n  /**\n   * Gets the names of all properties registered on this instance.\n   * @memberof Entity.prototype\n   * @type {string[]}\n   */\n  propertyNames: {\n    get: function () {\n      return this._propertyNames;\n    },\n  },\n  /**\n   * Gets or sets the billboard.\n   * @memberof Entity.prototype\n   * @type {BillboardGraphics|undefined}\n   */\n  billboard: createPropertyTypeDescriptor(\"billboard\", BillboardGraphics),\n  /**\n   * Gets or sets the box.\n   * @memberof Entity.prototype\n   * @type {BoxGraphics|undefined}\n   */\n  box: createPropertyTypeDescriptor(\"box\", BoxGraphics),\n  /**\n   * Gets or sets the corridor.\n   * @memberof Entity.prototype\n   * @type {CorridorGraphics|undefined}\n   */\n  corridor: createPropertyTypeDescriptor(\"corridor\", CorridorGraphics),\n  /**\n   * Gets or sets the cylinder.\n   * @memberof Entity.prototype\n   * @type {CylinderGraphics|undefined}\n   */\n  cylinder: createPropertyTypeDescriptor(\"cylinder\", CylinderGraphics),\n  /**\n   * Gets or sets the description.\n   * @memberof Entity.prototype\n   * @type {Property|undefined}\n   */\n  description: createPropertyDescriptor(\"description\"),\n  /**\n   * Gets or sets the ellipse.\n   * @memberof Entity.prototype\n   * @type {EllipseGraphics|undefined}\n   */\n  ellipse: createPropertyTypeDescriptor(\"ellipse\", EllipseGraphics),\n  /**\n   * Gets or sets the ellipsoid.\n   * @memberof Entity.prototype\n   * @type {EllipsoidGraphics|undefined}\n   */\n  ellipsoid: createPropertyTypeDescriptor(\"ellipsoid\", EllipsoidGraphics),\n  /**\n   * Gets or sets the label.\n   * @memberof Entity.prototype\n   * @type {LabelGraphics|undefined}\n   */\n  label: createPropertyTypeDescriptor(\"label\", LabelGraphics),\n  /**\n   * Gets or sets the model.\n   * @memberof Entity.prototype\n   * @type {ModelGraphics|undefined}\n   */\n  model: createPropertyTypeDescriptor(\"model\", ModelGraphics),\n  /**\n   * Gets or sets the tileset.\n   * @memberof Entity.prototype\n   * @type {Cesium3DTilesetGraphics|undefined}\n   */\n  tileset: createPropertyTypeDescriptor(\"tileset\", Cesium3DTilesetGraphics),\n  /**\n   * Gets or sets the orientation in respect to Earth-fixed-Earth-centered (ECEF).\n   * Defaults to east-north-up at entity position.\n   * @memberof Entity.prototype\n   * @type {Property|undefined}\n   */\n  orientation: createPropertyDescriptor(\"orientation\"),\n  /**\n   * Gets or sets the path.\n   * @memberof Entity.prototype\n   * @type {PathGraphics|undefined}\n   */\n  path: createPropertyTypeDescriptor(\"path\", PathGraphics),\n  /**\n   * Gets or sets the plane.\n   * @memberof Entity.prototype\n   * @type {PlaneGraphics|undefined}\n   */\n  plane: createPropertyTypeDescriptor(\"plane\", PlaneGraphics),\n  /**\n   * Gets or sets the point graphic.\n   * @memberof Entity.prototype\n   * @type {PointGraphics|undefined}\n   */\n  point: createPropertyTypeDescriptor(\"point\", PointGraphics),\n  /**\n   * Gets or sets the polygon.\n   * @memberof Entity.prototype\n   * @type {PolygonGraphics|undefined}\n   */\n  polygon: createPropertyTypeDescriptor(\"polygon\", PolygonGraphics),\n  /**\n   * Gets or sets the polyline.\n   * @memberof Entity.prototype\n   * @type {PolylineGraphics|undefined}\n   */\n  polyline: createPropertyTypeDescriptor(\"polyline\", PolylineGraphics),\n  /**\n   * Gets or sets the polyline volume.\n   * @memberof Entity.prototype\n   * @type {PolylineVolumeGraphics|undefined}\n   */\n  polylineVolume: createPropertyTypeDescriptor(\n    \"polylineVolume\",\n    PolylineVolumeGraphics,\n  ),\n  /**\n   * Gets or sets the bag of arbitrary properties associated with this entity.\n   * @memberof Entity.prototype\n   * @type {PropertyBag|undefined}\n   */\n  properties: createPropertyTypeDescriptor(\"properties\", PropertyBag),\n  /**\n   * Gets or sets the position.\n   * @memberof Entity.prototype\n   * @type {PositionProperty|undefined}\n   */\n  position: createPositionPropertyDescriptor(\"position\"),\n  /**\n   * Gets or sets the rectangle.\n   * @memberof Entity.prototype\n   * @type {RectangleGraphics|undefined}\n   */\n  rectangle: createPropertyTypeDescriptor(\"rectangle\", RectangleGraphics),\n  /**\n   * Gets or sets the suggested initial offset when tracking this object.\n   * The offset is typically defined in the east-north-up reference frame,\n   * but may be another frame depending on the object's velocity.\n   * @memberof Entity.prototype\n   * @type {Property|undefined}\n   */\n  viewFrom: createPropertyDescriptor(\"viewFrom\"),\n  /**\n   * Gets or sets the wall.\n   * @memberof Entity.prototype\n   * @type {WallGraphics|undefined}\n   */\n  wall: createPropertyTypeDescriptor(\"wall\", WallGraphics),\n});\n\n/**\n * Add the specified type and construct the properties for it in the Entity class\n * @private\n * @param {string} propertyName name of the property that controls/accesses this entity type\n * @param {{ constructor: function }} Type The Graphics class to associate with this entity type\n */\nEntity.registerEntityType = function (propertyName, Type) {\n  Object.defineProperties(Entity.prototype, {\n    [propertyName]: createPropertyTypeDescriptor(propertyName, Type),\n  });\n  if (!ExtraPropertyNames.includes(propertyName)) {\n    ExtraPropertyNames.push(propertyName);\n  }\n};\n\n/**\n * Given a time, returns true if this object should have data during that time.\n *\n * @param {JulianDate} time The time to check availability for.\n * @returns {boolean} true if the object should have data during the provided time, false otherwise.\n */\nEntity.prototype.isAvailable = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const availability = this._availability;\n  return !defined(availability) || availability.contains(time);\n};\n\n/**\n * Adds a property to this object.  Once a property is added, it can be\n * observed with {@link Entity#definitionChanged} and composited\n * with {@link CompositeEntityCollection}\n *\n * @param {string} propertyName The name of the property to add.\n *\n * @exception {DeveloperError} \"propertyName\" is a reserved property name.\n * @exception {DeveloperError} \"propertyName\" is already a registered property.\n */\nEntity.prototype.addProperty = function (propertyName) {\n  const propertyNames = this._propertyNames;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (propertyNames.indexOf(propertyName) !== -1) {\n    throw new DeveloperError(\n      `${propertyName} is already a registered property.`,\n    );\n  }\n  if (propertyName in this) {\n    throw new DeveloperError(`${propertyName} is a reserved property name.`);\n  }\n  //>>includeEnd('debug');\n\n  propertyNames.push(propertyName);\n  Object.defineProperty(\n    this,\n    propertyName,\n    createRawPropertyDescriptor(propertyName, true),\n  );\n};\n\n/**\n * Removed a property previously added with addProperty.\n *\n * @param {string} propertyName The name of the property to remove.\n *\n * @exception {DeveloperError} \"propertyName\" is a reserved property name.\n * @exception {DeveloperError} \"propertyName\" is not a registered property.\n */\nEntity.prototype.removeProperty = function (propertyName) {\n  const propertyNames = this._propertyNames;\n  const index = propertyNames.indexOf(propertyName);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (index === -1) {\n    throw new DeveloperError(`${propertyName} is not a registered property.`);\n  }\n  //>>includeEnd('debug');\n\n  this._propertyNames.splice(index, 1);\n  delete this[propertyName];\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Entity} source The object to be merged into this object.\n */\nEntity.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  //Name, show, and availability are not Property objects and are currently handled differently.\n  //source.show is intentionally ignored because this.show always has a value.\n  this.name = defaultValue(this.name, source.name);\n  this.availability = defaultValue(this.availability, source.availability);\n\n  const propertyNames = this._propertyNames;\n  const sourcePropertyNames = defined(source._propertyNames)\n    ? source._propertyNames\n    : Object.keys(source);\n  const propertyNamesLength = sourcePropertyNames.length;\n  for (let i = 0; i < propertyNamesLength; i++) {\n    const name = sourcePropertyNames[i];\n\n    //While source is required by the API to be an Entity, we internally call this method from the\n    //constructor with an options object to configure initial custom properties.\n    //So we need to ignore reserved-non-property.\n    if (\n      name === \"parent\" ||\n      name === \"name\" ||\n      name === \"availability\" ||\n      name === \"children\"\n    ) {\n      continue;\n    }\n\n    const targetProperty = this[name];\n    const sourceProperty = source[name];\n\n    //Custom properties that are registered on the source entity must also\n    //get registered on this entity.\n    if (!defined(targetProperty) && propertyNames.indexOf(name) === -1) {\n      this.addProperty(name);\n    }\n\n    if (defined(sourceProperty)) {\n      if (defined(targetProperty)) {\n        if (defined(targetProperty.merge)) {\n          targetProperty.merge(sourceProperty);\n        }\n      } else if (\n        defined(sourceProperty.merge) &&\n        defined(sourceProperty.clone)\n      ) {\n        this[name] = sourceProperty.clone();\n      } else {\n        this[name] = sourceProperty;\n      }\n    }\n  }\n};\n\nconst matrix3Scratch = new Matrix3();\nconst positionScratch = new Cartesian3();\nconst orientationScratch = new Quaternion();\n\n/**\n * Computes the model matrix for the entity's transform at specified time. Returns undefined if position is undefined\n *\n * @param {JulianDate} time The time to retrieve model matrix for.\n * @param {Matrix4} [result] The object onto which to store the result.\n *\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. Result is undefined if position is undefined.\n */\nEntity.prototype.computeModelMatrix = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"time\", time);\n  //>>includeEnd('debug');\n  const position = Property.getValueOrUndefined(\n    this._position,\n    time,\n    positionScratch,\n  );\n  if (!defined(position)) {\n    return undefined;\n  }\n\n  const orientation = Property.getValueOrUndefined(\n    this._orientation,\n    time,\n    orientationScratch,\n  );\n  if (!defined(orientation)) {\n    result = Transforms.eastNorthUpToFixedFrame(position, undefined, result);\n  } else {\n    result = Matrix4.fromRotationTranslation(\n      Matrix3.fromQuaternion(orientation, matrix3Scratch),\n      position,\n      result,\n    );\n  }\n  return result;\n};\n\n/**\n * @private\n */\nEntity.prototype.computeModelMatrixForHeightReference = function (\n  time,\n  heightReferenceProperty,\n  heightOffset,\n  ellipsoid,\n  result,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"time\", time);\n  //>>includeEnd('debug');\n  const heightReference = Property.getValueOrDefault(\n    heightReferenceProperty,\n    time,\n    HeightReference.NONE,\n  );\n  let position = Property.getValueOrUndefined(\n    this._position,\n    time,\n    positionScratch,\n  );\n  if (\n    heightReference === HeightReference.NONE ||\n    !defined(position) ||\n    Cartesian3.equalsEpsilon(position, Cartesian3.ZERO, CesiumMath.EPSILON8)\n  ) {\n    return this.computeModelMatrix(time, result);\n  }\n\n  const carto = ellipsoid.cartesianToCartographic(position, cartoScratch);\n  if (isHeightReferenceClamp(heightReference)) {\n    carto.height = heightOffset;\n  } else {\n    carto.height += heightOffset;\n  }\n  position = ellipsoid.cartographicToCartesian(carto, position);\n\n  const orientation = Property.getValueOrUndefined(\n    this._orientation,\n    time,\n    orientationScratch,\n  );\n  if (!defined(orientation)) {\n    result = Transforms.eastNorthUpToFixedFrame(position, undefined, result);\n  } else {\n    result = Matrix4.fromRotationTranslation(\n      Matrix3.fromQuaternion(orientation, matrix3Scratch),\n      position,\n      result,\n    );\n  }\n  return result;\n};\n\n/**\n * Checks if the given Scene supports materials besides Color on Entities draped on terrain or 3D Tiles.\n * If this feature is not supported, Entities with non-color materials but no `height` will\n * instead be rendered as if height is 0.\n *\n * @param {Scene} scene The current scene.\n * @returns {boolean} Whether or not the current scene supports materials for entities on terrain.\n */\nEntity.supportsMaterialsforEntitiesOnTerrain = function (scene) {\n  return GroundPrimitive.supportsMaterials(scene);\n};\n\n/**\n * Checks if the given Scene supports polylines clamped to terrain or 3D Tiles.\n * If this feature is not supported, Entities with PolylineGraphics will be rendered with vertices at\n * the provided heights and using the `arcType` parameter instead of clamped to the ground.\n *\n * @param {Scene} scene The current scene.\n * @returns {boolean} Whether or not the current scene supports polylines on terrain or 3D TIles.\n */\nEntity.supportsPolylinesOnTerrain = function (scene) {\n  return GroundPolylinePrimitive.isSupported(scene);\n};\nexport default Entity;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}