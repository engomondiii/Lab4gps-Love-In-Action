{"ast":null,"code":"import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nconst leftScratchArray = [];\nconst rightScratchArray = [];\nfunction merge(array, compare, userDefinedObject, start, middle, end) {\n  const leftLength = middle - start + 1;\n  const rightLength = end - middle;\n  const left = leftScratchArray;\n  const right = rightScratchArray;\n  let i;\n  let j;\n  for (i = 0; i < leftLength; ++i) {\n    left[i] = array[start + i];\n  }\n  for (j = 0; j < rightLength; ++j) {\n    right[j] = array[middle + j + 1];\n  }\n  i = 0;\n  j = 0;\n  for (let k = start; k <= end; ++k) {\n    const leftElement = left[i];\n    const rightElement = right[j];\n    if (i < leftLength && (j >= rightLength || compare(leftElement, rightElement, userDefinedObject) <= 0)) {\n      array[k] = leftElement;\n      ++i;\n    } else if (j < rightLength) {\n      array[k] = rightElement;\n      ++j;\n    }\n  }\n}\nfunction sort(array, compare, userDefinedObject, start, end) {\n  if (start >= end) {\n    return;\n  }\n  const middle = Math.floor((start + end) * 0.5);\n  sort(array, compare, userDefinedObject, start, middle);\n  sort(array, compare, userDefinedObject, middle + 1, end);\n  merge(array, compare, userDefinedObject, start, middle, end);\n}\n\n/**\n * A stable merge sort.\n *\n * @function mergeSort\n * @param {Array} array The array to sort.\n * @param {mergeSortComparator} comparator The function to use to compare elements in the array.\n * @param {*} [userDefinedObject] Any item to pass as the third parameter to <code>comparator</code>.\n *\n * @example\n * // Assume array contains BoundingSpheres in world coordinates.\n * // Sort them in ascending order of distance from the camera.\n * const position = camera.positionWC;\n * Cesium.mergeSort(array, function(a, b, position) {\n *     return Cesium.BoundingSphere.distanceSquaredTo(b, position) - Cesium.BoundingSphere.distanceSquaredTo(a, position);\n * }, position);\n */\nfunction mergeSort(array, comparator, userDefinedObject) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required.\");\n  }\n  if (!defined(comparator)) {\n    throw new DeveloperError(\"comparator is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  const scratchLength = Math.ceil(length * 0.5);\n\n  // preallocate space in scratch arrays\n  leftScratchArray.length = scratchLength;\n  rightScratchArray.length = scratchLength;\n  sort(array, comparator, userDefinedObject, 0, length - 1);\n\n  // trim scratch arrays\n  leftScratchArray.length = 0;\n  rightScratchArray.length = 0;\n}\n\n/**\n * A function used to compare two items while performing a merge sort.\n * @callback mergeSortComparator\n *\n * @param {*} a An item in the array.\n * @param {*} b An item in the array.\n * @param {*} [userDefinedObject] An object that was passed to {@link mergeSort}.\n * @returns {number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b, userDefinedObject) {\n *     return a - b;\n * }\n */\nexport default mergeSort;","map":{"version":3,"names":["defined","DeveloperError","leftScratchArray","rightScratchArray","merge","array","compare","userDefinedObject","start","middle","end","leftLength","rightLength","left","right","i","j","k","leftElement","rightElement","sort","Math","floor","mergeSort","comparator","length","scratchLength","ceil"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/mergeSort.js"],"sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\nconst leftScratchArray = [];\nconst rightScratchArray = [];\n\nfunction merge(array, compare, userDefinedObject, start, middle, end) {\n  const leftLength = middle - start + 1;\n  const rightLength = end - middle;\n\n  const left = leftScratchArray;\n  const right = rightScratchArray;\n\n  let i;\n  let j;\n\n  for (i = 0; i < leftLength; ++i) {\n    left[i] = array[start + i];\n  }\n\n  for (j = 0; j < rightLength; ++j) {\n    right[j] = array[middle + j + 1];\n  }\n\n  i = 0;\n  j = 0;\n  for (let k = start; k <= end; ++k) {\n    const leftElement = left[i];\n    const rightElement = right[j];\n    if (\n      i < leftLength &&\n      (j >= rightLength ||\n        compare(leftElement, rightElement, userDefinedObject) <= 0)\n    ) {\n      array[k] = leftElement;\n      ++i;\n    } else if (j < rightLength) {\n      array[k] = rightElement;\n      ++j;\n    }\n  }\n}\n\nfunction sort(array, compare, userDefinedObject, start, end) {\n  if (start >= end) {\n    return;\n  }\n\n  const middle = Math.floor((start + end) * 0.5);\n  sort(array, compare, userDefinedObject, start, middle);\n  sort(array, compare, userDefinedObject, middle + 1, end);\n  merge(array, compare, userDefinedObject, start, middle, end);\n}\n\n/**\n * A stable merge sort.\n *\n * @function mergeSort\n * @param {Array} array The array to sort.\n * @param {mergeSortComparator} comparator The function to use to compare elements in the array.\n * @param {*} [userDefinedObject] Any item to pass as the third parameter to <code>comparator</code>.\n *\n * @example\n * // Assume array contains BoundingSpheres in world coordinates.\n * // Sort them in ascending order of distance from the camera.\n * const position = camera.positionWC;\n * Cesium.mergeSort(array, function(a, b, position) {\n *     return Cesium.BoundingSphere.distanceSquaredTo(b, position) - Cesium.BoundingSphere.distanceSquaredTo(a, position);\n * }, position);\n */\nfunction mergeSort(array, comparator, userDefinedObject) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required.\");\n  }\n  if (!defined(comparator)) {\n    throw new DeveloperError(\"comparator is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  const scratchLength = Math.ceil(length * 0.5);\n\n  // preallocate space in scratch arrays\n  leftScratchArray.length = scratchLength;\n  rightScratchArray.length = scratchLength;\n\n  sort(array, comparator, userDefinedObject, 0, length - 1);\n\n  // trim scratch arrays\n  leftScratchArray.length = 0;\n  rightScratchArray.length = 0;\n}\n\n/**\n * A function used to compare two items while performing a merge sort.\n * @callback mergeSortComparator\n *\n * @param {*} a An item in the array.\n * @param {*} b An item in the array.\n * @param {*} [userDefinedObject] An object that was passed to {@link mergeSort}.\n * @returns {number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b, userDefinedObject) {\n *     return a - b;\n * }\n */\nexport default mergeSort;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}