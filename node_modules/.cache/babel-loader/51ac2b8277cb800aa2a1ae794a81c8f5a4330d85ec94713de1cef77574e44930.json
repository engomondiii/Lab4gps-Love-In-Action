{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Request from \"../Core/Request.js\";\nimport RequestScheduler from \"../Core/RequestScheduler.js\";\nimport RequestState from \"../Core/RequestState.js\";\nimport RequestType from \"../Core/RequestType.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport Cesium3DContentGroup from \"./Cesium3DContentGroup.js\";\nimport Cesium3DTileContentType from \"./Cesium3DTileContentType.js\";\nimport Cesium3DTileContentFactory from \"./Cesium3DTileContentFactory.js\";\nimport findContentMetadata from \"./findContentMetadata.js\";\nimport findGroupMetadata from \"./findGroupMetadata.js\";\nimport preprocess3DTileContent from \"./preprocess3DTileContent.js\";\n\n/**\n * A collection of contents for tiles that have multiple contents, either via the tile JSON (3D Tiles 1.1) or the <code>3DTILES_multiple_contents</code> extension.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_multiple_contents|3DTILES_multiple_contents extension}\n *\n * @alias Multiple3DTileContent\n * @constructor\n *\n * @param {Cesium3DTileset} tileset The tileset this content belongs to\n * @param {Cesium3DTile} tile The content this content belongs to\n * @param {Resource} tilesetResource The resource that points to the tileset. This will be used to derive each inner content's resource.\n * @param {object} contentsJson Either the tile JSON containing the contents array (3D Tiles 1.1), or <code>3DTILES_multiple_contents</code> extension JSON\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction Multiple3DTileContent(tileset, tile, tilesetResource, contentsJson) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._tilesetResource = tilesetResource;\n  this._contents = [];\n  this._contentsCreated = false;\n\n  // An older version of 3DTILES_multiple_contents used \"content\" instead of \"contents\"\n  const contentHeaders = defined(contentsJson.contents) ? contentsJson.contents : contentsJson.content;\n  this._innerContentHeaders = contentHeaders;\n  this._requestsInFlight = 0;\n\n  // How many times cancelPendingRequests() has been called. This is\n  // used to help short-circuit computations after a tile was canceled.\n  this._cancelCount = 0;\n  const contentCount = this._innerContentHeaders.length;\n  this._arrayFetchPromises = new Array(contentCount);\n  this._requests = new Array(contentCount);\n  this._ready = false;\n  this._innerContentResources = new Array(contentCount);\n  this._serverKeys = new Array(contentCount);\n  for (let i = 0; i < contentCount; i++) {\n    const contentResource = tilesetResource.getDerivedResource({\n      url: contentHeaders[i].uri\n    });\n    const serverKey = RequestScheduler.getServerKey(contentResource.getUrlComponent());\n    this._innerContentResources[i] = contentResource;\n    this._serverKeys[i] = serverKey;\n  }\n}\nObject.defineProperties(Multiple3DTileContent.prototype, {\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code> checks if any of the inner contents have dirty featurePropertiesDirty.\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {boolean}\n   *\n   * @private\n   */\n  featurePropertiesDirty: {\n    get: function () {\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        if (contents[i].featurePropertiesDirty) {\n          return true;\n        }\n      }\n      return false;\n    },\n    set: function (value) {\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        contents[i].featurePropertiesDirty = value;\n      }\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>featuresLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  featuresLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead, call <code>pointsLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  pointsLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>trianglesLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  trianglesLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>geometryByteLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  geometryByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>texturesByteLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>batchTableByteLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  batchTableByteLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  innerContents: {\n    get: function () {\n      return this._contents;\n    }\n  },\n  /**\n   * Returns true when the tile's content is ready to render; otherwise false\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   * @private\n   */\n  ready: {\n    get: function () {\n      if (!this._contentsCreated) {\n        return false;\n      }\n      return this._ready;\n    }\n  },\n  tileset: {\n    get: function () {\n      return this._tileset;\n    }\n  },\n  tile: {\n    get: function () {\n      return this._tile;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.\n   * Unlike other content types, <code>Multiple3DTileContent</code> does not\n   * have a single URL, so this returns undefined.\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  url: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Multiple3DTileContent</code>\n   * always returns <code>undefined</code>.  Instead call <code>metadata</code> for a specific inner content.\n   * @memberof Multiple3DTileContent.prototype\n   * @private\n   */\n  metadata: {\n    get: function () {\n      return undefined;\n    },\n    set: function () {\n      //>>includeStart('debug', pragmas.debug);\n      throw new DeveloperError(\"Multiple3DTileContent cannot have metadata\");\n      //>>includeEnd('debug');\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Multiple3DTileContent</code>\n   * always returns <code>undefined</code>.  Instead call <code>batchTable</code> for a specific inner content.\n   * @memberof Multiple3DTileContent.prototype\n   * @private\n   */\n  batchTable: {\n    get: function () {\n      return undefined;\n    }\n  },\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Multiple3DTileContent</code>\n   * always returns <code>undefined</code>.  Instead call <code>group</code> for a specific inner content.\n   * @memberof Multiple3DTileContent.prototype\n   * @private\n   */\n  group: {\n    get: function () {\n      return undefined;\n    },\n    set: function () {\n      //>>includeStart('debug', pragmas.debug);\n      throw new DeveloperError(\"Multiple3DTileContent cannot have group metadata\");\n      //>>includeEnd('debug');\n    }\n  },\n  /**\n   * Get an array of the inner content URLs, regardless of whether they've\n   * been fetched or not. This is intended for use with\n   * {@link Cesium3DTileset#debugShowUrl}.\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {string[]}\n   * @readonly\n   * @private\n   */\n  innerContentUrls: {\n    get: function () {\n      return this._innerContentHeaders.map(function (contentHeader) {\n        return contentHeader.uri;\n      });\n    }\n  }\n});\nfunction updatePendingRequests(multipleContents, deltaRequestCount) {\n  multipleContents._requestsInFlight += deltaRequestCount;\n  multipleContents.tileset.statistics.numberOfPendingRequests += deltaRequestCount;\n}\nfunction cancelPendingRequests(multipleContents, originalContentState) {\n  multipleContents._cancelCount++;\n\n  // reset the tile's content state to try again later.\n  multipleContents._tile._contentState = originalContentState;\n  const statistics = multipleContents.tileset.statistics;\n  statistics.numberOfPendingRequests -= multipleContents._requestsInFlight;\n  statistics.numberOfAttemptedRequests += multipleContents._requestsInFlight;\n  multipleContents._requestsInFlight = 0;\n\n  // Discard the request promises.\n  const contentCount = multipleContents._innerContentHeaders.length;\n  multipleContents._arrayFetchPromises = new Array(contentCount);\n}\n\n/**\n * Request the inner contents of this <code>Multiple3DTileContent</code>. This must be called once a frame until\n * {@link Multiple3DTileContent#contentsFetchedPromise} is defined. This promise\n * becomes available as soon as all requests are scheduled.\n * <p>\n * This method also updates the tile statistics' pending request count if the\n * requests are successfully scheduled.\n * </p>\n *\n * @return {Promise<void>|undefined} A promise that resolves when the request completes, or undefined if there is no request needed, or the request cannot be scheduled.\n * @private\n */\nMultiple3DTileContent.prototype.requestInnerContents = function () {\n  // It's possible for these promises to leak content array buffers if the\n  // camera moves before they all are scheduled. To prevent this leak, check\n  // if we can schedule all the requests at once. If not, no requests are\n  // scheduled\n  if (!canScheduleAllRequests(this._serverKeys)) {\n    this.tileset.statistics.numberOfAttemptedRequests += this._serverKeys.length;\n    return;\n  }\n  const contentHeaders = this._innerContentHeaders;\n  updatePendingRequests(this, contentHeaders.length);\n  const originalCancelCount = this._cancelCount;\n  for (let i = 0; i < contentHeaders.length; i++) {\n    // The cancel count is needed to avoid a race condition where a content\n    // is canceled multiple times.\n    this._arrayFetchPromises[i] = requestInnerContent(this, i, originalCancelCount, this._tile._contentState);\n  }\n  return createInnerContents(this);\n};\n\n/**\n * Check if all requests for inner contents can be scheduled at once. This is slower, but it avoids a potential memory leak.\n * @param {string[]} serverKeys The server keys for all of the inner contents\n * @return {boolean} True if the request scheduler has enough open slots for all inner contents\n * @private\n */\nfunction canScheduleAllRequests(serverKeys) {\n  const requestCountsByServer = {};\n  for (let i = 0; i < serverKeys.length; i++) {\n    const serverKey = serverKeys[i];\n    if (defined(requestCountsByServer[serverKey])) {\n      requestCountsByServer[serverKey]++;\n    } else {\n      requestCountsByServer[serverKey] = 1;\n    }\n  }\n  for (const key in requestCountsByServer) {\n    if (requestCountsByServer.hasOwnProperty(key) && !RequestScheduler.serverHasOpenSlots(key, requestCountsByServer[key])) {\n      return false;\n    }\n  }\n  return RequestScheduler.heapHasOpenSlots(serverKeys.length);\n}\nfunction requestInnerContent(multipleContents, index, originalCancelCount, originalContentState) {\n  // it is important to clone here. The fetchArrayBuffer() below here uses\n  // throttling, but other uses of the resources do not.\n  const contentResource = multipleContents._innerContentResources[index].clone();\n  const tile = multipleContents.tile;\n\n  // Always create a new request. If the tile gets canceled, this\n  // avoids getting stuck in the canceled state.\n  const priorityFunction = function () {\n    return tile._priority;\n  };\n  const serverKey = multipleContents._serverKeys[index];\n  const request = new Request({\n    throttle: true,\n    throttleByServer: true,\n    type: RequestType.TILES3D,\n    priorityFunction: priorityFunction,\n    serverKey: serverKey\n  });\n  contentResource.request = request;\n  multipleContents._requests[index] = request;\n  const promise = contentResource.fetchArrayBuffer();\n  if (!defined(promise)) {\n    return;\n  }\n  return promise.then(function (arrayBuffer) {\n    // Pending requests have already been canceled.\n    if (originalCancelCount < multipleContents._cancelCount) {\n      return;\n    }\n    if (contentResource.request.cancelled || contentResource.request.state === RequestState.CANCELLED) {\n      cancelPendingRequests(multipleContents, originalContentState);\n      return;\n    }\n    updatePendingRequests(multipleContents, -1);\n    return arrayBuffer;\n  }).catch(function (error) {\n    // Pending requests have already been canceled.\n    if (originalCancelCount < multipleContents._cancelCount) {\n      return;\n    }\n    if (contentResource.request.cancelled || contentResource.request.state === RequestState.CANCELLED) {\n      cancelPendingRequests(multipleContents, originalContentState);\n      return;\n    }\n    updatePendingRequests(multipleContents, -1);\n    handleInnerContentFailed(multipleContents, index, error);\n  });\n}\nasync function createInnerContents(multipleContents) {\n  const originalCancelCount = multipleContents._cancelCount;\n  const arrayBuffers = await Promise.all(multipleContents._arrayFetchPromises);\n  // Request have been cancelled\n  if (originalCancelCount < multipleContents._cancelCount) {\n    return;\n  }\n  const promises = arrayBuffers.map((arrayBuffer, i) => createInnerContent(multipleContents, arrayBuffer, i));\n\n  // Even if we had a partial success (in which case the inner promise will be handled, but the content will not be returned), mark that we finished creating\n  // contents\n  const contents = await Promise.all(promises);\n  multipleContents._contentsCreated = true;\n  multipleContents._contents = contents.filter(defined);\n  return contents;\n}\nasync function createInnerContent(multipleContents, arrayBuffer, index) {\n  if (!defined(arrayBuffer)) {\n    // Content was not fetched. The error was handled in\n    // the fetch promise. Return undefined to indicate partial failure.\n    return;\n  }\n  try {\n    const preprocessed = preprocess3DTileContent(arrayBuffer);\n    if (preprocessed.contentType === Cesium3DTileContentType.EXTERNAL_TILESET) {\n      throw new RuntimeError(\"External tilesets are disallowed inside multiple contents\");\n    }\n    multipleContents._disableSkipLevelOfDetail = multipleContents._disableSkipLevelOfDetail || preprocessed.contentType === Cesium3DTileContentType.GEOMETRY || preprocessed.contentType === Cesium3DTileContentType.VECTOR;\n    const tileset = multipleContents._tileset;\n    const resource = multipleContents._innerContentResources[index];\n    const tile = multipleContents._tile;\n    let content;\n    const contentFactory = Cesium3DTileContentFactory[preprocessed.contentType];\n    if (defined(preprocessed.binaryPayload)) {\n      content = await Promise.resolve(contentFactory(tileset, tile, resource, preprocessed.binaryPayload.buffer, 0));\n    } else {\n      // JSON formats\n      content = await Promise.resolve(contentFactory(tileset, tile, resource, preprocessed.jsonPayload));\n    }\n    const contentHeader = multipleContents._innerContentHeaders[index];\n    if (tile.hasImplicitContentMetadata) {\n      const subtree = tile.implicitSubtree;\n      const coordinates = tile.implicitCoordinates;\n      content.metadata = subtree.getContentMetadataView(coordinates, index);\n    } else if (!tile.hasImplicitContent) {\n      content.metadata = findContentMetadata(tileset, contentHeader);\n    }\n    const groupMetadata = findGroupMetadata(tileset, contentHeader);\n    if (defined(groupMetadata)) {\n      content.group = new Cesium3DContentGroup({\n        metadata: groupMetadata\n      });\n    }\n    return content;\n  } catch (error) {\n    handleInnerContentFailed(multipleContents, index, error);\n  }\n}\nfunction handleInnerContentFailed(multipleContents, index, error) {\n  const tileset = multipleContents._tileset;\n  const url = multipleContents._innerContentResources[index].url;\n  const message = defined(error.message) ? error.message : error.toString();\n  if (tileset.tileFailed.numberOfListeners > 0) {\n    tileset.tileFailed.raiseEvent({\n      url: url,\n      message: message\n    });\n  } else {\n    console.log(`A content failed to load: ${url}`);\n    console.log(`Error: ${message}`);\n  }\n}\n\n/**\n * Cancel all requests for inner contents. This is called by the tile\n * when a tile goes out of view.\n *\n * @private\n */\nMultiple3DTileContent.prototype.cancelRequests = function () {\n  for (let i = 0; i < this._requests.length; i++) {\n    const request = this._requests[i];\n    if (defined(request)) {\n      request.cancel();\n    }\n  }\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n * always returns <code>false</code>.  Instead call <code>hasProperty</code> for a specific inner content\n * @private\n */\nMultiple3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n * always returns <code>undefined</code>.  Instead call <code>getFeature</code> for a specific inner content\n * @private\n */\nMultiple3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\nMultiple3DTileContent.prototype.applyDebugSettings = function (enabled, color) {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].applyDebugSettings(enabled, color);\n  }\n};\nMultiple3DTileContent.prototype.applyStyle = function (style) {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].applyStyle(style);\n  }\n};\nMultiple3DTileContent.prototype.update = function (tileset, frameState) {\n  const contents = this._contents;\n  const length = contents.length;\n  let ready = true;\n  for (let i = 0; i < length; ++i) {\n    contents[i].update(tileset, frameState);\n    ready = ready && contents[i].ready;\n  }\n  if (!this._ready && ready) {\n    this._ready = true;\n  }\n};\n\n/**\n * Find an intersection between a ray and the tile content surface that was rendered. The ray must be given in world coordinates.\n *\n * @param {Ray} ray The ray to test for intersection.\n * @param {FrameState} frameState The frame state.\n * @param {Cartesian3|undefined} [result] The intersection or <code>undefined</code> if none was found.\n * @returns {Cartesian3|undefined} The intersection or <code>undefined</code> if none was found.\n *\n * @private\n */\nMultiple3DTileContent.prototype.pick = function (ray, frameState, result) {\n  if (!this._ready) {\n    return undefined;\n  }\n  let intersection;\n  let minDistance = Number.POSITIVE_INFINITY;\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    const candidate = contents[i].pick(ray, frameState, result);\n    if (!defined(candidate)) {\n      continue;\n    }\n    const distance = Cartesian3.distance(ray.origin, candidate);\n    if (distance < minDistance) {\n      intersection = candidate;\n      minDistance = distance;\n    }\n  }\n  if (!defined(intersection)) {\n    return undefined;\n  }\n  return result;\n};\nMultiple3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\nMultiple3DTileContent.prototype.destroy = function () {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].destroy();\n  }\n  return destroyObject(this);\n};\nexport default Multiple3DTileContent;","map":{"version":3,"names":["Cartesian3","defined","destroyObject","DeveloperError","Request","RequestScheduler","RequestState","RequestType","RuntimeError","Cesium3DContentGroup","Cesium3DTileContentType","Cesium3DTileContentFactory","findContentMetadata","findGroupMetadata","preprocess3DTileContent","Multiple3DTileContent","tileset","tile","tilesetResource","contentsJson","_tileset","_tile","_tilesetResource","_contents","_contentsCreated","contentHeaders","contents","content","_innerContentHeaders","_requestsInFlight","_cancelCount","contentCount","length","_arrayFetchPromises","Array","_requests","_ready","_innerContentResources","_serverKeys","i","contentResource","getDerivedResource","url","uri","serverKey","getServerKey","getUrlComponent","Object","defineProperties","prototype","featurePropertiesDirty","get","set","value","featuresLength","pointsLength","trianglesLength","geometryByteLength","texturesByteLength","batchTableByteLength","innerContents","ready","undefined","metadata","batchTable","group","innerContentUrls","map","contentHeader","updatePendingRequests","multipleContents","deltaRequestCount","statistics","numberOfPendingRequests","cancelPendingRequests","originalContentState","_contentState","numberOfAttemptedRequests","requestInnerContents","canScheduleAllRequests","originalCancelCount","requestInnerContent","createInnerContents","serverKeys","requestCountsByServer","key","hasOwnProperty","serverHasOpenSlots","heapHasOpenSlots","index","clone","priorityFunction","_priority","request","throttle","throttleByServer","type","TILES3D","promise","fetchArrayBuffer","then","arrayBuffer","cancelled","state","CANCELLED","catch","error","handleInnerContentFailed","arrayBuffers","Promise","all","promises","createInnerContent","filter","preprocessed","contentType","EXTERNAL_TILESET","_disableSkipLevelOfDetail","GEOMETRY","VECTOR","resource","contentFactory","binaryPayload","resolve","buffer","jsonPayload","hasImplicitContentMetadata","subtree","implicitSubtree","coordinates","implicitCoordinates","getContentMetadataView","hasImplicitContent","groupMetadata","message","toString","tileFailed","numberOfListeners","raiseEvent","console","log","cancelRequests","cancel","hasProperty","batchId","name","getFeature","applyDebugSettings","enabled","color","applyStyle","style","update","frameState","pick","ray","result","intersection","minDistance","Number","POSITIVE_INFINITY","candidate","distance","origin","isDestroyed","destroy"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Multiple3DTileContent.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Request from \"../Core/Request.js\";\nimport RequestScheduler from \"../Core/RequestScheduler.js\";\nimport RequestState from \"../Core/RequestState.js\";\nimport RequestType from \"../Core/RequestType.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport Cesium3DContentGroup from \"./Cesium3DContentGroup.js\";\nimport Cesium3DTileContentType from \"./Cesium3DTileContentType.js\";\nimport Cesium3DTileContentFactory from \"./Cesium3DTileContentFactory.js\";\nimport findContentMetadata from \"./findContentMetadata.js\";\nimport findGroupMetadata from \"./findGroupMetadata.js\";\nimport preprocess3DTileContent from \"./preprocess3DTileContent.js\";\n\n/**\n * A collection of contents for tiles that have multiple contents, either via the tile JSON (3D Tiles 1.1) or the <code>3DTILES_multiple_contents</code> extension.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_multiple_contents|3DTILES_multiple_contents extension}\n *\n * @alias Multiple3DTileContent\n * @constructor\n *\n * @param {Cesium3DTileset} tileset The tileset this content belongs to\n * @param {Cesium3DTile} tile The content this content belongs to\n * @param {Resource} tilesetResource The resource that points to the tileset. This will be used to derive each inner content's resource.\n * @param {object} contentsJson Either the tile JSON containing the contents array (3D Tiles 1.1), or <code>3DTILES_multiple_contents</code> extension JSON\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction Multiple3DTileContent(tileset, tile, tilesetResource, contentsJson) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._tilesetResource = tilesetResource;\n  this._contents = [];\n  this._contentsCreated = false;\n\n  // An older version of 3DTILES_multiple_contents used \"content\" instead of \"contents\"\n  const contentHeaders = defined(contentsJson.contents)\n    ? contentsJson.contents\n    : contentsJson.content;\n\n  this._innerContentHeaders = contentHeaders;\n  this._requestsInFlight = 0;\n\n  // How many times cancelPendingRequests() has been called. This is\n  // used to help short-circuit computations after a tile was canceled.\n  this._cancelCount = 0;\n\n  const contentCount = this._innerContentHeaders.length;\n  this._arrayFetchPromises = new Array(contentCount);\n  this._requests = new Array(contentCount);\n  this._ready = false;\n\n  this._innerContentResources = new Array(contentCount);\n  this._serverKeys = new Array(contentCount);\n\n  for (let i = 0; i < contentCount; i++) {\n    const contentResource = tilesetResource.getDerivedResource({\n      url: contentHeaders[i].uri,\n    });\n\n    const serverKey = RequestScheduler.getServerKey(\n      contentResource.getUrlComponent(),\n    );\n\n    this._innerContentResources[i] = contentResource;\n    this._serverKeys[i] = serverKey;\n  }\n}\n\nObject.defineProperties(Multiple3DTileContent.prototype, {\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code> checks if any of the inner contents have dirty featurePropertiesDirty.\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {boolean}\n   *\n   * @private\n   */\n  featurePropertiesDirty: {\n    get: function () {\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        if (contents[i].featurePropertiesDirty) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    set: function (value) {\n      const contents = this._contents;\n      const length = contents.length;\n      for (let i = 0; i < length; ++i) {\n        contents[i].featurePropertiesDirty = value;\n      }\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>featuresLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  featuresLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead, call <code>pointsLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  pointsLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>trianglesLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  trianglesLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>geometryByteLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  geometryByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>texturesByteLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n   * always returns <code>0</code>.  Instead call <code>batchTableByteLength</code> for a specific inner content.\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @private\n   */\n  batchTableByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return this._contents;\n    },\n  },\n\n  /**\n   * Returns true when the tile's content is ready to render; otherwise false\n   *\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   * @private\n   */\n  ready: {\n    get: function () {\n      if (!this._contentsCreated) {\n        return false;\n      }\n\n      return this._ready;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface.\n   * Unlike other content types, <code>Multiple3DTileContent</code> does not\n   * have a single URL, so this returns undefined.\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {string}\n   * @readonly\n   * @private\n   */\n  url: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Multiple3DTileContent</code>\n   * always returns <code>undefined</code>.  Instead call <code>metadata</code> for a specific inner content.\n   * @memberof Multiple3DTileContent.prototype\n   * @private\n   */\n  metadata: {\n    get: function () {\n      return undefined;\n    },\n    set: function () {\n      //>>includeStart('debug', pragmas.debug);\n      throw new DeveloperError(\"Multiple3DTileContent cannot have metadata\");\n      //>>includeEnd('debug');\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Multiple3DTileContent</code>\n   * always returns <code>undefined</code>.  Instead call <code>batchTable</code> for a specific inner content.\n   * @memberof Multiple3DTileContent.prototype\n   * @private\n   */\n  batchTable: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Part of the {@link Cesium3DTileContent} interface. <code>Multiple3DTileContent</code>\n   * always returns <code>undefined</code>.  Instead call <code>group</code> for a specific inner content.\n   * @memberof Multiple3DTileContent.prototype\n   * @private\n   */\n  group: {\n    get: function () {\n      return undefined;\n    },\n    set: function () {\n      //>>includeStart('debug', pragmas.debug);\n      throw new DeveloperError(\n        \"Multiple3DTileContent cannot have group metadata\",\n      );\n      //>>includeEnd('debug');\n    },\n  },\n\n  /**\n   * Get an array of the inner content URLs, regardless of whether they've\n   * been fetched or not. This is intended for use with\n   * {@link Cesium3DTileset#debugShowUrl}.\n   * @memberof Multiple3DTileContent.prototype\n   *\n   * @type {string[]}\n   * @readonly\n   * @private\n   */\n  innerContentUrls: {\n    get: function () {\n      return this._innerContentHeaders.map(function (contentHeader) {\n        return contentHeader.uri;\n      });\n    },\n  },\n});\n\nfunction updatePendingRequests(multipleContents, deltaRequestCount) {\n  multipleContents._requestsInFlight += deltaRequestCount;\n  multipleContents.tileset.statistics.numberOfPendingRequests +=\n    deltaRequestCount;\n}\n\nfunction cancelPendingRequests(multipleContents, originalContentState) {\n  multipleContents._cancelCount++;\n\n  // reset the tile's content state to try again later.\n  multipleContents._tile._contentState = originalContentState;\n\n  const statistics = multipleContents.tileset.statistics;\n\n  statistics.numberOfPendingRequests -= multipleContents._requestsInFlight;\n  statistics.numberOfAttemptedRequests += multipleContents._requestsInFlight;\n  multipleContents._requestsInFlight = 0;\n\n  // Discard the request promises.\n  const contentCount = multipleContents._innerContentHeaders.length;\n  multipleContents._arrayFetchPromises = new Array(contentCount);\n}\n\n/**\n * Request the inner contents of this <code>Multiple3DTileContent</code>. This must be called once a frame until\n * {@link Multiple3DTileContent#contentsFetchedPromise} is defined. This promise\n * becomes available as soon as all requests are scheduled.\n * <p>\n * This method also updates the tile statistics' pending request count if the\n * requests are successfully scheduled.\n * </p>\n *\n * @return {Promise<void>|undefined} A promise that resolves when the request completes, or undefined if there is no request needed, or the request cannot be scheduled.\n * @private\n */\nMultiple3DTileContent.prototype.requestInnerContents = function () {\n  // It's possible for these promises to leak content array buffers if the\n  // camera moves before they all are scheduled. To prevent this leak, check\n  // if we can schedule all the requests at once. If not, no requests are\n  // scheduled\n  if (!canScheduleAllRequests(this._serverKeys)) {\n    this.tileset.statistics.numberOfAttemptedRequests +=\n      this._serverKeys.length;\n    return;\n  }\n\n  const contentHeaders = this._innerContentHeaders;\n  updatePendingRequests(this, contentHeaders.length);\n\n  const originalCancelCount = this._cancelCount;\n  for (let i = 0; i < contentHeaders.length; i++) {\n    // The cancel count is needed to avoid a race condition where a content\n    // is canceled multiple times.\n    this._arrayFetchPromises[i] = requestInnerContent(\n      this,\n      i,\n      originalCancelCount,\n      this._tile._contentState,\n    );\n  }\n\n  return createInnerContents(this);\n};\n\n/**\n * Check if all requests for inner contents can be scheduled at once. This is slower, but it avoids a potential memory leak.\n * @param {string[]} serverKeys The server keys for all of the inner contents\n * @return {boolean} True if the request scheduler has enough open slots for all inner contents\n * @private\n */\nfunction canScheduleAllRequests(serverKeys) {\n  const requestCountsByServer = {};\n  for (let i = 0; i < serverKeys.length; i++) {\n    const serverKey = serverKeys[i];\n    if (defined(requestCountsByServer[serverKey])) {\n      requestCountsByServer[serverKey]++;\n    } else {\n      requestCountsByServer[serverKey] = 1;\n    }\n  }\n\n  for (const key in requestCountsByServer) {\n    if (\n      requestCountsByServer.hasOwnProperty(key) &&\n      !RequestScheduler.serverHasOpenSlots(key, requestCountsByServer[key])\n    ) {\n      return false;\n    }\n  }\n  return RequestScheduler.heapHasOpenSlots(serverKeys.length);\n}\n\nfunction requestInnerContent(\n  multipleContents,\n  index,\n  originalCancelCount,\n  originalContentState,\n) {\n  // it is important to clone here. The fetchArrayBuffer() below here uses\n  // throttling, but other uses of the resources do not.\n  const contentResource =\n    multipleContents._innerContentResources[index].clone();\n  const tile = multipleContents.tile;\n\n  // Always create a new request. If the tile gets canceled, this\n  // avoids getting stuck in the canceled state.\n  const priorityFunction = function () {\n    return tile._priority;\n  };\n  const serverKey = multipleContents._serverKeys[index];\n  const request = new Request({\n    throttle: true,\n    throttleByServer: true,\n    type: RequestType.TILES3D,\n    priorityFunction: priorityFunction,\n    serverKey: serverKey,\n  });\n  contentResource.request = request;\n  multipleContents._requests[index] = request;\n\n  const promise = contentResource.fetchArrayBuffer();\n  if (!defined(promise)) {\n    return;\n  }\n\n  return promise\n    .then(function (arrayBuffer) {\n      // Pending requests have already been canceled.\n      if (originalCancelCount < multipleContents._cancelCount) {\n        return;\n      }\n\n      if (\n        contentResource.request.cancelled ||\n        contentResource.request.state === RequestState.CANCELLED\n      ) {\n        cancelPendingRequests(multipleContents, originalContentState);\n        return;\n      }\n\n      updatePendingRequests(multipleContents, -1);\n      return arrayBuffer;\n    })\n    .catch(function (error) {\n      // Pending requests have already been canceled.\n      if (originalCancelCount < multipleContents._cancelCount) {\n        return;\n      }\n\n      if (\n        contentResource.request.cancelled ||\n        contentResource.request.state === RequestState.CANCELLED\n      ) {\n        cancelPendingRequests(multipleContents, originalContentState);\n        return;\n      }\n\n      updatePendingRequests(multipleContents, -1);\n      handleInnerContentFailed(multipleContents, index, error);\n    });\n}\n\nasync function createInnerContents(multipleContents) {\n  const originalCancelCount = multipleContents._cancelCount;\n  const arrayBuffers = await Promise.all(multipleContents._arrayFetchPromises);\n  // Request have been cancelled\n  if (originalCancelCount < multipleContents._cancelCount) {\n    return;\n  }\n\n  const promises = arrayBuffers.map((arrayBuffer, i) =>\n    createInnerContent(multipleContents, arrayBuffer, i),\n  );\n\n  // Even if we had a partial success (in which case the inner promise will be handled, but the content will not be returned), mark that we finished creating\n  // contents\n  const contents = await Promise.all(promises);\n  multipleContents._contentsCreated = true;\n  multipleContents._contents = contents.filter(defined);\n  return contents;\n}\n\nasync function createInnerContent(multipleContents, arrayBuffer, index) {\n  if (!defined(arrayBuffer)) {\n    // Content was not fetched. The error was handled in\n    // the fetch promise. Return undefined to indicate partial failure.\n    return;\n  }\n\n  try {\n    const preprocessed = preprocess3DTileContent(arrayBuffer);\n\n    if (preprocessed.contentType === Cesium3DTileContentType.EXTERNAL_TILESET) {\n      throw new RuntimeError(\n        \"External tilesets are disallowed inside multiple contents\",\n      );\n    }\n\n    multipleContents._disableSkipLevelOfDetail =\n      multipleContents._disableSkipLevelOfDetail ||\n      preprocessed.contentType === Cesium3DTileContentType.GEOMETRY ||\n      preprocessed.contentType === Cesium3DTileContentType.VECTOR;\n\n    const tileset = multipleContents._tileset;\n    const resource = multipleContents._innerContentResources[index];\n    const tile = multipleContents._tile;\n\n    let content;\n    const contentFactory = Cesium3DTileContentFactory[preprocessed.contentType];\n    if (defined(preprocessed.binaryPayload)) {\n      content = await Promise.resolve(\n        contentFactory(\n          tileset,\n          tile,\n          resource,\n          preprocessed.binaryPayload.buffer,\n          0,\n        ),\n      );\n    } else {\n      // JSON formats\n      content = await Promise.resolve(\n        contentFactory(tileset, tile, resource, preprocessed.jsonPayload),\n      );\n    }\n\n    const contentHeader = multipleContents._innerContentHeaders[index];\n\n    if (tile.hasImplicitContentMetadata) {\n      const subtree = tile.implicitSubtree;\n      const coordinates = tile.implicitCoordinates;\n      content.metadata = subtree.getContentMetadataView(coordinates, index);\n    } else if (!tile.hasImplicitContent) {\n      content.metadata = findContentMetadata(tileset, contentHeader);\n    }\n\n    const groupMetadata = findGroupMetadata(tileset, contentHeader);\n    if (defined(groupMetadata)) {\n      content.group = new Cesium3DContentGroup({\n        metadata: groupMetadata,\n      });\n    }\n    return content;\n  } catch (error) {\n    handleInnerContentFailed(multipleContents, index, error);\n  }\n}\n\nfunction handleInnerContentFailed(multipleContents, index, error) {\n  const tileset = multipleContents._tileset;\n  const url = multipleContents._innerContentResources[index].url;\n  const message = defined(error.message) ? error.message : error.toString();\n  if (tileset.tileFailed.numberOfListeners > 0) {\n    tileset.tileFailed.raiseEvent({\n      url: url,\n      message: message,\n    });\n  } else {\n    console.log(`A content failed to load: ${url}`);\n    console.log(`Error: ${message}`);\n  }\n}\n\n/**\n * Cancel all requests for inner contents. This is called by the tile\n * when a tile goes out of view.\n *\n * @private\n */\nMultiple3DTileContent.prototype.cancelRequests = function () {\n  for (let i = 0; i < this._requests.length; i++) {\n    const request = this._requests[i];\n    if (defined(request)) {\n      request.cancel();\n    }\n  }\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n * always returns <code>false</code>.  Instead call <code>hasProperty</code> for a specific inner content\n * @private\n */\nMultiple3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Multiple3DTileContent</code>\n * always returns <code>undefined</code>.  Instead call <code>getFeature</code> for a specific inner content\n * @private\n */\nMultiple3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\n\nMultiple3DTileContent.prototype.applyDebugSettings = function (enabled, color) {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].applyDebugSettings(enabled, color);\n  }\n};\n\nMultiple3DTileContent.prototype.applyStyle = function (style) {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].applyStyle(style);\n  }\n};\n\nMultiple3DTileContent.prototype.update = function (tileset, frameState) {\n  const contents = this._contents;\n  const length = contents.length;\n  let ready = true;\n  for (let i = 0; i < length; ++i) {\n    contents[i].update(tileset, frameState);\n    ready = ready && contents[i].ready;\n  }\n\n  if (!this._ready && ready) {\n    this._ready = true;\n  }\n};\n\n/**\n * Find an intersection between a ray and the tile content surface that was rendered. The ray must be given in world coordinates.\n *\n * @param {Ray} ray The ray to test for intersection.\n * @param {FrameState} frameState The frame state.\n * @param {Cartesian3|undefined} [result] The intersection or <code>undefined</code> if none was found.\n * @returns {Cartesian3|undefined} The intersection or <code>undefined</code> if none was found.\n *\n * @private\n */\nMultiple3DTileContent.prototype.pick = function (ray, frameState, result) {\n  if (!this._ready) {\n    return undefined;\n  }\n\n  let intersection;\n  let minDistance = Number.POSITIVE_INFINITY;\n  const contents = this._contents;\n  const length = contents.length;\n\n  for (let i = 0; i < length; ++i) {\n    const candidate = contents[i].pick(ray, frameState, result);\n\n    if (!defined(candidate)) {\n      continue;\n    }\n\n    const distance = Cartesian3.distance(ray.origin, candidate);\n    if (distance < minDistance) {\n      intersection = candidate;\n      minDistance = distance;\n    }\n  }\n\n  if (!defined(intersection)) {\n    return undefined;\n  }\n\n  return result;\n};\n\nMultiple3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nMultiple3DTileContent.prototype.destroy = function () {\n  const contents = this._contents;\n  const length = contents.length;\n  for (let i = 0; i < length; ++i) {\n    contents[i].destroy();\n  }\n  return destroyObject(this);\n};\n\nexport default Multiple3DTileContent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}