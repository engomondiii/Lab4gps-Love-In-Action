{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Represents a scalar value's lower and upper bound at a near distance and far distance in eye space.\n * @alias NearFarScalar\n * @constructor\n *\n * @param {number} [near=0.0] The lower bound of the camera range.\n * @param {number} [nearValue=0.0] The value at the lower bound of the camera range.\n * @param {number} [far=1.0] The upper bound of the camera range.\n * @param {number} [farValue=0.0] The value at the upper bound of the camera range.\n *\n * @see Packable\n */\nfunction NearFarScalar(near, nearValue, far, farValue) {\n  /**\n   * The lower bound of the camera range.\n   * @type {number}\n   * @default 0.0\n   */\n  this.near = defaultValue(near, 0.0);\n  /**\n   * The value at the lower bound of the camera range.\n   * @type {number}\n   * @default 0.0\n   */\n  this.nearValue = defaultValue(nearValue, 0.0);\n  /**\n   * The upper bound of the camera range.\n   * @type {number}\n   * @default 1.0\n   */\n  this.far = defaultValue(far, 1.0);\n  /**\n   * The value at the upper bound of the camera range.\n   * @type {number}\n   * @default 0.0\n   */\n  this.farValue = defaultValue(farValue, 0.0);\n}\n\n/**\n * Duplicates a NearFarScalar instance.\n *\n * @param {NearFarScalar} nearFarScalar The NearFarScalar to duplicate.\n * @param {NearFarScalar} [result] The object onto which to store the result.\n * @returns {NearFarScalar} The modified result parameter or a new NearFarScalar instance if one was not provided. (Returns undefined if nearFarScalar is undefined)\n */\nNearFarScalar.clone = function (nearFarScalar, result) {\n  if (!defined(nearFarScalar)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new NearFarScalar(nearFarScalar.near, nearFarScalar.nearValue, nearFarScalar.far, nearFarScalar.farValue);\n  }\n  result.near = nearFarScalar.near;\n  result.nearValue = nearFarScalar.nearValue;\n  result.far = nearFarScalar.far;\n  result.farValue = nearFarScalar.farValue;\n  return result;\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nNearFarScalar.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {NearFarScalar} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nNearFarScalar.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.near;\n  array[startingIndex++] = value.nearValue;\n  array[startingIndex++] = value.far;\n  array[startingIndex] = value.farValue;\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {NearFarScalar} [result] The object into which to store the result.\n * @returns {NearFarScalar} The modified result parameter or a new NearFarScalar instance if one was not provided.\n */\nNearFarScalar.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  if (!defined(result)) {\n    result = new NearFarScalar();\n  }\n  result.near = array[startingIndex++];\n  result.nearValue = array[startingIndex++];\n  result.far = array[startingIndex++];\n  result.farValue = array[startingIndex];\n  return result;\n};\n\n/**\n * Compares the provided NearFarScalar and returns <code>true</code> if they are equal,\n * <code>false</code> otherwise.\n *\n * @param {NearFarScalar} [left] The first NearFarScalar.\n * @param {NearFarScalar} [right] The second NearFarScalar.\n * @returns {boolean} <code>true</code> if left and right are equal; otherwise <code>false</code>.\n */\nNearFarScalar.equals = function (left, right) {\n  return left === right || defined(left) && defined(right) && left.near === right.near && left.nearValue === right.nearValue && left.far === right.far && left.farValue === right.farValue;\n};\n\n/**\n * Duplicates this instance.\n *\n * @param {NearFarScalar} [result] The object onto which to store the result.\n * @returns {NearFarScalar} The modified result parameter or a new NearFarScalar instance if one was not provided.\n */\nNearFarScalar.prototype.clone = function (result) {\n  return NearFarScalar.clone(this, result);\n};\n\n/**\n * Compares this instance to the provided NearFarScalar and returns <code>true</code> if they are equal,\n * <code>false</code> otherwise.\n *\n * @param {NearFarScalar} [right] The right hand side NearFarScalar.\n * @returns {boolean} <code>true</code> if left and right are equal; otherwise <code>false</code>.\n */\nNearFarScalar.prototype.equals = function (right) {\n  return NearFarScalar.equals(this, right);\n};\nexport default NearFarScalar;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","NearFarScalar","near","nearValue","far","farValue","clone","nearFarScalar","result","undefined","packedLength","pack","value","array","startingIndex","unpack","equals","left","right","prototype"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/NearFarScalar.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Represents a scalar value's lower and upper bound at a near distance and far distance in eye space.\n * @alias NearFarScalar\n * @constructor\n *\n * @param {number} [near=0.0] The lower bound of the camera range.\n * @param {number} [nearValue=0.0] The value at the lower bound of the camera range.\n * @param {number} [far=1.0] The upper bound of the camera range.\n * @param {number} [farValue=0.0] The value at the upper bound of the camera range.\n *\n * @see Packable\n */\nfunction NearFarScalar(near, nearValue, far, farValue) {\n  /**\n   * The lower bound of the camera range.\n   * @type {number}\n   * @default 0.0\n   */\n  this.near = defaultValue(near, 0.0);\n  /**\n   * The value at the lower bound of the camera range.\n   * @type {number}\n   * @default 0.0\n   */\n  this.nearValue = defaultValue(nearValue, 0.0);\n  /**\n   * The upper bound of the camera range.\n   * @type {number}\n   * @default 1.0\n   */\n  this.far = defaultValue(far, 1.0);\n  /**\n   * The value at the upper bound of the camera range.\n   * @type {number}\n   * @default 0.0\n   */\n  this.farValue = defaultValue(farValue, 0.0);\n}\n\n/**\n * Duplicates a NearFarScalar instance.\n *\n * @param {NearFarScalar} nearFarScalar The NearFarScalar to duplicate.\n * @param {NearFarScalar} [result] The object onto which to store the result.\n * @returns {NearFarScalar} The modified result parameter or a new NearFarScalar instance if one was not provided. (Returns undefined if nearFarScalar is undefined)\n */\nNearFarScalar.clone = function (nearFarScalar, result) {\n  if (!defined(nearFarScalar)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new NearFarScalar(\n      nearFarScalar.near,\n      nearFarScalar.nearValue,\n      nearFarScalar.far,\n      nearFarScalar.farValue,\n    );\n  }\n\n  result.near = nearFarScalar.near;\n  result.nearValue = nearFarScalar.nearValue;\n  result.far = nearFarScalar.far;\n  result.farValue = nearFarScalar.farValue;\n  return result;\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nNearFarScalar.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {NearFarScalar} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nNearFarScalar.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.near;\n  array[startingIndex++] = value.nearValue;\n  array[startingIndex++] = value.far;\n  array[startingIndex] = value.farValue;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {NearFarScalar} [result] The object into which to store the result.\n * @returns {NearFarScalar} The modified result parameter or a new NearFarScalar instance if one was not provided.\n */\nNearFarScalar.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new NearFarScalar();\n  }\n  result.near = array[startingIndex++];\n  result.nearValue = array[startingIndex++];\n  result.far = array[startingIndex++];\n  result.farValue = array[startingIndex];\n  return result;\n};\n\n/**\n * Compares the provided NearFarScalar and returns <code>true</code> if they are equal,\n * <code>false</code> otherwise.\n *\n * @param {NearFarScalar} [left] The first NearFarScalar.\n * @param {NearFarScalar} [right] The second NearFarScalar.\n * @returns {boolean} <code>true</code> if left and right are equal; otherwise <code>false</code>.\n */\nNearFarScalar.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.near === right.near &&\n      left.nearValue === right.nearValue &&\n      left.far === right.far &&\n      left.farValue === right.farValue)\n  );\n};\n\n/**\n * Duplicates this instance.\n *\n * @param {NearFarScalar} [result] The object onto which to store the result.\n * @returns {NearFarScalar} The modified result parameter or a new NearFarScalar instance if one was not provided.\n */\nNearFarScalar.prototype.clone = function (result) {\n  return NearFarScalar.clone(this, result);\n};\n\n/**\n * Compares this instance to the provided NearFarScalar and returns <code>true</code> if they are equal,\n * <code>false</code> otherwise.\n *\n * @param {NearFarScalar} [right] The right hand side NearFarScalar.\n * @returns {boolean} <code>true</code> if left and right are equal; otherwise <code>false</code>.\n */\nNearFarScalar.prototype.equals = function (right) {\n  return NearFarScalar.equals(this, right);\n};\nexport default NearFarScalar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}