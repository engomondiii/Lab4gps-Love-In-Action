{"ast":null,"code":"// This file is part of meshoptimizer library and is distributed under the terms of MIT License.\n// Copyright (C) 2016-2024, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)\nvar MeshoptClusterizer = function () {\n  // Built with clang version 18.1.2\n  // Built from meshoptimizer 0.22\n  var wasm = 'b9H79Tebbbefx9Geueu9Geub9Gbb9Giuuueu9Gkuuuuuuuuuu99eu9Gvuuuuueu9Gkuuuuuuuuu9999eu9Gruuuuuuub9Gkuuuuuuuuuuueu9Gouuuuuub9Giuuub9GluuuubiOHdilvorwDqrkbiibeilve9Weiiviebeoweuec:q:Odkr:Yewo9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bb8A9TW79O9V9Wt9F9I919P29K9nW79O2Wt79c9V919U9KbeX9TW79O9V9Wt9F9I919P29K9nW79O2Wt7bd39TW79O9V9Wt9F9J9V9T9W91tWJ2917tWV9c9V919U9K7br39TW79O9V9Wt9F9J9V9T9W91tW9nW79O2Wt9c9V919U9K7bDL9TW79O9V9Wt9F9V9Wt9P9T9P96W9nW79O2Wtbql79IV9RbkDwebcekdsPq;L9kHdbkIbabaec9:fgefcufae9Ugeabci9Uadfcufad9Ugbaeab0Ek:oAlPue99eux998Jjjjjbc:We9Rgk8Kjjjjbakc;mbfcbc;Kbz:njjjb8AakcuaocdtgxaocFFFFi0Egmcbyd:e1jjbHjjjjbbgPBd9makceBd:SeakaPBdnakamcbyd:e1jjbHjjjjbbgsBd9qakcdBd:SeakasBd9eakcualcdtalcFFFFi0Ecbyd:e1jjbHjjjjbbgzBd9uakazBd9iakciBd:SeaPcbaxz:njjjbhHalci9UhOdnalTmbaihPalhAinaHaPydbcdtfgCaCydbcefBdbaPclfhPaAcufgAmbkkdnaoTmbcbhPashAaHhCaohXinaAaPBdbaAclfhAaCydbaPfhPaCclfhCaXcufgXmbkkdnalci6mbcbhPaihAinaAcwfydbhCaAclfydbhXasaAydbcdtfgQaQydbgQcefBdbazaQcdtfaPBdbasaXcdtfgXaXydbgXcefBdbazaXcdtfaPBdbasaCcdtfgCaCydbgCcefBdbazaCcdtfaPBdbaAcxfhAaOaPcefgP9hmbkkdnaoTmbaHhAashPaohCinaPaPydbaAydb9RBdbaAclfhAaPclfhPaCcufgCmbkkakamcbyd:e1jjbHjjjjbbgPBd9yakclBd:SeaPaHaxz:mjjjbhmakaOcbyd:e1jjbHjjjjbbgPBd9CakcvBd:SeaPcbaOz:njjjbhLakcuaOcK2alcjjjjd0Ecbyd:e1jjbHjjjjbbgKBd9GakcoBd:SeJbbbbhYdnalci6g8Ambarcd4hxaihAaKhPaOhrJbbbbhEinavaAclfydbax2cdtfgCIdlh3avaAydbax2cdtfgXIdlhYavaAcwfydbax2cdtfgQIdlh5aCIdwh8EaXIdwh8FaQIdwhaaPaCIdbghaXIdbggMaQIdbg8JMJbbnn:vUdbaPclfaXIdlaCIdlMaQIdlMJbbnn:vUdbaQIdwh8KaCIdwh8LaXIdwh8MaPcxfa3aY:tg3aaa8F:tgaNa5aY:tg5a8Ea8F:tg8EN:tgYJbbbbJbbjZahag:tgha5Na8Jag:tgga3N:tg8Fa8FNaYaYNa8EagNaaahN:tgYaYNMM:rgg:vagJbbbb9BEg3NUdbaPczfaYa3NUdbaPcCfa8Fa3NUdbaPcwfa8Ka8Ma8LMMJbbnn:vUdbaEagMhEaAcxfhAaPcKfhParcufgrmbkaEaO:Z:vJbbbZNhYkakcuaOcdtalcFFFF970Ecbyd:e1jjbHjjjjbbgCBd9KakcrBd:SeaYaD:ZN:rhYdna8AmbcbhPaChAinaAaPBdbaAclfhAaOaPcefgP9hmbkkaYJbbbZNh8MakcuaOcltalcFFFFd0Ecbyd:e1jjbHjjjjbbg8ABd9OakcwBd:Secba8AaKaCaOz:djjjb8Aakaocbyd:e1jjbHjjjjbbgPBd2aPcFeaoz:njjjbhrakc8Wfcwf9cb83ibak9cb83i8WcbhPJbbbbhEJbbbbh5Jbbbbh8EJbbbbhYJbbbbh8FJbbbbhgcbhlinJbbbbh3dnaPTmbJbbjZaP:Z:vh3kaka8Ea3NgaUdaaka5a3NghUd3akaEa3Ng8JUdKJbbbbh3dnagagNaYaYNa8Fa8FNMMg8KJbbbb9BmbJbbjZa8K:r:vh3kakaga3NUd8Saka8Fa3NUdyakaYa3NUd8Kdndndnakyd8WgQakydUgAakcKfaeaiakc;abfaKamara8Maqz:ejjjbgCcuSmbdnaPaD9pmbaAaraiaCcx2fgXydbfRbbcFeSfaraXclfydbfRbbcFeSfaraXcwfydbfRbbcFeSfaw9nmdkaQaAcbaeaiakc;abfaKamara8MJbbbbz:ejjjbgCcu9hmekakaaUdCakahUdzaka8JUdxakcuBdwakcFFF;7rBdla8AcbaKaLakcxfakcwfakclfz:fjjjbakydwgCcuSmekdnakc8WfaiaCcx2fgOydbgPaOclfydbgAaOcwfydbgXarabaeadalawaDz:gjjjbTmbalcefhlJbbbbhEJbbbbh5Jbbbbh8EJbbbbhYJbbbbh8FJbbbbhgkamaPcdtfgPaPydbcufBdbamaAcdtfgPaPydbcufBdbamaXcdtfgPaPydbcufBdbcbhXinazasaOaXcdtfydbcdtgAfydbcdtfgxhPaHaAfgvydbgQhAdnaQTmbdninaPydbaCSmeaPclfhPaAcufgATmdxbkkaPaxaQcdtfc98fydbBdbavavydbcufBdbkaXcefgXci9hmbkaKaCcK2fgPIdbh3aPIdlhaaPIdwhhaPIdxh8JaPIdzh8KaPIdCh8LaLaCfce86bbaga8LMhga8Fa8KMh8FaYa8JMhYa8EahMh8Ea5aaMh5aEa3MhEakyd88hPxekkdnaPTmbdnakyd80gAaPci2fgCciGTmbadaCfcbaPaAcu7fciGcefz:njjjb8AkabalcltfgPak8Pi8W83dbaPcwfakc8Wfcwf8Pib83dbalcefhlkcahPdninaPc98Smeakc;mbfaPfydbcbydj1jjbH:bjjjbbaPc98fhPxbkkakc:Wef8Kjjjjbalk;3vivuv99lu8Jjjjjbca9Rgv8Kjjjjbdndnalcw0mbaiydbhoaeabcitfgralcdtcufBdlaraoBdbdnalcd6mbaiclfhoalcufhwarcxfhrinaoydbhDarcuBdbarc98faDBdbarcwfhraoclfhoawcufgwmbkkalabfhrxekcbhDavczfcwfcbBdbav9cb83izavcwfcbBdbav9cb83ibJbbjZhqJbbjZhkinadaiaDcdtfydbcK2fhwcbhrinavczfarfgoawarfIdbgxaoIdbgm:tgPakNamMgmUdbavarfgoaPaxam:tNaoIdbMUdbarclfgrcx9hmbkJbbjZaqJbbjZMgq:vhkaDcefgDal9hmbkcbhoadcbcecdavIdlgxavIdwgm9GEgravIdbgPam9GEaraPax9GEgscdtgrfhzavczfarfIdbhxaihralhwinaiaocdtfgDydbhHaDarydbgOBdbaraHBdbarclfhraoazaOcK2fIdbax9Dfhoawcufgwmbkaeabcitfhrdndnaocv6mbaoalc98f6mekaraiydbBdbaralcdtcufBdlaiclfhoalcufhwarcxfhrinaoydbhDarcuBdbarc98faDBdbarcwfhraoclfhoawcufgwmbkalabfhrxekaraxUdbaeabcitfgrarydlc98GasVBdlabcefaeadaiaoz:djjjbhwararydlciGawabcu7fcdtVBdlawaeadaiaocdtfalao9Rz:djjjbhrkavcaf8Kjjjjbark;Bloeue99vue99Due99dndnaembcuhkxekJbbjZaq:thxaiabcdtfhmavydbhPavydlhsavydwhzcbhHJFFuuhOcvhbcuhkindnaPamaHcdtfydbcdtgvfydbgATmbazasavfydbcdtfhiindndnawalaiydbgCcx2fgvclfydbgXfRbbcFeSawavydbgQfRbbcFeSfawavcwfydbgLfRbbcFeSfgKmbcbhvxekcehvaraQcdtfydbgYceSmbcehvaraXcdtfydbg8AceSmbcehvaraLcdtfydbgEceSmbdna8AcdSaYcdSfaEcdSfcd6mbaKcefhvxekaKcdfhvkdnavab9kmbdndnadTmbaoaCcK2fgQIdwadIdw:tg3a3NaQIdbadIdb:tg3a3NaQIdladIdl:tg3a3NMM:raD:vaxNJbbjZMJ9VO:d86JbbjZaQIdCadIdCNaQIdxadIdxNaQIdzadIdzNMMaqN:tg3a3J9VO:d869DENh3xekaraQcdtfydbaraXcdtfydbfaraLcdtfydbfc99f:Zh3kaCakavab6a3aO9DVgQEhkavabaQEhba3aOaQEhOkaiclfhiaAcufgAmbkkaHcefgHae9hmbkkakk;bddlue99dndndnabaecitfgrydlgwciGgDci9hmbarclfhqxekinabcbawcd4gwalaDcdtfIdbabaecitfIdb:tgkJbbbb9FEgDaecefgefadaialavaoz:fjjjbak:laoIdb9FTmdabaDaw7aefgecitfgrydlgwciGgDci9hmbkarclfhqkabaecitfhecuhbindnaiaeydbgDfRbbmbadaDcK2fgrIdwalIdw:tgkakNarIdbalIdb:tgkakNarIdlalIdl:tgkakNMM:rgkaoIdb9DTmbaoakUdbavaDBdbaqydbhwkaecwfheabcefgbawcd46mbkkk;yleoudnaladfgkRbbcFeSalaefgxRbbgmcFeSfabydwgPfalaifgsRbbcFeSfaD0abydxaq9pVgzce9hmbavawcltfgmab8Pdb83dbamcwfabcwfgm8Pdb83dbdndnamydbmbcbhqxekcbhDaohminalamabydbcdtfydbfcFe86bbamclfhmaDcefgDabydwgq6mbkkdnabydxglci2gDabydlgmfgPciGTmbaraPfcbalamcu7fciGcefz:njjjb8Aabydxci2hDabydlhmabydwhqkab9cb83dwababydbaqfBdbabaDcifc98GamfBdlaxRbbhmcbhPkdnamcFeGcFe9hmbaxaP86bbababydwgmcefBdwaoabydbcdtfamcdtfaeBdbkdnakRbbcFe9hmbakabydw86bbababydwgmcefBdwaoabydbcdtfamcdtfadBdbkdnasRbbcFe9hmbasabydw86bbababydwgmcefBdwaoabydbcdtfamcdtfaiBdbkarabydlfabydxci2faxRbb86bbarabydlfabydxci2fcefakRbb86bbarabydlfabydxci2fcdfasRbb86bbababydxcefBdxazk;Ckovud99euv99eul998Jjjjjbc:G;ae9Rgo8KjjjjbdndnadTmbavcd4hrcbhwcbhDindnaiaeclfydbar2cdtfgvIdbaiaeydbar2cdtfgqIdbgk:tgxaiaecwfydbar2cdtfgmIdlaqIdlgP:tgsNamIdbak:tgzavIdlaP:tgPN:tgkakNaPamIdwaqIdwgH:tgONasavIdwaH:tgHN:tgPaPNaHazNaOaxN:tgxaxNMM:rgsJbbbb9Bmbaoc:G:qefawcx2fgAakas:vUdwaAaxas:vUdlaAaPas:vUdbaocafawc8K2fgAaq8Pdb83dbaAav8Pdb83dxaAam8Pdb83dKaAcwfaqcwfydbBdbaAcCfavcwfydbBdbaAcafamcwfydbBdbawcefhwkaecxfheaDcifgDad6mbkab9cb83dbabcyf9cb83dbabcaf9cb83dbabcKf9cb83dbabczf9cb83dbabcwf9cb83dbawTmeao9cb83iKao9cb83izaoczfaocafawci2z1jjjbaoIdKhCaoIdChXaoIdzhQao9cb83iwao9cb83ibaoaoc:G:qefawz1jjjbJbbjZhkaoIdwgPJbbbbJbbjZaPaPNaoIdbgPaPNaoIdlgsasNMM:rgx:vaxJbbbb9BEgzNhxasazNhsaPazNhzaoc:G:qefheawhvinaecwfIdbaxNaeIdbazNasaeclfIdbNMMgPakaPak9DEhkaecxfheavcufgvmbkabaCUdwabaXUdlabaQUdbabaoId3UdxdndnakJ;n;m;m899FmbJbbbbhPaoc:G:qefheaocafhvinaCavcwfIdb:taecwfIdbgHNaQavIdb:taeIdbgONaXavclfIdb:taeclfIdbgLNMMaxaHNazaONasaLNMM:vgHaPaHaP9EEhPavc8KfhvaecxfheawcufgwmbkabazUd3abc8KfaxUdbabcafasUdbabcKfaCaxaPN:tUdbabcCfaXasaPN:tUdbabaQazaPN:tUdzabJbbjZakakN:t:rgkUdydndnaxJbbj:;axJbbj:;9GEgPJbbjZaPJbbjZ9FEJbb;:9cNJbbbZJbbb:;axJbbbb9GEMgP:lJbbb9p9DTmbaP:Ohexekcjjjj94hekabc8Ufae86bbdndnasJbbj:;asJbbj:;9GEgPJbbjZaPJbbjZ9FEJbb;:9cNJbbbZJbbb:;asJbbbb9GEMgP:lJbbb9p9DTmbaP:Ohvxekcjjjj94hvkabcRfav86bbdndnazJbbj:;azJbbj:;9GEgPJbbjZaPJbbjZ9FEJbb;:9cNJbbbZJbbb:;azJbbbb9GEMgP:lJbbb9p9DTmbaP:Ohqxekcjjjj94hqkabaq86b8SdndnaecKtcK91:YJbb;:9c:vax:t:lavcKtcK91:YJbb;:9c:vas:t:laqcKtcK91:YJbb;:9c:vaz:t:lakMMMJbb;:9cNJbbjZMgk:lJbbb9p9DTmbak:Ohexekcjjjj94hekaecFbaecFb9iEhexekabcjjj;8iBdycFbhekabae86b8Vxekab9cb83dbabcyf9cb83dbabcaf9cb83dbabcKf9cb83dbabczf9cb83dbabcwf9cb83dbkaoc:G;aef8Kjjjjbk:mvdouq99cbhi8Jjjjjbca9RglczfcwfcbBdbal9cb83izalcwfcbBdbal9cb83ibdnadTmbcbhvinaeaifhocbhrinalczfarfgwavawydbgwaoarfIdbgDaearawcx2ffIdb9DEBdbalarfgwavawydbgwaDaearawcx2ffIdb9EEBdbarclfgrcx9hmbkaicxfhiavcefgvad9hmbkkJbbbbhDcbhrcbhicbhvinaealarfydbcx2fgwIdwaealczfarfydbcx2fgoIdw:tgqaqNawIdbaoIdb:tgqaqNawIdlaoIdl:tgqaqNMMgqaDaqaD9EgwEhDavaiawEhiarclfhravcefgvci9hmbkaealczfaicdtgvfydbcx2fgrIdwaealavfydbcx2fglIdwMJbbbZNhqarIdlalIdlMJbbbZNhkarIdbalIdbMJbbbZNhxaD:rJbbbZNhDdnadTmbindnaecwfIdbgmaq:tgPaPNaeIdbgsax:tgPaPNaeclfIdbgzak:tgPaPNMMgPaDaDN9ETmbaqaDaP:rgH:vJbbbZNJbbbZMgPNamJbbjZaP:tgONMhqakaPNazaONMhkaxaPNasaONMhxaDaHMJbbbZNhDkaecxfheadcufgdmbkkabaDUdxabaqUdwabakUdlabaxUdbkjeeiu8Jjjjjbcj8W9Rgr8Kjjjjbaici2hwdnaiTmbawceawce0EhDarhiinaiaeadRbbcdtfydbBdbadcefhdaiclfhiaDcufgDmbkkabarawaladaoz:hjjjbarcj8Wf8Kjjjjbk:Ylequ8Jjjjjbcjx9Rgl8Kjjjjbcbhvalcjqfcbaiz:njjjb8AdndnadTmbcjehoaehrincuhwarhDcuhqavhkdninawakaoalcjqfaDcefRbbfRbb9RcFeGci6aoalcjqfaDRbbfRbb9RcFeGci6faoalcjqfaDcdfRbbfRbb9RcFeGci6fgxaq9mgmEhwdnammbaxce0mdkaxaqaxaq9kEhqaDcifhDadakcefgk9hmbkkaeawci2fgDcdfRbbhqaDcefRbbhxaDRbbhkaeavci2fgDcifaDawav9Rci2z:qjjjb8Aakalcjqffaocefgo86bbaxalcjqffao86bbaDcdfaq86bbaDcefax86bbaDak86bbaqalcjqffao86bbarcifhravcefgvad9hmbkalcFeaiz:njjjbhoadci2gDceaDce0EhqcbhxindnaoaeRbbgkfgwRbbgDcFe9hmbawax86bbaocjdfaxcdtfabakcdtfydbBdbaxhDaxcefhxkaeaD86bbaecefheaqcufgqmbkaxcdthDxekcbhDkabalcjdfaDz:mjjjb8Aalcjxf8Kjjjjbk9teiucbcbyd11jjbgeabcifc98GfgbBd11jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik;LeeeudndnaeabVciGTmbabhixekdndnadcz9pmbabhixekabhiinaiaeydbBdbaiclfaeclfydbBdbaicwfaecwfydbBdbaicxfaecxfydbBdbaeczfheaiczfhiadc9Wfgdcs0mbkkadcl6mbinaiaeydbBdbaeclfheaiclfhiadc98fgdci0mbkkdnadTmbinaiaeRbb86bbaicefhiaecefheadcufgdmbkkabk;aeedudndnabciGTmbabhixekaecFeGc:b:c:ew2hldndnadcz9pmbabhixekabhiinaialBdbaicxfalBdbaicwfalBdbaiclfalBdbaiczfhiadc9Wfgdcs0mbkkadcl6mbinaialBdbaiclfhiadc98fgdci0mbkkdnadTmbinaiae86bbaicefhiadcufgdmbkkabk9teiucbcbyd11jjbgeabcrfc94GfgbBd11jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik9:eiuZbhedndncbyd11jjbgdaecztgi9nmbcuheadai9RcFFifcz4nbcuSmekadhekcbabae9Rcifc98Gcbyd11jjbfgdBd11jjbdnadZbcztge9nmbadae9RcFFifcz4nb8Akk:;Deludndndnadch9pmbabaeSmdaeabadfgi9Rcbadcet9R0mekabaead;8qbbxekaeab7ciGhldndndnabae9pmbdnalTmbadhvabhixikdnabciGmbadhvabhixdkadTmiabaeRbb86bbadcufhvdnabcefgiciGmbaecefhexdkavTmiabaeRbe86beadc9:fhvdnabcdfgiciGmbaecdfhexdkavTmiabaeRbd86bdadc99fhvdnabcifgiciGmbaecifhexdkavTmiabaeRbi86biabclfhiaeclfheadc98fhvxekdnalmbdnaiciGTmbadTmlabadcufgifglaeaifRbb86bbdnalciGmbaihdxekaiTmlabadc9:fgifglaeaifRbb86bbdnalciGmbaihdxekaiTmlabadc99fgifglaeaifRbb86bbdnalciGmbaihdxekaiTmlabadc98fgdfaeadfRbb86bbkadcl6mbdnadc98fgocd4cefciGgiTmbaec98fhlabc98fhvinavadfaladfydbBdbadc98fhdaicufgimbkkaocx6mbaec9Wfhvabc9WfhoinaoadfgicxfavadfglcxfydbBdbaicwfalcwfydbBdbaiclfalclfydbBdbaialydbBdbadc9Wfgdci0mbkkadTmdadhidnadciGglTmbaecufhvabcufhoadhiinaoaifavaifRbb86bbaicufhialcufglmbkkadcl6mdaec98fhlabc98fhvinavaifgecifalaifgdcifRbb86bbaecdfadcdfRbb86bbaecefadcefRbb86bbaeadRbb86bbaic98fgimbxikkavcl6mbdnavc98fglcd4cefcrGgdTmbavadcdt9RhvinaiaeydbBdbaeclfheaiclfhiadcufgdmbkkalc36mbinaiaeydbBdbaiaeydlBdlaiaeydwBdwaiaeydxBdxaiaeydzBdzaiaeydCBdCaiaeydKBdKaiaeyd3Bd3aecafheaicafhiavc9Gfgvci0mbkkavTmbdndnavcrGgdmbavhlxekavc94GhlinaiaeRbb86bbaicefhiaecefheadcufgdmbkkavcw6mbinaiaeRbb86bbaiaeRbe86beaiaeRbd86bdaiaeRbi86biaiaeRbl86blaiaeRbv86bvaiaeRbo86boaiaeRbr86braicwfhiaecwfhealc94fglmbkkabkkAebcjwkxebbbdbbbzNbb'; // embed! wasm\n\n  var wasmpack = new Uint8Array([32, 0, 65, 2, 1, 106, 34, 33, 3, 128, 11, 4, 13, 64, 6, 253, 10, 7, 15, 116, 127, 5, 8, 12, 40, 16, 19, 54, 20, 9, 27, 255, 113, 17, 42, 67, 24, 23, 146, 148, 18, 14, 22, 45, 70, 69, 56, 114, 101, 21, 25, 63, 75, 136, 108, 28, 118, 29, 73, 115]);\n  if (typeof WebAssembly !== 'object') {\n    return {\n      supported: false\n    };\n  }\n  var instance;\n  var ready = WebAssembly.instantiate(unpack(wasm), {}).then(function (result) {\n    instance = result.instance;\n    instance.exports.__wasm_call_ctors();\n  });\n  function unpack(data) {\n    var result = new Uint8Array(data.length);\n    for (var i = 0; i < data.length; ++i) {\n      var ch = data.charCodeAt(i);\n      result[i] = ch > 96 ? ch - 97 : ch > 64 ? ch - 39 : ch + 4;\n    }\n    var write = 0;\n    for (var i = 0; i < data.length; ++i) {\n      result[write++] = result[i] < 60 ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];\n    }\n    return result.buffer.slice(0, write);\n  }\n  function assert(cond) {\n    if (!cond) {\n      throw new Error('Assertion failed');\n    }\n  }\n  function bytes(view) {\n    return new Uint8Array(view.buffer, view.byteOffset, view.byteLength);\n  }\n  var BOUNDS_SIZE = 48;\n  var MESHLET_SIZE = 16;\n  function extractMeshlet(buffers, index) {\n    var vertex_offset = buffers.meshlets[index * 4 + 0];\n    var triangle_offset = buffers.meshlets[index * 4 + 1];\n    var vertex_count = buffers.meshlets[index * 4 + 2];\n    var triangle_count = buffers.meshlets[index * 4 + 3];\n    return {\n      vertices: buffers.vertices.subarray(vertex_offset, vertex_offset + vertex_count),\n      triangles: buffers.triangles.subarray(triangle_offset, triangle_offset + triangle_count * 3)\n    };\n  }\n  function buildMeshlets(indices, vertex_positions, vertex_count, vertex_positions_stride, max_vertices, max_triangles, cone_weight) {\n    var sbrk = instance.exports.sbrk;\n    var max_meshlets = instance.exports.meshopt_buildMeshletsBound(indices.length, max_vertices, max_triangles);\n\n    // allocate memory\n    var meshletsp = sbrk(max_meshlets * MESHLET_SIZE);\n    var meshlet_verticesp = sbrk(max_meshlets * max_vertices * 4);\n    var meshlet_trianglesp = sbrk(max_meshlets * max_triangles * 3);\n    var indicesp = sbrk(indices.byteLength);\n    var verticesp = sbrk(vertex_positions.byteLength);\n\n    // copy input data to wasm memory\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(bytes(indices), indicesp);\n    heap.set(bytes(vertex_positions), verticesp);\n    var count = instance.exports.meshopt_buildMeshlets(meshletsp, meshlet_verticesp, meshlet_trianglesp, indicesp, indices.length, verticesp, vertex_count, vertex_positions_stride, max_vertices, max_triangles, cone_weight);\n\n    // heap might (will?) have grown -> re-acquire\n    heap = new Uint8Array(instance.exports.memory.buffer);\n    var meshletBytes = heap.subarray(meshletsp, meshletsp + count * MESHLET_SIZE);\n    var meshlets = new Uint32Array(meshletBytes.buffer, meshletBytes.byteOffset, meshletBytes.byteLength / 4).slice();\n    for (var i = 0; i < count; ++i) {\n      var vertex_offset = meshlets[i * 4 + 0];\n      var triangle_offset = meshlets[i * 4 + 1];\n      var vertex_count = meshlets[i * 4 + 2];\n      var triangle_count = meshlets[i * 4 + 3];\n      instance.exports.meshopt_optimizeMeshlet(meshlet_verticesp + vertex_offset * 4, meshlet_trianglesp + triangle_offset, triangle_count, vertex_count);\n    }\n    var last_vertex_offset = meshlets[(count - 1) * 4 + 0];\n    var last_triangle_offset = meshlets[(count - 1) * 4 + 1];\n    var last_vertex_count = meshlets[(count - 1) * 4 + 2];\n    var last_triangle_count = meshlets[(count - 1) * 4 + 3];\n    var used_vertices = last_vertex_offset + last_vertex_count;\n    var used_triangles = last_triangle_offset + (last_triangle_count * 3 + 3 & ~3);\n    var result = {\n      meshlets: meshlets,\n      vertices: new Uint32Array(heap.buffer, meshlet_verticesp, used_vertices).slice(),\n      triangles: new Uint8Array(heap.buffer, meshlet_trianglesp, used_triangles * 3).slice(),\n      meshletCount: count\n    };\n\n    // reset memory\n    sbrk(meshletsp - sbrk(0));\n    return result;\n  }\n  function extractBounds(boundsp) {\n    var bounds_floats = new Float32Array(instance.exports.memory.buffer, boundsp, BOUNDS_SIZE / 4);\n\n    // see meshopt_Bounds in meshoptimizer.h for layout\n    return {\n      centerX: bounds_floats[0],\n      centerY: bounds_floats[1],\n      centerZ: bounds_floats[2],\n      radius: bounds_floats[3],\n      coneApexX: bounds_floats[4],\n      coneApexY: bounds_floats[5],\n      coneApexZ: bounds_floats[6],\n      coneAxisX: bounds_floats[7],\n      coneAxisY: bounds_floats[8],\n      coneAxisZ: bounds_floats[9],\n      coneCutoff: bounds_floats[10]\n    };\n  }\n  function computeMeshletBounds(buffers, vertex_positions, vertex_count, vertex_positions_stride) {\n    var sbrk = instance.exports.sbrk;\n    var results = [];\n\n    // allocate memory that's constant for all meshlets\n    var verticesp = sbrk(vertex_positions.byteLength);\n    var meshlet_verticesp = sbrk(buffers.vertices.byteLength);\n    var meshlet_trianglesp = sbrk(buffers.triangles.byteLength);\n    var resultp = sbrk(BOUNDS_SIZE);\n\n    // copy vertices to wasm memory\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(bytes(vertex_positions), verticesp);\n    heap.set(bytes(buffers.vertices), meshlet_verticesp);\n    heap.set(bytes(buffers.triangles), meshlet_trianglesp);\n    for (var i = 0; i < buffers.meshletCount; ++i) {\n      var vertex_offset = buffers.meshlets[i * 4 + 0];\n      var triangle_offset = buffers.meshlets[i * 4 + 0 + 1];\n      var triangle_count = buffers.meshlets[i * 4 + 0 + 3];\n      instance.exports.meshopt_computeMeshletBounds(resultp, meshlet_verticesp + vertex_offset * 4, meshlet_trianglesp + triangle_offset, triangle_count, verticesp, vertex_count, vertex_positions_stride);\n      results.push(extractBounds(resultp));\n    }\n\n    // reset memory\n    sbrk(verticesp - sbrk(0));\n    return results;\n  }\n  function computeClusterBounds(indices, vertex_positions, vertex_count, vertex_positions_stride) {\n    var sbrk = instance.exports.sbrk;\n\n    // allocate memory\n    var resultp = sbrk(BOUNDS_SIZE);\n    var indicesp = sbrk(indices.byteLength);\n    var verticesp = sbrk(vertex_positions.byteLength);\n\n    // copy input data to wasm memory\n    var heap = new Uint8Array(instance.exports.memory.buffer);\n    heap.set(bytes(indices), indicesp);\n    heap.set(bytes(vertex_positions), verticesp);\n    instance.exports.meshopt_computeClusterBounds(resultp, indicesp, indices.length, verticesp, vertex_count, vertex_positions_stride);\n    var result = extractBounds(resultp);\n\n    // reset memory\n    sbrk(resultp - sbrk(0));\n    return result;\n  }\n  return {\n    ready: ready,\n    supported: true,\n    buildMeshlets: function (indices, vertex_positions, vertex_positions_stride, max_vertices, max_triangles, cone_weight) {\n      assert(indices.length % 3 == 0);\n      assert(vertex_positions instanceof Float32Array);\n      assert(vertex_positions.length % vertex_positions_stride == 0);\n      assert(vertex_positions_stride >= 3);\n      assert(max_vertices <= 255 || max_vertices > 0);\n      assert(max_triangles <= 512);\n      assert(max_triangles % 4 == 0);\n      cone_weight = cone_weight || 0.0;\n      var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);\n      return buildMeshlets(indices32, vertex_positions, vertex_positions.length / vertex_positions_stride, vertex_positions_stride * 4, max_vertices, max_triangles, cone_weight);\n    },\n    computeClusterBounds: function (indices, vertex_positions, vertex_positions_stride) {\n      assert(indices.length % 3 == 0);\n      assert(indices.length / 3 <= 512);\n      assert(vertex_positions instanceof Float32Array);\n      assert(vertex_positions.length % vertex_positions_stride == 0);\n      assert(vertex_positions_stride >= 3);\n      var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);\n      return computeClusterBounds(indices32, vertex_positions, vertex_positions.length / vertex_positions_stride, vertex_positions_stride * 4);\n    },\n    computeMeshletBounds: function (buffers, vertex_positions, vertex_positions_stride) {\n      assert(buffers.meshletCount != 0);\n      assert(vertex_positions instanceof Float32Array);\n      assert(vertex_positions.length % vertex_positions_stride == 0);\n      assert(vertex_positions_stride >= 3);\n      return computeMeshletBounds(buffers, vertex_positions, vertex_positions.length / vertex_positions_stride, vertex_positions_stride * 4);\n    },\n    extractMeshlet: function (buffers, index) {\n      assert(index >= 0 && index < buffers.meshletCount);\n      return extractMeshlet(buffers, index);\n    }\n  };\n}();\nexport { MeshoptClusterizer };","map":{"version":3,"names":["MeshoptClusterizer","wasm","wasmpack","Uint8Array","WebAssembly","supported","instance","ready","instantiate","unpack","then","result","exports","__wasm_call_ctors","data","length","i","ch","charCodeAt","write","buffer","slice","assert","cond","Error","bytes","view","byteOffset","byteLength","BOUNDS_SIZE","MESHLET_SIZE","extractMeshlet","buffers","index","vertex_offset","meshlets","triangle_offset","vertex_count","triangle_count","vertices","subarray","triangles","buildMeshlets","indices","vertex_positions","vertex_positions_stride","max_vertices","max_triangles","cone_weight","sbrk","max_meshlets","meshopt_buildMeshletsBound","meshletsp","meshlet_verticesp","meshlet_trianglesp","indicesp","verticesp","heap","memory","set","count","meshopt_buildMeshlets","meshletBytes","Uint32Array","meshopt_optimizeMeshlet","last_vertex_offset","last_triangle_offset","last_vertex_count","last_triangle_count","used_vertices","used_triangles","meshletCount","extractBounds","boundsp","bounds_floats","Float32Array","centerX","centerY","centerZ","radius","coneApexX","coneApexY","coneApexZ","coneAxisX","coneAxisY","coneAxisZ","coneCutoff","computeMeshletBounds","results","resultp","meshopt_computeMeshletBounds","push","computeClusterBounds","meshopt_computeClusterBounds","indices32","BYTES_PER_ELEMENT"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/meshoptimizer/meshopt_clusterizer.module.js"],"sourcesContent":["// This file is part of meshoptimizer library and is distributed under the terms of MIT License.\n// Copyright (C) 2016-2024, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)\nvar MeshoptClusterizer = (function () {\n\t// Built with clang version 18.1.2\n\t// Built from meshoptimizer 0.22\n\tvar wasm =\n\t\t'b9H79Tebbbefx9Geueu9Geub9Gbb9Giuuueu9Gkuuuuuuuuuu99eu9Gvuuuuueu9Gkuuuuuuuuu9999eu9Gruuuuuuub9Gkuuuuuuuuuuueu9Gouuuuuub9Giuuub9GluuuubiOHdilvorwDqrkbiibeilve9Weiiviebeoweuec:q:Odkr:Yewo9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bb8A9TW79O9V9Wt9F9I919P29K9nW79O2Wt79c9V919U9KbeX9TW79O9V9Wt9F9I919P29K9nW79O2Wt7bd39TW79O9V9Wt9F9J9V9T9W91tWJ2917tWV9c9V919U9K7br39TW79O9V9Wt9F9J9V9T9W91tW9nW79O2Wt9c9V919U9K7bDL9TW79O9V9Wt9F9V9Wt9P9T9P96W9nW79O2Wtbql79IV9RbkDwebcekdsPq;L9kHdbkIbabaec9:fgefcufae9Ugeabci9Uadfcufad9Ugbaeab0Ek:oAlPue99eux998Jjjjjbc:We9Rgk8Kjjjjbakc;mbfcbc;Kbz:njjjb8AakcuaocdtgxaocFFFFi0Egmcbyd:e1jjbHjjjjbbgPBd9makceBd:SeakaPBdnakamcbyd:e1jjbHjjjjbbgsBd9qakcdBd:SeakasBd9eakcualcdtalcFFFFi0Ecbyd:e1jjbHjjjjbbgzBd9uakazBd9iakciBd:SeaPcbaxz:njjjbhHalci9UhOdnalTmbaihPalhAinaHaPydbcdtfgCaCydbcefBdbaPclfhPaAcufgAmbkkdnaoTmbcbhPashAaHhCaohXinaAaPBdbaAclfhAaCydbaPfhPaCclfhCaXcufgXmbkkdnalci6mbcbhPaihAinaAcwfydbhCaAclfydbhXasaAydbcdtfgQaQydbgQcefBdbazaQcdtfaPBdbasaXcdtfgXaXydbgXcefBdbazaXcdtfaPBdbasaCcdtfgCaCydbgCcefBdbazaCcdtfaPBdbaAcxfhAaOaPcefgP9hmbkkdnaoTmbaHhAashPaohCinaPaPydbaAydb9RBdbaAclfhAaPclfhPaCcufgCmbkkakamcbyd:e1jjbHjjjjbbgPBd9yakclBd:SeaPaHaxz:mjjjbhmakaOcbyd:e1jjbHjjjjbbgPBd9CakcvBd:SeaPcbaOz:njjjbhLakcuaOcK2alcjjjjd0Ecbyd:e1jjbHjjjjbbgKBd9GakcoBd:SeJbbbbhYdnalci6g8Ambarcd4hxaihAaKhPaOhrJbbbbhEinavaAclfydbax2cdtfgCIdlh3avaAydbax2cdtfgXIdlhYavaAcwfydbax2cdtfgQIdlh5aCIdwh8EaXIdwh8FaQIdwhaaPaCIdbghaXIdbggMaQIdbg8JMJbbnn:vUdbaPclfaXIdlaCIdlMaQIdlMJbbnn:vUdbaQIdwh8KaCIdwh8LaXIdwh8MaPcxfa3aY:tg3aaa8F:tgaNa5aY:tg5a8Ea8F:tg8EN:tgYJbbbbJbbjZahag:tgha5Na8Jag:tgga3N:tg8Fa8FNaYaYNa8EagNaaahN:tgYaYNMM:rgg:vagJbbbb9BEg3NUdbaPczfaYa3NUdbaPcCfa8Fa3NUdbaPcwfa8Ka8Ma8LMMJbbnn:vUdbaEagMhEaAcxfhAaPcKfhParcufgrmbkaEaO:Z:vJbbbZNhYkakcuaOcdtalcFFFF970Ecbyd:e1jjbHjjjjbbgCBd9KakcrBd:SeaYaD:ZN:rhYdna8AmbcbhPaChAinaAaPBdbaAclfhAaOaPcefgP9hmbkkaYJbbbZNh8MakcuaOcltalcFFFFd0Ecbyd:e1jjbHjjjjbbg8ABd9OakcwBd:Secba8AaKaCaOz:djjjb8Aakaocbyd:e1jjbHjjjjbbgPBd2aPcFeaoz:njjjbhrakc8Wfcwf9cb83ibak9cb83i8WcbhPJbbbbhEJbbbbh5Jbbbbh8EJbbbbhYJbbbbh8FJbbbbhgcbhlinJbbbbh3dnaPTmbJbbjZaP:Z:vh3kaka8Ea3NgaUdaaka5a3NghUd3akaEa3Ng8JUdKJbbbbh3dnagagNaYaYNa8Fa8FNMMg8KJbbbb9BmbJbbjZa8K:r:vh3kakaga3NUd8Saka8Fa3NUdyakaYa3NUd8Kdndndnakyd8WgQakydUgAakcKfaeaiakc;abfaKamara8Maqz:ejjjbgCcuSmbdnaPaD9pmbaAaraiaCcx2fgXydbfRbbcFeSfaraXclfydbfRbbcFeSfaraXcwfydbfRbbcFeSfaw9nmdkaQaAcbaeaiakc;abfaKamara8MJbbbbz:ejjjbgCcu9hmekakaaUdCakahUdzaka8JUdxakcuBdwakcFFF;7rBdla8AcbaKaLakcxfakcwfakclfz:fjjjbakydwgCcuSmekdnakc8WfaiaCcx2fgOydbgPaOclfydbgAaOcwfydbgXarabaeadalawaDz:gjjjbTmbalcefhlJbbbbhEJbbbbh5Jbbbbh8EJbbbbhYJbbbbh8FJbbbbhgkamaPcdtfgPaPydbcufBdbamaAcdtfgPaPydbcufBdbamaXcdtfgPaPydbcufBdbcbhXinazasaOaXcdtfydbcdtgAfydbcdtfgxhPaHaAfgvydbgQhAdnaQTmbdninaPydbaCSmeaPclfhPaAcufgATmdxbkkaPaxaQcdtfc98fydbBdbavavydbcufBdbkaXcefgXci9hmbkaKaCcK2fgPIdbh3aPIdlhaaPIdwhhaPIdxh8JaPIdzh8KaPIdCh8LaLaCfce86bbaga8LMhga8Fa8KMh8FaYa8JMhYa8EahMh8Ea5aaMh5aEa3MhEakyd88hPxekkdnaPTmbdnakyd80gAaPci2fgCciGTmbadaCfcbaPaAcu7fciGcefz:njjjb8AkabalcltfgPak8Pi8W83dbaPcwfakc8Wfcwf8Pib83dbalcefhlkcahPdninaPc98Smeakc;mbfaPfydbcbydj1jjbH:bjjjbbaPc98fhPxbkkakc:Wef8Kjjjjbalk;3vivuv99lu8Jjjjjbca9Rgv8Kjjjjbdndnalcw0mbaiydbhoaeabcitfgralcdtcufBdlaraoBdbdnalcd6mbaiclfhoalcufhwarcxfhrinaoydbhDarcuBdbarc98faDBdbarcwfhraoclfhoawcufgwmbkkalabfhrxekcbhDavczfcwfcbBdbav9cb83izavcwfcbBdbav9cb83ibJbbjZhqJbbjZhkinadaiaDcdtfydbcK2fhwcbhrinavczfarfgoawarfIdbgxaoIdbgm:tgPakNamMgmUdbavarfgoaPaxam:tNaoIdbMUdbarclfgrcx9hmbkJbbjZaqJbbjZMgq:vhkaDcefgDal9hmbkcbhoadcbcecdavIdlgxavIdwgm9GEgravIdbgPam9GEaraPax9GEgscdtgrfhzavczfarfIdbhxaihralhwinaiaocdtfgDydbhHaDarydbgOBdbaraHBdbarclfhraoazaOcK2fIdbax9Dfhoawcufgwmbkaeabcitfhrdndnaocv6mbaoalc98f6mekaraiydbBdbaralcdtcufBdlaiclfhoalcufhwarcxfhrinaoydbhDarcuBdbarc98faDBdbarcwfhraoclfhoawcufgwmbkalabfhrxekaraxUdbaeabcitfgrarydlc98GasVBdlabcefaeadaiaoz:djjjbhwararydlciGawabcu7fcdtVBdlawaeadaiaocdtfalao9Rz:djjjbhrkavcaf8Kjjjjbark;Bloeue99vue99Due99dndnaembcuhkxekJbbjZaq:thxaiabcdtfhmavydbhPavydlhsavydwhzcbhHJFFuuhOcvhbcuhkindnaPamaHcdtfydbcdtgvfydbgATmbazasavfydbcdtfhiindndnawalaiydbgCcx2fgvclfydbgXfRbbcFeSawavydbgQfRbbcFeSfawavcwfydbgLfRbbcFeSfgKmbcbhvxekcehvaraQcdtfydbgYceSmbcehvaraXcdtfydbg8AceSmbcehvaraLcdtfydbgEceSmbdna8AcdSaYcdSfaEcdSfcd6mbaKcefhvxekaKcdfhvkdnavab9kmbdndnadTmbaoaCcK2fgQIdwadIdw:tg3a3NaQIdbadIdb:tg3a3NaQIdladIdl:tg3a3NMM:raD:vaxNJbbjZMJ9VO:d86JbbjZaQIdCadIdCNaQIdxadIdxNaQIdzadIdzNMMaqN:tg3a3J9VO:d869DENh3xekaraQcdtfydbaraXcdtfydbfaraLcdtfydbfc99f:Zh3kaCakavab6a3aO9DVgQEhkavabaQEhba3aOaQEhOkaiclfhiaAcufgAmbkkaHcefgHae9hmbkkakk;bddlue99dndndnabaecitfgrydlgwciGgDci9hmbarclfhqxekinabcbawcd4gwalaDcdtfIdbabaecitfIdb:tgkJbbbb9FEgDaecefgefadaialavaoz:fjjjbak:laoIdb9FTmdabaDaw7aefgecitfgrydlgwciGgDci9hmbkarclfhqkabaecitfhecuhbindnaiaeydbgDfRbbmbadaDcK2fgrIdwalIdw:tgkakNarIdbalIdb:tgkakNarIdlalIdl:tgkakNMM:rgkaoIdb9DTmbaoakUdbavaDBdbaqydbhwkaecwfheabcefgbawcd46mbkkk;yleoudnaladfgkRbbcFeSalaefgxRbbgmcFeSfabydwgPfalaifgsRbbcFeSfaD0abydxaq9pVgzce9hmbavawcltfgmab8Pdb83dbamcwfabcwfgm8Pdb83dbdndnamydbmbcbhqxekcbhDaohminalamabydbcdtfydbfcFe86bbamclfhmaDcefgDabydwgq6mbkkdnabydxglci2gDabydlgmfgPciGTmbaraPfcbalamcu7fciGcefz:njjjb8Aabydxci2hDabydlhmabydwhqkab9cb83dwababydbaqfBdbabaDcifc98GamfBdlaxRbbhmcbhPkdnamcFeGcFe9hmbaxaP86bbababydwgmcefBdwaoabydbcdtfamcdtfaeBdbkdnakRbbcFe9hmbakabydw86bbababydwgmcefBdwaoabydbcdtfamcdtfadBdbkdnasRbbcFe9hmbasabydw86bbababydwgmcefBdwaoabydbcdtfamcdtfaiBdbkarabydlfabydxci2faxRbb86bbarabydlfabydxci2fcefakRbb86bbarabydlfabydxci2fcdfasRbb86bbababydxcefBdxazk;Ckovud99euv99eul998Jjjjjbc:G;ae9Rgo8KjjjjbdndnadTmbavcd4hrcbhwcbhDindnaiaeclfydbar2cdtfgvIdbaiaeydbar2cdtfgqIdbgk:tgxaiaecwfydbar2cdtfgmIdlaqIdlgP:tgsNamIdbak:tgzavIdlaP:tgPN:tgkakNaPamIdwaqIdwgH:tgONasavIdwaH:tgHN:tgPaPNaHazNaOaxN:tgxaxNMM:rgsJbbbb9Bmbaoc:G:qefawcx2fgAakas:vUdwaAaxas:vUdlaAaPas:vUdbaocafawc8K2fgAaq8Pdb83dbaAav8Pdb83dxaAam8Pdb83dKaAcwfaqcwfydbBdbaAcCfavcwfydbBdbaAcafamcwfydbBdbawcefhwkaecxfheaDcifgDad6mbkab9cb83dbabcyf9cb83dbabcaf9cb83dbabcKf9cb83dbabczf9cb83dbabcwf9cb83dbawTmeao9cb83iKao9cb83izaoczfaocafawci2z1jjjbaoIdKhCaoIdChXaoIdzhQao9cb83iwao9cb83ibaoaoc:G:qefawz1jjjbJbbjZhkaoIdwgPJbbbbJbbjZaPaPNaoIdbgPaPNaoIdlgsasNMM:rgx:vaxJbbbb9BEgzNhxasazNhsaPazNhzaoc:G:qefheawhvinaecwfIdbaxNaeIdbazNasaeclfIdbNMMgPakaPak9DEhkaecxfheavcufgvmbkabaCUdwabaXUdlabaQUdbabaoId3UdxdndnakJ;n;m;m899FmbJbbbbhPaoc:G:qefheaocafhvinaCavcwfIdb:taecwfIdbgHNaQavIdb:taeIdbgONaXavclfIdb:taeclfIdbgLNMMaxaHNazaONasaLNMM:vgHaPaHaP9EEhPavc8KfhvaecxfheawcufgwmbkabazUd3abc8KfaxUdbabcafasUdbabcKfaCaxaPN:tUdbabcCfaXasaPN:tUdbabaQazaPN:tUdzabJbbjZakakN:t:rgkUdydndnaxJbbj:;axJbbj:;9GEgPJbbjZaPJbbjZ9FEJbb;:9cNJbbbZJbbb:;axJbbbb9GEMgP:lJbbb9p9DTmbaP:Ohexekcjjjj94hekabc8Ufae86bbdndnasJbbj:;asJbbj:;9GEgPJbbjZaPJbbjZ9FEJbb;:9cNJbbbZJbbb:;asJbbbb9GEMgP:lJbbb9p9DTmbaP:Ohvxekcjjjj94hvkabcRfav86bbdndnazJbbj:;azJbbj:;9GEgPJbbjZaPJbbjZ9FEJbb;:9cNJbbbZJbbb:;azJbbbb9GEMgP:lJbbb9p9DTmbaP:Ohqxekcjjjj94hqkabaq86b8SdndnaecKtcK91:YJbb;:9c:vax:t:lavcKtcK91:YJbb;:9c:vas:t:laqcKtcK91:YJbb;:9c:vaz:t:lakMMMJbb;:9cNJbbjZMgk:lJbbb9p9DTmbak:Ohexekcjjjj94hekaecFbaecFb9iEhexekabcjjj;8iBdycFbhekabae86b8Vxekab9cb83dbabcyf9cb83dbabcaf9cb83dbabcKf9cb83dbabczf9cb83dbabcwf9cb83dbkaoc:G;aef8Kjjjjbk:mvdouq99cbhi8Jjjjjbca9RglczfcwfcbBdbal9cb83izalcwfcbBdbal9cb83ibdnadTmbcbhvinaeaifhocbhrinalczfarfgwavawydbgwaoarfIdbgDaearawcx2ffIdb9DEBdbalarfgwavawydbgwaDaearawcx2ffIdb9EEBdbarclfgrcx9hmbkaicxfhiavcefgvad9hmbkkJbbbbhDcbhrcbhicbhvinaealarfydbcx2fgwIdwaealczfarfydbcx2fgoIdw:tgqaqNawIdbaoIdb:tgqaqNawIdlaoIdl:tgqaqNMMgqaDaqaD9EgwEhDavaiawEhiarclfhravcefgvci9hmbkaealczfaicdtgvfydbcx2fgrIdwaealavfydbcx2fglIdwMJbbbZNhqarIdlalIdlMJbbbZNhkarIdbalIdbMJbbbZNhxaD:rJbbbZNhDdnadTmbindnaecwfIdbgmaq:tgPaPNaeIdbgsax:tgPaPNaeclfIdbgzak:tgPaPNMMgPaDaDN9ETmbaqaDaP:rgH:vJbbbZNJbbbZMgPNamJbbjZaP:tgONMhqakaPNazaONMhkaxaPNasaONMhxaDaHMJbbbZNhDkaecxfheadcufgdmbkkabaDUdxabaqUdwabakUdlabaxUdbkjeeiu8Jjjjjbcj8W9Rgr8Kjjjjbaici2hwdnaiTmbawceawce0EhDarhiinaiaeadRbbcdtfydbBdbadcefhdaiclfhiaDcufgDmbkkabarawaladaoz:hjjjbarcj8Wf8Kjjjjbk:Ylequ8Jjjjjbcjx9Rgl8Kjjjjbcbhvalcjqfcbaiz:njjjb8AdndnadTmbcjehoaehrincuhwarhDcuhqavhkdninawakaoalcjqfaDcefRbbfRbb9RcFeGci6aoalcjqfaDRbbfRbb9RcFeGci6faoalcjqfaDcdfRbbfRbb9RcFeGci6fgxaq9mgmEhwdnammbaxce0mdkaxaqaxaq9kEhqaDcifhDadakcefgk9hmbkkaeawci2fgDcdfRbbhqaDcefRbbhxaDRbbhkaeavci2fgDcifaDawav9Rci2z:qjjjb8Aakalcjqffaocefgo86bbaxalcjqffao86bbaDcdfaq86bbaDcefax86bbaDak86bbaqalcjqffao86bbarcifhravcefgvad9hmbkalcFeaiz:njjjbhoadci2gDceaDce0EhqcbhxindnaoaeRbbgkfgwRbbgDcFe9hmbawax86bbaocjdfaxcdtfabakcdtfydbBdbaxhDaxcefhxkaeaD86bbaecefheaqcufgqmbkaxcdthDxekcbhDkabalcjdfaDz:mjjjb8Aalcjxf8Kjjjjbk9teiucbcbyd11jjbgeabcifc98GfgbBd11jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik;LeeeudndnaeabVciGTmbabhixekdndnadcz9pmbabhixekabhiinaiaeydbBdbaiclfaeclfydbBdbaicwfaecwfydbBdbaicxfaecxfydbBdbaeczfheaiczfhiadc9Wfgdcs0mbkkadcl6mbinaiaeydbBdbaeclfheaiclfhiadc98fgdci0mbkkdnadTmbinaiaeRbb86bbaicefhiaecefheadcufgdmbkkabk;aeedudndnabciGTmbabhixekaecFeGc:b:c:ew2hldndnadcz9pmbabhixekabhiinaialBdbaicxfalBdbaicwfalBdbaiclfalBdbaiczfhiadc9Wfgdcs0mbkkadcl6mbinaialBdbaiclfhiadc98fgdci0mbkkdnadTmbinaiae86bbaicefhiadcufgdmbkkabk9teiucbcbyd11jjbgeabcrfc94GfgbBd11jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik9:eiuZbhedndncbyd11jjbgdaecztgi9nmbcuheadai9RcFFifcz4nbcuSmekadhekcbabae9Rcifc98Gcbyd11jjbfgdBd11jjbdnadZbcztge9nmbadae9RcFFifcz4nb8Akk:;Deludndndnadch9pmbabaeSmdaeabadfgi9Rcbadcet9R0mekabaead;8qbbxekaeab7ciGhldndndnabae9pmbdnalTmbadhvabhixikdnabciGmbadhvabhixdkadTmiabaeRbb86bbadcufhvdnabcefgiciGmbaecefhexdkavTmiabaeRbe86beadc9:fhvdnabcdfgiciGmbaecdfhexdkavTmiabaeRbd86bdadc99fhvdnabcifgiciGmbaecifhexdkavTmiabaeRbi86biabclfhiaeclfheadc98fhvxekdnalmbdnaiciGTmbadTmlabadcufgifglaeaifRbb86bbdnalciGmbaihdxekaiTmlabadc9:fgifglaeaifRbb86bbdnalciGmbaihdxekaiTmlabadc99fgifglaeaifRbb86bbdnalciGmbaihdxekaiTmlabadc98fgdfaeadfRbb86bbkadcl6mbdnadc98fgocd4cefciGgiTmbaec98fhlabc98fhvinavadfaladfydbBdbadc98fhdaicufgimbkkaocx6mbaec9Wfhvabc9WfhoinaoadfgicxfavadfglcxfydbBdbaicwfalcwfydbBdbaiclfalclfydbBdbaialydbBdbadc9Wfgdci0mbkkadTmdadhidnadciGglTmbaecufhvabcufhoadhiinaoaifavaifRbb86bbaicufhialcufglmbkkadcl6mdaec98fhlabc98fhvinavaifgecifalaifgdcifRbb86bbaecdfadcdfRbb86bbaecefadcefRbb86bbaeadRbb86bbaic98fgimbxikkavcl6mbdnavc98fglcd4cefcrGgdTmbavadcdt9RhvinaiaeydbBdbaeclfheaiclfhiadcufgdmbkkalc36mbinaiaeydbBdbaiaeydlBdlaiaeydwBdwaiaeydxBdxaiaeydzBdzaiaeydCBdCaiaeydKBdKaiaeyd3Bd3aecafheaicafhiavc9Gfgvci0mbkkavTmbdndnavcrGgdmbavhlxekavc94GhlinaiaeRbb86bbaicefhiaecefheadcufgdmbkkavcw6mbinaiaeRbb86bbaiaeRbe86beaiaeRbd86bdaiaeRbi86biaiaeRbl86blaiaeRbv86bvaiaeRbo86boaiaeRbr86braicwfhiaecwfhealc94fglmbkkabkkAebcjwkxebbbdbbbzNbb'; // embed! wasm\n\n\tvar wasmpack = new Uint8Array([\n\t\t32, 0, 65, 2, 1, 106, 34, 33, 3, 128, 11, 4, 13, 64, 6, 253, 10, 7, 15, 116, 127, 5, 8, 12, 40, 16, 19, 54, 20, 9, 27, 255, 113, 17, 42, 67,\n\t\t24, 23, 146, 148, 18, 14, 22, 45, 70, 69, 56, 114, 101, 21, 25, 63, 75, 136, 108, 28, 118, 29, 73, 115,\n\t]);\n\n\tif (typeof WebAssembly !== 'object') {\n\t\treturn {\n\t\t\tsupported: false,\n\t\t};\n\t}\n\n\tvar instance;\n\n\tvar ready = WebAssembly.instantiate(unpack(wasm), {}).then(function (result) {\n\t\tinstance = result.instance;\n\t\tinstance.exports.__wasm_call_ctors();\n\t});\n\n\tfunction unpack(data) {\n\t\tvar result = new Uint8Array(data.length);\n\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\tvar ch = data.charCodeAt(i);\n\t\t\tresult[i] = ch > 96 ? ch - 97 : ch > 64 ? ch - 39 : ch + 4;\n\t\t}\n\t\tvar write = 0;\n\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\tresult[write++] = result[i] < 60 ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];\n\t\t}\n\t\treturn result.buffer.slice(0, write);\n\t}\n\n\tfunction assert(cond) {\n\t\tif (!cond) {\n\t\t\tthrow new Error('Assertion failed');\n\t\t}\n\t}\n\n\tfunction bytes(view) {\n\t\treturn new Uint8Array(view.buffer, view.byteOffset, view.byteLength);\n\t}\n\n\tvar BOUNDS_SIZE = 48;\n\tvar MESHLET_SIZE = 16;\n\n\tfunction extractMeshlet(buffers, index) {\n\t\tvar vertex_offset = buffers.meshlets[index * 4 + 0];\n\t\tvar triangle_offset = buffers.meshlets[index * 4 + 1];\n\t\tvar vertex_count = buffers.meshlets[index * 4 + 2];\n\t\tvar triangle_count = buffers.meshlets[index * 4 + 3];\n\n\t\treturn {\n\t\t\tvertices: buffers.vertices.subarray(vertex_offset, vertex_offset + vertex_count),\n\t\t\ttriangles: buffers.triangles.subarray(triangle_offset, triangle_offset + triangle_count * 3),\n\t\t};\n\t}\n\n\tfunction buildMeshlets(indices, vertex_positions, vertex_count, vertex_positions_stride, max_vertices, max_triangles, cone_weight) {\n\t\tvar sbrk = instance.exports.sbrk;\n\t\tvar max_meshlets = instance.exports.meshopt_buildMeshletsBound(indices.length, max_vertices, max_triangles);\n\n\t\t// allocate memory\n\t\tvar meshletsp = sbrk(max_meshlets * MESHLET_SIZE);\n\t\tvar meshlet_verticesp = sbrk(max_meshlets * max_vertices * 4);\n\t\tvar meshlet_trianglesp = sbrk(max_meshlets * max_triangles * 3);\n\n\t\tvar indicesp = sbrk(indices.byteLength);\n\t\tvar verticesp = sbrk(vertex_positions.byteLength);\n\n\t\t// copy input data to wasm memory\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\theap.set(bytes(indices), indicesp);\n\t\theap.set(bytes(vertex_positions), verticesp);\n\n\t\tvar count = instance.exports.meshopt_buildMeshlets(\n\t\t\tmeshletsp,\n\t\t\tmeshlet_verticesp,\n\t\t\tmeshlet_trianglesp,\n\t\t\tindicesp,\n\t\t\tindices.length,\n\t\t\tverticesp,\n\t\t\tvertex_count,\n\t\t\tvertex_positions_stride,\n\t\t\tmax_vertices,\n\t\t\tmax_triangles,\n\t\t\tcone_weight\n\t\t);\n\n\t\t// heap might (will?) have grown -> re-acquire\n\t\theap = new Uint8Array(instance.exports.memory.buffer);\n\n\t\tvar meshletBytes = heap.subarray(meshletsp, meshletsp + count * MESHLET_SIZE);\n\t\tvar meshlets = new Uint32Array(meshletBytes.buffer, meshletBytes.byteOffset, meshletBytes.byteLength / 4).slice();\n\n\t\tfor (var i = 0; i < count; ++i) {\n\t\t\tvar vertex_offset = meshlets[i * 4 + 0];\n\t\t\tvar triangle_offset = meshlets[i * 4 + 1];\n\t\t\tvar vertex_count = meshlets[i * 4 + 2];\n\t\t\tvar triangle_count = meshlets[i * 4 + 3];\n\n\t\t\tinstance.exports.meshopt_optimizeMeshlet(\n\t\t\t\tmeshlet_verticesp + vertex_offset * 4,\n\t\t\t\tmeshlet_trianglesp + triangle_offset,\n\t\t\t\ttriangle_count,\n\t\t\t\tvertex_count\n\t\t\t);\n\t\t}\n\n\t\tvar last_vertex_offset = meshlets[(count - 1) * 4 + 0];\n\t\tvar last_triangle_offset = meshlets[(count - 1) * 4 + 1];\n\t\tvar last_vertex_count = meshlets[(count - 1) * 4 + 2];\n\t\tvar last_triangle_count = meshlets[(count - 1) * 4 + 3];\n\n\t\tvar used_vertices = last_vertex_offset + last_vertex_count;\n\t\tvar used_triangles = last_triangle_offset + ((last_triangle_count * 3 + 3) & ~3);\n\n\t\tvar result = {\n\t\t\tmeshlets: meshlets,\n\t\t\tvertices: new Uint32Array(heap.buffer, meshlet_verticesp, used_vertices).slice(),\n\t\t\ttriangles: new Uint8Array(heap.buffer, meshlet_trianglesp, used_triangles * 3).slice(),\n\t\t\tmeshletCount: count,\n\t\t};\n\n\t\t// reset memory\n\t\tsbrk(meshletsp - sbrk(0));\n\n\t\treturn result;\n\t}\n\n\tfunction extractBounds(boundsp) {\n\t\tvar bounds_floats = new Float32Array(instance.exports.memory.buffer, boundsp, BOUNDS_SIZE / 4);\n\n\t\t// see meshopt_Bounds in meshoptimizer.h for layout\n\t\treturn {\n\t\t\tcenterX: bounds_floats[0],\n\t\t\tcenterY: bounds_floats[1],\n\t\t\tcenterZ: bounds_floats[2],\n\t\t\tradius: bounds_floats[3],\n\t\t\tconeApexX: bounds_floats[4],\n\t\t\tconeApexY: bounds_floats[5],\n\t\t\tconeApexZ: bounds_floats[6],\n\t\t\tconeAxisX: bounds_floats[7],\n\t\t\tconeAxisY: bounds_floats[8],\n\t\t\tconeAxisZ: bounds_floats[9],\n\t\t\tconeCutoff: bounds_floats[10],\n\t\t};\n\t}\n\n\tfunction computeMeshletBounds(buffers, vertex_positions, vertex_count, vertex_positions_stride) {\n\t\tvar sbrk = instance.exports.sbrk;\n\n\t\tvar results = [];\n\n\t\t// allocate memory that's constant for all meshlets\n\t\tvar verticesp = sbrk(vertex_positions.byteLength);\n\t\tvar meshlet_verticesp = sbrk(buffers.vertices.byteLength);\n\t\tvar meshlet_trianglesp = sbrk(buffers.triangles.byteLength);\n\t\tvar resultp = sbrk(BOUNDS_SIZE);\n\n\t\t// copy vertices to wasm memory\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\theap.set(bytes(vertex_positions), verticesp);\n\t\theap.set(bytes(buffers.vertices), meshlet_verticesp);\n\t\theap.set(bytes(buffers.triangles), meshlet_trianglesp);\n\n\t\tfor (var i = 0; i < buffers.meshletCount; ++i) {\n\t\t\tvar vertex_offset = buffers.meshlets[i * 4 + 0];\n\t\t\tvar triangle_offset = buffers.meshlets[i * 4 + 0 + 1];\n\t\t\tvar triangle_count = buffers.meshlets[i * 4 + 0 + 3];\n\n\t\t\tinstance.exports.meshopt_computeMeshletBounds(\n\t\t\t\tresultp,\n\t\t\t\tmeshlet_verticesp + vertex_offset * 4,\n\t\t\t\tmeshlet_trianglesp + triangle_offset,\n\t\t\t\ttriangle_count,\n\t\t\t\tverticesp,\n\t\t\t\tvertex_count,\n\t\t\t\tvertex_positions_stride\n\t\t\t);\n\n\t\t\tresults.push(extractBounds(resultp));\n\t\t}\n\n\t\t// reset memory\n\t\tsbrk(verticesp - sbrk(0));\n\n\t\treturn results;\n\t}\n\n\tfunction computeClusterBounds(indices, vertex_positions, vertex_count, vertex_positions_stride) {\n\t\tvar sbrk = instance.exports.sbrk;\n\n\t\t// allocate memory\n\t\tvar resultp = sbrk(BOUNDS_SIZE);\n\t\tvar indicesp = sbrk(indices.byteLength);\n\t\tvar verticesp = sbrk(vertex_positions.byteLength);\n\n\t\t// copy input data to wasm memory\n\t\tvar heap = new Uint8Array(instance.exports.memory.buffer);\n\t\theap.set(bytes(indices), indicesp);\n\t\theap.set(bytes(vertex_positions), verticesp);\n\n\t\tinstance.exports.meshopt_computeClusterBounds(resultp, indicesp, indices.length, verticesp, vertex_count, vertex_positions_stride);\n\n\t\tvar result = extractBounds(resultp);\n\n\t\t// reset memory\n\t\tsbrk(resultp - sbrk(0));\n\n\t\treturn result;\n\t}\n\n\treturn {\n\t\tready: ready,\n\t\tsupported: true,\n\t\tbuildMeshlets: function (indices, vertex_positions, vertex_positions_stride, max_vertices, max_triangles, cone_weight) {\n\t\t\tassert(indices.length % 3 == 0);\n\t\t\tassert(vertex_positions instanceof Float32Array);\n\t\t\tassert(vertex_positions.length % vertex_positions_stride == 0);\n\t\t\tassert(vertex_positions_stride >= 3);\n\t\t\tassert(max_vertices <= 255 || max_vertices > 0);\n\t\t\tassert(max_triangles <= 512);\n\t\t\tassert(max_triangles % 4 == 0);\n\n\t\t\tcone_weight = cone_weight || 0.0;\n\n\t\t\tvar indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);\n\n\t\t\treturn buildMeshlets(\n\t\t\t\tindices32,\n\t\t\t\tvertex_positions,\n\t\t\t\tvertex_positions.length / vertex_positions_stride,\n\t\t\t\tvertex_positions_stride * 4,\n\t\t\t\tmax_vertices,\n\t\t\t\tmax_triangles,\n\t\t\t\tcone_weight\n\t\t\t);\n\t\t},\n\t\tcomputeClusterBounds: function (indices, vertex_positions, vertex_positions_stride) {\n\t\t\tassert(indices.length % 3 == 0);\n\t\t\tassert(indices.length / 3 <= 512);\n\t\t\tassert(vertex_positions instanceof Float32Array);\n\t\t\tassert(vertex_positions.length % vertex_positions_stride == 0);\n\t\t\tassert(vertex_positions_stride >= 3);\n\n\t\t\tvar indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);\n\n\t\t\treturn computeClusterBounds(indices32, vertex_positions, vertex_positions.length / vertex_positions_stride, vertex_positions_stride * 4);\n\t\t},\n\t\tcomputeMeshletBounds: function (buffers, vertex_positions, vertex_positions_stride) {\n\t\t\tassert(buffers.meshletCount != 0);\n\t\t\tassert(vertex_positions instanceof Float32Array);\n\t\t\tassert(vertex_positions.length % vertex_positions_stride == 0);\n\t\t\tassert(vertex_positions_stride >= 3);\n\n\t\t\treturn computeMeshletBounds(buffers, vertex_positions, vertex_positions.length / vertex_positions_stride, vertex_positions_stride * 4);\n\t\t},\n\t\textractMeshlet: function (buffers, index) {\n\t\t\tassert(index >= 0 && index < buffers.meshletCount);\n\n\t\t\treturn extractMeshlet(buffers, index);\n\t\t},\n\t};\n})();\n\nexport { MeshoptClusterizer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}