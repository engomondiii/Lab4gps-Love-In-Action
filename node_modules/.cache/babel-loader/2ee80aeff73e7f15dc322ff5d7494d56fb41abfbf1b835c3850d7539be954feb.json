{"ast":null,"code":"import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * The map projection used by Google Maps, Bing Maps, and most of ArcGIS Online, EPSG:3857.  This\n * projection use longitude and latitude expressed with the WGS84 and transforms them to Mercator using\n * the spherical (rather than ellipsoidal) equations.\n *\n * @alias WebMercatorProjection\n * @constructor\n *\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\n *\n * @see GeographicProjection\n */\nfunction WebMercatorProjection(ellipsoid) {\n  this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  this._semimajorAxis = this._ellipsoid.maximumRadius;\n  this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\n}\nObject.defineProperties(WebMercatorProjection.prototype, {\n  /**\n   * Gets the {@link Ellipsoid}.\n   *\n   * @memberof WebMercatorProjection.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    }\n  }\n});\n\n/**\n * Converts a Mercator angle, in the range -PI to PI, to a geodetic latitude\n * in the range -PI/2 to PI/2.\n *\n * @param {number} mercatorAngle The angle to convert.\n * @returns {number} The geodetic latitude in radians.\n */\nWebMercatorProjection.mercatorAngleToGeodeticLatitude = function (mercatorAngle) {\n  return CesiumMath.PI_OVER_TWO - 2.0 * Math.atan(Math.exp(-mercatorAngle));\n};\n\n/**\n * Converts a geodetic latitude in radians, in the range -PI/2 to PI/2, to a Mercator\n * angle in the range -PI to PI.\n *\n * @param {number} latitude The geodetic latitude in radians.\n * @returns {number} The Mercator angle.\n */\nWebMercatorProjection.geodeticLatitudeToMercatorAngle = function (latitude) {\n  // Clamp the latitude coordinate to the valid Mercator bounds.\n  if (latitude > WebMercatorProjection.MaximumLatitude) {\n    latitude = WebMercatorProjection.MaximumLatitude;\n  } else if (latitude < -WebMercatorProjection.MaximumLatitude) {\n    latitude = -WebMercatorProjection.MaximumLatitude;\n  }\n  const sinLatitude = Math.sin(latitude);\n  return 0.5 * Math.log((1.0 + sinLatitude) / (1.0 - sinLatitude));\n};\n\n/**\n * The maximum latitude (both North and South) supported by a Web Mercator\n * (EPSG:3857) projection.  Technically, the Mercator projection is defined\n * for any latitude up to (but not including) 90 degrees, but it makes sense\n * to cut it off sooner because it grows exponentially with increasing latitude.\n * The logic behind this particular cutoff value, which is the one used by\n * Google Maps, Bing Maps, and Esri, is that it makes the projection\n * square.  That is, the rectangle is equal in the X and Y directions.\n *\n * The constant value is computed by calling:\n *    WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI)\n *\n * @type {number}\n */\nWebMercatorProjection.MaximumLatitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI);\n\n/**\n * Converts geodetic ellipsoid coordinates, in radians, to the equivalent Web Mercator\n * X, Y, Z coordinates expressed in meters and returned in a {@link Cartesian3}.  The height\n * is copied unmodified to the Z coordinate.\n *\n * @param {Cartographic} cartographic The cartographic coordinates in radians.\n * @param {Cartesian3} [result] The instance to which to copy the result, or undefined if a\n *        new instance should be created.\n * @returns {Cartesian3} The equivalent web mercator X, Y, Z coordinates, in meters.\n */\nWebMercatorProjection.prototype.project = function (cartographic, result) {\n  const semimajorAxis = this._semimajorAxis;\n  const x = cartographic.longitude * semimajorAxis;\n  const y = WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographic.latitude) * semimajorAxis;\n  const z = cartographic.height;\n  if (!defined(result)) {\n    return new Cartesian3(x, y, z);\n  }\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Converts Web Mercator X, Y coordinates, expressed in meters, to a {@link Cartographic}\n * containing geodetic ellipsoid coordinates.  The Z coordinate is copied unmodified to the\n * height.\n *\n * @param {Cartesian3} cartesian The web mercator Cartesian position to unrproject with height (z) in meters.\n * @param {Cartographic} [result] The instance to which to copy the result, or undefined if a\n *        new instance should be created.\n * @returns {Cartographic} The equivalent cartographic coordinates.\n */\nWebMercatorProjection.prototype.unproject = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(cartesian)) {\n    throw new DeveloperError(\"cartesian is required\");\n  }\n  //>>includeEnd('debug');\n\n  const oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\n  const longitude = cartesian.x * oneOverEarthSemimajorAxis;\n  const latitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(cartesian.y * oneOverEarthSemimajorAxis);\n  const height = cartesian.z;\n  if (!defined(result)) {\n    return new Cartographic(longitude, latitude, height);\n  }\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\nexport default WebMercatorProjection;","map":{"version":3,"names":["Cartesian3","Cartographic","defaultValue","defined","DeveloperError","Ellipsoid","CesiumMath","WebMercatorProjection","ellipsoid","_ellipsoid","WGS84","_semimajorAxis","maximumRadius","_oneOverSemimajorAxis","Object","defineProperties","prototype","get","mercatorAngleToGeodeticLatitude","mercatorAngle","PI_OVER_TWO","Math","atan","exp","geodeticLatitudeToMercatorAngle","latitude","MaximumLatitude","sinLatitude","sin","log","PI","project","cartographic","result","semimajorAxis","x","longitude","y","z","height","unproject","cartesian","oneOverEarthSemimajorAxis"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/WebMercatorProjection.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * The map projection used by Google Maps, Bing Maps, and most of ArcGIS Online, EPSG:3857.  This\n * projection use longitude and latitude expressed with the WGS84 and transforms them to Mercator using\n * the spherical (rather than ellipsoidal) equations.\n *\n * @alias WebMercatorProjection\n * @constructor\n *\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\n *\n * @see GeographicProjection\n */\nfunction WebMercatorProjection(ellipsoid) {\n  this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  this._semimajorAxis = this._ellipsoid.maximumRadius;\n  this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\n}\n\nObject.defineProperties(WebMercatorProjection.prototype, {\n  /**\n   * Gets the {@link Ellipsoid}.\n   *\n   * @memberof WebMercatorProjection.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n});\n\n/**\n * Converts a Mercator angle, in the range -PI to PI, to a geodetic latitude\n * in the range -PI/2 to PI/2.\n *\n * @param {number} mercatorAngle The angle to convert.\n * @returns {number} The geodetic latitude in radians.\n */\nWebMercatorProjection.mercatorAngleToGeodeticLatitude = function (\n  mercatorAngle,\n) {\n  return CesiumMath.PI_OVER_TWO - 2.0 * Math.atan(Math.exp(-mercatorAngle));\n};\n\n/**\n * Converts a geodetic latitude in radians, in the range -PI/2 to PI/2, to a Mercator\n * angle in the range -PI to PI.\n *\n * @param {number} latitude The geodetic latitude in radians.\n * @returns {number} The Mercator angle.\n */\nWebMercatorProjection.geodeticLatitudeToMercatorAngle = function (latitude) {\n  // Clamp the latitude coordinate to the valid Mercator bounds.\n  if (latitude > WebMercatorProjection.MaximumLatitude) {\n    latitude = WebMercatorProjection.MaximumLatitude;\n  } else if (latitude < -WebMercatorProjection.MaximumLatitude) {\n    latitude = -WebMercatorProjection.MaximumLatitude;\n  }\n  const sinLatitude = Math.sin(latitude);\n  return 0.5 * Math.log((1.0 + sinLatitude) / (1.0 - sinLatitude));\n};\n\n/**\n * The maximum latitude (both North and South) supported by a Web Mercator\n * (EPSG:3857) projection.  Technically, the Mercator projection is defined\n * for any latitude up to (but not including) 90 degrees, but it makes sense\n * to cut it off sooner because it grows exponentially with increasing latitude.\n * The logic behind this particular cutoff value, which is the one used by\n * Google Maps, Bing Maps, and Esri, is that it makes the projection\n * square.  That is, the rectangle is equal in the X and Y directions.\n *\n * The constant value is computed by calling:\n *    WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI)\n *\n * @type {number}\n */\nWebMercatorProjection.MaximumLatitude =\n  WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI);\n\n/**\n * Converts geodetic ellipsoid coordinates, in radians, to the equivalent Web Mercator\n * X, Y, Z coordinates expressed in meters and returned in a {@link Cartesian3}.  The height\n * is copied unmodified to the Z coordinate.\n *\n * @param {Cartographic} cartographic The cartographic coordinates in radians.\n * @param {Cartesian3} [result] The instance to which to copy the result, or undefined if a\n *        new instance should be created.\n * @returns {Cartesian3} The equivalent web mercator X, Y, Z coordinates, in meters.\n */\nWebMercatorProjection.prototype.project = function (cartographic, result) {\n  const semimajorAxis = this._semimajorAxis;\n  const x = cartographic.longitude * semimajorAxis;\n  const y =\n    WebMercatorProjection.geodeticLatitudeToMercatorAngle(\n      cartographic.latitude,\n    ) * semimajorAxis;\n  const z = cartographic.height;\n\n  if (!defined(result)) {\n    return new Cartesian3(x, y, z);\n  }\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Converts Web Mercator X, Y coordinates, expressed in meters, to a {@link Cartographic}\n * containing geodetic ellipsoid coordinates.  The Z coordinate is copied unmodified to the\n * height.\n *\n * @param {Cartesian3} cartesian The web mercator Cartesian position to unrproject with height (z) in meters.\n * @param {Cartographic} [result] The instance to which to copy the result, or undefined if a\n *        new instance should be created.\n * @returns {Cartographic} The equivalent cartographic coordinates.\n */\nWebMercatorProjection.prototype.unproject = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(cartesian)) {\n    throw new DeveloperError(\"cartesian is required\");\n  }\n  //>>includeEnd('debug');\n\n  const oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\n  const longitude = cartesian.x * oneOverEarthSemimajorAxis;\n  const latitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(\n    cartesian.y * oneOverEarthSemimajorAxis,\n  );\n  const height = cartesian.z;\n\n  if (!defined(result)) {\n    return new Cartographic(longitude, latitude, height);\n  }\n\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\nexport default WebMercatorProjection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}