{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport GroupMetadata from \"./GroupMetadata.js\";\nimport TilesetMetadata from \"./TilesetMetadata.js\";\n\n/**\n * An object containing metadata about a 3D Tileset.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles.\n * </p>\n * <p>\n * This object represents the tileset JSON (3D Tiles 1.1) or the <code>3DTILES_metadata</code> object that contains\n * the schema ({@link MetadataSchema}), tileset metadata ({@link TilesetMetadata}), group metadata (dictionary of {@link GroupMetadata}), and metadata statistics (dictionary)\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.metadataJson Either the tileset JSON (3D Tiles 1.1) or the <code>3DTILES_metadata</code> extension object that contains the tileset metadata.\n * @param {MetadataSchema} options.schema The parsed schema.\n *\n * @alias Cesium3DTilesetMetadata\n * @constructor\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction Cesium3DTilesetMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const metadataJson = options.metadataJson;\n\n  // The calling code is responsible for loading the schema.\n  // This keeps metadata parsing synchronous.\n  const schema = options.schema;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.metadataJson\", metadataJson);\n  Check.typeOf.object(\"options.schema\", schema);\n  //>>includeEnd('debug');\n\n  // An older schema stored the tileset metadata in the \"tileset\" property.\n  const metadata = defaultValue(metadataJson.metadata, metadataJson.tileset);\n  let tileset;\n  if (defined(metadata)) {\n    tileset = new TilesetMetadata({\n      tileset: metadata,\n      class: schema.classes[metadata.class]\n    });\n  }\n  let groupIds = [];\n  const groups = [];\n  const groupsJson = metadataJson.groups;\n  if (Array.isArray(groupsJson)) {\n    const length = groupsJson.length;\n    for (let i = 0; i < length; i++) {\n      const group = groupsJson[i];\n      groups.push(new GroupMetadata({\n        group: group,\n        class: schema.classes[group.class]\n      }));\n    }\n  } else if (defined(groupsJson)) {\n    // An older version of group metadata stored groups in a dictionary\n    // instead of an array.\n    groupIds = Object.keys(groupsJson).sort();\n    const length = groupIds.length;\n    for (let i = 0; i < length; i++) {\n      const groupId = groupIds[i];\n      if (groupsJson.hasOwnProperty(groupId)) {\n        const group = groupsJson[groupId];\n        groups.push(new GroupMetadata({\n          id: groupId,\n          group: groupsJson[groupId],\n          class: schema.classes[group.class]\n        }));\n      }\n    }\n  }\n  this._schema = schema;\n  this._groups = groups;\n  this._groupIds = groupIds;\n  this._tileset = tileset;\n  this._statistics = metadataJson.statistics;\n  this._extras = metadataJson.extras;\n  this._extensions = metadataJson.extensions;\n}\nObject.defineProperties(Cesium3DTilesetMetadata.prototype, {\n  /**\n   * Schema containing classes and enums.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {MetadataSchema}\n   * @readonly\n   * @private\n   */\n  schema: {\n    get: function () {\n      return this._schema;\n    }\n  },\n  /**\n   * Metadata about groups of content.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {GroupMetadata[]}\n   * @readonly\n   * @private\n   */\n  groups: {\n    get: function () {\n      return this._groups;\n    }\n  },\n  /**\n   * The IDs of the group metadata in the corresponding groups dictionary.\n   * Only populated if using the legacy schema.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {}\n   * @readonly\n   * @private\n   */\n  groupIds: {\n    get: function () {\n      return this._groupIds;\n    }\n  },\n  /**\n   * Metadata about the tileset as a whole.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {TilesetMetadata}\n   * @readonly\n   * @private\n   */\n  tileset: {\n    get: function () {\n      return this._tileset;\n    }\n  },\n  /**\n   * Statistics about the metadata.\n   * <p>\n   * See the {@link https://github.com/CesiumGS/3d-tiles/blob/main/extensions/3DTILES_metadata/schema/statistics.schema.json|statistics schema reference}\n   * in the 3D Tiles spec for the full set of properties.\n   * </p>\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  statistics: {\n    get: function () {\n      return this._statistics;\n    }\n  },\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    }\n  },\n  /**\n   * An object containing extensions.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  }\n});\nexport default Cesium3DTilesetMetadata;","map":{"version":3,"names":["Check","defaultValue","defined","GroupMetadata","TilesetMetadata","Cesium3DTilesetMetadata","options","EMPTY_OBJECT","metadataJson","schema","typeOf","object","metadata","tileset","class","classes","groupIds","groups","groupsJson","Array","isArray","length","i","group","push","Object","keys","sort","groupId","hasOwnProperty","id","_schema","_groups","_groupIds","_tileset","_statistics","statistics","_extras","extras","_extensions","extensions","defineProperties","prototype","get"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Cesium3DTilesetMetadata.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport GroupMetadata from \"./GroupMetadata.js\";\nimport TilesetMetadata from \"./TilesetMetadata.js\";\n\n/**\n * An object containing metadata about a 3D Tileset.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles.\n * </p>\n * <p>\n * This object represents the tileset JSON (3D Tiles 1.1) or the <code>3DTILES_metadata</code> object that contains\n * the schema ({@link MetadataSchema}), tileset metadata ({@link TilesetMetadata}), group metadata (dictionary of {@link GroupMetadata}), and metadata statistics (dictionary)\n * </p>\n *\n * @param {object} options Object with the following properties:\n * @param {object} options.metadataJson Either the tileset JSON (3D Tiles 1.1) or the <code>3DTILES_metadata</code> extension object that contains the tileset metadata.\n * @param {MetadataSchema} options.schema The parsed schema.\n *\n * @alias Cesium3DTilesetMetadata\n * @constructor\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction Cesium3DTilesetMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const metadataJson = options.metadataJson;\n\n  // The calling code is responsible for loading the schema.\n  // This keeps metadata parsing synchronous.\n  const schema = options.schema;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.metadataJson\", metadataJson);\n  Check.typeOf.object(\"options.schema\", schema);\n  //>>includeEnd('debug');\n\n  // An older schema stored the tileset metadata in the \"tileset\" property.\n  const metadata = defaultValue(metadataJson.metadata, metadataJson.tileset);\n\n  let tileset;\n  if (defined(metadata)) {\n    tileset = new TilesetMetadata({\n      tileset: metadata,\n      class: schema.classes[metadata.class],\n    });\n  }\n\n  let groupIds = [];\n  const groups = [];\n  const groupsJson = metadataJson.groups;\n  if (Array.isArray(groupsJson)) {\n    const length = groupsJson.length;\n    for (let i = 0; i < length; i++) {\n      const group = groupsJson[i];\n      groups.push(\n        new GroupMetadata({\n          group: group,\n          class: schema.classes[group.class],\n        }),\n      );\n    }\n  } else if (defined(groupsJson)) {\n    // An older version of group metadata stored groups in a dictionary\n    // instead of an array.\n    groupIds = Object.keys(groupsJson).sort();\n    const length = groupIds.length;\n    for (let i = 0; i < length; i++) {\n      const groupId = groupIds[i];\n      if (groupsJson.hasOwnProperty(groupId)) {\n        const group = groupsJson[groupId];\n        groups.push(\n          new GroupMetadata({\n            id: groupId,\n            group: groupsJson[groupId],\n            class: schema.classes[group.class],\n          }),\n        );\n      }\n    }\n  }\n\n  this._schema = schema;\n  this._groups = groups;\n  this._groupIds = groupIds;\n  this._tileset = tileset;\n\n  this._statistics = metadataJson.statistics;\n  this._extras = metadataJson.extras;\n  this._extensions = metadataJson.extensions;\n}\n\nObject.defineProperties(Cesium3DTilesetMetadata.prototype, {\n  /**\n   * Schema containing classes and enums.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {MetadataSchema}\n   * @readonly\n   * @private\n   */\n  schema: {\n    get: function () {\n      return this._schema;\n    },\n  },\n\n  /**\n   * Metadata about groups of content.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {GroupMetadata[]}\n   * @readonly\n   * @private\n   */\n  groups: {\n    get: function () {\n      return this._groups;\n    },\n  },\n\n  /**\n   * The IDs of the group metadata in the corresponding groups dictionary.\n   * Only populated if using the legacy schema.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {}\n   * @readonly\n   * @private\n   */\n  groupIds: {\n    get: function () {\n      return this._groupIds;\n    },\n  },\n\n  /**\n   * Metadata about the tileset as a whole.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {TilesetMetadata}\n   * @readonly\n   * @private\n   */\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  /**\n   * Statistics about the metadata.\n   * <p>\n   * See the {@link https://github.com/CesiumGS/3d-tiles/blob/main/extensions/3DTILES_metadata/schema/statistics.schema.json|statistics schema reference}\n   * in the 3D Tiles spec for the full set of properties.\n   * </p>\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  statistics: {\n    get: function () {\n      return this._statistics;\n    },\n  },\n\n  /**\n   * Extra user-defined properties.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * An object containing extensions.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\nexport default Cesium3DTilesetMetadata;\n"],"mappings":"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AAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACX,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEhB,QAAQ,EAAE;IACR2B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACV,SAAS;IACvB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEpB,OAAO,EAAE;IACP8B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACT,QAAQ;IACtB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,UAAU,EAAE;IACVO,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACR,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,MAAM,EAAE;IACNK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACN,OAAO;IACrB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,UAAU,EAAE;IACVG,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACJ,WAAW;IACzB;EACF;AACF,CAAC,CAAC;AAEF,eAAelC,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}