{"ast":null,"code":"import ComponentDatatype from \"../../Core/ComponentDatatype.js\";\n\n/**\n * Returns a function to read and convert data from a DataView into an array.\n *\n * @param {number} componentType Type to convert the data to.\n * @returns {ComponentReader} Function that reads and converts data.\n *\n * @private\n */\nfunction getComponentReader(componentType) {\n  switch (componentType) {\n    case ComponentDatatype.BYTE:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getInt8(byteOffset + i * componentTypeByteLength);\n        }\n      };\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getUint8(byteOffset + i * componentTypeByteLength);\n        }\n      };\n    case ComponentDatatype.SHORT:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getInt16(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getUint16(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n    case ComponentDatatype.INT:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getInt32(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n    case ComponentDatatype.UNSIGNED_INT:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getUint32(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n    case ComponentDatatype.FLOAT:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getFloat32(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n    case ComponentDatatype.DOUBLE:\n      return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getFloat64(byteOffset + i * componentTypeByteLength, true);\n        }\n      };\n  }\n}\n\n/**\n * A callback function that logs messages.\n * @callback ComponentReader\n *\n * @param {DataView} dataView The data view to read from.\n * @param {number} byteOffset The byte offset applied when reading from the data view.\n * @param {number} numberOfComponents The number of components to read.\n * @param {number} componentTypeByteLength The byte length of each component.\n * @param {number} result An array storing the components that are read.\n *\n * @private\n */\n\nexport default getComponentReader;","map":{"version":3,"names":["ComponentDatatype","getComponentReader","componentType","BYTE","dataView","byteOffset","numberOfComponents","componentTypeByteLength","result","i","getInt8","UNSIGNED_BYTE","getUint8","SHORT","getInt16","UNSIGNED_SHORT","getUint16","INT","getInt32","UNSIGNED_INT","getUint32","FLOAT","getFloat32","DOUBLE","getFloat64"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GltfPipeline/getComponentReader.js"],"sourcesContent":["import ComponentDatatype from \"../../Core/ComponentDatatype.js\";\n\n/**\n * Returns a function to read and convert data from a DataView into an array.\n *\n * @param {number} componentType Type to convert the data to.\n * @returns {ComponentReader} Function that reads and converts data.\n *\n * @private\n */\nfunction getComponentReader(componentType) {\n  switch (componentType) {\n    case ComponentDatatype.BYTE:\n      return function (\n        dataView,\n        byteOffset,\n        numberOfComponents,\n        componentTypeByteLength,\n        result\n      ) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getInt8(\n            byteOffset + i * componentTypeByteLength\n          );\n        }\n      };\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return function (\n        dataView,\n        byteOffset,\n        numberOfComponents,\n        componentTypeByteLength,\n        result\n      ) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getUint8(\n            byteOffset + i * componentTypeByteLength\n          );\n        }\n      };\n    case ComponentDatatype.SHORT:\n      return function (\n        dataView,\n        byteOffset,\n        numberOfComponents,\n        componentTypeByteLength,\n        result\n      ) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getInt16(\n            byteOffset + i * componentTypeByteLength,\n            true\n          );\n        }\n      };\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return function (\n        dataView,\n        byteOffset,\n        numberOfComponents,\n        componentTypeByteLength,\n        result\n      ) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getUint16(\n            byteOffset + i * componentTypeByteLength,\n            true\n          );\n        }\n      };\n    case ComponentDatatype.INT:\n      return function (\n        dataView,\n        byteOffset,\n        numberOfComponents,\n        componentTypeByteLength,\n        result\n      ) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getInt32(\n            byteOffset + i * componentTypeByteLength,\n            true\n          );\n        }\n      };\n    case ComponentDatatype.UNSIGNED_INT:\n      return function (\n        dataView,\n        byteOffset,\n        numberOfComponents,\n        componentTypeByteLength,\n        result\n      ) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getUint32(\n            byteOffset + i * componentTypeByteLength,\n            true\n          );\n        }\n      };\n    case ComponentDatatype.FLOAT:\n      return function (\n        dataView,\n        byteOffset,\n        numberOfComponents,\n        componentTypeByteLength,\n        result\n      ) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getFloat32(\n            byteOffset + i * componentTypeByteLength,\n            true\n          );\n        }\n      };\n    case ComponentDatatype.DOUBLE:\n      return function (\n        dataView,\n        byteOffset,\n        numberOfComponents,\n        componentTypeByteLength,\n        result\n      ) {\n        for (let i = 0; i < numberOfComponents; ++i) {\n          result[i] = dataView.getFloat64(\n            byteOffset + i * componentTypeByteLength,\n            true\n          );\n        }\n      };\n  }\n}\n\n/**\n * A callback function that logs messages.\n * @callback ComponentReader\n *\n * @param {DataView} dataView The data view to read from.\n * @param {number} byteOffset The byte offset applied when reading from the data view.\n * @param {number} numberOfComponents The number of components to read.\n * @param {number} componentTypeByteLength The byte length of each component.\n * @param {number} result An array storing the components that are read.\n *\n * @private\n */\n\nexport default getComponentReader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}