{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport I3SDataProvider from \"./I3SDataProvider.js\";\nimport I3SLayer from \"./I3SLayer.js\";\nimport Resource from \"../Core/Resource.js\";\n\n/**\n * This class implements an I3S sublayer for Building Scene Layer.\n * <p>\n * This object is normally not instantiated directly, use {@link I3SSublayer.fromData}.\n * </p>\n * @alias I3SSublayer\n * @internalConstructor\n */\nfunction I3SSublayer(dataProvider, parent, sublayerData) {\n  this._dataProvider = dataProvider;\n  this._parent = parent;\n  this._data = sublayerData;\n  this._name = sublayerData.name;\n  this._modelName = sublayerData.modelName;\n  this._visibility = defaultValue(sublayerData.visibility, true);\n  this._resource = undefined;\n  this._sublayers = [];\n  this._i3sLayers = [];\n}\nObject.defineProperties(I3SSublayer.prototype, {\n  /**\n   * Gets the resource for the sublayer\n   * @memberof I3SSublayer.prototype\n   * @type {Resource}\n   * @readonly\n   */\n  resource: {\n    get: function () {\n      return this._resource;\n    }\n  },\n  /**\n   * Gets the I3S data for this object.\n   * @memberof I3SSublayer.prototype\n   * @type {object}\n   * @readonly\n   */\n  data: {\n    get: function () {\n      return this._data;\n    }\n  },\n  /**\n   * Gets the name for the sublayer.\n   * @memberof I3SSublayer.prototype\n   * @type {string}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    }\n  },\n  /**\n   * Gets the model name for the sublayer.\n   * @memberof I3SSublayer.prototype\n   * @type {string}\n   * @readonly\n   */\n  modelName: {\n    get: function () {\n      return this._modelName;\n    }\n  },\n  /**\n   * Gets the collection of child sublayers.\n   * @memberof I3SSublayer.prototype\n   * @type {I3SSublayer[]}\n   * @readonly\n   */\n  sublayers: {\n    get: function () {\n      return this._sublayers;\n    }\n  },\n  /**\n   * Gets or sets the sublayer visibility.\n   * @memberof I3SSublayer.prototype\n   * @type {boolean}\n   */\n  visibility: {\n    get: function () {\n      return this._visibility;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._visibility !== value) {\n        this._visibility = value;\n        for (let i = 0; i < this._i3sLayers.length; i++) {\n          this._i3sLayers[i]._updateVisibility();\n        }\n      }\n    }\n  },\n  /**\n   * Determines if the sublayer will be shown.\n   * @memberof I3SSublayer.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  show: {\n    get: function () {\n      return this._visibility && this._parent.show;\n    }\n  }\n});\n\n/**\n * @private\n */\nI3SSublayer._fromData = async function (dataProvider, buildingLayerUrl, sublayerData, parent) {\n  const sublayer = new I3SSublayer(dataProvider, parent, sublayerData);\n  if (sublayer._data.layerType === \"group\") {\n    const sublayers = sublayer._data.sublayers;\n    if (defined(sublayers)) {\n      const promises = [];\n      for (let i = 0; i < sublayers.length; i++) {\n        const promise = I3SSublayer._fromData(dataProvider, buildingLayerUrl, sublayers[i], sublayer);\n        promises.push(promise);\n      }\n      const childSublayers = await Promise.all(promises);\n      for (let i = 0; i < childSublayers.length; i++) {\n        const childSublayer = childSublayers[i];\n        sublayer._sublayers.push(childSublayer);\n        sublayer._i3sLayers.push(...childSublayer._i3sLayers);\n      }\n    }\n  } else if (sublayer._data.layerType === \"3DObject\") {\n    const sublayerUrl = buildingLayerUrl.concat(`/sublayers/${sublayer._data.id}`);\n    const resource = new Resource({\n      url: sublayerUrl\n    });\n    resource.setQueryParameters(dataProvider.resource.queryParameters);\n    resource.appendForwardSlash();\n    sublayer._resource = resource;\n    const layerData = await I3SDataProvider.loadJson(sublayer._resource);\n    const layer = new I3SLayer(dataProvider, layerData, sublayer);\n    sublayer._i3sLayers.push(layer);\n  } else {\n    // Filter other scene layer types out\n    console.log(`${sublayer._data.layerType} layer ${sublayer._data.name} is skipped as not supported.`);\n  }\n  return sublayer;\n};\nexport default I3SSublayer;","map":{"version":3,"names":["Check","defaultValue","defined","I3SDataProvider","I3SLayer","Resource","I3SSublayer","dataProvider","parent","sublayerData","_dataProvider","_parent","_data","_name","name","_modelName","modelName","_visibility","visibility","_resource","undefined","_sublayers","_i3sLayers","Object","defineProperties","prototype","resource","get","data","sublayers","set","value","i","length","_updateVisibility","show","_fromData","buildingLayerUrl","sublayer","layerType","promises","promise","push","childSublayers","Promise","all","childSublayer","sublayerUrl","concat","id","url","setQueryParameters","queryParameters","appendForwardSlash","layerData","loadJson","layer","console","log"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/I3SSublayer.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport I3SDataProvider from \"./I3SDataProvider.js\";\nimport I3SLayer from \"./I3SLayer.js\";\nimport Resource from \"../Core/Resource.js\";\n\n/**\n * This class implements an I3S sublayer for Building Scene Layer.\n * <p>\n * This object is normally not instantiated directly, use {@link I3SSublayer.fromData}.\n * </p>\n * @alias I3SSublayer\n * @internalConstructor\n */\nfunction I3SSublayer(dataProvider, parent, sublayerData) {\n  this._dataProvider = dataProvider;\n  this._parent = parent;\n  this._data = sublayerData;\n  this._name = sublayerData.name;\n  this._modelName = sublayerData.modelName;\n  this._visibility = defaultValue(sublayerData.visibility, true);\n  this._resource = undefined;\n  this._sublayers = [];\n  this._i3sLayers = [];\n}\n\nObject.defineProperties(I3SSublayer.prototype, {\n  /**\n   * Gets the resource for the sublayer\n   * @memberof I3SSublayer.prototype\n   * @type {Resource}\n   * @readonly\n   */\n  resource: {\n    get: function () {\n      return this._resource;\n    },\n  },\n\n  /**\n   * Gets the I3S data for this object.\n   * @memberof I3SSublayer.prototype\n   * @type {object}\n   * @readonly\n   */\n  data: {\n    get: function () {\n      return this._data;\n    },\n  },\n\n  /**\n   * Gets the name for the sublayer.\n   * @memberof I3SSublayer.prototype\n   * @type {string}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * Gets the model name for the sublayer.\n   * @memberof I3SSublayer.prototype\n   * @type {string}\n   * @readonly\n   */\n  modelName: {\n    get: function () {\n      return this._modelName;\n    },\n  },\n\n  /**\n   * Gets the collection of child sublayers.\n   * @memberof I3SSublayer.prototype\n   * @type {I3SSublayer[]}\n   * @readonly\n   */\n  sublayers: {\n    get: function () {\n      return this._sublayers;\n    },\n  },\n\n  /**\n   * Gets or sets the sublayer visibility.\n   * @memberof I3SSublayer.prototype\n   * @type {boolean}\n   */\n  visibility: {\n    get: function () {\n      return this._visibility;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n\n      if (this._visibility !== value) {\n        this._visibility = value;\n        for (let i = 0; i < this._i3sLayers.length; i++) {\n          this._i3sLayers[i]._updateVisibility();\n        }\n      }\n    },\n  },\n\n  /**\n   * Determines if the sublayer will be shown.\n   * @memberof I3SSublayer.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  show: {\n    get: function () {\n      return this._visibility && this._parent.show;\n    },\n  },\n});\n\n/**\n * @private\n */\nI3SSublayer._fromData = async function (\n  dataProvider,\n  buildingLayerUrl,\n  sublayerData,\n  parent,\n) {\n  const sublayer = new I3SSublayer(dataProvider, parent, sublayerData);\n  if (sublayer._data.layerType === \"group\") {\n    const sublayers = sublayer._data.sublayers;\n    if (defined(sublayers)) {\n      const promises = [];\n      for (let i = 0; i < sublayers.length; i++) {\n        const promise = I3SSublayer._fromData(\n          dataProvider,\n          buildingLayerUrl,\n          sublayers[i],\n          sublayer,\n        );\n        promises.push(promise);\n      }\n      const childSublayers = await Promise.all(promises);\n      for (let i = 0; i < childSublayers.length; i++) {\n        const childSublayer = childSublayers[i];\n        sublayer._sublayers.push(childSublayer);\n        sublayer._i3sLayers.push(...childSublayer._i3sLayers);\n      }\n    }\n  } else if (sublayer._data.layerType === \"3DObject\") {\n    const sublayerUrl = buildingLayerUrl.concat(\n      `/sublayers/${sublayer._data.id}`,\n    );\n    const resource = new Resource({ url: sublayerUrl });\n    resource.setQueryParameters(dataProvider.resource.queryParameters);\n    resource.appendForwardSlash();\n    sublayer._resource = resource;\n\n    const layerData = await I3SDataProvider.loadJson(sublayer._resource);\n    const layer = new I3SLayer(dataProvider, layerData, sublayer);\n    sublayer._i3sLayers.push(layer);\n  } else {\n    // Filter other scene layer types out\n    console.log(\n      `${sublayer._data.layerType} layer ${sublayer._data.name} is skipped as not supported.`,\n    );\n  }\n  return sublayer;\n};\n\nexport default I3SSublayer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}