{"ast":null,"code":"import defined from \"./defined.js\";\n\n/**\n * An {@link InterpolationAlgorithm} for performing Lagrange interpolation.\n *\n * @namespace LagrangePolynomialApproximation\n */\nconst LagrangePolynomialApproximation = {\n  type: \"Lagrange\"\n};\n\n/**\n * Given the desired degree, returns the number of data points required for interpolation.\n *\n * @param {number} degree The desired degree of interpolation.\n * @returns {number} The number of required data points needed for the desired degree of interpolation.\n */\nLagrangePolynomialApproximation.getRequiredDataPoints = function (degree) {\n  return Math.max(degree + 1.0, 2);\n};\n\n/**\n * Interpolates values using Lagrange Polynomial Approximation.\n *\n * @param {number} x The independent variable for which the dependent variables will be interpolated.\n * @param {number[]} xTable The array of independent variables to use to interpolate.  The values\n * in this array must be in increasing order and the same value must not occur twice in the array.\n * @param {number[]} yTable The array of dependent variables to use to interpolate.  For a set of three\n * dependent values (p,q,w) at time 1 and time 2 this should be as follows: {p1, q1, w1, p2, q2, w2}.\n * @param {number} yStride The number of dependent variable values in yTable corresponding to\n * each independent variable value in xTable.\n * @param {number[]} [result] An existing array into which to store the result.\n * @returns {number[]} The array of interpolated values, or the result parameter if one was provided.\n */\nLagrangePolynomialApproximation.interpolateOrderZero = function (x, xTable, yTable, yStride, result) {\n  if (!defined(result)) {\n    result = new Array(yStride);\n  }\n  let i;\n  let j;\n  const length = xTable.length;\n  for (i = 0; i < yStride; i++) {\n    result[i] = 0;\n  }\n  for (i = 0; i < length; i++) {\n    let coefficient = 1;\n    for (j = 0; j < length; j++) {\n      if (j !== i) {\n        const diffX = xTable[i] - xTable[j];\n        coefficient *= (x - xTable[j]) / diffX;\n      }\n    }\n    for (j = 0; j < yStride; j++) {\n      result[j] += coefficient * yTable[i * yStride + j];\n    }\n  }\n  return result;\n};\nexport default LagrangePolynomialApproximation;","map":{"version":3,"names":["defined","LagrangePolynomialApproximation","type","getRequiredDataPoints","degree","Math","max","interpolateOrderZero","x","xTable","yTable","yStride","result","Array","i","j","length","coefficient","diffX"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/LagrangePolynomialApproximation.js"],"sourcesContent":["import defined from \"./defined.js\";\n\n/**\n * An {@link InterpolationAlgorithm} for performing Lagrange interpolation.\n *\n * @namespace LagrangePolynomialApproximation\n */\nconst LagrangePolynomialApproximation = {\n  type: \"Lagrange\",\n};\n\n/**\n * Given the desired degree, returns the number of data points required for interpolation.\n *\n * @param {number} degree The desired degree of interpolation.\n * @returns {number} The number of required data points needed for the desired degree of interpolation.\n */\nLagrangePolynomialApproximation.getRequiredDataPoints = function (degree) {\n  return Math.max(degree + 1.0, 2);\n};\n\n/**\n * Interpolates values using Lagrange Polynomial Approximation.\n *\n * @param {number} x The independent variable for which the dependent variables will be interpolated.\n * @param {number[]} xTable The array of independent variables to use to interpolate.  The values\n * in this array must be in increasing order and the same value must not occur twice in the array.\n * @param {number[]} yTable The array of dependent variables to use to interpolate.  For a set of three\n * dependent values (p,q,w) at time 1 and time 2 this should be as follows: {p1, q1, w1, p2, q2, w2}.\n * @param {number} yStride The number of dependent variable values in yTable corresponding to\n * each independent variable value in xTable.\n * @param {number[]} [result] An existing array into which to store the result.\n * @returns {number[]} The array of interpolated values, or the result parameter if one was provided.\n */\nLagrangePolynomialApproximation.interpolateOrderZero = function (\n  x,\n  xTable,\n  yTable,\n  yStride,\n  result,\n) {\n  if (!defined(result)) {\n    result = new Array(yStride);\n  }\n\n  let i;\n  let j;\n  const length = xTable.length;\n\n  for (i = 0; i < yStride; i++) {\n    result[i] = 0;\n  }\n\n  for (i = 0; i < length; i++) {\n    let coefficient = 1;\n\n    for (j = 0; j < length; j++) {\n      if (j !== i) {\n        const diffX = xTable[i] - xTable[j];\n        coefficient *= (x - xTable[j]) / diffX;\n      }\n    }\n\n    for (j = 0; j < yStride; j++) {\n      result[j] += coefficient * yTable[i * yStride + j];\n    }\n  }\n\n  return result;\n};\nexport default LagrangePolynomialApproximation;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA;AACA,MAAMC,+BAA+B,GAAG;EACtCC,IAAI,EAAE;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAD,+BAA+B,CAACE,qBAAqB,GAAG,UAAUC,MAAM,EAAE;EACxE,OAAOC,IAAI,CAACC,GAAG,CAACF,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,+BAA+B,CAACM,oBAAoB,GAAG,UACrDC,CAAC,EACDC,MAAM,EACNC,MAAM,EACNC,OAAO,EACPC,MAAM,EACN;EACA,IAAI,CAACZ,OAAO,CAACY,MAAM,CAAC,EAAE;IACpBA,MAAM,GAAG,IAAIC,KAAK,CAACF,OAAO,CAAC;EAC7B;EAEA,IAAIG,CAAC;EACL,IAAIC,CAAC;EACL,MAAMC,MAAM,GAAGP,MAAM,CAACO,MAAM;EAE5B,KAAKF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,EAAEG,CAAC,EAAE,EAAE;IAC5BF,MAAM,CAACE,CAAC,CAAC,GAAG,CAAC;EACf;EAEA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC3B,IAAIG,WAAW,GAAG,CAAC;IAEnB,KAAKF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3B,IAAIA,CAAC,KAAKD,CAAC,EAAE;QACX,MAAMI,KAAK,GAAGT,MAAM,CAACK,CAAC,CAAC,GAAGL,MAAM,CAACM,CAAC,CAAC;QACnCE,WAAW,IAAI,CAACT,CAAC,GAAGC,MAAM,CAACM,CAAC,CAAC,IAAIG,KAAK;MACxC;IACF;IAEA,KAAKH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAE;MAC5BH,MAAM,CAACG,CAAC,CAAC,IAAIE,WAAW,GAAGP,MAAM,CAACI,CAAC,GAAGH,OAAO,GAAGI,CAAC,CAAC;IACpD;EACF;EAEA,OAAOH,MAAM;AACf,CAAC;AACD,eAAeX,+BAA+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}