{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport MetadataEntity from \"./MetadataEntity.js\";\n\n/**\n * A table for storing free-form JSON metadata, as in the 3D Tiles batch table.\n *\n * @param {object} options Object with the following properties:\n * @param {number} options.count The number of entities in the table.\n * @param {Object<string, Array>} options.properties The JSON representation of the metadata table. All the arrays must have exactly options.count elements.\n *\n * @alias JsonMetadataTable\n * @constructor\n * @private\n */\n\n// An empty class is used because JsonMetadataTable is an older type of metadata table\n// that does not have a class definition.\nconst emptyClass = {};\nfunction JsonMetadataTable(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"options.count\", options.count, 0);\n  Check.typeOf.object(\"options.properties\", options.properties);\n  //>>includeEnd('debug');\n\n  this._count = options.count;\n  this._properties = clone(options.properties, true);\n}\n\n/**\n * Returns whether the table has this property.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {boolean} Whether the table has this property.\n * @private\n */\nJsonMetadataTable.prototype.hasProperty = function (propertyId) {\n  return MetadataEntity.hasProperty(propertyId, this._properties, emptyClass);\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The property IDs.\n * @private\n */\nJsonMetadataTable.prototype.getPropertyIds = function (results) {\n  return MetadataEntity.getPropertyIds(this._properties, emptyClass, results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n *\n * @param {number} index The index of the entity.\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the entity does not have this property.\n *\n * @exception {DeveloperError} index is out of bounds\n * @private\n */\nJsonMetadataTable.prototype.getProperty = function (index, propertyId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index);\n  Check.typeOf.string(\"propertyId\", propertyId);\n  if (index < 0 || index >= this._count) {\n    throw new DeveloperError(`index must be in the range [0, ${this._count})`);\n  }\n  //>>includeEnd('debug');\n\n  const property = this._properties[propertyId];\n  if (defined(property)) {\n    return clone(property[index], true);\n  }\n  return undefined;\n};\n\n/**\n * Sets the value of the property with the given ID. If the property did not\n * exist, it will be created.\n *\n * @param {number} index The index of the entity.\n * @param {string} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} index is out of bounds\n * @private\n */\nJsonMetadataTable.prototype.setProperty = function (index, propertyId, value) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index);\n  Check.typeOf.string(\"propertyId\", propertyId);\n  if (index < 0 || index >= this._count) {\n    throw new DeveloperError(`index must be in the range [0, ${this._count})`);\n  }\n  //>>includeEnd('debug');\n\n  let property = this._properties[propertyId];\n  if (!defined(property)) {\n    // Property does not exist. Create it.\n    property = new Array(this._count);\n    this._properties[propertyId] = property;\n  }\n  property[index] = clone(value, true);\n};\nexport default JsonMetadataTable;","map":{"version":3,"names":["Check","clone","defined","DeveloperError","MetadataEntity","emptyClass","JsonMetadataTable","options","typeOf","number","greaterThan","count","object","properties","_count","_properties","prototype","hasProperty","propertyId","getPropertyIds","results","getProperty","index","string","property","undefined","setProperty","value","Array"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/JsonMetadataTable.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport clone from \"../Core/clone.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport MetadataEntity from \"./MetadataEntity.js\";\n\n/**\n * A table for storing free-form JSON metadata, as in the 3D Tiles batch table.\n *\n * @param {object} options Object with the following properties:\n * @param {number} options.count The number of entities in the table.\n * @param {Object<string, Array>} options.properties The JSON representation of the metadata table. All the arrays must have exactly options.count elements.\n *\n * @alias JsonMetadataTable\n * @constructor\n * @private\n */\n\n// An empty class is used because JsonMetadataTable is an older type of metadata table\n// that does not have a class definition.\nconst emptyClass = {};\n\nfunction JsonMetadataTable(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThan(\"options.count\", options.count, 0);\n  Check.typeOf.object(\"options.properties\", options.properties);\n  //>>includeEnd('debug');\n\n  this._count = options.count;\n  this._properties = clone(options.properties, true);\n}\n\n/**\n * Returns whether the table has this property.\n *\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {boolean} Whether the table has this property.\n * @private\n */\nJsonMetadataTable.prototype.hasProperty = function (propertyId) {\n  return MetadataEntity.hasProperty(propertyId, this._properties, emptyClass);\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {string[]} [results] An array into which to store the results.\n * @returns {string[]} The property IDs.\n * @private\n */\nJsonMetadataTable.prototype.getPropertyIds = function (results) {\n  return MetadataEntity.getPropertyIds(this._properties, emptyClass, results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n *\n * @param {number} index The index of the entity.\n * @param {string} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the entity does not have this property.\n *\n * @exception {DeveloperError} index is out of bounds\n * @private\n */\nJsonMetadataTable.prototype.getProperty = function (index, propertyId) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index);\n  Check.typeOf.string(\"propertyId\", propertyId);\n\n  if (index < 0 || index >= this._count) {\n    throw new DeveloperError(`index must be in the range [0, ${this._count})`);\n  }\n  //>>includeEnd('debug');\n\n  const property = this._properties[propertyId];\n  if (defined(property)) {\n    return clone(property[index], true);\n  }\n\n  return undefined;\n};\n\n/**\n * Sets the value of the property with the given ID. If the property did not\n * exist, it will be created.\n *\n * @param {number} index The index of the entity.\n * @param {string} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} index is out of bounds\n * @private\n */\nJsonMetadataTable.prototype.setProperty = function (index, propertyId, value) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index);\n  Check.typeOf.string(\"propertyId\", propertyId);\n\n  if (index < 0 || index >= this._count) {\n    throw new DeveloperError(`index must be in the range [0, ${this._count})`);\n  }\n  //>>includeEnd('debug');\n\n  let property = this._properties[propertyId];\n  if (!defined(property)) {\n    // Property does not exist. Create it.\n    property = new Array(this._count);\n    this._properties[propertyId] = property;\n  }\n\n  property[index] = clone(value, true);\n};\n\nexport default JsonMetadataTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}