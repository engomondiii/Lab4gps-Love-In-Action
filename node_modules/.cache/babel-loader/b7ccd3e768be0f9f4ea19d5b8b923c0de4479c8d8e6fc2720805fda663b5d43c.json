{"ast":null,"code":"import defined from \"./defined.js\";\nimport isBitSet from \"./isBitSet.js\";\n\n// Bitmask for checking tile properties\nconst childrenBitmasks = [0x01, 0x02, 0x04, 0x08];\nconst anyChildBitmask = 0x0f;\nconst cacheFlagBitmask = 0x10; // True if there is a child subtree\nconst imageBitmask = 0x40;\nconst terrainBitmask = 0x80;\n\n/**\n * Contains information about each tile from a Google Earth Enterprise server\n *\n * @param {number} bits Bitmask that contains the type of data and available children for each tile.\n * @param {number} cnodeVersion Version of the request for subtree metadata.\n * @param {number} imageryVersion Version of the request for imagery tile.\n * @param {number} terrainVersion Version of the request for terrain tile.\n * @param {number} imageryProvider Id of imagery provider.\n * @param {number} terrainProvider Id of terrain provider.\n *\n * @private\n */\nfunction GoogleEarthEnterpriseTileInformation(bits, cnodeVersion, imageryVersion, terrainVersion, imageryProvider, terrainProvider) {\n  this._bits = bits;\n  this.cnodeVersion = cnodeVersion;\n  this.imageryVersion = imageryVersion;\n  this.terrainVersion = terrainVersion;\n  this.imageryProvider = imageryProvider;\n  this.terrainProvider = terrainProvider;\n  this.ancestorHasTerrain = false; // Set it later once we find its parent\n  this.terrainState = undefined;\n}\n\n/**\n * Creates GoogleEarthEnterpriseTileInformation from an object\n *\n * @param {object} info Object to be cloned\n * @param {GoogleEarthEnterpriseTileInformation} [result] The object onto which to store the result.\n * @returns {GoogleEarthEnterpriseTileInformation} The modified result parameter or a new GoogleEarthEnterpriseTileInformation instance if none was provided.\n */\nGoogleEarthEnterpriseTileInformation.clone = function (info, result) {\n  if (!defined(result)) {\n    result = new GoogleEarthEnterpriseTileInformation(info._bits, info.cnodeVersion, info.imageryVersion, info.terrainVersion, info.imageryProvider, info.terrainProvider);\n  } else {\n    result._bits = info._bits;\n    result.cnodeVersion = info.cnodeVersion;\n    result.imageryVersion = info.imageryVersion;\n    result.terrainVersion = info.terrainVersion;\n    result.imageryProvider = info.imageryProvider;\n    result.terrainProvider = info.terrainProvider;\n  }\n  result.ancestorHasTerrain = info.ancestorHasTerrain;\n  result.terrainState = info.terrainState;\n  return result;\n};\n\n/**\n * Sets the parent for the tile\n *\n * @param {GoogleEarthEnterpriseTileInformation} parent Parent tile\n */\nGoogleEarthEnterpriseTileInformation.prototype.setParent = function (parent) {\n  this.ancestorHasTerrain = parent.ancestorHasTerrain || this.hasTerrain();\n};\n\n/**\n * Gets whether a subtree is available\n *\n * @returns {boolean} true if subtree is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasSubtree = function () {\n  return isBitSet(this._bits, cacheFlagBitmask);\n};\n\n/**\n * Gets whether imagery is available\n *\n * @returns {boolean} true if imagery is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasImagery = function () {\n  return isBitSet(this._bits, imageBitmask);\n};\n\n/**\n * Gets whether terrain is available\n *\n * @returns {boolean} true if terrain is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasTerrain = function () {\n  return isBitSet(this._bits, terrainBitmask);\n};\n\n/**\n * Gets whether any children are present\n *\n * @returns {boolean} true if any children are available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasChildren = function () {\n  return isBitSet(this._bits, anyChildBitmask);\n};\n\n/**\n * Gets whether a specified child is available\n *\n * @param {number} index Index of child tile\n *\n * @returns {boolean} true if child is available, false otherwise\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasChild = function (index) {\n  return isBitSet(this._bits, childrenBitmasks[index]);\n};\n\n/**\n * Gets bitmask containing children\n *\n * @returns {number} Children bitmask\n */\nGoogleEarthEnterpriseTileInformation.prototype.getChildBitmask = function () {\n  return this._bits & anyChildBitmask;\n};\nexport default GoogleEarthEnterpriseTileInformation;","map":{"version":3,"names":["defined","isBitSet","childrenBitmasks","anyChildBitmask","cacheFlagBitmask","imageBitmask","terrainBitmask","GoogleEarthEnterpriseTileInformation","bits","cnodeVersion","imageryVersion","terrainVersion","imageryProvider","terrainProvider","_bits","ancestorHasTerrain","terrainState","undefined","clone","info","result","prototype","setParent","parent","hasTerrain","hasSubtree","hasImagery","hasChildren","hasChild","index","getChildBitmask"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/GoogleEarthEnterpriseTileInformation.js"],"sourcesContent":["import defined from \"./defined.js\";\nimport isBitSet from \"./isBitSet.js\";\n\n// Bitmask for checking tile properties\nconst childrenBitmasks = [0x01, 0x02, 0x04, 0x08];\nconst anyChildBitmask = 0x0f;\nconst cacheFlagBitmask = 0x10; // True if there is a child subtree\nconst imageBitmask = 0x40;\nconst terrainBitmask = 0x80;\n\n/**\n * Contains information about each tile from a Google Earth Enterprise server\n *\n * @param {number} bits Bitmask that contains the type of data and available children for each tile.\n * @param {number} cnodeVersion Version of the request for subtree metadata.\n * @param {number} imageryVersion Version of the request for imagery tile.\n * @param {number} terrainVersion Version of the request for terrain tile.\n * @param {number} imageryProvider Id of imagery provider.\n * @param {number} terrainProvider Id of terrain provider.\n *\n * @private\n */\nfunction GoogleEarthEnterpriseTileInformation(\n  bits,\n  cnodeVersion,\n  imageryVersion,\n  terrainVersion,\n  imageryProvider,\n  terrainProvider,\n) {\n  this._bits = bits;\n  this.cnodeVersion = cnodeVersion;\n  this.imageryVersion = imageryVersion;\n  this.terrainVersion = terrainVersion;\n  this.imageryProvider = imageryProvider;\n  this.terrainProvider = terrainProvider;\n  this.ancestorHasTerrain = false; // Set it later once we find its parent\n  this.terrainState = undefined;\n}\n\n/**\n * Creates GoogleEarthEnterpriseTileInformation from an object\n *\n * @param {object} info Object to be cloned\n * @param {GoogleEarthEnterpriseTileInformation} [result] The object onto which to store the result.\n * @returns {GoogleEarthEnterpriseTileInformation} The modified result parameter or a new GoogleEarthEnterpriseTileInformation instance if none was provided.\n */\nGoogleEarthEnterpriseTileInformation.clone = function (info, result) {\n  if (!defined(result)) {\n    result = new GoogleEarthEnterpriseTileInformation(\n      info._bits,\n      info.cnodeVersion,\n      info.imageryVersion,\n      info.terrainVersion,\n      info.imageryProvider,\n      info.terrainProvider,\n    );\n  } else {\n    result._bits = info._bits;\n    result.cnodeVersion = info.cnodeVersion;\n    result.imageryVersion = info.imageryVersion;\n    result.terrainVersion = info.terrainVersion;\n    result.imageryProvider = info.imageryProvider;\n    result.terrainProvider = info.terrainProvider;\n  }\n  result.ancestorHasTerrain = info.ancestorHasTerrain;\n  result.terrainState = info.terrainState;\n\n  return result;\n};\n\n/**\n * Sets the parent for the tile\n *\n * @param {GoogleEarthEnterpriseTileInformation} parent Parent tile\n */\nGoogleEarthEnterpriseTileInformation.prototype.setParent = function (parent) {\n  this.ancestorHasTerrain = parent.ancestorHasTerrain || this.hasTerrain();\n};\n\n/**\n * Gets whether a subtree is available\n *\n * @returns {boolean} true if subtree is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasSubtree = function () {\n  return isBitSet(this._bits, cacheFlagBitmask);\n};\n\n/**\n * Gets whether imagery is available\n *\n * @returns {boolean} true if imagery is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasImagery = function () {\n  return isBitSet(this._bits, imageBitmask);\n};\n\n/**\n * Gets whether terrain is available\n *\n * @returns {boolean} true if terrain is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasTerrain = function () {\n  return isBitSet(this._bits, terrainBitmask);\n};\n\n/**\n * Gets whether any children are present\n *\n * @returns {boolean} true if any children are available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasChildren = function () {\n  return isBitSet(this._bits, anyChildBitmask);\n};\n\n/**\n * Gets whether a specified child is available\n *\n * @param {number} index Index of child tile\n *\n * @returns {boolean} true if child is available, false otherwise\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasChild = function (index) {\n  return isBitSet(this._bits, childrenBitmasks[index]);\n};\n\n/**\n * Gets bitmask containing children\n *\n * @returns {number} Children bitmask\n */\nGoogleEarthEnterpriseTileInformation.prototype.getChildBitmask = function () {\n  return this._bits & anyChildBitmask;\n};\nexport default GoogleEarthEnterpriseTileInformation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}