{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport ViewportQuadFS from \"../Shaders/ViewportQuadFS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport Material from \"./Material.js\";\n\n/**\n * A viewport aligned quad.\n *\n * @alias ViewportQuad\n * @constructor\n *\n * @param {BoundingRectangle} [rectangle] The {@link BoundingRectangle} defining the quad's position within the viewport.\n * @param {Material} [material] The {@link Material} defining the surface appearance of the viewport quad.\n *\n * @example\n * const viewportQuad = new Cesium.ViewportQuad(new Cesium.BoundingRectangle(0, 0, 80, 40));\n * viewportQuad.material.uniforms.color = new Cesium.Color(1.0, 0.0, 0.0, 1.0);\n */\nfunction ViewportQuad(rectangle, material) {\n  /**\n   * Determines if the viewport quad primitive will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = true;\n  if (!defined(rectangle)) {\n    rectangle = new BoundingRectangle();\n  }\n\n  /**\n   * The BoundingRectangle defining the quad's position within the viewport.\n   *\n   * @type {BoundingRectangle}\n   *\n   * @example\n   * viewportQuad.rectangle = new Cesium.BoundingRectangle(0, 0, 80, 40);\n   */\n  this.rectangle = BoundingRectangle.clone(rectangle);\n  if (!defined(material)) {\n    material = Material.fromType(Material.ColorType, {\n      color: new Color(1.0, 1.0, 1.0, 1.0)\n    });\n  }\n\n  /**\n   * The surface appearance of the viewport quad.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * <p>\n   * The default material is <code>Material.ColorType</code>.\n   * </p>\n   *\n   * @type Material\n   *\n   * @example\n   * // 1. Change the color of the default material to yellow\n   * viewportQuad.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n   *\n   * // 2. Change material to horizontal stripes\n   * viewportQuad.material = Cesium.Material.fromType(Cesium.Material.StripeType);\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = material;\n  this._material = undefined;\n  this._overlayCommand = undefined;\n  this._rs = undefined;\n}\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {DeveloperError} this.material must be defined.\n * @exception {DeveloperError} this.rectangle must be defined.\n */\nViewportQuad.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(this.material)) {\n    throw new DeveloperError(\"this.material must be defined.\");\n  }\n  if (!defined(this.rectangle)) {\n    throw new DeveloperError(\"this.rectangle must be defined.\");\n  }\n  //>>includeEnd('debug');\n\n  const rs = this._rs;\n  if (!defined(rs) || !BoundingRectangle.equals(rs.viewport, this.rectangle)) {\n    this._rs = RenderState.fromCache({\n      blending: BlendingState.ALPHA_BLEND,\n      viewport: this.rectangle\n    });\n  }\n  const pass = frameState.passes;\n  if (pass.render) {\n    const context = frameState.context;\n    if (this._material !== this.material || !defined(this._overlayCommand)) {\n      // Recompile shader when material changes\n      this._material = this.material;\n      if (defined(this._overlayCommand)) {\n        this._overlayCommand.shaderProgram.destroy();\n      }\n      const fs = new ShaderSource({\n        sources: [this._material.shaderSource, ViewportQuadFS]\n      });\n      this._overlayCommand = context.createViewportQuadCommand(fs, {\n        renderState: this._rs,\n        uniformMap: this._material._uniforms,\n        owner: this\n      });\n      this._overlayCommand.pass = Pass.OVERLAY;\n    }\n    this._material.update(context);\n    this._overlayCommand.renderState = this._rs;\n    this._overlayCommand.uniformMap = this._material._uniforms;\n    frameState.commandList.push(this._overlayCommand);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see ViewportQuad#destroy\n */\nViewportQuad.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * quad = quad && quad.destroy();\n *\n * @see ViewportQuad#isDestroyed\n */\nViewportQuad.prototype.destroy = function () {\n  if (defined(this._overlayCommand)) {\n    this._overlayCommand.shaderProgram = this._overlayCommand.shaderProgram && this._overlayCommand.shaderProgram.destroy();\n  }\n  return destroyObject(this);\n};\nexport default ViewportQuad;","map":{"version":3,"names":["BoundingRectangle","Color","defined","destroyObject","DeveloperError","Pass","RenderState","ShaderSource","ViewportQuadFS","BlendingState","Material","ViewportQuad","rectangle","material","show","clone","fromType","ColorType","color","_material","undefined","_overlayCommand","_rs","prototype","update","frameState","rs","equals","viewport","fromCache","blending","ALPHA_BLEND","pass","passes","render","context","shaderProgram","destroy","fs","sources","shaderSource","createViewportQuadCommand","renderState","uniformMap","_uniforms","owner","OVERLAY","commandList","push","isDestroyed"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/ViewportQuad.js"],"sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport ViewportQuadFS from \"../Shaders/ViewportQuadFS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport Material from \"./Material.js\";\n\n/**\n * A viewport aligned quad.\n *\n * @alias ViewportQuad\n * @constructor\n *\n * @param {BoundingRectangle} [rectangle] The {@link BoundingRectangle} defining the quad's position within the viewport.\n * @param {Material} [material] The {@link Material} defining the surface appearance of the viewport quad.\n *\n * @example\n * const viewportQuad = new Cesium.ViewportQuad(new Cesium.BoundingRectangle(0, 0, 80, 40));\n * viewportQuad.material.uniforms.color = new Cesium.Color(1.0, 0.0, 0.0, 1.0);\n */\nfunction ViewportQuad(rectangle, material) {\n  /**\n   * Determines if the viewport quad primitive will be shown.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  this.show = true;\n\n  if (!defined(rectangle)) {\n    rectangle = new BoundingRectangle();\n  }\n\n  /**\n   * The BoundingRectangle defining the quad's position within the viewport.\n   *\n   * @type {BoundingRectangle}\n   *\n   * @example\n   * viewportQuad.rectangle = new Cesium.BoundingRectangle(0, 0, 80, 40);\n   */\n  this.rectangle = BoundingRectangle.clone(rectangle);\n\n  if (!defined(material)) {\n    material = Material.fromType(Material.ColorType, {\n      color: new Color(1.0, 1.0, 1.0, 1.0),\n    });\n  }\n\n  /**\n   * The surface appearance of the viewport quad.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * <p>\n   * The default material is <code>Material.ColorType</code>.\n   * </p>\n   *\n   * @type Material\n   *\n   * @example\n   * // 1. Change the color of the default material to yellow\n   * viewportQuad.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n   *\n   * // 2. Change material to horizontal stripes\n   * viewportQuad.material = Cesium.Material.fromType(Cesium.Material.StripeType);\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = material;\n  this._material = undefined;\n\n  this._overlayCommand = undefined;\n  this._rs = undefined;\n}\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {DeveloperError} this.material must be defined.\n * @exception {DeveloperError} this.rectangle must be defined.\n */\nViewportQuad.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(this.material)) {\n    throw new DeveloperError(\"this.material must be defined.\");\n  }\n  if (!defined(this.rectangle)) {\n    throw new DeveloperError(\"this.rectangle must be defined.\");\n  }\n  //>>includeEnd('debug');\n\n  const rs = this._rs;\n  if (!defined(rs) || !BoundingRectangle.equals(rs.viewport, this.rectangle)) {\n    this._rs = RenderState.fromCache({\n      blending: BlendingState.ALPHA_BLEND,\n      viewport: this.rectangle,\n    });\n  }\n\n  const pass = frameState.passes;\n  if (pass.render) {\n    const context = frameState.context;\n\n    if (this._material !== this.material || !defined(this._overlayCommand)) {\n      // Recompile shader when material changes\n      this._material = this.material;\n\n      if (defined(this._overlayCommand)) {\n        this._overlayCommand.shaderProgram.destroy();\n      }\n\n      const fs = new ShaderSource({\n        sources: [this._material.shaderSource, ViewportQuadFS],\n      });\n      this._overlayCommand = context.createViewportQuadCommand(fs, {\n        renderState: this._rs,\n        uniformMap: this._material._uniforms,\n        owner: this,\n      });\n      this._overlayCommand.pass = Pass.OVERLAY;\n    }\n\n    this._material.update(context);\n\n    this._overlayCommand.renderState = this._rs;\n    this._overlayCommand.uniformMap = this._material._uniforms;\n    frameState.commandList.push(this._overlayCommand);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {boolean} True if this object was destroyed; otherwise, false.\n *\n * @see ViewportQuad#destroy\n */\nViewportQuad.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * quad = quad && quad.destroy();\n *\n * @see ViewportQuad#isDestroyed\n */\nViewportQuad.prototype.destroy = function () {\n  if (defined(this._overlayCommand)) {\n    this._overlayCommand.shaderProgram =\n      this._overlayCommand.shaderProgram &&\n      this._overlayCommand.shaderProgram.destroy();\n  }\n  return destroyObject(this);\n};\nexport default ViewportQuad;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}