{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\n\n/**\n * A mesh plus related metadata for a single tile of terrain.  Instances of this type are\n * usually created from raw {@link TerrainData}.\n *\n * @alias TerrainMesh\n * @constructor\n *\n * @param {Cartesian3} center The center of the tile.  Vertex positions are specified relative to this center.\n * @param {Float32Array} vertices The vertex data, including positions, texture coordinates, and heights.\n *                       The vertex data is in the order [X, Y, Z, H, U, V], where X, Y, and Z represent\n *                       the Cartesian position of the vertex, H is the height above the ellipsoid, and\n *                       U and V are the texture coordinates.\n * @param {Uint8Array|Uint16Array|Uint32Array} indices The indices describing how the vertices are connected to form triangles.\n * @param {number} indexCountWithoutSkirts The index count of the mesh not including skirts.\n * @param {number} vertexCountWithoutSkirts The vertex count of the mesh not including skirts.\n * @param {number} minimumHeight The lowest height in the tile, in meters above the ellipsoid.\n * @param {number} maximumHeight The highest height in the tile, in meters above the ellipsoid.\n * @param {BoundingSphere} boundingSphere3D A bounding sphere that completely contains the tile.\n * @param {Cartesian3} occludeePointInScaledSpace The occludee point of the tile, represented in ellipsoid-\n *                     scaled space, and used for horizon culling.  If this point is below the horizon,\n *                     the tile is considered to be entirely below the horizon.\n * @param {number} [vertexStride=6] The number of components in each vertex.\n * @param {OrientedBoundingBox} [orientedBoundingBox] A bounding box that completely contains the tile.\n * @param {TerrainEncoding} encoding Information used to decode the mesh.\n * @param {number[]} westIndicesSouthToNorth The indices of the vertices on the Western edge of the tile, ordered from South to North (clockwise).\n * @param {number[]} southIndicesEastToWest The indices of the vertices on the Southern edge of the tile, ordered from East to West (clockwise).\n * @param {number[]} eastIndicesNorthToSouth The indices of the vertices on the Eastern edge of the tile, ordered from North to South (clockwise).\n * @param {number[]} northIndicesWestToEast The indices of the vertices on the Northern edge of the tile, ordered from West to East (clockwise).\n *\n * @private\n */\nfunction TerrainMesh(center, vertices, indices, indexCountWithoutSkirts, vertexCountWithoutSkirts, minimumHeight, maximumHeight, boundingSphere3D, occludeePointInScaledSpace, vertexStride, orientedBoundingBox, encoding, westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast) {\n  /**\n   * The center of the tile.  Vertex positions are specified relative to this center.\n   * @type {Cartesian3}\n   */\n  this.center = center;\n\n  /**\n   * The vertex data, including positions, texture coordinates, and heights.\n   * The vertex data is in the order [X, Y, Z, H, U, V], where X, Y, and Z represent\n   * the Cartesian position of the vertex, H is the height above the ellipsoid, and\n   * U and V are the texture coordinates.  The vertex data may have additional attributes after those\n   * mentioned above when the {@link TerrainMesh#stride} is greater than 6.\n   * @type {Float32Array}\n   */\n  this.vertices = vertices;\n\n  /**\n   * The number of components in each vertex.  Typically this is 6 for the 6 components\n   * [X, Y, Z, H, U, V], but if each vertex has additional data (such as a vertex normal), this value\n   * may be higher.\n   * @type {number}\n   */\n  this.stride = defaultValue(vertexStride, 6);\n\n  /**\n   * The indices describing how the vertices are connected to form triangles.\n   * @type {Uint8Array|Uint16Array|Uint32Array}\n   */\n  this.indices = indices;\n\n  /**\n   * The index count of the mesh not including skirts.\n   * @type {number}\n   */\n  this.indexCountWithoutSkirts = indexCountWithoutSkirts;\n\n  /**\n   * The vertex count of the mesh not including skirts.\n   * @type {number}\n   */\n  this.vertexCountWithoutSkirts = vertexCountWithoutSkirts;\n\n  /**\n   * The lowest height in the tile, in meters above the ellipsoid.\n   * @type {number}\n   */\n  this.minimumHeight = minimumHeight;\n\n  /**\n   * The highest height in the tile, in meters above the ellipsoid.\n   * @type {number}\n   */\n  this.maximumHeight = maximumHeight;\n\n  /**\n   * A bounding sphere that completely contains the tile.\n   * @type {BoundingSphere}\n   */\n  this.boundingSphere3D = boundingSphere3D;\n\n  /**\n   * The occludee point of the tile, represented in ellipsoid-\n   * scaled space, and used for horizon culling.  If this point is below the horizon,\n   * the tile is considered to be entirely below the horizon.\n   * @type {Cartesian3}\n   */\n  this.occludeePointInScaledSpace = occludeePointInScaledSpace;\n\n  /**\n   * A bounding box that completely contains the tile.\n   * @type {OrientedBoundingBox}\n   */\n  this.orientedBoundingBox = orientedBoundingBox;\n\n  /**\n   * Information for decoding the mesh vertices.\n   * @type {TerrainEncoding}\n   */\n  this.encoding = encoding;\n\n  /**\n   * The indices of the vertices on the Western edge of the tile, ordered from South to North (clockwise).\n   * @type {number[]}\n   */\n  this.westIndicesSouthToNorth = westIndicesSouthToNorth;\n\n  /**\n   * The indices of the vertices on the Southern edge of the tile, ordered from East to West (clockwise).\n   * @type {number[]}\n   */\n  this.southIndicesEastToWest = southIndicesEastToWest;\n\n  /**\n   * The indices of the vertices on the Eastern edge of the tile, ordered from North to South (clockwise).\n   * @type {number[]}\n   */\n  this.eastIndicesNorthToSouth = eastIndicesNorthToSouth;\n\n  /**\n   * The indices of the vertices on the Northern edge of the tile, ordered from West to East (clockwise).\n   * @type {number[]}\n   */\n  this.northIndicesWestToEast = northIndicesWestToEast;\n}\nexport default TerrainMesh;","map":{"version":3,"names":["defaultValue","TerrainMesh","center","vertices","indices","indexCountWithoutSkirts","vertexCountWithoutSkirts","minimumHeight","maximumHeight","boundingSphere3D","occludeePointInScaledSpace","vertexStride","orientedBoundingBox","encoding","westIndicesSouthToNorth","southIndicesEastToWest","eastIndicesNorthToSouth","northIndicesWestToEast","stride"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/TerrainMesh.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\n\n/**\n * A mesh plus related metadata for a single tile of terrain.  Instances of this type are\n * usually created from raw {@link TerrainData}.\n *\n * @alias TerrainMesh\n * @constructor\n *\n * @param {Cartesian3} center The center of the tile.  Vertex positions are specified relative to this center.\n * @param {Float32Array} vertices The vertex data, including positions, texture coordinates, and heights.\n *                       The vertex data is in the order [X, Y, Z, H, U, V], where X, Y, and Z represent\n *                       the Cartesian position of the vertex, H is the height above the ellipsoid, and\n *                       U and V are the texture coordinates.\n * @param {Uint8Array|Uint16Array|Uint32Array} indices The indices describing how the vertices are connected to form triangles.\n * @param {number} indexCountWithoutSkirts The index count of the mesh not including skirts.\n * @param {number} vertexCountWithoutSkirts The vertex count of the mesh not including skirts.\n * @param {number} minimumHeight The lowest height in the tile, in meters above the ellipsoid.\n * @param {number} maximumHeight The highest height in the tile, in meters above the ellipsoid.\n * @param {BoundingSphere} boundingSphere3D A bounding sphere that completely contains the tile.\n * @param {Cartesian3} occludeePointInScaledSpace The occludee point of the tile, represented in ellipsoid-\n *                     scaled space, and used for horizon culling.  If this point is below the horizon,\n *                     the tile is considered to be entirely below the horizon.\n * @param {number} [vertexStride=6] The number of components in each vertex.\n * @param {OrientedBoundingBox} [orientedBoundingBox] A bounding box that completely contains the tile.\n * @param {TerrainEncoding} encoding Information used to decode the mesh.\n * @param {number[]} westIndicesSouthToNorth The indices of the vertices on the Western edge of the tile, ordered from South to North (clockwise).\n * @param {number[]} southIndicesEastToWest The indices of the vertices on the Southern edge of the tile, ordered from East to West (clockwise).\n * @param {number[]} eastIndicesNorthToSouth The indices of the vertices on the Eastern edge of the tile, ordered from North to South (clockwise).\n * @param {number[]} northIndicesWestToEast The indices of the vertices on the Northern edge of the tile, ordered from West to East (clockwise).\n *\n * @private\n */\nfunction TerrainMesh(\n  center,\n  vertices,\n  indices,\n  indexCountWithoutSkirts,\n  vertexCountWithoutSkirts,\n  minimumHeight,\n  maximumHeight,\n  boundingSphere3D,\n  occludeePointInScaledSpace,\n  vertexStride,\n  orientedBoundingBox,\n  encoding,\n  westIndicesSouthToNorth,\n  southIndicesEastToWest,\n  eastIndicesNorthToSouth,\n  northIndicesWestToEast,\n) {\n  /**\n   * The center of the tile.  Vertex positions are specified relative to this center.\n   * @type {Cartesian3}\n   */\n  this.center = center;\n\n  /**\n   * The vertex data, including positions, texture coordinates, and heights.\n   * The vertex data is in the order [X, Y, Z, H, U, V], where X, Y, and Z represent\n   * the Cartesian position of the vertex, H is the height above the ellipsoid, and\n   * U and V are the texture coordinates.  The vertex data may have additional attributes after those\n   * mentioned above when the {@link TerrainMesh#stride} is greater than 6.\n   * @type {Float32Array}\n   */\n  this.vertices = vertices;\n\n  /**\n   * The number of components in each vertex.  Typically this is 6 for the 6 components\n   * [X, Y, Z, H, U, V], but if each vertex has additional data (such as a vertex normal), this value\n   * may be higher.\n   * @type {number}\n   */\n  this.stride = defaultValue(vertexStride, 6);\n\n  /**\n   * The indices describing how the vertices are connected to form triangles.\n   * @type {Uint8Array|Uint16Array|Uint32Array}\n   */\n  this.indices = indices;\n\n  /**\n   * The index count of the mesh not including skirts.\n   * @type {number}\n   */\n  this.indexCountWithoutSkirts = indexCountWithoutSkirts;\n\n  /**\n   * The vertex count of the mesh not including skirts.\n   * @type {number}\n   */\n  this.vertexCountWithoutSkirts = vertexCountWithoutSkirts;\n\n  /**\n   * The lowest height in the tile, in meters above the ellipsoid.\n   * @type {number}\n   */\n  this.minimumHeight = minimumHeight;\n\n  /**\n   * The highest height in the tile, in meters above the ellipsoid.\n   * @type {number}\n   */\n  this.maximumHeight = maximumHeight;\n\n  /**\n   * A bounding sphere that completely contains the tile.\n   * @type {BoundingSphere}\n   */\n  this.boundingSphere3D = boundingSphere3D;\n\n  /**\n   * The occludee point of the tile, represented in ellipsoid-\n   * scaled space, and used for horizon culling.  If this point is below the horizon,\n   * the tile is considered to be entirely below the horizon.\n   * @type {Cartesian3}\n   */\n  this.occludeePointInScaledSpace = occludeePointInScaledSpace;\n\n  /**\n   * A bounding box that completely contains the tile.\n   * @type {OrientedBoundingBox}\n   */\n  this.orientedBoundingBox = orientedBoundingBox;\n\n  /**\n   * Information for decoding the mesh vertices.\n   * @type {TerrainEncoding}\n   */\n  this.encoding = encoding;\n\n  /**\n   * The indices of the vertices on the Western edge of the tile, ordered from South to North (clockwise).\n   * @type {number[]}\n   */\n  this.westIndicesSouthToNorth = westIndicesSouthToNorth;\n\n  /**\n   * The indices of the vertices on the Southern edge of the tile, ordered from East to West (clockwise).\n   * @type {number[]}\n   */\n  this.southIndicesEastToWest = southIndicesEastToWest;\n\n  /**\n   * The indices of the vertices on the Eastern edge of the tile, ordered from North to South (clockwise).\n   * @type {number[]}\n   */\n  this.eastIndicesNorthToSouth = eastIndicesNorthToSouth;\n\n  /**\n   * The indices of the vertices on the Northern edge of the tile, ordered from West to East (clockwise).\n   * @type {number[]}\n   */\n  this.northIndicesWestToEast = northIndicesWestToEast;\n}\nexport default TerrainMesh;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAClBC,MAAM,EACNC,QAAQ,EACRC,OAAO,EACPC,uBAAuB,EACvBC,wBAAwB,EACxBC,aAAa,EACbC,aAAa,EACbC,gBAAgB,EAChBC,0BAA0B,EAC1BC,YAAY,EACZC,mBAAmB,EACnBC,QAAQ,EACRC,uBAAuB,EACvBC,sBAAsB,EACtBC,uBAAuB,EACvBC,sBAAsB,EACtB;EACA;AACF;AACA;AACA;EACE,IAAI,CAACf,MAAM,GAAGA,MAAM;;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,QAAQ,GAAGA,QAAQ;;EAExB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACe,MAAM,GAAGlB,YAAY,CAACW,YAAY,EAAE,CAAC,CAAC;;EAE3C;AACF;AACA;AACA;EACE,IAAI,CAACP,OAAO,GAAGA,OAAO;;EAEtB;AACF;AACA;AACA;EACE,IAAI,CAACC,uBAAuB,GAAGA,uBAAuB;;EAEtD;AACF;AACA;AACA;EACE,IAAI,CAACC,wBAAwB,GAAGA,wBAAwB;;EAExD;AACF;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAGA,aAAa;;EAElC;AACF;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAGA,aAAa;;EAElC;AACF;AACA;AACA;EACE,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;;EAExC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,0BAA0B,GAAGA,0BAA0B;;EAE5D;AACF;AACA;AACA;EACE,IAAI,CAACE,mBAAmB,GAAGA,mBAAmB;;EAE9C;AACF;AACA;AACA;EACE,IAAI,CAACC,QAAQ,GAAGA,QAAQ;;EAExB;AACF;AACA;AACA;EACE,IAAI,CAACC,uBAAuB,GAAGA,uBAAuB;;EAEtD;AACF;AACA;AACA;EACE,IAAI,CAACC,sBAAsB,GAAGA,sBAAsB;;EAEpD;AACF;AACA;AACA;EACE,IAAI,CAACC,uBAAuB,GAAGA,uBAAuB;;EAEtD;AACF;AACA;AACA;EACE,IAAI,CAACC,sBAAsB,GAAGA,sBAAsB;AACtD;AACA,eAAehB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}