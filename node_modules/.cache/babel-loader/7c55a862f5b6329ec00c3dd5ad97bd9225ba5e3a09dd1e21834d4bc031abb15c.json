{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * A set of curvilinear 3-dimensional coordinates.\n *\n * @alias Spherical\n * @constructor\n *\n * @param {number} [clock=0.0] The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {number} [cone=0.0] The angular coordinate measured from the positive z-axis and toward the negative z-axis.\n * @param {number} [magnitude=1.0] The linear coordinate measured from the origin.\n */\nfunction Spherical(clock, cone, magnitude) {\n  /**\n   * The clock component.\n   * @type {number}\n   * @default 0.0\n   */\n  this.clock = defaultValue(clock, 0.0);\n  /**\n   * The cone component.\n   * @type {number}\n   * @default 0.0\n   */\n  this.cone = defaultValue(cone, 0.0);\n  /**\n   * The magnitude component.\n   * @type {number}\n   * @default 1.0\n   */\n  this.magnitude = defaultValue(magnitude, 1.0);\n}\n\n/**\n * Converts the provided Cartesian3 into Spherical coordinates.\n *\n * @param {Cartesian3} cartesian3 The Cartesian3 to be converted to Spherical.\n * @param {Spherical} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter, or a new instance if one was not provided.\n */\nSpherical.fromCartesian3 = function (cartesian3, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian3\", cartesian3);\n  //>>includeEnd('debug');\n\n  const x = cartesian3.x;\n  const y = cartesian3.y;\n  const z = cartesian3.z;\n  const radialSquared = x * x + y * y;\n  if (!defined(result)) {\n    result = new Spherical();\n  }\n  result.clock = Math.atan2(y, x);\n  result.cone = Math.atan2(Math.sqrt(radialSquared), z);\n  result.magnitude = Math.sqrt(radialSquared + z * z);\n  return result;\n};\n\n/**\n * Creates a duplicate of a Spherical.\n *\n * @param {Spherical} spherical The spherical to clone.\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined. (Returns undefined if spherical is undefined)\n */\nSpherical.clone = function (spherical, result) {\n  if (!defined(spherical)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Spherical(spherical.clock, spherical.cone, spherical.magnitude);\n  }\n  result.clock = spherical.clock;\n  result.cone = spherical.cone;\n  result.magnitude = spherical.magnitude;\n  return result;\n};\n\n/**\n * Computes the normalized version of the provided spherical.\n *\n * @param {Spherical} spherical The spherical to be normalized.\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined.\n */\nSpherical.normalize = function (spherical, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"spherical\", spherical);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Spherical(spherical.clock, spherical.cone, 1.0);\n  }\n  result.clock = spherical.clock;\n  result.cone = spherical.cone;\n  result.magnitude = 1.0;\n  return result;\n};\n\n/**\n * Returns true if the first spherical is equal to the second spherical, false otherwise.\n *\n * @param {Spherical} left The first Spherical to be compared.\n * @param {Spherical} right The second Spherical to be compared.\n * @returns {boolean} true if the first spherical is equal to the second spherical, false otherwise.\n */\nSpherical.equals = function (left, right) {\n  return left === right || defined(left) && defined(right) && left.clock === right.clock && left.cone === right.cone && left.magnitude === right.magnitude;\n};\n\n/**\n * Returns true if the first spherical is within the provided epsilon of the second spherical, false otherwise.\n *\n * @param {Spherical} left The first Spherical to be compared.\n * @param {Spherical} right The second Spherical to be compared.\n * @param {number} [epsilon=0.0] The epsilon to compare against.\n * @returns {boolean} true if the first spherical is within the provided epsilon of the second spherical, false otherwise.\n */\nSpherical.equalsEpsilon = function (left, right, epsilon) {\n  epsilon = defaultValue(epsilon, 0.0);\n  return left === right || defined(left) && defined(right) && Math.abs(left.clock - right.clock) <= epsilon && Math.abs(left.cone - right.cone) <= epsilon && Math.abs(left.magnitude - right.magnitude) <= epsilon;\n};\n\n/**\n * Returns true if this spherical is equal to the provided spherical, false otherwise.\n *\n * @param {Spherical} other The Spherical to be compared.\n * @returns {boolean} true if this spherical is equal to the provided spherical, false otherwise.\n */\nSpherical.prototype.equals = function (other) {\n  return Spherical.equals(this, other);\n};\n\n/**\n * Creates a duplicate of this Spherical.\n *\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined.\n */\nSpherical.prototype.clone = function (result) {\n  return Spherical.clone(this, result);\n};\n\n/**\n * Returns true if this spherical is within the provided epsilon of the provided spherical, false otherwise.\n *\n * @param {Spherical} other The Spherical to be compared.\n * @param {number} epsilon The epsilon to compare against.\n * @returns {boolean} true if this spherical is within the provided epsilon of the provided spherical, false otherwise.\n */\nSpherical.prototype.equalsEpsilon = function (other, epsilon) {\n  return Spherical.equalsEpsilon(this, other, epsilon);\n};\n\n/**\n * Returns a string representing this instance in the format (clock, cone, magnitude).\n *\n * @returns {string} A string representing this instance.\n */\nSpherical.prototype.toString = function () {\n  return `(${this.clock}, ${this.cone}, ${this.magnitude})`;\n};\nexport default Spherical;","map":{"version":3,"names":["Check","defaultValue","defined","Spherical","clock","cone","magnitude","fromCartesian3","cartesian3","result","typeOf","object","x","y","z","radialSquared","Math","atan2","sqrt","clone","spherical","undefined","normalize","equals","left","right","equalsEpsilon","epsilon","abs","prototype","other","toString"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/Spherical.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * A set of curvilinear 3-dimensional coordinates.\n *\n * @alias Spherical\n * @constructor\n *\n * @param {number} [clock=0.0] The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {number} [cone=0.0] The angular coordinate measured from the positive z-axis and toward the negative z-axis.\n * @param {number} [magnitude=1.0] The linear coordinate measured from the origin.\n */\nfunction Spherical(clock, cone, magnitude) {\n  /**\n   * The clock component.\n   * @type {number}\n   * @default 0.0\n   */\n  this.clock = defaultValue(clock, 0.0);\n  /**\n   * The cone component.\n   * @type {number}\n   * @default 0.0\n   */\n  this.cone = defaultValue(cone, 0.0);\n  /**\n   * The magnitude component.\n   * @type {number}\n   * @default 1.0\n   */\n  this.magnitude = defaultValue(magnitude, 1.0);\n}\n\n/**\n * Converts the provided Cartesian3 into Spherical coordinates.\n *\n * @param {Cartesian3} cartesian3 The Cartesian3 to be converted to Spherical.\n * @param {Spherical} [result] The object in which the result will be stored, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter, or a new instance if one was not provided.\n */\nSpherical.fromCartesian3 = function (cartesian3, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian3\", cartesian3);\n  //>>includeEnd('debug');\n\n  const x = cartesian3.x;\n  const y = cartesian3.y;\n  const z = cartesian3.z;\n  const radialSquared = x * x + y * y;\n\n  if (!defined(result)) {\n    result = new Spherical();\n  }\n\n  result.clock = Math.atan2(y, x);\n  result.cone = Math.atan2(Math.sqrt(radialSquared), z);\n  result.magnitude = Math.sqrt(radialSquared + z * z);\n  return result;\n};\n\n/**\n * Creates a duplicate of a Spherical.\n *\n * @param {Spherical} spherical The spherical to clone.\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined. (Returns undefined if spherical is undefined)\n */\nSpherical.clone = function (spherical, result) {\n  if (!defined(spherical)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new Spherical(spherical.clock, spherical.cone, spherical.magnitude);\n  }\n\n  result.clock = spherical.clock;\n  result.cone = spherical.cone;\n  result.magnitude = spherical.magnitude;\n  return result;\n};\n\n/**\n * Computes the normalized version of the provided spherical.\n *\n * @param {Spherical} spherical The spherical to be normalized.\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined.\n */\nSpherical.normalize = function (spherical, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"spherical\", spherical);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Spherical(spherical.clock, spherical.cone, 1.0);\n  }\n\n  result.clock = spherical.clock;\n  result.cone = spherical.cone;\n  result.magnitude = 1.0;\n  return result;\n};\n\n/**\n * Returns true if the first spherical is equal to the second spherical, false otherwise.\n *\n * @param {Spherical} left The first Spherical to be compared.\n * @param {Spherical} right The second Spherical to be compared.\n * @returns {boolean} true if the first spherical is equal to the second spherical, false otherwise.\n */\nSpherical.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.clock === right.clock &&\n      left.cone === right.cone &&\n      left.magnitude === right.magnitude)\n  );\n};\n\n/**\n * Returns true if the first spherical is within the provided epsilon of the second spherical, false otherwise.\n *\n * @param {Spherical} left The first Spherical to be compared.\n * @param {Spherical} right The second Spherical to be compared.\n * @param {number} [epsilon=0.0] The epsilon to compare against.\n * @returns {boolean} true if the first spherical is within the provided epsilon of the second spherical, false otherwise.\n */\nSpherical.equalsEpsilon = function (left, right, epsilon) {\n  epsilon = defaultValue(epsilon, 0.0);\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      Math.abs(left.clock - right.clock) <= epsilon &&\n      Math.abs(left.cone - right.cone) <= epsilon &&\n      Math.abs(left.magnitude - right.magnitude) <= epsilon)\n  );\n};\n\n/**\n * Returns true if this spherical is equal to the provided spherical, false otherwise.\n *\n * @param {Spherical} other The Spherical to be compared.\n * @returns {boolean} true if this spherical is equal to the provided spherical, false otherwise.\n */\nSpherical.prototype.equals = function (other) {\n  return Spherical.equals(this, other);\n};\n\n/**\n * Creates a duplicate of this Spherical.\n *\n * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\n * @returns {Spherical} The modified result parameter or a new instance if result was undefined.\n */\nSpherical.prototype.clone = function (result) {\n  return Spherical.clone(this, result);\n};\n\n/**\n * Returns true if this spherical is within the provided epsilon of the provided spherical, false otherwise.\n *\n * @param {Spherical} other The Spherical to be compared.\n * @param {number} epsilon The epsilon to compare against.\n * @returns {boolean} true if this spherical is within the provided epsilon of the provided spherical, false otherwise.\n */\nSpherical.prototype.equalsEpsilon = function (other, epsilon) {\n  return Spherical.equalsEpsilon(this, other, epsilon);\n};\n\n/**\n * Returns a string representing this instance in the format (clock, cone, magnitude).\n *\n * @returns {string} A string representing this instance.\n */\nSpherical.prototype.toString = function () {\n  return `(${this.clock}, ${this.cone}, ${this.magnitude})`;\n};\nexport default Spherical;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}