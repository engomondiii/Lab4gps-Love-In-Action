{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PlaneGeometry from \"../Core/PlaneGeometry.js\";\nimport PlaneOutlineGeometry from \"../Core/PlaneOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\nconst positionScratch = new Cartesian3();\nconst scratchColor = new Color();\nfunction PlaneGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.plane = undefined;\n  this.dimensions = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for planes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PlaneGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PlaneGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PlaneGeometryOptions(entity),\n    geometryPropertyName: \"plane\",\n    observedPropertyNames: [\"availability\", \"position\", \"orientation\", \"plane\"]\n  });\n  this._onEntityPropertyChanged(entity, \"plane\", entity.plane, undefined);\n}\nif (defined(Object.create)) {\n  PlaneGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  PlaneGeometryUpdater.prototype.constructor = PlaneGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPlaneGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\"This instance does not represent a filled geometry.\");\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  let attributes;\n  let color;\n  const show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n  const distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute\n    };\n  }\n  const planeGraphics = entity.plane;\n  const options = this._options;\n  let modelMatrix = entity.computeModelMatrix(time);\n  const plane = Property.getValueOrDefault(planeGraphics.plane, time, options.plane);\n  const dimensions = Property.getValueOrUndefined(planeGraphics.dimensions, time, options.dimensions);\n  options.plane = plane;\n  options.dimensions = dimensions;\n  modelMatrix = createPrimitiveMatrix(plane, dimensions, modelMatrix, modelMatrix);\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PlaneGeometry(this._options),\n    modelMatrix: modelMatrix,\n    attributes: attributes\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPlaneGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\"This instance does not represent an outlined geometry.\");\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n  const planeGraphics = entity.plane;\n  const options = this._options;\n  let modelMatrix = entity.computeModelMatrix(time);\n  const plane = Property.getValueOrDefault(planeGraphics.plane, time, options.plane);\n  const dimensions = Property.getValueOrUndefined(planeGraphics.dimensions, time, options.dimensions);\n  options.plane = plane;\n  options.dimensions = dimensions;\n  modelMatrix = createPrimitiveMatrix(plane, dimensions, modelMatrix, modelMatrix);\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PlaneOutlineGeometry(),\n    modelMatrix: modelMatrix,\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n    }\n  });\n};\nPlaneGeometryUpdater.prototype._isHidden = function (entity, plane) {\n  return !defined(plane.plane) || !defined(plane.dimensions) || !defined(entity.position) || GeometryUpdater.prototype._isHidden.call(this, entity, plane);\n};\nPlaneGeometryUpdater.prototype._getIsClosed = function (options) {\n  return false;\n};\nPlaneGeometryUpdater.prototype._isDynamic = function (entity, plane) {\n  return !entity.position.isConstant ||\n  //\n  !Property.isConstant(entity.orientation) ||\n  //\n  !plane.plane.isConstant ||\n  //\n  !plane.dimensions.isConstant ||\n  //\n  !Property.isConstant(plane.outlineWidth);\n};\nPlaneGeometryUpdater.prototype._setStaticOptions = function (entity, plane) {\n  const isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n  const options = this._options;\n  options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.plane = plane.plane.getValue(Iso8601.MINIMUM_VALUE, options.plane);\n  options.dimensions = plane.dimensions.getValue(Iso8601.MINIMUM_VALUE, options.dimensions);\n};\nPlaneGeometryUpdater.DynamicGeometryUpdater = DynamicPlaneGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicPlaneGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n  DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n}\nif (defined(Object.create)) {\n  DynamicPlaneGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n  DynamicPlaneGeometryUpdater.prototype.constructor = DynamicPlaneGeometryUpdater;\n}\nDynamicPlaneGeometryUpdater.prototype._isHidden = function (entity, plane, time) {\n  const options = this._options;\n  const position = Property.getValueOrUndefined(entity.position, time, positionScratch);\n  return !defined(position) || !defined(options.plane) || !defined(options.dimensions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, plane, time);\n};\nDynamicPlaneGeometryUpdater.prototype._setOptions = function (entity, plane, time) {\n  const options = this._options;\n  options.plane = Property.getValueOrDefault(plane.plane, time, options.plane);\n  options.dimensions = Property.getValueOrUndefined(plane.dimensions, time, options.dimensions);\n};\nconst scratchAxis = new Cartesian3();\nconst scratchUp = new Cartesian3();\nconst scratchTranslation = new Cartesian3();\nconst scratchScale = new Cartesian3();\nconst scratchRotation = new Matrix3();\nconst scratchRotationScale = new Matrix3();\nconst scratchLocalTransform = new Matrix4();\nfunction createPrimitiveMatrix(plane, dimensions, transform, result) {\n  const normal = plane.normal;\n  const distance = plane.distance;\n  const translation = Cartesian3.multiplyByScalar(normal, -distance, scratchTranslation);\n  let up = Cartesian3.clone(Cartesian3.UNIT_Z, scratchUp);\n  if (CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(up, normal)), 1.0, CesiumMath.EPSILON8)) {\n    up = Cartesian3.clone(Cartesian3.UNIT_Y, up);\n  }\n  const left = Cartesian3.cross(up, normal, scratchAxis);\n  up = Cartesian3.cross(normal, left, up);\n  Cartesian3.normalize(left, left);\n  Cartesian3.normalize(up, up);\n  const rotationMatrix = scratchRotation;\n  Matrix3.setColumn(rotationMatrix, 0, left, rotationMatrix);\n  Matrix3.setColumn(rotationMatrix, 1, up, rotationMatrix);\n  Matrix3.setColumn(rotationMatrix, 2, normal, rotationMatrix);\n  const scale = Cartesian3.fromElements(dimensions.x, dimensions.y, 1.0, scratchScale);\n  const rotationScaleMatrix = Matrix3.multiplyByScale(rotationMatrix, scale, scratchRotationScale);\n  const localTransform = Matrix4.fromRotationTranslation(rotationScaleMatrix, translation, scratchLocalTransform);\n  return Matrix4.multiplyTransformation(transform, localTransform, result);\n}\n\n/**\n * @private\n */\nPlaneGeometryUpdater.createPrimitiveMatrix = createPrimitiveMatrix;\nexport default PlaneGeometryUpdater;","map":{"version":3,"names":["Cartesian3","Check","Color","ColorGeometryInstanceAttribute","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","GeometryInstance","Iso8601","CesiumMath","Matrix3","Matrix4","PlaneGeometry","PlaneOutlineGeometry","ShowGeometryInstanceAttribute","MaterialAppearance","PerInstanceColorAppearance","ColorMaterialProperty","DynamicGeometryUpdater","GeometryUpdater","Property","positionScratch","scratchColor","PlaneGeometryOptions","entity","id","vertexFormat","undefined","plane","dimensions","PlaneGeometryUpdater","scene","call","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","Object","create","prototype","constructor","createFillGeometryInstance","time","_fillEnabled","_entity","isAvailable","attributes","color","show","isShowing","_showProperty","getValue","_fillProperty","distanceDisplayCondition","_distanceDisplayConditionProperty","distanceDisplayConditionAttribute","fromDistanceDisplayCondition","_materialProperty","currentColor","isConstant","WHITE","fromColor","planeGraphics","options","_options","modelMatrix","computeModelMatrix","getValueOrDefault","getValueOrUndefined","createPrimitiveMatrix","geometry","createOutlineGeometryInstance","_outlineEnabled","outlineColor","_outlineColorProperty","BLACK","_showOutlineProperty","_isHidden","position","_getIsClosed","_isDynamic","orientation","outlineWidth","_setStaticOptions","isColorMaterial","VERTEX_FORMAT","MaterialSupport","TEXTURED","MINIMUM_VALUE","DynamicPlaneGeometryUpdater","geometryUpdater","primitives","groundPrimitives","_setOptions","scratchAxis","scratchUp","scratchTranslation","scratchScale","scratchRotation","scratchRotationScale","scratchLocalTransform","transform","result","normal","distance","translation","multiplyByScalar","up","clone","UNIT_Z","equalsEpsilon","Math","abs","dot","EPSILON8","UNIT_Y","left","cross","normalize","rotationMatrix","setColumn","scale","fromElements","x","y","rotationScaleMatrix","multiplyByScale","localTransform","fromRotationTranslation","multiplyTransformation"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/DataSources/PlaneGeometryUpdater.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PlaneGeometry from \"../Core/PlaneGeometry.js\";\nimport PlaneOutlineGeometry from \"../Core/PlaneOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nconst positionScratch = new Cartesian3();\nconst scratchColor = new Color();\n\nfunction PlaneGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.plane = undefined;\n  this.dimensions = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for planes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PlaneGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PlaneGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PlaneGeometryOptions(entity),\n    geometryPropertyName: \"plane\",\n    observedPropertyNames: [\"availability\", \"position\", \"orientation\", \"plane\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"plane\", entity.plane, undefined);\n}\n\nif (defined(Object.create)) {\n  PlaneGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  PlaneGeometryUpdater.prototype.constructor = PlaneGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPlaneGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  let attributes;\n\n  let color;\n  const show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time),\n  );\n  const distanceDisplayCondition =\n    this._distanceDisplayConditionProperty.getValue(time);\n  const distanceDisplayConditionAttribute =\n    DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition,\n    );\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color,\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n    };\n  }\n\n  const planeGraphics = entity.plane;\n  const options = this._options;\n  let modelMatrix = entity.computeModelMatrix(time);\n  const plane = Property.getValueOrDefault(\n    planeGraphics.plane,\n    time,\n    options.plane,\n  );\n  const dimensions = Property.getValueOrUndefined(\n    planeGraphics.dimensions,\n    time,\n    options.dimensions,\n  );\n\n  options.plane = plane;\n  options.dimensions = dimensions;\n\n  modelMatrix = createPrimitiveMatrix(\n    plane,\n    dimensions,\n    modelMatrix,\n    modelMatrix,\n  );\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PlaneGeometry(this._options),\n    modelMatrix: modelMatrix,\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPlaneGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor,\n  );\n  const distanceDisplayCondition =\n    this._distanceDisplayConditionProperty.getValue(time);\n\n  const planeGraphics = entity.plane;\n  const options = this._options;\n  let modelMatrix = entity.computeModelMatrix(time);\n  const plane = Property.getValueOrDefault(\n    planeGraphics.plane,\n    time,\n    options.plane,\n  );\n  const dimensions = Property.getValueOrUndefined(\n    planeGraphics.dimensions,\n    time,\n    options.dimensions,\n  );\n\n  options.plane = plane;\n  options.dimensions = dimensions;\n\n  modelMatrix = createPrimitiveMatrix(\n    plane,\n    dimensions,\n    modelMatrix,\n    modelMatrix,\n  );\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PlaneOutlineGeometry(),\n    modelMatrix: modelMatrix,\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(\n        isAvailable &&\n          entity.isShowing &&\n          this._showProperty.getValue(time) &&\n          this._showOutlineProperty.getValue(time),\n      ),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition:\n        DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n          distanceDisplayCondition,\n        ),\n    },\n  });\n};\n\nPlaneGeometryUpdater.prototype._isHidden = function (entity, plane) {\n  return (\n    !defined(plane.plane) ||\n    !defined(plane.dimensions) ||\n    !defined(entity.position) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, plane)\n  );\n};\n\nPlaneGeometryUpdater.prototype._getIsClosed = function (options) {\n  return false;\n};\n\nPlaneGeometryUpdater.prototype._isDynamic = function (entity, plane) {\n  return (\n    !entity.position.isConstant || //\n    !Property.isConstant(entity.orientation) || //\n    !plane.plane.isConstant || //\n    !plane.dimensions.isConstant || //\n    !Property.isConstant(plane.outlineWidth)\n  );\n};\n\nPlaneGeometryUpdater.prototype._setStaticOptions = function (entity, plane) {\n  const isColorMaterial =\n    this._materialProperty instanceof ColorMaterialProperty;\n\n  const options = this._options;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.plane = plane.plane.getValue(Iso8601.MINIMUM_VALUE, options.plane);\n  options.dimensions = plane.dimensions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.dimensions,\n  );\n};\n\nPlaneGeometryUpdater.DynamicGeometryUpdater = DynamicPlaneGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicPlaneGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives,\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives,\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicPlaneGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype,\n  );\n  DynamicPlaneGeometryUpdater.prototype.constructor =\n    DynamicPlaneGeometryUpdater;\n}\n\nDynamicPlaneGeometryUpdater.prototype._isHidden = function (\n  entity,\n  plane,\n  time,\n) {\n  const options = this._options;\n  const position = Property.getValueOrUndefined(\n    entity.position,\n    time,\n    positionScratch,\n  );\n  return (\n    !defined(position) ||\n    !defined(options.plane) ||\n    !defined(options.dimensions) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(this, entity, plane, time)\n  );\n};\n\nDynamicPlaneGeometryUpdater.prototype._setOptions = function (\n  entity,\n  plane,\n  time,\n) {\n  const options = this._options;\n  options.plane = Property.getValueOrDefault(plane.plane, time, options.plane);\n  options.dimensions = Property.getValueOrUndefined(\n    plane.dimensions,\n    time,\n    options.dimensions,\n  );\n};\n\nconst scratchAxis = new Cartesian3();\nconst scratchUp = new Cartesian3();\nconst scratchTranslation = new Cartesian3();\nconst scratchScale = new Cartesian3();\nconst scratchRotation = new Matrix3();\nconst scratchRotationScale = new Matrix3();\nconst scratchLocalTransform = new Matrix4();\nfunction createPrimitiveMatrix(plane, dimensions, transform, result) {\n  const normal = plane.normal;\n  const distance = plane.distance;\n\n  const translation = Cartesian3.multiplyByScalar(\n    normal,\n    -distance,\n    scratchTranslation,\n  );\n\n  let up = Cartesian3.clone(Cartesian3.UNIT_Z, scratchUp);\n  if (\n    CesiumMath.equalsEpsilon(\n      Math.abs(Cartesian3.dot(up, normal)),\n      1.0,\n      CesiumMath.EPSILON8,\n    )\n  ) {\n    up = Cartesian3.clone(Cartesian3.UNIT_Y, up);\n  }\n\n  const left = Cartesian3.cross(up, normal, scratchAxis);\n  up = Cartesian3.cross(normal, left, up);\n  Cartesian3.normalize(left, left);\n  Cartesian3.normalize(up, up);\n\n  const rotationMatrix = scratchRotation;\n  Matrix3.setColumn(rotationMatrix, 0, left, rotationMatrix);\n  Matrix3.setColumn(rotationMatrix, 1, up, rotationMatrix);\n  Matrix3.setColumn(rotationMatrix, 2, normal, rotationMatrix);\n\n  const scale = Cartesian3.fromElements(\n    dimensions.x,\n    dimensions.y,\n    1.0,\n    scratchScale,\n  );\n  const rotationScaleMatrix = Matrix3.multiplyByScale(\n    rotationMatrix,\n    scale,\n    scratchRotationScale,\n  );\n\n  const localTransform = Matrix4.fromRotationTranslation(\n    rotationScaleMatrix,\n    translation,\n    scratchLocalTransform,\n  );\n  return Matrix4.multiplyTransformation(transform, localTransform, result);\n}\n\n/**\n * @private\n */\nPlaneGeometryUpdater.createPrimitiveMatrix = createPrimitiveMatrix;\nexport default PlaneGeometryUpdater;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}