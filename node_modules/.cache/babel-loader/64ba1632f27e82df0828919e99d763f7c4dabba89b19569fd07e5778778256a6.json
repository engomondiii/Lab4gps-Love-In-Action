{"ast":null,"code":"import WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * The type of a geometric primitive, i.e., points, lines, and triangles.\n *\n * @enum {number}\n */\nconst PrimitiveType = {\n  /**\n   * Points primitive where each vertex (or index) is a separate point.\n   *\n   * @type {number}\n   * @constant\n   */\n  POINTS: WebGLConstants.POINTS,\n  /**\n   * Lines primitive where each two vertices (or indices) is a line segment.  Line segments are not necessarily connected.\n   *\n   * @type {number}\n   * @constant\n   */\n  LINES: WebGLConstants.LINES,\n  /**\n   * Line loop primitive where each vertex (or index) after the first connects a line to\n   * the previous vertex, and the last vertex implicitly connects to the first.\n   *\n   * @type {number}\n   * @constant\n   */\n  LINE_LOOP: WebGLConstants.LINE_LOOP,\n  /**\n   * Line strip primitive where each vertex (or index) after the first connects a line to the previous vertex.\n   *\n   * @type {number}\n   * @constant\n   */\n  LINE_STRIP: WebGLConstants.LINE_STRIP,\n  /**\n   * Triangles primitive where each three vertices (or indices) is a triangle.  Triangles do not necessarily share edges.\n   *\n   * @type {number}\n   * @constant\n   */\n  TRIANGLES: WebGLConstants.TRIANGLES,\n  /**\n   * Triangle strip primitive where each vertex (or index) after the first two connect to\n   * the previous two vertices forming a triangle.  For example, this can be used to model a wall.\n   *\n   * @type {number}\n   * @constant\n   */\n  TRIANGLE_STRIP: WebGLConstants.TRIANGLE_STRIP,\n  /**\n   * Triangle fan primitive where each vertex (or index) after the first two connect to\n   * the previous vertex and the first vertex forming a triangle.  For example, this can be used\n   * to model a cone or circle.\n   *\n   * @type {number}\n   * @constant\n   */\n  TRIANGLE_FAN: WebGLConstants.TRIANGLE_FAN\n};\n\n/**\n * @private\n */\nPrimitiveType.isLines = function (primitiveType) {\n  return primitiveType === PrimitiveType.LINES || primitiveType === PrimitiveType.LINE_LOOP || primitiveType === PrimitiveType.LINE_STRIP;\n};\n\n/**\n * @private\n */\nPrimitiveType.isTriangles = function (primitiveType) {\n  return primitiveType === PrimitiveType.TRIANGLES || primitiveType === PrimitiveType.TRIANGLE_STRIP || primitiveType === PrimitiveType.TRIANGLE_FAN;\n};\n\n/**\n * @private\n */\nPrimitiveType.validate = function (primitiveType) {\n  return primitiveType === PrimitiveType.POINTS || primitiveType === PrimitiveType.LINES || primitiveType === PrimitiveType.LINE_LOOP || primitiveType === PrimitiveType.LINE_STRIP || primitiveType === PrimitiveType.TRIANGLES || primitiveType === PrimitiveType.TRIANGLE_STRIP || primitiveType === PrimitiveType.TRIANGLE_FAN;\n};\nexport default Object.freeze(PrimitiveType);","map":{"version":3,"names":["WebGLConstants","PrimitiveType","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","isLines","primitiveType","isTriangles","validate","Object","freeze"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/PrimitiveType.js"],"sourcesContent":["import WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * The type of a geometric primitive, i.e., points, lines, and triangles.\n *\n * @enum {number}\n */\nconst PrimitiveType = {\n  /**\n   * Points primitive where each vertex (or index) is a separate point.\n   *\n   * @type {number}\n   * @constant\n   */\n  POINTS: WebGLConstants.POINTS,\n\n  /**\n   * Lines primitive where each two vertices (or indices) is a line segment.  Line segments are not necessarily connected.\n   *\n   * @type {number}\n   * @constant\n   */\n  LINES: WebGLConstants.LINES,\n\n  /**\n   * Line loop primitive where each vertex (or index) after the first connects a line to\n   * the previous vertex, and the last vertex implicitly connects to the first.\n   *\n   * @type {number}\n   * @constant\n   */\n  LINE_LOOP: WebGLConstants.LINE_LOOP,\n\n  /**\n   * Line strip primitive where each vertex (or index) after the first connects a line to the previous vertex.\n   *\n   * @type {number}\n   * @constant\n   */\n  LINE_STRIP: WebGLConstants.LINE_STRIP,\n\n  /**\n   * Triangles primitive where each three vertices (or indices) is a triangle.  Triangles do not necessarily share edges.\n   *\n   * @type {number}\n   * @constant\n   */\n  TRIANGLES: WebGLConstants.TRIANGLES,\n\n  /**\n   * Triangle strip primitive where each vertex (or index) after the first two connect to\n   * the previous two vertices forming a triangle.  For example, this can be used to model a wall.\n   *\n   * @type {number}\n   * @constant\n   */\n  TRIANGLE_STRIP: WebGLConstants.TRIANGLE_STRIP,\n\n  /**\n   * Triangle fan primitive where each vertex (or index) after the first two connect to\n   * the previous vertex and the first vertex forming a triangle.  For example, this can be used\n   * to model a cone or circle.\n   *\n   * @type {number}\n   * @constant\n   */\n  TRIANGLE_FAN: WebGLConstants.TRIANGLE_FAN,\n};\n\n/**\n * @private\n */\nPrimitiveType.isLines = function (primitiveType) {\n  return (\n    primitiveType === PrimitiveType.LINES ||\n    primitiveType === PrimitiveType.LINE_LOOP ||\n    primitiveType === PrimitiveType.LINE_STRIP\n  );\n};\n\n/**\n * @private\n */\nPrimitiveType.isTriangles = function (primitiveType) {\n  return (\n    primitiveType === PrimitiveType.TRIANGLES ||\n    primitiveType === PrimitiveType.TRIANGLE_STRIP ||\n    primitiveType === PrimitiveType.TRIANGLE_FAN\n  );\n};\n\n/**\n * @private\n */\nPrimitiveType.validate = function (primitiveType) {\n  return (\n    primitiveType === PrimitiveType.POINTS ||\n    primitiveType === PrimitiveType.LINES ||\n    primitiveType === PrimitiveType.LINE_LOOP ||\n    primitiveType === PrimitiveType.LINE_STRIP ||\n    primitiveType === PrimitiveType.TRIANGLES ||\n    primitiveType === PrimitiveType.TRIANGLE_STRIP ||\n    primitiveType === PrimitiveType.TRIANGLE_FAN\n  );\n};\n\nexport default Object.freeze(PrimitiveType);\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG;EACpB;AACF;AACA;AACA;AACA;AACA;EACEC,MAAM,EAAEF,cAAc,CAACE,MAAM;EAE7B;AACF;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAEH,cAAc,CAACG,KAAK;EAE3B;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAEJ,cAAc,CAACI,SAAS;EAEnC;AACF;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAEL,cAAc,CAACK,UAAU;EAErC;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAEN,cAAc,CAACM,SAAS;EAEnC;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,cAAc,EAAEP,cAAc,CAACO,cAAc;EAE7C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,YAAY,EAAER,cAAc,CAACQ;AAC/B,CAAC;;AAED;AACA;AACA;AACAP,aAAa,CAACQ,OAAO,GAAG,UAAUC,aAAa,EAAE;EAC/C,OACEA,aAAa,KAAKT,aAAa,CAACE,KAAK,IACrCO,aAAa,KAAKT,aAAa,CAACG,SAAS,IACzCM,aAAa,KAAKT,aAAa,CAACI,UAAU;AAE9C,CAAC;;AAED;AACA;AACA;AACAJ,aAAa,CAACU,WAAW,GAAG,UAAUD,aAAa,EAAE;EACnD,OACEA,aAAa,KAAKT,aAAa,CAACK,SAAS,IACzCI,aAAa,KAAKT,aAAa,CAACM,cAAc,IAC9CG,aAAa,KAAKT,aAAa,CAACO,YAAY;AAEhD,CAAC;;AAED;AACA;AACA;AACAP,aAAa,CAACW,QAAQ,GAAG,UAAUF,aAAa,EAAE;EAChD,OACEA,aAAa,KAAKT,aAAa,CAACC,MAAM,IACtCQ,aAAa,KAAKT,aAAa,CAACE,KAAK,IACrCO,aAAa,KAAKT,aAAa,CAACG,SAAS,IACzCM,aAAa,KAAKT,aAAa,CAACI,UAAU,IAC1CK,aAAa,KAAKT,aAAa,CAACK,SAAS,IACzCI,aAAa,KAAKT,aAAa,CAACM,cAAc,IAC9CG,aAAa,KAAKT,aAAa,CAACO,YAAY;AAEhD,CAAC;AAED,eAAeK,MAAM,CAACC,MAAM,CAACb,aAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}