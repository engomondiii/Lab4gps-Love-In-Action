{"ast":null,"code":"import Check from \"./Check.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Hilbert Order helper functions.\n *\n * @namespace HilbertOrder\n */\nconst HilbertOrder = {};\n\n/**\n * Computes the Hilbert index at the given level from 2D coordinates.\n *\n * @param {number} level The level of the curve\n * @param {number} x The X coordinate\n * @param {number} y The Y coordinate\n * @returns {number} The Hilbert index.\n * @private\n */\nHilbertOrder.encode2D = function (level, x, y) {\n  const n = Math.pow(2, level);\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"level\", level);\n  Check.typeOf.number(\"x\", x);\n  Check.typeOf.number(\"y\", y);\n  if (level < 1) {\n    throw new DeveloperError(\"Hilbert level cannot be less than 1.\");\n  }\n  if (x < 0 || x >= n || y < 0 || y >= n) {\n    throw new DeveloperError(\"Invalid coordinates for given level.\");\n  }\n  //>>includeEnd('debug');\n\n  const p = {\n    x: x,\n    y: y\n  };\n  let rx,\n    ry,\n    s,\n    // eslint-disable-next-line no-undef\n    index = BigInt(0);\n  for (s = n / 2; s > 0; s /= 2) {\n    rx = (p.x & s) > 0 ? 1 : 0;\n    ry = (p.y & s) > 0 ? 1 : 0;\n    // eslint-disable-next-line no-undef\n    index += BigInt((3 * rx ^ ry) * s * s);\n    rotate(n, p, rx, ry);\n  }\n  return index;\n};\n\n/**\n * Computes the 2D coordinates from the Hilbert index at the given level.\n *\n * @param {number} level The level of the curve\n * @param {bigint} index The Hilbert index\n * @returns {number[]} An array containing the 2D coordinates ([x, y]) corresponding to the Morton index.\n * @private\n */\nHilbertOrder.decode2D = function (level, index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"level\", level);\n  Check.typeOf.bigint(\"index\", index);\n  if (level < 1) {\n    throw new DeveloperError(\"Hilbert level cannot be less than 1.\");\n  }\n  // eslint-disable-next-line no-undef\n  if (index < BigInt(0) || index >= BigInt(Math.pow(4, level))) {\n    throw new DeveloperError(\"Hilbert index exceeds valid maximum for given level.\");\n  }\n  //>>includeEnd('debug');\n\n  const n = Math.pow(2, level);\n  const p = {\n    x: 0,\n    y: 0\n  };\n  let rx, ry, s, t;\n  for (s = 1, t = index; s < n; s *= 2) {\n    // eslint-disable-next-line no-undef\n    rx = 1 & Number(t / BigInt(2));\n    // eslint-disable-next-line no-undef\n    ry = 1 & Number(t ^ BigInt(rx));\n    rotate(s, p, rx, ry);\n    p.x += s * rx;\n    p.y += s * ry;\n    // eslint-disable-next-line no-undef\n    t /= BigInt(4);\n  }\n  return [p.x, p.y];\n};\n\n/**\n * @private\n */\nfunction rotate(n, p, rx, ry) {\n  if (ry !== 0) {\n    return;\n  }\n  if (rx === 1) {\n    p.x = n - 1 - p.x;\n    p.y = n - 1 - p.y;\n  }\n  const t = p.x;\n  p.x = p.y;\n  p.y = t;\n}\nexport default HilbertOrder;","map":{"version":3,"names":["Check","DeveloperError","HilbertOrder","encode2D","level","x","y","n","Math","pow","typeOf","number","p","rx","ry","s","index","BigInt","rotate","decode2D","bigint","t","Number"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/HilbertOrder.js"],"sourcesContent":["import Check from \"./Check.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Hilbert Order helper functions.\n *\n * @namespace HilbertOrder\n */\nconst HilbertOrder = {};\n\n/**\n * Computes the Hilbert index at the given level from 2D coordinates.\n *\n * @param {number} level The level of the curve\n * @param {number} x The X coordinate\n * @param {number} y The Y coordinate\n * @returns {number} The Hilbert index.\n * @private\n */\nHilbertOrder.encode2D = function (level, x, y) {\n  const n = Math.pow(2, level);\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"level\", level);\n  Check.typeOf.number(\"x\", x);\n  Check.typeOf.number(\"y\", y);\n  if (level < 1) {\n    throw new DeveloperError(\"Hilbert level cannot be less than 1.\");\n  }\n  if (x < 0 || x >= n || y < 0 || y >= n) {\n    throw new DeveloperError(\"Invalid coordinates for given level.\");\n  }\n  //>>includeEnd('debug');\n\n  const p = {\n    x: x,\n    y: y,\n  };\n  let rx,\n    ry,\n    s,\n    // eslint-disable-next-line no-undef\n    index = BigInt(0);\n\n  for (s = n / 2; s > 0; s /= 2) {\n    rx = (p.x & s) > 0 ? 1 : 0;\n    ry = (p.y & s) > 0 ? 1 : 0;\n    // eslint-disable-next-line no-undef\n    index += BigInt(((3 * rx) ^ ry) * s * s);\n    rotate(n, p, rx, ry);\n  }\n\n  return index;\n};\n\n/**\n * Computes the 2D coordinates from the Hilbert index at the given level.\n *\n * @param {number} level The level of the curve\n * @param {bigint} index The Hilbert index\n * @returns {number[]} An array containing the 2D coordinates ([x, y]) corresponding to the Morton index.\n * @private\n */\nHilbertOrder.decode2D = function (level, index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"level\", level);\n  Check.typeOf.bigint(\"index\", index);\n  if (level < 1) {\n    throw new DeveloperError(\"Hilbert level cannot be less than 1.\");\n  }\n  // eslint-disable-next-line no-undef\n  if (index < BigInt(0) || index >= BigInt(Math.pow(4, level))) {\n    throw new DeveloperError(\n      \"Hilbert index exceeds valid maximum for given level.\",\n    );\n  }\n  //>>includeEnd('debug');\n\n  const n = Math.pow(2, level);\n  const p = {\n    x: 0,\n    y: 0,\n  };\n  let rx, ry, s, t;\n\n  for (s = 1, t = index; s < n; s *= 2) {\n    // eslint-disable-next-line no-undef\n    rx = 1 & Number(t / BigInt(2));\n    // eslint-disable-next-line no-undef\n    ry = 1 & Number(t ^ BigInt(rx));\n    rotate(s, p, rx, ry);\n    p.x += s * rx;\n    p.y += s * ry;\n    // eslint-disable-next-line no-undef\n    t /= BigInt(4);\n  }\n\n  return [p.x, p.y];\n};\n\n/**\n * @private\n */\nfunction rotate(n, p, rx, ry) {\n  if (ry !== 0) {\n    return;\n  }\n\n  if (rx === 1) {\n    p.x = n - 1 - p.x;\n    p.y = n - 1 - p.y;\n  }\n\n  const t = p.x;\n  p.x = p.y;\n  p.y = t;\n}\n\nexport default HilbertOrder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}