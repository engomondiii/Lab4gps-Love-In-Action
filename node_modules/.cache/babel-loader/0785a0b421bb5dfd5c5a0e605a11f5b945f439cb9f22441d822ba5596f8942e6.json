{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport DynamicAtmosphereLightingType from \"./DynamicAtmosphereLightingType.js\";\n\n/**\n * Common atmosphere settings used by 3D Tiles and models for rendering sky atmosphere, ground atmosphere, and fog.\n *\n * <p>\n * This class is not to be confused with {@link SkyAtmosphere}, which is responsible for rendering the sky.\n * </p>\n * <p>\n * While the atmosphere settings affect the color of fog, see {@link Fog} to control how fog is rendered.\n * </p>\n *\n * @alias Atmosphere\n * @constructor\n *\n * @example\n * // Turn on dynamic atmosphere lighting using the sun direction\n * scene.atmosphere.dynamicLighting = Cesium.DynamicAtmosphereLightingType.SUNLIGHT;\n *\n * @example\n * // Turn on dynamic lighting using whatever light source is in the scene\n * scene.light = new Cesium.DirectionalLight({\n *   direction: new Cesium.Cartesian3(1, 0, 0)\n * });\n * scene.atmosphere.dynamicLighting = Cesium.DynamicAtmosphereLightingType.SCENE_LIGHT;\n *\n * @example\n * // Adjust the color of the atmosphere effects.\n * scene.atmosphere.hueShift = 0.4; // Cycle 40% around the color wheel\n * scene.atmosphere.brightnessShift = 0.25; // Increase the brightness\n * scene.atmosphere.saturationShift = -0.1; // Desaturate the colors\n *\n * @see SkyAtmosphere\n * @see Globe\n * @see Fog\n */\nfunction Atmosphere() {\n  /**\n   * The intensity of the light that is used for computing the ground atmosphere color.\n   *\n   * @type {number}\n   * @default 10.0\n   */\n  this.lightIntensity = 10.0;\n\n  /**\n   * The Rayleigh scattering coefficient used in the atmospheric scattering equations for the ground atmosphere.\n   *\n   * @type {Cartesian3}\n   * @default Cartesian3(5.5e-6, 13.0e-6, 28.4e-6)\n   */\n  this.rayleighCoefficient = new Cartesian3(5.5e-6, 13.0e-6, 28.4e-6);\n\n  /**\n   * The Mie scattering coefficient used in the atmospheric scattering equations for the ground atmosphere.\n   *\n   * @type {Cartesian3}\n   * @default Cartesian3(21e-6, 21e-6, 21e-6)\n   */\n  this.mieCoefficient = new Cartesian3(21e-6, 21e-6, 21e-6);\n\n  /**\n   * The Rayleigh scale height used in the atmospheric scattering equations for the ground atmosphere, in meters.\n   *\n   * @type {number}\n   * @default 10000.0\n   */\n  this.rayleighScaleHeight = 10000.0;\n\n  /**\n   * The Mie scale height used in the atmospheric scattering equations for the ground atmosphere, in meters.\n   *\n   * @type {number}\n   * @default 3200.0\n   */\n  this.mieScaleHeight = 3200.0;\n\n  /**\n   * The anisotropy of the medium to consider for Mie scattering.\n   * <p>\n   * Valid values are between -1.0 and 1.0.\n   * </p>\n   *\n   * @type {number}\n   * @default 0.9\n   */\n  this.mieAnisotropy = 0.9;\n\n  /**\n   * The hue shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n   * A hue shift of 1.0 indicates a complete rotation of the hues available.\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.hueShift = 0.0;\n\n  /**\n   * The saturation shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n   * A saturation shift of -1.0 is monochrome.\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.saturationShift = 0.0;\n\n  /**\n   * The brightness shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n   * A brightness shift of -1.0 is complete darkness, which will let space show through.\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.brightnessShift = 0.0;\n\n  /**\n   * When not DynamicAtmosphereLightingType.NONE, the selected light source will\n   * be used for dynamically lighting all atmosphere-related rendering effects.\n   *\n   * @type {DynamicAtmosphereLightingType}\n   * @default DynamicAtmosphereLightingType.NONE\n   */\n  this.dynamicLighting = DynamicAtmosphereLightingType.NONE;\n}\n\n/**\n * Returns <code>true</code> if the atmosphere shader requires a color correct step.\n * @param {Atmosphere} atmosphere The atmosphere instance to check\n * @returns {boolean} true if the atmosphere shader requires a color correct step\n */\nAtmosphere.requiresColorCorrect = function (atmosphere) {\n  return !(CesiumMath.equalsEpsilon(atmosphere.hueShift, 0.0, CesiumMath.EPSILON7) && CesiumMath.equalsEpsilon(atmosphere.saturationShift, 0.0, CesiumMath.EPSILON7) && CesiumMath.equalsEpsilon(atmosphere.brightnessShift, 0.0, CesiumMath.EPSILON7));\n};\nexport default Atmosphere;","map":{"version":3,"names":["Cartesian3","CesiumMath","DynamicAtmosphereLightingType","Atmosphere","lightIntensity","rayleighCoefficient","mieCoefficient","rayleighScaleHeight","mieScaleHeight","mieAnisotropy","hueShift","saturationShift","brightnessShift","dynamicLighting","NONE","requiresColorCorrect","atmosphere","equalsEpsilon","EPSILON7"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Atmosphere.js"],"sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport DynamicAtmosphereLightingType from \"./DynamicAtmosphereLightingType.js\";\n\n/**\n * Common atmosphere settings used by 3D Tiles and models for rendering sky atmosphere, ground atmosphere, and fog.\n *\n * <p>\n * This class is not to be confused with {@link SkyAtmosphere}, which is responsible for rendering the sky.\n * </p>\n * <p>\n * While the atmosphere settings affect the color of fog, see {@link Fog} to control how fog is rendered.\n * </p>\n *\n * @alias Atmosphere\n * @constructor\n *\n * @example\n * // Turn on dynamic atmosphere lighting using the sun direction\n * scene.atmosphere.dynamicLighting = Cesium.DynamicAtmosphereLightingType.SUNLIGHT;\n *\n * @example\n * // Turn on dynamic lighting using whatever light source is in the scene\n * scene.light = new Cesium.DirectionalLight({\n *   direction: new Cesium.Cartesian3(1, 0, 0)\n * });\n * scene.atmosphere.dynamicLighting = Cesium.DynamicAtmosphereLightingType.SCENE_LIGHT;\n *\n * @example\n * // Adjust the color of the atmosphere effects.\n * scene.atmosphere.hueShift = 0.4; // Cycle 40% around the color wheel\n * scene.atmosphere.brightnessShift = 0.25; // Increase the brightness\n * scene.atmosphere.saturationShift = -0.1; // Desaturate the colors\n *\n * @see SkyAtmosphere\n * @see Globe\n * @see Fog\n */\nfunction Atmosphere() {\n  /**\n   * The intensity of the light that is used for computing the ground atmosphere color.\n   *\n   * @type {number}\n   * @default 10.0\n   */\n  this.lightIntensity = 10.0;\n\n  /**\n   * The Rayleigh scattering coefficient used in the atmospheric scattering equations for the ground atmosphere.\n   *\n   * @type {Cartesian3}\n   * @default Cartesian3(5.5e-6, 13.0e-6, 28.4e-6)\n   */\n  this.rayleighCoefficient = new Cartesian3(5.5e-6, 13.0e-6, 28.4e-6);\n\n  /**\n   * The Mie scattering coefficient used in the atmospheric scattering equations for the ground atmosphere.\n   *\n   * @type {Cartesian3}\n   * @default Cartesian3(21e-6, 21e-6, 21e-6)\n   */\n  this.mieCoefficient = new Cartesian3(21e-6, 21e-6, 21e-6);\n\n  /**\n   * The Rayleigh scale height used in the atmospheric scattering equations for the ground atmosphere, in meters.\n   *\n   * @type {number}\n   * @default 10000.0\n   */\n  this.rayleighScaleHeight = 10000.0;\n\n  /**\n   * The Mie scale height used in the atmospheric scattering equations for the ground atmosphere, in meters.\n   *\n   * @type {number}\n   * @default 3200.0\n   */\n  this.mieScaleHeight = 3200.0;\n\n  /**\n   * The anisotropy of the medium to consider for Mie scattering.\n   * <p>\n   * Valid values are between -1.0 and 1.0.\n   * </p>\n   *\n   * @type {number}\n   * @default 0.9\n   */\n  this.mieAnisotropy = 0.9;\n\n  /**\n   * The hue shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n   * A hue shift of 1.0 indicates a complete rotation of the hues available.\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.hueShift = 0.0;\n\n  /**\n   * The saturation shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n   * A saturation shift of -1.0 is monochrome.\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.saturationShift = 0.0;\n\n  /**\n   * The brightness shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n   * A brightness shift of -1.0 is complete darkness, which will let space show through.\n   *\n   * @type {number}\n   * @default 0.0\n   */\n  this.brightnessShift = 0.0;\n\n  /**\n   * When not DynamicAtmosphereLightingType.NONE, the selected light source will\n   * be used for dynamically lighting all atmosphere-related rendering effects.\n   *\n   * @type {DynamicAtmosphereLightingType}\n   * @default DynamicAtmosphereLightingType.NONE\n   */\n  this.dynamicLighting = DynamicAtmosphereLightingType.NONE;\n}\n\n/**\n * Returns <code>true</code> if the atmosphere shader requires a color correct step.\n * @param {Atmosphere} atmosphere The atmosphere instance to check\n * @returns {boolean} true if the atmosphere shader requires a color correct step\n */\nAtmosphere.requiresColorCorrect = function (atmosphere) {\n  return !(\n    CesiumMath.equalsEpsilon(atmosphere.hueShift, 0.0, CesiumMath.EPSILON7) &&\n    CesiumMath.equalsEpsilon(\n      atmosphere.saturationShift,\n      0.0,\n      CesiumMath.EPSILON7,\n    ) &&\n    CesiumMath.equalsEpsilon(\n      atmosphere.brightnessShift,\n      0.0,\n      CesiumMath.EPSILON7,\n    )\n  );\n};\n\nexport default Atmosphere;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,6BAA6B,MAAM,oCAAoC;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAA,EAAG;EACpB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAG,IAAI;;EAE1B;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,mBAAmB,GAAG,IAAIL,UAAU,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC;;EAEnE;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACM,cAAc,GAAG,IAAIN,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;;EAEzD;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACO,mBAAmB,GAAG,OAAO;;EAElC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAG,MAAM;;EAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,aAAa,GAAG,GAAG;;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,QAAQ,GAAG,GAAG;;EAEnB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,eAAe,GAAG,GAAG;;EAE1B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,eAAe,GAAG,GAAG;;EAE1B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,eAAe,GAAGX,6BAA6B,CAACY,IAAI;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACAX,UAAU,CAACY,oBAAoB,GAAG,UAAUC,UAAU,EAAE;EACtD,OAAO,EACLf,UAAU,CAACgB,aAAa,CAACD,UAAU,CAACN,QAAQ,EAAE,GAAG,EAAET,UAAU,CAACiB,QAAQ,CAAC,IACvEjB,UAAU,CAACgB,aAAa,CACtBD,UAAU,CAACL,eAAe,EAC1B,GAAG,EACHV,UAAU,CAACiB,QACb,CAAC,IACDjB,UAAU,CAACgB,aAAa,CACtBD,UAAU,CAACJ,eAAe,EAC1B,GAAG,EACHX,UAAU,CAACiB,QACb,CAAC,CACF;AACH,CAAC;AAED,eAAef,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}