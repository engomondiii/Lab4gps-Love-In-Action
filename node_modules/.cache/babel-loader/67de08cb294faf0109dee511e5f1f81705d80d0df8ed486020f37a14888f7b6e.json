{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport decodeGoogleEarthEnterpriseData from \"../Core/decodeGoogleEarthEnterpriseData.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport GoogleEarthEnterpriseMetadata from \"../Core/GoogleEarthEnterpriseMetadata.js\";\nimport loadImageFromTypedArray from \"../Core/loadImageFromTypedArray.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Request from \"../Core/Request.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport * as protobuf from \"protobufjs/dist/minimal/protobuf.js\";\n\n/**\n * @private\n */\nfunction GoogleEarthEnterpriseDiscardPolicy() {\n  this._image = new Image();\n}\n\n/**\n * Determines if the discard policy is ready to process images.\n * @returns {boolean} True if the discard policy is ready to process images; otherwise, false.\n */\nGoogleEarthEnterpriseDiscardPolicy.prototype.isReady = function () {\n  return true;\n};\n\n/**\n * Given a tile image, decide whether to discard that image.\n *\n * @param {HTMLImageElement} image An image to test.\n * @returns {boolean} True if the image should be discarded; otherwise, false.\n */\nGoogleEarthEnterpriseDiscardPolicy.prototype.shouldDiscardImage = function (image) {\n  return image === this._image;\n};\n\n/**\n * @typedef {object} GoogleEarthEnterpriseImageryProvider.ConstructorOptions\n *\n * Initialization options for the GoogleEarthEnterpriseImageryProvider constructor\n *\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid.  If not specified, the default ellipsoid is used.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded. If this value is not specified, a default\n *        is to discard tiles that fail to download.\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * <div class=\"notice\">\n * To construct a GoogleEarthEnterpriseImageryProvider, call {@link GoogleEarthEnterpriseImageryProvider.fromMetadata}. Do not call the constructor directly.\n * </div>\n *\n * Provides tiled imagery using the Google Earth Enterprise REST API.\n *\n * Notes: This provider is for use with the 3D Earth API of Google Earth Enterprise,\n *        {@link GoogleEarthEnterpriseMapsProvider} should be used with 2D Maps API.\n *\n * @alias GoogleEarthEnterpriseImageryProvider\n * @constructor\n *\n * @param {GoogleEarthEnterpriseImageryProvider.ConstructorOptions} [options] Object describing initialization options\n *\n * @see GoogleEarthEnterpriseImageryProvider.fromMetadata\n * @see GoogleEarthEnterpriseTerrainProvider\n * @see ArcGisMapServerImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * const geeMetadata = await GoogleEarthEnterpriseMetadata.fromUrl(\"http://www.example.com\");\n * const gee = Cesium.GoogleEarthEnterpriseImageryProvider.fromMetadata(geeMetadata);\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction GoogleEarthEnterpriseImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._tilingScheme = new GeographicTilingScheme({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    rectangle: new Rectangle(-CesiumMath.PI, -CesiumMath.PI, CesiumMath.PI, CesiumMath.PI),\n    ellipsoid: options.ellipsoid\n  });\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n  this._tileWidth = 256;\n  this._tileHeight = 256;\n  this._maximumLevel = 23;\n\n  // Install the default tile discard policy if none has been supplied.\n  if (!defined(this._tileDiscardPolicy)) {\n    this._tileDiscardPolicy = new GoogleEarthEnterpriseDiscardPolicy();\n  }\n  this._errorEvent = new Event();\n}\nObject.defineProperties(GoogleEarthEnterpriseImageryProvider.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server url hosting the imagery.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._metadata.url;\n    }\n  },\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._metadata.proxy;\n    }\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    }\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    }\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    }\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    }\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    }\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return false;\n    }\n  }\n});\n\n/**\n * Creates a tiled imagery provider using the Google Earth Enterprise REST API.\n * @param {GoogleEarthEnterpriseMetadata} metadata A metadata object that can be used to share metadata requests with a GoogleEarthEnterpriseTerrainProvider.\n * @param {GoogleEarthEnterpriseImageryProvider.ConstructorOptions} options Object describing initialization options.\n * @returns {GoogleEarthEnterpriseImageryProvider}\n *\n * @exception {RuntimeError} The metadata url does not have imagery\n *\n * @example\n * const geeMetadata = await GoogleEarthEnterpriseMetadata.fromUrl(\"http://www.example.com\");\n * const gee = Cesium.GoogleEarthEnterpriseImageryProvider.fromMetadata(geeMetadata);\n */\nGoogleEarthEnterpriseImageryProvider.fromMetadata = function (metadata, options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"metadata\", metadata);\n  //>>includeEnd('debug');\n\n  if (!metadata.imageryPresent) {\n    throw new RuntimeError(`The server ${metadata.url} doesn't have imagery`);\n  }\n  const provider = new GoogleEarthEnterpriseImageryProvider(options);\n  provider._metadata = metadata;\n  return provider;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  const metadata = this._metadata;\n  const info = metadata.getTileInformation(x, y, level);\n  if (defined(info)) {\n    const credit = metadata.providers[info.imageryProvider];\n    if (defined(credit)) {\n      return [credit];\n    }\n  }\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  const invalidImage = this._tileDiscardPolicy._image; // Empty image or undefined depending on discard policy\n  const metadata = this._metadata;\n  const quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  const info = metadata.getTileInformation(x, y, level);\n  if (!defined(info)) {\n    if (metadata.isValid(quadKey)) {\n      const metadataRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction\n      });\n      metadata.populateSubtree(x, y, level, metadataRequest);\n      return undefined; // No metadata so return undefined so we can be loaded later\n    }\n    return Promise.resolve(invalidImage); // Image doesn't exist\n  }\n  if (!info.hasImagery()) {\n    // Already have info and there isn't any imagery here\n    return Promise.resolve(invalidImage);\n  }\n  const promise = buildImageResource(this, info, x, y, level, request).fetchArrayBuffer();\n  if (!defined(promise)) {\n    return undefined; // Throttled\n  }\n  return promise.then(function (image) {\n    decodeGoogleEarthEnterpriseData(metadata.key, image);\n    let a = new Uint8Array(image);\n    let type;\n    const protoImagery = metadata.protoImagery;\n    if (!defined(protoImagery) || !protoImagery) {\n      type = getImageType(a);\n    }\n    if (!defined(type) && (!defined(protoImagery) || protoImagery)) {\n      const message = decodeEarthImageryPacket(a);\n      type = message.imageType;\n      a = message.imageData;\n    }\n    if (!defined(type) || !defined(a)) {\n      return invalidImage;\n    }\n    return loadImageFromTypedArray({\n      uint8Array: a,\n      format: type,\n      flipY: true\n    });\n  });\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n};\n\n//\n// Functions to handle imagery packets\n//\nfunction buildImageResource(imageryProvider, info, x, y, level, request) {\n  const quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  let version = info.imageryVersion;\n  version = defined(version) && version > 0 ? version : 1;\n  return imageryProvider._metadata.resource.getDerivedResource({\n    url: `flatfile?f1-0${quadKey}-i.${version.toString()}`,\n    request: request\n  });\n}\n\n// Detects if a Uint8Array is a JPEG or PNG\nfunction getImageType(image) {\n  const jpeg = \"JFIF\";\n  if (image[6] === jpeg.charCodeAt(0) && image[7] === jpeg.charCodeAt(1) && image[8] === jpeg.charCodeAt(2) && image[9] === jpeg.charCodeAt(3)) {\n    return \"image/jpeg\";\n  }\n  const png = \"PNG\";\n  if (image[1] === png.charCodeAt(0) && image[2] === png.charCodeAt(1) && image[3] === png.charCodeAt(2)) {\n    return \"image/png\";\n  }\n  return undefined;\n}\n\n// Decodes an Imagery protobuf into the message\n// Partially generated with the help of protobuf.js static generator\nfunction decodeEarthImageryPacket(data) {\n  const reader = protobuf.Reader.create(data);\n  const end = reader.len;\n  const message = {};\n  while (reader.pos < end) {\n    const tag = reader.uint32();\n    let copyrightIds;\n    switch (tag >>> 3) {\n      case 1:\n        message.imageType = reader.uint32();\n        break;\n      case 2:\n        message.imageData = reader.bytes();\n        break;\n      case 3:\n        message.alphaType = reader.uint32();\n        break;\n      case 4:\n        message.imageAlpha = reader.bytes();\n        break;\n      case 5:\n        copyrightIds = message.copyrightIds;\n        if (!defined(copyrightIds)) {\n          copyrightIds = message.copyrightIds = [];\n        }\n        if ((tag & 7) === 2) {\n          const end2 = reader.uint32() + reader.pos;\n          while (reader.pos < end2) {\n            copyrightIds.push(reader.uint32());\n          }\n        } else {\n          copyrightIds.push(reader.uint32());\n        }\n        break;\n      default:\n        reader.skipType(tag & 7);\n        break;\n    }\n  }\n  const imageType = message.imageType;\n  if (defined(imageType)) {\n    switch (imageType) {\n      case 0:\n        message.imageType = \"image/jpeg\";\n        break;\n      case 4:\n        message.imageType = \"image/png\";\n        break;\n      default:\n        throw new RuntimeError(\"GoogleEarthEnterpriseImageryProvider: Unsupported image type.\");\n    }\n  }\n  const alphaType = message.alphaType;\n  if (defined(alphaType) && alphaType !== 0) {\n    console.log(\"GoogleEarthEnterpriseImageryProvider: External alpha not supported.\");\n    delete message.alphaType;\n    delete message.imageAlpha;\n  }\n  return message;\n}\nexport default GoogleEarthEnterpriseImageryProvider;","map":{"version":3,"names":["Check","Credit","decodeGoogleEarthEnterpriseData","defaultValue","defined","Event","GeographicTilingScheme","GoogleEarthEnterpriseMetadata","loadImageFromTypedArray","CesiumMath","Rectangle","Request","RuntimeError","protobuf","GoogleEarthEnterpriseDiscardPolicy","_image","Image","prototype","isReady","shouldDiscardImage","image","GoogleEarthEnterpriseImageryProvider","options","EMPTY_OBJECT","_defaultAlpha","undefined","_defaultNightAlpha","_defaultDayAlpha","_defaultBrightness","_defaultContrast","_defaultHue","_defaultSaturation","_defaultGamma","_defaultMinificationFilter","_defaultMagnificationFilter","_tileDiscardPolicy","tileDiscardPolicy","_tilingScheme","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","rectangle","PI","ellipsoid","credit","_credit","_tileWidth","_tileHeight","_maximumLevel","_errorEvent","Object","defineProperties","url","get","_metadata","proxy","tileWidth","tileHeight","maximumLevel","minimumLevel","tilingScheme","errorEvent","hasAlphaChannel","fromMetadata","metadata","imageryPresent","provider","getTileCredits","x","y","level","info","getTileInformation","providers","imageryProvider","requestImage","request","invalidImage","quadKey","tileXYToQuadKey","isValid","metadataRequest","throttle","throttleByServer","type","priorityFunction","populateSubtree","Promise","resolve","hasImagery","promise","buildImageResource","fetchArrayBuffer","then","key","a","Uint8Array","protoImagery","getImageType","message","decodeEarthImageryPacket","imageType","imageData","uint8Array","format","flipY","pickFeatures","longitude","latitude","version","imageryVersion","resource","getDerivedResource","toString","jpeg","charCodeAt","png","data","reader","Reader","create","end","len","pos","tag","uint32","copyrightIds","bytes","alphaType","imageAlpha","end2","push","skipType","console","log"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GoogleEarthEnterpriseImageryProvider.js"],"sourcesContent":["import Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport decodeGoogleEarthEnterpriseData from \"../Core/decodeGoogleEarthEnterpriseData.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport GoogleEarthEnterpriseMetadata from \"../Core/GoogleEarthEnterpriseMetadata.js\";\nimport loadImageFromTypedArray from \"../Core/loadImageFromTypedArray.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Request from \"../Core/Request.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport * as protobuf from \"protobufjs/dist/minimal/protobuf.js\";\n\n/**\n * @private\n */\nfunction GoogleEarthEnterpriseDiscardPolicy() {\n  this._image = new Image();\n}\n\n/**\n * Determines if the discard policy is ready to process images.\n * @returns {boolean} True if the discard policy is ready to process images; otherwise, false.\n */\nGoogleEarthEnterpriseDiscardPolicy.prototype.isReady = function () {\n  return true;\n};\n\n/**\n * Given a tile image, decide whether to discard that image.\n *\n * @param {HTMLImageElement} image An image to test.\n * @returns {boolean} True if the image should be discarded; otherwise, false.\n */\nGoogleEarthEnterpriseDiscardPolicy.prototype.shouldDiscardImage = function (\n  image,\n) {\n  return image === this._image;\n};\n\n/**\n * @typedef {object} GoogleEarthEnterpriseImageryProvider.ConstructorOptions\n *\n * Initialization options for the GoogleEarthEnterpriseImageryProvider constructor\n *\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid.  If not specified, the default ellipsoid is used.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded. If this value is not specified, a default\n *        is to discard tiles that fail to download.\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * <div class=\"notice\">\n * To construct a GoogleEarthEnterpriseImageryProvider, call {@link GoogleEarthEnterpriseImageryProvider.fromMetadata}. Do not call the constructor directly.\n * </div>\n *\n * Provides tiled imagery using the Google Earth Enterprise REST API.\n *\n * Notes: This provider is for use with the 3D Earth API of Google Earth Enterprise,\n *        {@link GoogleEarthEnterpriseMapsProvider} should be used with 2D Maps API.\n *\n * @alias GoogleEarthEnterpriseImageryProvider\n * @constructor\n *\n * @param {GoogleEarthEnterpriseImageryProvider.ConstructorOptions} [options] Object describing initialization options\n *\n * @see GoogleEarthEnterpriseImageryProvider.fromMetadata\n * @see GoogleEarthEnterpriseTerrainProvider\n * @see ArcGisMapServerImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * const geeMetadata = await GoogleEarthEnterpriseMetadata.fromUrl(\"http://www.example.com\");\n * const gee = Cesium.GoogleEarthEnterpriseImageryProvider.fromMetadata(geeMetadata);\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction GoogleEarthEnterpriseImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = undefined;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n\n  this._tilingScheme = new GeographicTilingScheme({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    rectangle: new Rectangle(\n      -CesiumMath.PI,\n      -CesiumMath.PI,\n      CesiumMath.PI,\n      CesiumMath.PI,\n    ),\n    ellipsoid: options.ellipsoid,\n  });\n\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n\n  this._tileWidth = 256;\n  this._tileHeight = 256;\n  this._maximumLevel = 23;\n\n  // Install the default tile discard policy if none has been supplied.\n  if (!defined(this._tileDiscardPolicy)) {\n    this._tileDiscardPolicy = new GoogleEarthEnterpriseDiscardPolicy();\n  }\n\n  this._errorEvent = new Event();\n}\n\nObject.defineProperties(GoogleEarthEnterpriseImageryProvider.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server url hosting the imagery.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._metadata.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._metadata.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return false;\n    },\n  },\n});\n\n/**\n * Creates a tiled imagery provider using the Google Earth Enterprise REST API.\n * @param {GoogleEarthEnterpriseMetadata} metadata A metadata object that can be used to share metadata requests with a GoogleEarthEnterpriseTerrainProvider.\n * @param {GoogleEarthEnterpriseImageryProvider.ConstructorOptions} options Object describing initialization options.\n * @returns {GoogleEarthEnterpriseImageryProvider}\n *\n * @exception {RuntimeError} The metadata url does not have imagery\n *\n * @example\n * const geeMetadata = await GoogleEarthEnterpriseMetadata.fromUrl(\"http://www.example.com\");\n * const gee = Cesium.GoogleEarthEnterpriseImageryProvider.fromMetadata(geeMetadata);\n */\nGoogleEarthEnterpriseImageryProvider.fromMetadata = function (\n  metadata,\n  options,\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"metadata\", metadata);\n  //>>includeEnd('debug');\n\n  if (!metadata.imageryPresent) {\n    throw new RuntimeError(`The server ${metadata.url} doesn't have imagery`);\n  }\n\n  const provider = new GoogleEarthEnterpriseImageryProvider(options);\n  provider._metadata = metadata;\n  return provider;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level,\n) {\n  const metadata = this._metadata;\n  const info = metadata.getTileInformation(x, y, level);\n  if (defined(info)) {\n    const credit = metadata.providers[info.imageryProvider];\n    if (defined(credit)) {\n      return [credit];\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request,\n) {\n  const invalidImage = this._tileDiscardPolicy._image; // Empty image or undefined depending on discard policy\n  const metadata = this._metadata;\n  const quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  const info = metadata.getTileInformation(x, y, level);\n  if (!defined(info)) {\n    if (metadata.isValid(quadKey)) {\n      const metadataRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction,\n      });\n      metadata.populateSubtree(x, y, level, metadataRequest);\n      return undefined; // No metadata so return undefined so we can be loaded later\n    }\n    return Promise.resolve(invalidImage); // Image doesn't exist\n  }\n\n  if (!info.hasImagery()) {\n    // Already have info and there isn't any imagery here\n    return Promise.resolve(invalidImage);\n  }\n  const promise = buildImageResource(\n    this,\n    info,\n    x,\n    y,\n    level,\n    request,\n  ).fetchArrayBuffer();\n  if (!defined(promise)) {\n    return undefined; // Throttled\n  }\n\n  return promise.then(function (image) {\n    decodeGoogleEarthEnterpriseData(metadata.key, image);\n    let a = new Uint8Array(image);\n    let type;\n\n    const protoImagery = metadata.protoImagery;\n    if (!defined(protoImagery) || !protoImagery) {\n      type = getImageType(a);\n    }\n\n    if (!defined(type) && (!defined(protoImagery) || protoImagery)) {\n      const message = decodeEarthImageryPacket(a);\n      type = message.imageType;\n      a = message.imageData;\n    }\n\n    if (!defined(type) || !defined(a)) {\n      return invalidImage;\n    }\n\n    return loadImageFromTypedArray({\n      uint8Array: a,\n      format: type,\n      flipY: true,\n    });\n  });\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  return undefined;\n};\n\n//\n// Functions to handle imagery packets\n//\nfunction buildImageResource(imageryProvider, info, x, y, level, request) {\n  const quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  let version = info.imageryVersion;\n  version = defined(version) && version > 0 ? version : 1;\n\n  return imageryProvider._metadata.resource.getDerivedResource({\n    url: `flatfile?f1-0${quadKey}-i.${version.toString()}`,\n    request: request,\n  });\n}\n\n// Detects if a Uint8Array is a JPEG or PNG\nfunction getImageType(image) {\n  const jpeg = \"JFIF\";\n  if (\n    image[6] === jpeg.charCodeAt(0) &&\n    image[7] === jpeg.charCodeAt(1) &&\n    image[8] === jpeg.charCodeAt(2) &&\n    image[9] === jpeg.charCodeAt(3)\n  ) {\n    return \"image/jpeg\";\n  }\n\n  const png = \"PNG\";\n  if (\n    image[1] === png.charCodeAt(0) &&\n    image[2] === png.charCodeAt(1) &&\n    image[3] === png.charCodeAt(2)\n  ) {\n    return \"image/png\";\n  }\n\n  return undefined;\n}\n\n// Decodes an Imagery protobuf into the message\n// Partially generated with the help of protobuf.js static generator\nfunction decodeEarthImageryPacket(data) {\n  const reader = protobuf.Reader.create(data);\n  const end = reader.len;\n  const message = {};\n  while (reader.pos < end) {\n    const tag = reader.uint32();\n    let copyrightIds;\n    switch (tag >>> 3) {\n      case 1:\n        message.imageType = reader.uint32();\n        break;\n      case 2:\n        message.imageData = reader.bytes();\n        break;\n      case 3:\n        message.alphaType = reader.uint32();\n        break;\n      case 4:\n        message.imageAlpha = reader.bytes();\n        break;\n      case 5:\n        copyrightIds = message.copyrightIds;\n        if (!defined(copyrightIds)) {\n          copyrightIds = message.copyrightIds = [];\n        }\n        if ((tag & 7) === 2) {\n          const end2 = reader.uint32() + reader.pos;\n          while (reader.pos < end2) {\n            copyrightIds.push(reader.uint32());\n          }\n        } else {\n          copyrightIds.push(reader.uint32());\n        }\n        break;\n      default:\n        reader.skipType(tag & 7);\n        break;\n    }\n  }\n\n  const imageType = message.imageType;\n  if (defined(imageType)) {\n    switch (imageType) {\n      case 0:\n        message.imageType = \"image/jpeg\";\n        break;\n      case 4:\n        message.imageType = \"image/png\";\n        break;\n      default:\n        throw new RuntimeError(\n          \"GoogleEarthEnterpriseImageryProvider: Unsupported image type.\",\n        );\n    }\n  }\n\n  const alphaType = message.alphaType;\n  if (defined(alphaType) && alphaType !== 0) {\n    console.log(\n      \"GoogleEarthEnterpriseImageryProvider: External alpha not supported.\",\n    );\n    delete message.alphaType;\n    delete message.imageAlpha;\n  }\n\n  return message;\n}\nexport default GoogleEarthEnterpriseImageryProvider;\n"],"mappings":"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,KAAK,EAAE;IACLF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACC,SAAS,CAACC,KAAK;IAC7B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE;IACTH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACP,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEW,UAAU,EAAE;IACVJ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACN,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEW,YAAY,EAAE;IACZL,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACL,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEW,YAAY,EAAE;IACZN,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,CAAC;IACV;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEO,YAAY,EAAE;IACZP,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACf,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEG,SAAS,EAAE;IACTY,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACf,aAAa,CAACG,SAAS;IACrC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEJ,iBAAiB,EAAE;IACjBgB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACjB,kBAAkB;IAChC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEyB,UAAU,EAAE;IACVR,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACJ,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEL,MAAM,EAAE;IACNS,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACR,OAAO;IACrB;EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}