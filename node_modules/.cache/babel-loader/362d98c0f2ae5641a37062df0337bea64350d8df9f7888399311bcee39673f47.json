{"ast":null,"code":"import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport formatError from \"./formatError.js\";\n\n/**\n * Provides details about an error that occurred in an {@link ImageryProvider} or a {@link TerrainProvider}.\n *\n * @alias TileProviderError\n * @constructor\n *\n * @param {ImageryProvider|TerrainProvider} provider The imagery or terrain provider that experienced the error.\n * @param {string} message A message describing the error.\n * @param {number} [x] The X coordinate of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {number} [y] The Y coordinate of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {number} [level] The level of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {number} [timesRetried=0] The number of times this operation has been retried.\n * @param {Error} [error] The error or exception that occurred, if any.\n */\nfunction TileProviderError(provider, message, x, y, level, timesRetried, error) {\n  /**\n   * The {@link ImageryProvider} or {@link TerrainProvider} that experienced the error.\n   * @type {ImageryProvider|TerrainProvider}\n   */\n  this.provider = provider;\n\n  /**\n   * The message describing the error.\n   * @type {string}\n   */\n  this.message = message;\n\n  /**\n   * The X coordinate of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {number}\n   */\n  this.x = x;\n\n  /**\n   * The Y coordinate of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {number}\n   */\n  this.y = y;\n\n  /**\n   * The level-of-detail of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {number}\n   */\n  this.level = level;\n\n  /**\n   * The number of times this operation has been retried.\n   * @type {number}\n   * @default 0\n   */\n  this.timesRetried = defaultValue(timesRetried, 0);\n\n  /**\n   * True if the failed operation should be retried; otherwise, false.  The imagery or terrain provider\n   * will set the initial value of this property before raising the event, but any listeners\n   * can change it.  The value after the last listener is invoked will be acted upon.\n   * @type {boolean}\n   * @default false\n   */\n  this.retry = false;\n\n  /**\n   * The error or exception that occurred, if any.\n   * @type {Error}\n   */\n  this.error = error;\n}\n\n/**\n * Reports an error in an {@link ImageryProvider} or {@link TerrainProvider} by raising an event if it has any listeners, or by\n * logging the error to the console if the event has no listeners.  This method also tracks the number\n * of times the operation has been retried.\n *\n * @param {TileProviderError} previousError The error instance returned by this function the last\n *        time it was called for this error, or undefined if this is the first time this error has\n *        occurred.\n * @param {ImageryProvider|TerrainProvider} [provider] The imagery or terrain provider that encountered the error.\n * @param {Event} [event] The event to raise to inform listeners of the error.\n * @param {string} [message] The message describing the error.\n * @param {number} [x] The X coordinate of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {number} [y] The Y coordinate of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {number} [level] The level-of-detail of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {Error} [errorDetails] The error or exception that occurred, if any.\n * @returns {TileProviderError} The error instance that was passed to the event listeners and that\n *          should be passed to this function the next time it is called for the same error in order\n *          to track retry counts.\n */\nTileProviderError.reportError = function (previousError, provider, event, message, x, y, level, errorDetails) {\n  let error = previousError;\n  if (!defined(previousError)) {\n    error = new TileProviderError(provider, message, x, y, level, 0, errorDetails);\n  } else {\n    error.provider = provider;\n    error.message = message;\n    error.x = x;\n    error.y = y;\n    error.level = level;\n    error.retry = false;\n    error.error = errorDetails;\n    ++error.timesRetried;\n  }\n  if (defined(event) && event.numberOfListeners > 0) {\n    event.raiseEvent(error);\n  } else if (defined(provider)) {\n    console.log(`An error occurred in \"${provider.constructor.name}\": ${formatError(message)}`);\n  }\n  return error;\n};\n\n/**\n * Reports success of an operation by resetting the retry count of a previous error, if any.  This way,\n * if the error occurs again in the future, the listeners will be informed that it has not yet been retried.\n *\n * @param {TileProviderError} previousError The previous error, or undefined if this operation has\n *        not previously resulted in an error.\n */\nTileProviderError.reportSuccess = function (previousError) {\n  if (defined(previousError)) {\n    previousError.timesRetried = -1;\n  }\n};\n\n/**\n * A function that will be called to retry the operation.\n * @callback TileProviderError.RetryFunction\n */\nexport default TileProviderError;","map":{"version":3,"names":["defaultValue","defined","formatError","TileProviderError","provider","message","x","y","level","timesRetried","error","retry","reportError","previousError","event","errorDetails","numberOfListeners","raiseEvent","console","log","constructor","name","reportSuccess"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/TileProviderError.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport formatError from \"./formatError.js\";\n\n/**\n * Provides details about an error that occurred in an {@link ImageryProvider} or a {@link TerrainProvider}.\n *\n * @alias TileProviderError\n * @constructor\n *\n * @param {ImageryProvider|TerrainProvider} provider The imagery or terrain provider that experienced the error.\n * @param {string} message A message describing the error.\n * @param {number} [x] The X coordinate of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {number} [y] The Y coordinate of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {number} [level] The level of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {number} [timesRetried=0] The number of times this operation has been retried.\n * @param {Error} [error] The error or exception that occurred, if any.\n */\nfunction TileProviderError(\n  provider,\n  message,\n  x,\n  y,\n  level,\n  timesRetried,\n  error,\n) {\n  /**\n   * The {@link ImageryProvider} or {@link TerrainProvider} that experienced the error.\n   * @type {ImageryProvider|TerrainProvider}\n   */\n  this.provider = provider;\n\n  /**\n   * The message describing the error.\n   * @type {string}\n   */\n  this.message = message;\n\n  /**\n   * The X coordinate of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {number}\n   */\n  this.x = x;\n\n  /**\n   * The Y coordinate of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {number}\n   */\n  this.y = y;\n\n  /**\n   * The level-of-detail of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {number}\n   */\n  this.level = level;\n\n  /**\n   * The number of times this operation has been retried.\n   * @type {number}\n   * @default 0\n   */\n  this.timesRetried = defaultValue(timesRetried, 0);\n\n  /**\n   * True if the failed operation should be retried; otherwise, false.  The imagery or terrain provider\n   * will set the initial value of this property before raising the event, but any listeners\n   * can change it.  The value after the last listener is invoked will be acted upon.\n   * @type {boolean}\n   * @default false\n   */\n  this.retry = false;\n\n  /**\n   * The error or exception that occurred, if any.\n   * @type {Error}\n   */\n  this.error = error;\n}\n\n/**\n * Reports an error in an {@link ImageryProvider} or {@link TerrainProvider} by raising an event if it has any listeners, or by\n * logging the error to the console if the event has no listeners.  This method also tracks the number\n * of times the operation has been retried.\n *\n * @param {TileProviderError} previousError The error instance returned by this function the last\n *        time it was called for this error, or undefined if this is the first time this error has\n *        occurred.\n * @param {ImageryProvider|TerrainProvider} [provider] The imagery or terrain provider that encountered the error.\n * @param {Event} [event] The event to raise to inform listeners of the error.\n * @param {string} [message] The message describing the error.\n * @param {number} [x] The X coordinate of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {number} [y] The Y coordinate of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {number} [level] The level-of-detail of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {Error} [errorDetails] The error or exception that occurred, if any.\n * @returns {TileProviderError} The error instance that was passed to the event listeners and that\n *          should be passed to this function the next time it is called for the same error in order\n *          to track retry counts.\n */\nTileProviderError.reportError = function (\n  previousError,\n  provider,\n  event,\n  message,\n  x,\n  y,\n  level,\n  errorDetails,\n) {\n  let error = previousError;\n  if (!defined(previousError)) {\n    error = new TileProviderError(\n      provider,\n      message,\n      x,\n      y,\n      level,\n      0,\n      errorDetails,\n    );\n  } else {\n    error.provider = provider;\n    error.message = message;\n    error.x = x;\n    error.y = y;\n    error.level = level;\n    error.retry = false;\n    error.error = errorDetails;\n    ++error.timesRetried;\n  }\n\n  if (defined(event) && event.numberOfListeners > 0) {\n    event.raiseEvent(error);\n  } else if (defined(provider)) {\n    console.log(\n      `An error occurred in \"${provider.constructor.name}\": ${formatError(\n        message,\n      )}`,\n    );\n  }\n\n  return error;\n};\n\n/**\n * Reports success of an operation by resetting the retry count of a previous error, if any.  This way,\n * if the error occurs again in the future, the listeners will be informed that it has not yet been retried.\n *\n * @param {TileProviderError} previousError The previous error, or undefined if this operation has\n *        not previously resulted in an error.\n */\nTileProviderError.reportSuccess = function (previousError) {\n  if (defined(previousError)) {\n    previousError.timesRetried = -1;\n  }\n};\n\n/**\n * A function that will be called to retry the operation.\n * @callback TileProviderError.RetryFunction\n */\nexport default TileProviderError;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,WAAW,MAAM,kBAAkB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CACxBC,QAAQ,EACRC,OAAO,EACPC,CAAC,EACDC,CAAC,EACDC,KAAK,EACLC,YAAY,EACZC,KAAK,EACL;EACA;AACF;AACA;AACA;EACE,IAAI,CAACN,QAAQ,GAAGA,QAAQ;;EAExB;AACF;AACA;AACA;EACE,IAAI,CAACC,OAAO,GAAGA,OAAO;;EAEtB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,CAAC,GAAGA,CAAC;;EAEV;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,CAAC,GAAGA,CAAC;;EAEV;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAGA,KAAK;;EAElB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,YAAY,GAAGT,YAAY,CAACS,YAAY,EAAE,CAAC,CAAC;;EAEjD;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACE,KAAK,GAAG,KAAK;;EAElB;AACF;AACA;AACA;EACE,IAAI,CAACD,KAAK,GAAGA,KAAK;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,iBAAiB,CAACS,WAAW,GAAG,UAC9BC,aAAa,EACbT,QAAQ,EACRU,KAAK,EACLT,OAAO,EACPC,CAAC,EACDC,CAAC,EACDC,KAAK,EACLO,YAAY,EACZ;EACA,IAAIL,KAAK,GAAGG,aAAa;EACzB,IAAI,CAACZ,OAAO,CAACY,aAAa,CAAC,EAAE;IAC3BH,KAAK,GAAG,IAAIP,iBAAiB,CAC3BC,QAAQ,EACRC,OAAO,EACPC,CAAC,EACDC,CAAC,EACDC,KAAK,EACL,CAAC,EACDO,YACF,CAAC;EACH,CAAC,MAAM;IACLL,KAAK,CAACN,QAAQ,GAAGA,QAAQ;IACzBM,KAAK,CAACL,OAAO,GAAGA,OAAO;IACvBK,KAAK,CAACJ,CAAC,GAAGA,CAAC;IACXI,KAAK,CAACH,CAAC,GAAGA,CAAC;IACXG,KAAK,CAACF,KAAK,GAAGA,KAAK;IACnBE,KAAK,CAACC,KAAK,GAAG,KAAK;IACnBD,KAAK,CAACA,KAAK,GAAGK,YAAY;IAC1B,EAAEL,KAAK,CAACD,YAAY;EACtB;EAEA,IAAIR,OAAO,CAACa,KAAK,CAAC,IAAIA,KAAK,CAACE,iBAAiB,GAAG,CAAC,EAAE;IACjDF,KAAK,CAACG,UAAU,CAACP,KAAK,CAAC;EACzB,CAAC,MAAM,IAAIT,OAAO,CAACG,QAAQ,CAAC,EAAE;IAC5Bc,OAAO,CAACC,GAAG,CACT,yBAAyBf,QAAQ,CAACgB,WAAW,CAACC,IAAI,MAAMnB,WAAW,CACjEG,OACF,CAAC,EACH,CAAC;EACH;EAEA,OAAOK,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,iBAAiB,CAACmB,aAAa,GAAG,UAAUT,aAAa,EAAE;EACzD,IAAIZ,OAAO,CAACY,aAAa,CAAC,EAAE;IAC1BA,aAAa,CAACJ,YAAY,GAAG,CAAC,CAAC;EACjC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,eAAeN,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}