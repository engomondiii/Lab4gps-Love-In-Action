{"ast":null,"code":"import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport BingMapsStyle from \"./BingMapsStyle.js\";\nimport DiscardEmptyTilePolicy from \"./DiscardEmptyTileImagePolicy.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\n/**\n * @typedef {object} BingMapsImageryProvider.ConstructorOptions\n *\n * Initialization options for the BingMapsImageryProvider constructor\n *\n * @property {string} [key] The Bing Maps key for your application, which can be\n *        created at {@link https://www.bingmapsportal.com/}.\n * @property {string} [tileProtocol] The protocol to use when loading tiles, e.g. 'http' or 'https'.\n *        By default, tiles are loaded using the same protocol as the page.\n * @property {BingMapsStyle} [mapStyle=BingMapsStyle.AERIAL] The type of Bing Maps imagery to load.\n * @property {string} [mapLayer] Additional display layer options as defined on {@link https://learn.microsoft.com/en-us/bingmaps/rest-services/imagery/get-imagery-metadata#template-parameters}\n * @property {string} [culture=''] The culture to use when requesting Bing Maps imagery. Not\n *        all cultures are supported. See {@link http://msdn.microsoft.com/en-us/library/hh441729.aspx}\n *        for information on the supported cultures.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid.  If not specified, the default ellipsoid is used.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded.  By default, a {@link DiscardEmptyTileImagePolicy}\n *        will be used, with the expectation that the Bing Maps server will send a zero-length response for missing tiles.\n *        To ensure that no tiles are discarded, construct and pass a {@link NeverTileDiscardPolicy} for this parameter.\n */\n\n/**\n * Used to track creation details while fetching initial metadata\n *\n * @constructor\n * @private\n *\n * @param {BingMapsImageryProvider.ConstructorOptions} options An object describing initialization options\n */\nfunction ImageryProviderBuilder(options) {\n  this.tileWidth = undefined;\n  this.tileHeight = undefined;\n  this.maximumLevel = undefined;\n  this.imageUrlSubdomains = undefined;\n  this.imageUrlTemplate = undefined;\n  this.attributionList = undefined;\n}\n\n/**\n * Complete BingMapsImageryProvider creation based on builder values.\n *\n * @private\n *\n * @param {BingMapsImageryProvider} provider\n */\nImageryProviderBuilder.prototype.build = function (provider) {\n  provider._tileWidth = this.tileWidth;\n  provider._tileHeight = this.tileHeight;\n  provider._maximumLevel = this.maximumLevel;\n  provider._imageUrlSubdomains = this.imageUrlSubdomains;\n  provider._imageUrlTemplate = this.imageUrlTemplate;\n  let attributionList = provider._attributionList = this.attributionList;\n  if (!attributionList) {\n    attributionList = [];\n  }\n  provider._attributionList = attributionList;\n  for (let attributionIndex = 0, attributionLength = attributionList.length; attributionIndex < attributionLength; ++attributionIndex) {\n    const attribution = attributionList[attributionIndex];\n    if (attribution.credit instanceof Credit) {\n      // If attribution.credit has already been created\n      // then we are using a cached value, which means\n      // none of the remaining processing needs to be done.\n      break;\n    }\n    attribution.credit = new Credit(attribution.attribution);\n    const coverageAreas = attribution.coverageAreas;\n    for (let areaIndex = 0, areaLength = attribution.coverageAreas.length; areaIndex < areaLength; ++areaIndex) {\n      const area = coverageAreas[areaIndex];\n      const bbox = area.bbox;\n      area.bbox = new Rectangle(CesiumMath.toRadians(bbox[1]), CesiumMath.toRadians(bbox[0]), CesiumMath.toRadians(bbox[3]), CesiumMath.toRadians(bbox[2]));\n    }\n  }\n};\nfunction metadataSuccess(data, imageryProviderBuilder) {\n  if (data.resourceSets.length !== 1) {\n    throw new RuntimeError(\"metadata does not specify one resource in resourceSets\");\n  }\n  const resource = data.resourceSets[0].resources[0];\n  imageryProviderBuilder.tileWidth = resource.imageWidth;\n  imageryProviderBuilder.tileHeight = resource.imageHeight;\n  imageryProviderBuilder.maximumLevel = resource.zoomMax - 1;\n  imageryProviderBuilder.imageUrlSubdomains = resource.imageUrlSubdomains;\n  imageryProviderBuilder.imageUrlTemplate = resource.imageUrl;\n  let validProviders = resource.imageryProviders;\n  if (defined(resource.imageryProviders)) {\n    // prevent issues with the imagery API from crashing the viewer when the expected properties are not there\n    // See https://github.com/CesiumGS/cesium/issues/12088\n    validProviders = resource.imageryProviders.filter(provider => provider.coverageAreas?.some(area => defined(area.bbox)));\n  }\n  imageryProviderBuilder.attributionList = validProviders;\n}\nfunction metadataFailure(metadataResource, error, provider) {\n  let message = `An error occurred while accessing ${metadataResource.url}`;\n  if (defined(error) && defined(error.message)) {\n    message += `: ${error.message}`;\n  }\n  TileProviderError.reportError(undefined, provider, defined(provider) ? provider._errorEvent : undefined, message, undefined, undefined, undefined, error);\n  throw new RuntimeError(message);\n}\nasync function requestMetadata(metadataResource, imageryProviderBuilder, provider) {\n  const cacheKey = metadataResource.url;\n  let promise = BingMapsImageryProvider._metadataCache[cacheKey];\n  if (!defined(promise)) {\n    promise = metadataResource.fetchJsonp(\"jsonp\");\n    BingMapsImageryProvider._metadataCache[cacheKey] = promise;\n  }\n  try {\n    const data = await promise;\n    return metadataSuccess(data, imageryProviderBuilder);\n  } catch (e) {\n    metadataFailure(metadataResource, e, provider);\n  }\n}\n\n/**\n * <div class=\"notice\">\n * To construct a BingMapsImageryProvider, call {@link BingMapsImageryProvider.fromUrl}. Do not call the constructor directly.\n * </div>\n *\n * Provides tiled imagery using the Bing Maps Imagery REST API.\n *\n * @alias BingMapsImageryProvider\n * @constructor\n *\n * @param {BingMapsImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @see BingMapsImageryProvider.fromUrl\n * @see ArcGisMapServerImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n * @example\n * const bing = await Cesium.BingMapsImageryProvider.fromUrl(\n *   \"https://dev.virtualearth.net\", {\n *     key: \"get-yours-at-https://www.bingmapsportal.com/\",\n *     mapStyle: Cesium.BingMapsStyle.AERIAL\n * });\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/ff701713.aspx|Bing Maps REST Services}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction BingMapsImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = 1.0;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n  this._mapStyle = defaultValue(options.mapStyle, BingMapsStyle.AERIAL);\n  this._mapLayer = options.mapLayer;\n  this._culture = defaultValue(options.culture, \"\");\n  this._key = options.key;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  if (!defined(this._tileDiscardPolicy)) {\n    this._tileDiscardPolicy = new DiscardEmptyTilePolicy();\n  }\n  this._proxy = options.proxy;\n  this._credit = new Credit(`<a href=\"https://www.microsoft.com/en-us/maps/bing-maps/product\"><img src=\"${BingMapsImageryProvider.logoUrl}\" title=\"Bing Imagery\"/></a>`);\n  this._tilingScheme = new WebMercatorTilingScheme({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    ellipsoid: options.ellipsoid\n  });\n  this._tileWidth = undefined;\n  this._tileHeight = undefined;\n  this._maximumLevel = undefined;\n  this._imageUrlTemplate = undefined;\n  this._imageUrlSubdomains = undefined;\n  this._attributionList = undefined;\n  this._errorEvent = new Event();\n}\nObject.defineProperties(BingMapsImageryProvider.prototype, {\n  /**\n   * Gets the name of the BingMaps server url hosting the imagery.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    }\n  },\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n  /**\n   * Gets the Bing Maps key.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  key: {\n    get: function () {\n      return this._key;\n    }\n  },\n  /**\n   * Gets the type of Bing Maps imagery to load.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {BingMapsStyle}\n   * @readonly\n   */\n  mapStyle: {\n    get: function () {\n      return this._mapStyle;\n    }\n  },\n  /**\n   * Gets the additional map layer options as defined in {@link https://learn.microsoft.com/en-us/bingmaps/rest-services/imagery/get-imagery-metadata#template-parameters}/\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  mapLayer: {\n    get: function () {\n      return this._mapLayer;\n    }\n  },\n  /**\n   * The culture to use when requesting Bing Maps imagery. Not\n   * all cultures are supported. See {@link http://msdn.microsoft.com/en-us/library/hh441729.aspx}\n   * for information on the supported cultures.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  culture: {\n    get: function () {\n      return this._culture;\n    }\n  },\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    }\n  },\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    }\n  },\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    }\n  },\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return 0;\n    }\n  },\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    }\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    }\n  },\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    }\n  },\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return defined(this.mapLayer);\n    }\n  }\n});\n\n/**\n * Creates an {@link ImageryProvider} which provides tiled imagery using the Bing Maps Imagery REST API.\n *\n * @param {Resource|String} url The url of the Bing Maps server hosting the imagery.\n * @param {BingMapsImageryProvider.ConstructorOptions} options Object describing initialization options\n * @returns {Promise<BingMapsImageryProvider>} A promise that resolves to the created BingMapsImageryProvider\n *\n * @example\n * const bing = await Cesium.BingMapsImageryProvider.fromUrl(\n *   \"https://dev.virtualearth.net\", {\n *     key: \"get-yours-at-https://www.bingmapsportal.com/\",\n *     mapStyle: Cesium.BingMapsStyle.AERIAL\n * });\n *\n * @exception {RuntimeError} metadata does not specify one resource in resourceSets\n */\nBingMapsImageryProvider.fromUrl = async function (url, options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  Check.defined(\"options.key\", options.key);\n  //>>includeEnd('debug');\n\n  let tileProtocol = options.tileProtocol;\n\n  // For backward compatibility reasons, the tileProtocol may end with\n  // a `:`. Remove it.\n  if (defined(tileProtocol)) {\n    if (tileProtocol.length > 0 && tileProtocol[tileProtocol.length - 1] === \":\") {\n      tileProtocol = tileProtocol.substr(0, tileProtocol.length - 1);\n    }\n  } else {\n    // use http if the document's protocol is http, otherwise use https\n    const documentProtocol = document.location.protocol;\n    tileProtocol = documentProtocol === \"http:\" ? \"http\" : \"https\";\n  }\n  const mapStyle = defaultValue(options.mapStyle, BingMapsStyle.AERIAL);\n  const resource = Resource.createIfNeeded(url);\n  resource.appendForwardSlash();\n  const queryParameters = {\n    incl: \"ImageryProviders\",\n    key: options.key,\n    uriScheme: tileProtocol\n  };\n  if (defined(options.mapLayer)) {\n    queryParameters.mapLayer = options.mapLayer;\n  }\n  if (defined(options.culture)) {\n    queryParameters.culture = options.culture;\n  }\n  const metadataResource = resource.getDerivedResource({\n    url: `REST/v1/Imagery/Metadata/${mapStyle}`,\n    queryParameters: queryParameters\n  });\n  const provider = new BingMapsImageryProvider(options);\n  provider._resource = resource;\n  const imageryProviderBuilder = new ImageryProviderBuilder(options);\n  await requestMetadata(metadataResource, imageryProviderBuilder);\n  imageryProviderBuilder.build(provider);\n  return provider;\n};\nconst rectangleScratch = new Rectangle();\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nBingMapsImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  const rectangle = this._tilingScheme.tileXYToRectangle(x, y, level, rectangleScratch);\n  const result = getRectangleAttribution(this._attributionList, level, rectangle);\n  return result;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nBingMapsImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  const promise = ImageryProvider.loadImage(this, buildImageResource(this, x, y, level, request));\n  if (defined(promise)) {\n    return promise.catch(function (error) {\n      // One cause of an error here is that the image we tried to load was zero-length.\n      // This isn't actually a problem, since it indicates that there is no tile.\n      // So, in that case we return the EMPTY_IMAGE sentinel value for later discarding.\n      if (defined(error.blob) && error.blob.size === 0) {\n        return DiscardEmptyTilePolicy.EMPTY_IMAGE;\n      }\n      return Promise.reject(error);\n    });\n  }\n  return undefined;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nBingMapsImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n};\n\n/**\n * Converts a tiles (x, y, level) position into a quadkey used to request an image\n * from a Bing Maps server.\n *\n * @param {number} x The tile's x coordinate.\n * @param {number} y The tile's y coordinate.\n * @param {number} level The tile's zoom level.\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/bb259689.aspx|Bing Maps Tile System}\n * @see BingMapsImageryProvider#quadKeyToTileXY\n */\nBingMapsImageryProvider.tileXYToQuadKey = function (x, y, level) {\n  let quadkey = \"\";\n  for (let i = level; i >= 0; --i) {\n    const bitmask = 1 << i;\n    let digit = 0;\n    if ((x & bitmask) !== 0) {\n      digit |= 1;\n    }\n    if ((y & bitmask) !== 0) {\n      digit |= 2;\n    }\n    quadkey += digit;\n  }\n  return quadkey;\n};\n\n/**\n * Converts a tile's quadkey used to request an image from a Bing Maps server into the\n * (x, y, level) position.\n *\n * @param {string} quadkey The tile's quad key\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/bb259689.aspx|Bing Maps Tile System}\n * @see BingMapsImageryProvider#tileXYToQuadKey\n */\nBingMapsImageryProvider.quadKeyToTileXY = function (quadkey) {\n  let x = 0;\n  let y = 0;\n  const level = quadkey.length - 1;\n  for (let i = level; i >= 0; --i) {\n    const bitmask = 1 << i;\n    const digit = +quadkey[level - i];\n    if ((digit & 1) !== 0) {\n      x |= bitmask;\n    }\n    if ((digit & 2) !== 0) {\n      y |= bitmask;\n    }\n  }\n  return {\n    x: x,\n    y: y,\n    level: level\n  };\n};\nBingMapsImageryProvider._logoUrl = undefined;\nObject.defineProperties(BingMapsImageryProvider, {\n  /**\n   * Gets or sets the URL to the Bing logo for display in the credit.\n   * @memberof BingMapsImageryProvider\n   * @type {string}\n   */\n  logoUrl: {\n    get: function () {\n      if (!defined(BingMapsImageryProvider._logoUrl)) {\n        BingMapsImageryProvider._logoUrl = buildModuleUrl(\"Assets/Images/bing_maps_credit.png\");\n      }\n      return BingMapsImageryProvider._logoUrl;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n\n      BingMapsImageryProvider._logoUrl = value;\n    }\n  }\n});\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  const imageUrl = imageryProvider._imageUrlTemplate;\n  const subdomains = imageryProvider._imageUrlSubdomains;\n  const subdomainIndex = (x + y + level) % subdomains.length;\n  return imageryProvider._resource.getDerivedResource({\n    url: imageUrl,\n    request: request,\n    templateValues: {\n      quadkey: BingMapsImageryProvider.tileXYToQuadKey(x, y, level),\n      subdomain: subdomains[subdomainIndex],\n      culture: imageryProvider._culture\n    },\n    queryParameters: {\n      // this parameter tells the Bing servers to send a zero-length response\n      // instead of a placeholder image for missing tiles.\n      n: \"z\"\n    }\n  });\n}\nconst intersectionScratch = new Rectangle();\nfunction getRectangleAttribution(attributionList, level, rectangle) {\n  // Bing levels start at 1, while ours start at 0.\n  ++level;\n  const result = [];\n  for (let attributionIndex = 0, attributionLength = attributionList.length; attributionIndex < attributionLength; ++attributionIndex) {\n    const attribution = attributionList[attributionIndex];\n    const coverageAreas = attribution.coverageAreas;\n    let included = false;\n    for (let areaIndex = 0, areaLength = attribution.coverageAreas.length; !included && areaIndex < areaLength; ++areaIndex) {\n      const area = coverageAreas[areaIndex];\n      if (level >= area.zoomMin && level <= area.zoomMax) {\n        const intersection = Rectangle.intersection(rectangle, area.bbox, intersectionScratch);\n        if (defined(intersection)) {\n          included = true;\n        }\n      }\n    }\n    if (included) {\n      result.push(attribution.credit);\n    }\n  }\n  return result;\n}\n\n// Exposed for testing\nBingMapsImageryProvider._metadataCache = {};\nexport default BingMapsImageryProvider;","map":{"version":3,"names":["buildModuleUrl","Check","Credit","defaultValue","defined","Event","CesiumMath","Rectangle","Resource","RuntimeError","TileProviderError","WebMercatorTilingScheme","BingMapsStyle","DiscardEmptyTilePolicy","ImageryProvider","ImageryProviderBuilder","options","tileWidth","undefined","tileHeight","maximumLevel","imageUrlSubdomains","imageUrlTemplate","attributionList","prototype","build","provider","_tileWidth","_tileHeight","_maximumLevel","_imageUrlSubdomains","_imageUrlTemplate","_attributionList","attributionIndex","attributionLength","length","attribution","credit","coverageAreas","areaIndex","areaLength","area","bbox","toRadians","metadataSuccess","data","imageryProviderBuilder","resourceSets","resource","resources","imageWidth","imageHeight","zoomMax","imageUrl","validProviders","imageryProviders","filter","some","metadataFailure","metadataResource","error","message","url","reportError","_errorEvent","requestMetadata","cacheKey","promise","BingMapsImageryProvider","_metadataCache","fetchJsonp","e","EMPTY_OBJECT","_defaultAlpha","_defaultNightAlpha","_defaultDayAlpha","_defaultBrightness","_defaultContrast","_defaultHue","_defaultSaturation","_defaultGamma","_defaultMinificationFilter","_defaultMagnificationFilter","_mapStyle","mapStyle","AERIAL","_mapLayer","mapLayer","_culture","culture","_key","key","_tileDiscardPolicy","tileDiscardPolicy","_proxy","proxy","_credit","logoUrl","_tilingScheme","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","ellipsoid","Object","defineProperties","get","_resource","minimumLevel","tilingScheme","rectangle","errorEvent","hasAlphaChannel","fromUrl","tileProtocol","substr","documentProtocol","document","location","protocol","createIfNeeded","appendForwardSlash","queryParameters","incl","uriScheme","getDerivedResource","rectangleScratch","getTileCredits","x","y","level","tileXYToRectangle","result","getRectangleAttribution","requestImage","request","loadImage","buildImageResource","catch","blob","size","EMPTY_IMAGE","Promise","reject","pickFeatures","longitude","latitude","tileXYToQuadKey","quadkey","i","bitmask","digit","quadKeyToTileXY","_logoUrl","set","value","imageryProvider","subdomains","subdomainIndex","templateValues","subdomain","n","intersectionScratch","included","zoomMin","intersection","push"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/BingMapsImageryProvider.js"],"sourcesContent":["import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport BingMapsStyle from \"./BingMapsStyle.js\";\nimport DiscardEmptyTilePolicy from \"./DiscardEmptyTileImagePolicy.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\n/**\n * @typedef {object} BingMapsImageryProvider.ConstructorOptions\n *\n * Initialization options for the BingMapsImageryProvider constructor\n *\n * @property {string} [key] The Bing Maps key for your application, which can be\n *        created at {@link https://www.bingmapsportal.com/}.\n * @property {string} [tileProtocol] The protocol to use when loading tiles, e.g. 'http' or 'https'.\n *        By default, tiles are loaded using the same protocol as the page.\n * @property {BingMapsStyle} [mapStyle=BingMapsStyle.AERIAL] The type of Bing Maps imagery to load.\n * @property {string} [mapLayer] Additional display layer options as defined on {@link https://learn.microsoft.com/en-us/bingmaps/rest-services/imagery/get-imagery-metadata#template-parameters}\n * @property {string} [culture=''] The culture to use when requesting Bing Maps imagery. Not\n *        all cultures are supported. See {@link http://msdn.microsoft.com/en-us/library/hh441729.aspx}\n *        for information on the supported cultures.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid.  If not specified, the default ellipsoid is used.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded.  By default, a {@link DiscardEmptyTileImagePolicy}\n *        will be used, with the expectation that the Bing Maps server will send a zero-length response for missing tiles.\n *        To ensure that no tiles are discarded, construct and pass a {@link NeverTileDiscardPolicy} for this parameter.\n */\n\n/**\n * Used to track creation details while fetching initial metadata\n *\n * @constructor\n * @private\n *\n * @param {BingMapsImageryProvider.ConstructorOptions} options An object describing initialization options\n */\nfunction ImageryProviderBuilder(options) {\n  this.tileWidth = undefined;\n  this.tileHeight = undefined;\n  this.maximumLevel = undefined;\n  this.imageUrlSubdomains = undefined;\n  this.imageUrlTemplate = undefined;\n\n  this.attributionList = undefined;\n}\n\n/**\n * Complete BingMapsImageryProvider creation based on builder values.\n *\n * @private\n *\n * @param {BingMapsImageryProvider} provider\n */\nImageryProviderBuilder.prototype.build = function (provider) {\n  provider._tileWidth = this.tileWidth;\n  provider._tileHeight = this.tileHeight;\n  provider._maximumLevel = this.maximumLevel;\n  provider._imageUrlSubdomains = this.imageUrlSubdomains;\n  provider._imageUrlTemplate = this.imageUrlTemplate;\n\n  let attributionList = (provider._attributionList = this.attributionList);\n  if (!attributionList) {\n    attributionList = [];\n  }\n  provider._attributionList = attributionList;\n\n  for (\n    let attributionIndex = 0, attributionLength = attributionList.length;\n    attributionIndex < attributionLength;\n    ++attributionIndex\n  ) {\n    const attribution = attributionList[attributionIndex];\n\n    if (attribution.credit instanceof Credit) {\n      // If attribution.credit has already been created\n      // then we are using a cached value, which means\n      // none of the remaining processing needs to be done.\n      break;\n    }\n\n    attribution.credit = new Credit(attribution.attribution);\n    const coverageAreas = attribution.coverageAreas;\n\n    for (\n      let areaIndex = 0, areaLength = attribution.coverageAreas.length;\n      areaIndex < areaLength;\n      ++areaIndex\n    ) {\n      const area = coverageAreas[areaIndex];\n      const bbox = area.bbox;\n      area.bbox = new Rectangle(\n        CesiumMath.toRadians(bbox[1]),\n        CesiumMath.toRadians(bbox[0]),\n        CesiumMath.toRadians(bbox[3]),\n        CesiumMath.toRadians(bbox[2]),\n      );\n    }\n  }\n};\n\nfunction metadataSuccess(data, imageryProviderBuilder) {\n  if (data.resourceSets.length !== 1) {\n    throw new RuntimeError(\n      \"metadata does not specify one resource in resourceSets\",\n    );\n  }\n\n  const resource = data.resourceSets[0].resources[0];\n  imageryProviderBuilder.tileWidth = resource.imageWidth;\n  imageryProviderBuilder.tileHeight = resource.imageHeight;\n  imageryProviderBuilder.maximumLevel = resource.zoomMax - 1;\n  imageryProviderBuilder.imageUrlSubdomains = resource.imageUrlSubdomains;\n  imageryProviderBuilder.imageUrlTemplate = resource.imageUrl;\n\n  let validProviders = resource.imageryProviders;\n  if (defined(resource.imageryProviders)) {\n    // prevent issues with the imagery API from crashing the viewer when the expected properties are not there\n    // See https://github.com/CesiumGS/cesium/issues/12088\n    validProviders = resource.imageryProviders.filter((provider) =>\n      provider.coverageAreas?.some((area) => defined(area.bbox)),\n    );\n  }\n  imageryProviderBuilder.attributionList = validProviders;\n}\n\nfunction metadataFailure(metadataResource, error, provider) {\n  let message = `An error occurred while accessing ${metadataResource.url}`;\n  if (defined(error) && defined(error.message)) {\n    message += `: ${error.message}`;\n  }\n\n  TileProviderError.reportError(\n    undefined,\n    provider,\n    defined(provider) ? provider._errorEvent : undefined,\n    message,\n    undefined,\n    undefined,\n    undefined,\n    error,\n  );\n\n  throw new RuntimeError(message);\n}\n\nasync function requestMetadata(\n  metadataResource,\n  imageryProviderBuilder,\n  provider,\n) {\n  const cacheKey = metadataResource.url;\n  let promise = BingMapsImageryProvider._metadataCache[cacheKey];\n  if (!defined(promise)) {\n    promise = metadataResource.fetchJsonp(\"jsonp\");\n    BingMapsImageryProvider._metadataCache[cacheKey] = promise;\n  }\n\n  try {\n    const data = await promise;\n    return metadataSuccess(data, imageryProviderBuilder);\n  } catch (e) {\n    metadataFailure(metadataResource, e, provider);\n  }\n}\n\n/**\n * <div class=\"notice\">\n * To construct a BingMapsImageryProvider, call {@link BingMapsImageryProvider.fromUrl}. Do not call the constructor directly.\n * </div>\n *\n * Provides tiled imagery using the Bing Maps Imagery REST API.\n *\n * @alias BingMapsImageryProvider\n * @constructor\n *\n * @param {BingMapsImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @see BingMapsImageryProvider.fromUrl\n * @see ArcGisMapServerImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n * @example\n * const bing = await Cesium.BingMapsImageryProvider.fromUrl(\n *   \"https://dev.virtualearth.net\", {\n *     key: \"get-yours-at-https://www.bingmapsportal.com/\",\n *     mapStyle: Cesium.BingMapsStyle.AERIAL\n * });\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/ff701713.aspx|Bing Maps REST Services}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction BingMapsImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._defaultAlpha = undefined;\n  this._defaultNightAlpha = undefined;\n  this._defaultDayAlpha = undefined;\n  this._defaultBrightness = undefined;\n  this._defaultContrast = undefined;\n  this._defaultHue = undefined;\n  this._defaultSaturation = undefined;\n  this._defaultGamma = 1.0;\n  this._defaultMinificationFilter = undefined;\n  this._defaultMagnificationFilter = undefined;\n\n  this._mapStyle = defaultValue(options.mapStyle, BingMapsStyle.AERIAL);\n  this._mapLayer = options.mapLayer;\n  this._culture = defaultValue(options.culture, \"\");\n  this._key = options.key;\n\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  if (!defined(this._tileDiscardPolicy)) {\n    this._tileDiscardPolicy = new DiscardEmptyTilePolicy();\n  }\n\n  this._proxy = options.proxy;\n  this._credit = new Credit(\n    `<a href=\"https://www.microsoft.com/en-us/maps/bing-maps/product\"><img src=\"${BingMapsImageryProvider.logoUrl}\" title=\"Bing Imagery\"/></a>`,\n  );\n\n  this._tilingScheme = new WebMercatorTilingScheme({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    ellipsoid: options.ellipsoid,\n  });\n\n  this._tileWidth = undefined;\n  this._tileHeight = undefined;\n  this._maximumLevel = undefined;\n  this._imageUrlTemplate = undefined;\n  this._imageUrlSubdomains = undefined;\n  this._attributionList = undefined;\n\n  this._errorEvent = new Event();\n}\n\nObject.defineProperties(BingMapsImageryProvider.prototype, {\n  /**\n   * Gets the name of the BingMaps server url hosting the imagery.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the Bing Maps key.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  key: {\n    get: function () {\n      return this._key;\n    },\n  },\n\n  /**\n   * Gets the type of Bing Maps imagery to load.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {BingMapsStyle}\n   * @readonly\n   */\n  mapStyle: {\n    get: function () {\n      return this._mapStyle;\n    },\n  },\n\n  /**\n   * Gets the additional map layer options as defined in {@link https://learn.microsoft.com/en-us/bingmaps/rest-services/imagery/get-imagery-metadata#template-parameters}/\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  mapLayer: {\n    get: function () {\n      return this._mapLayer;\n    },\n  },\n\n  /**\n   * The culture to use when requesting Bing Maps imagery. Not\n   * all cultures are supported. See {@link http://msdn.microsoft.com/en-us/library/hh441729.aspx}\n   * for information on the supported cultures.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {string}\n   * @readonly\n   */\n  culture: {\n    get: function () {\n      return this._culture;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof BingMapsImageryProvider.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return defined(this.mapLayer);\n    },\n  },\n});\n\n/**\n * Creates an {@link ImageryProvider} which provides tiled imagery using the Bing Maps Imagery REST API.\n *\n * @param {Resource|String} url The url of the Bing Maps server hosting the imagery.\n * @param {BingMapsImageryProvider.ConstructorOptions} options Object describing initialization options\n * @returns {Promise<BingMapsImageryProvider>} A promise that resolves to the created BingMapsImageryProvider\n *\n * @example\n * const bing = await Cesium.BingMapsImageryProvider.fromUrl(\n *   \"https://dev.virtualearth.net\", {\n *     key: \"get-yours-at-https://www.bingmapsportal.com/\",\n *     mapStyle: Cesium.BingMapsStyle.AERIAL\n * });\n *\n * @exception {RuntimeError} metadata does not specify one resource in resourceSets\n */\nBingMapsImageryProvider.fromUrl = async function (url, options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  Check.defined(\"options.key\", options.key);\n  //>>includeEnd('debug');\n\n  let tileProtocol = options.tileProtocol;\n\n  // For backward compatibility reasons, the tileProtocol may end with\n  // a `:`. Remove it.\n  if (defined(tileProtocol)) {\n    if (\n      tileProtocol.length > 0 &&\n      tileProtocol[tileProtocol.length - 1] === \":\"\n    ) {\n      tileProtocol = tileProtocol.substr(0, tileProtocol.length - 1);\n    }\n  } else {\n    // use http if the document's protocol is http, otherwise use https\n    const documentProtocol = document.location.protocol;\n    tileProtocol = documentProtocol === \"http:\" ? \"http\" : \"https\";\n  }\n\n  const mapStyle = defaultValue(options.mapStyle, BingMapsStyle.AERIAL);\n  const resource = Resource.createIfNeeded(url);\n  resource.appendForwardSlash();\n\n  const queryParameters = {\n    incl: \"ImageryProviders\",\n    key: options.key,\n    uriScheme: tileProtocol,\n  };\n\n  if (defined(options.mapLayer)) {\n    queryParameters.mapLayer = options.mapLayer;\n  }\n\n  if (defined(options.culture)) {\n    queryParameters.culture = options.culture;\n  }\n\n  const metadataResource = resource.getDerivedResource({\n    url: `REST/v1/Imagery/Metadata/${mapStyle}`,\n    queryParameters: queryParameters,\n  });\n\n  const provider = new BingMapsImageryProvider(options);\n  provider._resource = resource;\n  const imageryProviderBuilder = new ImageryProviderBuilder(options);\n  await requestMetadata(metadataResource, imageryProviderBuilder);\n  imageryProviderBuilder.build(provider);\n  return provider;\n};\n\nconst rectangleScratch = new Rectangle();\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n */\nBingMapsImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  const rectangle = this._tilingScheme.tileXYToRectangle(\n    x,\n    y,\n    level,\n    rectangleScratch,\n  );\n  const result = getRectangleAttribution(\n    this._attributionList,\n    level,\n    rectangle,\n  );\n\n  return result;\n};\n\n/**\n * Requests the image for a given tile.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n */\nBingMapsImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request,\n) {\n  const promise = ImageryProvider.loadImage(\n    this,\n    buildImageResource(this, x, y, level, request),\n  );\n\n  if (defined(promise)) {\n    return promise.catch(function (error) {\n      // One cause of an error here is that the image we tried to load was zero-length.\n      // This isn't actually a problem, since it indicates that there is no tile.\n      // So, in that case we return the EMPTY_IMAGE sentinel value for later discarding.\n      if (defined(error.blob) && error.blob.size === 0) {\n        return DiscardEmptyTilePolicy.EMPTY_IMAGE;\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  return undefined;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {number} x The tile X coordinate.\n * @param {number} y The tile Y coordinate.\n * @param {number} level The tile level.\n * @param {number} longitude The longitude at which to pick features.\n * @param {number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nBingMapsImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n) {\n  return undefined;\n};\n\n/**\n * Converts a tiles (x, y, level) position into a quadkey used to request an image\n * from a Bing Maps server.\n *\n * @param {number} x The tile's x coordinate.\n * @param {number} y The tile's y coordinate.\n * @param {number} level The tile's zoom level.\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/bb259689.aspx|Bing Maps Tile System}\n * @see BingMapsImageryProvider#quadKeyToTileXY\n */\nBingMapsImageryProvider.tileXYToQuadKey = function (x, y, level) {\n  let quadkey = \"\";\n  for (let i = level; i >= 0; --i) {\n    const bitmask = 1 << i;\n    let digit = 0;\n\n    if ((x & bitmask) !== 0) {\n      digit |= 1;\n    }\n\n    if ((y & bitmask) !== 0) {\n      digit |= 2;\n    }\n\n    quadkey += digit;\n  }\n  return quadkey;\n};\n\n/**\n * Converts a tile's quadkey used to request an image from a Bing Maps server into the\n * (x, y, level) position.\n *\n * @param {string} quadkey The tile's quad key\n *\n * @see {@link http://msdn.microsoft.com/en-us/library/bb259689.aspx|Bing Maps Tile System}\n * @see BingMapsImageryProvider#tileXYToQuadKey\n */\nBingMapsImageryProvider.quadKeyToTileXY = function (quadkey) {\n  let x = 0;\n  let y = 0;\n  const level = quadkey.length - 1;\n  for (let i = level; i >= 0; --i) {\n    const bitmask = 1 << i;\n    const digit = +quadkey[level - i];\n\n    if ((digit & 1) !== 0) {\n      x |= bitmask;\n    }\n\n    if ((digit & 2) !== 0) {\n      y |= bitmask;\n    }\n  }\n  return {\n    x: x,\n    y: y,\n    level: level,\n  };\n};\n\nBingMapsImageryProvider._logoUrl = undefined;\n\nObject.defineProperties(BingMapsImageryProvider, {\n  /**\n   * Gets or sets the URL to the Bing logo for display in the credit.\n   * @memberof BingMapsImageryProvider\n   * @type {string}\n   */\n  logoUrl: {\n    get: function () {\n      if (!defined(BingMapsImageryProvider._logoUrl)) {\n        BingMapsImageryProvider._logoUrl = buildModuleUrl(\n          \"Assets/Images/bing_maps_credit.png\",\n        );\n      }\n      return BingMapsImageryProvider._logoUrl;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n\n      BingMapsImageryProvider._logoUrl = value;\n    },\n  },\n});\n\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  const imageUrl = imageryProvider._imageUrlTemplate;\n\n  const subdomains = imageryProvider._imageUrlSubdomains;\n  const subdomainIndex = (x + y + level) % subdomains.length;\n\n  return imageryProvider._resource.getDerivedResource({\n    url: imageUrl,\n    request: request,\n    templateValues: {\n      quadkey: BingMapsImageryProvider.tileXYToQuadKey(x, y, level),\n      subdomain: subdomains[subdomainIndex],\n      culture: imageryProvider._culture,\n    },\n    queryParameters: {\n      // this parameter tells the Bing servers to send a zero-length response\n      // instead of a placeholder image for missing tiles.\n      n: \"z\",\n    },\n  });\n}\n\nconst intersectionScratch = new Rectangle();\n\nfunction getRectangleAttribution(attributionList, level, rectangle) {\n  // Bing levels start at 1, while ours start at 0.\n  ++level;\n\n  const result = [];\n\n  for (\n    let attributionIndex = 0, attributionLength = attributionList.length;\n    attributionIndex < attributionLength;\n    ++attributionIndex\n  ) {\n    const attribution = attributionList[attributionIndex];\n    const coverageAreas = attribution.coverageAreas;\n\n    let included = false;\n\n    for (\n      let areaIndex = 0, areaLength = attribution.coverageAreas.length;\n      !included && areaIndex < areaLength;\n      ++areaIndex\n    ) {\n      const area = coverageAreas[areaIndex];\n      if (level >= area.zoomMin && level <= area.zoomMax) {\n        const intersection = Rectangle.intersection(\n          rectangle,\n          area.bbox,\n          intersectionScratch,\n        );\n        if (defined(intersection)) {\n          included = true;\n        }\n      }\n    }\n\n    if (included) {\n      result.push(attribution.credit);\n    }\n  }\n\n  return result;\n}\n\n// Exposed for testing\nBingMapsImageryProvider._metadataCache = {};\nexport default BingMapsImageryProvider;\n"],"mappings":"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IAAI,CAACrB,SAAS;IACvB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEI,QAAQ,EAAE;IACRiB,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAClB,SAAS;IACvB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,OAAO,EAAE;IACPe,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAChB,QAAQ;IACtB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEvE,SAAS,EAAE;IACTuF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC7E,UAAU;IACxB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACER,UAAU,EAAE;IACVqF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC5E,WAAW;IACzB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACER,YAAY,EAAE;IACZoF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC3E,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACE6E,YAAY,EAAE;IACZF,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,CAAC;IACV;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEG,YAAY,EAAE;IACZH,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACN,aAAa;IAC3B;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEU,SAAS,EAAE;IACTJ,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACN,aAAa,CAACU,SAAS;IACrC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEf,iBAAiB,EAAE;IACjBW,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAACZ,kBAAkB;IAChC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEiB,UAAU,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}