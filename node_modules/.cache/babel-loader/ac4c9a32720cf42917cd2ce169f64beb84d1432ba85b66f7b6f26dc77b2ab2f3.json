{"ast":null,"code":"import { defaultValue, defined, DeveloperError, EllipsoidTerrainProvider, ImageryLayer, Terrain } from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link BaseLayerPicker}.\n * @alias BaseLayerPickerViewModel\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Globe} options.globe The Globe to use.\n * @param {ProviderViewModel[]} [options.imageryProviderViewModels=[]] The array of ProviderViewModel instances to use for imagery.\n * @param {ProviderViewModel} [options.selectedImageryProviderViewModel] The view model for the current base imagery layer, if not supplied the first available imagery layer is used.\n * @param {ProviderViewModel[]} [options.terrainProviderViewModels=[]] The array of ProviderViewModel instances to use for terrain.\n * @param {ProviderViewModel} [options.selectedTerrainProviderViewModel] The view model for the current base terrain layer, if not supplied the first available terrain layer is used.\n *\n * @exception {DeveloperError} imageryProviderViewModels must be an array.\n * @exception {DeveloperError} terrainProviderViewModels must be an array.\n */\nfunction BaseLayerPickerViewModel(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const globe = options.globe;\n  const imageryProviderViewModels = defaultValue(options.imageryProviderViewModels, []);\n  const terrainProviderViewModels = defaultValue(options.terrainProviderViewModels, []);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(globe)) {\n    throw new DeveloperError(\"globe is required\");\n  }\n  //>>includeEnd('debug');\n\n  this._globe = globe;\n\n  /**\n   * Gets or sets an array of ProviderViewModel instances available for imagery selection.\n   * This property is observable.\n   * @type {ProviderViewModel[]}\n   */\n  this.imageryProviderViewModels = imageryProviderViewModels.slice(0);\n\n  /**\n   * Gets or sets an array of ProviderViewModel instances available for terrain selection.\n   * This property is observable.\n   * @type {ProviderViewModel[]}\n   */\n  this.terrainProviderViewModels = terrainProviderViewModels.slice(0);\n\n  /**\n   * Gets or sets whether the imagery selection drop-down is currently visible.\n   * @type {boolean}\n   * @default false\n   */\n  this.dropDownVisible = false;\n  knockout.track(this, [\"imageryProviderViewModels\", \"terrainProviderViewModels\", \"dropDownVisible\"]);\n  const imageryObservable = knockout.getObservable(this, \"imageryProviderViewModels\");\n  const imageryProviders = knockout.pureComputed(function () {\n    const providers = imageryObservable();\n    const categories = {};\n    let i;\n    for (i = 0; i < providers.length; i++) {\n      const provider = providers[i];\n      const category = provider.category;\n      if (defined(categories[category])) {\n        categories[category].push(provider);\n      } else {\n        categories[category] = [provider];\n      }\n    }\n    const allCategoryNames = Object.keys(categories);\n    const result = [];\n    for (i = 0; i < allCategoryNames.length; i++) {\n      const name = allCategoryNames[i];\n      result.push({\n        name: name,\n        providers: categories[name]\n      });\n    }\n    return result;\n  });\n  this._imageryProviders = imageryProviders;\n  const terrainObservable = knockout.getObservable(this, \"terrainProviderViewModels\");\n  const terrainProviders = knockout.pureComputed(function () {\n    const providers = terrainObservable();\n    const categories = {};\n    let i;\n    for (i = 0; i < providers.length; i++) {\n      const provider = providers[i];\n      const category = provider.category;\n      if (defined(categories[category])) {\n        categories[category].push(provider);\n      } else {\n        categories[category] = [provider];\n      }\n    }\n    const allCategoryNames = Object.keys(categories);\n    const result = [];\n    for (i = 0; i < allCategoryNames.length; i++) {\n      const name = allCategoryNames[i];\n      result.push({\n        name: name,\n        providers: categories[name]\n      });\n    }\n    return result;\n  });\n  this._terrainProviders = terrainProviders;\n\n  /**\n   * Gets the button tooltip.  This property is observable.\n   * @type {string}\n   */\n  this.buttonTooltip = undefined;\n  knockout.defineProperty(this, \"buttonTooltip\", function () {\n    const selectedImagery = this.selectedImagery;\n    const selectedTerrain = this.selectedTerrain;\n    const imageryTip = defined(selectedImagery) ? selectedImagery.name : undefined;\n    const terrainTip = defined(selectedTerrain) ? selectedTerrain.name : undefined;\n    if (defined(imageryTip) && defined(terrainTip)) {\n      return `${imageryTip}\\n${terrainTip}`;\n    } else if (defined(imageryTip)) {\n      return imageryTip;\n    }\n    return terrainTip;\n  });\n\n  /**\n   * Gets the button background image.  This property is observable.\n   * @type {string}\n   */\n  this.buttonImageUrl = undefined;\n  knockout.defineProperty(this, \"buttonImageUrl\", function () {\n    const selectedImagery = this.selectedImagery;\n    if (defined(selectedImagery)) {\n      return selectedImagery.iconUrl;\n    }\n  });\n\n  /**\n   * Gets or sets the currently selected imagery.  This property is observable.\n   * @type {ProviderViewModel}\n   * @default undefined\n   */\n  this.selectedImagery = undefined;\n  const selectedImageryViewModel = knockout.observable();\n  this._currentImageryLayers = [];\n  knockout.defineProperty(this, \"selectedImagery\", {\n    get: function () {\n      return selectedImageryViewModel();\n    },\n    set: function (value) {\n      if (selectedImageryViewModel() === value) {\n        this.dropDownVisible = false;\n        return;\n      }\n      let i;\n      const currentImageryLayers = this._currentImageryLayers;\n      const currentImageryLayersLength = currentImageryLayers.length;\n      const imageryLayers = this._globe.imageryLayers;\n      let hadExistingBaseLayer = false;\n      for (i = 0; i < currentImageryLayersLength; i++) {\n        const layersLength = imageryLayers.length;\n        for (let x = 0; x < layersLength; x++) {\n          const layer = imageryLayers.get(x);\n          if (layer === currentImageryLayers[i]) {\n            imageryLayers.remove(layer);\n            hadExistingBaseLayer = true;\n            break;\n          }\n        }\n      }\n      if (defined(value)) {\n        const newProviders = value.creationCommand();\n        if (Array.isArray(newProviders)) {\n          const newProvidersLength = newProviders.length;\n          this._currentImageryLayers = [];\n          for (i = newProvidersLength - 1; i >= 0; i--) {\n            const layer = ImageryLayer.fromProviderAsync(newProviders[i]);\n            imageryLayers.add(layer, 0);\n            this._currentImageryLayers.push(layer);\n          }\n        } else {\n          this._currentImageryLayers = [];\n          const layer = ImageryLayer.fromProviderAsync(newProviders);\n          layer.name = value.name;\n          if (hadExistingBaseLayer) {\n            imageryLayers.add(layer, 0);\n          } else {\n            const baseLayer = imageryLayers.get(0);\n            if (defined(baseLayer)) {\n              imageryLayers.remove(baseLayer);\n            }\n            imageryLayers.add(layer, 0);\n          }\n          this._currentImageryLayers.push(layer);\n        }\n      }\n      selectedImageryViewModel(value);\n      this.dropDownVisible = false;\n    }\n  });\n\n  /**\n   * Gets or sets the currently selected terrain.  This property is observable.\n   * @type {ProviderViewModel}\n   * @default undefined\n   */\n  this.selectedTerrain = undefined;\n  const selectedTerrainViewModel = knockout.observable();\n  knockout.defineProperty(this, \"selectedTerrain\", {\n    get: function () {\n      return selectedTerrainViewModel();\n    },\n    set: function (value) {\n      if (selectedTerrainViewModel() === value) {\n        this.dropDownVisible = false;\n        return;\n      }\n      let newProvider;\n      if (defined(value)) {\n        newProvider = value.creationCommand();\n      }\n\n      // If this is not a promise, we must set this synchronously to avoid overriding depthTestAgainstTerrain\n      // See https://github.com/CesiumGS/cesium/issues/6991\n      if (defined(newProvider) && !defined(newProvider.then)) {\n        this._globe.depthTestAgainstTerrain = !(newProvider instanceof EllipsoidTerrainProvider);\n        this._globe.terrainProvider = newProvider;\n      } else if (defined(newProvider)) {\n        let cancelUpdate = false;\n        const removeCancelListener = this._globe.terrainProviderChanged.addEventListener(() => {\n          cancelUpdate = true;\n          removeCancelListener();\n        });\n        const terrain = new Terrain(newProvider);\n        const removeEventListener = terrain.readyEvent.addEventListener(terrainProvider => {\n          if (cancelUpdate) {\n            // Early return in case something has changed outside of the picker.\n            return;\n          }\n          this._globe.depthTestAgainstTerrain = !(terrainProvider instanceof EllipsoidTerrainProvider);\n          this._globe.terrainProvider = terrainProvider;\n          removeEventListener();\n        });\n      }\n      selectedTerrainViewModel(value);\n      this.dropDownVisible = false;\n    }\n  });\n  const that = this;\n  this._toggleDropDown = createCommand(function () {\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n  this.selectedImagery = defaultValue(options.selectedImageryProviderViewModel, imageryProviderViewModels[0]);\n  this.selectedTerrain = options.selectedTerrainProviderViewModel;\n}\nObject.defineProperties(BaseLayerPickerViewModel.prototype, {\n  /**\n   * Gets the command to toggle the visibility of the drop down.\n   * @memberof BaseLayerPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function () {\n      return this._toggleDropDown;\n    }\n  },\n  /**\n   * Gets the globe.\n   * @memberof BaseLayerPickerViewModel.prototype\n   *\n   * @type {Globe}\n   */\n  globe: {\n    get: function () {\n      return this._globe;\n    }\n  }\n});\nexport default BaseLayerPickerViewModel;","map":{"version":3,"names":["defaultValue","defined","DeveloperError","EllipsoidTerrainProvider","ImageryLayer","Terrain","knockout","createCommand","BaseLayerPickerViewModel","options","EMPTY_OBJECT","globe","imageryProviderViewModels","terrainProviderViewModels","_globe","slice","dropDownVisible","track","imageryObservable","getObservable","imageryProviders","pureComputed","providers","categories","i","length","provider","category","push","allCategoryNames","Object","keys","result","name","_imageryProviders","terrainObservable","terrainProviders","_terrainProviders","buttonTooltip","undefined","defineProperty","selectedImagery","selectedTerrain","imageryTip","terrainTip","buttonImageUrl","iconUrl","selectedImageryViewModel","observable","_currentImageryLayers","get","set","value","currentImageryLayers","currentImageryLayersLength","imageryLayers","hadExistingBaseLayer","layersLength","x","layer","remove","newProviders","creationCommand","Array","isArray","newProvidersLength","fromProviderAsync","add","baseLayer","selectedTerrainViewModel","newProvider","then","depthTestAgainstTerrain","terrainProvider","cancelUpdate","removeCancelListener","terrainProviderChanged","addEventListener","terrain","removeEventListener","readyEvent","that","_toggleDropDown","selectedImageryProviderViewModel","selectedTerrainProviderViewModel","defineProperties","prototype","toggleDropDown"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/widgets/Source/BaseLayerPicker/BaseLayerPickerViewModel.js"],"sourcesContent":["import {\n  defaultValue,\n  defined,\n  DeveloperError,\n  EllipsoidTerrainProvider,\n  ImageryLayer,\n  Terrain,\n} from \"@cesium/engine\";\nimport knockout from \"../ThirdParty/knockout.js\";\nimport createCommand from \"../createCommand.js\";\n\n/**\n * The view model for {@link BaseLayerPicker}.\n * @alias BaseLayerPickerViewModel\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Globe} options.globe The Globe to use.\n * @param {ProviderViewModel[]} [options.imageryProviderViewModels=[]] The array of ProviderViewModel instances to use for imagery.\n * @param {ProviderViewModel} [options.selectedImageryProviderViewModel] The view model for the current base imagery layer, if not supplied the first available imagery layer is used.\n * @param {ProviderViewModel[]} [options.terrainProviderViewModels=[]] The array of ProviderViewModel instances to use for terrain.\n * @param {ProviderViewModel} [options.selectedTerrainProviderViewModel] The view model for the current base terrain layer, if not supplied the first available terrain layer is used.\n *\n * @exception {DeveloperError} imageryProviderViewModels must be an array.\n * @exception {DeveloperError} terrainProviderViewModels must be an array.\n */\nfunction BaseLayerPickerViewModel(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const globe = options.globe;\n  const imageryProviderViewModels = defaultValue(\n    options.imageryProviderViewModels,\n    [],\n  );\n  const terrainProviderViewModels = defaultValue(\n    options.terrainProviderViewModels,\n    [],\n  );\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(globe)) {\n    throw new DeveloperError(\"globe is required\");\n  }\n  //>>includeEnd('debug');\n\n  this._globe = globe;\n\n  /**\n   * Gets or sets an array of ProviderViewModel instances available for imagery selection.\n   * This property is observable.\n   * @type {ProviderViewModel[]}\n   */\n  this.imageryProviderViewModels = imageryProviderViewModels.slice(0);\n\n  /**\n   * Gets or sets an array of ProviderViewModel instances available for terrain selection.\n   * This property is observable.\n   * @type {ProviderViewModel[]}\n   */\n  this.terrainProviderViewModels = terrainProviderViewModels.slice(0);\n\n  /**\n   * Gets or sets whether the imagery selection drop-down is currently visible.\n   * @type {boolean}\n   * @default false\n   */\n  this.dropDownVisible = false;\n\n  knockout.track(this, [\n    \"imageryProviderViewModels\",\n    \"terrainProviderViewModels\",\n    \"dropDownVisible\",\n  ]);\n\n  const imageryObservable = knockout.getObservable(\n    this,\n    \"imageryProviderViewModels\",\n  );\n  const imageryProviders = knockout.pureComputed(function () {\n    const providers = imageryObservable();\n    const categories = {};\n    let i;\n    for (i = 0; i < providers.length; i++) {\n      const provider = providers[i];\n      const category = provider.category;\n      if (defined(categories[category])) {\n        categories[category].push(provider);\n      } else {\n        categories[category] = [provider];\n      }\n    }\n    const allCategoryNames = Object.keys(categories);\n\n    const result = [];\n    for (i = 0; i < allCategoryNames.length; i++) {\n      const name = allCategoryNames[i];\n      result.push({\n        name: name,\n        providers: categories[name],\n      });\n    }\n    return result;\n  });\n  this._imageryProviders = imageryProviders;\n\n  const terrainObservable = knockout.getObservable(\n    this,\n    \"terrainProviderViewModels\",\n  );\n  const terrainProviders = knockout.pureComputed(function () {\n    const providers = terrainObservable();\n    const categories = {};\n    let i;\n    for (i = 0; i < providers.length; i++) {\n      const provider = providers[i];\n      const category = provider.category;\n      if (defined(categories[category])) {\n        categories[category].push(provider);\n      } else {\n        categories[category] = [provider];\n      }\n    }\n    const allCategoryNames = Object.keys(categories);\n\n    const result = [];\n    for (i = 0; i < allCategoryNames.length; i++) {\n      const name = allCategoryNames[i];\n      result.push({\n        name: name,\n        providers: categories[name],\n      });\n    }\n    return result;\n  });\n  this._terrainProviders = terrainProviders;\n\n  /**\n   * Gets the button tooltip.  This property is observable.\n   * @type {string}\n   */\n  this.buttonTooltip = undefined;\n  knockout.defineProperty(this, \"buttonTooltip\", function () {\n    const selectedImagery = this.selectedImagery;\n    const selectedTerrain = this.selectedTerrain;\n\n    const imageryTip = defined(selectedImagery)\n      ? selectedImagery.name\n      : undefined;\n    const terrainTip = defined(selectedTerrain)\n      ? selectedTerrain.name\n      : undefined;\n\n    if (defined(imageryTip) && defined(terrainTip)) {\n      return `${imageryTip}\\n${terrainTip}`;\n    } else if (defined(imageryTip)) {\n      return imageryTip;\n    }\n    return terrainTip;\n  });\n\n  /**\n   * Gets the button background image.  This property is observable.\n   * @type {string}\n   */\n  this.buttonImageUrl = undefined;\n  knockout.defineProperty(this, \"buttonImageUrl\", function () {\n    const selectedImagery = this.selectedImagery;\n    if (defined(selectedImagery)) {\n      return selectedImagery.iconUrl;\n    }\n  });\n\n  /**\n   * Gets or sets the currently selected imagery.  This property is observable.\n   * @type {ProviderViewModel}\n   * @default undefined\n   */\n  this.selectedImagery = undefined;\n  const selectedImageryViewModel = knockout.observable();\n\n  this._currentImageryLayers = [];\n  knockout.defineProperty(this, \"selectedImagery\", {\n    get: function () {\n      return selectedImageryViewModel();\n    },\n    set: function (value) {\n      if (selectedImageryViewModel() === value) {\n        this.dropDownVisible = false;\n        return;\n      }\n\n      let i;\n      const currentImageryLayers = this._currentImageryLayers;\n      const currentImageryLayersLength = currentImageryLayers.length;\n      const imageryLayers = this._globe.imageryLayers;\n      let hadExistingBaseLayer = false;\n      for (i = 0; i < currentImageryLayersLength; i++) {\n        const layersLength = imageryLayers.length;\n        for (let x = 0; x < layersLength; x++) {\n          const layer = imageryLayers.get(x);\n          if (layer === currentImageryLayers[i]) {\n            imageryLayers.remove(layer);\n            hadExistingBaseLayer = true;\n            break;\n          }\n        }\n      }\n\n      if (defined(value)) {\n        const newProviders = value.creationCommand();\n        if (Array.isArray(newProviders)) {\n          const newProvidersLength = newProviders.length;\n          this._currentImageryLayers = [];\n          for (i = newProvidersLength - 1; i >= 0; i--) {\n            const layer = ImageryLayer.fromProviderAsync(newProviders[i]);\n            imageryLayers.add(layer, 0);\n            this._currentImageryLayers.push(layer);\n          }\n        } else {\n          this._currentImageryLayers = [];\n          const layer = ImageryLayer.fromProviderAsync(newProviders);\n          layer.name = value.name;\n          if (hadExistingBaseLayer) {\n            imageryLayers.add(layer, 0);\n          } else {\n            const baseLayer = imageryLayers.get(0);\n            if (defined(baseLayer)) {\n              imageryLayers.remove(baseLayer);\n            }\n            imageryLayers.add(layer, 0);\n          }\n          this._currentImageryLayers.push(layer);\n        }\n      }\n      selectedImageryViewModel(value);\n      this.dropDownVisible = false;\n    },\n  });\n\n  /**\n   * Gets or sets the currently selected terrain.  This property is observable.\n   * @type {ProviderViewModel}\n   * @default undefined\n   */\n  this.selectedTerrain = undefined;\n  const selectedTerrainViewModel = knockout.observable();\n\n  knockout.defineProperty(this, \"selectedTerrain\", {\n    get: function () {\n      return selectedTerrainViewModel();\n    },\n    set: function (value) {\n      if (selectedTerrainViewModel() === value) {\n        this.dropDownVisible = false;\n        return;\n      }\n\n      let newProvider;\n      if (defined(value)) {\n        newProvider = value.creationCommand();\n      }\n\n      // If this is not a promise, we must set this synchronously to avoid overriding depthTestAgainstTerrain\n      // See https://github.com/CesiumGS/cesium/issues/6991\n      if (defined(newProvider) && !defined(newProvider.then)) {\n        this._globe.depthTestAgainstTerrain = !(\n          newProvider instanceof EllipsoidTerrainProvider\n        );\n        this._globe.terrainProvider = newProvider;\n      } else if (defined(newProvider)) {\n        let cancelUpdate = false;\n        const removeCancelListener =\n          this._globe.terrainProviderChanged.addEventListener(() => {\n            cancelUpdate = true;\n            removeCancelListener();\n          });\n\n        const terrain = new Terrain(newProvider);\n        const removeEventListener = terrain.readyEvent.addEventListener(\n          (terrainProvider) => {\n            if (cancelUpdate) {\n              // Early return in case something has changed outside of the picker.\n              return;\n            }\n\n            this._globe.depthTestAgainstTerrain = !(\n              terrainProvider instanceof EllipsoidTerrainProvider\n            );\n            this._globe.terrainProvider = terrainProvider;\n            removeEventListener();\n          },\n        );\n      }\n\n      selectedTerrainViewModel(value);\n      this.dropDownVisible = false;\n    },\n  });\n\n  const that = this;\n  this._toggleDropDown = createCommand(function () {\n    that.dropDownVisible = !that.dropDownVisible;\n  });\n\n  this.selectedImagery = defaultValue(\n    options.selectedImageryProviderViewModel,\n    imageryProviderViewModels[0],\n  );\n  this.selectedTerrain = options.selectedTerrainProviderViewModel;\n}\n\nObject.defineProperties(BaseLayerPickerViewModel.prototype, {\n  /**\n   * Gets the command to toggle the visibility of the drop down.\n   * @memberof BaseLayerPickerViewModel.prototype\n   *\n   * @type {Command}\n   */\n  toggleDropDown: {\n    get: function () {\n      return this._toggleDropDown;\n    },\n  },\n\n  /**\n   * Gets the globe.\n   * @memberof BaseLayerPickerViewModel.prototype\n   *\n   * @type {Globe}\n   */\n  globe: {\n    get: function () {\n      return this._globe;\n    },\n  },\n});\nexport default BaseLayerPickerViewModel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}