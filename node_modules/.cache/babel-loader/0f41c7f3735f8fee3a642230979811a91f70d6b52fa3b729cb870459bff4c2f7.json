{"ast":null,"code":"import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport WindingOrder from \"./WindingOrder.js\";\nfunction computeAttributes(positions, shape) {\n  const attributes = new GeometryAttributes();\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: positions\n  });\n  const shapeLength = shape.length;\n  const vertexCount = attributes.position.values.length / 3;\n  const positionLength = positions.length / 3;\n  const shapeCount = positionLength / shapeLength;\n  const indices = IndexDatatype.createTypedArray(vertexCount, 2 * shapeLength * (shapeCount + 1));\n  let i, j;\n  let index = 0;\n  i = 0;\n  let offset = i * shapeLength;\n  for (j = 0; j < shapeLength - 1; j++) {\n    indices[index++] = j + offset;\n    indices[index++] = j + offset + 1;\n  }\n  indices[index++] = shapeLength - 1 + offset;\n  indices[index++] = offset;\n  i = shapeCount - 1;\n  offset = i * shapeLength;\n  for (j = 0; j < shapeLength - 1; j++) {\n    indices[index++] = j + offset;\n    indices[index++] = j + offset + 1;\n  }\n  indices[index++] = shapeLength - 1 + offset;\n  indices[index++] = offset;\n  for (i = 0; i < shapeCount - 1; i++) {\n    const firstOffset = shapeLength * i;\n    const secondOffset = firstOffset + shapeLength;\n    for (j = 0; j < shapeLength; j++) {\n      indices[index++] = j + firstOffset;\n      indices[index++] = j + secondOffset;\n    }\n  }\n  const geometry = new Geometry({\n    attributes: attributes,\n    indices: IndexDatatype.createTypedArray(vertexCount, indices),\n    boundingSphere: BoundingSphere.fromVertices(positions),\n    primitiveType: PrimitiveType.LINES\n  });\n  return geometry;\n}\n\n/**\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n *\n * @alias PolylineVolumeOutlineGeometry\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3[]} options.polylinePositions An array of positions that define the center of the polyline volume.\n * @param {Cartesian2[]} options.shapePositions An array of positions that define the shape to be extruded along the polyline\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid to be used as a reference.\n * @param {number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see PolylineVolumeOutlineGeometry#createGeometry\n *\n * @example\n * function computeCircle(radius) {\n *   const positions = [];\n *   for (let i = 0; i < 360; i++) {\n *     const radians = Cesium.Math.toRadians(i);\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n *   }\n *   return positions;\n * }\n *\n * const volumeOutline = new Cesium.PolylineVolumeOutlineGeometry({\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0\n *   ]),\n *   shapePositions : computeCircle(100000.0)\n * });\n */\nfunction PolylineVolumeOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const positions = options.polylinePositions;\n  const shape = options.shapePositions;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.polylinePositions is required.\");\n  }\n  if (!defined(shape)) {\n    throw new DeveloperError(\"options.shapePositions is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._positions = positions;\n  this._shape = shape;\n  this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.default));\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n  this._workerName = \"createPolylineVolumeOutlineGeometry\";\n  let numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {number}\n   */\n  this.packedLength = numComponents + Ellipsoid.packedLength + 2;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineVolumeOutlineGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nPolylineVolumeOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  let i;\n  const positions = value._positions;\n  let length = positions.length;\n  array[startingIndex++] = length;\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n  const shape = value._shape;\n  length = shape.length;\n  array[startingIndex++] = length;\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    Cartesian2.pack(shape[i], array, startingIndex);\n  }\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex] = value._granularity;\n  return array;\n};\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchOptions = {\n  polylinePositions: undefined,\n  shapePositions: undefined,\n  ellipsoid: scratchEllipsoid,\n  height: undefined,\n  cornerType: undefined,\n  granularity: undefined\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineVolumeOutlineGeometry} [result] The object into which to store the result.\n * @returns {PolylineVolumeOutlineGeometry} The modified result parameter or a new PolylineVolumeOutlineGeometry instance if one was not provided.\n */\nPolylineVolumeOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  let i;\n  let length = array[startingIndex++];\n  const positions = new Array(length);\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n  length = array[startingIndex++];\n  const shape = new Array(length);\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    shape[i] = Cartesian2.unpack(array, startingIndex);\n  }\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n  const cornerType = array[startingIndex++];\n  const granularity = array[startingIndex];\n  if (!defined(result)) {\n    scratchOptions.polylinePositions = positions;\n    scratchOptions.shapePositions = shape;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    return new PolylineVolumeOutlineGeometry(scratchOptions);\n  }\n  result._positions = positions;\n  result._shape = shape;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n  return result;\n};\nconst brScratch = new BoundingRectangle();\n\n/**\n * Computes the geometric representation of the outline of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineVolumeOutlineGeometry} polylineVolumeOutlineGeometry A description of the polyline volume outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolylineVolumeOutlineGeometry.createGeometry = function (polylineVolumeOutlineGeometry) {\n  const positions = polylineVolumeOutlineGeometry._positions;\n  const cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n  let shape2D = polylineVolumeOutlineGeometry._shape;\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\n    return undefined;\n  }\n  if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\n    shape2D.reverse();\n  }\n  const boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n  const computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeOutlineGeometry, false);\n  return computeAttributes(computedPositions, shape2D);\n};\nexport default PolylineVolumeOutlineGeometry;","map":{"version":3,"names":["arrayRemoveDuplicates","BoundingRectangle","BoundingSphere","Cartesian2","Cartesian3","ComponentDatatype","CornerType","defaultValue","defined","DeveloperError","Ellipsoid","Geometry","GeometryAttribute","GeometryAttributes","IndexDatatype","CesiumMath","PolygonPipeline","PolylineVolumeGeometryLibrary","PrimitiveType","WindingOrder","computeAttributes","positions","shape","attributes","position","componentDatatype","DOUBLE","componentsPerAttribute","values","shapeLength","length","vertexCount","positionLength","shapeCount","indices","createTypedArray","i","j","index","offset","firstOffset","secondOffset","geometry","boundingSphere","fromVertices","primitiveType","LINES","PolylineVolumeOutlineGeometry","options","EMPTY_OBJECT","polylinePositions","shapePositions","_positions","_shape","_ellipsoid","clone","ellipsoid","default","_cornerType","cornerType","ROUNDED","_granularity","granularity","RADIANS_PER_DEGREE","_workerName","numComponents","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchOptions","undefined","height","unpack","result","Array","brScratch","createGeometry","polylineVolumeOutlineGeometry","cleanPositions","equalsEpsilon","shape2D","removeDuplicatesFromShape","computeWindingOrder2D","CLOCKWISE","reverse","boundingRectangle","fromPoints","computedPositions","computePositions"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/PolylineVolumeOutlineGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nfunction computeAttributes(positions, shape) {\n  const attributes = new GeometryAttributes();\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: positions,\n  });\n\n  const shapeLength = shape.length;\n  const vertexCount = attributes.position.values.length / 3;\n  const positionLength = positions.length / 3;\n  const shapeCount = positionLength / shapeLength;\n  const indices = IndexDatatype.createTypedArray(\n    vertexCount,\n    2 * shapeLength * (shapeCount + 1),\n  );\n  let i, j;\n  let index = 0;\n  i = 0;\n  let offset = i * shapeLength;\n  for (j = 0; j < shapeLength - 1; j++) {\n    indices[index++] = j + offset;\n    indices[index++] = j + offset + 1;\n  }\n  indices[index++] = shapeLength - 1 + offset;\n  indices[index++] = offset;\n\n  i = shapeCount - 1;\n  offset = i * shapeLength;\n  for (j = 0; j < shapeLength - 1; j++) {\n    indices[index++] = j + offset;\n    indices[index++] = j + offset + 1;\n  }\n  indices[index++] = shapeLength - 1 + offset;\n  indices[index++] = offset;\n\n  for (i = 0; i < shapeCount - 1; i++) {\n    const firstOffset = shapeLength * i;\n    const secondOffset = firstOffset + shapeLength;\n    for (j = 0; j < shapeLength; j++) {\n      indices[index++] = j + firstOffset;\n      indices[index++] = j + secondOffset;\n    }\n  }\n\n  const geometry = new Geometry({\n    attributes: attributes,\n    indices: IndexDatatype.createTypedArray(vertexCount, indices),\n    boundingSphere: BoundingSphere.fromVertices(positions),\n    primitiveType: PrimitiveType.LINES,\n  });\n\n  return geometry;\n}\n\n/**\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n *\n * @alias PolylineVolumeOutlineGeometry\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3[]} options.polylinePositions An array of positions that define the center of the polyline volume.\n * @param {Cartesian2[]} options.shapePositions An array of positions that define the shape to be extruded along the polyline\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.default] The ellipsoid to be used as a reference.\n * @param {number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see PolylineVolumeOutlineGeometry#createGeometry\n *\n * @example\n * function computeCircle(radius) {\n *   const positions = [];\n *   for (let i = 0; i < 360; i++) {\n *     const radians = Cesium.Math.toRadians(i);\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n *   }\n *   return positions;\n * }\n *\n * const volumeOutline = new Cesium.PolylineVolumeOutlineGeometry({\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0\n *   ]),\n *   shapePositions : computeCircle(100000.0)\n * });\n */\nfunction PolylineVolumeOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const positions = options.polylinePositions;\n  const shape = options.shapePositions;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.polylinePositions is required.\");\n  }\n  if (!defined(shape)) {\n    throw new DeveloperError(\"options.shapePositions is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._positions = positions;\n  this._shape = shape;\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.default),\n  );\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE,\n  );\n  this._workerName = \"createPolylineVolumeOutlineGeometry\";\n\n  let numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {number}\n   */\n  this.packedLength = numComponents + Ellipsoid.packedLength + 2;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineVolumeOutlineGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nPolylineVolumeOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  let i;\n\n  const positions = value._positions;\n  let length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  const shape = value._shape;\n  length = shape.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    Cartesian2.pack(shape[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchOptions = {\n  polylinePositions: undefined,\n  shapePositions: undefined,\n  ellipsoid: scratchEllipsoid,\n  height: undefined,\n  cornerType: undefined,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineVolumeOutlineGeometry} [result] The object into which to store the result.\n * @returns {PolylineVolumeOutlineGeometry} The modified result parameter or a new PolylineVolumeOutlineGeometry instance if one was not provided.\n */\nPolylineVolumeOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  let i;\n\n  let length = array[startingIndex++];\n  const positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  const shape = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    shape[i] = Cartesian2.unpack(array, startingIndex);\n  }\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const cornerType = array[startingIndex++];\n  const granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.polylinePositions = positions;\n    scratchOptions.shapePositions = shape;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    return new PolylineVolumeOutlineGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._shape = shape;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n\n  return result;\n};\n\nconst brScratch = new BoundingRectangle();\n\n/**\n * Computes the geometric representation of the outline of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineVolumeOutlineGeometry} polylineVolumeOutlineGeometry A description of the polyline volume outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolylineVolumeOutlineGeometry.createGeometry = function (\n  polylineVolumeOutlineGeometry,\n) {\n  const positions = polylineVolumeOutlineGeometry._positions;\n  const cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon,\n  );\n  let shape2D = polylineVolumeOutlineGeometry._shape;\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\n    return undefined;\n  }\n\n  if (\n    PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE\n  ) {\n    shape2D.reverse();\n  }\n  const boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n  const computedPositions = PolylineVolumeGeometryLibrary.computePositions(\n    cleanPositions,\n    shape2D,\n    boundingRectangle,\n    polylineVolumeOutlineGeometry,\n    false,\n  );\n  return computeAttributes(computedPositions, shape2D);\n};\nexport default PolylineVolumeOutlineGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}