{"ast":null,"code":"import BoundingSphere from \"../../Core/BoundingSphere.js\";\nimport Check from \"../../Core/Check.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport Matrix4 from \"../../Core/Matrix4.js\";\nimport DrawCommand from \"../../Renderer/DrawCommand.js\";\nimport Pass from \"../../Renderer/Pass.js\";\nimport RenderState from \"../../Renderer/RenderState.js\";\nimport BlendingState from \"../BlendingState.js\";\nimport ClassificationType from \"../ClassificationType.js\";\nimport DepthFunction from \"../DepthFunction.js\";\nimport StencilConstants from \"../StencilConstants.js\";\nimport StencilFunction from \"../StencilFunction.js\";\nimport StencilOperation from \"../StencilOperation.js\";\n\n/**\n * A wrapper around the draw commands used to render a classification model,\n * i.e. a {@link Model} that classifies another asset. This manages the\n * derived commands and returns only the necessary commands depending on the\n * given frame state.\n *\n * @param {object} options An object containing the following options:\n * @param {DrawCommand} options.command The draw command from which to derive other commands from.\n * @param {PrimitiveRenderResources} options.primitiveRenderResources The render resources of the primitive associated with the command.\n *\n * @alias ClassificationModelDrawCommand\n * @constructor\n *\n * @private\n */\nfunction ClassificationModelDrawCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const command = options.command;\n  const renderResources = options.primitiveRenderResources;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.command\", command);\n  Check.typeOf.object(\"options.primitiveRenderResources\", renderResources);\n  //>>includeEnd('debug');\n\n  const model = renderResources.model;\n  this._command = command;\n  this._model = model;\n  this._runtimePrimitive = renderResources.runtimePrimitive;\n\n  // Classification models aren't supported in 2D mode, so there's no need to\n  // duplicate the model matrix for each derived command.\n  this._modelMatrix = command.modelMatrix;\n  this._boundingVolume = command.boundingVolume;\n  this._cullFace = command.renderState.cull.face;\n  const type = model.classificationType;\n  this._classificationType = type;\n\n  // ClassificationType has three values: terrain only, 3D Tiles only, or both.\n  this._classifiesTerrain = type !== ClassificationType.CESIUM_3D_TILE;\n  this._classifies3DTiles = type !== ClassificationType.TERRAIN;\n  this._useDebugWireframe = model._enableDebugWireframe && model.debugWireframe;\n  this._pickId = renderResources.pickId;\n  this._commandListTerrain = [];\n  this._commandList3DTiles = [];\n  this._commandListIgnoreShow = []; // Used for inverted classification.\n  this._commandListDebugWireframe = [];\n  this._commandListTerrainPicking = [];\n  this._commandList3DTilesPicking = [];\n  initialize(this);\n}\nfunction getStencilDepthRenderState(stencilFunction) {\n  return {\n    colorMask: {\n      red: false,\n      green: false,\n      blue: false,\n      alpha: false\n    },\n    stencilTest: {\n      enabled: true,\n      frontFunction: stencilFunction,\n      frontOperation: {\n        fail: StencilOperation.KEEP,\n        zFail: StencilOperation.DECREMENT_WRAP,\n        zPass: StencilOperation.KEEP\n      },\n      backFunction: stencilFunction,\n      backOperation: {\n        fail: StencilOperation.KEEP,\n        zFail: StencilOperation.INCREMENT_WRAP,\n        zPass: StencilOperation.KEEP\n      },\n      reference: StencilConstants.CESIUM_3D_TILE_MASK,\n      mask: StencilConstants.CESIUM_3D_TILE_MASK\n    },\n    stencilMask: StencilConstants.CLASSIFICATION_MASK,\n    depthTest: {\n      enabled: true,\n      func: DepthFunction.LESS_OR_EQUAL\n    },\n    depthMask: false\n  };\n}\nconst colorRenderState = {\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.NOT_EQUAL,\n    frontOperation: {\n      fail: StencilOperation.ZERO,\n      zFail: StencilOperation.ZERO,\n      zPass: StencilOperation.ZERO\n    },\n    backFunction: StencilFunction.NOT_EQUAL,\n    backOperation: {\n      fail: StencilOperation.ZERO,\n      zFail: StencilOperation.ZERO,\n      zPass: StencilOperation.ZERO\n    },\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK\n  },\n  stencilMask: StencilConstants.CLASSIFICATION_MASK,\n  depthTest: {\n    enabled: false\n  },\n  depthMask: false,\n  blending: BlendingState.PRE_MULTIPLIED_ALPHA_BLEND\n};\nconst pickRenderState = {\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.NOT_EQUAL,\n    frontOperation: {\n      fail: StencilOperation.ZERO,\n      zFail: StencilOperation.ZERO,\n      zPass: StencilOperation.ZERO\n    },\n    backFunction: StencilFunction.NOT_EQUAL,\n    backOperation: {\n      fail: StencilOperation.ZERO,\n      zFail: StencilOperation.ZERO,\n      zPass: StencilOperation.ZERO\n    },\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK\n  },\n  stencilMask: StencilConstants.CLASSIFICATION_MASK,\n  depthTest: {\n    enabled: false\n  },\n  depthMask: false\n};\nconst scratchDerivedCommands = [];\nfunction initialize(drawCommand) {\n  const command = drawCommand._command;\n  const derivedCommands = scratchDerivedCommands;\n\n  // If debug wireframe is enabled, don't derive any new commands.\n  // Render normally in the opaque pass.\n  if (drawCommand._useDebugWireframe) {\n    command.pass = Pass.OPAQUE;\n    derivedCommands.length = 0;\n    derivedCommands.push(command);\n    drawCommand._commandListDebugWireframe = createBatchCommands(drawCommand, derivedCommands, drawCommand._commandListDebugWireframe);\n    const commandList = drawCommand._commandListDebugWireframe;\n    const length = commandList.length;\n    for (let i = 0; i < length; i++) {\n      // The lengths / offsets of the batches have to be adjusted for wireframe.\n      // Only PrimitiveType.TRIANGLES is allowed for classification, so this\n      // just requires doubling the values for the batches.\n      const command = commandList[i];\n      command.count *= 2;\n      command.offset *= 2;\n    }\n    return;\n  }\n  const model = drawCommand.model;\n  const allowPicking = model.allowPicking;\n  if (drawCommand._classifiesTerrain) {\n    const pass = Pass.TERRAIN_CLASSIFICATION;\n    const stencilDepthCommand = deriveStencilDepthCommand(command, pass);\n    const colorCommand = deriveColorCommand(command, pass);\n    derivedCommands.length = 0;\n    derivedCommands.push(stencilDepthCommand, colorCommand);\n    drawCommand._commandListTerrain = createBatchCommands(drawCommand, derivedCommands, drawCommand._commandListTerrain);\n    if (allowPicking) {\n      drawCommand._commandListTerrainPicking = createPickCommands(drawCommand, derivedCommands, drawCommand._commandListTerrainPicking);\n    }\n  }\n  if (drawCommand._classifies3DTiles) {\n    const pass = Pass.CESIUM_3D_TILE_CLASSIFICATION;\n    const stencilDepthCommand = deriveStencilDepthCommand(command, pass);\n    const colorCommand = deriveColorCommand(command, pass);\n    derivedCommands.length = 0;\n    derivedCommands.push(stencilDepthCommand, colorCommand);\n    drawCommand._commandList3DTiles = createBatchCommands(drawCommand, derivedCommands, drawCommand._commandList3DTiles);\n    if (allowPicking) {\n      drawCommand._commandList3DTilesPicking = createPickCommands(drawCommand, derivedCommands, drawCommand._commandList3DTilesPicking);\n    }\n  }\n}\nfunction createBatchCommands(drawCommand, derivedCommands, result) {\n  const runtimePrimitive = drawCommand._runtimePrimitive;\n  const batchLengths = runtimePrimitive.batchLengths;\n  const batchOffsets = runtimePrimitive.batchOffsets;\n  const numBatches = batchLengths.length;\n  const numDerivedCommands = derivedCommands.length;\n  for (let i = 0; i < numBatches; i++) {\n    const batchLength = batchLengths[i];\n    const batchOffset = batchOffsets[i];\n    // For multiple derived commands (e.g. stencil and color commands),\n    // they must be added in a certain order even within the batches.\n    for (let j = 0; j < numDerivedCommands; j++) {\n      const derivedCommand = derivedCommands[j];\n      const batchCommand = DrawCommand.shallowClone(derivedCommand);\n      batchCommand.count = batchLength;\n      batchCommand.offset = batchOffset;\n      result.push(batchCommand);\n    }\n  }\n  return result;\n}\nfunction deriveStencilDepthCommand(command, pass) {\n  const stencilDepthCommand = DrawCommand.shallowClone(command);\n  stencilDepthCommand.cull = false;\n  stencilDepthCommand.pass = pass;\n  const stencilFunction = pass === Pass.TERRAIN_CLASSIFICATION ? StencilFunction.ALWAYS : StencilFunction.EQUAL;\n  const renderState = getStencilDepthRenderState(stencilFunction);\n  stencilDepthCommand.renderState = RenderState.fromCache(renderState);\n  return stencilDepthCommand;\n}\nfunction deriveColorCommand(command, pass) {\n  const colorCommand = DrawCommand.shallowClone(command);\n  colorCommand.cull = false;\n  colorCommand.pass = pass;\n  colorCommand.renderState = RenderState.fromCache(colorRenderState);\n  return colorCommand;\n}\nconst scratchPickCommands = [];\nfunction createPickCommands(drawCommand, derivedCommands, commandList) {\n  const renderState = RenderState.fromCache(pickRenderState);\n  const stencilDepthCommand = derivedCommands[0];\n  const colorCommand = derivedCommands[1];\n  const pickStencilDepthCommand = DrawCommand.shallowClone(stencilDepthCommand);\n  pickStencilDepthCommand.cull = true;\n  pickStencilDepthCommand.pickOnly = true;\n  const pickColorCommand = DrawCommand.shallowClone(colorCommand);\n  pickColorCommand.cull = true;\n  pickColorCommand.pickOnly = true;\n  pickColorCommand.renderState = renderState;\n  pickColorCommand.pickId = drawCommand._pickId;\n  const pickCommands = scratchPickCommands;\n  pickCommands.length = 0;\n  pickCommands.push(pickStencilDepthCommand, pickColorCommand);\n  return createBatchCommands(drawCommand, pickCommands, commandList);\n}\nObject.defineProperties(ClassificationModelDrawCommand.prototype, {\n  /**\n   * The main draw command that the other commands are derived from.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {DrawCommand}\n   *\n   * @readonly\n   * @private\n   */\n  command: {\n    get: function () {\n      return this._command;\n    }\n  },\n  /**\n   * The runtime primitive that the draw command belongs to.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {ModelRuntimePrimitive}\n   *\n   * @readonly\n   * @private\n   */\n  runtimePrimitive: {\n    get: function () {\n      return this._runtimePrimitive;\n    }\n  },\n  /**\n   * The batch lengths used to generate multiple draw commands.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {number[]}\n   *\n   * @readonly\n   * @private\n   */\n  batchLengths: {\n    get: function () {\n      return this._runtimePrimitive.batchLengths;\n    }\n  },\n  /**\n   * The batch offsets used to generate multiple draw commands.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {number[]}\n   *\n   * @readonly\n   * @private\n   */\n  batchOffsets: {\n    get: function () {\n      return this._runtimePrimitive.batchOffsets;\n    }\n  },\n  /**\n   * The model that the draw command belongs to.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {Model}\n   *\n   * @readonly\n   * @private\n   */\n  model: {\n    get: function () {\n      return this._model;\n    }\n  },\n  /**\n   * The classification type of the model that this draw command belongs to.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {ClassificationType}\n   *\n   * @readonly\n   * @private\n   */\n  classificationType: {\n    get: function () {\n      return this._classificationType;\n    }\n  },\n  /**\n   * The current model matrix applied to the draw commands.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {Matrix4}\n   *\n   * @readonly\n   * @private\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      this._modelMatrix = Matrix4.clone(value, this._modelMatrix);\n      const boundingSphere = this._runtimePrimitive.boundingSphere;\n      this._boundingVolume = BoundingSphere.transform(boundingSphere, this._modelMatrix, this._boundingVolume);\n    }\n  },\n  /**\n   * The bounding volume of the main draw command. This is equivalent\n   * to the primitive's bounding sphere transformed by the draw\n   * command's model matrix.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {BoundingSphere}\n   *\n   * @readonly\n   * @private\n   */\n  boundingVolume: {\n    get: function () {\n      return this._boundingVolume;\n    }\n  },\n  /**\n   * Culling is disabled for classification models, so this has no effect on\n   * how the model renders. This only exists to match the interface of\n   * {@link ModelDrawCommand}.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {CullFace}\n   *\n   * @private\n   */\n  cullFace: {\n    get: function () {\n      return this._cullFace;\n    },\n    set: function (value) {\n      this._cullFace = value;\n    }\n  }\n});\n\n/**\n * Pushes the draw commands necessary to render the primitive.\n *\n * @param {FrameState} frameState The frame state.\n * @param {DrawCommand[]} result The array to push the draw commands to.\n *\n * @returns {DrawCommand[]} The modified result parameter.\n *\n * @private\n */\nClassificationModelDrawCommand.prototype.pushCommands = function (frameState, result) {\n  const passes = frameState.passes;\n  if (passes.render) {\n    if (this._useDebugWireframe) {\n      result.push.apply(result, this._commandListDebugWireframe);\n      return;\n    }\n    if (this._classifiesTerrain) {\n      result.push.apply(result, this._commandListTerrain);\n    }\n    if (this._classifies3DTiles) {\n      result.push.apply(result, this._commandList3DTiles);\n    }\n    const useIgnoreShowCommands = frameState.invertClassification && this._classifies3DTiles;\n    if (useIgnoreShowCommands) {\n      if (this._commandListIgnoreShow.length === 0) {\n        const pass = Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW;\n        const command = deriveStencilDepthCommand(this._command, pass);\n        const derivedCommands = scratchDerivedCommands;\n        derivedCommands.length = 0;\n        derivedCommands.push(command);\n        this._commandListIgnoreShow = createBatchCommands(this, derivedCommands, this._commandListIgnoreShow);\n      }\n      result.push.apply(result, this._commandListIgnoreShow);\n    }\n  }\n  if (passes.pick) {\n    if (this._classifiesTerrain) {\n      result.push.apply(result, this._commandListTerrainPicking);\n    }\n    if (this._classifies3DTiles) {\n      result.push.apply(result, this._commandList3DTilesPicking);\n    }\n  }\n  return result;\n};\nexport default ClassificationModelDrawCommand;","map":{"version":3,"names":["BoundingSphere","Check","defaultValue","Matrix4","DrawCommand","Pass","RenderState","BlendingState","ClassificationType","DepthFunction","StencilConstants","StencilFunction","StencilOperation","ClassificationModelDrawCommand","options","EMPTY_OBJECT","command","renderResources","primitiveRenderResources","typeOf","object","model","_command","_model","_runtimePrimitive","runtimePrimitive","_modelMatrix","modelMatrix","_boundingVolume","boundingVolume","_cullFace","renderState","cull","face","type","classificationType","_classificationType","_classifiesTerrain","CESIUM_3D_TILE","_classifies3DTiles","TERRAIN","_useDebugWireframe","_enableDebugWireframe","debugWireframe","_pickId","pickId","_commandListTerrain","_commandList3DTiles","_commandListIgnoreShow","_commandListDebugWireframe","_commandListTerrainPicking","_commandList3DTilesPicking","initialize","getStencilDepthRenderState","stencilFunction","colorMask","red","green","blue","alpha","stencilTest","enabled","frontFunction","frontOperation","fail","KEEP","zFail","DECREMENT_WRAP","zPass","backFunction","backOperation","INCREMENT_WRAP","reference","CESIUM_3D_TILE_MASK","mask","stencilMask","CLASSIFICATION_MASK","depthTest","func","LESS_OR_EQUAL","depthMask","colorRenderState","NOT_EQUAL","ZERO","blending","PRE_MULTIPLIED_ALPHA_BLEND","pickRenderState","scratchDerivedCommands","drawCommand","derivedCommands","pass","OPAQUE","length","push","createBatchCommands","commandList","i","count","offset","allowPicking","TERRAIN_CLASSIFICATION","stencilDepthCommand","deriveStencilDepthCommand","colorCommand","deriveColorCommand","createPickCommands","CESIUM_3D_TILE_CLASSIFICATION","result","batchLengths","batchOffsets","numBatches","numDerivedCommands","batchLength","batchOffset","j","derivedCommand","batchCommand","shallowClone","ALWAYS","EQUAL","fromCache","scratchPickCommands","pickStencilDepthCommand","pickOnly","pickColorCommand","pickCommands","Object","defineProperties","prototype","get","set","value","clone","boundingSphere","transform","cullFace","pushCommands","frameState","passes","render","apply","useIgnoreShowCommands","invertClassification","CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW","pick"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/Model/ClassificationModelDrawCommand.js"],"sourcesContent":["import BoundingSphere from \"../../Core/BoundingSphere.js\";\nimport Check from \"../../Core/Check.js\";\nimport defaultValue from \"../../Core/defaultValue.js\";\nimport Matrix4 from \"../../Core/Matrix4.js\";\nimport DrawCommand from \"../../Renderer/DrawCommand.js\";\nimport Pass from \"../../Renderer/Pass.js\";\nimport RenderState from \"../../Renderer/RenderState.js\";\nimport BlendingState from \"../BlendingState.js\";\nimport ClassificationType from \"../ClassificationType.js\";\nimport DepthFunction from \"../DepthFunction.js\";\nimport StencilConstants from \"../StencilConstants.js\";\nimport StencilFunction from \"../StencilFunction.js\";\nimport StencilOperation from \"../StencilOperation.js\";\n\n/**\n * A wrapper around the draw commands used to render a classification model,\n * i.e. a {@link Model} that classifies another asset. This manages the\n * derived commands and returns only the necessary commands depending on the\n * given frame state.\n *\n * @param {object} options An object containing the following options:\n * @param {DrawCommand} options.command The draw command from which to derive other commands from.\n * @param {PrimitiveRenderResources} options.primitiveRenderResources The render resources of the primitive associated with the command.\n *\n * @alias ClassificationModelDrawCommand\n * @constructor\n *\n * @private\n */\nfunction ClassificationModelDrawCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const command = options.command;\n  const renderResources = options.primitiveRenderResources;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.command\", command);\n  Check.typeOf.object(\"options.primitiveRenderResources\", renderResources);\n  //>>includeEnd('debug');\n\n  const model = renderResources.model;\n\n  this._command = command;\n  this._model = model;\n  this._runtimePrimitive = renderResources.runtimePrimitive;\n\n  // Classification models aren't supported in 2D mode, so there's no need to\n  // duplicate the model matrix for each derived command.\n  this._modelMatrix = command.modelMatrix;\n  this._boundingVolume = command.boundingVolume;\n  this._cullFace = command.renderState.cull.face;\n\n  const type = model.classificationType;\n  this._classificationType = type;\n\n  // ClassificationType has three values: terrain only, 3D Tiles only, or both.\n  this._classifiesTerrain = type !== ClassificationType.CESIUM_3D_TILE;\n  this._classifies3DTiles = type !== ClassificationType.TERRAIN;\n\n  this._useDebugWireframe = model._enableDebugWireframe && model.debugWireframe;\n  this._pickId = renderResources.pickId;\n\n  this._commandListTerrain = [];\n  this._commandList3DTiles = [];\n  this._commandListIgnoreShow = []; // Used for inverted classification.\n  this._commandListDebugWireframe = [];\n\n  this._commandListTerrainPicking = [];\n  this._commandList3DTilesPicking = [];\n\n  initialize(this);\n}\n\nfunction getStencilDepthRenderState(stencilFunction) {\n  return {\n    colorMask: {\n      red: false,\n      green: false,\n      blue: false,\n      alpha: false,\n    },\n    stencilTest: {\n      enabled: true,\n      frontFunction: stencilFunction,\n      frontOperation: {\n        fail: StencilOperation.KEEP,\n        zFail: StencilOperation.DECREMENT_WRAP,\n        zPass: StencilOperation.KEEP,\n      },\n      backFunction: stencilFunction,\n      backOperation: {\n        fail: StencilOperation.KEEP,\n        zFail: StencilOperation.INCREMENT_WRAP,\n        zPass: StencilOperation.KEEP,\n      },\n      reference: StencilConstants.CESIUM_3D_TILE_MASK,\n      mask: StencilConstants.CESIUM_3D_TILE_MASK,\n    },\n    stencilMask: StencilConstants.CLASSIFICATION_MASK,\n    depthTest: {\n      enabled: true,\n      func: DepthFunction.LESS_OR_EQUAL,\n    },\n    depthMask: false,\n  };\n}\n\nconst colorRenderState = {\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.NOT_EQUAL,\n    frontOperation: {\n      fail: StencilOperation.ZERO,\n      zFail: StencilOperation.ZERO,\n      zPass: StencilOperation.ZERO,\n    },\n    backFunction: StencilFunction.NOT_EQUAL,\n    backOperation: {\n      fail: StencilOperation.ZERO,\n      zFail: StencilOperation.ZERO,\n      zPass: StencilOperation.ZERO,\n    },\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK,\n  },\n  stencilMask: StencilConstants.CLASSIFICATION_MASK,\n  depthTest: {\n    enabled: false,\n  },\n  depthMask: false,\n  blending: BlendingState.PRE_MULTIPLIED_ALPHA_BLEND,\n};\n\nconst pickRenderState = {\n  stencilTest: {\n    enabled: true,\n    frontFunction: StencilFunction.NOT_EQUAL,\n    frontOperation: {\n      fail: StencilOperation.ZERO,\n      zFail: StencilOperation.ZERO,\n      zPass: StencilOperation.ZERO,\n    },\n    backFunction: StencilFunction.NOT_EQUAL,\n    backOperation: {\n      fail: StencilOperation.ZERO,\n      zFail: StencilOperation.ZERO,\n      zPass: StencilOperation.ZERO,\n    },\n    reference: 0,\n    mask: StencilConstants.CLASSIFICATION_MASK,\n  },\n  stencilMask: StencilConstants.CLASSIFICATION_MASK,\n  depthTest: {\n    enabled: false,\n  },\n  depthMask: false,\n};\n\nconst scratchDerivedCommands = [];\n\nfunction initialize(drawCommand) {\n  const command = drawCommand._command;\n  const derivedCommands = scratchDerivedCommands;\n\n  // If debug wireframe is enabled, don't derive any new commands.\n  // Render normally in the opaque pass.\n  if (drawCommand._useDebugWireframe) {\n    command.pass = Pass.OPAQUE;\n\n    derivedCommands.length = 0;\n    derivedCommands.push(command);\n\n    drawCommand._commandListDebugWireframe = createBatchCommands(\n      drawCommand,\n      derivedCommands,\n      drawCommand._commandListDebugWireframe,\n    );\n\n    const commandList = drawCommand._commandListDebugWireframe;\n    const length = commandList.length;\n    for (let i = 0; i < length; i++) {\n      // The lengths / offsets of the batches have to be adjusted for wireframe.\n      // Only PrimitiveType.TRIANGLES is allowed for classification, so this\n      // just requires doubling the values for the batches.\n      const command = commandList[i];\n      command.count *= 2;\n      command.offset *= 2;\n    }\n\n    return;\n  }\n\n  const model = drawCommand.model;\n  const allowPicking = model.allowPicking;\n\n  if (drawCommand._classifiesTerrain) {\n    const pass = Pass.TERRAIN_CLASSIFICATION;\n    const stencilDepthCommand = deriveStencilDepthCommand(command, pass);\n    const colorCommand = deriveColorCommand(command, pass);\n\n    derivedCommands.length = 0;\n    derivedCommands.push(stencilDepthCommand, colorCommand);\n\n    drawCommand._commandListTerrain = createBatchCommands(\n      drawCommand,\n      derivedCommands,\n      drawCommand._commandListTerrain,\n    );\n\n    if (allowPicking) {\n      drawCommand._commandListTerrainPicking = createPickCommands(\n        drawCommand,\n        derivedCommands,\n        drawCommand._commandListTerrainPicking,\n      );\n    }\n  }\n\n  if (drawCommand._classifies3DTiles) {\n    const pass = Pass.CESIUM_3D_TILE_CLASSIFICATION;\n    const stencilDepthCommand = deriveStencilDepthCommand(command, pass);\n    const colorCommand = deriveColorCommand(command, pass);\n\n    derivedCommands.length = 0;\n    derivedCommands.push(stencilDepthCommand, colorCommand);\n\n    drawCommand._commandList3DTiles = createBatchCommands(\n      drawCommand,\n      derivedCommands,\n      drawCommand._commandList3DTiles,\n    );\n\n    if (allowPicking) {\n      drawCommand._commandList3DTilesPicking = createPickCommands(\n        drawCommand,\n        derivedCommands,\n        drawCommand._commandList3DTilesPicking,\n      );\n    }\n  }\n}\n\nfunction createBatchCommands(drawCommand, derivedCommands, result) {\n  const runtimePrimitive = drawCommand._runtimePrimitive;\n  const batchLengths = runtimePrimitive.batchLengths;\n  const batchOffsets = runtimePrimitive.batchOffsets;\n\n  const numBatches = batchLengths.length;\n  const numDerivedCommands = derivedCommands.length;\n  for (let i = 0; i < numBatches; i++) {\n    const batchLength = batchLengths[i];\n    const batchOffset = batchOffsets[i];\n    // For multiple derived commands (e.g. stencil and color commands),\n    // they must be added in a certain order even within the batches.\n    for (let j = 0; j < numDerivedCommands; j++) {\n      const derivedCommand = derivedCommands[j];\n      const batchCommand = DrawCommand.shallowClone(derivedCommand);\n      batchCommand.count = batchLength;\n      batchCommand.offset = batchOffset;\n      result.push(batchCommand);\n    }\n  }\n\n  return result;\n}\n\nfunction deriveStencilDepthCommand(command, pass) {\n  const stencilDepthCommand = DrawCommand.shallowClone(command);\n  stencilDepthCommand.cull = false;\n  stencilDepthCommand.pass = pass;\n\n  const stencilFunction =\n    pass === Pass.TERRAIN_CLASSIFICATION\n      ? StencilFunction.ALWAYS\n      : StencilFunction.EQUAL;\n  const renderState = getStencilDepthRenderState(stencilFunction);\n  stencilDepthCommand.renderState = RenderState.fromCache(renderState);\n\n  return stencilDepthCommand;\n}\n\nfunction deriveColorCommand(command, pass) {\n  const colorCommand = DrawCommand.shallowClone(command);\n  colorCommand.cull = false;\n  colorCommand.pass = pass;\n\n  colorCommand.renderState = RenderState.fromCache(colorRenderState);\n\n  return colorCommand;\n}\n\nconst scratchPickCommands = [];\n\nfunction createPickCommands(drawCommand, derivedCommands, commandList) {\n  const renderState = RenderState.fromCache(pickRenderState);\n  const stencilDepthCommand = derivedCommands[0];\n  const colorCommand = derivedCommands[1];\n\n  const pickStencilDepthCommand = DrawCommand.shallowClone(stencilDepthCommand);\n  pickStencilDepthCommand.cull = true;\n  pickStencilDepthCommand.pickOnly = true;\n\n  const pickColorCommand = DrawCommand.shallowClone(colorCommand);\n  pickColorCommand.cull = true;\n  pickColorCommand.pickOnly = true;\n  pickColorCommand.renderState = renderState;\n  pickColorCommand.pickId = drawCommand._pickId;\n\n  const pickCommands = scratchPickCommands;\n  pickCommands.length = 0;\n  pickCommands.push(pickStencilDepthCommand, pickColorCommand);\n\n  return createBatchCommands(drawCommand, pickCommands, commandList);\n}\n\nObject.defineProperties(ClassificationModelDrawCommand.prototype, {\n  /**\n   * The main draw command that the other commands are derived from.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {DrawCommand}\n   *\n   * @readonly\n   * @private\n   */\n  command: {\n    get: function () {\n      return this._command;\n    },\n  },\n\n  /**\n   * The runtime primitive that the draw command belongs to.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {ModelRuntimePrimitive}\n   *\n   * @readonly\n   * @private\n   */\n  runtimePrimitive: {\n    get: function () {\n      return this._runtimePrimitive;\n    },\n  },\n\n  /**\n   * The batch lengths used to generate multiple draw commands.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {number[]}\n   *\n   * @readonly\n   * @private\n   */\n  batchLengths: {\n    get: function () {\n      return this._runtimePrimitive.batchLengths;\n    },\n  },\n\n  /**\n   * The batch offsets used to generate multiple draw commands.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {number[]}\n   *\n   * @readonly\n   * @private\n   */\n  batchOffsets: {\n    get: function () {\n      return this._runtimePrimitive.batchOffsets;\n    },\n  },\n\n  /**\n   * The model that the draw command belongs to.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {Model}\n   *\n   * @readonly\n   * @private\n   */\n  model: {\n    get: function () {\n      return this._model;\n    },\n  },\n\n  /**\n   * The classification type of the model that this draw command belongs to.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {ClassificationType}\n   *\n   * @readonly\n   * @private\n   */\n  classificationType: {\n    get: function () {\n      return this._classificationType;\n    },\n  },\n\n  /**\n   * The current model matrix applied to the draw commands.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {Matrix4}\n   *\n   * @readonly\n   * @private\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      this._modelMatrix = Matrix4.clone(value, this._modelMatrix);\n      const boundingSphere = this._runtimePrimitive.boundingSphere;\n      this._boundingVolume = BoundingSphere.transform(\n        boundingSphere,\n        this._modelMatrix,\n        this._boundingVolume,\n      );\n    },\n  },\n\n  /**\n   * The bounding volume of the main draw command. This is equivalent\n   * to the primitive's bounding sphere transformed by the draw\n   * command's model matrix.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {BoundingSphere}\n   *\n   * @readonly\n   * @private\n   */\n  boundingVolume: {\n    get: function () {\n      return this._boundingVolume;\n    },\n  },\n\n  /**\n   * Culling is disabled for classification models, so this has no effect on\n   * how the model renders. This only exists to match the interface of\n   * {@link ModelDrawCommand}.\n   *\n   * @memberof ClassificationModelDrawCommand.prototype\n   * @type {CullFace}\n   *\n   * @private\n   */\n  cullFace: {\n    get: function () {\n      return this._cullFace;\n    },\n    set: function (value) {\n      this._cullFace = value;\n    },\n  },\n});\n\n/**\n * Pushes the draw commands necessary to render the primitive.\n *\n * @param {FrameState} frameState The frame state.\n * @param {DrawCommand[]} result The array to push the draw commands to.\n *\n * @returns {DrawCommand[]} The modified result parameter.\n *\n * @private\n */\nClassificationModelDrawCommand.prototype.pushCommands = function (\n  frameState,\n  result,\n) {\n  const passes = frameState.passes;\n  if (passes.render) {\n    if (this._useDebugWireframe) {\n      result.push.apply(result, this._commandListDebugWireframe);\n      return;\n    }\n\n    if (this._classifiesTerrain) {\n      result.push.apply(result, this._commandListTerrain);\n    }\n\n    if (this._classifies3DTiles) {\n      result.push.apply(result, this._commandList3DTiles);\n    }\n\n    const useIgnoreShowCommands =\n      frameState.invertClassification && this._classifies3DTiles;\n\n    if (useIgnoreShowCommands) {\n      if (this._commandListIgnoreShow.length === 0) {\n        const pass = Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW;\n        const command = deriveStencilDepthCommand(this._command, pass);\n\n        const derivedCommands = scratchDerivedCommands;\n        derivedCommands.length = 0;\n        derivedCommands.push(command);\n\n        this._commandListIgnoreShow = createBatchCommands(\n          this,\n          derivedCommands,\n          this._commandListIgnoreShow,\n        );\n      }\n\n      result.push.apply(result, this._commandListIgnoreShow);\n    }\n  }\n\n  if (passes.pick) {\n    if (this._classifiesTerrain) {\n      result.push.apply(result, this._commandListTerrainPicking);\n    }\n\n    if (this._classifies3DTiles) {\n      result.push.apply(result, this._commandList3DTilesPicking);\n    }\n  }\n\n  return result;\n};\n\nexport default ClassificationModelDrawCommand;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}