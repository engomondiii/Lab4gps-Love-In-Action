{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport PolylineMaterialAppearanceVS from \"../Shaders/Appearances/PolylineMaterialAppearanceVS.js\";\nimport PolylineCommon from \"../Shaders/PolylineCommon.js\";\nimport PolylineFS from \"../Shaders/PolylineFS.js\";\nimport Appearance from \"./Appearance.js\";\nimport Material from \"./Material.js\";\nlet defaultVertexShaderSource = `${PolylineCommon}\\n${PolylineMaterialAppearanceVS}`;\nconst defaultFragmentShaderSource = PolylineFS;\nif (!FeatureDetection.isInternetExplorer()) {\n  defaultVertexShaderSource = `#define CLIP_POLYLINE \\n${defaultVertexShaderSource}`;\n}\n\n/**\n * An appearance for {@link PolylineGeometry} that supports shading with materials.\n *\n * @alias PolylineMaterialAppearance\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link PolylineMaterialAppearance#renderState} has alpha blending enabled.\n * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n * @param {string} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {string} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {object} [options.renderState] Optional render state to override the default render state.\n *\n * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n *\n * @example\n * const primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.PolylineGeometry({\n *       positions : Cesium.Cartesian3.fromDegreesArray([\n *         0.0, 0.0,\n *         5.0, 0.0\n *       ]),\n *       width : 10.0,\n *       vertexFormat : Cesium.PolylineMaterialAppearance.VERTEX_FORMAT\n *     })\n *   }),\n *   appearance : new Cesium.PolylineMaterialAppearance({\n *     material : Cesium.Material.fromType('Color')\n *   })\n * });\n */\nfunction PolylineMaterialAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const translucent = defaultValue(options.translucent, true);\n  const closed = false;\n  const vertexFormat = PolylineMaterialAppearance.VERTEX_FORMAT;\n\n  /**\n   * The material used to determine the fragment color.  Unlike other {@link PolylineMaterialAppearance}\n   * properties, this is not read-only, so an appearance's material can change on the fly.\n   *\n   * @type Material\n   *\n   * @default {@link Material.ColorType}\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = defined(options.material) ? options.material : Material.fromType(Material.ColorType);\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent so\n   * {@link PolylineMaterialAppearance#renderState} has alpha blending enabled.\n   *\n   * @type {boolean}\n   *\n   * @default true\n   */\n  this.translucent = translucent;\n  this._vertexShaderSource = defaultValue(options.vertexShaderSource, defaultVertexShaderSource);\n  this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, defaultFragmentShaderSource);\n  this._renderState = Appearance.getDefaultRenderState(translucent, closed, options.renderState);\n  this._closed = closed;\n\n  // Non-derived members\n\n  this._vertexFormat = vertexFormat;\n}\nObject.defineProperties(PolylineMaterialAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      let vs = this._vertexShaderSource;\n      if (this.material.shaderSource.search(/in\\s+float\\s+v_polylineAngle;/g) !== -1) {\n        vs = `#define POLYLINE_DASH\\n${vs}`;\n      }\n      return vs;\n    }\n  },\n  /**\n   * The GLSL source code for the fragment shader.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    }\n  },\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link PolylineMaterialAppearance}\n   * instance, or it is set implicitly via {@link PolylineMaterialAppearance#translucent}\n   * and {@link PolylineMaterialAppearance#closed}.\n   * </p>\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    }\n  },\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link PolylineMaterialAppearance#renderState} has backface culling enabled.\n   * This is always <code>false</code> for <code>PolylineMaterialAppearance</code>.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    }\n  },\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link PolylineMaterialAppearance.VERTEX_FORMAT}\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    }\n  }\n});\n\n/**\n * The {@link VertexFormat} that all {@link PolylineMaterialAppearance} instances\n * are compatible with. This requires <code>position</code> and <code>st</code> attributes.\n *\n * @type VertexFormat\n *\n * @constant\n */\nPolylineMaterialAppearance.VERTEX_FORMAT = VertexFormat.POSITION_AND_ST;\n\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link PolylineMaterialAppearance},\n * this is derived from {@link PolylineMaterialAppearance#fragmentShaderSource} and {@link PolylineMaterialAppearance#material}.\n *\n * @function\n *\n * @returns {string} The full GLSL fragment shader source.\n */\nPolylineMaterialAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link PolylineMaterialAppearance#translucent} and {@link Material#isTranslucent}.\n *\n * @function\n *\n * @returns {boolean} <code>true</code> if the appearance is translucent.\n */\nPolylineMaterialAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {object} The render state.\n */\nPolylineMaterialAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\nexport default PolylineMaterialAppearance;","map":{"version":3,"names":["defaultValue","defined","FeatureDetection","VertexFormat","PolylineMaterialAppearanceVS","PolylineCommon","PolylineFS","Appearance","Material","defaultVertexShaderSource","defaultFragmentShaderSource","isInternetExplorer","PolylineMaterialAppearance","options","EMPTY_OBJECT","translucent","closed","vertexFormat","VERTEX_FORMAT","material","fromType","ColorType","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","getDefaultRenderState","renderState","_closed","_vertexFormat","Object","defineProperties","prototype","get","vs","shaderSource","search","POSITION_AND_ST","getFragmentShaderSource","isTranslucent","getRenderState"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/PolylineMaterialAppearance.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport FeatureDetection from \"../Core/FeatureDetection.js\";\nimport VertexFormat from \"../Core/VertexFormat.js\";\nimport PolylineMaterialAppearanceVS from \"../Shaders/Appearances/PolylineMaterialAppearanceVS.js\";\nimport PolylineCommon from \"../Shaders/PolylineCommon.js\";\nimport PolylineFS from \"../Shaders/PolylineFS.js\";\nimport Appearance from \"./Appearance.js\";\nimport Material from \"./Material.js\";\n\nlet defaultVertexShaderSource = `${PolylineCommon}\\n${PolylineMaterialAppearanceVS}`;\nconst defaultFragmentShaderSource = PolylineFS;\n\nif (!FeatureDetection.isInternetExplorer()) {\n  defaultVertexShaderSource = `#define CLIP_POLYLINE \\n${defaultVertexShaderSource}`;\n}\n\n/**\n * An appearance for {@link PolylineGeometry} that supports shading with materials.\n *\n * @alias PolylineMaterialAppearance\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link PolylineMaterialAppearance#renderState} has alpha blending enabled.\n * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n * @param {string} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {string} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {object} [options.renderState] Optional render state to override the default render state.\n *\n * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n *\n * @example\n * const primitive = new Cesium.Primitive({\n *   geometryInstances : new Cesium.GeometryInstance({\n *     geometry : new Cesium.PolylineGeometry({\n *       positions : Cesium.Cartesian3.fromDegreesArray([\n *         0.0, 0.0,\n *         5.0, 0.0\n *       ]),\n *       width : 10.0,\n *       vertexFormat : Cesium.PolylineMaterialAppearance.VERTEX_FORMAT\n *     })\n *   }),\n *   appearance : new Cesium.PolylineMaterialAppearance({\n *     material : Cesium.Material.fromType('Color')\n *   })\n * });\n */\nfunction PolylineMaterialAppearance(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const translucent = defaultValue(options.translucent, true);\n  const closed = false;\n  const vertexFormat = PolylineMaterialAppearance.VERTEX_FORMAT;\n\n  /**\n   * The material used to determine the fragment color.  Unlike other {@link PolylineMaterialAppearance}\n   * properties, this is not read-only, so an appearance's material can change on the fly.\n   *\n   * @type Material\n   *\n   * @default {@link Material.ColorType}\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = defined(options.material)\n    ? options.material\n    : Material.fromType(Material.ColorType);\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent so\n   * {@link PolylineMaterialAppearance#renderState} has alpha blending enabled.\n   *\n   * @type {boolean}\n   *\n   * @default true\n   */\n  this.translucent = translucent;\n\n  this._vertexShaderSource = defaultValue(\n    options.vertexShaderSource,\n    defaultVertexShaderSource,\n  );\n  this._fragmentShaderSource = defaultValue(\n    options.fragmentShaderSource,\n    defaultFragmentShaderSource,\n  );\n  this._renderState = Appearance.getDefaultRenderState(\n    translucent,\n    closed,\n    options.renderState,\n  );\n  this._closed = closed;\n\n  // Non-derived members\n\n  this._vertexFormat = vertexFormat;\n}\n\nObject.defineProperties(PolylineMaterialAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      let vs = this._vertexShaderSource;\n      if (\n        this.material.shaderSource.search(/in\\s+float\\s+v_polylineAngle;/g) !==\n        -1\n      ) {\n        vs = `#define POLYLINE_DASH\\n${vs}`;\n      }\n      return vs;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {string}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link PolylineMaterialAppearance}\n   * instance, or it is set implicitly via {@link PolylineMaterialAppearance#translucent}\n   * and {@link PolylineMaterialAppearance#closed}.\n   * </p>\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link PolylineMaterialAppearance#renderState} has backface culling enabled.\n   * This is always <code>false</code> for <code>PolylineMaterialAppearance</code>.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can't have less.\n   *\n   * @memberof PolylineMaterialAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link PolylineMaterialAppearance.VERTEX_FORMAT}\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    },\n  },\n});\n\n/**\n * The {@link VertexFormat} that all {@link PolylineMaterialAppearance} instances\n * are compatible with. This requires <code>position</code> and <code>st</code> attributes.\n *\n * @type VertexFormat\n *\n * @constant\n */\nPolylineMaterialAppearance.VERTEX_FORMAT = VertexFormat.POSITION_AND_ST;\n\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link PolylineMaterialAppearance},\n * this is derived from {@link PolylineMaterialAppearance#fragmentShaderSource} and {@link PolylineMaterialAppearance#material}.\n *\n * @function\n *\n * @returns {string} The full GLSL fragment shader source.\n */\nPolylineMaterialAppearance.prototype.getFragmentShaderSource =\n  Appearance.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link PolylineMaterialAppearance#translucent} and {@link Material#isTranslucent}.\n *\n * @function\n *\n * @returns {boolean} <code>true</code> if the appearance is translucent.\n */\nPolylineMaterialAppearance.prototype.isTranslucent =\n  Appearance.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {object} The render state.\n */\nPolylineMaterialAppearance.prototype.getRenderState =\n  Appearance.prototype.getRenderState;\nexport default PolylineMaterialAppearance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}