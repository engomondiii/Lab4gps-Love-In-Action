{"ast":null,"code":"import ForEach from \"./ForEach.js\";\nimport Check from \"../../Core/Check.js\";\nimport defined from \"../../Core/defined.js\";\n\n/**\n * Calls the provider handler function on each texture used by the material.\n * Mimics the behavior of functions in gltf-pipeline ForEach.\n * @param {object} material The glTF material.\n * @param {forEachTextureInMaterial~handler} handler Function that is called for each texture in the material.\n *\n * @private\n */\nfunction forEachTextureInMaterial(material, handler) {\n  Check.typeOf.object(\"material\", material);\n  Check.defined(\"handler\", handler);\n\n  // Metallic roughness\n  const pbrMetallicRoughness = material.pbrMetallicRoughness;\n  if (defined(pbrMetallicRoughness)) {\n    if (defined(pbrMetallicRoughness.baseColorTexture)) {\n      const textureInfo = pbrMetallicRoughness.baseColorTexture;\n      const value = handler(textureInfo.index, textureInfo);\n      if (defined(value)) {\n        return value;\n      }\n    }\n    if (defined(pbrMetallicRoughness.metallicRoughnessTexture)) {\n      const textureInfo = pbrMetallicRoughness.metallicRoughnessTexture;\n      const value = handler(textureInfo.index, textureInfo);\n      if (defined(value)) {\n        return value;\n      }\n    }\n  }\n  const {\n    extensions\n  } = material;\n  if (defined(extensions)) {\n    // Spec gloss extension\n    const pbrSpecularGlossiness = extensions.KHR_materials_pbrSpecularGlossiness;\n    if (defined(pbrSpecularGlossiness)) {\n      if (defined(pbrSpecularGlossiness.diffuseTexture)) {\n        const textureInfo = pbrSpecularGlossiness.diffuseTexture;\n        const value = handler(textureInfo.index, textureInfo);\n        if (defined(value)) {\n          return value;\n        }\n      }\n      if (defined(pbrSpecularGlossiness.specularGlossinessTexture)) {\n        const textureInfo = pbrSpecularGlossiness.specularGlossinessTexture;\n        const value = handler(textureInfo.index, textureInfo);\n        if (defined(value)) {\n          return value;\n        }\n      }\n    }\n\n    // Specular extension\n    const specular = extensions.KHR_materials_specular;\n    if (defined(specular)) {\n      const {\n        specularTexture,\n        specularColorTexture\n      } = specular;\n      if (defined(specularTexture)) {\n        const value = handler(specularTexture.index, specularTexture);\n        if (defined(value)) {\n          return value;\n        }\n      }\n      if (defined(specularColorTexture)) {\n        const value = handler(specularColorTexture.index, specularColorTexture);\n        if (defined(value)) {\n          return value;\n        }\n      }\n    }\n\n    // Materials common extension (may be present in models converted from glTF 1.0)\n    const materialsCommon = extensions.KHR_materials_common;\n    if (defined(materialsCommon) && defined(materialsCommon.values)) {\n      const {\n        diffuse,\n        ambient,\n        emission,\n        specular\n      } = materialsCommon.values;\n      if (defined(diffuse) && defined(diffuse.index)) {\n        const value = handler(diffuse.index, diffuse);\n        if (defined(value)) {\n          return value;\n        }\n      }\n      if (defined(ambient) && defined(ambient.index)) {\n        const value = handler(ambient.index, ambient);\n        if (defined(value)) {\n          return value;\n        }\n      }\n      if (defined(emission) && defined(emission.index)) {\n        const value = handler(emission.index, emission);\n        if (defined(value)) {\n          return value;\n        }\n      }\n      if (defined(specular) && defined(specular.index)) {\n        const value = handler(specular.index, specular);\n        if (defined(value)) {\n          return value;\n        }\n      }\n    }\n  }\n\n  // KHR_techniques_webgl extension\n  const value = ForEach.materialValue(material, function (materialValue) {\n    if (defined(materialValue.index)) {\n      const value = handler(materialValue.index, materialValue);\n      if (defined(value)) {\n        return value;\n      }\n    }\n  });\n  if (defined(value)) {\n    return value;\n  }\n\n  // Top level textures\n  if (defined(material.emissiveTexture)) {\n    const textureInfo = material.emissiveTexture;\n    const value = handler(textureInfo.index, textureInfo);\n    if (defined(value)) {\n      return value;\n    }\n  }\n  if (defined(material.normalTexture)) {\n    const textureInfo = material.normalTexture;\n    const value = handler(textureInfo.index, textureInfo);\n    if (defined(value)) {\n      return value;\n    }\n  }\n  if (defined(material.occlusionTexture)) {\n    const textureInfo = material.occlusionTexture;\n    const value = handler(textureInfo.index, textureInfo);\n    if (defined(value)) {\n      return value;\n    }\n  }\n}\n\n/**\n * Function that is called for each texture in the material. If this function returns a value the for each stops and returns that value.\n * @callback forEachTextureInMaterial~handler\n * @param {number} The texture index.\n * @param {object} The texture info object.\n *\n * @private\n */\n\nexport default forEachTextureInMaterial;","map":{"version":3,"names":["ForEach","Check","defined","forEachTextureInMaterial","material","handler","typeOf","object","pbrMetallicRoughness","baseColorTexture","textureInfo","value","index","metallicRoughnessTexture","extensions","pbrSpecularGlossiness","KHR_materials_pbrSpecularGlossiness","diffuseTexture","specularGlossinessTexture","specular","KHR_materials_specular","specularTexture","specularColorTexture","materialsCommon","KHR_materials_common","values","diffuse","ambient","emission","materialValue","emissiveTexture","normalTexture","occlusionTexture"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Scene/GltfPipeline/forEachTextureInMaterial.js"],"sourcesContent":["import ForEach from \"./ForEach.js\";\nimport Check from \"../../Core/Check.js\";\nimport defined from \"../../Core/defined.js\";\n\n/**\n * Calls the provider handler function on each texture used by the material.\n * Mimics the behavior of functions in gltf-pipeline ForEach.\n * @param {object} material The glTF material.\n * @param {forEachTextureInMaterial~handler} handler Function that is called for each texture in the material.\n *\n * @private\n */\nfunction forEachTextureInMaterial(material, handler) {\n  Check.typeOf.object(\"material\", material);\n  Check.defined(\"handler\", handler);\n\n  // Metallic roughness\n  const pbrMetallicRoughness = material.pbrMetallicRoughness;\n  if (defined(pbrMetallicRoughness)) {\n    if (defined(pbrMetallicRoughness.baseColorTexture)) {\n      const textureInfo = pbrMetallicRoughness.baseColorTexture;\n      const value = handler(textureInfo.index, textureInfo);\n      if (defined(value)) {\n        return value;\n      }\n    }\n    if (defined(pbrMetallicRoughness.metallicRoughnessTexture)) {\n      const textureInfo = pbrMetallicRoughness.metallicRoughnessTexture;\n      const value = handler(textureInfo.index, textureInfo);\n      if (defined(value)) {\n        return value;\n      }\n    }\n  }\n\n  const { extensions } = material;\n  if (defined(extensions)) {\n    // Spec gloss extension\n    const pbrSpecularGlossiness =\n      extensions.KHR_materials_pbrSpecularGlossiness;\n    if (defined(pbrSpecularGlossiness)) {\n      if (defined(pbrSpecularGlossiness.diffuseTexture)) {\n        const textureInfo = pbrSpecularGlossiness.diffuseTexture;\n        const value = handler(textureInfo.index, textureInfo);\n        if (defined(value)) {\n          return value;\n        }\n      }\n      if (defined(pbrSpecularGlossiness.specularGlossinessTexture)) {\n        const textureInfo = pbrSpecularGlossiness.specularGlossinessTexture;\n        const value = handler(textureInfo.index, textureInfo);\n        if (defined(value)) {\n          return value;\n        }\n      }\n    }\n\n    // Specular extension\n    const specular = extensions.KHR_materials_specular;\n    if (defined(specular)) {\n      const { specularTexture, specularColorTexture } = specular;\n      if (defined(specularTexture)) {\n        const value = handler(specularTexture.index, specularTexture);\n        if (defined(value)) {\n          return value;\n        }\n      }\n      if (defined(specularColorTexture)) {\n        const value = handler(specularColorTexture.index, specularColorTexture);\n        if (defined(value)) {\n          return value;\n        }\n      }\n    }\n\n    // Materials common extension (may be present in models converted from glTF 1.0)\n    const materialsCommon = extensions.KHR_materials_common;\n    if (defined(materialsCommon) && defined(materialsCommon.values)) {\n      const { diffuse, ambient, emission, specular } = materialsCommon.values;\n      if (defined(diffuse) && defined(diffuse.index)) {\n        const value = handler(diffuse.index, diffuse);\n        if (defined(value)) {\n          return value;\n        }\n      }\n      if (defined(ambient) && defined(ambient.index)) {\n        const value = handler(ambient.index, ambient);\n        if (defined(value)) {\n          return value;\n        }\n      }\n      if (defined(emission) && defined(emission.index)) {\n        const value = handler(emission.index, emission);\n        if (defined(value)) {\n          return value;\n        }\n      }\n      if (defined(specular) && defined(specular.index)) {\n        const value = handler(specular.index, specular);\n        if (defined(value)) {\n          return value;\n        }\n      }\n    }\n  }\n\n  // KHR_techniques_webgl extension\n  const value = ForEach.materialValue(material, function (materialValue) {\n    if (defined(materialValue.index)) {\n      const value = handler(materialValue.index, materialValue);\n      if (defined(value)) {\n        return value;\n      }\n    }\n  });\n  if (defined(value)) {\n    return value;\n  }\n\n  // Top level textures\n  if (defined(material.emissiveTexture)) {\n    const textureInfo = material.emissiveTexture;\n    const value = handler(textureInfo.index, textureInfo);\n    if (defined(value)) {\n      return value;\n    }\n  }\n\n  if (defined(material.normalTexture)) {\n    const textureInfo = material.normalTexture;\n    const value = handler(textureInfo.index, textureInfo);\n    if (defined(value)) {\n      return value;\n    }\n  }\n\n  if (defined(material.occlusionTexture)) {\n    const textureInfo = material.occlusionTexture;\n    const value = handler(textureInfo.index, textureInfo);\n    if (defined(value)) {\n      return value;\n    }\n  }\n}\n\n/**\n * Function that is called for each texture in the material. If this function returns a value the for each stops and returns that value.\n * @callback forEachTextureInMaterial~handler\n * @param {number} The texture index.\n * @param {object} The texture info object.\n *\n * @private\n */\n\nexport default forEachTextureInMaterial;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}