{"ast":null,"code":"import ClockRange from \"./ClockRange.js\";\nimport ClockStep from \"./ClockStep.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Event from \"./Event.js\";\nimport getTimestamp from \"./getTimestamp.js\";\nimport JulianDate from \"./JulianDate.js\";\n\n/**\n * A simple clock for keeping track of simulated time.\n *\n * @alias Clock\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {JulianDate} [options.startTime] The start time of the clock.\n * @param {JulianDate} [options.stopTime] The stop time of the clock.\n * @param {JulianDate} [options.currentTime] The current time.\n * @param {number} [options.multiplier=1.0] Determines how much time advances when {@link Clock#tick} is called, negative values allow for advancing backwards.\n * @param {ClockStep} [options.clockStep=ClockStep.SYSTEM_CLOCK_MULTIPLIER] Determines if calls to {@link Clock#tick} are frame dependent or system clock dependent.\n * @param {ClockRange} [options.clockRange=ClockRange.UNBOUNDED] Determines how the clock should behave when {@link Clock#startTime} or {@link Clock#stopTime} is reached.\n * @param {boolean} [options.canAnimate=true] Indicates whether {@link Clock#tick} can advance time.  This could be false if data is being buffered, for example.  The clock will only tick when both {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n * @param {boolean} [options.shouldAnimate=false] Indicates whether {@link Clock#tick} should attempt to advance time.  The clock will only tick when both {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n *\n * @exception {DeveloperError} startTime must come before stopTime.\n *\n *\n * @example\n * // Create a clock that loops on Christmas day 2013 and runs in real-time.\n * const clock = new Cesium.Clock({\n *    startTime : Cesium.JulianDate.fromIso8601(\"2013-12-25\"),\n *    currentTime : Cesium.JulianDate.fromIso8601(\"2013-12-25\"),\n *    stopTime : Cesium.JulianDate.fromIso8601(\"2013-12-26\"),\n *    clockRange : Cesium.ClockRange.LOOP_STOP,\n *    clockStep : Cesium.ClockStep.SYSTEM_CLOCK_MULTIPLIER\n * });\n *\n * @see ClockStep\n * @see ClockRange\n * @see JulianDate\n */\nfunction Clock(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let currentTime = options.currentTime;\n  let startTime = options.startTime;\n  let stopTime = options.stopTime;\n  if (!defined(currentTime)) {\n    // if not specified, current time is the start time,\n    // or if that is not specified, 1 day before the stop time,\n    // or if that is not specified, then now.\n    if (defined(startTime)) {\n      currentTime = JulianDate.clone(startTime);\n    } else if (defined(stopTime)) {\n      currentTime = JulianDate.addDays(stopTime, -1.0, new JulianDate());\n    } else {\n      currentTime = JulianDate.now();\n    }\n  } else {\n    currentTime = JulianDate.clone(currentTime);\n  }\n  if (!defined(startTime)) {\n    // if not specified, start time is the current time\n    // (as determined above)\n    startTime = JulianDate.clone(currentTime);\n  } else {\n    startTime = JulianDate.clone(startTime);\n  }\n  if (!defined(stopTime)) {\n    // if not specified, stop time is 1 day after the start time\n    // (as determined above)\n    stopTime = JulianDate.addDays(startTime, 1.0, new JulianDate());\n  } else {\n    stopTime = JulianDate.clone(stopTime);\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (JulianDate.greaterThan(startTime, stopTime)) {\n    throw new DeveloperError(\"startTime must come before stopTime.\");\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The start time of the clock.\n   * @type {JulianDate}\n   */\n  this.startTime = startTime;\n\n  /**\n   * The stop time of the clock.\n   * @type {JulianDate}\n   */\n  this.stopTime = stopTime;\n\n  /**\n   * Determines how the clock should behave when\n   * {@link Clock#startTime} or {@link Clock#stopTime}\n   * is reached.\n   * @type {ClockRange}\n   * @default {@link ClockRange.UNBOUNDED}\n   */\n  this.clockRange = defaultValue(options.clockRange, ClockRange.UNBOUNDED);\n\n  /**\n   * Indicates whether {@link Clock#tick} can advance time.  This could be false if data is being buffered,\n   * for example.  The clock will only advance time when both\n   * {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n   * @type {boolean}\n   * @default true\n   */\n  this.canAnimate = defaultValue(options.canAnimate, true);\n\n  /**\n   * An {@link Event} that is fired whenever {@link Clock#tick} is called.\n   * @type {Event}\n   */\n  this.onTick = new Event();\n  /**\n   * An {@link Event} that is fired whenever {@link Clock#stopTime} is reached.\n   * @type {Event}\n   */\n  this.onStop = new Event();\n  this._currentTime = undefined;\n  this._multiplier = undefined;\n  this._clockStep = undefined;\n  this._shouldAnimate = undefined;\n  this._lastSystemTime = getTimestamp();\n\n  // set values using the property setters to\n  // make values consistent.\n\n  this.currentTime = currentTime;\n  this.multiplier = defaultValue(options.multiplier, 1.0);\n  this.shouldAnimate = defaultValue(options.shouldAnimate, false);\n  this.clockStep = defaultValue(options.clockStep, ClockStep.SYSTEM_CLOCK_MULTIPLIER);\n}\nObject.defineProperties(Clock.prototype, {\n  /**\n   * The current time.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {JulianDate}\n   */\n  currentTime: {\n    get: function () {\n      return this._currentTime;\n    },\n    set: function (value) {\n      if (JulianDate.equals(this._currentTime, value)) {\n        return;\n      }\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n      this._currentTime = value;\n    }\n  },\n  /**\n   * Gets or sets how much time advances when {@link Clock#tick} is called. Negative values allow for advancing backwards.\n   * If {@link Clock#clockStep} is set to {@link ClockStep.TICK_DEPENDENT}, this is the number of seconds to advance.\n   * If {@link Clock#clockStep} is set to {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}, this value is multiplied by the\n   * elapsed system time since the last call to {@link Clock#tick}.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  multiplier: {\n    get: function () {\n      return this._multiplier;\n    },\n    set: function (value) {\n      if (this._multiplier === value) {\n        return;\n      }\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n      this._multiplier = value;\n    }\n  },\n  /**\n   * Determines if calls to {@link Clock#tick} are frame dependent or system clock dependent.\n   * Changing this property to {@link ClockStep.SYSTEM_CLOCK} will set\n   * {@link Clock#multiplier} to 1.0, {@link Clock#shouldAnimate} to true, and\n   * {@link Clock#currentTime} to the current system clock time.\n   * @memberof Clock.prototype\n   * @type ClockStep\n   * @default {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}\n   */\n  clockStep: {\n    get: function () {\n      return this._clockStep;\n    },\n    set: function (value) {\n      if (value === ClockStep.SYSTEM_CLOCK) {\n        this._multiplier = 1.0;\n        this._shouldAnimate = true;\n        this._currentTime = JulianDate.now();\n      }\n      this._clockStep = value;\n    }\n  },\n  /**\n   * Indicates whether {@link Clock#tick} should attempt to advance time.\n   * The clock will only advance time when both\n   * {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {boolean}\n   * @default false\n   */\n  shouldAnimate: {\n    get: function () {\n      return this._shouldAnimate;\n    },\n    set: function (value) {\n      if (this._shouldAnimate === value) {\n        return;\n      }\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n      this._shouldAnimate = value;\n    }\n  }\n});\n\n/**\n * Advances the clock from the current time based on the current configuration options.\n * tick should be called every frame, regardless of whether animation is taking place\n * or not.  To control animation, use the {@link Clock#shouldAnimate} property.\n *\n * @returns {JulianDate} The new value of the {@link Clock#currentTime} property.\n */\nClock.prototype.tick = function () {\n  const currentSystemTime = getTimestamp();\n  let currentTime = JulianDate.clone(this._currentTime);\n  if (this.canAnimate && this._shouldAnimate) {\n    const clockStep = this._clockStep;\n    if (clockStep === ClockStep.SYSTEM_CLOCK) {\n      currentTime = JulianDate.now(currentTime);\n    } else {\n      const multiplier = this._multiplier;\n      if (clockStep === ClockStep.TICK_DEPENDENT) {\n        currentTime = JulianDate.addSeconds(currentTime, multiplier, currentTime);\n      } else {\n        const milliseconds = currentSystemTime - this._lastSystemTime;\n        currentTime = JulianDate.addSeconds(currentTime, multiplier * (milliseconds / 1000.0), currentTime);\n      }\n      const clockRange = this.clockRange;\n      const startTime = this.startTime;\n      const stopTime = this.stopTime;\n      if (clockRange === ClockRange.CLAMPED) {\n        if (JulianDate.lessThan(currentTime, startTime)) {\n          currentTime = JulianDate.clone(startTime, currentTime);\n        } else if (JulianDate.greaterThan(currentTime, stopTime)) {\n          currentTime = JulianDate.clone(stopTime, currentTime);\n          this.onStop.raiseEvent(this);\n        }\n      } else if (clockRange === ClockRange.LOOP_STOP) {\n        if (JulianDate.lessThan(currentTime, startTime)) {\n          currentTime = JulianDate.clone(startTime, currentTime);\n        }\n        while (JulianDate.greaterThan(currentTime, stopTime)) {\n          currentTime = JulianDate.addSeconds(startTime, JulianDate.secondsDifference(currentTime, stopTime), currentTime);\n          this.onStop.raiseEvent(this);\n        }\n      }\n    }\n  }\n  this._currentTime = currentTime;\n  this._lastSystemTime = currentSystemTime;\n  this.onTick.raiseEvent(this);\n  return currentTime;\n};\nexport default Clock;","map":{"version":3,"names":["ClockRange","ClockStep","defaultValue","defined","DeveloperError","Event","getTimestamp","JulianDate","Clock","options","EMPTY_OBJECT","currentTime","startTime","stopTime","clone","addDays","now","greaterThan","clockRange","UNBOUNDED","canAnimate","onTick","onStop","_currentTime","undefined","_multiplier","_clockStep","_shouldAnimate","_lastSystemTime","multiplier","shouldAnimate","clockStep","SYSTEM_CLOCK_MULTIPLIER","Object","defineProperties","prototype","get","set","value","equals","SYSTEM_CLOCK","tick","currentSystemTime","TICK_DEPENDENT","addSeconds","milliseconds","CLAMPED","lessThan","raiseEvent","LOOP_STOP","secondsDifference"],"sources":["/Users/mac/Desktop/IWL_Fresh_Start/Lab4gps-Love-In-Action/node_modules/@cesium/engine/Source/Core/Clock.js"],"sourcesContent":["import ClockRange from \"./ClockRange.js\";\nimport ClockStep from \"./ClockStep.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Event from \"./Event.js\";\nimport getTimestamp from \"./getTimestamp.js\";\nimport JulianDate from \"./JulianDate.js\";\n\n/**\n * A simple clock for keeping track of simulated time.\n *\n * @alias Clock\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {JulianDate} [options.startTime] The start time of the clock.\n * @param {JulianDate} [options.stopTime] The stop time of the clock.\n * @param {JulianDate} [options.currentTime] The current time.\n * @param {number} [options.multiplier=1.0] Determines how much time advances when {@link Clock#tick} is called, negative values allow for advancing backwards.\n * @param {ClockStep} [options.clockStep=ClockStep.SYSTEM_CLOCK_MULTIPLIER] Determines if calls to {@link Clock#tick} are frame dependent or system clock dependent.\n * @param {ClockRange} [options.clockRange=ClockRange.UNBOUNDED] Determines how the clock should behave when {@link Clock#startTime} or {@link Clock#stopTime} is reached.\n * @param {boolean} [options.canAnimate=true] Indicates whether {@link Clock#tick} can advance time.  This could be false if data is being buffered, for example.  The clock will only tick when both {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n * @param {boolean} [options.shouldAnimate=false] Indicates whether {@link Clock#tick} should attempt to advance time.  The clock will only tick when both {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n *\n * @exception {DeveloperError} startTime must come before stopTime.\n *\n *\n * @example\n * // Create a clock that loops on Christmas day 2013 and runs in real-time.\n * const clock = new Cesium.Clock({\n *    startTime : Cesium.JulianDate.fromIso8601(\"2013-12-25\"),\n *    currentTime : Cesium.JulianDate.fromIso8601(\"2013-12-25\"),\n *    stopTime : Cesium.JulianDate.fromIso8601(\"2013-12-26\"),\n *    clockRange : Cesium.ClockRange.LOOP_STOP,\n *    clockStep : Cesium.ClockStep.SYSTEM_CLOCK_MULTIPLIER\n * });\n *\n * @see ClockStep\n * @see ClockRange\n * @see JulianDate\n */\nfunction Clock(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  let currentTime = options.currentTime;\n  let startTime = options.startTime;\n  let stopTime = options.stopTime;\n\n  if (!defined(currentTime)) {\n    // if not specified, current time is the start time,\n    // or if that is not specified, 1 day before the stop time,\n    // or if that is not specified, then now.\n    if (defined(startTime)) {\n      currentTime = JulianDate.clone(startTime);\n    } else if (defined(stopTime)) {\n      currentTime = JulianDate.addDays(stopTime, -1.0, new JulianDate());\n    } else {\n      currentTime = JulianDate.now();\n    }\n  } else {\n    currentTime = JulianDate.clone(currentTime);\n  }\n\n  if (!defined(startTime)) {\n    // if not specified, start time is the current time\n    // (as determined above)\n    startTime = JulianDate.clone(currentTime);\n  } else {\n    startTime = JulianDate.clone(startTime);\n  }\n\n  if (!defined(stopTime)) {\n    // if not specified, stop time is 1 day after the start time\n    // (as determined above)\n    stopTime = JulianDate.addDays(startTime, 1.0, new JulianDate());\n  } else {\n    stopTime = JulianDate.clone(stopTime);\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (JulianDate.greaterThan(startTime, stopTime)) {\n    throw new DeveloperError(\"startTime must come before stopTime.\");\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The start time of the clock.\n   * @type {JulianDate}\n   */\n  this.startTime = startTime;\n\n  /**\n   * The stop time of the clock.\n   * @type {JulianDate}\n   */\n  this.stopTime = stopTime;\n\n  /**\n   * Determines how the clock should behave when\n   * {@link Clock#startTime} or {@link Clock#stopTime}\n   * is reached.\n   * @type {ClockRange}\n   * @default {@link ClockRange.UNBOUNDED}\n   */\n  this.clockRange = defaultValue(options.clockRange, ClockRange.UNBOUNDED);\n\n  /**\n   * Indicates whether {@link Clock#tick} can advance time.  This could be false if data is being buffered,\n   * for example.  The clock will only advance time when both\n   * {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n   * @type {boolean}\n   * @default true\n   */\n  this.canAnimate = defaultValue(options.canAnimate, true);\n\n  /**\n   * An {@link Event} that is fired whenever {@link Clock#tick} is called.\n   * @type {Event}\n   */\n  this.onTick = new Event();\n  /**\n   * An {@link Event} that is fired whenever {@link Clock#stopTime} is reached.\n   * @type {Event}\n   */\n  this.onStop = new Event();\n\n  this._currentTime = undefined;\n  this._multiplier = undefined;\n  this._clockStep = undefined;\n  this._shouldAnimate = undefined;\n  this._lastSystemTime = getTimestamp();\n\n  // set values using the property setters to\n  // make values consistent.\n\n  this.currentTime = currentTime;\n  this.multiplier = defaultValue(options.multiplier, 1.0);\n  this.shouldAnimate = defaultValue(options.shouldAnimate, false);\n  this.clockStep = defaultValue(\n    options.clockStep,\n    ClockStep.SYSTEM_CLOCK_MULTIPLIER,\n  );\n}\n\nObject.defineProperties(Clock.prototype, {\n  /**\n   * The current time.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {JulianDate}\n   */\n  currentTime: {\n    get: function () {\n      return this._currentTime;\n    },\n    set: function (value) {\n      if (JulianDate.equals(this._currentTime, value)) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._currentTime = value;\n    },\n  },\n\n  /**\n   * Gets or sets how much time advances when {@link Clock#tick} is called. Negative values allow for advancing backwards.\n   * If {@link Clock#clockStep} is set to {@link ClockStep.TICK_DEPENDENT}, this is the number of seconds to advance.\n   * If {@link Clock#clockStep} is set to {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}, this value is multiplied by the\n   * elapsed system time since the last call to {@link Clock#tick}.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {number}\n   * @default 1.0\n   */\n  multiplier: {\n    get: function () {\n      return this._multiplier;\n    },\n    set: function (value) {\n      if (this._multiplier === value) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._multiplier = value;\n    },\n  },\n\n  /**\n   * Determines if calls to {@link Clock#tick} are frame dependent or system clock dependent.\n   * Changing this property to {@link ClockStep.SYSTEM_CLOCK} will set\n   * {@link Clock#multiplier} to 1.0, {@link Clock#shouldAnimate} to true, and\n   * {@link Clock#currentTime} to the current system clock time.\n   * @memberof Clock.prototype\n   * @type ClockStep\n   * @default {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}\n   */\n  clockStep: {\n    get: function () {\n      return this._clockStep;\n    },\n    set: function (value) {\n      if (value === ClockStep.SYSTEM_CLOCK) {\n        this._multiplier = 1.0;\n        this._shouldAnimate = true;\n        this._currentTime = JulianDate.now();\n      }\n\n      this._clockStep = value;\n    },\n  },\n\n  /**\n   * Indicates whether {@link Clock#tick} should attempt to advance time.\n   * The clock will only advance time when both\n   * {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {boolean}\n   * @default false\n   */\n  shouldAnimate: {\n    get: function () {\n      return this._shouldAnimate;\n    },\n    set: function (value) {\n      if (this._shouldAnimate === value) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._shouldAnimate = value;\n    },\n  },\n});\n\n/**\n * Advances the clock from the current time based on the current configuration options.\n * tick should be called every frame, regardless of whether animation is taking place\n * or not.  To control animation, use the {@link Clock#shouldAnimate} property.\n *\n * @returns {JulianDate} The new value of the {@link Clock#currentTime} property.\n */\nClock.prototype.tick = function () {\n  const currentSystemTime = getTimestamp();\n  let currentTime = JulianDate.clone(this._currentTime);\n\n  if (this.canAnimate && this._shouldAnimate) {\n    const clockStep = this._clockStep;\n    if (clockStep === ClockStep.SYSTEM_CLOCK) {\n      currentTime = JulianDate.now(currentTime);\n    } else {\n      const multiplier = this._multiplier;\n\n      if (clockStep === ClockStep.TICK_DEPENDENT) {\n        currentTime = JulianDate.addSeconds(\n          currentTime,\n          multiplier,\n          currentTime,\n        );\n      } else {\n        const milliseconds = currentSystemTime - this._lastSystemTime;\n        currentTime = JulianDate.addSeconds(\n          currentTime,\n          multiplier * (milliseconds / 1000.0),\n          currentTime,\n        );\n      }\n\n      const clockRange = this.clockRange;\n      const startTime = this.startTime;\n      const stopTime = this.stopTime;\n\n      if (clockRange === ClockRange.CLAMPED) {\n        if (JulianDate.lessThan(currentTime, startTime)) {\n          currentTime = JulianDate.clone(startTime, currentTime);\n        } else if (JulianDate.greaterThan(currentTime, stopTime)) {\n          currentTime = JulianDate.clone(stopTime, currentTime);\n          this.onStop.raiseEvent(this);\n        }\n      } else if (clockRange === ClockRange.LOOP_STOP) {\n        if (JulianDate.lessThan(currentTime, startTime)) {\n          currentTime = JulianDate.clone(startTime, currentTime);\n        }\n        while (JulianDate.greaterThan(currentTime, stopTime)) {\n          currentTime = JulianDate.addSeconds(\n            startTime,\n            JulianDate.secondsDifference(currentTime, stopTime),\n            currentTime,\n          );\n          this.onStop.raiseEvent(this);\n        }\n      }\n    }\n  }\n\n  this._currentTime = currentTime;\n  this._lastSystemTime = currentSystemTime;\n  this.onTick.raiseEvent(this);\n  return currentTime;\n};\nexport default Clock;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}